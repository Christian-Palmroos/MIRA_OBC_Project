
miracode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017438  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e8  080175f8  080175f8  000275f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017de0  08017de0  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  08017de0  08017de0  00027de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017de8  08017de8  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017de8  08017de8  00027de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017dec  08017dec  00027dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  08017df0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c1c  20000354  08018144  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20002f70  08018144  00032f70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030196  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d55  00000000  00000000  0006051a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002630  00000000  00000000  00066270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023e8  00000000  00000000  000688a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033a16  00000000  00000000  0006ac88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031fbe  00000000  00000000  0009e69e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011e760  00000000  00000000  000d065c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001eedbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b5f4  00000000  00000000  001eee0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001fa400  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001fa4cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000354 	.word	0x20000354
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080175e0 	.word	0x080175e0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000358 	.word	0x20000358
 80001fc:	080175e0 	.word	0x080175e0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c8c:	f000 b974 	b.w	8000f78 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468e      	mov	lr, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14d      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4694      	mov	ip, r2
 8000cba:	d969      	bls.n	8000d90 <__udivmoddi4+0xe8>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b152      	cbz	r2, 8000cd8 <__udivmoddi4+0x30>
 8000cc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa20 f101 	lsr.w	r1, r0, r1
 8000cce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	0c21      	lsrs	r1, r4, #16
 8000cde:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce2:	fa1f f78c 	uxth.w	r7, ip
 8000ce6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	fb06 f107 	mul.w	r1, r6, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cfe:	f080 811f 	bcs.w	8000f40 <__udivmoddi4+0x298>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 811c 	bls.w	8000f40 <__udivmoddi4+0x298>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f707 	mul.w	r7, r0, r7
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x92>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2c:	f080 810a 	bcs.w	8000f44 <__udivmoddi4+0x29c>
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	f240 8107 	bls.w	8000f44 <__udivmoddi4+0x29c>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	1be4      	subs	r4, r4, r7
 8000d40:	2600      	movs	r6, #0
 8000d42:	b11d      	cbz	r5, 8000d4c <__udivmoddi4+0xa4>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xc2>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80ef 	beq.w	8000f3a <__udivmoddi4+0x292>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x160>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd4>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80f9 	bhi.w	8000f6e <__udivmoddi4+0x2c6>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	469e      	mov	lr, r3
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa4>
 8000d8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xec>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 8092 	bne.w	8000ec2 <__udivmoddi4+0x21a>
 8000d9e:	eba1 010c 	sub.w	r1, r1, ip
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2601      	movs	r6, #1
 8000dac:	0c20      	lsrs	r0, r4, #16
 8000dae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db2:	fb07 1113 	mls	r1, r7, r3, r1
 8000db6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dba:	fb0e f003 	mul.w	r0, lr, r3
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x12a>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2c0>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1110 	mls	r1, r7, r0, r1
 8000de0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x156>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x154>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2ca>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e06:	e79c      	b.n	8000d42 <__udivmoddi4+0x9a>
 8000e08:	f1c6 0720 	rsb	r7, r6, #32
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	40f9      	lsrs	r1, r7
 8000e22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e26:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2e:	0c20      	lsrs	r0, r4, #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fb09 1118 	mls	r1, r9, r8, r1
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e40:	4288      	cmp	r0, r1
 8000e42:	fa02 f206 	lsl.w	r2, r2, r6
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b8>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2bc>
 8000e54:	4288      	cmp	r0, r1
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2bc>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e68:	fb09 1110 	mls	r1, r9, r0, r1
 8000e6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	458e      	cmp	lr, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1e2>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2b4>
 8000e82:	458e      	cmp	lr, r1
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2b4>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e92:	eba1 010e 	sub.w	r1, r1, lr
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46a6      	mov	lr, r4
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x2a4>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x2a0>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x212>
 8000ea2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eaa:	fa01 f707 	lsl.w	r7, r1, r7
 8000eae:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb2:	40f1      	lsrs	r1, r6
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	f1c2 0320 	rsb	r3, r2, #32
 8000ec6:	40d8      	lsrs	r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee4:	0c0b      	lsrs	r3, r1, #16
 8000ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eea:	fb00 f60e 	mul.w	r6, r0, lr
 8000eee:	429e      	cmp	r6, r3
 8000ef0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x260>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b8>
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b8>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	b289      	uxth	r1, r1
 8000f0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f10:	fb07 3316 	mls	r3, r7, r6, r3
 8000f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f18:	fb06 f30e 	mul.w	r3, r6, lr
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x28a>
 8000f20:	eb1c 0101 	adds.w	r1, ip, r1
 8000f24:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0x104>
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e705      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e3      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6f8      	b.n	8000d3a <__udivmoddi4+0x92>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f58:	4646      	mov	r6, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x28a>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1e2>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b8>
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x12c>
 8000f6e:	4630      	mov	r0, r6
 8000f70:	e709      	b.n	8000d86 <__udivmoddi4+0xde>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x156>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f001 fbd6 	bl	800273a <null_ptr_check>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d131      	bne.n	8000ffe <bmp3_init+0x82>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7a1b      	ldrb	r3, [r3, #8]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d003      	beq.n	8000faa <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	729a      	strb	r2, [r3, #10]
 8000fa8:	e002      	b.n	8000fb0 <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	729a      	strb	r2, [r3, #10]

	/* Read the chip-id of bmp3 sensor */
        //rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
	
        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 8000fb0:	f107 010e 	add.w	r1, r7, #14
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f000 f826 	bl	800100a <bmp3_get_regs>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d119      	bne.n	8000ffe <bmp3_init+0x82>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 8000fca:	7bbb      	ldrb	r3, [r7, #14]
 8000fcc:	2b50      	cmp	r3, #80	; 0x50
 8000fce:	d002      	beq.n	8000fd6 <bmp3_init+0x5a>
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
 8000fd2:	2b60      	cmp	r3, #96	; 0x60
 8000fd4:	d111      	bne.n	8000ffa <bmp3_init+0x7e>
            {
                dev->chip_id = chip_id;
 8000fd6:	7bba      	ldrb	r2, [r7, #14]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 f9ae 	bl	800133e <bmp3_soft_reset>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8000fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d107      	bne.n	8000ffe <bmp3_init+0x82>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 fb4e 	bl	8001690 <get_calib_data>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8000ff8:	e001      	b.n	8000ffe <bmp3_init+0x82>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 8000ffa:	23f9      	movs	r3, #249	; 0xf9
 8000ffc:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 800100a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800100e:	b08b      	sub	sp, #44	; 0x2c
 8001010:	af00      	add	r7, sp, #0
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	4603      	mov	r3, r0
 800101a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800101c:	6838      	ldr	r0, [r7, #0]
 800101e:	f001 fb8c 	bl	800273a <null_ptr_check>
 8001022:	4603      	mov	r3, r0
 8001024:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 8001028:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800102c:	2b00      	cmp	r3, #0
 800102e:	d172      	bne.n	8001116 <bmp3_get_regs+0x10c>
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d06f      	beq.n	8001116 <bmp3_get_regs+0x10c>
    {
 8001036:	466b      	mov	r3, sp
 8001038:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	7a9b      	ldrb	r3, [r3, #10]
 800103e:	461a      	mov	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4413      	add	r3, r2
 8001044:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	7a9b      	ldrb	r3, [r3, #10]
 800104a:	461a      	mov	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	18d1      	adds	r1, r2, r3
 8001050:	460b      	mov	r3, r1
 8001052:	3b01      	subs	r3, #1
 8001054:	61bb      	str	r3, [r7, #24]
 8001056:	2300      	movs	r3, #0
 8001058:	4688      	mov	r8, r1
 800105a:	4699      	mov	r9, r3
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001068:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800106c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001070:	2300      	movs	r3, #0
 8001072:	460c      	mov	r4, r1
 8001074:	461d      	mov	r5, r3
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	00eb      	lsls	r3, r5, #3
 8001080:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001084:	00e2      	lsls	r2, r4, #3
 8001086:	1dcb      	adds	r3, r1, #7
 8001088:	08db      	lsrs	r3, r3, #3
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	ebad 0d03 	sub.w	sp, sp, r3
 8001090:	466b      	mov	r3, sp
 8001092:	3300      	adds	r3, #0
 8001094:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	7a1b      	ldrb	r3, [r3, #8]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d025      	beq.n	80010ea <bmp3_get_regs+0xe0>
        {
            reg_addr = reg_addr | 0x80;
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010a4:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	68dc      	ldr	r4, [r3, #12]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	7bf8      	ldrb	r0, [r7, #15]
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	6979      	ldr	r1, [r7, #20]
 80010b4:	47a0      	blx	r4
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
 80010c2:	e00d      	b.n	80010e0 <bmp3_get_regs+0xd6>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	7a9b      	ldrb	r3, [r3, #10]
 80010c8:	461a      	mov	r2, r3
 80010ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010cc:	441a      	add	r2, r3
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	440b      	add	r3, r1
 80010d4:	6979      	ldr	r1, [r7, #20]
 80010d6:	5c8a      	ldrb	r2, [r1, r2]
 80010d8:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	3301      	adds	r3, #1
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
 80010e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d3ed      	bcc.n	80010c4 <bmp3_get_regs+0xba>
 80010e8:	e00b      	b.n	8001102 <bmp3_get_regs+0xf8>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	68dc      	ldr	r4, [r3, #12]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	7bf8      	ldrb	r0, [r7, #15]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	68b9      	ldr	r1, [r7, #8]
 80010f8:	47a0      	blx	r4
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d002      	beq.n	8001112 <bmp3_get_regs+0x108>
        {
            rslt = BMP3_E_COMM_FAIL;
 800110c:	23fe      	movs	r3, #254	; 0xfe
 800110e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001112:	46b5      	mov	sp, r6
    {
 8001114:	e002      	b.n	800111c <bmp3_get_regs+0x112>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001116:	23ff      	movs	r3, #255	; 0xff
 8001118:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }

    return rslt;
 800111c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
}
 8001120:	4618      	mov	r0, r3
 8001122:	372c      	adds	r7, #44	; 0x2c
 8001124:	46bd      	mov	sp, r7
 8001126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800112a <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 800112a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800112e:	b089      	sub	sp, #36	; 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	466b      	mov	r3, sp
 800113c:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	0059      	lsls	r1, r3, #1
 8001142:	460b      	mov	r3, r1
 8001144:	3b01      	subs	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	2300      	movs	r3, #0
 800114a:	4688      	mov	r8, r1
 800114c:	4699      	mov	r9, r3
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800115a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800115e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001162:	2300      	movs	r3, #0
 8001164:	460c      	mov	r4, r1
 8001166:	461d      	mov	r5, r3
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	00eb      	lsls	r3, r5, #3
 8001172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001176:	00e2      	lsls	r2, r4, #3
 8001178:	1dcb      	adds	r3, r1, #7
 800117a:	08db      	lsrs	r3, r3, #3
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	ebad 0d03 	sub.w	sp, sp, r3
 8001182:	466b      	mov	r3, sp
 8001184:	3300      	adds	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001188:	6838      	ldr	r0, [r7, #0]
 800118a:	f001 fad6 	bl	800273a <null_ptr_check>
 800118e:	4603      	mov	r3, r0
 8001190:	76fb      	strb	r3, [r7, #27]

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001192:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d14c      	bne.n	8001234 <bmp3_set_regs+0x10a>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d049      	beq.n	8001234 <bmp3_set_regs+0x10a>
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d046      	beq.n	8001234 <bmp3_set_regs+0x10a>
    {
        if (len != 0)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d040      	beq.n	800122e <bmp3_set_regs+0x104>
        {
            temp_buff[0] = reg_data[0];
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	781a      	ldrb	r2, [r3, #0]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	7a1b      	ldrb	r3, [r3, #8]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d114      	bne.n	80011e6 <bmp3_set_regs+0xbc>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80011bc:	2300      	movs	r3, #0
 80011be:	76bb      	strb	r3, [r7, #26]
 80011c0:	e00d      	b.n	80011de <bmp3_set_regs+0xb4>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80011c2:	7ebb      	ldrb	r3, [r7, #26]
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	781a      	ldrb	r2, [r3, #0]
 80011ca:	7ebb      	ldrb	r3, [r7, #26]
 80011cc:	68f9      	ldr	r1, [r7, #12]
 80011ce:	440b      	add	r3, r1
 80011d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80011d8:	7ebb      	ldrb	r3, [r7, #26]
 80011da:	3301      	adds	r3, #1
 80011dc:	76bb      	strb	r3, [r7, #26]
 80011de:	7ebb      	ldrb	r3, [r7, #26]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d8ed      	bhi.n	80011c2 <bmp3_set_regs+0x98>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d909      	bls.n	8001200 <bmp3_set_regs+0xd6>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	6939      	ldr	r1, [r7, #16]
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	f000 fa71 	bl	80016da <interleave_reg_addr>
                temp_len = len * 2;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	61fb      	str	r3, [r7, #28]
 80011fe:	e001      	b.n	8001204 <bmp3_set_regs+0xda>
            }
            else
            {
                temp_len = len;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	61fb      	str	r3, [r7, #28]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	691c      	ldr	r4, [r3, #16]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	7818      	ldrb	r0, [r3, #0]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	69fa      	ldr	r2, [r7, #28]
 8001212:	6939      	ldr	r1, [r7, #16]
 8001214:	47a0      	blx	r4
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d008      	beq.n	800123a <bmp3_set_regs+0x110>
            {
                rslt = BMP3_E_COMM_FAIL;
 8001228:	23fe      	movs	r3, #254	; 0xfe
 800122a:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 800122c:	e005      	b.n	800123a <bmp3_set_regs+0x110>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 800122e:	23fa      	movs	r3, #250	; 0xfa
 8001230:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 8001232:	e002      	b.n	800123a <bmp3_set_regs+0x110>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001234:	23ff      	movs	r3, #255	; 0xff
 8001236:	76fb      	strb	r3, [r7, #27]
 8001238:	e000      	b.n	800123c <bmp3_set_regs+0x112>
        if (len != 0)
 800123a:	bf00      	nop
    }

    return rslt;
 800123c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001240:	46b5      	mov	sp, r6
}
 8001242:	4618      	mov	r0, r3
 8001244:	3724      	adds	r7, #36	; 0x24
 8001246:	46bd      	mov	sp, r7
 8001248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800124c <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	75fb      	strb	r3, [r7, #23]

    if (settings != NULL)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d03a      	beq.n	80012d8 <bmp3_set_sensor_settings+0x8c>
    {

        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 8001262:	68f9      	ldr	r1, [r7, #12]
 8001264:	2006      	movs	r0, #6
 8001266:	f001 fa50 	bl	800270a <are_settings_changed>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d006      	beq.n	800127e <bmp3_set_sensor_settings+0x32>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, settings, dev);
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	68b9      	ldr	r1, [r7, #8]
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f000 fa96 	bl	80017a6 <set_pwr_ctrl_settings>
 800127a:	4603      	mov	r3, r0
 800127c:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings))
 800127e:	68f9      	ldr	r1, [r7, #12]
 8001280:	20f0      	movs	r0, #240	; 0xf0
 8001282:	f001 fa42 	bl	800270a <are_settings_changed>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d006      	beq.n	800129a <bmp3_set_sensor_settings+0x4e>
        {
            /* Set the over sampling, ODR and filter settings */
            rslt = set_odr_filter_settings(desired_settings, settings, dev);
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	68b9      	ldr	r1, [r7, #8]
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f000 fad7 	bl	8001844 <set_odr_filter_settings>
 8001296:	4603      	mov	r3, r0
 8001298:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings))
 800129a:	68f9      	ldr	r1, [r7, #12]
 800129c:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 80012a0:	f001 fa33 	bl	800270a <are_settings_changed>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d006      	beq.n	80012b8 <bmp3_set_sensor_settings+0x6c>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, settings, dev);
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	68f8      	ldr	r0, [r7, #12]
 80012b0:	f000 fb36 	bl	8001920 <set_int_ctrl_settings>
 80012b4:	4603      	mov	r3, r0
 80012b6:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings))
 80012b8:	68f9      	ldr	r1, [r7, #12]
 80012ba:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80012be:	f001 fa24 	bl	800270a <are_settings_changed>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d009      	beq.n	80012dc <bmp3_set_sensor_settings+0x90>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, settings, dev);
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	68b9      	ldr	r1, [r7, #8]
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f000 fba1 	bl	8001a14 <set_advance_settings>
 80012d2:	4603      	mov	r3, r0
 80012d4:	75fb      	strb	r3, [r7, #23]
 80012d6:	e001      	b.n	80012dc <bmp3_set_sensor_settings+0x90>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80012d8:	23ff      	movs	r3, #255	; 0xff
 80012da:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80012dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <bmp3_get_status>:
 * @brief This API gets the command ready, data ready for pressure and
 * temperature and interrupt (fifo watermark, fifo full, data ready) and
 * error status from the sensor.
 */
int8_t bmp3_get_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (status != NULL)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d01a      	beq.n	800132e <bmp3_get_status+0x46>
    {
        rslt = get_sensor_status(status, dev);
 80012f8:	6839      	ldr	r1, [r7, #0]
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f001 fa41 	bl	8002782 <get_sensor_status>
 8001300:	4603      	mov	r3, r0
 8001302:	73fb      	strb	r3, [r7, #15]

        /* Proceed further if the earlier operation is fine */
        if (rslt == BMP3_OK)
 8001304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d112      	bne.n	8001332 <bmp3_get_status+0x4a>
        {
            rslt = get_int_status(status, dev);
 800130c:	6839      	ldr	r1, [r7, #0]
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f001 fa7a 	bl	8002808 <get_int_status>
 8001314:	4603      	mov	r3, r0
 8001316:	73fb      	strb	r3, [r7, #15]

            /* Proceed further if the earlier operation is fine */
            if (rslt == BMP3_OK)
 8001318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d108      	bne.n	8001332 <bmp3_get_status+0x4a>
            {
                /* Get the error status */
                rslt = get_err_status(status, dev);
 8001320:	6839      	ldr	r1, [r7, #0]
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f001 fa9e 	bl	8002864 <get_err_status>
 8001328:	4603      	mov	r3, r0
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	e001      	b.n	8001332 <bmp3_get_status+0x4a>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800132e:	23ff      	movs	r3, #255	; 0xff
 8001330:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001332:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b084      	sub	sp, #16
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 8001346:	237e      	movs	r3, #126	; 0x7e
 8001348:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 800134a:	23b6      	movs	r3, #182	; 0xb6
 800134c:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for command ready status */
    rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 800134e:	f107 010c 	add.w	r1, r7, #12
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2201      	movs	r2, #1
 8001356:	2003      	movs	r0, #3
 8001358:	f7ff fe57 	bl	800100a <bmp3_get_regs>
 800135c:	4603      	mov	r3, r0
 800135e:	73fb      	strb	r3, [r7, #15]

    /* Device is ready to accept new command */
    if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 8001360:	7b3b      	ldrb	r3, [r7, #12]
 8001362:	f003 0310 	and.w	r3, r3, #16
 8001366:	2b00      	cmp	r3, #0
 8001368:	d02d      	beq.n	80013c6 <bmp3_soft_reset+0x88>
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d129      	bne.n	80013c6 <bmp3_soft_reset+0x88>
    {
        /* Write the soft reset command in the sensor */
        rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001372:	f107 010d 	add.w	r1, r7, #13
 8001376:	f107 000e 	add.w	r0, r7, #14
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f7ff fed4 	bl	800112a <bmp3_set_regs>
 8001382:	4603      	mov	r3, r0
 8001384:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d11b      	bne.n	80013c6 <bmp3_soft_reset+0x88>
        {
            /* Wait for 2 ms */
            dev->delay_us(2000, dev->intf_ptr);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6852      	ldr	r2, [r2, #4]
 8001396:	4611      	mov	r1, r2
 8001398:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800139c:	4798      	blx	r3

            /* Read for command error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 800139e:	f107 010b 	add.w	r1, r7, #11
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	2002      	movs	r0, #2
 80013a8:	f7ff fe2f 	bl	800100a <bmp3_get_regs>
 80013ac:	4603      	mov	r3, r0
 80013ae:	73fb      	strb	r3, [r7, #15]

            /* check for command error status */
            if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 80013b0:	7afb      	ldrb	r3, [r7, #11]
 80013b2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d103      	bne.n	80013c2 <bmp3_soft_reset+0x84>
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <bmp3_soft_reset+0x88>
            {
                /* Command not written hence return
                 * error */
                rslt = BMP3_E_CMD_EXEC_FAILED;
 80013c2:	23fc      	movs	r3, #252	; 0xfc
 80013c4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80013c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b084      	sub	sp, #16
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80013dc:	6838      	ldr	r0, [r7, #0]
 80013de:	f001 f9ac 	bl	800273a <null_ptr_check>
 80013e2:	4603      	mov	r3, r0
 80013e4:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BMP3_OK) && (settings != NULL))
 80013e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d139      	bne.n	8001462 <bmp3_set_op_mode+0x90>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d036      	beq.n	8001462 <bmp3_set_op_mode+0x90>
    {
        uint8_t curr_mode = settings->op_mode;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	73bb      	strb	r3, [r7, #14]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 80013fa:	f107 030d 	add.w	r3, r7, #13
 80013fe:	6839      	ldr	r1, [r7, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f000 f838 	bl	8001476 <bmp3_get_op_mode>
 8001406:	4603      	mov	r3, r0
 8001408:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if ((last_set_mode != BMP3_MODE_SLEEP) && (rslt == BMP3_OK))
 800140a:	7b7b      	ldrb	r3, [r7, #13]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d010      	beq.n	8001432 <bmp3_set_op_mode+0x60>
 8001410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10c      	bne.n	8001432 <bmp3_set_op_mode+0x60>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 8001418:	6838      	ldr	r0, [r7, #0]
 800141a:	f000 f8f7 	bl	800160c <put_device_to_sleep>
 800141e:	4603      	mov	r3, r0
 8001420:	73fb      	strb	r3, [r7, #15]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	6852      	ldr	r2, [r2, #4]
 800142a:	4611      	mov	r1, r2
 800142c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001430:	4798      	blx	r3
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 8001432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d116      	bne.n	8001468 <bmp3_set_op_mode+0x96>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 800143a:	7bbb      	ldrb	r3, [r7, #14]
 800143c:	2b03      	cmp	r3, #3
 800143e:	d106      	bne.n	800144e <bmp3_set_op_mode+0x7c>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(settings, dev);
 8001440:	6839      	ldr	r1, [r7, #0]
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 f879 	bl	800153a <set_normal_mode>
 8001448:	4603      	mov	r3, r0
 800144a:	73fb      	strb	r3, [r7, #15]
    {
 800144c:	e00c      	b.n	8001468 <bmp3_set_op_mode+0x96>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 800144e:	7bbb      	ldrb	r3, [r7, #14]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d109      	bne.n	8001468 <bmp3_set_op_mode+0x96>
            {
                /* Set forced mode */
                rslt = write_power_mode(settings, dev);
 8001454:	6839      	ldr	r1, [r7, #0]
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 f8a2 	bl	80015a0 <write_power_mode>
 800145c:	4603      	mov	r3, r0
 800145e:	73fb      	strb	r3, [r7, #15]
    {
 8001460:	e002      	b.n	8001468 <bmp3_set_op_mode+0x96>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001462:	23ff      	movs	r3, #255	; 0xff
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	e000      	b.n	800146a <bmp3_set_op_mode+0x98>
    {
 8001468:	bf00      	nop
    }

    return rslt;
 800146a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (op_mode != NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d011      	beq.n	80014aa <bmp3_get_op_mode+0x34>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	2201      	movs	r2, #1
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	201b      	movs	r0, #27
 800148e:	f7ff fdbc 	bl	800100a <bmp3_get_regs>
 8001492:	4603      	mov	r3, r0
 8001494:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	111b      	asrs	r3, r3, #4
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	701a      	strb	r2, [r3, #0]
 80014a8:	e001      	b.n	80014ae <bmp3_get_op_mode+0x38>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80014aa:	23ff      	movs	r3, #255	; 0xff
 80014ac:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <bmp3_get_sensor_data>:
 * @brief This API reads the pressure, temperature or both data from the
 * sensor, compensates the data and store it in the bmp3_data structure
 * instance passed by the user.
 */
int8_t bmp3_get_sensor_data(uint8_t sensor_comp, struct bmp3_data *comp_data, struct bmp3_dev *dev)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b08a      	sub	sp, #40	; 0x28
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure and temperature data read from
     * the sensor */
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
 80014cc:	2300      	movs	r3, #0
 80014ce:	84bb      	strh	r3, [r7, #36]	; 0x24
    struct bmp3_uncomp_data uncomp_data = { 0 };
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]

    if (comp_data != NULL)
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d021      	beq.n	8001528 <bmp3_get_sensor_data+0x6e>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 80014e4:	f107 0120 	add.w	r1, r7, #32
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2206      	movs	r2, #6
 80014ec:	2004      	movs	r0, #4
 80014ee:	f7ff fd8c 	bl	800100a <bmp3_get_regs>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BMP3_OK)
 80014f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d116      	bne.n	800152e <bmp3_get_sensor_data+0x74>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 8001500:	f107 0210 	add.w	r2, r7, #16
 8001504:	f107 0320 	add.w	r3, r7, #32
 8001508:	4611      	mov	r1, r2
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fc70 	bl	8001df0 <parse_sensor_data>

            /* Compensate the pressure/temperature/both data read
             * from the sensor */
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3318      	adds	r3, #24
 8001514:	f107 0110 	add.w	r1, r7, #16
 8001518:	7bf8      	ldrb	r0, [r7, #15]
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	f000 fca3 	bl	8001e66 <compensate_data>
 8001520:	4603      	mov	r3, r0
 8001522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001526:	e002      	b.n	800152e <bmp3_get_sensor_data+0x74>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001528:	23ff      	movs	r3, #255	; 0xff
 800152a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 800152e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001532:	4618      	mov	r0, r3
 8001534:	3728      	adds	r7, #40	; 0x28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b084      	sub	sp, #16
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(settings, dev);
 8001544:	6839      	ldr	r1, [r7, #0]
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 f888 	bl	800165c <validate_normal_mode_settings>
 800154c:	4603      	mov	r3, r0
 800154e:	73fb      	strb	r3, [r7, #15]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 8001550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d11d      	bne.n	8001594 <set_normal_mode+0x5a>
    {
        rslt = write_power_mode(settings, dev);
 8001558:	6839      	ldr	r1, [r7, #0]
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f820 	bl	80015a0 <write_power_mode>
 8001560:	4603      	mov	r3, r0
 8001562:	73fb      	strb	r3, [r7, #15]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 8001564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d113      	bne.n	8001594 <set_normal_mode+0x5a>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 800156c:	f107 010e 	add.w	r1, r7, #14
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	2201      	movs	r2, #1
 8001574:	2002      	movs	r0, #2
 8001576:	f7ff fd48 	bl	800100a <bmp3_get_regs>
 800157a:	4603      	mov	r3, r0
 800157c:	73fb      	strb	r3, [r7, #15]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 800157e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d106      	bne.n	8001594 <set_normal_mode+0x5a>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 8001586:	7bbb      	ldrb	r3, [r7, #14]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <set_normal_mode+0x5a>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 8001590:	23fb      	movs	r3, #251	; 0xfb
 8001592:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001594:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(const struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80015aa:	231b      	movs	r3, #27
 80015ac:	737b      	strb	r3, [r7, #13]
    uint8_t op_mode = settings->op_mode;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 80015b4:	7b78      	ldrb	r0, [r7, #13]
 80015b6:	f107 010c 	add.w	r1, r7, #12
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2201      	movs	r2, #1
 80015be:	f7ff fd24 	bl	800100a <bmp3_get_regs>
 80015c2:	4603      	mov	r3, r0
 80015c4:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 80015c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d118      	bne.n	8001600 <write_power_mode+0x60>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 80015ce:	7b3b      	ldrb	r3, [r7, #12]
 80015d0:	b25b      	sxtb	r3, r3
 80015d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80015d6:	b25a      	sxtb	r2, r3
 80015d8:	7bbb      	ldrb	r3, [r7, #14]
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	b25b      	sxtb	r3, r3
 80015de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	733b      	strb	r3, [r7, #12]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 80015ec:	f107 010c 	add.w	r1, r7, #12
 80015f0:	f107 000d 	add.w	r0, r7, #13
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f7ff fd97 	bl	800112a <bmp3_set_regs>
 80015fc:	4603      	mov	r3, r0
 80015fe:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001600:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8001614:	231b      	movs	r3, #27
 8001616:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 8001618:	f107 010d 	add.w	r1, r7, #13
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	201b      	movs	r0, #27
 8001622:	f7ff fcf2 	bl	800100a <bmp3_get_regs>
 8001626:	4603      	mov	r3, r0
 8001628:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800162a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10e      	bne.n	8001650 <put_device_to_sleep+0x44>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 8001632:	7b7b      	ldrb	r3, [r7, #13]
 8001634:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001638:	b2db      	uxtb	r3, r3
 800163a:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 800163c:	f107 010d 	add.w	r1, r7, #13
 8001640:	f107 000e 	add.w	r0, r7, #14
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f7ff fd6f 	bl	800112a <bmp3_set_regs>
 800164c:	4603      	mov	r3, r0
 800164e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001650:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = get_odr_filter_settings(settings, dev);
 8001666:	6839      	ldr	r1, [r7, #0]
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fa26 	bl	8001aba <get_odr_filter_settings>
 800166e:	4603      	mov	r3, r0
 8001670:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d104      	bne.n	8001684 <validate_normal_mode_settings+0x28>
    {
        rslt = validate_osr_and_odr_settings(settings);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 fa3a 	bl	8001af4 <validate_osr_and_odr_settings>
 8001680:	4603      	mov	r3, r0
 8001682:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001684:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 8001698:	2331      	movs	r3, #49	; 0x31
 800169a:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	741a      	strb	r2, [r3, #16]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 80016b0:	f107 0108 	add.w	r1, r7, #8
 80016b4:	7ff8      	ldrb	r0, [r7, #31]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2215      	movs	r2, #21
 80016ba:	f7ff fca6 	bl	800100a <bmp3_get_regs>
 80016be:	4603      	mov	r3, r0
 80016c0:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 fc3f 	bl	8001f4c <parse_calib_data>

    return rslt;
 80016ce:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3720      	adds	r7, #32
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 80016da:	b480      	push	{r7}
 80016dc:	b087      	sub	sp, #28
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 80016e8:	2301      	movs	r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	e015      	b.n	800171a <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	441a      	add	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	3b01      	subs	r3, #1
 80016fa:	68b9      	ldr	r1, [r7, #8]
 80016fc:	440b      	add	r3, r1
 80016fe:	7812      	ldrb	r2, [r2, #0]
 8001700:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	441a      	add	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	440b      	add	r3, r1
 8001710:	7812      	ldrb	r2, [r2, #0]
 8001712:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	3301      	adds	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d3e5      	bcc.n	80016ee <interleave_reg_addr+0x14>
    }
}
 8001722:	bf00      	nop
 8001724:	bf00      	nop
 8001726:	371c      	adds	r7, #28
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	73fb      	strb	r3, [r7, #15]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	4413      	add	r3, r2
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	b2da      	uxtb	r2, r3
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	10db      	asrs	r3, r3, #3
 800175a:	b2db      	uxtb	r3, r3
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	b2da      	uxtb	r2, r3
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	3301      	adds	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	f003 031f 	and.w	r3, r3, #31
 8001778:	b2da      	uxtb	r2, r3
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	3302      	adds	r3, #2
 8001782:	73fb      	strb	r3, [r7, #15]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	105b      	asrs	r3, r3, #1
 800178e:	b2db      	uxtb	r3, r3
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	b2da      	uxtb	r2, r3
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	709a      	strb	r2, [r3, #2]
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <set_pwr_ctrl_settings>:
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	60f8      	str	r0, [r7, #12]
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80017b2:	231b      	movs	r3, #27
 80017b4:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80017b6:	7db8      	ldrb	r0, [r7, #22]
 80017b8:	f107 0115 	add.w	r1, r7, #21
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f7ff fc23 	bl	800100a <bmp3_get_regs>
 80017c4:	4603      	mov	r3, r0
 80017c6:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 80017c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d132      	bne.n	8001836 <set_pwr_ctrl_settings+0x90>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00e      	beq.n	80017f8 <set_pwr_ctrl_settings+0x52>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, settings->press_en);
 80017da:	7d7b      	ldrb	r3, [r7, #21]
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	f023 0301 	bic.w	r3, r3, #1
 80017e2:	b25a      	sxtb	r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	785b      	ldrb	r3, [r3, #1]
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	b25b      	sxtb	r3, r3
 80017f0:	4313      	orrs	r3, r2
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00f      	beq.n	8001822 <set_pwr_ctrl_settings+0x7c>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, settings->temp_en);
 8001802:	7d7b      	ldrb	r3, [r7, #21]
 8001804:	b25b      	sxtb	r3, r3
 8001806:	f023 0302 	bic.w	r3, r3, #2
 800180a:	b25a      	sxtb	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	789b      	ldrb	r3, [r3, #2]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	b25b      	sxtb	r3, r3
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	b25b      	sxtb	r3, r3
 800181a:	4313      	orrs	r3, r2
 800181c:	b25b      	sxtb	r3, r3
 800181e:	b2db      	uxtb	r3, r3
 8001820:	757b      	strb	r3, [r7, #21]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001822:	f107 0115 	add.w	r1, r7, #21
 8001826:	f107 0016 	add.w	r0, r7, #22
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f7ff fc7c 	bl	800112a <bmp3_set_regs>
 8001832:	4603      	mov	r3, r0
 8001834:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001836:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af02      	add	r7, sp, #8
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 8001850:	4b32      	ldr	r3, [pc, #200]	; (800191c <set_odr_filter_settings+0xd8>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	83bb      	strh	r3, [r7, #28]
 8001856:	2300      	movs	r3, #0
 8001858:	77bb      	strb	r3, [r7, #30]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	75fb      	strb	r3, [r7, #23]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 800185e:	f107 0118 	add.w	r1, r7, #24
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2204      	movs	r2, #4
 8001866:	201c      	movs	r0, #28
 8001868:	f7ff fbcf 	bl	800100a <bmp3_get_regs>
 800186c:	4603      	mov	r3, r0
 800186e:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMP3_OK)
 8001870:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d14a      	bne.n	800190e <set_odr_filter_settings+0xca>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 8001878:	68f9      	ldr	r1, [r7, #12]
 800187a:	2030      	movs	r0, #48	; 0x30
 800187c:	f000 ff45 	bl	800270a <are_settings_changed>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00b      	beq.n	800189e <set_odr_filter_settings+0x5a>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, settings);
 8001886:	f107 0017 	add.w	r0, r7, #23
 800188a:	f107 0218 	add.w	r2, r7, #24
 800188e:	f107 011c 	add.w	r1, r7, #28
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	4603      	mov	r3, r0
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f000 f9e1 	bl	8001c60 <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 800189e:	68f9      	ldr	r1, [r7, #12]
 80018a0:	2080      	movs	r0, #128	; 0x80
 80018a2:	f000 ff32 	bl	800270a <are_settings_changed>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d008      	beq.n	80018be <set_odr_filter_settings+0x7a>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, settings);
 80018ac:	f107 0217 	add.w	r2, r7, #23
 80018b0:	f107 0118 	add.w	r1, r7, #24
 80018b4:	f107 001c 	add.w	r0, r7, #28
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	f000 fa29 	bl	8001d10 <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 80018be:	68f9      	ldr	r1, [r7, #12]
 80018c0:	2040      	movs	r0, #64	; 0x40
 80018c2:	f000 ff22 	bl	800270a <are_settings_changed>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <set_odr_filter_settings+0x9a>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, settings);
 80018cc:	f107 0217 	add.w	r2, r7, #23
 80018d0:	f107 0118 	add.w	r1, r7, #24
 80018d4:	f107 001c 	add.w	r0, r7, #28
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f000 fa53 	bl	8001d84 <fill_filter_data>
        }

        if (settings->op_mode == BMP3_MODE_NORMAL)
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d104      	bne.n	80018f0 <set_odr_filter_settings+0xac>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(settings);
 80018e6:	68b8      	ldr	r0, [r7, #8]
 80018e8:	f000 f904 	bl	8001af4 <validate_osr_and_odr_settings>
 80018ec:	4603      	mov	r3, r0
 80018ee:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMP3_OK)
 80018f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10a      	bne.n	800190e <set_odr_filter_settings+0xca>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
 80018fa:	461a      	mov	r2, r3
 80018fc:	f107 0118 	add.w	r1, r7, #24
 8001900:	f107 001c 	add.w	r0, r7, #28
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f7ff fc10 	bl	800112a <bmp3_set_regs>
 800190a:	4603      	mov	r3, r0
 800190c:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 800190e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3720      	adds	r7, #32
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	080175f8 	.word	0x080175f8

08001920 <set_int_ctrl_settings>:
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 800192c:	2319      	movs	r3, #25
 800192e:	757b      	strb	r3, [r7, #21]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001930:	7d78      	ldrb	r0, [r7, #21]
 8001932:	f107 0116 	add.w	r1, r7, #22
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f7ff fb66 	bl	800100a <bmp3_get_regs>
 800193e:	4603      	mov	r3, r0
 8001940:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8001942:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d15e      	bne.n	8001a08 <set_int_ctrl_settings+0xe8>
    {
        int_settings = settings->int_settings;
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	f107 0310 	add.w	r3, r7, #16
 8001950:	3207      	adds	r2, #7
 8001952:	6810      	ldr	r0, [r2, #0]
 8001954:	6018      	str	r0, [r3, #0]

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00d      	beq.n	800197c <set_int_ctrl_settings+0x5c>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 8001960:	7dbb      	ldrb	r3, [r7, #22]
 8001962:	b25b      	sxtb	r3, r3
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	b25a      	sxtb	r2, r3
 800196a:	7c3b      	ldrb	r3, [r7, #16]
 800196c:	b25b      	sxtb	r3, r3
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	b25b      	sxtb	r3, r3
 8001974:	4313      	orrs	r3, r2
 8001976:	b25b      	sxtb	r3, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00e      	beq.n	80019a4 <set_int_ctrl_settings+0x84>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 8001986:	7dbb      	ldrb	r3, [r7, #22]
 8001988:	b25b      	sxtb	r3, r3
 800198a:	f023 0302 	bic.w	r3, r3, #2
 800198e:	b25a      	sxtb	r2, r3
 8001990:	7c7b      	ldrb	r3, [r7, #17]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	b25b      	sxtb	r3, r3
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	b25b      	sxtb	r3, r3
 800199c:	4313      	orrs	r3, r2
 800199e:	b25b      	sxtb	r3, r3
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00e      	beq.n	80019cc <set_int_ctrl_settings+0xac>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 80019ae:	7dbb      	ldrb	r3, [r7, #22]
 80019b0:	b25b      	sxtb	r3, r3
 80019b2:	f023 0304 	bic.w	r3, r3, #4
 80019b6:	b25a      	sxtb	r2, r3
 80019b8:	7cbb      	ldrb	r3, [r7, #18]
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	b25b      	sxtb	r3, r3
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	b25b      	sxtb	r3, r3
 80019c4:	4313      	orrs	r3, r2
 80019c6:	b25b      	sxtb	r3, r3
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00e      	beq.n	80019f4 <set_int_ctrl_settings+0xd4>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 80019d6:	7dbb      	ldrb	r3, [r7, #22]
 80019d8:	b25b      	sxtb	r3, r3
 80019da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019de:	b25a      	sxtb	r2, r3
 80019e0:	7cfb      	ldrb	r3, [r7, #19]
 80019e2:	019b      	lsls	r3, r3, #6
 80019e4:	b25b      	sxtb	r3, r3
 80019e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ea:	b25b      	sxtb	r3, r3
 80019ec:	4313      	orrs	r3, r2
 80019ee:	b25b      	sxtb	r3, r3
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	75bb      	strb	r3, [r7, #22]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 80019f4:	f107 0116 	add.w	r1, r7, #22
 80019f8:	f107 0015 	add.w	r0, r7, #21
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f7ff fb93 	bl	800112a <bmp3_set_regs>
 8001a04:	4603      	mov	r3, r0
 8001a06:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001a08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <set_advance_settings>:
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, const struct bmp3_settings *settings,
                                   struct bmp3_dev *dev)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = settings->adv_settings;
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	f107 0310 	add.w	r3, r7, #16
 8001a26:	320b      	adds	r2, #11
 8001a28:	8812      	ldrh	r2, [r2, #0]
 8001a2a:	801a      	strh	r2, [r3, #0]

    reg_addr = BMP3_REG_IF_CONF;
 8001a2c:	231a      	movs	r3, #26
 8001a2e:	75bb      	strb	r3, [r7, #22]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001a30:	7db8      	ldrb	r0, [r7, #22]
 8001a32:	f107 0115 	add.w	r1, r7, #21
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f7ff fae6 	bl	800100a <bmp3_get_regs>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8001a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d131      	bne.n	8001aae <set_advance_settings+0x9a>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00e      	beq.n	8001a72 <set_advance_settings+0x5e>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 8001a54:	7d7b      	ldrb	r3, [r7, #21]
 8001a56:	b25b      	sxtb	r3, r3
 8001a58:	f023 0302 	bic.w	r3, r3, #2
 8001a5c:	b25a      	sxtb	r2, r3
 8001a5e:	7c3b      	ldrb	r3, [r7, #16]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	b25b      	sxtb	r3, r3
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	b25b      	sxtb	r3, r3
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	b25b      	sxtb	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00e      	beq.n	8001a9a <set_advance_settings+0x86>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 8001a7c:	7d7b      	ldrb	r3, [r7, #21]
 8001a7e:	b25b      	sxtb	r3, r3
 8001a80:	f023 0304 	bic.w	r3, r3, #4
 8001a84:	b25a      	sxtb	r2, r3
 8001a86:	7c7b      	ldrb	r3, [r7, #17]
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	b25b      	sxtb	r3, r3
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	b25b      	sxtb	r3, r3
 8001a92:	4313      	orrs	r3, r2
 8001a94:	b25b      	sxtb	r3, r3
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	757b      	strb	r3, [r7, #21]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001a9a:	f107 0115 	add.w	r1, r7, #21
 8001a9e:	f107 0016 	add.w	r0, r7, #22
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f7ff fb40 	bl	800112a <bmp3_set_regs>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001aae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8001ac4:	f107 0108 	add.w	r1, r7, #8
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	2204      	movs	r2, #4
 8001acc:	201c      	movs	r0, #28
 8001ace:	f7ff fa9c 	bl	800100a <bmp3_get_regs>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	73fb      	strb	r3, [r7, #15]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &settings->odr_filter);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	1cda      	adds	r2, r3, #3
 8001ada:	f107 0308 	add.w	r3, r7, #8
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fe25 	bl	8001730 <parse_odr_filter_settings>

    return rslt;
 8001ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_settings *settings)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b098      	sub	sp, #96	; 0x60
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 8001afc:	23ea      	movs	r3, #234	; 0xea
 8001afe:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t meas_t_p = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 8001b04:	4a1a      	ldr	r2, [pc, #104]	; (8001b70 <validate_osr_and_odr_settings+0x7c>)
 8001b06:	f107 030c 	add.w	r3, r7, #12
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	2248      	movs	r2, #72	; 0x48
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f012 fe16 	bl	8014740 <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (settings->press_en)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	785b      	ldrb	r3, [r3, #1]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d006      	beq.n	8001b2a <validate_osr_and_odr_settings+0x36>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(settings);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f83f 	bl	8001ba0 <calculate_press_meas_time>
 8001b22:	4602      	mov	r2, r0
 8001b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b26:	4413      	add	r3, r2
 8001b28:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    if (settings->temp_en)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	789b      	ldrb	r3, [r3, #2]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d006      	beq.n	8001b40 <validate_osr_and_odr_settings+0x4c>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(settings);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f864 	bl	8001c00 <calculate_temp_meas_time>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b3c:	4413      	add	r3, r2
 8001b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 8001b40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b44:	4413      	add	r3, r2
 8001b46:	65bb      	str	r3, [r7, #88]	; 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[settings->odr_filter.odr]);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	799b      	ldrb	r3, [r3, #6]
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	3360      	adds	r3, #96	; 0x60
 8001b50:	443b      	add	r3, r7
 8001b52:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001b56:	4619      	mov	r1, r3
 8001b58:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001b5a:	f000 f80b 	bl	8001b74 <verify_meas_time_and_odr_duration>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    return rslt;
 8001b64:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3760      	adds	r7, #96	; 0x60
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	080175fc 	.word	0x080175fc

08001b74 <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d202      	bcs.n	8001b8c <verify_meas_time_and_odr_duration+0x18>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	73fb      	strb	r3, [r7, #15]
 8001b8a:	e001      	b.n	8001b90 <verify_meas_time_and_odr_duration+0x1c>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 8001b8c:	23fd      	movs	r3, #253	; 0xfd
 8001b8e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_settings *settings)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	f107 030c 	add.w	r3, r7, #12
 8001bae:	3203      	adds	r2, #3
 8001bb0:	6810      	ldr	r0, [r2, #0]
 8001bb2:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bbc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 8001bc0:	7b3b      	ldrb	r3, [r7, #12]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	ed97 0b06 	vldr	d0, [r7, #24]
 8001bc8:	f000 fd7a 	bl	80026c0 <pow_bmp3>
 8001bcc:	ed87 0a05 	vstr	s0, [r7, #20]
    press_meas_t = (uint32_t)(BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 8001bd0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bd4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001bf8 <calculate_press_meas_time+0x58>
 8001bd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bdc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001bfc <calculate_press_meas_time+0x5c>
 8001be0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be8:	ee17 3a90 	vmov	r3, s15
 8001bec:	613b      	str	r3, [r7, #16]

    /* Output in microseconds */
    return press_meas_t;
 8001bee:	693b      	ldr	r3, [r7, #16]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3720      	adds	r7, #32
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	44fa0000 	.word	0x44fa0000
 8001bfc:	43c40000 	.word	0x43c40000

08001c00 <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_settings *settings)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	f107 030c 	add.w	r3, r7, #12
 8001c0e:	3203      	adds	r2, #3
 8001c10:	6810      	ldr	r0, [r2, #0]
 8001c12:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 8001c20:	7b7b      	ldrb	r3, [r7, #13]
 8001c22:	4618      	mov	r0, r3
 8001c24:	ed97 0b06 	vldr	d0, [r7, #24]
 8001c28:	f000 fd4a 	bl	80026c0 <pow_bmp3>
 8001c2c:	ed87 0a05 	vstr	s0, [r7, #20]
    temp_meas_t = (uint32_t)(BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 8001c30:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c34:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001c58 <calculate_temp_meas_time+0x58>
 8001c38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c3c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001c5c <calculate_temp_meas_time+0x5c>
 8001c40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c48:	ee17 3a90 	vmov	r3, s15
 8001c4c:	613b      	str	r3, [r7, #16]

    /* Output in uint32_t */
    return temp_meas_t;
 8001c4e:	693b      	ldr	r3, [r7, #16]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	44fa0000 	.word	0x44fa0000
 8001c5c:	439c8000 	.word	0x439c8000

08001c60 <fill_osr_data>:
static void fill_osr_data(uint32_t desired_settings,
                          uint8_t *addr,
                          uint8_t *reg_data,
                          uint8_t *len,
                          const struct bmp3_settings *settings)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8001c6e:	6a3a      	ldr	r2, [r7, #32]
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	3203      	adds	r2, #3
 8001c76:	6810      	ldr	r0, [r2, #0]
 8001c78:	6018      	str	r0, [r3, #0]

    if (desired_settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d03f      	beq.n	8001d04 <fill_osr_data+0xa4>
    {
        /* Pressure over sampling settings check */
        if (desired_settings & BMP3_SEL_PRESS_OS)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d013      	beq.n	8001cb6 <fill_osr_data+0x56>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	b25b      	sxtb	r3, r3
 8001c94:	f023 0307 	bic.w	r3, r3, #7
 8001c98:	b25a      	sxtb	r2, r3
 8001c9a:	7d3b      	ldrb	r3, [r7, #20]
 8001c9c:	b25b      	sxtb	r3, r3
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	b25b      	sxtb	r3, r3
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	b25a      	sxtb	r2, r3
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	4619      	mov	r1, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	440b      	add	r3, r1
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (desired_settings & BMP3_SEL_TEMP_OS)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f003 0320 	and.w	r3, r3, #32
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d014      	beq.n	8001cea <fill_osr_data+0x8a>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	b25b      	sxtb	r3, r3
 8001cc6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001cca:	b25a      	sxtb	r2, r3
 8001ccc:	7d7b      	ldrb	r3, [r7, #21]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	b25b      	sxtb	r3, r3
 8001cd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cd6:	b25b      	sxtb	r3, r3
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	b25a      	sxtb	r2, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	440b      	add	r3, r1
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	221c      	movs	r2, #28
 8001cf6:	701a      	strb	r2, [r3, #0]
        (*len)++;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	701a      	strb	r2, [r3, #0]
    }
}
 8001d04:	bf00      	nop
 8001d06:	371c      	adds	r7, #28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_settings *settings)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &settings->odr_filter;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	3303      	adds	r3, #3
 8001d22:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	78db      	ldrb	r3, [r3, #3]
 8001d28:	2b11      	cmp	r3, #17
 8001d2a:	d902      	bls.n	8001d32 <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2211      	movs	r2, #17
 8001d30:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	3301      	adds	r3, #1
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	b25b      	sxtb	r3, r3
 8001d3a:	f023 031f 	bic.w	r3, r3, #31
 8001d3e:	b25a      	sxtb	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	78db      	ldrb	r3, [r3, #3]
 8001d44:	b25b      	sxtb	r3, r3
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	b25b      	sxtb	r3, r3
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	b25a      	sxtb	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	440b      	add	r3, r1
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	221d      	movs	r2, #29
 8001d6a:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	3301      	adds	r3, #1
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	701a      	strb	r2, [r3, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	371c      	adds	r7, #28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_settings *settings)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b087      	sub	sp, #28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	3203      	adds	r2, #3
 8001d9a:	6810      	ldr	r0, [r2, #0]
 8001d9c:	6018      	str	r0, [r3, #0]

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	3303      	adds	r3, #3
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b25b      	sxtb	r3, r3
 8001da6:	f023 030e 	bic.w	r3, r3, #14
 8001daa:	b25a      	sxtb	r2, r3
 8001dac:	7dbb      	ldrb	r3, [r7, #22]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	b25b      	sxtb	r3, r3
 8001db2:	f003 030e 	and.w	r3, r3, #14
 8001db6:	b25b      	sxtb	r3, r3
 8001db8:	4313      	orrs	r3, r2
 8001dba:	b25a      	sxtb	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	440b      	add	r3, r1
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	221f      	movs	r2, #31
 8001dd6:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	701a      	strb	r2, [r3, #0]
}
 8001de4:	bf00      	nop
 8001de6:	371c      	adds	r7, #28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure or temperature or
 *  both the data and store it in the bmp3_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bmp3_uncomp_data *uncomp_data)
{
 8001df0:	b4b0      	push	{r4, r5, r7}
 8001df2:	b087      	sub	sp, #28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_xlsb = (uint32_t)reg_data[0];
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	7809      	ldrb	r1, [r1, #0]
 8001dfe:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 8;
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	3101      	adds	r1, #1
 8001e04:	7809      	ldrb	r1, [r1, #0]
 8001e06:	0209      	lsls	r1, r1, #8
 8001e08:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[2] << 16;
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	3102      	adds	r1, #2
 8001e0e:	7809      	ldrb	r1, [r1, #0]
 8001e10:	0409      	lsls	r1, r1, #16
 8001e12:	60f9      	str	r1, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	6939      	ldr	r1, [r7, #16]
 8001e18:	4308      	orrs	r0, r1
 8001e1a:	6979      	ldr	r1, [r7, #20]
 8001e1c:	4301      	orrs	r1, r0
 8001e1e:	2000      	movs	r0, #0
 8001e20:	460c      	mov	r4, r1
 8001e22:	4605      	mov	r5, r0
 8001e24:	6839      	ldr	r1, [r7, #0]
 8001e26:	e9c1 4500 	strd	r4, r5, [r1]

    /* Store the parsed register values for temperature data */
    data_xlsb = (uint32_t)reg_data[3];
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	3103      	adds	r1, #3
 8001e2e:	7809      	ldrb	r1, [r1, #0]
 8001e30:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 8;
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	3104      	adds	r1, #4
 8001e36:	7809      	ldrb	r1, [r1, #0]
 8001e38:	0209      	lsls	r1, r1, #8
 8001e3a:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[5] << 16;
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	3105      	adds	r1, #5
 8001e40:	7809      	ldrb	r1, [r1, #0]
 8001e42:	0409      	lsls	r1, r1, #16
 8001e44:	60f9      	str	r1, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	6939      	ldr	r1, [r7, #16]
 8001e4a:	4308      	orrs	r0, r1
 8001e4c:	6979      	ldr	r1, [r7, #20]
 8001e4e:	4301      	orrs	r1, r0
 8001e50:	2000      	movs	r0, #0
 8001e52:	460a      	mov	r2, r1
 8001e54:	4603      	mov	r3, r0
 8001e56:	6839      	ldr	r1, [r7, #0]
 8001e58:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001e5c:	bf00      	nop
 8001e5e:	371c      	adds	r7, #28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bcb0      	pop	{r4, r5, r7}
 8001e64:	4770      	bx	lr

08001e66 <compensate_data>:
 */
static int8_t compensate_data(uint8_t sensor_comp,
                              const struct bmp3_uncomp_data *uncomp_data,
                              struct bmp3_data *comp_data,
                              struct bmp3_calib_data *calib_data)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b086      	sub	sp, #24
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	603b      	str	r3, [r7, #0]
 8001e72:	4603      	mov	r3, r0
 8001e74:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMP3_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d05a      	beq.n	8001f36 <compensate_data+0xd0>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d057      	beq.n	8001f36 <compensate_data+0xd0>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d054      	beq.n	8001f36 <compensate_data+0xd0>
    {
        /* If pressure and temperature component is selected */
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d115      	bne.n	8001ebe <compensate_data+0x58>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation
             */

            /* Compensate pressure and temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	68b9      	ldr	r1, [r7, #8]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 fa1f 	bl	80022dc <compensate_temperature>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP3_OK)
 8001ea2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d148      	bne.n	8001f3c <compensate_data+0xd6>
            {
                rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3308      	adds	r3, #8
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 fa8c 	bl	80023d0 <compensate_pressure>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001ebc:	e03e      	b.n	8001f3c <compensate_data+0xd6>
            }
        }
        else if (sensor_comp == BMP3_PRESS)
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d116      	bne.n	8001ef2 <compensate_data+0x8c>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation.
             * As only pressure is enabled in 'sensor_comp', after calculating
             * compensated temperature, assign it to zero.
             */
            (void)compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 fa06 	bl	80022dc <compensate_temperature>
            comp_data->temperature = 0;
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	e9c1 2300 	strd	r2, r3, [r1]

            /* Compensate the pressure data */
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3308      	adds	r3, #8
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 fa72 	bl	80023d0 <compensate_pressure>
 8001eec:	4603      	mov	r3, r0
 8001eee:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001ef0:	e024      	b.n	8001f3c <compensate_data+0xd6>
        }
        else if (sensor_comp == BMP3_TEMP)
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d10f      	bne.n	8001f18 <compensate_data+0xb2>
        {
            /* Compensate the temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 f9ec 	bl	80022dc <compensate_temperature>
 8001f04:	4603      	mov	r3, r0
 8001f06:	75fb      	strb	r3, [r7, #23]

            /*
             * As only temperature is enabled in 'sensor_comp'
             * make compensated pressure as zero
             */
            comp_data->pressure = 0;
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001f16:	e011      	b.n	8001f3c <compensate_data+0xd6>
        }
        else
        {
            comp_data->pressure = 0;
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	e9c1 2302 	strd	r2, r3, [r1, #8]
            comp_data->temperature = 0;
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	e9c1 2300 	strd	r2, r3, [r1]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001f34:	e002      	b.n	8001f3c <compensate_data+0xd6>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001f36:	23ff      	movs	r3, #255	; 0xff
 8001f38:	75fb      	strb	r3, [r7, #23]
 8001f3a:	e000      	b.n	8001f3e <compensate_data+0xd8>
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001f3c:	bf00      	nop
    }

    return rslt;
 8001f3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	3390      	adds	r3, #144	; 0x90
 8001f5a:	617b      	str	r3, [r7, #20]
    struct bmp3_quantized_calib_data *quantized_calib_data = &dev->calib_data.quantized_calib_data;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	3318      	adds	r3, #24
 8001f60:	613b      	str	r3, [r7, #16]

    /* Temporary variable */
    double temp_var;

    /* 1 / 2^8 */
    temp_var = 0.00390625f;
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	4ba4      	ldr	r3, [pc, #656]	; (80021f8 <parse_calib_data+0x2ac>)
 8001f68:	e9c7 2302 	strd	r2, r3, [r7, #8]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	b21a      	sxth	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	b21b      	sxth	r3, r3
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	b21b      	sxth	r3, r3
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	801a      	strh	r2, [r3, #0]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fad2 	bl	8000534 <__aeabi_ui2d>
 8001f90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f94:	f7fe fc72 	bl	800087c <__aeabi_ddiv>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	6939      	ldr	r1, [r7, #16]
 8001f9e:	e9c1 2300 	strd	r2, r3, [r1]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3303      	adds	r3, #3
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	b21a      	sxth	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3302      	adds	r3, #2
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	b21b      	sxth	r3, r3
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	b21b      	sxth	r3, r3
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	805a      	strh	r2, [r3, #2]
    temp_var = 1073741824.0f;
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	4b8e      	ldr	r3, [pc, #568]	; (80021fc <parse_calib_data+0x2b0>)
 8001fc4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	885b      	ldrh	r3, [r3, #2]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fab1 	bl	8000534 <__aeabi_ui2d>
 8001fd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fd6:	f7fe fc51 	bl	800087c <__aeabi_ddiv>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	6939      	ldr	r1, [r7, #16]
 8001fe0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	b25a      	sxtb	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	711a      	strb	r2, [r3, #4]
    temp_var = 281474976710656.0f;
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	4b82      	ldr	r3, [pc, #520]	; (8002200 <parse_calib_data+0x2b4>)
 8001ff6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe faa7 	bl	8000554 <__aeabi_i2d>
 8002006:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800200a:	f7fe fc37 	bl	800087c <__aeabi_ddiv>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	6939      	ldr	r1, [r7, #16]
 8002014:	e9c1 2304 	strd	r2, r3, [r1, #16]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3306      	adds	r3, #6
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	b21a      	sxth	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3305      	adds	r3, #5
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	b21b      	sxth	r3, r3
 800202a:	4313      	orrs	r3, r2
 800202c:	b21a      	sxth	r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	80da      	strh	r2, [r3, #6]
    temp_var = 1048576.0f;
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	4b73      	ldr	r3, [pc, #460]	; (8002204 <parse_calib_data+0x2b8>)
 8002038:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002042:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fa84 	bl	8000554 <__aeabi_i2d>
 800204c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002050:	f7fe fc14 	bl	800087c <__aeabi_ddiv>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	6939      	ldr	r1, [r7, #16]
 800205a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3308      	adds	r3, #8
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	021b      	lsls	r3, r3, #8
 8002066:	b21a      	sxth	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3307      	adds	r3, #7
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	b21b      	sxth	r3, r3
 8002070:	4313      	orrs	r3, r2
 8002072:	b21a      	sxth	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	811a      	strh	r2, [r3, #8]
    temp_var = 536870912.0f;
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	4b62      	ldr	r3, [pc, #392]	; (8002208 <parse_calib_data+0x2bc>)
 800207e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002088:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fa61 	bl	8000554 <__aeabi_i2d>
 8002092:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002096:	f7fe fbf1 	bl	800087c <__aeabi_ddiv>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	6939      	ldr	r1, [r7, #16]
 80020a0:	e9c1 2308 	strd	r2, r3, [r1, #32]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3309      	adds	r3, #9
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	b25a      	sxtb	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	729a      	strb	r2, [r3, #10]
    temp_var = 4294967296.0f;
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	4b55      	ldr	r3, [pc, #340]	; (800220c <parse_calib_data+0x2c0>)
 80020b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe fa47 	bl	8000554 <__aeabi_i2d>
 80020c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020ca:	f7fe fbd7 	bl	800087c <__aeabi_ddiv>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	6939      	ldr	r1, [r7, #16]
 80020d4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	330a      	adds	r3, #10
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	b25a      	sxtb	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	72da      	strb	r2, [r3, #11]
    temp_var = 137438953472.0f;
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	4b49      	ldr	r3, [pc, #292]	; (8002210 <parse_calib_data+0x2c4>)
 80020ea:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fa2d 	bl	8000554 <__aeabi_i2d>
 80020fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020fe:	f7fe fbbd 	bl	800087c <__aeabi_ddiv>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	6939      	ldr	r1, [r7, #16]
 8002108:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	330c      	adds	r3, #12
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	b21a      	sxth	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	330b      	adds	r3, #11
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b21b      	sxth	r3, r3
 800211e:	4313      	orrs	r3, r2
 8002120:	b21b      	sxth	r3, r3
 8002122:	b29a      	uxth	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	819a      	strh	r2, [r3, #12]

    /* 1 / 2^3 */
    temp_var = 0.125f;
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002130:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	899b      	ldrh	r3, [r3, #12]
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe f9fb 	bl	8000534 <__aeabi_ui2d>
 800213e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002142:	f7fe fb9b 	bl	800087c <__aeabi_ddiv>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	6939      	ldr	r1, [r7, #16]
 800214c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	330e      	adds	r3, #14
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	b21a      	sxth	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	330d      	adds	r3, #13
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	b21b      	sxth	r3, r3
 8002162:	4313      	orrs	r3, r2
 8002164:	b21b      	sxth	r3, r3
 8002166:	b29a      	uxth	r2, r3
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	81da      	strh	r2, [r3, #14]
    temp_var = 64.0f;
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	4b28      	ldr	r3, [pc, #160]	; (8002214 <parse_calib_data+0x2c8>)
 8002172:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	89db      	ldrh	r3, [r3, #14]
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe f9da 	bl	8000534 <__aeabi_ui2d>
 8002180:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002184:	f7fe fb7a 	bl	800087c <__aeabi_ddiv>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	6939      	ldr	r1, [r7, #16]
 800218e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	330f      	adds	r3, #15
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	b25a      	sxtb	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	741a      	strb	r2, [r3, #16]
    temp_var = 256.0f;
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <parse_calib_data+0x2cc>)
 80021a4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe f9d0 	bl	8000554 <__aeabi_i2d>
 80021b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021b8:	f7fe fb60 	bl	800087c <__aeabi_ddiv>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	6939      	ldr	r1, [r7, #16]
 80021c2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3310      	adds	r3, #16
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b25a      	sxtb	r2, r3
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	745a      	strb	r2, [r3, #17]
    temp_var = 32768.0f;
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <parse_calib_data+0x2d0>)
 80021d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe f9b6 	bl	8000554 <__aeabi_i2d>
 80021e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021ec:	f7fe fb46 	bl	800087c <__aeabi_ddiv>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	6939      	ldr	r1, [r7, #16]
 80021f6:	e013      	b.n	8002220 <parse_calib_data+0x2d4>
 80021f8:	3f700000 	.word	0x3f700000
 80021fc:	41d00000 	.word	0x41d00000
 8002200:	42f00000 	.word	0x42f00000
 8002204:	41300000 	.word	0x41300000
 8002208:	41c00000 	.word	0x41c00000
 800220c:	41f00000 	.word	0x41f00000
 8002210:	42400000 	.word	0x42400000
 8002214:	40500000 	.word	0x40500000
 8002218:	40700000 	.word	0x40700000
 800221c:	40e00000 	.word	0x40e00000
 8002220:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3312      	adds	r3, #18
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	021b      	lsls	r3, r3, #8
 800222c:	b21a      	sxth	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3311      	adds	r3, #17
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	b21b      	sxth	r3, r3
 8002236:	4313      	orrs	r3, r2
 8002238:	b21a      	sxth	r2, r3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	825a      	strh	r2, [r3, #18]
    temp_var = 281474976710656.0f;
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <parse_calib_data+0x38c>)
 8002244:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe f980 	bl	8000554 <__aeabi_i2d>
 8002254:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002258:	f7fe fb10 	bl	800087c <__aeabi_ddiv>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	6939      	ldr	r1, [r7, #16]
 8002262:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3313      	adds	r3, #19
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	b25a      	sxtb	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	751a      	strb	r2, [r3, #20]
    temp_var = 281474976710656.0f;
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <parse_calib_data+0x38c>)
 8002278:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe f966 	bl	8000554 <__aeabi_i2d>
 8002288:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800228c:	f7fe faf6 	bl	800087c <__aeabi_ddiv>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	6939      	ldr	r1, [r7, #16]
 8002296:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3314      	adds	r3, #20
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	b25a      	sxtb	r2, r3
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	755a      	strb	r2, [r3, #21]
    temp_var = 36893488147419103232.0f;
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 80022ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe f94b 	bl	8000554 <__aeabi_i2d>
 80022be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022c2:	f7fe fadb 	bl	800087c <__aeabi_ddiv>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	6939      	ldr	r1, [r7, #16]
 80022cc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 80022d0:	bf00      	nop
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	42f00000 	.word	0x42f00000

080022dc <compensate_temperature>:
 * For e.g. Returns temperature 24.26 deg Celsius
 */
static int8_t compensate_temperature(double *temperature,
                                     const struct bmp3_uncomp_data *uncomp_data,
                                     struct bmp3_calib_data *calib_data)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08c      	sub	sp, #48	; 0x30
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int64_t uncomp_temp = uncomp_data->temperature;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80022f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double partial_data1;
    double partial_data2;

    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 80022f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022fc:	f7fe f966 	bl	80005cc <__aeabi_l2d>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002306:	f7fd ffd7 	bl	80002b8 <__aeabi_dsub>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002318:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800231c:	f7fe f984 	bl	8000628 <__aeabi_dmul>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Update the compensated temperature in calib structure since this is
     * needed for pressure calculation */
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8002328:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800232c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002330:	f7fe f97a 	bl	8000628 <__aeabi_dmul>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4610      	mov	r0, r2
 800233a:	4619      	mov	r1, r3
                                             calib_data->quantized_calib_data.par_t3;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8002342:	f7fe f971 	bl	8000628 <__aeabi_dmul>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4610      	mov	r0, r2
 800234c:	4619      	mov	r1, r3
 800234e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002352:	f7fd ffb3 	bl	80002bc <__adddf3>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

    /* Returns compensated temperature */
    if (calib_data->quantized_calib_data.t_lin < BMP3_MIN_TEMP_DOUBLE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <compensate_temperature+0xec>)
 800236c:	f7fe fbce 	bl	8000b0c <__aeabi_dcmplt>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d008      	beq.n	8002388 <compensate_temperature+0xac>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MIN_TEMP_DOUBLE;
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <compensate_temperature+0xec>)
 800237e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        rslt = BMP3_W_MIN_TEMP;
 8002382:	2303      	movs	r3, #3
 8002384:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (calib_data->quantized_calib_data.t_lin > BMP3_MAX_TEMP_DOUBLE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <compensate_temperature+0xf0>)
 8002394:	f7fe fbd8 	bl	8000b48 <__aeabi_dcmpgt>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d008      	beq.n	80023b0 <compensate_temperature+0xd4>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MAX_TEMP_DOUBLE;
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	4b09      	ldr	r3, [pc, #36]	; (80023cc <compensate_temperature+0xf0>)
 80023a6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        rslt = BMP3_W_MAX_TEMP;
 80023aa:	2304      	movs	r3, #4
 80023ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*temperature) = calib_data->quantized_calib_data.t_lin;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80023b6:	68f9      	ldr	r1, [r7, #12]
 80023b8:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 80023bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3730      	adds	r7, #48	; 0x30
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	c0440000 	.word	0xc0440000
 80023cc:	40554000 	.word	0x40554000

080023d0 <compensate_pressure>:
 * For e.g. returns pressure in Pascal p = 95305.295
 */
static int8_t compensate_pressure(double *pressure,
                                  const struct bmp3_uncomp_data *uncomp_data,
                                  const struct bmp3_calib_data *calib_data)
{
 80023d0:	b5b0      	push	{r4, r5, r7, lr}
 80023d2:	b096      	sub	sp, #88	; 0x58
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    const struct bmp3_quantized_calib_data *quantized_calib_data = &calib_data->quantized_calib_data;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	647b      	str	r3, [r7, #68]	; 0x44
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 80023e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80023ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ee:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80023f2:	f7fe f919 	bl	8000628 <__aeabi_dmul>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 80023fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002400:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8002404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002406:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 800240a:	2002      	movs	r0, #2
 800240c:	eeb0 0a47 	vmov.f32	s0, s14
 8002410:	eef0 0a67 	vmov.f32	s1, s15
 8002414:	f000 f954 	bl	80026c0 <pow_bmp3>
 8002418:	ee10 3a10 	vmov	r3, s0
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe f8ab 	bl	8000578 <__aeabi_f2d>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4620      	mov	r0, r4
 8002428:	4629      	mov	r1, r5
 800242a:	f7fe f8fd 	bl	8000628 <__aeabi_dmul>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 8002436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002438:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800243c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800243e:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8002442:	2003      	movs	r0, #3
 8002444:	eeb0 0a47 	vmov.f32	s0, s14
 8002448:	eef0 0a67 	vmov.f32	s1, s15
 800244c:	f000 f938 	bl	80026c0 <pow_bmp3>
 8002450:	ee10 3a10 	vmov	r3, s0
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe f88f 	bl	8000578 <__aeabi_f2d>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4620      	mov	r0, r4
 8002460:	4629      	mov	r1, r5
 8002462:	f7fe f8e1 	bl	8000628 <__aeabi_dmul>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 800246e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002470:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002474:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002478:	f7fd ff20 	bl	80002bc <__adddf3>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002488:	f7fd ff18 	bl	80002bc <__adddf3>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002494:	f7fd ff12 	bl	80002bc <__adddf3>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 80024a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80024a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80024ac:	f7fe f8bc 	bl	8000628 <__aeabi_dmul>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 80024b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ba:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80024be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024c0:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80024c4:	2002      	movs	r0, #2
 80024c6:	eeb0 0a47 	vmov.f32	s0, s14
 80024ca:	eef0 0a67 	vmov.f32	s1, s15
 80024ce:	f000 f8f7 	bl	80026c0 <pow_bmp3>
 80024d2:	ee10 3a10 	vmov	r3, s0
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe f84e 	bl	8000578 <__aeabi_f2d>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4620      	mov	r0, r4
 80024e2:	4629      	mov	r1, r5
 80024e4:	f7fe f8a0 	bl	8000628 <__aeabi_dmul>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 80024f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f2:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80024f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f8:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80024fc:	2003      	movs	r0, #3
 80024fe:	eeb0 0a47 	vmov.f32	s0, s14
 8002502:	eef0 0a67 	vmov.f32	s1, s15
 8002506:	f000 f8db 	bl	80026c0 <pow_bmp3>
 800250a:	ee10 3a10 	vmov	r3, s0
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe f832 	bl	8000578 <__aeabi_f2d>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4620      	mov	r0, r4
 800251a:	4629      	mov	r1, r5
 800251c:	f7fe f884 	bl	8000628 <__aeabi_dmul>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out2 = uncomp_data->pressure *
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252e:	4610      	mov	r0, r2
 8002530:	4619      	mov	r1, r3
 8002532:	f7fe f843 	bl	80005bc <__aeabi_ul2d>
 8002536:	4604      	mov	r4, r0
 8002538:	460d      	mov	r5, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 800253a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800253c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002540:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002544:	f7fd feba 	bl	80002bc <__adddf3>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4610      	mov	r0, r2
 800254e:	4619      	mov	r1, r3
 8002550:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002554:	f7fd feb2 	bl	80002bc <__adddf3>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4610      	mov	r0, r2
 800255e:	4619      	mov	r1, r3
 8002560:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002564:	f7fd feaa 	bl	80002bc <__adddf3>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
    partial_out2 = uncomp_data->pressure *
 800256c:	4620      	mov	r0, r4
 800256e:	4629      	mov	r1, r5
 8002570:	f7fe f85a 	bl	8000628 <__aeabi_dmul>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002582:	4610      	mov	r0, r2
 8002584:	4619      	mov	r1, r3
 8002586:	f7fe f819 	bl	80005bc <__aeabi_ul2d>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	2002      	movs	r0, #2
 8002590:	ec43 2b10 	vmov	d0, r2, r3
 8002594:	f000 f894 	bl	80026c0 <pow_bmp3>
 8002598:	ee10 3a10 	vmov	r3, s0
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd ffeb 	bl	8000578 <__aeabi_f2d>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 80025aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ac:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 80025b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b2:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80025b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80025bc:	f7fe f834 	bl	8000628 <__aeabi_dmul>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4620      	mov	r0, r4
 80025c6:	4629      	mov	r1, r5
 80025c8:	f7fd fe78 	bl	80002bc <__adddf3>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = partial_data1 * partial_data2;
 80025d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80025d8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80025dc:	f7fe f824 	bl	8000628 <__aeabi_dmul>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ee:	4610      	mov	r0, r2
 80025f0:	4619      	mov	r1, r3
 80025f2:	f7fd ffe3 	bl	80005bc <__aeabi_ul2d>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	2003      	movs	r0, #3
 80025fc:	ec43 2b10 	vmov	d0, r2, r3
 8002600:	f000 f85e 	bl	80026c0 <pow_bmp3>
 8002604:	ee10 3a10 	vmov	r3, s0
 8002608:	4618      	mov	r0, r3
 800260a:	f7fd ffb5 	bl	8000578 <__aeabi_f2d>
 800260e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002610:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002614:	f7fe f808 	bl	8000628 <__aeabi_dmul>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002620:	f7fd fe4c 	bl	80002bc <__adddf3>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	e9c7 2304 	strd	r2, r3, [r7, #16]
    comp_press = partial_out1 + partial_out2 + partial_data4;
 800262c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002630:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002634:	f7fd fe42 	bl	80002bc <__adddf3>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002640:	f7fd fe3c 	bl	80002bc <__adddf3>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    if (comp_press < BMP3_MIN_PRES_DOUBLE)
 800264c:	a318      	add	r3, pc, #96	; (adr r3, 80026b0 <compensate_pressure+0x2e0>)
 800264e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002652:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002656:	f7fe fa59 	bl	8000b0c <__aeabi_dcmplt>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d007      	beq.n	8002670 <compensate_pressure+0x2a0>
    {
        comp_press = BMP3_MIN_PRES_DOUBLE;
 8002660:	a313      	add	r3, pc, #76	; (adr r3, 80026b0 <compensate_pressure+0x2e0>)
 8002662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002666:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        rslt = BMP3_W_MIN_PRES;
 800266a:	2305      	movs	r3, #5
 800266c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    if (comp_press > BMP3_MAX_PRES_DOUBLE)
 8002670:	a311      	add	r3, pc, #68	; (adr r3, 80026b8 <compensate_pressure+0x2e8>)
 8002672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002676:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800267a:	f7fe fa65 	bl	8000b48 <__aeabi_dcmpgt>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d007      	beq.n	8002694 <compensate_pressure+0x2c4>
    {
        comp_press = BMP3_MAX_PRES_DOUBLE;
 8002684:	a30c      	add	r3, pc, #48	; (adr r3, 80026b8 <compensate_pressure+0x2e8>)
 8002686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        rslt = BMP3_W_MAX_PRES;
 800268e:	2306      	movs	r3, #6
 8002690:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    (*pressure) = comp_press;
 8002694:	68f9      	ldr	r1, [r7, #12]
 8002696:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800269a:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 800269e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3758      	adds	r7, #88	; 0x58
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bdb0      	pop	{r4, r5, r7, pc}
 80026aa:	bf00      	nop
 80026ac:	f3af 8000 	nop.w
 80026b0:	00000000 	.word	0x00000000
 80026b4:	40dd4c00 	.word	0x40dd4c00
 80026b8:	00000000 	.word	0x00000000
 80026bc:	40fe8480 	.word	0x40fe8480

080026c0 <pow_bmp3>:
/*!
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	ed87 0b02 	vstr	d0, [r7, #8]
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
    float pow_output = 1;
 80026ce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80026d2:	617b      	str	r3, [r7, #20]

    while (power != 0)
 80026d4:	e00e      	b.n	80026f4 <pow_bmp3+0x34>
    {
        pow_output = (float) base * pow_output;
 80026d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026da:	f7fe fa7d 	bl	8000bd8 <__aeabi_d2f>
 80026de:	ee07 0a10 	vmov	s14, r0
 80026e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80026e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ea:	edc7 7a05 	vstr	s15, [r7, #20]
        power--;
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	71fb      	strb	r3, [r7, #7]
    while (power != 0)
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1ed      	bne.n	80026d6 <pow_bmp3+0x16>
    }

    return pow_output;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	ee07 3a90 	vmov	s15, r3
}
 8002700:	eeb0 0a67 	vmov.f32	s0, s15
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 800270a:	b480      	push	{r7}
 800270c:	b085      	sub	sp, #20
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 8002714:	2300      	movs	r3, #0
 8002716:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <are_settings_changed+0x1e>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8002722:	2301      	movs	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
 8002726:	e001      	b.n	800272c <are_settings_changed+0x22>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8002728:	2300      	movs	r3, #0
 800272a:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 800272c:	7bfb      	ldrb	r3, [r7, #15]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 800273a:	b480      	push	{r7}
 800273c:	b085      	sub	sp, #20
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00f      	beq.n	8002768 <null_ptr_check+0x2e>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00b      	beq.n	8002768 <null_ptr_check+0x2e>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d007      	beq.n	8002768 <null_ptr_check+0x2e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8002764:	2b00      	cmp	r3, #0
 8002766:	d102      	bne.n	800276e <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 8002768:	23ff      	movs	r3, #255	; 0xff
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	e001      	b.n	8002772 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002772:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <get_sensor_status>:
/*!
 * @brief This API gets the command ready, data ready for pressure and
 * temperature, power on reset status from the sensor.
 */
static int8_t get_sensor_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
 800278a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;

    reg_addr = BMP3_REG_SENS_STATUS;
 800278c:	2303      	movs	r3, #3
 800278e:	73bb      	strb	r3, [r7, #14]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8002790:	f107 010d 	add.w	r1, r7, #13
 8002794:	7bb8      	ldrb	r0, [r7, #14]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2201      	movs	r2, #1
 800279a:	f7fe fc36 	bl	800100a <bmp3_get_regs>
 800279e:	4603      	mov	r3, r0
 80027a0:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 80027a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d128      	bne.n	80027fc <get_sensor_status+0x7a>
    {
        status->sensor.cmd_rdy = BMP3_GET_BITS(reg_data, BMP3_STATUS_CMD_RDY);
 80027aa:	7b7b      	ldrb	r3, [r7, #13]
 80027ac:	111b      	asrs	r3, r3, #4
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	70da      	strb	r2, [r3, #3]
        status->sensor.drdy_press = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_PRESS);
 80027ba:	7b7b      	ldrb	r3, [r7, #13]
 80027bc:	115b      	asrs	r3, r3, #5
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	711a      	strb	r2, [r3, #4]
        status->sensor.drdy_temp = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_TEMP);
 80027ca:	7b7b      	ldrb	r3, [r7, #13]
 80027cc:	119b      	asrs	r3, r3, #6
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	715a      	strb	r2, [r3, #5]
        reg_addr = BMP3_REG_EVENT;
 80027da:	2310      	movs	r3, #16
 80027dc:	73bb      	strb	r3, [r7, #14]
        rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80027de:	f107 010d 	add.w	r1, r7, #13
 80027e2:	7bb8      	ldrb	r0, [r7, #14]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f7fe fc0f 	bl	800100a <bmp3_get_regs>
 80027ec:	4603      	mov	r3, r0
 80027ee:	73fb      	strb	r3, [r7, #15]
        status->pwr_on_rst = reg_data & 0x01;
 80027f0:	7b7b      	ldrb	r3, [r7, #13]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	725a      	strb	r2, [r3, #9]
    }

    return rslt;
 80027fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <get_int_status>:
/*!
 * @brief This API gets the interrupt (fifo watermark, fifo full, data ready)
 * status from the sensor.
 */
static int8_t get_int_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_INT_STATUS, &reg_data, 1, dev);
 8002812:	f107 010e 	add.w	r1, r7, #14
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2201      	movs	r2, #1
 800281a:	2011      	movs	r0, #17
 800281c:	f7fe fbf5 	bl	800100a <bmp3_get_regs>
 8002820:	4603      	mov	r3, r0
 8002822:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8002824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d115      	bne.n	8002858 <get_int_status+0x50>
    {
        status->intr.fifo_wm = BMP3_GET_BITS_POS_0(reg_data, BMP3_INT_STATUS_FWTM);
 800282c:	7bbb      	ldrb	r3, [r7, #14]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	b2da      	uxtb	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	701a      	strb	r2, [r3, #0]
        status->intr.fifo_full = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_FFULL);
 8002838:	7bbb      	ldrb	r3, [r7, #14]
 800283a:	105b      	asrs	r3, r3, #1
 800283c:	b2db      	uxtb	r3, r3
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	b2da      	uxtb	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	705a      	strb	r2, [r3, #1]
        status->intr.drdy = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_DRDY);
 8002848:	7bbb      	ldrb	r3, [r7, #14]
 800284a:	10db      	asrs	r3, r3, #3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	b2da      	uxtb	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	709a      	strb	r2, [r3, #2]
    }

    return rslt;
 8002858:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <get_err_status>:
/*!
 * @brief This API gets the fatal, command and configuration error
 * from the sensor.
 */
static int8_t get_err_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_ERR, &reg_data, 1, dev);
 800286e:	f107 010e 	add.w	r1, r7, #14
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2201      	movs	r2, #1
 8002876:	2002      	movs	r0, #2
 8002878:	f7fe fbc7 	bl	800100a <bmp3_get_regs>
 800287c:	4603      	mov	r3, r0
 800287e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8002880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d115      	bne.n	80028b4 <get_err_status+0x50>
    {
        status->err.cmd = BMP3_GET_BITS_POS_0(reg_data, BMP3_ERR_FATAL);
 8002888:	7bbb      	ldrb	r3, [r7, #14]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	b2da      	uxtb	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	71da      	strb	r2, [r3, #7]
        status->err.conf = BMP3_GET_BITS(reg_data, BMP3_ERR_CMD);
 8002894:	7bbb      	ldrb	r3, [r7, #14]
 8002896:	105b      	asrs	r3, r3, #1
 8002898:	b2db      	uxtb	r3, r3
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	721a      	strb	r2, [r3, #8]
        status->err.fatal = BMP3_GET_BITS(reg_data, BMP3_ERR_CONF);
 80028a4:	7bbb      	ldrb	r3, [r7, #14]
 80028a6:	109b      	asrs	r3, r3, #2
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	719a      	strb	r2, [r3, #6]
    }

    return rslt;
 80028b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <bmp3_check_rslt>:
extern volatile uint8_t int2_flag;

static uint8_t dev_addr = 0;

void bmp3_check_rslt(const char api_name[], int8_t rslt)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	70fb      	strb	r3, [r7, #3]
    switch (rslt)
 80028cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028d0:	3307      	adds	r3, #7
 80028d2:	2b09      	cmp	r3, #9
 80028d4:	d839      	bhi.n	800294a <bmp3_check_rslt+0x8a>
 80028d6:	a201      	add	r2, pc, #4	; (adr r2, 80028dc <bmp3_check_rslt+0x1c>)
 80028d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028dc:	08002923 	.word	0x08002923
 80028e0:	08002919 	.word	0x08002919
 80028e4:	0800292d 	.word	0x0800292d
 80028e8:	0800294b 	.word	0x0800294b
 80028ec:	0800294b 	.word	0x0800294b
 80028f0:	0800290f 	.word	0x0800290f
 80028f4:	08002905 	.word	0x08002905
 80028f8:	08002955 	.word	0x08002955
 80028fc:	08002937 	.word	0x08002937
 8002900:	08002941 	.word	0x08002941

            // Do nothing
            break;
        case BMP3_E_NULL_PTR:
            //PDEBUG("API [%s] Error [%d] : Null pointer\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR1\n", 7);
 8002904:	2107      	movs	r1, #7
 8002906:	4816      	ldr	r0, [pc, #88]	; (8002960 <bmp3_check_rslt+0xa0>)
 8002908:	f011 f9c2 	bl	8013c90 <CDC_Transmit_FS>
            break;
 800290c:	e023      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_COMM_FAIL:
        	//PDEBUG("API [%s] Error [%d] : Communication failure\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR2\n", 6);
 800290e:	2106      	movs	r1, #6
 8002910:	4814      	ldr	r0, [pc, #80]	; (8002964 <bmp3_check_rslt+0xa4>)
 8002912:	f011 f9bd 	bl	8013c90 <CDC_Transmit_FS>
        	break;
 8002916:	e01e      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_INVALID_LEN:
        	//PDEBUG("API [%s] Error [%d] : Incorrect length parameter\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR3\n", 6);
 8002918:	2106      	movs	r1, #6
 800291a:	4813      	ldr	r0, [pc, #76]	; (8002968 <bmp3_check_rslt+0xa8>)
 800291c:	f011 f9b8 	bl	8013c90 <CDC_Transmit_FS>
        	break;
 8002920:	e019      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_DEV_NOT_FOUND:
        	//PDEBUG("API [%s] Error [%d] : Device not found\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR4\n", 6);
 8002922:	2106      	movs	r1, #6
 8002924:	4811      	ldr	r0, [pc, #68]	; (800296c <bmp3_check_rslt+0xac>)
 8002926:	f011 f9b3 	bl	8013c90 <CDC_Transmit_FS>
        	break;
 800292a:	e014      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_CONFIGURATION_ERR:
        	//PDEBUG("API [%s] Error [%d] : Configuration Error\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR5\n", 6);
 800292c:	2106      	movs	r1, #6
 800292e:	4810      	ldr	r0, [pc, #64]	; (8002970 <bmp3_check_rslt+0xb0>)
 8002930:	f011 f9ae 	bl	8013c90 <CDC_Transmit_FS>
        	break;
 8002934:	e00f      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_W_SENSOR_NOT_ENABLED:
        	//PDEBUG("API [%s] Error [%d] : Warning when Sensor not enabled\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR6\n", 6);
 8002936:	2106      	movs	r1, #6
 8002938:	480e      	ldr	r0, [pc, #56]	; (8002974 <bmp3_check_rslt+0xb4>)
 800293a:	f011 f9a9 	bl	8013c90 <CDC_Transmit_FS>
        	break;
 800293e:	e00a      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_W_INVALID_FIFO_REQ_FRAME_CNT:
        	//PDEBUG("API [%s] Error [%d] : Warning when Fifo watermark level is not in limit\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR7\n", 6);
 8002940:	2106      	movs	r1, #6
 8002942:	480d      	ldr	r0, [pc, #52]	; (8002978 <bmp3_check_rslt+0xb8>)
 8002944:	f011 f9a4 	bl	8013c90 <CDC_Transmit_FS>
        	break;
 8002948:	e005      	b.n	8002956 <bmp3_check_rslt+0x96>
        default:
        	//PDEBUG("API [%s] Error [%d] : Unknown error code\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR8\n", 6);
 800294a:	2106      	movs	r1, #6
 800294c:	480b      	ldr	r0, [pc, #44]	; (800297c <bmp3_check_rslt+0xbc>)
 800294e:	f011 f99f 	bl	8013c90 <CDC_Transmit_FS>
        	break;
 8002952:	e000      	b.n	8002956 <bmp3_check_rslt+0x96>
            break;
 8002954:	bf00      	nop
    }
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	08017644 	.word	0x08017644
 8002964:	0801764c 	.word	0x0801764c
 8002968:	08017654 	.word	0x08017654
 800296c:	0801765c 	.word	0x0801765c
 8002970:	08017664 	.word	0x08017664
 8002974:	0801766c 	.word	0x0801766c
 8002978:	08017674 	.word	0x08017674
 800297c:	0801767c 	.word	0x0801767c

08002980 <bmp3_interface_init>:

BMP3_INTF_RET_TYPE bmp3_interface_init(struct bmp3_dev *bmp3, uint8_t intf)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	70fb      	strb	r3, [r7, #3]
	int8_t rslt = BMP3_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	73fb      	strb	r3, [r7, #15]

	if(bmp3 != NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d015      	beq.n	80029c2 <bmp3_interface_init+0x42>
	{
		/* Bus configuration : I2C */
		if (intf == BMP3_I2C_INTF)
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d10b      	bne.n	80029b4 <bmp3_interface_init+0x34>
		{
			//PDEBUG("I2C Interface\n");
			dev_addr = BMP3_ADDR_I2C_SEC;
 800299c:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <bmp3_interface_init+0x58>)
 800299e:	2277      	movs	r2, #119	; 0x77
 80029a0:	701a      	strb	r2, [r3, #0]
			bmp3->read = SensorAPI_I2Cx_Read;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a0d      	ldr	r2, [pc, #52]	; (80029dc <bmp3_interface_init+0x5c>)
 80029a6:	60da      	str	r2, [r3, #12]
			bmp3->write = SensorAPI_I2Cx_Write;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a0d      	ldr	r2, [pc, #52]	; (80029e0 <bmp3_interface_init+0x60>)
 80029ac:	611a      	str	r2, [r3, #16]
			bmp3->intf = BMP3_I2C_INTF;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	721a      	strb	r2, [r3, #8]
			bmp3->read = SensorAPI_SPIx_Read;
			bmp3->write = SensorAPI_SPIx_Write;
			bmp3->intf = BMP3_SPI_INTF;
		}*/

		bmp3->delay_us = bmp3_delay_us;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a0b      	ldr	r2, [pc, #44]	; (80029e4 <bmp3_interface_init+0x64>)
 80029b8:	615a      	str	r2, [r3, #20]
		bmp3->intf_ptr = &dev_addr;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a06      	ldr	r2, [pc, #24]	; (80029d8 <bmp3_interface_init+0x58>)
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	e001      	b.n	80029c6 <bmp3_interface_init+0x46>
	}
	else
	{
		rslt = BMP3_E_NULL_PTR;
 80029c2:	23ff      	movs	r3, #255	; 0xff
 80029c4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80029c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	20000370 	.word	0x20000370
 80029dc:	08002a21 	.word	0x08002a21
 80029e0:	08002a75 	.word	0x08002a75
 80029e4:	080029e9 	.word	0x080029e9

080029e8 <bmp3_delay_us>:
		}
	}
}

void bmp3_delay_us(uint32_t period, void *intf_ptr)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
	uint32_t i;

	while(period--)
 80029f2:	e008      	b.n	8002a06 <bmp3_delay_us+0x1e>
	{
		for(i = 0; i < 84; i++)
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	e002      	b.n	8002a00 <bmp3_delay_us+0x18>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3301      	adds	r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b53      	cmp	r3, #83	; 0x53
 8002a04:	d9f9      	bls.n	80029fa <bmp3_delay_us+0x12>
	while(period--)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	1e5a      	subs	r2, r3, #1
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f1      	bne.n	80029f4 <bmp3_delay_us+0xc>
		{
			;
		}
	}
}
 8002a10:	bf00      	nop
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <SensorAPI_I2Cx_Read>:
* Input          : I2C1 or I2C2, slave_address7, subaddress, Write Number
* Output         : None
* Return         : number of bytes transmitted
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t subaddress, uint8_t *pBuffer, uint16_t ReadNumbr, void *intf_ptr)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af02      	add	r7, sp, #8
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	73fb      	strb	r3, [r7, #15]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	81bb      	strh	r3, [r7, #12]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr << 1;
 8002a38:	7dfb      	ldrb	r3, [r7, #23]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	82bb      	strh	r3, [r7, #20]

	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, &subaddress, 1, BUS_TIMEOUT);
 8002a40:	f107 020f 	add.w	r2, r7, #15
 8002a44:	8ab9      	ldrh	r1, [r7, #20]
 8002a46:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	4808      	ldr	r0, [pc, #32]	; (8002a70 <SensorAPI_I2Cx_Read+0x50>)
 8002a50:	f001 ff0e 	bl	8004870 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, DevAddress, pBuffer, ReadNumbr, BUS_TIMEOUT);
 8002a54:	89bb      	ldrh	r3, [r7, #12]
 8002a56:	8ab9      	ldrh	r1, [r7, #20]
 8002a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5c:	9200      	str	r2, [sp, #0]
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	4803      	ldr	r0, [pc, #12]	; (8002a70 <SensorAPI_I2Cx_Read+0x50>)
 8002a62:	f001 fff9 	bl	8004a58 <HAL_I2C_Master_Receive>
	return 0;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	200005c8 	.word	0x200005c8

08002a74 <SensorAPI_I2Cx_Write>:

int8_t SensorAPI_I2Cx_Write(uint8_t subaddress, uint8_t *pBuffer, uint16_t WriteNumbr, void *intf_ptr)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607b      	str	r3, [r7, #4]
 8002a7e:	4603      	mov	r3, r0
 8002a80:	73fb      	strb	r3, [r7, #15]
 8002a82:	4613      	mov	r3, r2
 8002a84:	81bb      	strh	r3, [r7, #12]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr << 1;
 8002a8c:	7dfb      	ldrb	r3, [r7, #23]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	82bb      	strh	r3, [r7, #20]

	GTXBuffer[0] = subaddress;
 8002a94:	4a0c      	ldr	r2, [pc, #48]	; (8002ac8 <SensorAPI_I2Cx_Write+0x54>)
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], pBuffer, WriteNumbr);
 8002a9a:	89bb      	ldrh	r3, [r7, #12]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68b9      	ldr	r1, [r7, #8]
 8002aa0:	480a      	ldr	r0, [pc, #40]	; (8002acc <SensorAPI_I2Cx_Write+0x58>)
 8002aa2:	f011 fe4d 	bl	8014740 <memcpy>

	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, GTXBuffer, WriteNumbr+1, BUS_TIMEOUT);
 8002aa6:	89bb      	ldrh	r3, [r7, #12]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	8ab9      	ldrh	r1, [r7, #20]
 8002aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab2:	9200      	str	r2, [sp, #0]
 8002ab4:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <SensorAPI_I2Cx_Write+0x54>)
 8002ab6:	4806      	ldr	r0, [pc, #24]	; (8002ad0 <SensorAPI_I2Cx_Write+0x5c>)
 8002ab8:	f001 feda 	bl	8004870 <HAL_I2C_Master_Transmit>
	return 0;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20000374 	.word	0x20000374
 8002acc:	20000375 	.word	0x20000375
 8002ad0:	200005c8 	.word	0x200005c8

08002ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ad4:	b5b0      	push	{r4, r5, r7, lr}
 8002ad6:	f6ad 5df8 	subw	sp, sp, #3576	; 0xdf8
 8002ada:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	UINT byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[50] = "STM32 FATFS works great!"; /* File write buffer. */
 8002adc:	4bc7      	ldr	r3, [pc, #796]	; (8002dfc <main+0x328>)
 8002ade:	f607 5458 	addw	r4, r7, #3416	; 0xd58
 8002ae2:	461d      	mov	r5, r3
 8002ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ae8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002aec:	c403      	stmia	r4!, {r0, r1}
 8002aee:	7022      	strb	r2, [r4, #0]
 8002af0:	f607 5371 	addw	r3, r7, #3441	; 0xd71
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	605a      	str	r2, [r3, #4]
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	60da      	str	r2, [r3, #12]
 8002afe:	611a      	str	r2, [r3, #16]
 8002b00:	615a      	str	r2, [r3, #20]
 8002b02:	761a      	strb	r2, [r3, #24]
	uint8_t UART2_RxBuffer[272];

	// For USB Transmission
	USBD_HandleTypeDef hUsbDeviceFS;
	uint8_t USB_Tx_STATUS;
	uint8_t *data = "Hello!\n";
 8002b04:	4bbe      	ldr	r3, [pc, #760]	; (8002e00 <main+0x32c>)
 8002b06:	f8c7 3de8 	str.w	r3, [r7, #3560]	; 0xde8

	uint8_t USB_TxBuffer_FS;
	uint32_t USB_TxBuffer_Length = 1000;
 8002b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b0e:	f8c7 3de4 	str.w	r3, [r7, #3556]	; 0xde4
	GPS myData;

	int8_t rslt;
	uint16_t settings_sel;
	struct bmp3_dev dev;
	struct bmp3_data bmpdata = { 0 };
 8002b12:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8002b16:	f5a3 6357 	sub.w	r3, r3, #3440	; 0xd70
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	6053      	str	r3, [r2, #4]
 8002b22:	6093      	str	r3, [r2, #8]
 8002b24:	60d3      	str	r3, [r2, #12]
	struct bmp3_settings settings = { 0 };
 8002b26:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8002b2a:	f5a3 6358 	sub.w	r3, r3, #3456	; 0xd80
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	605a      	str	r2, [r3, #4]
 8002b34:	609a      	str	r2, [r3, #8]
 8002b36:	731a      	strb	r2, [r3, #12]
	struct bmp3_status status = { { 0 } };
 8002b38:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8002b3c:	f6a3 538c 	subw	r3, r3, #3468	; 0xd8c
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	811a      	strh	r2, [r3, #8]
	uint8_t TempBuffer[25] = {0};
 8002b48:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8002b4c:	f6a3 53a8 	subw	r3, r3, #3496	; 0xda8
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	3304      	adds	r3, #4
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	605a      	str	r2, [r3, #4]
 8002b5c:	609a      	str	r2, [r3, #8]
 8002b5e:	60da      	str	r2, [r3, #12]
 8002b60:	611a      	str	r2, [r3, #16]
 8002b62:	751a      	strb	r2, [r3, #20]
	uint8_t PresBuffer[25] = {0};
 8002b64:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8002b68:	f6a3 53c4 	subw	r3, r3, #3524	; 0xdc4
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	3304      	adds	r3, #4
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	605a      	str	r2, [r3, #4]
 8002b78:	609a      	str	r2, [r3, #8]
 8002b7a:	60da      	str	r2, [r3, #12]
 8002b7c:	611a      	str	r2, [r3, #16]
 8002b7e:	751a      	strb	r2, [r3, #20]

	//test
	HAL_StatusTypeDef i2c2status;
	uint8_t hello[7] = "Hello!\n";
 8002b80:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8002b84:	f6a3 53cc 	subw	r3, r3, #3532	; 0xdcc
 8002b88:	4a9e      	ldr	r2, [pc, #632]	; (8002e04 <main+0x330>)
 8002b8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b8e:	6018      	str	r0, [r3, #0]
 8002b90:	3304      	adds	r3, #4
 8002b92:	8019      	strh	r1, [r3, #0]
 8002b94:	3302      	adds	r3, #2
 8002b96:	0c0a      	lsrs	r2, r1, #16
 8002b98:	701a      	strb	r2, [r3, #0]
	uint8_t Buffer[25] = {0};
 8002b9a:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8002b9e:	f6a3 53e8 	subw	r3, r3, #3560	; 0xde8
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	611a      	str	r2, [r3, #16]
 8002bb4:	751a      	strb	r2, [r3, #20]
	uint8_t Space[] = " - ";
 8002bb6:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8002bba:	f6a3 53ec 	subw	r3, r3, #3564	; 0xdec
 8002bbe:	4a92      	ldr	r2, [pc, #584]	; (8002e08 <main+0x334>)
 8002bc0:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bc2:	f001 f984 	bl	8003ece <HAL_Init>

  /* USER CODE BEGIN Init */

  // SD reader
  MX_FATFS_Init();
 8002bc6:	f00c fa49 	bl	800f05c <MX_FATFS_Init>
  // This returned 0'\0', even though it's supposed to return either USBD_OK or USBD_FAIL
//   USBD_TxBuffer_Status = USBD_CDC_SetTxBuffer(&hUsbDeviceFS, USB_TxBuffer_FS, USB_TxBuffer_Length);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bca:	f000 fb15 	bl	80031f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bce:	f000 fd69 	bl	80036a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002bd2:	f000 fb77 	bl	80032c4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002bd6:	f000 fbb5 	bl	8003344 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 8002bda:	f000 fbf3 	bl	80033c4 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8002bde:	f000 fc13 	bl	8003408 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002be2:	f000 fcc5 	bl	8003570 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002be6:	f000 fd11 	bl	800360c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8002bea:	f00c fa37 	bl	800f05c <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8002bee:	f010 ff91 	bl	8013b14 <MX_USB_DEVICE_Init>
  MX_TIM17_Init();
 8002bf2:	f000 fc47 	bl	8003484 <MX_TIM17_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002bf6:	f000 fb51 	bl	800329c <MX_NVIC_Init>

  /* Interface reference is given as a parameter
  	 *         For I2C : BMP3_I2C_INTF
  	 *         For SPI : BMP3_SPI_INTF
  	 */
  	rslt = bmp3_interface_init(&dev, BMP3_I2C_INTF);
 8002bfa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002bfe:	2101      	movs	r1, #1
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff febd 	bl	8002980 <bmp3_interface_init>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f887 3de3 	strb.w	r3, [r7, #3555]	; 0xde3
  	bmp3_check_rslt("bmp3_interface_init", rslt);
 8002c0c:	f997 3de3 	ldrsb.w	r3, [r7, #3555]	; 0xde3
 8002c10:	4619      	mov	r1, r3
 8002c12:	487e      	ldr	r0, [pc, #504]	; (8002e0c <main+0x338>)
 8002c14:	f7ff fe54 	bl	80028c0 <bmp3_check_rslt>

  	rslt = bmp3_init(&dev);
 8002c18:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7fe f9ad 	bl	8000f7c <bmp3_init>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f887 3de3 	strb.w	r3, [r7, #3555]	; 0xde3
  	bmp3_check_rslt("bmp3_init", rslt);
 8002c28:	f997 3de3 	ldrsb.w	r3, [r7, #3555]	; 0xde3
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4878      	ldr	r0, [pc, #480]	; (8002e10 <main+0x33c>)
 8002c30:	f7ff fe46 	bl	80028c0 <bmp3_check_rslt>

  	settings.int_settings.drdy_en = BMP3_DISABLE;
 8002c34:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8002c38:	f5a3 6358 	sub.w	r3, r3, #3456	; 0xd80
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	729a      	strb	r2, [r3, #10]
  	settings.int_settings.latch = BMP3_ENABLE;
 8002c40:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8002c44:	f5a3 6358 	sub.w	r3, r3, #3456	; 0xd80
 8002c48:	2201      	movs	r2, #1
 8002c4a:	725a      	strb	r2, [r3, #9]
  	settings.press_en = BMP3_ENABLE;
 8002c4c:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8002c50:	f5a3 6358 	sub.w	r3, r3, #3456	; 0xd80
 8002c54:	2201      	movs	r2, #1
 8002c56:	705a      	strb	r2, [r3, #1]
  	settings.temp_en = BMP3_ENABLE;
 8002c58:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8002c5c:	f5a3 6358 	sub.w	r3, r3, #3456	; 0xd80
 8002c60:	2201      	movs	r2, #1
 8002c62:	709a      	strb	r2, [r3, #2]

  	settings.odr_filter.press_os = BMP3_OVERSAMPLING_4X;
 8002c64:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8002c68:	f5a3 6358 	sub.w	r3, r3, #3456	; 0xd80
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	70da      	strb	r2, [r3, #3]
  	settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
 8002c70:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8002c74:	f5a3 6358 	sub.w	r3, r3, #3456	; 0xd80
 8002c78:	2200      	movs	r2, #0
 8002c7a:	711a      	strb	r2, [r3, #4]
  	settings.odr_filter.odr = BMP3_ODR_100_HZ;
 8002c7c:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8002c80:	f5a3 6358 	sub.w	r3, r3, #3456	; 0xd80
 8002c84:	2201      	movs	r2, #1
 8002c86:	719a      	strb	r2, [r3, #6]

  	settings_sel = BMP3_SEL_PRESS_EN | BMP3_SEL_TEMP_EN | BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR |
 8002c88:	23be      	movs	r3, #190	; 0xbe
 8002c8a:	f8a7 3de0 	strh.w	r3, [r7, #3552]	; 0xde0
  				   BMP3_SEL_DRDY_EN;

  	rslt = bmp3_set_sensor_settings(settings_sel, &settings, &dev);
 8002c8e:	f8b7 3de0 	ldrh.w	r3, [r7, #3552]	; 0xde0
 8002c92:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8002c96:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe fad6 	bl	800124c <bmp3_set_sensor_settings>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	f887 3de3 	strb.w	r3, [r7, #3555]	; 0xde3
  	bmp3_check_rslt("bmp3_set_sensor_settings", rslt);
 8002ca6:	f997 3de3 	ldrsb.w	r3, [r7, #3555]	; 0xde3
 8002caa:	4619      	mov	r1, r3
 8002cac:	4859      	ldr	r0, [pc, #356]	; (8002e14 <main+0x340>)
 8002cae:	f7ff fe07 	bl	80028c0 <bmp3_check_rslt>
  	bmp3_check_rslt("bmp3_set_op_mode", rslt);*/

  volatile unsigned tmp;

  // Setting the buffer for UART2 data reading
  rxBuffer = rxBuffer1;
 8002cb2:	4b59      	ldr	r3, [pc, #356]	; (8002e18 <main+0x344>)
 8002cb4:	4a59      	ldr	r2, [pc, #356]	; (8002e1c <main+0x348>)
 8002cb6:	601a      	str	r2, [r3, #0]
  ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_UE);
 8002cb8:	4b59      	ldr	r3, [pc, #356]	; (8002e20 <main+0x34c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc0:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 8002cc4:	e853 3f00 	ldrex	r3, [r3]
 8002cc8:	f8c7 3dbc 	str.w	r3, [r7, #3516]	; 0xdbc
   return(result);
 8002ccc:	f8d7 3dbc 	ldr.w	r3, [r7, #3516]	; 0xdbc
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	f8c7 3ddc 	str.w	r3, [r7, #3548]	; 0xddc
 8002cd8:	4b51      	ldr	r3, [pc, #324]	; (8002e20 <main+0x34c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	f8d7 3ddc 	ldr.w	r3, [r7, #3548]	; 0xddc
 8002ce2:	f8c7 3dcc 	str.w	r3, [r7, #3532]	; 0xdcc
 8002ce6:	f8c7 2dc8 	str.w	r2, [r7, #3528]	; 0xdc8
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cea:	f8d7 1dc8 	ldr.w	r1, [r7, #3528]	; 0xdc8
 8002cee:	f8d7 2dcc 	ldr.w	r2, [r7, #3532]	; 0xdcc
 8002cf2:	e841 2300 	strex	r3, r2, [r1]
 8002cf6:	f8c7 3dc4 	str.w	r3, [r7, #3524]	; 0xdc4
   return(result);
 8002cfa:	f8d7 3dc4 	ldr.w	r3, [r7, #3524]	; 0xdc4
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1da      	bne.n	8002cb8 <main+0x1e4>
  ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_RE);
 8002d02:	4b47      	ldr	r3, [pc, #284]	; (8002e20 <main+0x34c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f8c7 3dac 	str.w	r3, [r7, #3500]	; 0xdac
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0a:	f8d7 3dac 	ldr.w	r3, [r7, #3500]	; 0xdac
 8002d0e:	e853 3f00 	ldrex	r3, [r3]
 8002d12:	f8c7 3da8 	str.w	r3, [r7, #3496]	; 0xda8
   return(result);
 8002d16:	f8d7 3da8 	ldr.w	r3, [r7, #3496]	; 0xda8
 8002d1a:	f043 0304 	orr.w	r3, r3, #4
 8002d1e:	f8c7 3dd8 	str.w	r3, [r7, #3544]	; 0xdd8
 8002d22:	4b3f      	ldr	r3, [pc, #252]	; (8002e20 <main+0x34c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	f8d7 3dd8 	ldr.w	r3, [r7, #3544]	; 0xdd8
 8002d2c:	f8c7 3db8 	str.w	r3, [r7, #3512]	; 0xdb8
 8002d30:	f8c7 2db4 	str.w	r2, [r7, #3508]	; 0xdb4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d34:	f8d7 1db4 	ldr.w	r1, [r7, #3508]	; 0xdb4
 8002d38:	f8d7 2db8 	ldr.w	r2, [r7, #3512]	; 0xdb8
 8002d3c:	e841 2300 	strex	r3, r2, [r1]
 8002d40:	f8c7 3db0 	str.w	r3, [r7, #3504]	; 0xdb0
   return(result);
 8002d44:	f8d7 3db0 	ldr.w	r3, [r7, #3504]	; 0xdb0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1da      	bne.n	8002d02 <main+0x22e>
  ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002d4c:	4b34      	ldr	r3, [pc, #208]	; (8002e20 <main+0x34c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f8c7 3d98 	str.w	r3, [r7, #3480]	; 0xd98
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d54:	f8d7 3d98 	ldr.w	r3, [r7, #3480]	; 0xd98
 8002d58:	e853 3f00 	ldrex	r3, [r3]
 8002d5c:	f8c7 3d94 	str.w	r3, [r7, #3476]	; 0xd94
   return(result);
 8002d60:	f8d7 3d94 	ldr.w	r3, [r7, #3476]	; 0xd94
 8002d64:	f043 0320 	orr.w	r3, r3, #32
 8002d68:	f8c7 3dd4 	str.w	r3, [r7, #3540]	; 0xdd4
 8002d6c:	4b2c      	ldr	r3, [pc, #176]	; (8002e20 <main+0x34c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	461a      	mov	r2, r3
 8002d72:	f8d7 3dd4 	ldr.w	r3, [r7, #3540]	; 0xdd4
 8002d76:	f8c7 3da4 	str.w	r3, [r7, #3492]	; 0xda4
 8002d7a:	f8c7 2da0 	str.w	r2, [r7, #3488]	; 0xda0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7e:	f8d7 1da0 	ldr.w	r1, [r7, #3488]	; 0xda0
 8002d82:	f8d7 2da4 	ldr.w	r2, [r7, #3492]	; 0xda4
 8002d86:	e841 2300 	strex	r3, r2, [r1]
 8002d8a:	f8c7 3d9c 	str.w	r3, [r7, #3484]	; 0xd9c
   return(result);
 8002d8e:	f8d7 3d9c 	ldr.w	r3, [r7, #3484]	; 0xd9c
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1da      	bne.n	8002d4c <main+0x278>


  HAL_Delay (5000);
 8002d96:	f241 3088 	movw	r0, #5000	; 0x1388
 8002d9a:	f001 f90d 	bl	8003fb8 <HAL_Delay>
  // If not FR_OK, mounting failed, else it was successful
  if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	4920      	ldr	r1, [pc, #128]	; (8002e24 <main+0x350>)
 8002da2:	4821      	ldr	r0, [pc, #132]	; (8002e28 <main+0x354>)
 8002da4:	f00f fcce 	bl	8012744 <f_mount>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00c      	beq.n	8002dc8 <main+0x2f4>
      	{
	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8002dae:	2108      	movs	r1, #8
 8002db0:	481e      	ldr	r0, [pc, #120]	; (8002e2c <main+0x358>)
 8002db2:	f001 fcb3 	bl	800471c <HAL_GPIO_TogglePin>
	  HAL_Delay (30000);
 8002db6:	f247 5030 	movw	r0, #30000	; 0x7530
 8002dba:	f001 f8fd 	bl	8003fb8 <HAL_Delay>
	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8002dbe:	2108      	movs	r1, #8
 8002dc0:	481a      	ldr	r0, [pc, #104]	; (8002e2c <main+0x358>)
 8002dc2:	f001 fcab 	bl	800471c <HAL_GPIO_TogglePin>
 8002dc6:	e085      	b.n	8002ed4 <main+0x400>
      	}
  // here f_mount == FR_OK -> mounting was a success
  else
      	{
	  // f_mkfs
	  if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 8002dc8:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 8002dcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dd0:	9200      	str	r2, [sp, #0]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2107      	movs	r1, #7
 8002dd6:	4813      	ldr	r0, [pc, #76]	; (8002e24 <main+0x350>)
 8002dd8:	f010 fa14 	bl	8013204 <f_mkfs>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d026      	beq.n	8002e30 <main+0x35c>
      	    {
		  	  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8002de2:	2110      	movs	r1, #16
 8002de4:	4811      	ldr	r0, [pc, #68]	; (8002e2c <main+0x358>)
 8002de6:	f001 fc99 	bl	800471c <HAL_GPIO_TogglePin>
		  	  HAL_Delay (30000);
 8002dea:	f247 5030 	movw	r0, #30000	; 0x7530
 8002dee:	f001 f8e3 	bl	8003fb8 <HAL_Delay>
		  	  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8002df2:	2110      	movs	r1, #16
 8002df4:	480d      	ldr	r0, [pc, #52]	; (8002e2c <main+0x358>)
 8002df6:	f001 fc91 	bl	800471c <HAL_GPIO_TogglePin>
 8002dfa:	e06b      	b.n	8002ed4 <main+0x400>
 8002dfc:	080177f8 	.word	0x080177f8
 8002e00:	08017724 	.word	0x08017724
 8002e04:	0801782c 	.word	0x0801782c
 8002e08:	00202d20 	.word	0x00202d20
 8002e0c:	0801772c 	.word	0x0801772c
 8002e10:	08017740 	.word	0x08017740
 8002e14:	0801774c 	.word	0x0801774c
 8002e18:	20000eac 	.word	0x20000eac
 8002e1c:	2000086c 	.word	0x2000086c
 8002e20:	200007dc 	.word	0x200007dc
 8002e24:	20000ec4 	.word	0x20000ec4
 8002e28:	20000ec8 	.word	0x20000ec8
 8002e2c:	48000c00 	.word	0x48000c00
      	    }
	  else
      		{
		  hsd1.Init.ClockDiv = 0;
 8002e30:	4b70      	ldr	r3, [pc, #448]	; (8002ff4 <main+0x520>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	615a      	str	r2, [r3, #20]
			// Open file for writing (Create)
			if(f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8002e36:	220a      	movs	r2, #10
 8002e38:	496f      	ldr	r1, [pc, #444]	; (8002ff8 <main+0x524>)
 8002e3a:	4870      	ldr	r0, [pc, #448]	; (8002ffc <main+0x528>)
 8002e3c:	f00f fcc8 	bl	80127d0 <f_open>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00c      	beq.n	8002e60 <main+0x38c>
				{

				HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8002e46:	2120      	movs	r1, #32
 8002e48:	486d      	ldr	r0, [pc, #436]	; (8003000 <main+0x52c>)
 8002e4a:	f001 fc67 	bl	800471c <HAL_GPIO_TogglePin>
			  HAL_Delay (30000);
 8002e4e:	f247 5030 	movw	r0, #30000	; 0x7530
 8002e52:	f001 f8b1 	bl	8003fb8 <HAL_Delay>
			  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8002e56:	2120      	movs	r1, #32
 8002e58:	4869      	ldr	r0, [pc, #420]	; (8003000 <main+0x52c>)
 8002e5a:	f001 fc5f 	bl	800471c <HAL_GPIO_TogglePin>
 8002e5e:	e039      	b.n	8002ed4 <main+0x400>
				}
			else
				{

				// Write to the text file
				res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 8002e60:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fd f9cb 	bl	8000200 <strlen>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 8002e70:	f607 5158 	addw	r1, r7, #3416	; 0xd58
 8002e74:	4861      	ldr	r0, [pc, #388]	; (8002ffc <main+0x528>)
 8002e76:	f00f ffa8 	bl	8012dca <f_write>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f887 3dd3 	strb.w	r3, [r7, #3539]	; 0xdd3
				f_read(&SDFile, &rtext, 100, &bytesread);
 8002e80:	f607 538c 	addw	r3, r7, #3468	; 0xd8c
 8002e84:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8002e88:	2264      	movs	r2, #100	; 0x64
 8002e8a:	485c      	ldr	r0, [pc, #368]	; (8002ffc <main+0x528>)
 8002e8c:	f00f fe5e 	bl	8012b4c <f_read>
				//f_read();

				usberr = CDC_Transmit_FS(rtext,  sizeof(rtext));
 8002e90:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 8002e94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f010 fef9 	bl	8013c90 <CDC_Transmit_FS>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	f887 3dd2 	strb.w	r3, [r7, #3538]	; 0xdd2
				if((byteswritten == 0) || (res != FR_OK))
 8002ea4:	f8d7 3d90 	ldr.w	r3, [r7, #3472]	; 0xd90
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <main+0x3e0>
 8002eac:	f897 3dd3 	ldrb.w	r3, [r7, #3539]	; 0xdd3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00c      	beq.n	8002ece <main+0x3fa>
					{

					HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8002eb4:	2140      	movs	r1, #64	; 0x40
 8002eb6:	4852      	ldr	r0, [pc, #328]	; (8003000 <main+0x52c>)
 8002eb8:	f001 fc30 	bl	800471c <HAL_GPIO_TogglePin>
				  HAL_Delay (30000);
 8002ebc:	f247 5030 	movw	r0, #30000	; 0x7530
 8002ec0:	f001 f87a 	bl	8003fb8 <HAL_Delay>
				  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8002ec4:	2140      	movs	r1, #64	; 0x40
 8002ec6:	484e      	ldr	r0, [pc, #312]	; (8003000 <main+0x52c>)
 8002ec8:	f001 fc28 	bl	800471c <HAL_GPIO_TogglePin>
 8002ecc:	e002      	b.n	8002ed4 <main+0x400>
					}
				else
					{

					f_close(&SDFile);
 8002ece:	484b      	ldr	r0, [pc, #300]	; (8002ffc <main+0x528>)
 8002ed0:	f010 f96e 	bl	80131b0 <f_close>
					}

      			}
      		}
      	}
      	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	484a      	ldr	r0, [pc, #296]	; (8003004 <main+0x530>)
 8002eda:	f00f fc33 	bl	8012744 <f_mount>



  HAL_TIM_Base_Start_IT(&htim17);
 8002ede:	484a      	ldr	r0, [pc, #296]	; (8003008 <main+0x534>)
 8002ee0:	f007 fef0 	bl	800acc4 <HAL_TIM_Base_Start_IT>
  tick = 0;
 8002ee4:	4b49      	ldr	r3, [pc, #292]	; (800300c <main+0x538>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	701a      	strb	r2, [r3, #0]
  tickGPS = 0;
 8002eea:	4b49      	ldr	r3, [pc, #292]	; (8003010 <main+0x53c>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	701a      	strb	r2, [r3, #0]

  uint8_t i = 0, ret;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f887 3def 	strb.w	r3, [r7, #3567]	; 0xdef
  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8002ef6:	2108      	movs	r1, #8
 8002ef8:	4841      	ldr	r0, [pc, #260]	; (8003000 <main+0x52c>)
 8002efa:	f001 fc0f 	bl	800471c <HAL_GPIO_TogglePin>
  //HAL_Delay (5000);
  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8002efe:	2108      	movs	r1, #8
 8002f00:	483f      	ldr	r0, [pc, #252]	; (8003000 <main+0x52c>)
 8002f02:	f001 fc0b 	bl	800471c <HAL_GPIO_TogglePin>
  //-[ I2C Bus Scanning ]-
      for(i=1; i<128; i++)
 8002f06:	2301      	movs	r3, #1
 8002f08:	f887 3def 	strb.w	r3, [r7, #3567]	; 0xdef
 8002f0c:	e042      	b.n	8002f94 <main+0x4c0>
      {
          ret = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 3, 5);
 8002f0e:	f897 3def 	ldrb.w	r3, [r7, #3567]	; 0xdef
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	b299      	uxth	r1, r3
 8002f18:	2305      	movs	r3, #5
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	483d      	ldr	r0, [pc, #244]	; (8003014 <main+0x540>)
 8002f1e:	f001 fe91 	bl	8004c44 <HAL_I2C_IsDeviceReady>
 8002f22:	4603      	mov	r3, r0
 8002f24:	f887 3dd1 	strb.w	r3, [r7, #3537]	; 0xdd1
          if (ret != HAL_OK) // No ACK Received At That Address
 8002f28:	f897 3dd1 	ldrb.w	r3, [r7, #3537]	; 0xdd1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00f      	beq.n	8002f50 <main+0x47c>
          {
        	  while (CDC_Transmit_FS (Space, strlen(Space)) == USBD_BUSY);
 8002f30:	bf00      	nop
 8002f32:	1d3b      	adds	r3, r7, #4
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fd f963 	bl	8000200 <strlen>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	1d3b      	adds	r3, r7, #4
 8002f40:	4611      	mov	r1, r2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f010 fea4 	bl	8013c90 <CDC_Transmit_FS>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d0f1      	beq.n	8002f32 <main+0x45e>
 8002f4e:	e01c      	b.n	8002f8a <main+0x4b6>
          }
          else if(ret == HAL_OK)
 8002f50:	f897 3dd1 	ldrb.w	r3, [r7, #3537]	; 0xdd1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d118      	bne.n	8002f8a <main+0x4b6>
          {
              sprintf(Buffer, "0x%X", i);
 8002f58:	f897 2def 	ldrb.w	r2, [r7, #3567]	; 0xdef
 8002f5c:	f107 0308 	add.w	r3, r7, #8
 8002f60:	492d      	ldr	r1, [pc, #180]	; (8003018 <main+0x544>)
 8002f62:	4618      	mov	r0, r3
 8002f64:	f012 f974 	bl	8015250 <siprintf>
              while (CDC_Transmit_FS (Buffer, strlen(Buffer)) == USBD_BUSY);
 8002f68:	bf00      	nop
 8002f6a:	f107 0308 	add.w	r3, r7, #8
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fd f946 	bl	8000200 <strlen>
 8002f74:	4603      	mov	r3, r0
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	f107 0308 	add.w	r3, r7, #8
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f010 fe86 	bl	8013c90 <CDC_Transmit_FS>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d0ef      	beq.n	8002f6a <main+0x496>
      for(i=1; i<128; i++)
 8002f8a:	f897 3def 	ldrb.w	r3, [r7, #3567]	; 0xdef
 8002f8e:	3301      	adds	r3, #1
 8002f90:	f887 3def 	strb.w	r3, [r7, #3567]	; 0xdef
 8002f94:	f997 3def 	ldrsb.w	r3, [r7, #3567]	; 0xdef
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	dab8      	bge.n	8002f0e <main+0x43a>
  {

	  // Lesson learned: do NOT place delays between data transfers and receives; it will mess up the data flow

	  // GPS
	  if (data_ready)
 8002f9c:	4b1f      	ldr	r3, [pc, #124]	; (800301c <main+0x548>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d06e      	beq.n	8003082 <main+0x5ae>
	  {
		  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8002fa4:	2108      	movs	r1, #8
 8002fa6:	4816      	ldr	r0, [pc, #88]	; (8003000 <main+0x52c>)
 8002fa8:	f001 fbb8 	bl	800471c <HAL_GPIO_TogglePin>
		  while (CDC_Transmit_FS ("GPS START\n", 10) == USBD_BUSY);
 8002fac:	bf00      	nop
 8002fae:	210a      	movs	r1, #10
 8002fb0:	481b      	ldr	r0, [pc, #108]	; (8003020 <main+0x54c>)
 8002fb2:	f010 fe6d 	bl	8013c90 <CDC_Transmit_FS>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d0f8      	beq.n	8002fae <main+0x4da>
		  if (rxBuffer == rxBuffer1)
 8002fbc:	4b19      	ldr	r3, [pc, #100]	; (8003024 <main+0x550>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a19      	ldr	r2, [pc, #100]	; (8003028 <main+0x554>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d134      	bne.n	8003030 <main+0x55c>
		  {
			  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8002fc6:	2120      	movs	r1, #32
 8002fc8:	480d      	ldr	r0, [pc, #52]	; (8003000 <main+0x52c>)
 8002fca:	f001 fba7 	bl	800471c <HAL_GPIO_TogglePin>
			  while (CDC_Transmit_FS ("\n", 1) == USBD_BUSY);

			  //}*/


			  while (CDC_Transmit_FS (rxBuffer2, strlen(rxBuffer2)) == USBD_BUSY);
 8002fce:	bf00      	nop
 8002fd0:	4816      	ldr	r0, [pc, #88]	; (800302c <main+0x558>)
 8002fd2:	f7fd f915 	bl	8000200 <strlen>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4813      	ldr	r0, [pc, #76]	; (800302c <main+0x558>)
 8002fde:	f010 fe57 	bl	8013c90 <CDC_Transmit_FS>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d0f3      	beq.n	8002fd0 <main+0x4fc>
			  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8002fe8:	2120      	movs	r1, #32
 8002fea:	4805      	ldr	r0, [pc, #20]	; (8003000 <main+0x52c>)
 8002fec:	f001 fb96 	bl	800471c <HAL_GPIO_TogglePin>
 8002ff0:	e033      	b.n	800305a <main+0x586>
 8002ff2:	bf00      	nop
 8002ff4:	2000061c 	.word	0x2000061c
 8002ff8:	08017768 	.word	0x08017768
 8002ffc:	200010f8 	.word	0x200010f8
 8003000:	48000c00 	.word	0x48000c00
 8003004:	20000ec8 	.word	0x20000ec8
 8003008:	20000700 	.word	0x20000700
 800300c:	20000eb8 	.word	0x20000eb8
 8003010:	20000eb9 	.word	0x20000eb9
 8003014:	200005c8 	.word	0x200005c8
 8003018:	08017774 	.word	0x08017774
 800301c:	20000eb4 	.word	0x20000eb4
 8003020:	0801777c 	.word	0x0801777c
 8003024:	20000eac 	.word	0x20000eac
 8003028:	2000086c 	.word	0x2000086c
 800302c:	20000b8c 	.word	0x20000b8c


		  }
		  else
		  {
			  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8003030:	2140      	movs	r1, #64	; 0x40
 8003032:	4864      	ldr	r0, [pc, #400]	; (80031c4 <main+0x6f0>)
 8003034:	f001 fb72 	bl	800471c <HAL_GPIO_TogglePin>
			  while (CDC_Transmit_FS ("\n", 1) == USBD_BUSY);

			  //}*/


			  while (CDC_Transmit_FS (rxBuffer1, strlen(rxBuffer1)) == USBD_BUSY);
 8003038:	bf00      	nop
 800303a:	4863      	ldr	r0, [pc, #396]	; (80031c8 <main+0x6f4>)
 800303c:	f7fd f8e0 	bl	8000200 <strlen>
 8003040:	4603      	mov	r3, r0
 8003042:	b29b      	uxth	r3, r3
 8003044:	4619      	mov	r1, r3
 8003046:	4860      	ldr	r0, [pc, #384]	; (80031c8 <main+0x6f4>)
 8003048:	f010 fe22 	bl	8013c90 <CDC_Transmit_FS>
 800304c:	4603      	mov	r3, r0
 800304e:	2b01      	cmp	r3, #1
 8003050:	d0f3      	beq.n	800303a <main+0x566>
			  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8003052:	2140      	movs	r1, #64	; 0x40
 8003054:	485b      	ldr	r0, [pc, #364]	; (80031c4 <main+0x6f0>)
 8003056:	f001 fb61 	bl	800471c <HAL_GPIO_TogglePin>



		  }

		  data_ready ^= 1;
 800305a:	4b5c      	ldr	r3, [pc, #368]	; (80031cc <main+0x6f8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f083 0301 	eor.w	r3, r3, #1
 8003062:	4a5a      	ldr	r2, [pc, #360]	; (80031cc <main+0x6f8>)
 8003064:	6013      	str	r3, [r2, #0]
		  send_ready |= 1;
 8003066:	4b5a      	ldr	r3, [pc, #360]	; (80031d0 <main+0x6fc>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	4a58      	ldr	r2, [pc, #352]	; (80031d0 <main+0x6fc>)
 8003070:	6013      	str	r3, [r2, #0]

		  while (CDC_Transmit_FS ("GPS END\n", 8) == USBD_BUSY);
 8003072:	bf00      	nop
 8003074:	2108      	movs	r1, #8
 8003076:	4857      	ldr	r0, [pc, #348]	; (80031d4 <main+0x700>)
 8003078:	f010 fe0a 	bl	8013c90 <CDC_Transmit_FS>
 800307c:	4603      	mov	r3, r0
 800307e:	2b01      	cmp	r3, #1
 8003080:	d0f8      	beq.n	8003074 <main+0x5a0>
		  // while (CDC_Transmit_FS ("\n", 1) == USBD_BUSY);
	  }

	  if (tick == 0) {}
 8003082:	4b55      	ldr	r3, [pc, #340]	; (80031d8 <main+0x704>)
 8003084:	781b      	ldrb	r3, [r3, #0]

	  //rslt = bmp3_get_status(&status, &dev);
	  //bmp3_check_rslt("bmp3_get_status", rslt);

	  /* Read temperature and pressure data iteratively based on data ready interrupt */
	  if (tick == 0)//(((int)rslt == BMP3_OK) && (tick == 0) && ((int)status.intr.drdy == BMP3_ENABLE))
 8003086:	4b54      	ldr	r3, [pc, #336]	; (80031d8 <main+0x704>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	d185      	bne.n	8002f9c <main+0x4c8>
	  {
		  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8003090:	2110      	movs	r1, #16
 8003092:	484c      	ldr	r0, [pc, #304]	; (80031c4 <main+0x6f0>)
 8003094:	f001 fb42 	bl	800471c <HAL_GPIO_TogglePin>

		  settings.op_mode = BMP3_MODE_FORCED;
 8003098:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800309c:	f5a3 6358 	sub.w	r3, r3, #3456	; 0xd80
 80030a0:	2201      	movs	r2, #1
 80030a2:	701a      	strb	r2, [r3, #0]
		  rslt = bmp3_set_op_mode(&settings, &dev);
 80030a4:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80030a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80030ac:	4611      	mov	r1, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fe f98f 	bl	80013d2 <bmp3_set_op_mode>
 80030b4:	4603      	mov	r3, r0
 80030b6:	f887 3de3 	strb.w	r3, [r7, #3555]	; 0xde3
		  bmp3_check_rslt("bmp3_set_op_mode", rslt);
 80030ba:	f997 3de3 	ldrsb.w	r3, [r7, #3555]	; 0xde3
 80030be:	4619      	mov	r1, r3
 80030c0:	4846      	ldr	r0, [pc, #280]	; (80031dc <main+0x708>)
 80030c2:	f7ff fbfd 	bl	80028c0 <bmp3_check_rslt>
		  tick = 10;
 80030c6:	4b44      	ldr	r3, [pc, #272]	; (80031d8 <main+0x704>)
 80030c8:	220a      	movs	r2, #10
 80030ca:	701a      	strb	r2, [r3, #0]
		   * First parameter indicates the type of data to be read
		   * BMP3_PRESS_TEMP : To read pressure and temperature data
		   * BMP3_TEMP       : To read only temperature data
		   * BMP3_PRESS      : To read only pressure data
		   */
		  rslt = bmp3_get_sensor_data(BMP3_PRESS_TEMP, &bmpdata, &dev);
 80030cc:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80030d0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80030d4:	4619      	mov	r1, r3
 80030d6:	2003      	movs	r0, #3
 80030d8:	f7fe f9ef 	bl	80014ba <bmp3_get_sensor_data>
 80030dc:	4603      	mov	r3, r0
 80030de:	f887 3de3 	strb.w	r3, [r7, #3555]	; 0xde3
		  bmp3_check_rslt("bmp3_get_sensor_data", rslt);
 80030e2:	f997 3de3 	ldrsb.w	r3, [r7, #3555]	; 0xde3
 80030e6:	4619      	mov	r1, r3
 80030e8:	483d      	ldr	r0, [pc, #244]	; (80031e0 <main+0x70c>)
 80030ea:	f7ff fbe9 	bl	80028c0 <bmp3_check_rslt>

		  /* NOTE : Read status register again to clear data ready interrupt status */
		  rslt = bmp3_get_status(&status, &dev);
 80030ee:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80030f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80030f6:	4611      	mov	r1, r2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7fe f8f5 	bl	80012e8 <bmp3_get_status>
 80030fe:	4603      	mov	r3, r0
 8003100:	f887 3de3 	strb.w	r3, [r7, #3555]	; 0xde3
		  bmp3_check_rslt("bmp3_get_status", rslt);
 8003104:	f997 3de3 	ldrsb.w	r3, [r7, #3555]	; 0xde3
 8003108:	4619      	mov	r1, r3
 800310a:	4836      	ldr	r0, [pc, #216]	; (80031e4 <main+0x710>)
 800310c:	f7ff fbd8 	bl	80028c0 <bmp3_check_rslt>


		  //#ifdef BMP3_FLOAT_COMPENSATION
		  while (CDC_Transmit_FS ("\n", 1) == USBD_BUSY);
 8003110:	bf00      	nop
 8003112:	2101      	movs	r1, #1
 8003114:	4834      	ldr	r0, [pc, #208]	; (80031e8 <main+0x714>)
 8003116:	f010 fdbb 	bl	8013c90 <CDC_Transmit_FS>
 800311a:	4603      	mov	r3, r0
 800311c:	2b01      	cmp	r3, #1
 800311e:	d0f8      	beq.n	8003112 <main+0x63e>

		  while (CDC_Transmit_FS ("BMP390 START\n", 13) == USBD_BUSY);
 8003120:	bf00      	nop
 8003122:	210d      	movs	r1, #13
 8003124:	4831      	ldr	r0, [pc, #196]	; (80031ec <main+0x718>)
 8003126:	f010 fdb3 	bl	8013c90 <CDC_Transmit_FS>
 800312a:	4603      	mov	r3, r0
 800312c:	2b01      	cmp	r3, #1
 800312e:	d0f8      	beq.n	8003122 <main+0x64e>
		  sprintf(TempBuffer, "%.2f\n", bmpdata.temperature);
 8003130:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8003134:	f5a3 6357 	sub.w	r3, r3, #3440	; 0xd70
 8003138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8003140:	492b      	ldr	r1, [pc, #172]	; (80031f0 <main+0x71c>)
 8003142:	f012 f885 	bl	8015250 <siprintf>
		  sprintf(PresBuffer, "%.2f\n", bmpdata.pressure);
 8003146:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800314a:	f5a3 6357 	sub.w	r3, r3, #3440	; 0xd70
 800314e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003152:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003156:	4926      	ldr	r1, [pc, #152]	; (80031f0 <main+0x71c>)
 8003158:	f012 f87a 	bl	8015250 <siprintf>
		  while (CDC_Transmit_FS (TempBuffer, strlen(TempBuffer)) == USBD_BUSY);
 800315c:	bf00      	nop
 800315e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003162:	4618      	mov	r0, r3
 8003164:	f7fd f84c 	bl	8000200 <strlen>
 8003168:	4603      	mov	r3, r0
 800316a:	b29a      	uxth	r2, r3
 800316c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003170:	4611      	mov	r1, r2
 8003172:	4618      	mov	r0, r3
 8003174:	f010 fd8c 	bl	8013c90 <CDC_Transmit_FS>
 8003178:	4603      	mov	r3, r0
 800317a:	2b01      	cmp	r3, #1
 800317c:	d0ef      	beq.n	800315e <main+0x68a>
		  while (CDC_Transmit_FS (PresBuffer, strlen(PresBuffer)) == USBD_BUSY);
 800317e:	bf00      	nop
 8003180:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003184:	4618      	mov	r0, r3
 8003186:	f7fd f83b 	bl	8000200 <strlen>
 800318a:	4603      	mov	r3, r0
 800318c:	b29a      	uxth	r2, r3
 800318e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003192:	4611      	mov	r1, r2
 8003194:	4618      	mov	r0, r3
 8003196:	f010 fd7b 	bl	8013c90 <CDC_Transmit_FS>
 800319a:	4603      	mov	r3, r0
 800319c:	2b01      	cmp	r3, #1
 800319e:	d0ef      	beq.n	8003180 <main+0x6ac>
		  while (CDC_Transmit_FS ("BMP390 END\n", 11) == USBD_BUSY);
 80031a0:	bf00      	nop
 80031a2:	210b      	movs	r1, #11
 80031a4:	4813      	ldr	r0, [pc, #76]	; (80031f4 <main+0x720>)
 80031a6:	f010 fd73 	bl	8013c90 <CDC_Transmit_FS>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d0f8      	beq.n	80031a2 <main+0x6ce>
		  while (CDC_Transmit_FS ("\n", 1) == USBD_BUSY);
 80031b0:	bf00      	nop
 80031b2:	2101      	movs	r1, #1
 80031b4:	480c      	ldr	r0, [pc, #48]	; (80031e8 <main+0x714>)
 80031b6:	f010 fd6b 	bl	8013c90 <CDC_Transmit_FS>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d0f8      	beq.n	80031b2 <main+0x6de>
	  if (data_ready)
 80031c0:	e6ec      	b.n	8002f9c <main+0x4c8>
 80031c2:	bf00      	nop
 80031c4:	48000c00 	.word	0x48000c00
 80031c8:	2000086c 	.word	0x2000086c
 80031cc:	20000eb4 	.word	0x20000eb4
 80031d0:	20000000 	.word	0x20000000
 80031d4:	08017788 	.word	0x08017788
 80031d8:	20000eb8 	.word	0x20000eb8
 80031dc:	08017794 	.word	0x08017794
 80031e0:	080177a8 	.word	0x080177a8
 80031e4:	080177c0 	.word	0x080177c0
 80031e8:	080177d0 	.word	0x080177d0
 80031ec:	080177d4 	.word	0x080177d4
 80031f0:	080177e4 	.word	0x080177e4
 80031f4:	080177ec 	.word	0x080177ec

080031f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b096      	sub	sp, #88	; 0x58
 80031fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031fe:	f107 0314 	add.w	r3, r7, #20
 8003202:	2244      	movs	r2, #68	; 0x44
 8003204:	2100      	movs	r1, #0
 8003206:	4618      	mov	r0, r3
 8003208:	f011 faa8 	bl	801475c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800320c:	463b      	mov	r3, r7
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	605a      	str	r2, [r3, #4]
 8003214:	609a      	str	r2, [r3, #8]
 8003216:	60da      	str	r2, [r3, #12]
 8003218:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800321a:	2000      	movs	r0, #0
 800321c:	f003 fb14 	bl	8006848 <HAL_PWREx_ControlVoltageScaling>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8003226:	f000 fb0d 	bl	8003844 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800322a:	2321      	movs	r3, #33	; 0x21
 800322c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800322e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003232:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003234:	2301      	movs	r3, #1
 8003236:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003238:	2302      	movs	r3, #2
 800323a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800323c:	2303      	movs	r3, #3
 800323e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003240:	2301      	movs	r3, #1
 8003242:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8003244:	231e      	movs	r3, #30
 8003246:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV20;
 8003248:	2314      	movs	r3, #20
 800324a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800324c:	2302      	movs	r3, #2
 800324e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003250:	2302      	movs	r3, #2
 8003252:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003254:	f107 0314 	add.w	r3, r7, #20
 8003258:	4618      	mov	r0, r3
 800325a:	f003 fba9 	bl	80069b0 <HAL_RCC_OscConfig>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8003264:	f000 faee 	bl	8003844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003268:	230f      	movs	r3, #15
 800326a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800326c:	2303      	movs	r3, #3
 800326e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003270:	2300      	movs	r3, #0
 8003272:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003274:	2300      	movs	r3, #0
 8003276:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003278:	2300      	movs	r3, #0
 800327a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800327c:	463b      	mov	r3, r7
 800327e:	2105      	movs	r1, #5
 8003280:	4618      	mov	r0, r3
 8003282:	f003 ffaf 	bl	80071e4 <HAL_RCC_ClockConfig>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800328c:	f000 fada 	bl	8003844 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003290:	f004 f9a6 	bl	80075e0 <HAL_RCC_EnableCSS>
}
 8003294:	bf00      	nop
 8003296:	3758      	adds	r7, #88	; 0x58
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80032a0:	2200      	movs	r2, #0
 80032a2:	2100      	movs	r1, #0
 80032a4:	201a      	movs	r0, #26
 80032a6:	f000 ff86 	bl	80041b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80032aa:	201a      	movs	r0, #26
 80032ac:	f000 ff9f 	bl	80041ee <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80032b0:	2200      	movs	r2, #0
 80032b2:	2100      	movs	r1, #0
 80032b4:	2026      	movs	r0, #38	; 0x26
 80032b6:	f000 ff7e 	bl	80041b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80032ba:	2026      	movs	r0, #38	; 0x26
 80032bc:	f000 ff97 	bl	80041ee <HAL_NVIC_EnableIRQ>
}
 80032c0:	bf00      	nop
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80032c8:	4b1b      	ldr	r3, [pc, #108]	; (8003338 <MX_I2C1_Init+0x74>)
 80032ca:	4a1c      	ldr	r2, [pc, #112]	; (800333c <MX_I2C1_Init+0x78>)
 80032cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80032ce:	4b1a      	ldr	r3, [pc, #104]	; (8003338 <MX_I2C1_Init+0x74>)
 80032d0:	4a1b      	ldr	r2, [pc, #108]	; (8003340 <MX_I2C1_Init+0x7c>)
 80032d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80032d4:	4b18      	ldr	r3, [pc, #96]	; (8003338 <MX_I2C1_Init+0x74>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032da:	4b17      	ldr	r3, [pc, #92]	; (8003338 <MX_I2C1_Init+0x74>)
 80032dc:	2201      	movs	r2, #1
 80032de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032e0:	4b15      	ldr	r3, [pc, #84]	; (8003338 <MX_I2C1_Init+0x74>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80032e6:	4b14      	ldr	r3, [pc, #80]	; (8003338 <MX_I2C1_Init+0x74>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80032ec:	4b12      	ldr	r3, [pc, #72]	; (8003338 <MX_I2C1_Init+0x74>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032f2:	4b11      	ldr	r3, [pc, #68]	; (8003338 <MX_I2C1_Init+0x74>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032f8:	4b0f      	ldr	r3, [pc, #60]	; (8003338 <MX_I2C1_Init+0x74>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80032fe:	480e      	ldr	r0, [pc, #56]	; (8003338 <MX_I2C1_Init+0x74>)
 8003300:	f001 fa26 	bl	8004750 <HAL_I2C_Init>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800330a:	f000 fa9b 	bl	8003844 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800330e:	2100      	movs	r1, #0
 8003310:	4809      	ldr	r0, [pc, #36]	; (8003338 <MX_I2C1_Init+0x74>)
 8003312:	f002 f817 	bl	8005344 <HAL_I2CEx_ConfigAnalogFilter>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800331c:	f000 fa92 	bl	8003844 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003320:	2100      	movs	r1, #0
 8003322:	4805      	ldr	r0, [pc, #20]	; (8003338 <MX_I2C1_Init+0x74>)
 8003324:	f002 f859 	bl	80053da <HAL_I2CEx_ConfigDigitalFilter>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800332e:	f000 fa89 	bl	8003844 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003332:	bf00      	nop
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	20000574 	.word	0x20000574
 800333c:	40005400 	.word	0x40005400
 8003340:	307075b1 	.word	0x307075b1

08003344 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003348:	4b1b      	ldr	r3, [pc, #108]	; (80033b8 <MX_I2C2_Init+0x74>)
 800334a:	4a1c      	ldr	r2, [pc, #112]	; (80033bc <MX_I2C2_Init+0x78>)
 800334c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 800334e:	4b1a      	ldr	r3, [pc, #104]	; (80033b8 <MX_I2C2_Init+0x74>)
 8003350:	4a1b      	ldr	r2, [pc, #108]	; (80033c0 <MX_I2C2_Init+0x7c>)
 8003352:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003354:	4b18      	ldr	r3, [pc, #96]	; (80033b8 <MX_I2C2_Init+0x74>)
 8003356:	2200      	movs	r2, #0
 8003358:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800335a:	4b17      	ldr	r3, [pc, #92]	; (80033b8 <MX_I2C2_Init+0x74>)
 800335c:	2201      	movs	r2, #1
 800335e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003360:	4b15      	ldr	r3, [pc, #84]	; (80033b8 <MX_I2C2_Init+0x74>)
 8003362:	2200      	movs	r2, #0
 8003364:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003366:	4b14      	ldr	r3, [pc, #80]	; (80033b8 <MX_I2C2_Init+0x74>)
 8003368:	2200      	movs	r2, #0
 800336a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800336c:	4b12      	ldr	r3, [pc, #72]	; (80033b8 <MX_I2C2_Init+0x74>)
 800336e:	2200      	movs	r2, #0
 8003370:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003372:	4b11      	ldr	r3, [pc, #68]	; (80033b8 <MX_I2C2_Init+0x74>)
 8003374:	2200      	movs	r2, #0
 8003376:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003378:	4b0f      	ldr	r3, [pc, #60]	; (80033b8 <MX_I2C2_Init+0x74>)
 800337a:	2200      	movs	r2, #0
 800337c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800337e:	480e      	ldr	r0, [pc, #56]	; (80033b8 <MX_I2C2_Init+0x74>)
 8003380:	f001 f9e6 	bl	8004750 <HAL_I2C_Init>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800338a:	f000 fa5b 	bl	8003844 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800338e:	2100      	movs	r1, #0
 8003390:	4809      	ldr	r0, [pc, #36]	; (80033b8 <MX_I2C2_Init+0x74>)
 8003392:	f001 ffd7 	bl	8005344 <HAL_I2CEx_ConfigAnalogFilter>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800339c:	f000 fa52 	bl	8003844 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80033a0:	2100      	movs	r1, #0
 80033a2:	4805      	ldr	r0, [pc, #20]	; (80033b8 <MX_I2C2_Init+0x74>)
 80033a4:	f002 f819 	bl	80053da <HAL_I2CEx_ConfigDigitalFilter>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80033ae:	f000 fa49 	bl	8003844 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	200005c8 	.word	0x200005c8
 80033bc:	40005800 	.word	0x40005800
 80033c0:	307075b1 	.word	0x307075b1

080033c4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80033c8:	4b0d      	ldr	r3, [pc, #52]	; (8003400 <MX_SDMMC1_SD_Init+0x3c>)
 80033ca:	4a0e      	ldr	r2, [pc, #56]	; (8003404 <MX_SDMMC1_SD_Init+0x40>)
 80033cc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80033ce:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <MX_SDMMC1_SD_Init+0x3c>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80033d4:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <MX_SDMMC1_SD_Init+0x3c>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80033da:	4b09      	ldr	r3, [pc, #36]	; (8003400 <MX_SDMMC1_SD_Init+0x3c>)
 80033dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033e0:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80033e2:	4b07      	ldr	r3, [pc, #28]	; (8003400 <MX_SDMMC1_SD_Init+0x3c>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 199;
 80033e8:	4b05      	ldr	r3, [pc, #20]	; (8003400 <MX_SDMMC1_SD_Init+0x3c>)
 80033ea:	22c7      	movs	r2, #199	; 0xc7
 80033ec:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 80033ee:	4b04      	ldr	r3, [pc, #16]	; (8003400 <MX_SDMMC1_SD_Init+0x3c>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80033f4:	bf00      	nop
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	2000061c 	.word	0x2000061c
 8003404:	50062400 	.word	0x50062400

08003408 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800340c:	4b1b      	ldr	r3, [pc, #108]	; (800347c <MX_SPI1_Init+0x74>)
 800340e:	4a1c      	ldr	r2, [pc, #112]	; (8003480 <MX_SPI1_Init+0x78>)
 8003410:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003412:	4b1a      	ldr	r3, [pc, #104]	; (800347c <MX_SPI1_Init+0x74>)
 8003414:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003418:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800341a:	4b18      	ldr	r3, [pc, #96]	; (800347c <MX_SPI1_Init+0x74>)
 800341c:	2200      	movs	r2, #0
 800341e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8003420:	4b16      	ldr	r3, [pc, #88]	; (800347c <MX_SPI1_Init+0x74>)
 8003422:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003426:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003428:	4b14      	ldr	r3, [pc, #80]	; (800347c <MX_SPI1_Init+0x74>)
 800342a:	2200      	movs	r2, #0
 800342c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800342e:	4b13      	ldr	r3, [pc, #76]	; (800347c <MX_SPI1_Init+0x74>)
 8003430:	2200      	movs	r2, #0
 8003432:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003434:	4b11      	ldr	r3, [pc, #68]	; (800347c <MX_SPI1_Init+0x74>)
 8003436:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800343a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800343c:	4b0f      	ldr	r3, [pc, #60]	; (800347c <MX_SPI1_Init+0x74>)
 800343e:	2200      	movs	r2, #0
 8003440:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003442:	4b0e      	ldr	r3, [pc, #56]	; (800347c <MX_SPI1_Init+0x74>)
 8003444:	2200      	movs	r2, #0
 8003446:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003448:	4b0c      	ldr	r3, [pc, #48]	; (800347c <MX_SPI1_Init+0x74>)
 800344a:	2200      	movs	r2, #0
 800344c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800344e:	4b0b      	ldr	r3, [pc, #44]	; (800347c <MX_SPI1_Init+0x74>)
 8003450:	2200      	movs	r2, #0
 8003452:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003454:	4b09      	ldr	r3, [pc, #36]	; (800347c <MX_SPI1_Init+0x74>)
 8003456:	2207      	movs	r2, #7
 8003458:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800345a:	4b08      	ldr	r3, [pc, #32]	; (800347c <MX_SPI1_Init+0x74>)
 800345c:	2200      	movs	r2, #0
 800345e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003460:	4b06      	ldr	r3, [pc, #24]	; (800347c <MX_SPI1_Init+0x74>)
 8003462:	2208      	movs	r2, #8
 8003464:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003466:	4805      	ldr	r0, [pc, #20]	; (800347c <MX_SPI1_Init+0x74>)
 8003468:	f007 fb31 	bl	800aace <HAL_SPI_Init>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003472:	f000 f9e7 	bl	8003844 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003476:	bf00      	nop
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	2000069c 	.word	0x2000069c
 8003480:	40013000 	.word	0x40013000

08003484 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b092      	sub	sp, #72	; 0x48
 8003488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800348a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	605a      	str	r2, [r3, #4]
 8003494:	609a      	str	r2, [r3, #8]
 8003496:	60da      	str	r2, [r3, #12]
 8003498:	611a      	str	r2, [r3, #16]
 800349a:	615a      	str	r2, [r3, #20]
 800349c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800349e:	463b      	mov	r3, r7
 80034a0:	222c      	movs	r2, #44	; 0x2c
 80034a2:	2100      	movs	r1, #0
 80034a4:	4618      	mov	r0, r3
 80034a6:	f011 f959 	bl	801475c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80034aa:	4b2f      	ldr	r3, [pc, #188]	; (8003568 <MX_TIM17_Init+0xe4>)
 80034ac:	4a2f      	ldr	r2, [pc, #188]	; (800356c <MX_TIM17_Init+0xe8>)
 80034ae:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 999;
 80034b0:	4b2d      	ldr	r3, [pc, #180]	; (8003568 <MX_TIM17_Init+0xe4>)
 80034b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034b6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034b8:	4b2b      	ldr	r3, [pc, #172]	; (8003568 <MX_TIM17_Init+0xe4>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 11999;
 80034be:	4b2a      	ldr	r3, [pc, #168]	; (8003568 <MX_TIM17_Init+0xe4>)
 80034c0:	f642 62df 	movw	r2, #11999	; 0x2edf
 80034c4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034c6:	4b28      	ldr	r3, [pc, #160]	; (8003568 <MX_TIM17_Init+0xe4>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80034cc:	4b26      	ldr	r3, [pc, #152]	; (8003568 <MX_TIM17_Init+0xe4>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80034d2:	4b25      	ldr	r3, [pc, #148]	; (8003568 <MX_TIM17_Init+0xe4>)
 80034d4:	2280      	movs	r2, #128	; 0x80
 80034d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80034d8:	4823      	ldr	r0, [pc, #140]	; (8003568 <MX_TIM17_Init+0xe4>)
 80034da:	f007 fb9b 	bl	800ac14 <HAL_TIM_Base_Init>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 80034e4:	f000 f9ae 	bl	8003844 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 80034e8:	481f      	ldr	r0, [pc, #124]	; (8003568 <MX_TIM17_Init+0xe4>)
 80034ea:	f007 fc5b 	bl	800ada4 <HAL_TIM_OC_Init>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 80034f4:	f000 f9a6 	bl	8003844 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80034f8:	2300      	movs	r3, #0
 80034fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003500:	2300      	movs	r3, #0
 8003502:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003504:	2300      	movs	r3, #0
 8003506:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003508:	2300      	movs	r3, #0
 800350a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800350c:	2300      	movs	r3, #0
 800350e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003510:	2300      	movs	r3, #0
 8003512:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003514:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003518:	2200      	movs	r2, #0
 800351a:	4619      	mov	r1, r3
 800351c:	4812      	ldr	r0, [pc, #72]	; (8003568 <MX_TIM17_Init+0xe4>)
 800351e:	f007 fdc1 	bl	800b0a4 <HAL_TIM_OC_ConfigChannel>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8003528:	f000 f98c 	bl	8003844 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800352c:	2300      	movs	r3, #0
 800352e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003530:	2300      	movs	r3, #0
 8003532:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003534:	2300      	movs	r3, #0
 8003536:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003538:	2300      	movs	r3, #0
 800353a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800353c:	2300      	movs	r3, #0
 800353e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003544:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003546:	2300      	movs	r3, #0
 8003548:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800354a:	463b      	mov	r3, r7
 800354c:	4619      	mov	r1, r3
 800354e:	4806      	ldr	r0, [pc, #24]	; (8003568 <MX_TIM17_Init+0xe4>)
 8003550:	f008 f9c4 	bl	800b8dc <HAL_TIMEx_ConfigBreakDeadTime>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 800355a:	f000 f973 	bl	8003844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800355e:	bf00      	nop
 8003560:	3748      	adds	r7, #72	; 0x48
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	20000700 	.word	0x20000700
 800356c:	40014800 	.word	0x40014800

08003570 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003574:	4b22      	ldr	r3, [pc, #136]	; (8003600 <MX_USART1_UART_Init+0x90>)
 8003576:	4a23      	ldr	r2, [pc, #140]	; (8003604 <MX_USART1_UART_Init+0x94>)
 8003578:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115000;
 800357a:	4b21      	ldr	r3, [pc, #132]	; (8003600 <MX_USART1_UART_Init+0x90>)
 800357c:	4a22      	ldr	r2, [pc, #136]	; (8003608 <MX_USART1_UART_Init+0x98>)
 800357e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003580:	4b1f      	ldr	r3, [pc, #124]	; (8003600 <MX_USART1_UART_Init+0x90>)
 8003582:	2200      	movs	r2, #0
 8003584:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003586:	4b1e      	ldr	r3, [pc, #120]	; (8003600 <MX_USART1_UART_Init+0x90>)
 8003588:	2200      	movs	r2, #0
 800358a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800358c:	4b1c      	ldr	r3, [pc, #112]	; (8003600 <MX_USART1_UART_Init+0x90>)
 800358e:	2200      	movs	r2, #0
 8003590:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003592:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <MX_USART1_UART_Init+0x90>)
 8003594:	220c      	movs	r2, #12
 8003596:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003598:	4b19      	ldr	r3, [pc, #100]	; (8003600 <MX_USART1_UART_Init+0x90>)
 800359a:	2200      	movs	r2, #0
 800359c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800359e:	4b18      	ldr	r3, [pc, #96]	; (8003600 <MX_USART1_UART_Init+0x90>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035a4:	4b16      	ldr	r3, [pc, #88]	; (8003600 <MX_USART1_UART_Init+0x90>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80035aa:	4b15      	ldr	r3, [pc, #84]	; (8003600 <MX_USART1_UART_Init+0x90>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035b0:	4b13      	ldr	r3, [pc, #76]	; (8003600 <MX_USART1_UART_Init+0x90>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80035b6:	4812      	ldr	r0, [pc, #72]	; (8003600 <MX_USART1_UART_Init+0x90>)
 80035b8:	f008 fa2c 	bl	800ba14 <HAL_UART_Init>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 80035c2:	f000 f93f 	bl	8003844 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035c6:	2100      	movs	r1, #0
 80035c8:	480d      	ldr	r0, [pc, #52]	; (8003600 <MX_USART1_UART_Init+0x90>)
 80035ca:	f009 fb5a 	bl	800cc82 <HAL_UARTEx_SetTxFifoThreshold>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 80035d4:	f000 f936 	bl	8003844 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035d8:	2100      	movs	r1, #0
 80035da:	4809      	ldr	r0, [pc, #36]	; (8003600 <MX_USART1_UART_Init+0x90>)
 80035dc:	f009 fb8f 	bl	800ccfe <HAL_UARTEx_SetRxFifoThreshold>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 80035e6:	f000 f92d 	bl	8003844 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80035ea:	4805      	ldr	r0, [pc, #20]	; (8003600 <MX_USART1_UART_Init+0x90>)
 80035ec:	f009 fb10 	bl	800cc10 <HAL_UARTEx_DisableFifoMode>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 80035f6:	f000 f925 	bl	8003844 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80035fa:	bf00      	nop
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	2000074c 	.word	0x2000074c
 8003604:	40013800 	.word	0x40013800
 8003608:	0001c138 	.word	0x0001c138

0800360c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003610:	4b22      	ldr	r3, [pc, #136]	; (800369c <MX_USART2_UART_Init+0x90>)
 8003612:	4a23      	ldr	r2, [pc, #140]	; (80036a0 <MX_USART2_UART_Init+0x94>)
 8003614:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003616:	4b21      	ldr	r3, [pc, #132]	; (800369c <MX_USART2_UART_Init+0x90>)
 8003618:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800361c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800361e:	4b1f      	ldr	r3, [pc, #124]	; (800369c <MX_USART2_UART_Init+0x90>)
 8003620:	2200      	movs	r2, #0
 8003622:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003624:	4b1d      	ldr	r3, [pc, #116]	; (800369c <MX_USART2_UART_Init+0x90>)
 8003626:	2200      	movs	r2, #0
 8003628:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800362a:	4b1c      	ldr	r3, [pc, #112]	; (800369c <MX_USART2_UART_Init+0x90>)
 800362c:	2200      	movs	r2, #0
 800362e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003630:	4b1a      	ldr	r3, [pc, #104]	; (800369c <MX_USART2_UART_Init+0x90>)
 8003632:	220c      	movs	r2, #12
 8003634:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003636:	4b19      	ldr	r3, [pc, #100]	; (800369c <MX_USART2_UART_Init+0x90>)
 8003638:	2200      	movs	r2, #0
 800363a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800363c:	4b17      	ldr	r3, [pc, #92]	; (800369c <MX_USART2_UART_Init+0x90>)
 800363e:	2200      	movs	r2, #0
 8003640:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003642:	4b16      	ldr	r3, [pc, #88]	; (800369c <MX_USART2_UART_Init+0x90>)
 8003644:	2200      	movs	r2, #0
 8003646:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003648:	4b14      	ldr	r3, [pc, #80]	; (800369c <MX_USART2_UART_Init+0x90>)
 800364a:	2200      	movs	r2, #0
 800364c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800364e:	4b13      	ldr	r3, [pc, #76]	; (800369c <MX_USART2_UART_Init+0x90>)
 8003650:	2200      	movs	r2, #0
 8003652:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003654:	4811      	ldr	r0, [pc, #68]	; (800369c <MX_USART2_UART_Init+0x90>)
 8003656:	f008 f9dd 	bl	800ba14 <HAL_UART_Init>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003660:	f000 f8f0 	bl	8003844 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003664:	2100      	movs	r1, #0
 8003666:	480d      	ldr	r0, [pc, #52]	; (800369c <MX_USART2_UART_Init+0x90>)
 8003668:	f009 fb0b 	bl	800cc82 <HAL_UARTEx_SetTxFifoThreshold>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003672:	f000 f8e7 	bl	8003844 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003676:	2100      	movs	r1, #0
 8003678:	4808      	ldr	r0, [pc, #32]	; (800369c <MX_USART2_UART_Init+0x90>)
 800367a:	f009 fb40 	bl	800ccfe <HAL_UARTEx_SetRxFifoThreshold>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003684:	f000 f8de 	bl	8003844 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003688:	4804      	ldr	r0, [pc, #16]	; (800369c <MX_USART2_UART_Init+0x90>)
 800368a:	f009 fac1 	bl	800cc10 <HAL_UARTEx_DisableFifoMode>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003694:	f000 f8d6 	bl	8003844 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003698:	bf00      	nop
 800369a:	bd80      	pop	{r7, pc}
 800369c:	200007dc 	.word	0x200007dc
 80036a0:	40004400 	.word	0x40004400

080036a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08c      	sub	sp, #48	; 0x30
 80036a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036aa:	f107 031c 	add.w	r3, r7, #28
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	605a      	str	r2, [r3, #4]
 80036b4:	609a      	str	r2, [r3, #8]
 80036b6:	60da      	str	r2, [r3, #12]
 80036b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80036ba:	4b5d      	ldr	r3, [pc, #372]	; (8003830 <MX_GPIO_Init+0x18c>)
 80036bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036be:	4a5c      	ldr	r2, [pc, #368]	; (8003830 <MX_GPIO_Init+0x18c>)
 80036c0:	f043 0310 	orr.w	r3, r3, #16
 80036c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036c6:	4b5a      	ldr	r3, [pc, #360]	; (8003830 <MX_GPIO_Init+0x18c>)
 80036c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ca:	f003 0310 	and.w	r3, r3, #16
 80036ce:	61bb      	str	r3, [r7, #24]
 80036d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036d2:	4b57      	ldr	r3, [pc, #348]	; (8003830 <MX_GPIO_Init+0x18c>)
 80036d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d6:	4a56      	ldr	r2, [pc, #344]	; (8003830 <MX_GPIO_Init+0x18c>)
 80036d8:	f043 0304 	orr.w	r3, r3, #4
 80036dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036de:	4b54      	ldr	r3, [pc, #336]	; (8003830 <MX_GPIO_Init+0x18c>)
 80036e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	617b      	str	r3, [r7, #20]
 80036e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80036ea:	4b51      	ldr	r3, [pc, #324]	; (8003830 <MX_GPIO_Init+0x18c>)
 80036ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ee:	4a50      	ldr	r2, [pc, #320]	; (8003830 <MX_GPIO_Init+0x18c>)
 80036f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036f6:	4b4e      	ldr	r3, [pc, #312]	; (8003830 <MX_GPIO_Init+0x18c>)
 80036f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003702:	4b4b      	ldr	r3, [pc, #300]	; (8003830 <MX_GPIO_Init+0x18c>)
 8003704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003706:	4a4a      	ldr	r2, [pc, #296]	; (8003830 <MX_GPIO_Init+0x18c>)
 8003708:	f043 0301 	orr.w	r3, r3, #1
 800370c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800370e:	4b48      	ldr	r3, [pc, #288]	; (8003830 <MX_GPIO_Init+0x18c>)
 8003710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800371a:	4b45      	ldr	r3, [pc, #276]	; (8003830 <MX_GPIO_Init+0x18c>)
 800371c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371e:	4a44      	ldr	r2, [pc, #272]	; (8003830 <MX_GPIO_Init+0x18c>)
 8003720:	f043 0302 	orr.w	r3, r3, #2
 8003724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003726:	4b42      	ldr	r3, [pc, #264]	; (8003830 <MX_GPIO_Init+0x18c>)
 8003728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	60bb      	str	r3, [r7, #8]
 8003730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003732:	4b3f      	ldr	r3, [pc, #252]	; (8003830 <MX_GPIO_Init+0x18c>)
 8003734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003736:	4a3e      	ldr	r2, [pc, #248]	; (8003830 <MX_GPIO_Init+0x18c>)
 8003738:	f043 0308 	orr.w	r3, r3, #8
 800373c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800373e:	4b3c      	ldr	r3, [pc, #240]	; (8003830 <MX_GPIO_Init+0x18c>)
 8003740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	607b      	str	r3, [r7, #4]
 8003748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 800374a:	2200      	movs	r2, #0
 800374c:	f641 013c 	movw	r1, #6204	; 0x183c
 8003750:	4838      	ldr	r0, [pc, #224]	; (8003834 <MX_GPIO_Init+0x190>)
 8003752:	f000 ffcb 	bl	80046ec <HAL_GPIO_WritePin>
                          |MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 8003756:	2200      	movs	r2, #0
 8003758:	2130      	movs	r1, #48	; 0x30
 800375a:	4837      	ldr	r0, [pc, #220]	; (8003838 <MX_GPIO_Init+0x194>)
 800375c:	f000 ffc6 	bl	80046ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8003760:	2200      	movs	r2, #0
 8003762:	2178      	movs	r1, #120	; 0x78
 8003764:	4835      	ldr	r0, [pc, #212]	; (800383c <MX_GPIO_Init+0x198>)
 8003766:	f000 ffc1 	bl	80046ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
  GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 800376a:	f641 033c 	movw	r3, #6204	; 0x183c
 800376e:	61fb      	str	r3, [r7, #28]
                          |MIRA_EN_PWR_Pin|OCPEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003770:	2301      	movs	r3, #1
 8003772:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003774:	2300      	movs	r3, #0
 8003776:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003778:	2300      	movs	r3, #0
 800377a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800377c:	f107 031c 	add.w	r3, r7, #28
 8003780:	4619      	mov	r1, r3
 8003782:	482c      	ldr	r0, [pc, #176]	; (8003834 <MX_GPIO_Init+0x190>)
 8003784:	f000 fe08 	bl	8004398 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_INT_Pin */
  GPIO_InitStruct.Pin = CHG_INT_Pin;
 8003788:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800378c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800378e:	2300      	movs	r3, #0
 8003790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003792:	2300      	movs	r3, #0
 8003794:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 8003796:	f107 031c 	add.w	r3, r7, #28
 800379a:	4619      	mov	r1, r3
 800379c:	4826      	ldr	r0, [pc, #152]	; (8003838 <MX_GPIO_Init+0x194>)
 800379e:	f000 fdfb 	bl	8004398 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_DIG0_Pin CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = LORA_DIG0_Pin|CARD_DETECT_Pin;
 80037a2:	f248 0302 	movw	r3, #32770	; 0x8002
 80037a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037a8:	2300      	movs	r3, #0
 80037aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ac:	2300      	movs	r3, #0
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b0:	f107 031c 	add.w	r3, r7, #28
 80037b4:	4619      	mov	r1, r3
 80037b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037ba:	f000 fded 	bl	8004398 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 80037be:	2330      	movs	r3, #48	; 0x30
 80037c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037c2:	2301      	movs	r3, #1
 80037c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c6:	2300      	movs	r3, #0
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ca:	2300      	movs	r3, #0
 80037cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037ce:	f107 031c 	add.w	r3, r7, #28
 80037d2:	4619      	mov	r1, r3
 80037d4:	4818      	ldr	r0, [pc, #96]	; (8003838 <MX_GPIO_Init+0x194>)
 80037d6:	f000 fddf 	bl	8004398 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCPFAULT_Pin */
  GPIO_InitStruct.Pin = OCPFAULT_Pin;
 80037da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037e0:	2300      	movs	r3, #0
 80037e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037e4:	2301      	movs	r3, #1
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 80037e8:	f107 031c 	add.w	r3, r7, #28
 80037ec:	4619      	mov	r1, r3
 80037ee:	4811      	ldr	r0, [pc, #68]	; (8003834 <MX_GPIO_Init+0x190>)
 80037f0:	f000 fdd2 	bl	8004398 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 80037f4:	2378      	movs	r3, #120	; 0x78
 80037f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037f8:	2301      	movs	r3, #1
 80037fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003800:	2300      	movs	r3, #0
 8003802:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003804:	f107 031c 	add.w	r3, r7, #28
 8003808:	4619      	mov	r1, r3
 800380a:	480c      	ldr	r0, [pc, #48]	; (800383c <MX_GPIO_Init+0x198>)
 800380c:	f000 fdc4 	bl	8004398 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWERGOOD_Pin */
  GPIO_InitStruct.Pin = POWERGOOD_Pin;
 8003810:	2320      	movs	r3, #32
 8003812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003814:	2300      	movs	r3, #0
 8003816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003818:	2300      	movs	r3, #0
 800381a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 800381c:	f107 031c 	add.w	r3, r7, #28
 8003820:	4619      	mov	r1, r3
 8003822:	4807      	ldr	r0, [pc, #28]	; (8003840 <MX_GPIO_Init+0x19c>)
 8003824:	f000 fdb8 	bl	8004398 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003828:	bf00      	nop
 800382a:	3730      	adds	r7, #48	; 0x30
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40021000 	.word	0x40021000
 8003834:	48001000 	.word	0x48001000
 8003838:	48000800 	.word	0x48000800
 800383c:	48000c00 	.word	0x48000c00
 8003840:	48000400 	.word	0x48000400

08003844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003848:	b672      	cpsid	i
}
 800384a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("Error_Handler() called");
 800384c:	4801      	ldr	r0, [pc, #4]	; (8003854 <Error_Handler+0x10>)
 800384e:	f011 fcd7 	bl	8015200 <iprintf>
  while (1)
 8003852:	e7fe      	b.n	8003852 <Error_Handler+0xe>
 8003854:	08017834 	.word	0x08017834

08003858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800385e:	4b0f      	ldr	r3, [pc, #60]	; (800389c <HAL_MspInit+0x44>)
 8003860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003862:	4a0e      	ldr	r2, [pc, #56]	; (800389c <HAL_MspInit+0x44>)
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	6613      	str	r3, [r2, #96]	; 0x60
 800386a:	4b0c      	ldr	r3, [pc, #48]	; (800389c <HAL_MspInit+0x44>)
 800386c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	607b      	str	r3, [r7, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003876:	4b09      	ldr	r3, [pc, #36]	; (800389c <HAL_MspInit+0x44>)
 8003878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387a:	4a08      	ldr	r2, [pc, #32]	; (800389c <HAL_MspInit+0x44>)
 800387c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003880:	6593      	str	r3, [r2, #88]	; 0x58
 8003882:	4b06      	ldr	r3, [pc, #24]	; (800389c <HAL_MspInit+0x44>)
 8003884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388a:	603b      	str	r3, [r7, #0]
 800388c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40021000 	.word	0x40021000

080038a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b0b0      	sub	sp, #192	; 0xc0
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038a8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	605a      	str	r2, [r3, #4]
 80038b2:	609a      	str	r2, [r3, #8]
 80038b4:	60da      	str	r2, [r3, #12]
 80038b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038b8:	f107 0318 	add.w	r3, r7, #24
 80038bc:	2294      	movs	r2, #148	; 0x94
 80038be:	2100      	movs	r1, #0
 80038c0:	4618      	mov	r0, r3
 80038c2:	f010 ff4b 	bl	801475c <memset>
  if(hi2c->Instance==I2C1)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a42      	ldr	r2, [pc, #264]	; (80039d4 <HAL_I2C_MspInit+0x134>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d13b      	bne.n	8003948 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80038d0:	2340      	movs	r3, #64	; 0x40
 80038d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80038d4:	2300      	movs	r3, #0
 80038d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038d8:	f107 0318 	add.w	r3, r7, #24
 80038dc:	4618      	mov	r0, r3
 80038de:	f003 ff6b 	bl	80077b8 <HAL_RCCEx_PeriphCLKConfig>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80038e8:	f7ff ffac 	bl	8003844 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ec:	4b3a      	ldr	r3, [pc, #232]	; (80039d8 <HAL_I2C_MspInit+0x138>)
 80038ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f0:	4a39      	ldr	r2, [pc, #228]	; (80039d8 <HAL_I2C_MspInit+0x138>)
 80038f2:	f043 0302 	orr.w	r3, r3, #2
 80038f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038f8:	4b37      	ldr	r3, [pc, #220]	; (80039d8 <HAL_I2C_MspInit+0x138>)
 80038fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003904:	23c0      	movs	r3, #192	; 0xc0
 8003906:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800390a:	2312      	movs	r3, #18
 800390c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003910:	2300      	movs	r3, #0
 8003912:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003916:	2303      	movs	r3, #3
 8003918:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800391c:	2304      	movs	r3, #4
 800391e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003922:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003926:	4619      	mov	r1, r3
 8003928:	482c      	ldr	r0, [pc, #176]	; (80039dc <HAL_I2C_MspInit+0x13c>)
 800392a:	f000 fd35 	bl	8004398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800392e:	4b2a      	ldr	r3, [pc, #168]	; (80039d8 <HAL_I2C_MspInit+0x138>)
 8003930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003932:	4a29      	ldr	r2, [pc, #164]	; (80039d8 <HAL_I2C_MspInit+0x138>)
 8003934:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003938:	6593      	str	r3, [r2, #88]	; 0x58
 800393a:	4b27      	ldr	r3, [pc, #156]	; (80039d8 <HAL_I2C_MspInit+0x138>)
 800393c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003942:	613b      	str	r3, [r7, #16]
 8003944:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003946:	e040      	b.n	80039ca <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a24      	ldr	r2, [pc, #144]	; (80039e0 <HAL_I2C_MspInit+0x140>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d13b      	bne.n	80039ca <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003952:	2380      	movs	r3, #128	; 0x80
 8003954:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003956:	2300      	movs	r3, #0
 8003958:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800395a:	f107 0318 	add.w	r3, r7, #24
 800395e:	4618      	mov	r0, r3
 8003960:	f003 ff2a 	bl	80077b8 <HAL_RCCEx_PeriphCLKConfig>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_I2C_MspInit+0xce>
      Error_Handler();
 800396a:	f7ff ff6b 	bl	8003844 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800396e:	4b1a      	ldr	r3, [pc, #104]	; (80039d8 <HAL_I2C_MspInit+0x138>)
 8003970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003972:	4a19      	ldr	r2, [pc, #100]	; (80039d8 <HAL_I2C_MspInit+0x138>)
 8003974:	f043 0302 	orr.w	r3, r3, #2
 8003978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800397a:	4b17      	ldr	r3, [pc, #92]	; (80039d8 <HAL_I2C_MspInit+0x138>)
 800397c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003986:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800398a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800398e:	2312      	movs	r3, #18
 8003990:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003994:	2300      	movs	r3, #0
 8003996:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800399a:	2303      	movs	r3, #3
 800399c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80039a0:	2304      	movs	r3, #4
 80039a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80039aa:	4619      	mov	r1, r3
 80039ac:	480b      	ldr	r0, [pc, #44]	; (80039dc <HAL_I2C_MspInit+0x13c>)
 80039ae:	f000 fcf3 	bl	8004398 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80039b2:	4b09      	ldr	r3, [pc, #36]	; (80039d8 <HAL_I2C_MspInit+0x138>)
 80039b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b6:	4a08      	ldr	r2, [pc, #32]	; (80039d8 <HAL_I2C_MspInit+0x138>)
 80039b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039bc:	6593      	str	r3, [r2, #88]	; 0x58
 80039be:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <HAL_I2C_MspInit+0x138>)
 80039c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c6:	60bb      	str	r3, [r7, #8]
 80039c8:	68bb      	ldr	r3, [r7, #8]
}
 80039ca:	bf00      	nop
 80039cc:	37c0      	adds	r7, #192	; 0xc0
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40005400 	.word	0x40005400
 80039d8:	40021000 	.word	0x40021000
 80039dc:	48000400 	.word	0x48000400
 80039e0:	40005800 	.word	0x40005800

080039e4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b0b0      	sub	sp, #192	; 0xc0
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	605a      	str	r2, [r3, #4]
 80039f6:	609a      	str	r2, [r3, #8]
 80039f8:	60da      	str	r2, [r3, #12]
 80039fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039fc:	f107 0318 	add.w	r3, r7, #24
 8003a00:	2294      	movs	r2, #148	; 0x94
 8003a02:	2100      	movs	r1, #0
 8003a04:	4618      	mov	r0, r3
 8003a06:	f010 fea9 	bl	801475c <memset>
  if(hsd->Instance==SDMMC1)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a33      	ldr	r2, [pc, #204]	; (8003adc <HAL_SD_MspInit+0xf8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d15f      	bne.n	8003ad4 <HAL_SD_MspInit+0xf0>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8003a14:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003a18:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8003a1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a22:	f107 0318 	add.w	r3, r7, #24
 8003a26:	4618      	mov	r0, r3
 8003a28:	f003 fec6 	bl	80077b8 <HAL_RCCEx_PeriphCLKConfig>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8003a32:	f7ff ff07 	bl	8003844 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003a36:	4b2a      	ldr	r3, [pc, #168]	; (8003ae0 <HAL_SD_MspInit+0xfc>)
 8003a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a3a:	4a29      	ldr	r2, [pc, #164]	; (8003ae0 <HAL_SD_MspInit+0xfc>)
 8003a3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a42:	4b27      	ldr	r3, [pc, #156]	; (8003ae0 <HAL_SD_MspInit+0xfc>)
 8003a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a4e:	4b24      	ldr	r3, [pc, #144]	; (8003ae0 <HAL_SD_MspInit+0xfc>)
 8003a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a52:	4a23      	ldr	r2, [pc, #140]	; (8003ae0 <HAL_SD_MspInit+0xfc>)
 8003a54:	f043 0304 	orr.w	r3, r3, #4
 8003a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a5a:	4b21      	ldr	r3, [pc, #132]	; (8003ae0 <HAL_SD_MspInit+0xfc>)
 8003a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	613b      	str	r3, [r7, #16]
 8003a64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a66:	4b1e      	ldr	r3, [pc, #120]	; (8003ae0 <HAL_SD_MspInit+0xfc>)
 8003a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6a:	4a1d      	ldr	r2, [pc, #116]	; (8003ae0 <HAL_SD_MspInit+0xfc>)
 8003a6c:	f043 0308 	orr.w	r3, r3, #8
 8003a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a72:	4b1b      	ldr	r3, [pc, #108]	; (8003ae0 <HAL_SD_MspInit+0xfc>)
 8003a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003a7e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003a82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a86:	2302      	movs	r3, #2
 8003a88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a92:	2303      	movs	r3, #3
 8003a94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003a98:	230c      	movs	r3, #12
 8003a9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a9e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	480f      	ldr	r0, [pc, #60]	; (8003ae4 <HAL_SD_MspInit+0x100>)
 8003aa6:	f000 fc77 	bl	8004398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003aaa:	2304      	movs	r3, #4
 8003aac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003abc:	2303      	movs	r3, #3
 8003abe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003ac2:	230c      	movs	r3, #12
 8003ac4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ac8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003acc:	4619      	mov	r1, r3
 8003ace:	4806      	ldr	r0, [pc, #24]	; (8003ae8 <HAL_SD_MspInit+0x104>)
 8003ad0:	f000 fc62 	bl	8004398 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003ad4:	bf00      	nop
 8003ad6:	37c0      	adds	r7, #192	; 0xc0
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	50062400 	.word	0x50062400
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	48000800 	.word	0x48000800
 8003ae8:	48000c00 	.word	0x48000c00

08003aec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08a      	sub	sp, #40	; 0x28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af4:	f107 0314 	add.w	r3, r7, #20
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	605a      	str	r2, [r3, #4]
 8003afe:	609a      	str	r2, [r3, #8]
 8003b00:	60da      	str	r2, [r3, #12]
 8003b02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a17      	ldr	r2, [pc, #92]	; (8003b68 <HAL_SPI_MspInit+0x7c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d128      	bne.n	8003b60 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b0e:	4b17      	ldr	r3, [pc, #92]	; (8003b6c <HAL_SPI_MspInit+0x80>)
 8003b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b12:	4a16      	ldr	r2, [pc, #88]	; (8003b6c <HAL_SPI_MspInit+0x80>)
 8003b14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b18:	6613      	str	r3, [r2, #96]	; 0x60
 8003b1a:	4b14      	ldr	r3, [pc, #80]	; (8003b6c <HAL_SPI_MspInit+0x80>)
 8003b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b22:	613b      	str	r3, [r7, #16]
 8003b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b26:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <HAL_SPI_MspInit+0x80>)
 8003b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b2a:	4a10      	ldr	r2, [pc, #64]	; (8003b6c <HAL_SPI_MspInit+0x80>)
 8003b2c:	f043 0301 	orr.w	r3, r3, #1
 8003b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b32:	4b0e      	ldr	r3, [pc, #56]	; (8003b6c <HAL_SPI_MspInit+0x80>)
 8003b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003b3e:	23f0      	movs	r3, #240	; 0xf0
 8003b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b42:	2302      	movs	r3, #2
 8003b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b4e:	2305      	movs	r3, #5
 8003b50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b52:	f107 0314 	add.w	r3, r7, #20
 8003b56:	4619      	mov	r1, r3
 8003b58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b5c:	f000 fc1c 	bl	8004398 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003b60:	bf00      	nop
 8003b62:	3728      	adds	r7, #40	; 0x28
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40013000 	.word	0x40013000
 8003b6c:	40021000 	.word	0x40021000

08003b70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a0a      	ldr	r2, [pc, #40]	; (8003ba8 <HAL_TIM_Base_MspInit+0x38>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d10b      	bne.n	8003b9a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003b82:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <HAL_TIM_Base_MspInit+0x3c>)
 8003b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b86:	4a09      	ldr	r2, [pc, #36]	; (8003bac <HAL_TIM_Base_MspInit+0x3c>)
 8003b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b8c:	6613      	str	r3, [r2, #96]	; 0x60
 8003b8e:	4b07      	ldr	r3, [pc, #28]	; (8003bac <HAL_TIM_Base_MspInit+0x3c>)
 8003b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8003b9a:	bf00      	nop
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40014800 	.word	0x40014800
 8003bac:	40021000 	.word	0x40021000

08003bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b0b0      	sub	sp, #192	; 0xc0
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	605a      	str	r2, [r3, #4]
 8003bc2:	609a      	str	r2, [r3, #8]
 8003bc4:	60da      	str	r2, [r3, #12]
 8003bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003bc8:	f107 0318 	add.w	r3, r7, #24
 8003bcc:	2294      	movs	r2, #148	; 0x94
 8003bce:	2100      	movs	r1, #0
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f010 fdc3 	bl	801475c <memset>
  if(huart->Instance==USART1)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a43      	ldr	r2, [pc, #268]	; (8003ce8 <HAL_UART_MspInit+0x138>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d13d      	bne.n	8003c5c <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003be0:	2301      	movs	r3, #1
 8003be2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003be4:	2300      	movs	r3, #0
 8003be6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003be8:	f107 0318 	add.w	r3, r7, #24
 8003bec:	4618      	mov	r0, r3
 8003bee:	f003 fde3 	bl	80077b8 <HAL_RCCEx_PeriphCLKConfig>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003bf8:	f7ff fe24 	bl	8003844 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bfc:	4b3b      	ldr	r3, [pc, #236]	; (8003cec <HAL_UART_MspInit+0x13c>)
 8003bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c00:	4a3a      	ldr	r2, [pc, #232]	; (8003cec <HAL_UART_MspInit+0x13c>)
 8003c02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c06:	6613      	str	r3, [r2, #96]	; 0x60
 8003c08:	4b38      	ldr	r3, [pc, #224]	; (8003cec <HAL_UART_MspInit+0x13c>)
 8003c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c10:	617b      	str	r3, [r7, #20]
 8003c12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c14:	4b35      	ldr	r3, [pc, #212]	; (8003cec <HAL_UART_MspInit+0x13c>)
 8003c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c18:	4a34      	ldr	r2, [pc, #208]	; (8003cec <HAL_UART_MspInit+0x13c>)
 8003c1a:	f043 0301 	orr.w	r3, r3, #1
 8003c1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c20:	4b32      	ldr	r3, [pc, #200]	; (8003cec <HAL_UART_MspInit+0x13c>)
 8003c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8003c2c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003c30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c34:	2302      	movs	r3, #2
 8003c36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c40:	2303      	movs	r3, #3
 8003c42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c46:	2307      	movs	r3, #7
 8003c48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c4c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003c50:	4619      	mov	r1, r3
 8003c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c56:	f000 fb9f 	bl	8004398 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003c5a:	e040      	b.n	8003cde <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a23      	ldr	r2, [pc, #140]	; (8003cf0 <HAL_UART_MspInit+0x140>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d13b      	bne.n	8003cde <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003c66:	2302      	movs	r3, #2
 8003c68:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c6e:	f107 0318 	add.w	r3, r7, #24
 8003c72:	4618      	mov	r0, r3
 8003c74:	f003 fda0 	bl	80077b8 <HAL_RCCEx_PeriphCLKConfig>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8003c7e:	f7ff fde1 	bl	8003844 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c82:	4b1a      	ldr	r3, [pc, #104]	; (8003cec <HAL_UART_MspInit+0x13c>)
 8003c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c86:	4a19      	ldr	r2, [pc, #100]	; (8003cec <HAL_UART_MspInit+0x13c>)
 8003c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c8c:	6593      	str	r3, [r2, #88]	; 0x58
 8003c8e:	4b17      	ldr	r3, [pc, #92]	; (8003cec <HAL_UART_MspInit+0x13c>)
 8003c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c9a:	4b14      	ldr	r3, [pc, #80]	; (8003cec <HAL_UART_MspInit+0x13c>)
 8003c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c9e:	4a13      	ldr	r2, [pc, #76]	; (8003cec <HAL_UART_MspInit+0x13c>)
 8003ca0:	f043 0301 	orr.w	r3, r3, #1
 8003ca4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ca6:	4b11      	ldr	r3, [pc, #68]	; (8003cec <HAL_UART_MspInit+0x13c>)
 8003ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	60bb      	str	r3, [r7, #8]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8003cb2:	230c      	movs	r3, #12
 8003cb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb8:	2302      	movs	r3, #2
 8003cba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003cca:	2307      	movs	r3, #7
 8003ccc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cd0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cda:	f000 fb5d 	bl	8004398 <HAL_GPIO_Init>
}
 8003cde:	bf00      	nop
 8003ce0:	37c0      	adds	r7, #192	; 0xc0
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40013800 	.word	0x40013800
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	40004400 	.word	0x40004400

08003cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003cf8:	f003 fc82 	bl	8007600 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003cfc:	e7fe      	b.n	8003cfc <NMI_Handler+0x8>

08003cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d02:	e7fe      	b.n	8003d02 <HardFault_Handler+0x4>

08003d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d08:	e7fe      	b.n	8003d08 <MemManage_Handler+0x4>

08003d0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d0e:	e7fe      	b.n	8003d0e <BusFault_Handler+0x4>

08003d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d14:	e7fe      	b.n	8003d14 <UsageFault_Handler+0x4>

08003d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d16:	b480      	push	{r7}
 8003d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d1a:	bf00      	nop
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d28:	bf00      	nop
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d32:	b480      	push	{r7}
 8003d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d36:	bf00      	nop
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d44:	f000 f918 	bl	8003f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d48:	bf00      	nop
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
  if (tick) {tick--;}
 8003d50:	4b0e      	ldr	r3, [pc, #56]	; (8003d8c <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d006      	beq.n	8003d68 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>
 8003d5a:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	4b09      	ldr	r3, [pc, #36]	; (8003d8c <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 8003d66:	701a      	strb	r2, [r3, #0]
  if (tickGPS) {tickGPS--;}
 8003d68:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d006      	beq.n	8003d80 <TIM1_TRG_COM_TIM17_IRQHandler+0x34>
 8003d72:	4b07      	ldr	r3, [pc, #28]	; (8003d90 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	4b04      	ldr	r3, [pc, #16]	; (8003d90 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 8003d7e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003d80:	4804      	ldr	r0, [pc, #16]	; (8003d94 <TIM1_TRG_COM_TIM17_IRQHandler+0x48>)
 8003d82:	f007 f870 	bl	800ae66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8003d86:	bf00      	nop
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20000eb8 	.word	0x20000eb8
 8003d90:	20000eb9 	.word	0x20000eb9
 8003d94:	20000700 	.word	0x20000700

08003d98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
    char c = huart2.Instance->RDR;
 8003d9e:	4b22      	ldr	r3, [pc, #136]	; (8003e28 <USART2_IRQHandler+0x90>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	71fb      	strb	r3, [r7, #7]
    if (rxBufferPos < RXBUFSIZE - 1)
 8003da8:	4b20      	ldr	r3, [pc, #128]	; (8003e2c <USART2_IRQHandler+0x94>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
    	{ rxBuffer[rxBufferPos++] = (uint8_t) c; }
 8003dac:	4b20      	ldr	r3, [pc, #128]	; (8003e30 <USART2_IRQHandler+0x98>)
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	4b1e      	ldr	r3, [pc, #120]	; (8003e2c <USART2_IRQHandler+0x94>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	1c59      	adds	r1, r3, #1
 8003db8:	b2c8      	uxtb	r0, r1
 8003dba:	491c      	ldr	r1, [pc, #112]	; (8003e2c <USART2_IRQHandler+0x94>)
 8003dbc:	7008      	strb	r0, [r1, #0]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	79fa      	ldrb	r2, [r7, #7]
 8003dc2:	701a      	strb	r2, [r3, #0]

    if ((c == '\n') && send_ready)// && tickGPS == 0) //(c == '\r') ||
 8003dc4:	79fb      	ldrb	r3, [r7, #7]
 8003dc6:	2b0a      	cmp	r3, #10
 8003dc8:	d126      	bne.n	8003e18 <USART2_IRQHandler+0x80>
 8003dca:	4b1a      	ldr	r3, [pc, #104]	; (8003e34 <USART2_IRQHandler+0x9c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d022      	beq.n	8003e18 <USART2_IRQHandler+0x80>
    {
    	//tickGPS = 10;
		rxBuffer[rxBufferPos] = 0;
 8003dd2:	4b17      	ldr	r3, [pc, #92]	; (8003e30 <USART2_IRQHandler+0x98>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a15      	ldr	r2, [pc, #84]	; (8003e2c <USART2_IRQHandler+0x94>)
 8003dd8:	7812      	ldrb	r2, [r2, #0]
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	4413      	add	r3, r2
 8003dde:	2200      	movs	r2, #0
 8003de0:	701a      	strb	r2, [r3, #0]
		data_ready |= 1;
 8003de2:	4b15      	ldr	r3, [pc, #84]	; (8003e38 <USART2_IRQHandler+0xa0>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f043 0301 	orr.w	r3, r3, #1
 8003dea:	4a13      	ldr	r2, [pc, #76]	; (8003e38 <USART2_IRQHandler+0xa0>)
 8003dec:	6013      	str	r3, [r2, #0]
		send_ready ^= 1;
 8003dee:	4b11      	ldr	r3, [pc, #68]	; (8003e34 <USART2_IRQHandler+0x9c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f083 0301 	eor.w	r3, r3, #1
 8003df6:	4a0f      	ldr	r2, [pc, #60]	; (8003e34 <USART2_IRQHandler+0x9c>)
 8003df8:	6013      	str	r3, [r2, #0]
		rxBufferPos = 0;
 8003dfa:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <USART2_IRQHandler+0x94>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	701a      	strb	r2, [r3, #0]
		if (rxBuffer == rxBuffer1) {rxBuffer = rxBuffer2;}
 8003e00:	4b0b      	ldr	r3, [pc, #44]	; (8003e30 <USART2_IRQHandler+0x98>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a0d      	ldr	r2, [pc, #52]	; (8003e3c <USART2_IRQHandler+0xa4>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d103      	bne.n	8003e12 <USART2_IRQHandler+0x7a>
 8003e0a:	4b09      	ldr	r3, [pc, #36]	; (8003e30 <USART2_IRQHandler+0x98>)
 8003e0c:	4a0c      	ldr	r2, [pc, #48]	; (8003e40 <USART2_IRQHandler+0xa8>)
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	e002      	b.n	8003e18 <USART2_IRQHandler+0x80>
		else {rxBuffer = rxBuffer1;}
 8003e12:	4b07      	ldr	r3, [pc, #28]	; (8003e30 <USART2_IRQHandler+0x98>)
 8003e14:	4a09      	ldr	r2, [pc, #36]	; (8003e3c <USART2_IRQHandler+0xa4>)
 8003e16:	601a      	str	r2, [r3, #0]
    }

    //HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
	  //rchar = huart2.Instance->RDR;
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003e18:	4803      	ldr	r0, [pc, #12]	; (8003e28 <USART2_IRQHandler+0x90>)
 8003e1a:	f007 fe4b 	bl	800bab4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	//ATOMIC_SET_BIT(huart2.Instance->CR3, USART_CR3_EIE);
  /* USER CODE END USART2_IRQn 1 */
}
 8003e1e:	bf00      	nop
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	200007dc 	.word	0x200007dc
 8003e2c:	20000eb0 	.word	0x20000eb0
 8003e30:	20000eac 	.word	0x20000eac
 8003e34:	20000000 	.word	0x20000000
 8003e38:	20000eb4 	.word	0x20000eb4
 8003e3c:	2000086c 	.word	0x2000086c
 8003e40:	20000b8c 	.word	0x20000b8c

08003e44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003e48:	4802      	ldr	r0, [pc, #8]	; (8003e54 <OTG_FS_IRQHandler+0x10>)
 8003e4a:	f001 fc65 	bl	8005718 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003e4e:	bf00      	nop
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	20002830 	.word	0x20002830

08003e58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003e5c:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <SystemInit+0x20>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e62:	4a05      	ldr	r2, [pc, #20]	; (8003e78 <SystemInit+0x20>)
 8003e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003e6c:	bf00      	nop
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	e000ed00 	.word	0xe000ed00

08003e7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003e7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003eb4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003e80:	f7ff ffea 	bl	8003e58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e84:	480c      	ldr	r0, [pc, #48]	; (8003eb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003e86:	490d      	ldr	r1, [pc, #52]	; (8003ebc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e88:	4a0d      	ldr	r2, [pc, #52]	; (8003ec0 <LoopForever+0xe>)
  movs r3, #0
 8003e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e8c:	e002      	b.n	8003e94 <LoopCopyDataInit>

08003e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e92:	3304      	adds	r3, #4

08003e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e98:	d3f9      	bcc.n	8003e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e9a:	4a0a      	ldr	r2, [pc, #40]	; (8003ec4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e9c:	4c0a      	ldr	r4, [pc, #40]	; (8003ec8 <LoopForever+0x16>)
  movs r3, #0
 8003e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ea0:	e001      	b.n	8003ea6 <LoopFillZerobss>

08003ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ea4:	3204      	adds	r2, #4

08003ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ea8:	d3fb      	bcc.n	8003ea2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003eaa:	f010 fc1d 	bl	80146e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003eae:	f7fe fe11 	bl	8002ad4 <main>

08003eb2 <LoopForever>:

LoopForever:
    b LoopForever
 8003eb2:	e7fe      	b.n	8003eb2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003eb4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ebc:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8003ec0:	08017df0 	.word	0x08017df0
  ldr r2, =_sbss
 8003ec4:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8003ec8:	20002f70 	.word	0x20002f70

08003ecc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ecc:	e7fe      	b.n	8003ecc <ADC1_IRQHandler>

08003ece <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b082      	sub	sp, #8
 8003ed2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ed8:	2003      	movs	r0, #3
 8003eda:	f000 f961 	bl	80041a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ede:	200f      	movs	r0, #15
 8003ee0:	f000 f80e 	bl	8003f00 <HAL_InitTick>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	71fb      	strb	r3, [r7, #7]
 8003eee:	e001      	b.n	8003ef4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003ef0:	f7ff fcb2 	bl	8003858 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003ef4:	79fb      	ldrb	r3, [r7, #7]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
	...

08003f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003f0c:	4b17      	ldr	r3, [pc, #92]	; (8003f6c <HAL_InitTick+0x6c>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d023      	beq.n	8003f5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003f14:	4b16      	ldr	r3, [pc, #88]	; (8003f70 <HAL_InitTick+0x70>)
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	4b14      	ldr	r3, [pc, #80]	; (8003f6c <HAL_InitTick+0x6c>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 f96d 	bl	800420a <HAL_SYSTICK_Config>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10f      	bne.n	8003f56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b0f      	cmp	r3, #15
 8003f3a:	d809      	bhi.n	8003f50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f44:	f000 f937 	bl	80041b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f48:	4a0a      	ldr	r2, [pc, #40]	; (8003f74 <HAL_InitTick+0x74>)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	e007      	b.n	8003f60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	73fb      	strb	r3, [r7, #15]
 8003f54:	e004      	b.n	8003f60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	73fb      	strb	r3, [r7, #15]
 8003f5a:	e001      	b.n	8003f60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	2000000c 	.word	0x2000000c
 8003f70:	20000004 	.word	0x20000004
 8003f74:	20000008 	.word	0x20000008

08003f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f7c:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <HAL_IncTick+0x20>)
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	461a      	mov	r2, r3
 8003f82:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <HAL_IncTick+0x24>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4413      	add	r3, r2
 8003f88:	4a04      	ldr	r2, [pc, #16]	; (8003f9c <HAL_IncTick+0x24>)
 8003f8a:	6013      	str	r3, [r2, #0]
}
 8003f8c:	bf00      	nop
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	2000000c 	.word	0x2000000c
 8003f9c:	20000ebc 	.word	0x20000ebc

08003fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8003fa4:	4b03      	ldr	r3, [pc, #12]	; (8003fb4 <HAL_GetTick+0x14>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	20000ebc 	.word	0x20000ebc

08003fb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fc0:	f7ff ffee 	bl	8003fa0 <HAL_GetTick>
 8003fc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fd0:	d005      	beq.n	8003fde <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003fd2:	4b0a      	ldr	r3, [pc, #40]	; (8003ffc <HAL_Delay+0x44>)
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4413      	add	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003fde:	bf00      	nop
 8003fe0:	f7ff ffde 	bl	8003fa0 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d8f7      	bhi.n	8003fe0 <HAL_Delay+0x28>
  {
  }
}
 8003ff0:	bf00      	nop
 8003ff2:	bf00      	nop
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	2000000c 	.word	0x2000000c

08004000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004010:	4b0c      	ldr	r3, [pc, #48]	; (8004044 <__NVIC_SetPriorityGrouping+0x44>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800401c:	4013      	ands	r3, r2
 800401e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004028:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800402c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004032:	4a04      	ldr	r2, [pc, #16]	; (8004044 <__NVIC_SetPriorityGrouping+0x44>)
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	60d3      	str	r3, [r2, #12]
}
 8004038:	bf00      	nop
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	e000ed00 	.word	0xe000ed00

08004048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800404c:	4b04      	ldr	r3, [pc, #16]	; (8004060 <__NVIC_GetPriorityGrouping+0x18>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	0a1b      	lsrs	r3, r3, #8
 8004052:	f003 0307 	and.w	r3, r3, #7
}
 8004056:	4618      	mov	r0, r3
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	e000ed00 	.word	0xe000ed00

08004064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	4603      	mov	r3, r0
 800406c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800406e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004072:	2b00      	cmp	r3, #0
 8004074:	db0b      	blt.n	800408e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004076:	79fb      	ldrb	r3, [r7, #7]
 8004078:	f003 021f 	and.w	r2, r3, #31
 800407c:	4907      	ldr	r1, [pc, #28]	; (800409c <__NVIC_EnableIRQ+0x38>)
 800407e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	2001      	movs	r0, #1
 8004086:	fa00 f202 	lsl.w	r2, r0, r2
 800408a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	e000e100 	.word	0xe000e100

080040a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	4603      	mov	r3, r0
 80040a8:	6039      	str	r1, [r7, #0]
 80040aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	db0a      	blt.n	80040ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	490c      	ldr	r1, [pc, #48]	; (80040ec <__NVIC_SetPriority+0x4c>)
 80040ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040be:	0112      	lsls	r2, r2, #4
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	440b      	add	r3, r1
 80040c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040c8:	e00a      	b.n	80040e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	4908      	ldr	r1, [pc, #32]	; (80040f0 <__NVIC_SetPriority+0x50>)
 80040d0:	79fb      	ldrb	r3, [r7, #7]
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	3b04      	subs	r3, #4
 80040d8:	0112      	lsls	r2, r2, #4
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	440b      	add	r3, r1
 80040de:	761a      	strb	r2, [r3, #24]
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	e000e100 	.word	0xe000e100
 80040f0:	e000ed00 	.word	0xe000ed00

080040f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b089      	sub	sp, #36	; 0x24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	f1c3 0307 	rsb	r3, r3, #7
 800410e:	2b04      	cmp	r3, #4
 8004110:	bf28      	it	cs
 8004112:	2304      	movcs	r3, #4
 8004114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	3304      	adds	r3, #4
 800411a:	2b06      	cmp	r3, #6
 800411c:	d902      	bls.n	8004124 <NVIC_EncodePriority+0x30>
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	3b03      	subs	r3, #3
 8004122:	e000      	b.n	8004126 <NVIC_EncodePriority+0x32>
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004128:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	43da      	mvns	r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	401a      	ands	r2, r3
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800413c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	fa01 f303 	lsl.w	r3, r1, r3
 8004146:	43d9      	mvns	r1, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800414c:	4313      	orrs	r3, r2
         );
}
 800414e:	4618      	mov	r0, r3
 8004150:	3724      	adds	r7, #36	; 0x24
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
	...

0800415c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3b01      	subs	r3, #1
 8004168:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800416c:	d301      	bcc.n	8004172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800416e:	2301      	movs	r3, #1
 8004170:	e00f      	b.n	8004192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004172:	4a0a      	ldr	r2, [pc, #40]	; (800419c <SysTick_Config+0x40>)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3b01      	subs	r3, #1
 8004178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800417a:	210f      	movs	r1, #15
 800417c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004180:	f7ff ff8e 	bl	80040a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004184:	4b05      	ldr	r3, [pc, #20]	; (800419c <SysTick_Config+0x40>)
 8004186:	2200      	movs	r2, #0
 8004188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800418a:	4b04      	ldr	r3, [pc, #16]	; (800419c <SysTick_Config+0x40>)
 800418c:	2207      	movs	r2, #7
 800418e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	e000e010 	.word	0xe000e010

080041a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7ff ff29 	bl	8004000 <__NVIC_SetPriorityGrouping>
}
 80041ae:	bf00      	nop
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b086      	sub	sp, #24
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	4603      	mov	r3, r0
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	607a      	str	r2, [r7, #4]
 80041c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80041c4:	2300      	movs	r3, #0
 80041c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80041c8:	f7ff ff3e 	bl	8004048 <__NVIC_GetPriorityGrouping>
 80041cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	68b9      	ldr	r1, [r7, #8]
 80041d2:	6978      	ldr	r0, [r7, #20]
 80041d4:	f7ff ff8e 	bl	80040f4 <NVIC_EncodePriority>
 80041d8:	4602      	mov	r2, r0
 80041da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041de:	4611      	mov	r1, r2
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff ff5d 	bl	80040a0 <__NVIC_SetPriority>
}
 80041e6:	bf00      	nop
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b082      	sub	sp, #8
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	4603      	mov	r3, r0
 80041f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff ff31 	bl	8004064 <__NVIC_EnableIRQ>
}
 8004202:	bf00      	nop
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b082      	sub	sp, #8
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7ff ffa2 	bl	800415c <SysTick_Config>
 8004218:	4603      	mov	r3, r0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004222:	b480      	push	{r7}
 8004224:	b085      	sub	sp, #20
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d008      	beq.n	800424c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2204      	movs	r2, #4
 800423e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e040      	b.n	80042ce <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 020e 	bic.w	r2, r2, #14
 800425a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004266:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800426a:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0201 	bic.w	r2, r2, #1
 800427a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004280:	f003 021c 	and.w	r2, r3, #28
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	2101      	movs	r1, #1
 800428a:	fa01 f202 	lsl.w	r2, r1, r2
 800428e:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004298:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00c      	beq.n	80042bc <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042b0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80042ba:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b084      	sub	sp, #16
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d005      	beq.n	80042fe <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2204      	movs	r2, #4
 80042f6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	73fb      	strb	r3, [r7, #15]
 80042fc:	e047      	b.n	800438e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 020e 	bic.w	r2, r2, #14
 800430c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0201 	bic.w	r2, r2, #1
 800431c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004328:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800432c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004332:	f003 021c 	and.w	r2, r3, #28
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	2101      	movs	r1, #1
 800433c:	fa01 f202 	lsl.w	r2, r1, r2
 8004340:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800434a:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00c      	beq.n	800436e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004362:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800436c:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	4798      	blx	r3
    }
  }
  return status;
 800438e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043a2:	2300      	movs	r3, #0
 80043a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043a6:	e166      	b.n	8004676 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	2101      	movs	r1, #1
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	fa01 f303 	lsl.w	r3, r1, r3
 80043b4:	4013      	ands	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 8158 	beq.w	8004670 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f003 0303 	and.w	r3, r3, #3
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d005      	beq.n	80043d8 <HAL_GPIO_Init+0x40>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f003 0303 	and.w	r3, r3, #3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d130      	bne.n	800443a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	2203      	movs	r2, #3
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	43db      	mvns	r3, r3
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	4013      	ands	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	68da      	ldr	r2, [r3, #12]
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	4313      	orrs	r3, r2
 8004400:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800440e:	2201      	movs	r2, #1
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	fa02 f303 	lsl.w	r3, r2, r3
 8004416:	43db      	mvns	r3, r3
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	4013      	ands	r3, r2
 800441c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	091b      	lsrs	r3, r3, #4
 8004424:	f003 0201 	and.w	r2, r3, #1
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	4313      	orrs	r3, r2
 8004432:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	2b03      	cmp	r3, #3
 8004444:	d017      	beq.n	8004476 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	2203      	movs	r2, #3
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	43db      	mvns	r3, r3
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4013      	ands	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	689a      	ldr	r2, [r3, #8]
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	fa02 f303 	lsl.w	r3, r2, r3
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	4313      	orrs	r3, r2
 800446e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d123      	bne.n	80044ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	08da      	lsrs	r2, r3, #3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3208      	adds	r2, #8
 800448a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800448e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	220f      	movs	r2, #15
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	43db      	mvns	r3, r3
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	4013      	ands	r3, r2
 80044a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	691a      	ldr	r2, [r3, #16]
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f003 0307 	and.w	r3, r3, #7
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	fa02 f303 	lsl.w	r3, r2, r3
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	08da      	lsrs	r2, r3, #3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	3208      	adds	r2, #8
 80044c4:	6939      	ldr	r1, [r7, #16]
 80044c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	2203      	movs	r2, #3
 80044d6:	fa02 f303 	lsl.w	r3, r2, r3
 80044da:	43db      	mvns	r3, r3
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	4013      	ands	r3, r2
 80044e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f003 0203 	and.w	r2, r3, #3
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	fa02 f303 	lsl.w	r3, r2, r3
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 80b2 	beq.w	8004670 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800450c:	4b61      	ldr	r3, [pc, #388]	; (8004694 <HAL_GPIO_Init+0x2fc>)
 800450e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004510:	4a60      	ldr	r2, [pc, #384]	; (8004694 <HAL_GPIO_Init+0x2fc>)
 8004512:	f043 0301 	orr.w	r3, r3, #1
 8004516:	6613      	str	r3, [r2, #96]	; 0x60
 8004518:	4b5e      	ldr	r3, [pc, #376]	; (8004694 <HAL_GPIO_Init+0x2fc>)
 800451a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	60bb      	str	r3, [r7, #8]
 8004522:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004524:	4a5c      	ldr	r2, [pc, #368]	; (8004698 <HAL_GPIO_Init+0x300>)
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	089b      	lsrs	r3, r3, #2
 800452a:	3302      	adds	r3, #2
 800452c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004530:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f003 0303 	and.w	r3, r3, #3
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	220f      	movs	r2, #15
 800453c:	fa02 f303 	lsl.w	r3, r2, r3
 8004540:	43db      	mvns	r3, r3
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4013      	ands	r3, r2
 8004546:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800454e:	d02b      	beq.n	80045a8 <HAL_GPIO_Init+0x210>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a52      	ldr	r2, [pc, #328]	; (800469c <HAL_GPIO_Init+0x304>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d025      	beq.n	80045a4 <HAL_GPIO_Init+0x20c>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a51      	ldr	r2, [pc, #324]	; (80046a0 <HAL_GPIO_Init+0x308>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d01f      	beq.n	80045a0 <HAL_GPIO_Init+0x208>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a50      	ldr	r2, [pc, #320]	; (80046a4 <HAL_GPIO_Init+0x30c>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d019      	beq.n	800459c <HAL_GPIO_Init+0x204>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a4f      	ldr	r2, [pc, #316]	; (80046a8 <HAL_GPIO_Init+0x310>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d013      	beq.n	8004598 <HAL_GPIO_Init+0x200>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a4e      	ldr	r2, [pc, #312]	; (80046ac <HAL_GPIO_Init+0x314>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d00d      	beq.n	8004594 <HAL_GPIO_Init+0x1fc>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a4d      	ldr	r2, [pc, #308]	; (80046b0 <HAL_GPIO_Init+0x318>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d007      	beq.n	8004590 <HAL_GPIO_Init+0x1f8>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a4c      	ldr	r2, [pc, #304]	; (80046b4 <HAL_GPIO_Init+0x31c>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d101      	bne.n	800458c <HAL_GPIO_Init+0x1f4>
 8004588:	2307      	movs	r3, #7
 800458a:	e00e      	b.n	80045aa <HAL_GPIO_Init+0x212>
 800458c:	2308      	movs	r3, #8
 800458e:	e00c      	b.n	80045aa <HAL_GPIO_Init+0x212>
 8004590:	2306      	movs	r3, #6
 8004592:	e00a      	b.n	80045aa <HAL_GPIO_Init+0x212>
 8004594:	2305      	movs	r3, #5
 8004596:	e008      	b.n	80045aa <HAL_GPIO_Init+0x212>
 8004598:	2304      	movs	r3, #4
 800459a:	e006      	b.n	80045aa <HAL_GPIO_Init+0x212>
 800459c:	2303      	movs	r3, #3
 800459e:	e004      	b.n	80045aa <HAL_GPIO_Init+0x212>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e002      	b.n	80045aa <HAL_GPIO_Init+0x212>
 80045a4:	2301      	movs	r3, #1
 80045a6:	e000      	b.n	80045aa <HAL_GPIO_Init+0x212>
 80045a8:	2300      	movs	r3, #0
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	f002 0203 	and.w	r2, r2, #3
 80045b0:	0092      	lsls	r2, r2, #2
 80045b2:	4093      	lsls	r3, r2
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80045ba:	4937      	ldr	r1, [pc, #220]	; (8004698 <HAL_GPIO_Init+0x300>)
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	089b      	lsrs	r3, r3, #2
 80045c0:	3302      	adds	r3, #2
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045c8:	4b3b      	ldr	r3, [pc, #236]	; (80046b8 <HAL_GPIO_Init+0x320>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	43db      	mvns	r3, r3
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	4013      	ands	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045ec:	4a32      	ldr	r2, [pc, #200]	; (80046b8 <HAL_GPIO_Init+0x320>)
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80045f2:	4b31      	ldr	r3, [pc, #196]	; (80046b8 <HAL_GPIO_Init+0x320>)
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	43db      	mvns	r3, r3
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	4013      	ands	r3, r2
 8004600:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4313      	orrs	r3, r2
 8004614:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004616:	4a28      	ldr	r2, [pc, #160]	; (80046b8 <HAL_GPIO_Init+0x320>)
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800461c:	4b26      	ldr	r3, [pc, #152]	; (80046b8 <HAL_GPIO_Init+0x320>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	43db      	mvns	r3, r3
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	4013      	ands	r3, r2
 800462a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004640:	4a1d      	ldr	r2, [pc, #116]	; (80046b8 <HAL_GPIO_Init+0x320>)
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004646:	4b1c      	ldr	r3, [pc, #112]	; (80046b8 <HAL_GPIO_Init+0x320>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	43db      	mvns	r3, r3
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	4013      	ands	r3, r2
 8004654:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800466a:	4a13      	ldr	r2, [pc, #76]	; (80046b8 <HAL_GPIO_Init+0x320>)
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	3301      	adds	r3, #1
 8004674:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	fa22 f303 	lsr.w	r3, r2, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	f47f ae91 	bne.w	80043a8 <HAL_GPIO_Init+0x10>
  }
}
 8004686:	bf00      	nop
 8004688:	bf00      	nop
 800468a:	371c      	adds	r7, #28
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	40021000 	.word	0x40021000
 8004698:	40010000 	.word	0x40010000
 800469c:	48000400 	.word	0x48000400
 80046a0:	48000800 	.word	0x48000800
 80046a4:	48000c00 	.word	0x48000c00
 80046a8:	48001000 	.word	0x48001000
 80046ac:	48001400 	.word	0x48001400
 80046b0:	48001800 	.word	0x48001800
 80046b4:	48001c00 	.word	0x48001c00
 80046b8:	40010400 	.word	0x40010400

080046bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	460b      	mov	r3, r1
 80046c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	691a      	ldr	r2, [r3, #16]
 80046cc:	887b      	ldrh	r3, [r7, #2]
 80046ce:	4013      	ands	r3, r2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046d4:	2301      	movs	r3, #1
 80046d6:	73fb      	strb	r3, [r7, #15]
 80046d8:	e001      	b.n	80046de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046da:	2300      	movs	r3, #0
 80046dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046de:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	460b      	mov	r3, r1
 80046f6:	807b      	strh	r3, [r7, #2]
 80046f8:	4613      	mov	r3, r2
 80046fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046fc:	787b      	ldrb	r3, [r7, #1]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004702:	887a      	ldrh	r2, [r7, #2]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004708:	e002      	b.n	8004710 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800470a:	887a      	ldrh	r2, [r7, #2]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	460b      	mov	r3, r1
 8004726:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800472e:	887a      	ldrh	r2, [r7, #2]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4013      	ands	r3, r2
 8004734:	041a      	lsls	r2, r3, #16
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	43d9      	mvns	r1, r3
 800473a:	887b      	ldrh	r3, [r7, #2]
 800473c:	400b      	ands	r3, r1
 800473e:	431a      	orrs	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	619a      	str	r2, [r3, #24]
}
 8004744:	bf00      	nop
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e081      	b.n	8004866 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d106      	bne.n	800477c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7ff f892 	bl	80038a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2224      	movs	r2, #36	; 0x24
 8004780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0201 	bic.w	r2, r2, #1
 8004792:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d107      	bne.n	80047ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689a      	ldr	r2, [r3, #8]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047c6:	609a      	str	r2, [r3, #8]
 80047c8:	e006      	b.n	80047d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689a      	ldr	r2, [r3, #8]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80047d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d104      	bne.n	80047ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6812      	ldr	r2, [r2, #0]
 80047f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800480c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691a      	ldr	r2, [r3, #16]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	69d9      	ldr	r1, [r3, #28]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a1a      	ldr	r2, [r3, #32]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	430a      	orrs	r2, r1
 8004836:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 0201 	orr.w	r2, r2, #1
 8004846:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2220      	movs	r2, #32
 8004852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
	...

08004870 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b088      	sub	sp, #32
 8004874:	af02      	add	r7, sp, #8
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	607a      	str	r2, [r7, #4]
 800487a:	461a      	mov	r2, r3
 800487c:	460b      	mov	r3, r1
 800487e:	817b      	strh	r3, [r7, #10]
 8004880:	4613      	mov	r3, r2
 8004882:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b20      	cmp	r3, #32
 800488e:	f040 80da 	bne.w	8004a46 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004898:	2b01      	cmp	r3, #1
 800489a:	d101      	bne.n	80048a0 <HAL_I2C_Master_Transmit+0x30>
 800489c:	2302      	movs	r3, #2
 800489e:	e0d3      	b.n	8004a48 <HAL_I2C_Master_Transmit+0x1d8>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80048a8:	f7ff fb7a 	bl	8003fa0 <HAL_GetTick>
 80048ac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	2319      	movs	r3, #25
 80048b4:	2201      	movs	r2, #1
 80048b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 faed 	bl	8004e9a <I2C_WaitOnFlagUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e0be      	b.n	8004a48 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2221      	movs	r2, #33	; 0x21
 80048ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2210      	movs	r2, #16
 80048d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	893a      	ldrh	r2, [r7, #8]
 80048ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	2bff      	cmp	r3, #255	; 0xff
 80048fa:	d90e      	bls.n	800491a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	22ff      	movs	r2, #255	; 0xff
 8004900:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004906:	b2da      	uxtb	r2, r3
 8004908:	8979      	ldrh	r1, [r7, #10]
 800490a:	4b51      	ldr	r3, [pc, #324]	; (8004a50 <HAL_I2C_Master_Transmit+0x1e0>)
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 fce4 	bl	80052e0 <I2C_TransferConfig>
 8004918:	e06c      	b.n	80049f4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491e:	b29a      	uxth	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004928:	b2da      	uxtb	r2, r3
 800492a:	8979      	ldrh	r1, [r7, #10]
 800492c:	4b48      	ldr	r3, [pc, #288]	; (8004a50 <HAL_I2C_Master_Transmit+0x1e0>)
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 fcd3 	bl	80052e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800493a:	e05b      	b.n	80049f4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	6a39      	ldr	r1, [r7, #32]
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f000 faea 	bl	8004f1a <I2C_WaitOnTXISFlagUntilTimeout>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e07b      	b.n	8004a48 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	781a      	ldrb	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800496a:	b29b      	uxth	r3, r3
 800496c:	3b01      	subs	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004978:	3b01      	subs	r3, #1
 800497a:	b29a      	uxth	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004984:	b29b      	uxth	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d034      	beq.n	80049f4 <HAL_I2C_Master_Transmit+0x184>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800498e:	2b00      	cmp	r3, #0
 8004990:	d130      	bne.n	80049f4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	2200      	movs	r2, #0
 800499a:	2180      	movs	r1, #128	; 0x80
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 fa7c 	bl	8004e9a <I2C_WaitOnFlagUntilTimeout>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e04d      	b.n	8004a48 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	2bff      	cmp	r3, #255	; 0xff
 80049b4:	d90e      	bls.n	80049d4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	22ff      	movs	r2, #255	; 0xff
 80049ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	8979      	ldrh	r1, [r7, #10]
 80049c4:	2300      	movs	r3, #0
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 fc87 	bl	80052e0 <I2C_TransferConfig>
 80049d2:	e00f      	b.n	80049f4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d8:	b29a      	uxth	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	8979      	ldrh	r1, [r7, #10]
 80049e6:	2300      	movs	r3, #0
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 fc76 	bl	80052e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d19e      	bne.n	800493c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	6a39      	ldr	r1, [r7, #32]
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 fac9 	bl	8004f9a <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e01a      	b.n	8004a48 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2220      	movs	r2, #32
 8004a18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6859      	ldr	r1, [r3, #4]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	4b0b      	ldr	r3, [pc, #44]	; (8004a54 <HAL_I2C_Master_Transmit+0x1e4>)
 8004a26:	400b      	ands	r3, r1
 8004a28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	e000      	b.n	8004a48 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004a46:	2302      	movs	r3, #2
  }
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3718      	adds	r7, #24
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	80002000 	.word	0x80002000
 8004a54:	fe00e800 	.word	0xfe00e800

08004a58 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b088      	sub	sp, #32
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	607a      	str	r2, [r7, #4]
 8004a62:	461a      	mov	r2, r3
 8004a64:	460b      	mov	r3, r1
 8004a66:	817b      	strh	r3, [r7, #10]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	f040 80db 	bne.w	8004c30 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d101      	bne.n	8004a88 <HAL_I2C_Master_Receive+0x30>
 8004a84:	2302      	movs	r3, #2
 8004a86:	e0d4      	b.n	8004c32 <HAL_I2C_Master_Receive+0x1da>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a90:	f7ff fa86 	bl	8003fa0 <HAL_GetTick>
 8004a94:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	2319      	movs	r3, #25
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 f9f9 	bl	8004e9a <I2C_WaitOnFlagUntilTimeout>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e0bf      	b.n	8004c32 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2222      	movs	r2, #34	; 0x22
 8004ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2210      	movs	r2, #16
 8004abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	893a      	ldrh	r2, [r7, #8]
 8004ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	2bff      	cmp	r3, #255	; 0xff
 8004ae2:	d90e      	bls.n	8004b02 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	22ff      	movs	r2, #255	; 0xff
 8004ae8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	8979      	ldrh	r1, [r7, #10]
 8004af2:	4b52      	ldr	r3, [pc, #328]	; (8004c3c <HAL_I2C_Master_Receive+0x1e4>)
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 fbf0 	bl	80052e0 <I2C_TransferConfig>
 8004b00:	e06d      	b.n	8004bde <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	8979      	ldrh	r1, [r7, #10]
 8004b14:	4b49      	ldr	r3, [pc, #292]	; (8004c3c <HAL_I2C_Master_Receive+0x1e4>)
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f000 fbdf 	bl	80052e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004b22:	e05c      	b.n	8004bde <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	6a39      	ldr	r1, [r7, #32]
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 fa73 	bl	8005014 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e07c      	b.n	8004c32 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	b2d2      	uxtb	r2, r2
 8004b44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	1c5a      	adds	r2, r3, #1
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b54:	3b01      	subs	r3, #1
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	3b01      	subs	r3, #1
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d034      	beq.n	8004bde <HAL_I2C_Master_Receive+0x186>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d130      	bne.n	8004bde <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	6a3b      	ldr	r3, [r7, #32]
 8004b82:	2200      	movs	r2, #0
 8004b84:	2180      	movs	r1, #128	; 0x80
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 f987 	bl	8004e9a <I2C_WaitOnFlagUntilTimeout>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e04d      	b.n	8004c32 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	2bff      	cmp	r3, #255	; 0xff
 8004b9e:	d90e      	bls.n	8004bbe <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	22ff      	movs	r2, #255	; 0xff
 8004ba4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004baa:	b2da      	uxtb	r2, r3
 8004bac:	8979      	ldrh	r1, [r7, #10]
 8004bae:	2300      	movs	r3, #0
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 fb92 	bl	80052e0 <I2C_TransferConfig>
 8004bbc:	e00f      	b.n	8004bde <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	8979      	ldrh	r1, [r7, #10]
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 fb81 	bl	80052e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d19d      	bne.n	8004b24 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	6a39      	ldr	r1, [r7, #32]
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 f9d4 	bl	8004f9a <I2C_WaitOnSTOPFlagUntilTimeout>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e01a      	b.n	8004c32 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2220      	movs	r2, #32
 8004c02:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6859      	ldr	r1, [r3, #4]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	4b0c      	ldr	r3, [pc, #48]	; (8004c40 <HAL_I2C_Master_Receive+0x1e8>)
 8004c10:	400b      	ands	r3, r1
 8004c12:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	e000      	b.n	8004c32 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004c30:	2302      	movs	r3, #2
  }
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	80002400 	.word	0x80002400
 8004c40:	fe00e800 	.word	0xfe00e800

08004c44 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b08a      	sub	sp, #40	; 0x28
 8004c48:	af02      	add	r7, sp, #8
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	607a      	str	r2, [r7, #4]
 8004c4e:	603b      	str	r3, [r7, #0]
 8004c50:	460b      	mov	r3, r1
 8004c52:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004c54:	2300      	movs	r3, #0
 8004c56:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b20      	cmp	r3, #32
 8004c62:	f040 80f1 	bne.w	8004e48 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c74:	d101      	bne.n	8004c7a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004c76:	2302      	movs	r3, #2
 8004c78:	e0e7      	b.n	8004e4a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d101      	bne.n	8004c88 <HAL_I2C_IsDeviceReady+0x44>
 8004c84:	2302      	movs	r3, #2
 8004c86:	e0e0      	b.n	8004e4a <HAL_I2C_IsDeviceReady+0x206>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2224      	movs	r2, #36	; 0x24
 8004c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d107      	bne.n	8004cb6 <HAL_I2C_IsDeviceReady+0x72>
 8004ca6:	897b      	ldrh	r3, [r7, #10]
 8004ca8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004cb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004cb4:	e004      	b.n	8004cc0 <HAL_I2C_IsDeviceReady+0x7c>
 8004cb6:	897b      	ldrh	r3, [r7, #10]
 8004cb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cbc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	6812      	ldr	r2, [r2, #0]
 8004cc4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004cc6:	f7ff f96b 	bl	8003fa0 <HAL_GetTick>
 8004cca:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	f003 0320 	and.w	r3, r3, #32
 8004cd6:	2b20      	cmp	r3, #32
 8004cd8:	bf0c      	ite	eq
 8004cda:	2301      	moveq	r3, #1
 8004cdc:	2300      	movne	r3, #0
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	f003 0310 	and.w	r3, r3, #16
 8004cec:	2b10      	cmp	r3, #16
 8004cee:	bf0c      	ite	eq
 8004cf0:	2301      	moveq	r3, #1
 8004cf2:	2300      	movne	r3, #0
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004cf8:	e034      	b.n	8004d64 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d00:	d01a      	beq.n	8004d38 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d02:	f7ff f94d 	bl	8003fa0 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d302      	bcc.n	8004d18 <HAL_I2C_IsDeviceReady+0xd4>
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10f      	bne.n	8004d38 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d24:	f043 0220 	orr.w	r2, r3, #32
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e088      	b.n	8004e4a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	f003 0320 	and.w	r3, r3, #32
 8004d42:	2b20      	cmp	r3, #32
 8004d44:	bf0c      	ite	eq
 8004d46:	2301      	moveq	r3, #1
 8004d48:	2300      	movne	r3, #0
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	f003 0310 	and.w	r3, r3, #16
 8004d58:	2b10      	cmp	r3, #16
 8004d5a:	bf0c      	ite	eq
 8004d5c:	2301      	moveq	r3, #1
 8004d5e:	2300      	movne	r3, #0
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004d64:	7ffb      	ldrb	r3, [r7, #31]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d102      	bne.n	8004d70 <HAL_I2C_IsDeviceReady+0x12c>
 8004d6a:	7fbb      	ldrb	r3, [r7, #30]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0c4      	beq.n	8004cfa <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	f003 0310 	and.w	r3, r3, #16
 8004d7a:	2b10      	cmp	r3, #16
 8004d7c:	d01a      	beq.n	8004db4 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2200      	movs	r2, #0
 8004d86:	2120      	movs	r1, #32
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 f886 	bl	8004e9a <I2C_WaitOnFlagUntilTimeout>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e058      	b.n	8004e4a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004db0:	2300      	movs	r3, #0
 8004db2:	e04a      	b.n	8004e4a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	2120      	movs	r1, #32
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 f86b 	bl	8004e9a <I2C_WaitOnFlagUntilTimeout>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e03d      	b.n	8004e4a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2210      	movs	r2, #16
 8004dd4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d118      	bne.n	8004e18 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004df4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	2120      	movs	r1, #32
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 f84a 	bl	8004e9a <I2C_WaitOnFlagUntilTimeout>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e01c      	b.n	8004e4a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2220      	movs	r2, #32
 8004e16:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	f63f af3b 	bhi.w	8004c9e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e34:	f043 0220 	orr.w	r2, r3, #32
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e000      	b.n	8004e4a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004e48:	2302      	movs	r3, #2
  }
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3720      	adds	r7, #32
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d103      	bne.n	8004e70 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d007      	beq.n	8004e8e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	699a      	ldr	r2, [r3, #24]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f042 0201 	orr.w	r2, r2, #1
 8004e8c:	619a      	str	r2, [r3, #24]
  }
}
 8004e8e:	bf00      	nop
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b084      	sub	sp, #16
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	60f8      	str	r0, [r7, #12]
 8004ea2:	60b9      	str	r1, [r7, #8]
 8004ea4:	603b      	str	r3, [r7, #0]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004eaa:	e022      	b.n	8004ef2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004eb2:	d01e      	beq.n	8004ef2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb4:	f7ff f874 	bl	8003fa0 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d302      	bcc.n	8004eca <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d113      	bne.n	8004ef2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ece:	f043 0220 	orr.w	r2, r3, #32
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e00f      	b.n	8004f12 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	699a      	ldr	r2, [r3, #24]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	4013      	ands	r3, r2
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	bf0c      	ite	eq
 8004f02:	2301      	moveq	r3, #1
 8004f04:	2300      	movne	r3, #0
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	461a      	mov	r2, r3
 8004f0a:	79fb      	ldrb	r3, [r7, #7]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d0cd      	beq.n	8004eac <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b084      	sub	sp, #16
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	60f8      	str	r0, [r7, #12]
 8004f22:	60b9      	str	r1, [r7, #8]
 8004f24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f26:	e02c      	b.n	8004f82 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	68b9      	ldr	r1, [r7, #8]
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f000 f8eb 	bl	8005108 <I2C_IsErrorOccurred>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e02a      	b.n	8004f92 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f42:	d01e      	beq.n	8004f82 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f44:	f7ff f82c 	bl	8003fa0 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d302      	bcc.n	8004f5a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d113      	bne.n	8004f82 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5e:	f043 0220 	orr.w	r2, r3, #32
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e007      	b.n	8004f92 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d1cb      	bne.n	8004f28 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b084      	sub	sp, #16
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	60f8      	str	r0, [r7, #12]
 8004fa2:	60b9      	str	r1, [r7, #8]
 8004fa4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fa6:	e028      	b.n	8004ffa <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	68b9      	ldr	r1, [r7, #8]
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 f8ab 	bl	8005108 <I2C_IsErrorOccurred>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e026      	b.n	800500a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fbc:	f7fe fff0 	bl	8003fa0 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d302      	bcc.n	8004fd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d113      	bne.n	8004ffa <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd6:	f043 0220 	orr.w	r2, r3, #32
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e007      	b.n	800500a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	f003 0320 	and.w	r3, r3, #32
 8005004:	2b20      	cmp	r3, #32
 8005006:	d1cf      	bne.n	8004fa8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
	...

08005014 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005020:	e064      	b.n	80050ec <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	68b9      	ldr	r1, [r7, #8]
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 f86e 	bl	8005108 <I2C_IsErrorOccurred>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e062      	b.n	80050fc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	f003 0320 	and.w	r3, r3, #32
 8005040:	2b20      	cmp	r3, #32
 8005042:	d138      	bne.n	80050b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	f003 0304 	and.w	r3, r3, #4
 800504e:	2b04      	cmp	r3, #4
 8005050:	d105      	bne.n	800505e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	e04e      	b.n	80050fc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	f003 0310 	and.w	r3, r3, #16
 8005068:	2b10      	cmp	r3, #16
 800506a:	d107      	bne.n	800507c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2210      	movs	r2, #16
 8005072:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2204      	movs	r2, #4
 8005078:	645a      	str	r2, [r3, #68]	; 0x44
 800507a:	e002      	b.n	8005082 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2220      	movs	r2, #32
 8005088:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6859      	ldr	r1, [r3, #4]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	4b1b      	ldr	r3, [pc, #108]	; (8005104 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8005096:	400b      	ands	r3, r1
 8005098:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2220      	movs	r2, #32
 800509e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e022      	b.n	80050fc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b6:	f7fe ff73 	bl	8003fa0 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d302      	bcc.n	80050cc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10f      	bne.n	80050ec <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d0:	f043 0220 	orr.w	r2, r3, #32
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2220      	movs	r2, #32
 80050dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e007      	b.n	80050fc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	f003 0304 	and.w	r3, r3, #4
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d193      	bne.n	8005022 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	fe00e800 	.word	0xfe00e800

08005108 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b08a      	sub	sp, #40	; 0x28
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005114:	2300      	movs	r3, #0
 8005116:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005122:	2300      	movs	r3, #0
 8005124:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	f003 0310 	and.w	r3, r3, #16
 8005130:	2b00      	cmp	r3, #0
 8005132:	d075      	beq.n	8005220 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2210      	movs	r2, #16
 800513a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800513c:	e056      	b.n	80051ec <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005144:	d052      	beq.n	80051ec <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005146:	f7fe ff2b 	bl	8003fa0 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	429a      	cmp	r2, r3
 8005154:	d302      	bcc.n	800515c <I2C_IsErrorOccurred+0x54>
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d147      	bne.n	80051ec <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005166:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800516e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800517a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800517e:	d12e      	bne.n	80051de <I2C_IsErrorOccurred+0xd6>
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005186:	d02a      	beq.n	80051de <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005188:	7cfb      	ldrb	r3, [r7, #19]
 800518a:	2b20      	cmp	r3, #32
 800518c:	d027      	beq.n	80051de <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800519c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800519e:	f7fe feff 	bl	8003fa0 <HAL_GetTick>
 80051a2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051a4:	e01b      	b.n	80051de <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80051a6:	f7fe fefb 	bl	8003fa0 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b19      	cmp	r3, #25
 80051b2:	d914      	bls.n	80051de <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b8:	f043 0220 	orr.w	r2, r3, #32
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	f003 0320 	and.w	r3, r3, #32
 80051e8:	2b20      	cmp	r3, #32
 80051ea:	d1dc      	bne.n	80051a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	f003 0320 	and.w	r3, r3, #32
 80051f6:	2b20      	cmp	r3, #32
 80051f8:	d003      	beq.n	8005202 <I2C_IsErrorOccurred+0xfa>
 80051fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d09d      	beq.n	800513e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005202:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005206:	2b00      	cmp	r3, #0
 8005208:	d103      	bne.n	8005212 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2220      	movs	r2, #32
 8005210:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	f043 0304 	orr.w	r3, r3, #4
 8005218:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00b      	beq.n	800524a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	f043 0301 	orr.w	r3, r3, #1
 8005238:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005242:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00b      	beq.n	800526c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	f043 0308 	orr.w	r3, r3, #8
 800525a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005264:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00b      	beq.n	800528e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	f043 0302 	orr.w	r3, r3, #2
 800527c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005286:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800528e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005292:	2b00      	cmp	r3, #0
 8005294:	d01c      	beq.n	80052d0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f7ff fddb 	bl	8004e52 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6859      	ldr	r1, [r3, #4]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	4b0d      	ldr	r3, [pc, #52]	; (80052dc <I2C_IsErrorOccurred+0x1d4>)
 80052a8:	400b      	ands	r3, r1
 80052aa:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052b0:	6a3b      	ldr	r3, [r7, #32]
 80052b2:	431a      	orrs	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2220      	movs	r2, #32
 80052bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80052d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3728      	adds	r7, #40	; 0x28
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	fe00e800 	.word	0xfe00e800

080052e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	607b      	str	r3, [r7, #4]
 80052ea:	460b      	mov	r3, r1
 80052ec:	817b      	strh	r3, [r7, #10]
 80052ee:	4613      	mov	r3, r2
 80052f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052f2:	897b      	ldrh	r3, [r7, #10]
 80052f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052f8:	7a7b      	ldrb	r3, [r7, #9]
 80052fa:	041b      	lsls	r3, r3, #16
 80052fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005300:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	4313      	orrs	r3, r2
 800530a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800530e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	0d5b      	lsrs	r3, r3, #21
 800531a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800531e:	4b08      	ldr	r3, [pc, #32]	; (8005340 <I2C_TransferConfig+0x60>)
 8005320:	430b      	orrs	r3, r1
 8005322:	43db      	mvns	r3, r3
 8005324:	ea02 0103 	and.w	r1, r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	430a      	orrs	r2, r1
 8005330:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005332:	bf00      	nop
 8005334:	371c      	adds	r7, #28
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	03ff63ff 	.word	0x03ff63ff

08005344 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b20      	cmp	r3, #32
 8005358:	d138      	bne.n	80053cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005360:	2b01      	cmp	r3, #1
 8005362:	d101      	bne.n	8005368 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005364:	2302      	movs	r3, #2
 8005366:	e032      	b.n	80053ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2224      	movs	r2, #36	; 0x24
 8005374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f022 0201 	bic.w	r2, r2, #1
 8005386:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005396:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6819      	ldr	r1, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	430a      	orrs	r2, r1
 80053a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 0201 	orr.w	r2, r2, #1
 80053b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2220      	movs	r2, #32
 80053bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053c8:	2300      	movs	r3, #0
 80053ca:	e000      	b.n	80053ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80053cc:	2302      	movs	r3, #2
  }
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80053da:	b480      	push	{r7}
 80053dc:	b085      	sub	sp, #20
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
 80053e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d139      	bne.n	8005464 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d101      	bne.n	80053fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80053fa:	2302      	movs	r3, #2
 80053fc:	e033      	b.n	8005466 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2224      	movs	r2, #36	; 0x24
 800540a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 0201 	bic.w	r2, r2, #1
 800541c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800542c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	021b      	lsls	r3, r3, #8
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	4313      	orrs	r3, r2
 8005436:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0201 	orr.w	r2, r2, #1
 800544e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2220      	movs	r2, #32
 8005454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005460:	2300      	movs	r3, #0
 8005462:	e000      	b.n	8005466 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005464:	2302      	movs	r3, #2
  }
}
 8005466:	4618      	mov	r0, r3
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005472:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005474:	b08f      	sub	sp, #60	; 0x3c
 8005476:	af0a      	add	r7, sp, #40	; 0x28
 8005478:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e116      	b.n	80056b2 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d106      	bne.n	80054a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f00e fd3e 	bl	8013f20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2203      	movs	r2, #3
 80054a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d102      	bne.n	80054be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f008 fb67 	bl	800db96 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	603b      	str	r3, [r7, #0]
 80054ce:	687e      	ldr	r6, [r7, #4]
 80054d0:	466d      	mov	r5, sp
 80054d2:	f106 0410 	add.w	r4, r6, #16
 80054d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80054e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80054e6:	1d33      	adds	r3, r6, #4
 80054e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054ea:	6838      	ldr	r0, [r7, #0]
 80054ec:	f008 fa7a 	bl	800d9e4 <USB_CoreInit>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d005      	beq.n	8005502 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2202      	movs	r2, #2
 80054fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e0d7      	b.n	80056b2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2100      	movs	r1, #0
 8005508:	4618      	mov	r0, r3
 800550a:	f008 fb55 	bl	800dbb8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800550e:	2300      	movs	r3, #0
 8005510:	73fb      	strb	r3, [r7, #15]
 8005512:	e04a      	b.n	80055aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005514:	7bfa      	ldrb	r2, [r7, #15]
 8005516:	6879      	ldr	r1, [r7, #4]
 8005518:	4613      	mov	r3, r2
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	4413      	add	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	440b      	add	r3, r1
 8005522:	333d      	adds	r3, #61	; 0x3d
 8005524:	2201      	movs	r2, #1
 8005526:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005528:	7bfa      	ldrb	r2, [r7, #15]
 800552a:	6879      	ldr	r1, [r7, #4]
 800552c:	4613      	mov	r3, r2
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	4413      	add	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	440b      	add	r3, r1
 8005536:	333c      	adds	r3, #60	; 0x3c
 8005538:	7bfa      	ldrb	r2, [r7, #15]
 800553a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800553c:	7bfa      	ldrb	r2, [r7, #15]
 800553e:	7bfb      	ldrb	r3, [r7, #15]
 8005540:	b298      	uxth	r0, r3
 8005542:	6879      	ldr	r1, [r7, #4]
 8005544:	4613      	mov	r3, r2
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	4413      	add	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	440b      	add	r3, r1
 800554e:	3344      	adds	r3, #68	; 0x44
 8005550:	4602      	mov	r2, r0
 8005552:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005554:	7bfa      	ldrb	r2, [r7, #15]
 8005556:	6879      	ldr	r1, [r7, #4]
 8005558:	4613      	mov	r3, r2
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	4413      	add	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	440b      	add	r3, r1
 8005562:	3340      	adds	r3, #64	; 0x40
 8005564:	2200      	movs	r2, #0
 8005566:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005568:	7bfa      	ldrb	r2, [r7, #15]
 800556a:	6879      	ldr	r1, [r7, #4]
 800556c:	4613      	mov	r3, r2
 800556e:	00db      	lsls	r3, r3, #3
 8005570:	4413      	add	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	440b      	add	r3, r1
 8005576:	3348      	adds	r3, #72	; 0x48
 8005578:	2200      	movs	r2, #0
 800557a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800557c:	7bfa      	ldrb	r2, [r7, #15]
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	4613      	mov	r3, r2
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	4413      	add	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	440b      	add	r3, r1
 800558a:	334c      	adds	r3, #76	; 0x4c
 800558c:	2200      	movs	r2, #0
 800558e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005590:	7bfa      	ldrb	r2, [r7, #15]
 8005592:	6879      	ldr	r1, [r7, #4]
 8005594:	4613      	mov	r3, r2
 8005596:	00db      	lsls	r3, r3, #3
 8005598:	4413      	add	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	440b      	add	r3, r1
 800559e:	3354      	adds	r3, #84	; 0x54
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
 80055a6:	3301      	adds	r3, #1
 80055a8:	73fb      	strb	r3, [r7, #15]
 80055aa:	7bfa      	ldrb	r2, [r7, #15]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d3af      	bcc.n	8005514 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055b4:	2300      	movs	r3, #0
 80055b6:	73fb      	strb	r3, [r7, #15]
 80055b8:	e044      	b.n	8005644 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80055ba:	7bfa      	ldrb	r2, [r7, #15]
 80055bc:	6879      	ldr	r1, [r7, #4]
 80055be:	4613      	mov	r3, r2
 80055c0:	00db      	lsls	r3, r3, #3
 80055c2:	4413      	add	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	440b      	add	r3, r1
 80055c8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80055cc:	2200      	movs	r2, #0
 80055ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80055d0:	7bfa      	ldrb	r2, [r7, #15]
 80055d2:	6879      	ldr	r1, [r7, #4]
 80055d4:	4613      	mov	r3, r2
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	4413      	add	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	440b      	add	r3, r1
 80055de:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80055e2:	7bfa      	ldrb	r2, [r7, #15]
 80055e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80055e6:	7bfa      	ldrb	r2, [r7, #15]
 80055e8:	6879      	ldr	r1, [r7, #4]
 80055ea:	4613      	mov	r3, r2
 80055ec:	00db      	lsls	r3, r3, #3
 80055ee:	4413      	add	r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	440b      	add	r3, r1
 80055f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80055f8:	2200      	movs	r2, #0
 80055fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80055fc:	7bfa      	ldrb	r2, [r7, #15]
 80055fe:	6879      	ldr	r1, [r7, #4]
 8005600:	4613      	mov	r3, r2
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	4413      	add	r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	440b      	add	r3, r1
 800560a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800560e:	2200      	movs	r2, #0
 8005610:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005612:	7bfa      	ldrb	r2, [r7, #15]
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	4613      	mov	r3, r2
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	4413      	add	r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	440b      	add	r3, r1
 8005620:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005624:	2200      	movs	r2, #0
 8005626:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005628:	7bfa      	ldrb	r2, [r7, #15]
 800562a:	6879      	ldr	r1, [r7, #4]
 800562c:	4613      	mov	r3, r2
 800562e:	00db      	lsls	r3, r3, #3
 8005630:	4413      	add	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	440b      	add	r3, r1
 8005636:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800563a:	2200      	movs	r2, #0
 800563c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800563e:	7bfb      	ldrb	r3, [r7, #15]
 8005640:	3301      	adds	r3, #1
 8005642:	73fb      	strb	r3, [r7, #15]
 8005644:	7bfa      	ldrb	r2, [r7, #15]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	429a      	cmp	r2, r3
 800564c:	d3b5      	bcc.n	80055ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	603b      	str	r3, [r7, #0]
 8005654:	687e      	ldr	r6, [r7, #4]
 8005656:	466d      	mov	r5, sp
 8005658:	f106 0410 	add.w	r4, r6, #16
 800565c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800565e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005660:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005662:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005664:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005668:	e885 0003 	stmia.w	r5, {r0, r1}
 800566c:	1d33      	adds	r3, r6, #4
 800566e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005670:	6838      	ldr	r0, [r7, #0]
 8005672:	f008 faed 	bl	800dc50 <USB_DevInit>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d005      	beq.n	8005688 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e014      	b.n	80056b2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	2b01      	cmp	r3, #1
 800569e:	d102      	bne.n	80056a6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f001 f881 	bl	80067a8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f009 fb75 	bl	800ed9a <USB_DevDisconnect>

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3714      	adds	r7, #20
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056ba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b084      	sub	sp, #16
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d101      	bne.n	80056d6 <HAL_PCD_Start+0x1c>
 80056d2:	2302      	movs	r3, #2
 80056d4:	e01c      	b.n	8005710 <HAL_PCD_Start+0x56>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d105      	bne.n	80056f2 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f008 fa3c 	bl	800db74 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4618      	mov	r0, r3
 8005702:	f009 fb29 	bl	800ed58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005718:	b590      	push	{r4, r7, lr}
 800571a:	b08d      	sub	sp, #52	; 0x34
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4618      	mov	r0, r3
 8005730:	f009 fbe7 	bl	800ef02 <USB_GetMode>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	f040 847e 	bne.w	8006038 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4618      	mov	r0, r3
 8005742:	f009 fb4b 	bl	800eddc <USB_ReadInterrupts>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 8474 	beq.w	8006036 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	0a1b      	lsrs	r3, r3, #8
 8005758:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4618      	mov	r0, r3
 8005768:	f009 fb38 	bl	800eddc <USB_ReadInterrupts>
 800576c:	4603      	mov	r3, r0
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b02      	cmp	r3, #2
 8005774:	d107      	bne.n	8005786 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	695a      	ldr	r2, [r3, #20]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f002 0202 	and.w	r2, r2, #2
 8005784:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4618      	mov	r0, r3
 800578c:	f009 fb26 	bl	800eddc <USB_ReadInterrupts>
 8005790:	4603      	mov	r3, r0
 8005792:	f003 0310 	and.w	r3, r3, #16
 8005796:	2b10      	cmp	r3, #16
 8005798:	d161      	bne.n	800585e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	699a      	ldr	r2, [r3, #24]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 0210 	bic.w	r2, r2, #16
 80057a8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	f003 020f 	and.w	r2, r3, #15
 80057b6:	4613      	mov	r3, r2
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	4413      	add	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	4413      	add	r3, r2
 80057c6:	3304      	adds	r3, #4
 80057c8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	0c5b      	lsrs	r3, r3, #17
 80057ce:	f003 030f 	and.w	r3, r3, #15
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d124      	bne.n	8005820 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80057dc:	4013      	ands	r3, r2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d035      	beq.n	800584e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	091b      	lsrs	r3, r3, #4
 80057ea:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80057ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	461a      	mov	r2, r3
 80057f4:	6a38      	ldr	r0, [r7, #32]
 80057f6:	f009 f95d 	bl	800eab4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	691a      	ldr	r2, [r3, #16]
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	091b      	lsrs	r3, r3, #4
 8005802:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005806:	441a      	add	r2, r3
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	6a1a      	ldr	r2, [r3, #32]
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	091b      	lsrs	r3, r3, #4
 8005814:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005818:	441a      	add	r2, r3
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	621a      	str	r2, [r3, #32]
 800581e:	e016      	b.n	800584e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	0c5b      	lsrs	r3, r3, #17
 8005824:	f003 030f 	and.w	r3, r3, #15
 8005828:	2b06      	cmp	r3, #6
 800582a:	d110      	bne.n	800584e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005832:	2208      	movs	r2, #8
 8005834:	4619      	mov	r1, r3
 8005836:	6a38      	ldr	r0, [r7, #32]
 8005838:	f009 f93c 	bl	800eab4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	6a1a      	ldr	r2, [r3, #32]
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	091b      	lsrs	r3, r3, #4
 8005844:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005848:	441a      	add	r2, r3
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	699a      	ldr	r2, [r3, #24]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f042 0210 	orr.w	r2, r2, #16
 800585c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4618      	mov	r0, r3
 8005864:	f009 faba 	bl	800eddc <USB_ReadInterrupts>
 8005868:	4603      	mov	r3, r0
 800586a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800586e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005872:	f040 80a7 	bne.w	80059c4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005876:	2300      	movs	r3, #0
 8005878:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4618      	mov	r0, r3
 8005880:	f009 fabf 	bl	800ee02 <USB_ReadDevAllOutEpInterrupt>
 8005884:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005886:	e099      	b.n	80059bc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 808e 	beq.w	80059b0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800589a:	b2d2      	uxtb	r2, r2
 800589c:	4611      	mov	r1, r2
 800589e:	4618      	mov	r0, r3
 80058a0:	f009 fae3 	bl	800ee6a <USB_ReadDevOutEPInterrupt>
 80058a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00c      	beq.n	80058ca <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058bc:	461a      	mov	r2, r3
 80058be:	2301      	movs	r3, #1
 80058c0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80058c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 fe95 	bl	80065f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	f003 0308 	and.w	r3, r3, #8
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00c      	beq.n	80058ee <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e0:	461a      	mov	r2, r3
 80058e2:	2308      	movs	r3, #8
 80058e4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80058e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fed1 	bl	8006690 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	f003 0310 	and.w	r3, r3, #16
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d008      	beq.n	800590a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005904:	461a      	mov	r2, r3
 8005906:	2310      	movs	r3, #16
 8005908:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d030      	beq.n	8005976 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591c:	2b80      	cmp	r3, #128	; 0x80
 800591e:	d109      	bne.n	8005934 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	69fa      	ldr	r2, [r7, #28]
 800592a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800592e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005932:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005936:	4613      	mov	r3, r2
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	4413      	add	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	4413      	add	r3, r2
 8005946:	3304      	adds	r3, #4
 8005948:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	78db      	ldrb	r3, [r3, #3]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d108      	bne.n	8005964 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2200      	movs	r2, #0
 8005956:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595a:	b2db      	uxtb	r3, r3
 800595c:	4619      	mov	r1, r3
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f00e fc22 	bl	80141a8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	4413      	add	r3, r2
 800596c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005970:	461a      	mov	r2, r3
 8005972:	2302      	movs	r3, #2
 8005974:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	f003 0320 	and.w	r3, r3, #32
 800597c:	2b00      	cmp	r3, #0
 800597e:	d008      	beq.n	8005992 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598c:	461a      	mov	r2, r3
 800598e:	2320      	movs	r3, #32
 8005990:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d009      	beq.n	80059b0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a8:	461a      	mov	r2, r3
 80059aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059ae:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80059b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b2:	3301      	adds	r3, #1
 80059b4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80059b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b8:	085b      	lsrs	r3, r3, #1
 80059ba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80059bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f47f af62 	bne.w	8005888 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f009 fa07 	bl	800eddc <USB_ReadInterrupts>
 80059ce:	4603      	mov	r3, r0
 80059d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059d8:	f040 80a4 	bne.w	8005b24 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f009 fa28 	bl	800ee36 <USB_ReadDevAllInEpInterrupt>
 80059e6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80059e8:	2300      	movs	r3, #0
 80059ea:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80059ec:	e096      	b.n	8005b1c <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80059ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 808b 	beq.w	8005b10 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a00:	b2d2      	uxtb	r2, r2
 8005a02:	4611      	mov	r1, r2
 8005a04:	4618      	mov	r0, r3
 8005a06:	f009 fa4e 	bl	800eea6 <USB_ReadDevInEPInterrupt>
 8005a0a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d020      	beq.n	8005a58 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	f003 030f 	and.w	r3, r3, #15
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a22:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	43db      	mvns	r3, r3
 8005a30:	69f9      	ldr	r1, [r7, #28]
 8005a32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a36:	4013      	ands	r3, r2
 8005a38:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a46:	461a      	mov	r2, r3
 8005a48:	2301      	movs	r3, #1
 8005a4a:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	4619      	mov	r1, r3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f00e fb13 	bl	801407e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f003 0308 	and.w	r3, r3, #8
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d008      	beq.n	8005a74 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	015a      	lsls	r2, r3, #5
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a6e:	461a      	mov	r2, r3
 8005a70:	2308      	movs	r3, #8
 8005a72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	f003 0310 	and.w	r3, r3, #16
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d008      	beq.n	8005a90 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	2310      	movs	r3, #16
 8005a8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d008      	beq.n	8005aac <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	2340      	movs	r3, #64	; 0x40
 8005aaa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	f003 0302 	and.w	r3, r3, #2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d023      	beq.n	8005afe <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005ab6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ab8:	6a38      	ldr	r0, [r7, #32]
 8005aba:	f008 fa15 	bl	800dee8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	4413      	add	r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	3338      	adds	r3, #56	; 0x38
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	4413      	add	r3, r2
 8005ace:	3304      	adds	r3, #4
 8005ad0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	78db      	ldrb	r3, [r3, #3]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d108      	bne.n	8005aec <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	2200      	movs	r2, #0
 8005ade:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f00e fb70 	bl	80141cc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af8:	461a      	mov	r2, r3
 8005afa:	2302      	movs	r3, #2
 8005afc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d003      	beq.n	8005b10 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005b08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 fcea 	bl	80064e4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	3301      	adds	r3, #1
 8005b14:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b18:	085b      	lsrs	r3, r3, #1
 8005b1a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f47f af65 	bne.w	80059ee <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f009 f957 	bl	800eddc <USB_ReadInterrupts>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b38:	d122      	bne.n	8005b80 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	69fa      	ldr	r2, [r7, #28]
 8005b44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b48:	f023 0301 	bic.w	r3, r3, #1
 8005b4c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d108      	bne.n	8005b6a <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005b60:	2100      	movs	r1, #0
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fe44 	bl	80067f0 <HAL_PCDEx_LPM_Callback>
 8005b68:	e002      	b.n	8005b70 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f00e faf4 	bl	8014158 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	695a      	ldr	r2, [r3, #20]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005b7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f009 f929 	bl	800eddc <USB_ReadInterrupts>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b94:	d112      	bne.n	8005bbc <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d102      	bne.n	8005bac <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f00e fab0 	bl	801410c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	695a      	ldr	r2, [r3, #20]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005bba:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f009 f90b 	bl	800eddc <USB_ReadInterrupts>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bd0:	d121      	bne.n	8005c16 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	695a      	ldr	r2, [r3, #20]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005be0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d111      	bne.n	8005c10 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bfa:	089b      	lsrs	r3, r3, #2
 8005bfc:	f003 020f 	and.w	r2, r3, #15
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005c06:	2101      	movs	r1, #1
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fdf1 	bl	80067f0 <HAL_PCDEx_LPM_Callback>
 8005c0e:	e002      	b.n	8005c16 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f00e fa7b 	bl	801410c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f009 f8de 	bl	800eddc <USB_ReadInterrupts>
 8005c20:	4603      	mov	r3, r0
 8005c22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c2a:	f040 80b5 	bne.w	8005d98 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	69fa      	ldr	r2, [r7, #28]
 8005c38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c3c:	f023 0301 	bic.w	r3, r3, #1
 8005c40:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2110      	movs	r1, #16
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f008 f94d 	bl	800dee8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c4e:	2300      	movs	r3, #0
 8005c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c52:	e046      	b.n	8005ce2 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c60:	461a      	mov	r2, r3
 8005c62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c66:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c78:	0151      	lsls	r1, r2, #5
 8005c7a:	69fa      	ldr	r2, [r7, #28]
 8005c7c:	440a      	add	r2, r1
 8005c7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c86:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c94:	461a      	mov	r2, r3
 8005c96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c9a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cac:	0151      	lsls	r1, r2, #5
 8005cae:	69fa      	ldr	r2, [r7, #28]
 8005cb0:	440a      	add	r2, r1
 8005cb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ccc:	0151      	lsls	r1, r2, #5
 8005cce:	69fa      	ldr	r2, [r7, #28]
 8005cd0:	440a      	add	r2, r1
 8005cd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cda:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cde:	3301      	adds	r3, #1
 8005ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d3b3      	bcc.n	8005c54 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf2:	69db      	ldr	r3, [r3, #28]
 8005cf4:	69fa      	ldr	r2, [r7, #28]
 8005cf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cfa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005cfe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d016      	beq.n	8005d36 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d12:	69fa      	ldr	r2, [r7, #28]
 8005d14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d18:	f043 030b 	orr.w	r3, r3, #11
 8005d1c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d28:	69fa      	ldr	r2, [r7, #28]
 8005d2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d2e:	f043 030b 	orr.w	r3, r3, #11
 8005d32:	6453      	str	r3, [r2, #68]	; 0x44
 8005d34:	e015      	b.n	8005d62 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	69fa      	ldr	r2, [r7, #28]
 8005d40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005d48:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005d4c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	69fa      	ldr	r2, [r7, #28]
 8005d58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d5c:	f043 030b 	orr.w	r3, r3, #11
 8005d60:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69fa      	ldr	r2, [r7, #28]
 8005d6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d70:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d74:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005d80:	4619      	mov	r1, r3
 8005d82:	4610      	mov	r0, r2
 8005d84:	f009 f8ee 	bl	800ef64 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	695a      	ldr	r2, [r3, #20]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005d96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f009 f81d 	bl	800eddc <USB_ReadInterrupts>
 8005da2:	4603      	mov	r3, r0
 8005da4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dac:	d124      	bne.n	8005df8 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f009 f8b3 	bl	800ef1e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f008 f910 	bl	800dfe2 <USB_GetDevSpeed>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681c      	ldr	r4, [r3, #0]
 8005dce:	f001 fbcf 	bl	8007570 <HAL_RCC_GetHCLKFreq>
 8005dd2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	461a      	mov	r2, r3
 8005ddc:	4620      	mov	r0, r4
 8005dde:	f007 fe2d 	bl	800da3c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f00e f973 	bl	80140ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	695a      	ldr	r2, [r3, #20]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005df6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f008 ffed 	bl	800eddc <USB_ReadInterrupts>
 8005e02:	4603      	mov	r3, r0
 8005e04:	f003 0308 	and.w	r3, r3, #8
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	d10a      	bne.n	8005e22 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f00e f950 	bl	80140b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	695a      	ldr	r2, [r3, #20]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f002 0208 	and.w	r2, r2, #8
 8005e20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f008 ffd8 	bl	800eddc <USB_ReadInterrupts>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e32:	2b80      	cmp	r3, #128	; 0x80
 8005e34:	d122      	bne.n	8005e7c <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e3e:	6a3b      	ldr	r3, [r7, #32]
 8005e40:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e42:	2301      	movs	r3, #1
 8005e44:	627b      	str	r3, [r7, #36]	; 0x24
 8005e46:	e014      	b.n	8005e72 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005e48:	6879      	ldr	r1, [r7, #4]
 8005e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	00db      	lsls	r3, r3, #3
 8005e50:	4413      	add	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	440b      	add	r3, r1
 8005e56:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d105      	bne.n	8005e6c <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	4619      	mov	r1, r3
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 fb0b 	bl	8006482 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	3301      	adds	r3, #1
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d3e5      	bcc.n	8005e48 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f008 ffab 	bl	800eddc <USB_ReadInterrupts>
 8005e86:	4603      	mov	r3, r0
 8005e88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e90:	d13b      	bne.n	8005f0a <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e92:	2301      	movs	r3, #1
 8005e94:	627b      	str	r3, [r7, #36]	; 0x24
 8005e96:	e02b      	b.n	8005ef0 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ea8:	6879      	ldr	r1, [r7, #4]
 8005eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eac:	4613      	mov	r3, r2
 8005eae:	00db      	lsls	r3, r3, #3
 8005eb0:	4413      	add	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	440b      	add	r3, r1
 8005eb6:	3340      	adds	r3, #64	; 0x40
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d115      	bne.n	8005eea <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005ebe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	da12      	bge.n	8005eea <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005ec4:	6879      	ldr	r1, [r7, #4]
 8005ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec8:	4613      	mov	r3, r2
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	4413      	add	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	440b      	add	r3, r1
 8005ed2:	333f      	adds	r3, #63	; 0x3f
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 facc 	bl	8006482 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	3301      	adds	r3, #1
 8005eee:	627b      	str	r3, [r7, #36]	; 0x24
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d3ce      	bcc.n	8005e98 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	695a      	ldr	r2, [r3, #20]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005f08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f008 ff64 	bl	800eddc <USB_ReadInterrupts>
 8005f14:	4603      	mov	r3, r0
 8005f16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f1e:	d155      	bne.n	8005fcc <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f20:	2301      	movs	r3, #1
 8005f22:	627b      	str	r3, [r7, #36]	; 0x24
 8005f24:	e045      	b.n	8005fb2 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f36:	6879      	ldr	r1, [r7, #4]
 8005f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	00db      	lsls	r3, r3, #3
 8005f3e:	4413      	add	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	440b      	add	r3, r1
 8005f44:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d12e      	bne.n	8005fac <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005f4e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	da2b      	bge.n	8005fac <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005f60:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d121      	bne.n	8005fac <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005f68:	6879      	ldr	r1, [r7, #4]
 8005f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	00db      	lsls	r3, r3, #3
 8005f70:	4413      	add	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	440b      	add	r3, r1
 8005f76:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005f8a:	6a3b      	ldr	r3, [r7, #32]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10a      	bne.n	8005fac <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	69fa      	ldr	r2, [r7, #28]
 8005fa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fa8:	6053      	str	r3, [r2, #4]
            break;
 8005faa:	e007      	b.n	8005fbc <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	3301      	adds	r3, #1
 8005fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d3b4      	bcc.n	8005f26 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	695a      	ldr	r2, [r3, #20]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005fca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f008 ff03 	bl	800eddc <USB_ReadInterrupts>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fe0:	d10a      	bne.n	8005ff8 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f00e f904 	bl	80141f0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	695a      	ldr	r2, [r3, #20]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005ff6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f008 feed 	bl	800eddc <USB_ReadInterrupts>
 8006002:	4603      	mov	r3, r0
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b04      	cmp	r3, #4
 800600a:	d115      	bne.n	8006038 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	f003 0304 	and.w	r3, r3, #4
 800601a:	2b00      	cmp	r3, #0
 800601c:	d002      	beq.n	8006024 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f00e f8f4 	bl	801420c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6859      	ldr	r1, [r3, #4]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	430a      	orrs	r2, r1
 8006032:	605a      	str	r2, [r3, #4]
 8006034:	e000      	b.n	8006038 <HAL_PCD_IRQHandler+0x920>
      return;
 8006036:	bf00      	nop
    }
  }
}
 8006038:	3734      	adds	r7, #52	; 0x34
 800603a:	46bd      	mov	sp, r7
 800603c:	bd90      	pop	{r4, r7, pc}

0800603e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b082      	sub	sp, #8
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	460b      	mov	r3, r1
 8006048:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006050:	2b01      	cmp	r3, #1
 8006052:	d101      	bne.n	8006058 <HAL_PCD_SetAddress+0x1a>
 8006054:	2302      	movs	r3, #2
 8006056:	e013      	b.n	8006080 <HAL_PCD_SetAddress+0x42>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	78fa      	ldrb	r2, [r7, #3]
 8006064:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	78fa      	ldrb	r2, [r7, #3]
 800606e:	4611      	mov	r1, r2
 8006070:	4618      	mov	r0, r3
 8006072:	f008 fe4b 	bl	800ed0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	4608      	mov	r0, r1
 8006092:	4611      	mov	r1, r2
 8006094:	461a      	mov	r2, r3
 8006096:	4603      	mov	r3, r0
 8006098:	70fb      	strb	r3, [r7, #3]
 800609a:	460b      	mov	r3, r1
 800609c:	803b      	strh	r3, [r7, #0]
 800609e:	4613      	mov	r3, r2
 80060a0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80060a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	da0f      	bge.n	80060ce <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060ae:	78fb      	ldrb	r3, [r7, #3]
 80060b0:	f003 020f 	and.w	r2, r3, #15
 80060b4:	4613      	mov	r3, r2
 80060b6:	00db      	lsls	r3, r3, #3
 80060b8:	4413      	add	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	3338      	adds	r3, #56	; 0x38
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	4413      	add	r3, r2
 80060c2:	3304      	adds	r3, #4
 80060c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2201      	movs	r2, #1
 80060ca:	705a      	strb	r2, [r3, #1]
 80060cc:	e00f      	b.n	80060ee <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060ce:	78fb      	ldrb	r3, [r7, #3]
 80060d0:	f003 020f 	and.w	r2, r3, #15
 80060d4:	4613      	mov	r3, r2
 80060d6:	00db      	lsls	r3, r3, #3
 80060d8:	4413      	add	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	4413      	add	r3, r2
 80060e4:	3304      	adds	r3, #4
 80060e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80060ee:	78fb      	ldrb	r3, [r7, #3]
 80060f0:	f003 030f 	and.w	r3, r3, #15
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80060fa:	883a      	ldrh	r2, [r7, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	78ba      	ldrb	r2, [r7, #2]
 8006104:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	785b      	ldrb	r3, [r3, #1]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d004      	beq.n	8006118 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	b29a      	uxth	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006118:	78bb      	ldrb	r3, [r7, #2]
 800611a:	2b02      	cmp	r3, #2
 800611c:	d102      	bne.n	8006124 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800612a:	2b01      	cmp	r3, #1
 800612c:	d101      	bne.n	8006132 <HAL_PCD_EP_Open+0xaa>
 800612e:	2302      	movs	r3, #2
 8006130:	e00e      	b.n	8006150 <HAL_PCD_EP_Open+0xc8>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68f9      	ldr	r1, [r7, #12]
 8006140:	4618      	mov	r0, r3
 8006142:	f007 ff6d 	bl	800e020 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800614e:	7afb      	ldrb	r3, [r7, #11]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	460b      	mov	r3, r1
 8006162:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006164:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006168:	2b00      	cmp	r3, #0
 800616a:	da0f      	bge.n	800618c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800616c:	78fb      	ldrb	r3, [r7, #3]
 800616e:	f003 020f 	and.w	r2, r3, #15
 8006172:	4613      	mov	r3, r2
 8006174:	00db      	lsls	r3, r3, #3
 8006176:	4413      	add	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	3338      	adds	r3, #56	; 0x38
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	4413      	add	r3, r2
 8006180:	3304      	adds	r3, #4
 8006182:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2201      	movs	r2, #1
 8006188:	705a      	strb	r2, [r3, #1]
 800618a:	e00f      	b.n	80061ac <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800618c:	78fb      	ldrb	r3, [r7, #3]
 800618e:	f003 020f 	and.w	r2, r3, #15
 8006192:	4613      	mov	r3, r2
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	4413      	add	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	4413      	add	r3, r2
 80061a2:	3304      	adds	r3, #4
 80061a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80061ac:	78fb      	ldrb	r3, [r7, #3]
 80061ae:	f003 030f 	and.w	r3, r3, #15
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d101      	bne.n	80061c6 <HAL_PCD_EP_Close+0x6e>
 80061c2:	2302      	movs	r3, #2
 80061c4:	e00e      	b.n	80061e4 <HAL_PCD_EP_Close+0x8c>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68f9      	ldr	r1, [r7, #12]
 80061d4:	4618      	mov	r0, r3
 80061d6:	f007 ffab 	bl	800e130 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	607a      	str	r2, [r7, #4]
 80061f6:	603b      	str	r3, [r7, #0]
 80061f8:	460b      	mov	r3, r1
 80061fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061fc:	7afb      	ldrb	r3, [r7, #11]
 80061fe:	f003 020f 	and.w	r2, r3, #15
 8006202:	4613      	mov	r3, r2
 8006204:	00db      	lsls	r3, r3, #3
 8006206:	4413      	add	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4413      	add	r3, r2
 8006212:	3304      	adds	r3, #4
 8006214:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	683a      	ldr	r2, [r7, #0]
 8006220:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	2200      	movs	r2, #0
 8006226:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	2200      	movs	r2, #0
 800622c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800622e:	7afb      	ldrb	r3, [r7, #11]
 8006230:	f003 030f 	and.w	r3, r3, #15
 8006234:	b2da      	uxtb	r2, r3
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800623a:	7afb      	ldrb	r3, [r7, #11]
 800623c:	f003 030f 	and.w	r3, r3, #15
 8006240:	2b00      	cmp	r3, #0
 8006242:	d106      	bne.n	8006252 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6979      	ldr	r1, [r7, #20]
 800624a:	4618      	mov	r0, r3
 800624c:	f008 fa2c 	bl	800e6a8 <USB_EP0StartXfer>
 8006250:	e005      	b.n	800625e <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6979      	ldr	r1, [r7, #20]
 8006258:	4618      	mov	r0, r3
 800625a:	f008 f845 	bl	800e2e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3718      	adds	r7, #24
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	460b      	mov	r3, r1
 8006272:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006274:	78fb      	ldrb	r3, [r7, #3]
 8006276:	f003 020f 	and.w	r2, r3, #15
 800627a:	6879      	ldr	r1, [r7, #4]
 800627c:	4613      	mov	r3, r2
 800627e:	00db      	lsls	r3, r3, #3
 8006280:	4413      	add	r3, r2
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	440b      	add	r3, r1
 8006286:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800628a:	681b      	ldr	r3, [r3, #0]
}
 800628c:	4618      	mov	r0, r3
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	607a      	str	r2, [r7, #4]
 80062a2:	603b      	str	r3, [r7, #0]
 80062a4:	460b      	mov	r3, r1
 80062a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062a8:	7afb      	ldrb	r3, [r7, #11]
 80062aa:	f003 020f 	and.w	r2, r3, #15
 80062ae:	4613      	mov	r3, r2
 80062b0:	00db      	lsls	r3, r3, #3
 80062b2:	4413      	add	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	3338      	adds	r3, #56	; 0x38
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	4413      	add	r3, r2
 80062bc:	3304      	adds	r3, #4
 80062be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	683a      	ldr	r2, [r7, #0]
 80062ca:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	2200      	movs	r2, #0
 80062d0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	2201      	movs	r2, #1
 80062d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062d8:	7afb      	ldrb	r3, [r7, #11]
 80062da:	f003 030f 	and.w	r3, r3, #15
 80062de:	b2da      	uxtb	r2, r3
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80062e4:	7afb      	ldrb	r3, [r7, #11]
 80062e6:	f003 030f 	and.w	r3, r3, #15
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d106      	bne.n	80062fc <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6979      	ldr	r1, [r7, #20]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f008 f9d7 	bl	800e6a8 <USB_EP0StartXfer>
 80062fa:	e005      	b.n	8006308 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6979      	ldr	r1, [r7, #20]
 8006302:	4618      	mov	r0, r3
 8006304:	f007 fff0 	bl	800e2e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3718      	adds	r7, #24
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b084      	sub	sp, #16
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
 800631a:	460b      	mov	r3, r1
 800631c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800631e:	78fb      	ldrb	r3, [r7, #3]
 8006320:	f003 020f 	and.w	r2, r3, #15
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	429a      	cmp	r2, r3
 800632a:	d901      	bls.n	8006330 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e04e      	b.n	80063ce <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006330:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006334:	2b00      	cmp	r3, #0
 8006336:	da0f      	bge.n	8006358 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006338:	78fb      	ldrb	r3, [r7, #3]
 800633a:	f003 020f 	and.w	r2, r3, #15
 800633e:	4613      	mov	r3, r2
 8006340:	00db      	lsls	r3, r3, #3
 8006342:	4413      	add	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	3338      	adds	r3, #56	; 0x38
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	4413      	add	r3, r2
 800634c:	3304      	adds	r3, #4
 800634e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2201      	movs	r2, #1
 8006354:	705a      	strb	r2, [r3, #1]
 8006356:	e00d      	b.n	8006374 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006358:	78fa      	ldrb	r2, [r7, #3]
 800635a:	4613      	mov	r3, r2
 800635c:	00db      	lsls	r3, r3, #3
 800635e:	4413      	add	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	4413      	add	r3, r2
 800636a:	3304      	adds	r3, #4
 800636c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2201      	movs	r2, #1
 8006378:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800637a:	78fb      	ldrb	r3, [r7, #3]
 800637c:	f003 030f 	and.w	r3, r3, #15
 8006380:	b2da      	uxtb	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800638c:	2b01      	cmp	r3, #1
 800638e:	d101      	bne.n	8006394 <HAL_PCD_EP_SetStall+0x82>
 8006390:	2302      	movs	r3, #2
 8006392:	e01c      	b.n	80063ce <HAL_PCD_EP_SetStall+0xbc>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68f9      	ldr	r1, [r7, #12]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f008 fbde 	bl	800eb64 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80063a8:	78fb      	ldrb	r3, [r7, #3]
 80063aa:	f003 030f 	and.w	r3, r3, #15
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d108      	bne.n	80063c4 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80063bc:	4619      	mov	r1, r3
 80063be:	4610      	mov	r0, r2
 80063c0:	f008 fdd0 	bl	800ef64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b084      	sub	sp, #16
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	460b      	mov	r3, r1
 80063e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80063e2:	78fb      	ldrb	r3, [r7, #3]
 80063e4:	f003 020f 	and.w	r2, r3, #15
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d901      	bls.n	80063f4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e042      	b.n	800647a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80063f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	da0f      	bge.n	800641c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063fc:	78fb      	ldrb	r3, [r7, #3]
 80063fe:	f003 020f 	and.w	r2, r3, #15
 8006402:	4613      	mov	r3, r2
 8006404:	00db      	lsls	r3, r3, #3
 8006406:	4413      	add	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	3338      	adds	r3, #56	; 0x38
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	4413      	add	r3, r2
 8006410:	3304      	adds	r3, #4
 8006412:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2201      	movs	r2, #1
 8006418:	705a      	strb	r2, [r3, #1]
 800641a:	e00f      	b.n	800643c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800641c:	78fb      	ldrb	r3, [r7, #3]
 800641e:	f003 020f 	and.w	r2, r3, #15
 8006422:	4613      	mov	r3, r2
 8006424:	00db      	lsls	r3, r3, #3
 8006426:	4413      	add	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	4413      	add	r3, r2
 8006432:	3304      	adds	r3, #4
 8006434:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006442:	78fb      	ldrb	r3, [r7, #3]
 8006444:	f003 030f 	and.w	r3, r3, #15
 8006448:	b2da      	uxtb	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006454:	2b01      	cmp	r3, #1
 8006456:	d101      	bne.n	800645c <HAL_PCD_EP_ClrStall+0x86>
 8006458:	2302      	movs	r3, #2
 800645a:	e00e      	b.n	800647a <HAL_PCD_EP_ClrStall+0xa4>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68f9      	ldr	r1, [r7, #12]
 800646a:	4618      	mov	r0, r3
 800646c:	f008 fbe8 	bl	800ec40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b084      	sub	sp, #16
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
 800648a:	460b      	mov	r3, r1
 800648c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800648e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006492:	2b00      	cmp	r3, #0
 8006494:	da0c      	bge.n	80064b0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006496:	78fb      	ldrb	r3, [r7, #3]
 8006498:	f003 020f 	and.w	r2, r3, #15
 800649c:	4613      	mov	r3, r2
 800649e:	00db      	lsls	r3, r3, #3
 80064a0:	4413      	add	r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	3338      	adds	r3, #56	; 0x38
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	4413      	add	r3, r2
 80064aa:	3304      	adds	r3, #4
 80064ac:	60fb      	str	r3, [r7, #12]
 80064ae:	e00c      	b.n	80064ca <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064b0:	78fb      	ldrb	r3, [r7, #3]
 80064b2:	f003 020f 	and.w	r2, r3, #15
 80064b6:	4613      	mov	r3, r2
 80064b8:	00db      	lsls	r3, r3, #3
 80064ba:	4413      	add	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	4413      	add	r3, r2
 80064c6:	3304      	adds	r3, #4
 80064c8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68f9      	ldr	r1, [r7, #12]
 80064d0:	4618      	mov	r0, r3
 80064d2:	f008 fa0b 	bl	800e8ec <USB_EPStopXfer>
 80064d6:	4603      	mov	r3, r0
 80064d8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80064da:	7afb      	ldrb	r3, [r7, #11]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3710      	adds	r7, #16
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b088      	sub	sp, #32
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80064f8:	683a      	ldr	r2, [r7, #0]
 80064fa:	4613      	mov	r3, r2
 80064fc:	00db      	lsls	r3, r3, #3
 80064fe:	4413      	add	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	3338      	adds	r3, #56	; 0x38
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	4413      	add	r3, r2
 8006508:	3304      	adds	r3, #4
 800650a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6a1a      	ldr	r2, [r3, #32]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	429a      	cmp	r2, r3
 8006516:	d901      	bls.n	800651c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e067      	b.n	80065ec <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	699a      	ldr	r2, [r3, #24]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	69fa      	ldr	r2, [r7, #28]
 800652e:	429a      	cmp	r2, r3
 8006530:	d902      	bls.n	8006538 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	3303      	adds	r3, #3
 800653c:	089b      	lsrs	r3, r3, #2
 800653e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006540:	e026      	b.n	8006590 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	699a      	ldr	r2, [r3, #24]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	69fa      	ldr	r2, [r7, #28]
 8006554:	429a      	cmp	r2, r3
 8006556:	d902      	bls.n	800655e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	3303      	adds	r3, #3
 8006562:	089b      	lsrs	r3, r3, #2
 8006564:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6919      	ldr	r1, [r3, #16]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	b2da      	uxtb	r2, r3
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	b29b      	uxth	r3, r3
 8006572:	6978      	ldr	r0, [r7, #20]
 8006574:	f008 fa64 	bl	800ea40 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	691a      	ldr	r2, [r3, #16]
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	441a      	add	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6a1a      	ldr	r2, [r3, #32]
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	441a      	add	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	015a      	lsls	r2, r3, #5
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	4413      	add	r3, r2
 8006598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	b29b      	uxth	r3, r3
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d809      	bhi.n	80065ba <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6a1a      	ldr	r2, [r3, #32]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d203      	bcs.n	80065ba <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1c3      	bne.n	8006542 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	699a      	ldr	r2, [r3, #24]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d811      	bhi.n	80065ea <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	f003 030f 	and.w	r3, r3, #15
 80065cc:	2201      	movs	r2, #1
 80065ce:	fa02 f303 	lsl.w	r3, r2, r3
 80065d2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	43db      	mvns	r3, r3
 80065e0:	6939      	ldr	r1, [r7, #16]
 80065e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065e6:	4013      	ands	r3, r2
 80065e8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3720      	adds	r7, #32
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	333c      	adds	r3, #60	; 0x3c
 800660c:	3304      	adds	r3, #4
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	015a      	lsls	r2, r3, #5
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	4413      	add	r3, r2
 800661a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	4a19      	ldr	r2, [pc, #100]	; (800668c <PCD_EP_OutXfrComplete_int+0x98>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d124      	bne.n	8006674 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00a      	beq.n	800664a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	4413      	add	r3, r2
 800663c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006640:	461a      	mov	r2, r3
 8006642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006646:	6093      	str	r3, [r2, #8]
 8006648:	e01a      	b.n	8006680 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	f003 0320 	and.w	r3, r3, #32
 8006650:	2b00      	cmp	r3, #0
 8006652:	d008      	beq.n	8006666 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	015a      	lsls	r2, r3, #5
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	4413      	add	r3, r2
 800665c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006660:	461a      	mov	r2, r3
 8006662:	2320      	movs	r3, #32
 8006664:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	b2db      	uxtb	r3, r3
 800666a:	4619      	mov	r1, r3
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f00d fceb 	bl	8014048 <HAL_PCD_DataOutStageCallback>
 8006672:	e005      	b.n	8006680 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	b2db      	uxtb	r3, r3
 8006678:	4619      	mov	r1, r3
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f00d fce4 	bl	8014048 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3718      	adds	r7, #24
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	4f54310a 	.word	0x4f54310a

08006690 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	333c      	adds	r3, #60	; 0x3c
 80066a8:	3304      	adds	r3, #4
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	015a      	lsls	r2, r3, #5
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	4413      	add	r3, r2
 80066b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	4a0c      	ldr	r2, [pc, #48]	; (80066f4 <PCD_EP_OutSetupPacket_int+0x64>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d90e      	bls.n	80066e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d009      	beq.n	80066e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	015a      	lsls	r2, r3, #5
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	4413      	add	r3, r2
 80066d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066dc:	461a      	mov	r2, r3
 80066de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f00d fc9d 	bl	8014024 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3718      	adds	r7, #24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	4f54300a 	.word	0x4f54300a

080066f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	460b      	mov	r3, r1
 8006702:	70fb      	strb	r3, [r7, #3]
 8006704:	4613      	mov	r3, r2
 8006706:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006710:	78fb      	ldrb	r3, [r7, #3]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d107      	bne.n	8006726 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006716:	883b      	ldrh	r3, [r7, #0]
 8006718:	0419      	lsls	r1, r3, #16
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	430a      	orrs	r2, r1
 8006722:	629a      	str	r2, [r3, #40]	; 0x28
 8006724:	e028      	b.n	8006778 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672c:	0c1b      	lsrs	r3, r3, #16
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	4413      	add	r3, r2
 8006732:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006734:	2300      	movs	r3, #0
 8006736:	73fb      	strb	r3, [r7, #15]
 8006738:	e00d      	b.n	8006756 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	7bfb      	ldrb	r3, [r7, #15]
 8006740:	3340      	adds	r3, #64	; 0x40
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4413      	add	r3, r2
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	0c1b      	lsrs	r3, r3, #16
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	4413      	add	r3, r2
 800674e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006750:	7bfb      	ldrb	r3, [r7, #15]
 8006752:	3301      	adds	r3, #1
 8006754:	73fb      	strb	r3, [r7, #15]
 8006756:	7bfa      	ldrb	r2, [r7, #15]
 8006758:	78fb      	ldrb	r3, [r7, #3]
 800675a:	3b01      	subs	r3, #1
 800675c:	429a      	cmp	r2, r3
 800675e:	d3ec      	bcc.n	800673a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006760:	883b      	ldrh	r3, [r7, #0]
 8006762:	0418      	lsls	r0, r3, #16
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6819      	ldr	r1, [r3, #0]
 8006768:	78fb      	ldrb	r3, [r7, #3]
 800676a:	3b01      	subs	r3, #1
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	4302      	orrs	r2, r0
 8006770:	3340      	adds	r3, #64	; 0x40
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	440b      	add	r3, r1
 8006776:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3714      	adds	r7, #20
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	460b      	mov	r3, r1
 8006790:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	887a      	ldrh	r2, [r7, #2]
 8006798:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067da:	f043 0303 	orr.w	r3, r3, #3
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3714      	adds	r7, #20
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	460b      	mov	r3, r1
 80067fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006808:	b480      	push	{r7}
 800680a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800680c:	4b0d      	ldr	r3, [pc, #52]	; (8006844 <HAL_PWREx_GetVoltageRange+0x3c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006818:	d102      	bne.n	8006820 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800681a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800681e:	e00b      	b.n	8006838 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8006820:	4b08      	ldr	r3, [pc, #32]	; (8006844 <HAL_PWREx_GetVoltageRange+0x3c>)
 8006822:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800682a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800682e:	d102      	bne.n	8006836 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8006830:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006834:	e000      	b.n	8006838 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8006836:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8006838:	4618      	mov	r0, r3
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	40007000 	.word	0x40007000

08006848 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d141      	bne.n	80068da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006856:	4b4b      	ldr	r3, [pc, #300]	; (8006984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800685e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006862:	d131      	bne.n	80068c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006864:	4b47      	ldr	r3, [pc, #284]	; (8006984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800686a:	4a46      	ldr	r2, [pc, #280]	; (8006984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800686c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006874:	4b43      	ldr	r3, [pc, #268]	; (8006984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800687c:	4a41      	ldr	r2, [pc, #260]	; (8006984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800687e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006882:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006884:	4b40      	ldr	r3, [pc, #256]	; (8006988 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2232      	movs	r2, #50	; 0x32
 800688a:	fb02 f303 	mul.w	r3, r2, r3
 800688e:	4a3f      	ldr	r2, [pc, #252]	; (800698c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006890:	fba2 2303 	umull	r2, r3, r2, r3
 8006894:	0c9b      	lsrs	r3, r3, #18
 8006896:	3301      	adds	r3, #1
 8006898:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800689a:	e002      	b.n	80068a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	3b01      	subs	r3, #1
 80068a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068a2:	4b38      	ldr	r3, [pc, #224]	; (8006984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068ae:	d102      	bne.n	80068b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1f2      	bne.n	800689c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80068b6:	4b33      	ldr	r3, [pc, #204]	; (8006984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068c2:	d158      	bne.n	8006976 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e057      	b.n	8006978 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80068c8:	4b2e      	ldr	r3, [pc, #184]	; (8006984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068ce:	4a2d      	ldr	r2, [pc, #180]	; (8006984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80068d8:	e04d      	b.n	8006976 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068e0:	d141      	bne.n	8006966 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80068e2:	4b28      	ldr	r3, [pc, #160]	; (8006984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80068ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068ee:	d131      	bne.n	8006954 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80068f0:	4b24      	ldr	r3, [pc, #144]	; (8006984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068f6:	4a23      	ldr	r2, [pc, #140]	; (8006984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006900:	4b20      	ldr	r3, [pc, #128]	; (8006984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006908:	4a1e      	ldr	r2, [pc, #120]	; (8006984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800690a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800690e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006910:	4b1d      	ldr	r3, [pc, #116]	; (8006988 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2232      	movs	r2, #50	; 0x32
 8006916:	fb02 f303 	mul.w	r3, r2, r3
 800691a:	4a1c      	ldr	r2, [pc, #112]	; (800698c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800691c:	fba2 2303 	umull	r2, r3, r2, r3
 8006920:	0c9b      	lsrs	r3, r3, #18
 8006922:	3301      	adds	r3, #1
 8006924:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006926:	e002      	b.n	800692e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	3b01      	subs	r3, #1
 800692c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800692e:	4b15      	ldr	r3, [pc, #84]	; (8006984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800693a:	d102      	bne.n	8006942 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1f2      	bne.n	8006928 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006942:	4b10      	ldr	r3, [pc, #64]	; (8006984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800694a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800694e:	d112      	bne.n	8006976 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e011      	b.n	8006978 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006954:	4b0b      	ldr	r3, [pc, #44]	; (8006984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800695a:	4a0a      	ldr	r2, [pc, #40]	; (8006984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800695c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006960:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006964:	e007      	b.n	8006976 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006966:	4b07      	ldr	r3, [pc, #28]	; (8006984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800696e:	4a05      	ldr	r2, [pc, #20]	; (8006984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006970:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006974:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr
 8006984:	40007000 	.word	0x40007000
 8006988:	20000004 	.word	0x20000004
 800698c:	431bde83 	.word	0x431bde83

08006990 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006990:	b480      	push	{r7}
 8006992:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006994:	4b05      	ldr	r3, [pc, #20]	; (80069ac <HAL_PWREx_EnableVddUSB+0x1c>)
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	4a04      	ldr	r2, [pc, #16]	; (80069ac <HAL_PWREx_EnableVddUSB+0x1c>)
 800699a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800699e:	6053      	str	r3, [r2, #4]
}
 80069a0:	bf00      	nop
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	40007000 	.word	0x40007000

080069b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b088      	sub	sp, #32
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d102      	bne.n	80069c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	f000 bc08 	b.w	80071d4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069c4:	4b96      	ldr	r3, [pc, #600]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	f003 030c 	and.w	r3, r3, #12
 80069cc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069ce:	4b94      	ldr	r3, [pc, #592]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	f003 0303 	and.w	r3, r3, #3
 80069d6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0310 	and.w	r3, r3, #16
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f000 80e4 	beq.w	8006bae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d007      	beq.n	80069fc <HAL_RCC_OscConfig+0x4c>
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	2b0c      	cmp	r3, #12
 80069f0:	f040 808b 	bne.w	8006b0a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	f040 8087 	bne.w	8006b0a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80069fc:	4b88      	ldr	r3, [pc, #544]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d005      	beq.n	8006a14 <HAL_RCC_OscConfig+0x64>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e3df      	b.n	80071d4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a1a      	ldr	r2, [r3, #32]
 8006a18:	4b81      	ldr	r3, [pc, #516]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0308 	and.w	r3, r3, #8
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d004      	beq.n	8006a2e <HAL_RCC_OscConfig+0x7e>
 8006a24:	4b7e      	ldr	r3, [pc, #504]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a2c:	e005      	b.n	8006a3a <HAL_RCC_OscConfig+0x8a>
 8006a2e:	4b7c      	ldr	r3, [pc, #496]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a34:	091b      	lsrs	r3, r3, #4
 8006a36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d223      	bcs.n	8006a86 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 fdf8 	bl	8007638 <RCC_SetFlashLatencyFromMSIRange>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e3c0      	b.n	80071d4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a52:	4b73      	ldr	r3, [pc, #460]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a72      	ldr	r2, [pc, #456]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006a58:	f043 0308 	orr.w	r3, r3, #8
 8006a5c:	6013      	str	r3, [r2, #0]
 8006a5e:	4b70      	ldr	r3, [pc, #448]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	496d      	ldr	r1, [pc, #436]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a70:	4b6b      	ldr	r3, [pc, #428]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	021b      	lsls	r3, r3, #8
 8006a7e:	4968      	ldr	r1, [pc, #416]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	604b      	str	r3, [r1, #4]
 8006a84:	e025      	b.n	8006ad2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a86:	4b66      	ldr	r3, [pc, #408]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a65      	ldr	r2, [pc, #404]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006a8c:	f043 0308 	orr.w	r3, r3, #8
 8006a90:	6013      	str	r3, [r2, #0]
 8006a92:	4b63      	ldr	r3, [pc, #396]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	4960      	ldr	r1, [pc, #384]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006aa4:	4b5e      	ldr	r3, [pc, #376]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	021b      	lsls	r3, r3, #8
 8006ab2:	495b      	ldr	r1, [pc, #364]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d109      	bne.n	8006ad2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f000 fdb8 	bl	8007638 <RCC_SetFlashLatencyFromMSIRange>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e380      	b.n	80071d4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006ad2:	f000 fcc1 	bl	8007458 <HAL_RCC_GetSysClockFreq>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	4b51      	ldr	r3, [pc, #324]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	091b      	lsrs	r3, r3, #4
 8006ade:	f003 030f 	and.w	r3, r3, #15
 8006ae2:	4950      	ldr	r1, [pc, #320]	; (8006c24 <HAL_RCC_OscConfig+0x274>)
 8006ae4:	5ccb      	ldrb	r3, [r1, r3]
 8006ae6:	f003 031f 	and.w	r3, r3, #31
 8006aea:	fa22 f303 	lsr.w	r3, r2, r3
 8006aee:	4a4e      	ldr	r2, [pc, #312]	; (8006c28 <HAL_RCC_OscConfig+0x278>)
 8006af0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006af2:	4b4e      	ldr	r3, [pc, #312]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fd fa02 	bl	8003f00 <HAL_InitTick>
 8006afc:	4603      	mov	r3, r0
 8006afe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d052      	beq.n	8006bac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
 8006b08:	e364      	b.n	80071d4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d032      	beq.n	8006b78 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006b12:	4b43      	ldr	r3, [pc, #268]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a42      	ldr	r2, [pc, #264]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006b18:	f043 0301 	orr.w	r3, r3, #1
 8006b1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006b1e:	f7fd fa3f 	bl	8003fa0 <HAL_GetTick>
 8006b22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006b24:	e008      	b.n	8006b38 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006b26:	f7fd fa3b 	bl	8003fa0 <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d901      	bls.n	8006b38 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e34d      	b.n	80071d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006b38:	4b39      	ldr	r3, [pc, #228]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0302 	and.w	r3, r3, #2
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d0f0      	beq.n	8006b26 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b44:	4b36      	ldr	r3, [pc, #216]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a35      	ldr	r2, [pc, #212]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006b4a:	f043 0308 	orr.w	r3, r3, #8
 8006b4e:	6013      	str	r3, [r2, #0]
 8006b50:	4b33      	ldr	r3, [pc, #204]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	4930      	ldr	r1, [pc, #192]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b62:	4b2f      	ldr	r3, [pc, #188]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	021b      	lsls	r3, r3, #8
 8006b70:	492b      	ldr	r1, [pc, #172]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	604b      	str	r3, [r1, #4]
 8006b76:	e01a      	b.n	8006bae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006b78:	4b29      	ldr	r3, [pc, #164]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a28      	ldr	r2, [pc, #160]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006b7e:	f023 0301 	bic.w	r3, r3, #1
 8006b82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006b84:	f7fd fa0c 	bl	8003fa0 <HAL_GetTick>
 8006b88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006b8a:	e008      	b.n	8006b9e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006b8c:	f7fd fa08 	bl	8003fa0 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d901      	bls.n	8006b9e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e31a      	b.n	80071d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006b9e:	4b20      	ldr	r3, [pc, #128]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1f0      	bne.n	8006b8c <HAL_RCC_OscConfig+0x1dc>
 8006baa:	e000      	b.n	8006bae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006bac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0301 	and.w	r3, r3, #1
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d073      	beq.n	8006ca2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	2b08      	cmp	r3, #8
 8006bbe:	d005      	beq.n	8006bcc <HAL_RCC_OscConfig+0x21c>
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	2b0c      	cmp	r3, #12
 8006bc4:	d10e      	bne.n	8006be4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	2b03      	cmp	r3, #3
 8006bca:	d10b      	bne.n	8006be4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bcc:	4b14      	ldr	r3, [pc, #80]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d063      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x2f0>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d15f      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e2f7      	b.n	80071d4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bec:	d106      	bne.n	8006bfc <HAL_RCC_OscConfig+0x24c>
 8006bee:	4b0c      	ldr	r3, [pc, #48]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a0b      	ldr	r2, [pc, #44]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bf8:	6013      	str	r3, [r2, #0]
 8006bfa:	e025      	b.n	8006c48 <HAL_RCC_OscConfig+0x298>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c04:	d114      	bne.n	8006c30 <HAL_RCC_OscConfig+0x280>
 8006c06:	4b06      	ldr	r3, [pc, #24]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a05      	ldr	r2, [pc, #20]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c10:	6013      	str	r3, [r2, #0]
 8006c12:	4b03      	ldr	r3, [pc, #12]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a02      	ldr	r2, [pc, #8]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c1c:	6013      	str	r3, [r2, #0]
 8006c1e:	e013      	b.n	8006c48 <HAL_RCC_OscConfig+0x298>
 8006c20:	40021000 	.word	0x40021000
 8006c24:	080178d8 	.word	0x080178d8
 8006c28:	20000004 	.word	0x20000004
 8006c2c:	20000008 	.word	0x20000008
 8006c30:	4ba0      	ldr	r3, [pc, #640]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a9f      	ldr	r2, [pc, #636]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c3a:	6013      	str	r3, [r2, #0]
 8006c3c:	4b9d      	ldr	r3, [pc, #628]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a9c      	ldr	r2, [pc, #624]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d013      	beq.n	8006c78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c50:	f7fd f9a6 	bl	8003fa0 <HAL_GetTick>
 8006c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c56:	e008      	b.n	8006c6a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c58:	f7fd f9a2 	bl	8003fa0 <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	2b64      	cmp	r3, #100	; 0x64
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e2b4      	b.n	80071d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c6a:	4b92      	ldr	r3, [pc, #584]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d0f0      	beq.n	8006c58 <HAL_RCC_OscConfig+0x2a8>
 8006c76:	e014      	b.n	8006ca2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c78:	f7fd f992 	bl	8003fa0 <HAL_GetTick>
 8006c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c7e:	e008      	b.n	8006c92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c80:	f7fd f98e 	bl	8003fa0 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	2b64      	cmp	r3, #100	; 0x64
 8006c8c:	d901      	bls.n	8006c92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e2a0      	b.n	80071d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c92:	4b88      	ldr	r3, [pc, #544]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1f0      	bne.n	8006c80 <HAL_RCC_OscConfig+0x2d0>
 8006c9e:	e000      	b.n	8006ca2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d060      	beq.n	8006d70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	2b04      	cmp	r3, #4
 8006cb2:	d005      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x310>
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	2b0c      	cmp	r3, #12
 8006cb8:	d119      	bne.n	8006cee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d116      	bne.n	8006cee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cc0:	4b7c      	ldr	r3, [pc, #496]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d005      	beq.n	8006cd8 <HAL_RCC_OscConfig+0x328>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d101      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e27d      	b.n	80071d4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cd8:	4b76      	ldr	r3, [pc, #472]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	061b      	lsls	r3, r3, #24
 8006ce6:	4973      	ldr	r1, [pc, #460]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cec:	e040      	b.n	8006d70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d023      	beq.n	8006d3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cf6:	4b6f      	ldr	r3, [pc, #444]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a6e      	ldr	r2, [pc, #440]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d02:	f7fd f94d 	bl	8003fa0 <HAL_GetTick>
 8006d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d08:	e008      	b.n	8006d1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d0a:	f7fd f949 	bl	8003fa0 <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d901      	bls.n	8006d1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e25b      	b.n	80071d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d1c:	4b65      	ldr	r3, [pc, #404]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d0f0      	beq.n	8006d0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d28:	4b62      	ldr	r3, [pc, #392]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	061b      	lsls	r3, r3, #24
 8006d36:	495f      	ldr	r1, [pc, #380]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	604b      	str	r3, [r1, #4]
 8006d3c:	e018      	b.n	8006d70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d3e:	4b5d      	ldr	r3, [pc, #372]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a5c      	ldr	r2, [pc, #368]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d4a:	f7fd f929 	bl	8003fa0 <HAL_GetTick>
 8006d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d50:	e008      	b.n	8006d64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d52:	f7fd f925 	bl	8003fa0 <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d901      	bls.n	8006d64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e237      	b.n	80071d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d64:	4b53      	ldr	r3, [pc, #332]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1f0      	bne.n	8006d52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0308 	and.w	r3, r3, #8
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d03c      	beq.n	8006df6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	695b      	ldr	r3, [r3, #20]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d01c      	beq.n	8006dbe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d84:	4b4b      	ldr	r3, [pc, #300]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d8a:	4a4a      	ldr	r2, [pc, #296]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006d8c:	f043 0301 	orr.w	r3, r3, #1
 8006d90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d94:	f7fd f904 	bl	8003fa0 <HAL_GetTick>
 8006d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d9a:	e008      	b.n	8006dae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d9c:	f7fd f900 	bl	8003fa0 <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d901      	bls.n	8006dae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e212      	b.n	80071d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006dae:	4b41      	ldr	r3, [pc, #260]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006db4:	f003 0302 	and.w	r3, r3, #2
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d0ef      	beq.n	8006d9c <HAL_RCC_OscConfig+0x3ec>
 8006dbc:	e01b      	b.n	8006df6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006dbe:	4b3d      	ldr	r3, [pc, #244]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dc4:	4a3b      	ldr	r2, [pc, #236]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006dc6:	f023 0301 	bic.w	r3, r3, #1
 8006dca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dce:	f7fd f8e7 	bl	8003fa0 <HAL_GetTick>
 8006dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006dd4:	e008      	b.n	8006de8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006dd6:	f7fd f8e3 	bl	8003fa0 <HAL_GetTick>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d901      	bls.n	8006de8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e1f5      	b.n	80071d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006de8:	4b32      	ldr	r3, [pc, #200]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dee:	f003 0302 	and.w	r3, r3, #2
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1ef      	bne.n	8006dd6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0304 	and.w	r3, r3, #4
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f000 80a6 	beq.w	8006f50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e04:	2300      	movs	r3, #0
 8006e06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006e08:	4b2a      	ldr	r3, [pc, #168]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d10d      	bne.n	8006e30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e14:	4b27      	ldr	r3, [pc, #156]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e18:	4a26      	ldr	r2, [pc, #152]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e1e:	6593      	str	r3, [r2, #88]	; 0x58
 8006e20:	4b24      	ldr	r3, [pc, #144]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e28:	60bb      	str	r3, [r7, #8]
 8006e2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e30:	4b21      	ldr	r3, [pc, #132]	; (8006eb8 <HAL_RCC_OscConfig+0x508>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d118      	bne.n	8006e6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e3c:	4b1e      	ldr	r3, [pc, #120]	; (8006eb8 <HAL_RCC_OscConfig+0x508>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a1d      	ldr	r2, [pc, #116]	; (8006eb8 <HAL_RCC_OscConfig+0x508>)
 8006e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e48:	f7fd f8aa 	bl	8003fa0 <HAL_GetTick>
 8006e4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e4e:	e008      	b.n	8006e62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e50:	f7fd f8a6 	bl	8003fa0 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d901      	bls.n	8006e62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e1b8      	b.n	80071d4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e62:	4b15      	ldr	r3, [pc, #84]	; (8006eb8 <HAL_RCC_OscConfig+0x508>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d0f0      	beq.n	8006e50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d108      	bne.n	8006e88 <HAL_RCC_OscConfig+0x4d8>
 8006e76:	4b0f      	ldr	r3, [pc, #60]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e7c:	4a0d      	ldr	r2, [pc, #52]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006e7e:	f043 0301 	orr.w	r3, r3, #1
 8006e82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006e86:	e029      	b.n	8006edc <HAL_RCC_OscConfig+0x52c>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	2b05      	cmp	r3, #5
 8006e8e:	d115      	bne.n	8006ebc <HAL_RCC_OscConfig+0x50c>
 8006e90:	4b08      	ldr	r3, [pc, #32]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e96:	4a07      	ldr	r2, [pc, #28]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006e98:	f043 0304 	orr.w	r3, r3, #4
 8006e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ea0:	4b04      	ldr	r3, [pc, #16]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ea6:	4a03      	ldr	r2, [pc, #12]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006ea8:	f043 0301 	orr.w	r3, r3, #1
 8006eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006eb0:	e014      	b.n	8006edc <HAL_RCC_OscConfig+0x52c>
 8006eb2:	bf00      	nop
 8006eb4:	40021000 	.word	0x40021000
 8006eb8:	40007000 	.word	0x40007000
 8006ebc:	4b9d      	ldr	r3, [pc, #628]	; (8007134 <HAL_RCC_OscConfig+0x784>)
 8006ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ec2:	4a9c      	ldr	r2, [pc, #624]	; (8007134 <HAL_RCC_OscConfig+0x784>)
 8006ec4:	f023 0301 	bic.w	r3, r3, #1
 8006ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ecc:	4b99      	ldr	r3, [pc, #612]	; (8007134 <HAL_RCC_OscConfig+0x784>)
 8006ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ed2:	4a98      	ldr	r2, [pc, #608]	; (8007134 <HAL_RCC_OscConfig+0x784>)
 8006ed4:	f023 0304 	bic.w	r3, r3, #4
 8006ed8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d016      	beq.n	8006f12 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ee4:	f7fd f85c 	bl	8003fa0 <HAL_GetTick>
 8006ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006eea:	e00a      	b.n	8006f02 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eec:	f7fd f858 	bl	8003fa0 <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d901      	bls.n	8006f02 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e168      	b.n	80071d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f02:	4b8c      	ldr	r3, [pc, #560]	; (8007134 <HAL_RCC_OscConfig+0x784>)
 8006f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f08:	f003 0302 	and.w	r3, r3, #2
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d0ed      	beq.n	8006eec <HAL_RCC_OscConfig+0x53c>
 8006f10:	e015      	b.n	8006f3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f12:	f7fd f845 	bl	8003fa0 <HAL_GetTick>
 8006f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006f18:	e00a      	b.n	8006f30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f1a:	f7fd f841 	bl	8003fa0 <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d901      	bls.n	8006f30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e151      	b.n	80071d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006f30:	4b80      	ldr	r3, [pc, #512]	; (8007134 <HAL_RCC_OscConfig+0x784>)
 8006f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1ed      	bne.n	8006f1a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f3e:	7ffb      	ldrb	r3, [r7, #31]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d105      	bne.n	8006f50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f44:	4b7b      	ldr	r3, [pc, #492]	; (8007134 <HAL_RCC_OscConfig+0x784>)
 8006f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f48:	4a7a      	ldr	r2, [pc, #488]	; (8007134 <HAL_RCC_OscConfig+0x784>)
 8006f4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f4e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0320 	and.w	r3, r3, #32
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d03c      	beq.n	8006fd6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d01c      	beq.n	8006f9e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f64:	4b73      	ldr	r3, [pc, #460]	; (8007134 <HAL_RCC_OscConfig+0x784>)
 8006f66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f6a:	4a72      	ldr	r2, [pc, #456]	; (8007134 <HAL_RCC_OscConfig+0x784>)
 8006f6c:	f043 0301 	orr.w	r3, r3, #1
 8006f70:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f74:	f7fd f814 	bl	8003fa0 <HAL_GetTick>
 8006f78:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006f7a:	e008      	b.n	8006f8e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f7c:	f7fd f810 	bl	8003fa0 <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d901      	bls.n	8006f8e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e122      	b.n	80071d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006f8e:	4b69      	ldr	r3, [pc, #420]	; (8007134 <HAL_RCC_OscConfig+0x784>)
 8006f90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f94:	f003 0302 	and.w	r3, r3, #2
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d0ef      	beq.n	8006f7c <HAL_RCC_OscConfig+0x5cc>
 8006f9c:	e01b      	b.n	8006fd6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f9e:	4b65      	ldr	r3, [pc, #404]	; (8007134 <HAL_RCC_OscConfig+0x784>)
 8006fa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006fa4:	4a63      	ldr	r2, [pc, #396]	; (8007134 <HAL_RCC_OscConfig+0x784>)
 8006fa6:	f023 0301 	bic.w	r3, r3, #1
 8006faa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fae:	f7fc fff7 	bl	8003fa0 <HAL_GetTick>
 8006fb2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006fb4:	e008      	b.n	8006fc8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006fb6:	f7fc fff3 	bl	8003fa0 <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d901      	bls.n	8006fc8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e105      	b.n	80071d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006fc8:	4b5a      	ldr	r3, [pc, #360]	; (8007134 <HAL_RCC_OscConfig+0x784>)
 8006fca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006fce:	f003 0302 	and.w	r3, r3, #2
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1ef      	bne.n	8006fb6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f000 80f9 	beq.w	80071d2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	f040 80cf 	bne.w	8007188 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006fea:	4b52      	ldr	r3, [pc, #328]	; (8007134 <HAL_RCC_OscConfig+0x784>)
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	f003 0203 	and.w	r2, r3, #3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d12c      	bne.n	8007058 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007008:	3b01      	subs	r3, #1
 800700a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800700c:	429a      	cmp	r2, r3
 800700e:	d123      	bne.n	8007058 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800701a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800701c:	429a      	cmp	r2, r3
 800701e:	d11b      	bne.n	8007058 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800702c:	429a      	cmp	r2, r3
 800702e:	d113      	bne.n	8007058 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800703a:	085b      	lsrs	r3, r3, #1
 800703c:	3b01      	subs	r3, #1
 800703e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007040:	429a      	cmp	r2, r3
 8007042:	d109      	bne.n	8007058 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704e:	085b      	lsrs	r3, r3, #1
 8007050:	3b01      	subs	r3, #1
 8007052:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007054:	429a      	cmp	r2, r3
 8007056:	d071      	beq.n	800713c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	2b0c      	cmp	r3, #12
 800705c:	d068      	beq.n	8007130 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800705e:	4b35      	ldr	r3, [pc, #212]	; (8007134 <HAL_RCC_OscConfig+0x784>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d105      	bne.n	8007076 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800706a:	4b32      	ldr	r3, [pc, #200]	; (8007134 <HAL_RCC_OscConfig+0x784>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e0ac      	b.n	80071d4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800707a:	4b2e      	ldr	r3, [pc, #184]	; (8007134 <HAL_RCC_OscConfig+0x784>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a2d      	ldr	r2, [pc, #180]	; (8007134 <HAL_RCC_OscConfig+0x784>)
 8007080:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007084:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007086:	f7fc ff8b 	bl	8003fa0 <HAL_GetTick>
 800708a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800708c:	e008      	b.n	80070a0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800708e:	f7fc ff87 	bl	8003fa0 <HAL_GetTick>
 8007092:	4602      	mov	r2, r0
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	1ad3      	subs	r3, r2, r3
 8007098:	2b02      	cmp	r3, #2
 800709a:	d901      	bls.n	80070a0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	e099      	b.n	80071d4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070a0:	4b24      	ldr	r3, [pc, #144]	; (8007134 <HAL_RCC_OscConfig+0x784>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1f0      	bne.n	800708e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070ac:	4b21      	ldr	r3, [pc, #132]	; (8007134 <HAL_RCC_OscConfig+0x784>)
 80070ae:	68da      	ldr	r2, [r3, #12]
 80070b0:	4b21      	ldr	r3, [pc, #132]	; (8007138 <HAL_RCC_OscConfig+0x788>)
 80070b2:	4013      	ands	r3, r2
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80070bc:	3a01      	subs	r2, #1
 80070be:	0112      	lsls	r2, r2, #4
 80070c0:	4311      	orrs	r1, r2
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80070c6:	0212      	lsls	r2, r2, #8
 80070c8:	4311      	orrs	r1, r2
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80070ce:	0852      	lsrs	r2, r2, #1
 80070d0:	3a01      	subs	r2, #1
 80070d2:	0552      	lsls	r2, r2, #21
 80070d4:	4311      	orrs	r1, r2
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80070da:	0852      	lsrs	r2, r2, #1
 80070dc:	3a01      	subs	r2, #1
 80070de:	0652      	lsls	r2, r2, #25
 80070e0:	4311      	orrs	r1, r2
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070e6:	06d2      	lsls	r2, r2, #27
 80070e8:	430a      	orrs	r2, r1
 80070ea:	4912      	ldr	r1, [pc, #72]	; (8007134 <HAL_RCC_OscConfig+0x784>)
 80070ec:	4313      	orrs	r3, r2
 80070ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80070f0:	4b10      	ldr	r3, [pc, #64]	; (8007134 <HAL_RCC_OscConfig+0x784>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a0f      	ldr	r2, [pc, #60]	; (8007134 <HAL_RCC_OscConfig+0x784>)
 80070f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80070fc:	4b0d      	ldr	r3, [pc, #52]	; (8007134 <HAL_RCC_OscConfig+0x784>)
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	4a0c      	ldr	r2, [pc, #48]	; (8007134 <HAL_RCC_OscConfig+0x784>)
 8007102:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007106:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007108:	f7fc ff4a 	bl	8003fa0 <HAL_GetTick>
 800710c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800710e:	e008      	b.n	8007122 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007110:	f7fc ff46 	bl	8003fa0 <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	2b02      	cmp	r3, #2
 800711c:	d901      	bls.n	8007122 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e058      	b.n	80071d4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007122:	4b04      	ldr	r3, [pc, #16]	; (8007134 <HAL_RCC_OscConfig+0x784>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800712a:	2b00      	cmp	r3, #0
 800712c:	d0f0      	beq.n	8007110 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800712e:	e050      	b.n	80071d2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e04f      	b.n	80071d4 <HAL_RCC_OscConfig+0x824>
 8007134:	40021000 	.word	0x40021000
 8007138:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800713c:	4b27      	ldr	r3, [pc, #156]	; (80071dc <HAL_RCC_OscConfig+0x82c>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d144      	bne.n	80071d2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007148:	4b24      	ldr	r3, [pc, #144]	; (80071dc <HAL_RCC_OscConfig+0x82c>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a23      	ldr	r2, [pc, #140]	; (80071dc <HAL_RCC_OscConfig+0x82c>)
 800714e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007152:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007154:	4b21      	ldr	r3, [pc, #132]	; (80071dc <HAL_RCC_OscConfig+0x82c>)
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	4a20      	ldr	r2, [pc, #128]	; (80071dc <HAL_RCC_OscConfig+0x82c>)
 800715a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800715e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007160:	f7fc ff1e 	bl	8003fa0 <HAL_GetTick>
 8007164:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007166:	e008      	b.n	800717a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007168:	f7fc ff1a 	bl	8003fa0 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	2b02      	cmp	r3, #2
 8007174:	d901      	bls.n	800717a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e02c      	b.n	80071d4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800717a:	4b18      	ldr	r3, [pc, #96]	; (80071dc <HAL_RCC_OscConfig+0x82c>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d0f0      	beq.n	8007168 <HAL_RCC_OscConfig+0x7b8>
 8007186:	e024      	b.n	80071d2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	2b0c      	cmp	r3, #12
 800718c:	d01f      	beq.n	80071ce <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800718e:	4b13      	ldr	r3, [pc, #76]	; (80071dc <HAL_RCC_OscConfig+0x82c>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a12      	ldr	r2, [pc, #72]	; (80071dc <HAL_RCC_OscConfig+0x82c>)
 8007194:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800719a:	f7fc ff01 	bl	8003fa0 <HAL_GetTick>
 800719e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071a0:	e008      	b.n	80071b4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071a2:	f7fc fefd 	bl	8003fa0 <HAL_GetTick>
 80071a6:	4602      	mov	r2, r0
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d901      	bls.n	80071b4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e00f      	b.n	80071d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071b4:	4b09      	ldr	r3, [pc, #36]	; (80071dc <HAL_RCC_OscConfig+0x82c>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1f0      	bne.n	80071a2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80071c0:	4b06      	ldr	r3, [pc, #24]	; (80071dc <HAL_RCC_OscConfig+0x82c>)
 80071c2:	68da      	ldr	r2, [r3, #12]
 80071c4:	4905      	ldr	r1, [pc, #20]	; (80071dc <HAL_RCC_OscConfig+0x82c>)
 80071c6:	4b06      	ldr	r3, [pc, #24]	; (80071e0 <HAL_RCC_OscConfig+0x830>)
 80071c8:	4013      	ands	r3, r2
 80071ca:	60cb      	str	r3, [r1, #12]
 80071cc:	e001      	b.n	80071d2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e000      	b.n	80071d4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3720      	adds	r7, #32
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	40021000 	.word	0x40021000
 80071e0:	feeefffc 	.word	0xfeeefffc

080071e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80071ee:	2300      	movs	r3, #0
 80071f0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d101      	bne.n	80071fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e11d      	b.n	8007438 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80071fc:	4b90      	ldr	r3, [pc, #576]	; (8007440 <HAL_RCC_ClockConfig+0x25c>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 030f 	and.w	r3, r3, #15
 8007204:	683a      	ldr	r2, [r7, #0]
 8007206:	429a      	cmp	r2, r3
 8007208:	d910      	bls.n	800722c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800720a:	4b8d      	ldr	r3, [pc, #564]	; (8007440 <HAL_RCC_ClockConfig+0x25c>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f023 020f 	bic.w	r2, r3, #15
 8007212:	498b      	ldr	r1, [pc, #556]	; (8007440 <HAL_RCC_ClockConfig+0x25c>)
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	4313      	orrs	r3, r2
 8007218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800721a:	4b89      	ldr	r3, [pc, #548]	; (8007440 <HAL_RCC_ClockConfig+0x25c>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 030f 	and.w	r3, r3, #15
 8007222:	683a      	ldr	r2, [r7, #0]
 8007224:	429a      	cmp	r2, r3
 8007226:	d001      	beq.n	800722c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e105      	b.n	8007438 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b00      	cmp	r3, #0
 8007236:	d010      	beq.n	800725a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	689a      	ldr	r2, [r3, #8]
 800723c:	4b81      	ldr	r3, [pc, #516]	; (8007444 <HAL_RCC_ClockConfig+0x260>)
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007244:	429a      	cmp	r2, r3
 8007246:	d908      	bls.n	800725a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007248:	4b7e      	ldr	r3, [pc, #504]	; (8007444 <HAL_RCC_ClockConfig+0x260>)
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	497b      	ldr	r1, [pc, #492]	; (8007444 <HAL_RCC_ClockConfig+0x260>)
 8007256:	4313      	orrs	r3, r2
 8007258:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0301 	and.w	r3, r3, #1
 8007262:	2b00      	cmp	r3, #0
 8007264:	d079      	beq.n	800735a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	2b03      	cmp	r3, #3
 800726c:	d11e      	bne.n	80072ac <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800726e:	4b75      	ldr	r3, [pc, #468]	; (8007444 <HAL_RCC_ClockConfig+0x260>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e0dc      	b.n	8007438 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800727e:	f000 fa35 	bl	80076ec <RCC_GetSysClockFreqFromPLLSource>
 8007282:	4603      	mov	r3, r0
 8007284:	4a70      	ldr	r2, [pc, #448]	; (8007448 <HAL_RCC_ClockConfig+0x264>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d946      	bls.n	8007318 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800728a:	4b6e      	ldr	r3, [pc, #440]	; (8007444 <HAL_RCC_ClockConfig+0x260>)
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d140      	bne.n	8007318 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007296:	4b6b      	ldr	r3, [pc, #428]	; (8007444 <HAL_RCC_ClockConfig+0x260>)
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800729e:	4a69      	ldr	r2, [pc, #420]	; (8007444 <HAL_RCC_ClockConfig+0x260>)
 80072a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80072a6:	2380      	movs	r3, #128	; 0x80
 80072a8:	617b      	str	r3, [r7, #20]
 80072aa:	e035      	b.n	8007318 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d107      	bne.n	80072c4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80072b4:	4b63      	ldr	r3, [pc, #396]	; (8007444 <HAL_RCC_ClockConfig+0x260>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d115      	bne.n	80072ec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e0b9      	b.n	8007438 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d107      	bne.n	80072dc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80072cc:	4b5d      	ldr	r3, [pc, #372]	; (8007444 <HAL_RCC_ClockConfig+0x260>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0302 	and.w	r3, r3, #2
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d109      	bne.n	80072ec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e0ad      	b.n	8007438 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80072dc:	4b59      	ldr	r3, [pc, #356]	; (8007444 <HAL_RCC_ClockConfig+0x260>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d101      	bne.n	80072ec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e0a5      	b.n	8007438 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80072ec:	f000 f8b4 	bl	8007458 <HAL_RCC_GetSysClockFreq>
 80072f0:	4603      	mov	r3, r0
 80072f2:	4a55      	ldr	r2, [pc, #340]	; (8007448 <HAL_RCC_ClockConfig+0x264>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d90f      	bls.n	8007318 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80072f8:	4b52      	ldr	r3, [pc, #328]	; (8007444 <HAL_RCC_ClockConfig+0x260>)
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d109      	bne.n	8007318 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007304:	4b4f      	ldr	r3, [pc, #316]	; (8007444 <HAL_RCC_ClockConfig+0x260>)
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800730c:	4a4d      	ldr	r2, [pc, #308]	; (8007444 <HAL_RCC_ClockConfig+0x260>)
 800730e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007312:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007314:	2380      	movs	r3, #128	; 0x80
 8007316:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007318:	4b4a      	ldr	r3, [pc, #296]	; (8007444 <HAL_RCC_ClockConfig+0x260>)
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	f023 0203 	bic.w	r2, r3, #3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	4947      	ldr	r1, [pc, #284]	; (8007444 <HAL_RCC_ClockConfig+0x260>)
 8007326:	4313      	orrs	r3, r2
 8007328:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800732a:	f7fc fe39 	bl	8003fa0 <HAL_GetTick>
 800732e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007330:	e00a      	b.n	8007348 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007332:	f7fc fe35 	bl	8003fa0 <HAL_GetTick>
 8007336:	4602      	mov	r2, r0
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007340:	4293      	cmp	r3, r2
 8007342:	d901      	bls.n	8007348 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e077      	b.n	8007438 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007348:	4b3e      	ldr	r3, [pc, #248]	; (8007444 <HAL_RCC_ClockConfig+0x260>)
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	f003 020c 	and.w	r2, r3, #12
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	429a      	cmp	r2, r3
 8007358:	d1eb      	bne.n	8007332 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	2b80      	cmp	r3, #128	; 0x80
 800735e:	d105      	bne.n	800736c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007360:	4b38      	ldr	r3, [pc, #224]	; (8007444 <HAL_RCC_ClockConfig+0x260>)
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	4a37      	ldr	r2, [pc, #220]	; (8007444 <HAL_RCC_ClockConfig+0x260>)
 8007366:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800736a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 0302 	and.w	r3, r3, #2
 8007374:	2b00      	cmp	r3, #0
 8007376:	d010      	beq.n	800739a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	689a      	ldr	r2, [r3, #8]
 800737c:	4b31      	ldr	r3, [pc, #196]	; (8007444 <HAL_RCC_ClockConfig+0x260>)
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007384:	429a      	cmp	r2, r3
 8007386:	d208      	bcs.n	800739a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007388:	4b2e      	ldr	r3, [pc, #184]	; (8007444 <HAL_RCC_ClockConfig+0x260>)
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	492b      	ldr	r1, [pc, #172]	; (8007444 <HAL_RCC_ClockConfig+0x260>)
 8007396:	4313      	orrs	r3, r2
 8007398:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800739a:	4b29      	ldr	r3, [pc, #164]	; (8007440 <HAL_RCC_ClockConfig+0x25c>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 030f 	and.w	r3, r3, #15
 80073a2:	683a      	ldr	r2, [r7, #0]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d210      	bcs.n	80073ca <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073a8:	4b25      	ldr	r3, [pc, #148]	; (8007440 <HAL_RCC_ClockConfig+0x25c>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f023 020f 	bic.w	r2, r3, #15
 80073b0:	4923      	ldr	r1, [pc, #140]	; (8007440 <HAL_RCC_ClockConfig+0x25c>)
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073b8:	4b21      	ldr	r3, [pc, #132]	; (8007440 <HAL_RCC_ClockConfig+0x25c>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 030f 	and.w	r3, r3, #15
 80073c0:	683a      	ldr	r2, [r7, #0]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d001      	beq.n	80073ca <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e036      	b.n	8007438 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0304 	and.w	r3, r3, #4
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d008      	beq.n	80073e8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073d6:	4b1b      	ldr	r3, [pc, #108]	; (8007444 <HAL_RCC_ClockConfig+0x260>)
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	4918      	ldr	r1, [pc, #96]	; (8007444 <HAL_RCC_ClockConfig+0x260>)
 80073e4:	4313      	orrs	r3, r2
 80073e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 0308 	and.w	r3, r3, #8
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d009      	beq.n	8007408 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073f4:	4b13      	ldr	r3, [pc, #76]	; (8007444 <HAL_RCC_ClockConfig+0x260>)
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	00db      	lsls	r3, r3, #3
 8007402:	4910      	ldr	r1, [pc, #64]	; (8007444 <HAL_RCC_ClockConfig+0x260>)
 8007404:	4313      	orrs	r3, r2
 8007406:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007408:	f000 f826 	bl	8007458 <HAL_RCC_GetSysClockFreq>
 800740c:	4602      	mov	r2, r0
 800740e:	4b0d      	ldr	r3, [pc, #52]	; (8007444 <HAL_RCC_ClockConfig+0x260>)
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	091b      	lsrs	r3, r3, #4
 8007414:	f003 030f 	and.w	r3, r3, #15
 8007418:	490c      	ldr	r1, [pc, #48]	; (800744c <HAL_RCC_ClockConfig+0x268>)
 800741a:	5ccb      	ldrb	r3, [r1, r3]
 800741c:	f003 031f 	and.w	r3, r3, #31
 8007420:	fa22 f303 	lsr.w	r3, r2, r3
 8007424:	4a0a      	ldr	r2, [pc, #40]	; (8007450 <HAL_RCC_ClockConfig+0x26c>)
 8007426:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007428:	4b0a      	ldr	r3, [pc, #40]	; (8007454 <HAL_RCC_ClockConfig+0x270>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4618      	mov	r0, r3
 800742e:	f7fc fd67 	bl	8003f00 <HAL_InitTick>
 8007432:	4603      	mov	r3, r0
 8007434:	73fb      	strb	r3, [r7, #15]

  return status;
 8007436:	7bfb      	ldrb	r3, [r7, #15]
}
 8007438:	4618      	mov	r0, r3
 800743a:	3718      	adds	r7, #24
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	40022000 	.word	0x40022000
 8007444:	40021000 	.word	0x40021000
 8007448:	04c4b400 	.word	0x04c4b400
 800744c:	080178d8 	.word	0x080178d8
 8007450:	20000004 	.word	0x20000004
 8007454:	20000008 	.word	0x20000008

08007458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007458:	b480      	push	{r7}
 800745a:	b089      	sub	sp, #36	; 0x24
 800745c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800745e:	2300      	movs	r3, #0
 8007460:	61fb      	str	r3, [r7, #28]
 8007462:	2300      	movs	r3, #0
 8007464:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007466:	4b3e      	ldr	r3, [pc, #248]	; (8007560 <HAL_RCC_GetSysClockFreq+0x108>)
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	f003 030c 	and.w	r3, r3, #12
 800746e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007470:	4b3b      	ldr	r3, [pc, #236]	; (8007560 <HAL_RCC_GetSysClockFreq+0x108>)
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	f003 0303 	and.w	r3, r3, #3
 8007478:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d005      	beq.n	800748c <HAL_RCC_GetSysClockFreq+0x34>
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	2b0c      	cmp	r3, #12
 8007484:	d121      	bne.n	80074ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d11e      	bne.n	80074ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800748c:	4b34      	ldr	r3, [pc, #208]	; (8007560 <HAL_RCC_GetSysClockFreq+0x108>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0308 	and.w	r3, r3, #8
 8007494:	2b00      	cmp	r3, #0
 8007496:	d107      	bne.n	80074a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007498:	4b31      	ldr	r3, [pc, #196]	; (8007560 <HAL_RCC_GetSysClockFreq+0x108>)
 800749a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800749e:	0a1b      	lsrs	r3, r3, #8
 80074a0:	f003 030f 	and.w	r3, r3, #15
 80074a4:	61fb      	str	r3, [r7, #28]
 80074a6:	e005      	b.n	80074b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80074a8:	4b2d      	ldr	r3, [pc, #180]	; (8007560 <HAL_RCC_GetSysClockFreq+0x108>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	091b      	lsrs	r3, r3, #4
 80074ae:	f003 030f 	and.w	r3, r3, #15
 80074b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80074b4:	4a2b      	ldr	r2, [pc, #172]	; (8007564 <HAL_RCC_GetSysClockFreq+0x10c>)
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10d      	bne.n	80074e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80074c8:	e00a      	b.n	80074e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	2b04      	cmp	r3, #4
 80074ce:	d102      	bne.n	80074d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80074d0:	4b25      	ldr	r3, [pc, #148]	; (8007568 <HAL_RCC_GetSysClockFreq+0x110>)
 80074d2:	61bb      	str	r3, [r7, #24]
 80074d4:	e004      	b.n	80074e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	2b08      	cmp	r3, #8
 80074da:	d101      	bne.n	80074e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80074dc:	4b23      	ldr	r3, [pc, #140]	; (800756c <HAL_RCC_GetSysClockFreq+0x114>)
 80074de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	2b0c      	cmp	r3, #12
 80074e4:	d134      	bne.n	8007550 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80074e6:	4b1e      	ldr	r3, [pc, #120]	; (8007560 <HAL_RCC_GetSysClockFreq+0x108>)
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	f003 0303 	and.w	r3, r3, #3
 80074ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d003      	beq.n	80074fe <HAL_RCC_GetSysClockFreq+0xa6>
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	2b03      	cmp	r3, #3
 80074fa:	d003      	beq.n	8007504 <HAL_RCC_GetSysClockFreq+0xac>
 80074fc:	e005      	b.n	800750a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80074fe:	4b1a      	ldr	r3, [pc, #104]	; (8007568 <HAL_RCC_GetSysClockFreq+0x110>)
 8007500:	617b      	str	r3, [r7, #20]
      break;
 8007502:	e005      	b.n	8007510 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007504:	4b19      	ldr	r3, [pc, #100]	; (800756c <HAL_RCC_GetSysClockFreq+0x114>)
 8007506:	617b      	str	r3, [r7, #20]
      break;
 8007508:	e002      	b.n	8007510 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	617b      	str	r3, [r7, #20]
      break;
 800750e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007510:	4b13      	ldr	r3, [pc, #76]	; (8007560 <HAL_RCC_GetSysClockFreq+0x108>)
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	091b      	lsrs	r3, r3, #4
 8007516:	f003 030f 	and.w	r3, r3, #15
 800751a:	3301      	adds	r3, #1
 800751c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800751e:	4b10      	ldr	r3, [pc, #64]	; (8007560 <HAL_RCC_GetSysClockFreq+0x108>)
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	0a1b      	lsrs	r3, r3, #8
 8007524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	fb03 f202 	mul.w	r2, r3, r2
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	fbb2 f3f3 	udiv	r3, r2, r3
 8007534:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007536:	4b0a      	ldr	r3, [pc, #40]	; (8007560 <HAL_RCC_GetSysClockFreq+0x108>)
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	0e5b      	lsrs	r3, r3, #25
 800753c:	f003 0303 	and.w	r3, r3, #3
 8007540:	3301      	adds	r3, #1
 8007542:	005b      	lsls	r3, r3, #1
 8007544:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	fbb2 f3f3 	udiv	r3, r2, r3
 800754e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007550:	69bb      	ldr	r3, [r7, #24]
}
 8007552:	4618      	mov	r0, r3
 8007554:	3724      	adds	r7, #36	; 0x24
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	40021000 	.word	0x40021000
 8007564:	080178f0 	.word	0x080178f0
 8007568:	00f42400 	.word	0x00f42400
 800756c:	007a1200 	.word	0x007a1200

08007570 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007570:	b480      	push	{r7}
 8007572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007574:	4b03      	ldr	r3, [pc, #12]	; (8007584 <HAL_RCC_GetHCLKFreq+0x14>)
 8007576:	681b      	ldr	r3, [r3, #0]
}
 8007578:	4618      	mov	r0, r3
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	20000004 	.word	0x20000004

08007588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800758c:	f7ff fff0 	bl	8007570 <HAL_RCC_GetHCLKFreq>
 8007590:	4602      	mov	r2, r0
 8007592:	4b06      	ldr	r3, [pc, #24]	; (80075ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	0a1b      	lsrs	r3, r3, #8
 8007598:	f003 0307 	and.w	r3, r3, #7
 800759c:	4904      	ldr	r1, [pc, #16]	; (80075b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800759e:	5ccb      	ldrb	r3, [r1, r3]
 80075a0:	f003 031f 	and.w	r3, r3, #31
 80075a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	40021000 	.word	0x40021000
 80075b0:	080178e8 	.word	0x080178e8

080075b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80075b8:	f7ff ffda 	bl	8007570 <HAL_RCC_GetHCLKFreq>
 80075bc:	4602      	mov	r2, r0
 80075be:	4b06      	ldr	r3, [pc, #24]	; (80075d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	0adb      	lsrs	r3, r3, #11
 80075c4:	f003 0307 	and.w	r3, r3, #7
 80075c8:	4904      	ldr	r1, [pc, #16]	; (80075dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80075ca:	5ccb      	ldrb	r3, [r1, r3]
 80075cc:	f003 031f 	and.w	r3, r3, #31
 80075d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	40021000 	.word	0x40021000
 80075dc:	080178e8 	.word	0x080178e8

080075e0 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80075e0:	b480      	push	{r7}
 80075e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80075e4:	4b05      	ldr	r3, [pc, #20]	; (80075fc <HAL_RCC_EnableCSS+0x1c>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a04      	ldr	r2, [pc, #16]	; (80075fc <HAL_RCC_EnableCSS+0x1c>)
 80075ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075ee:	6013      	str	r3, [r2, #0]
}
 80075f0:	bf00      	nop
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	40021000 	.word	0x40021000

08007600 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007604:	4b07      	ldr	r3, [pc, #28]	; (8007624 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007606:	69db      	ldr	r3, [r3, #28]
 8007608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800760c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007610:	d105      	bne.n	800761e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8007612:	f000 f809 	bl	8007628 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007616:	4b03      	ldr	r3, [pc, #12]	; (8007624 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007618:	f44f 7280 	mov.w	r2, #256	; 0x100
 800761c:	621a      	str	r2, [r3, #32]
  }
}
 800761e:	bf00      	nop
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	40021000 	.word	0x40021000

08007628 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8007628:	b480      	push	{r7}
 800762a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800762c:	bf00      	nop
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
	...

08007638 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b086      	sub	sp, #24
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007640:	2300      	movs	r3, #0
 8007642:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007644:	4b27      	ldr	r3, [pc, #156]	; (80076e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800764c:	2b00      	cmp	r3, #0
 800764e:	d003      	beq.n	8007658 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007650:	f7ff f8da 	bl	8006808 <HAL_PWREx_GetVoltageRange>
 8007654:	6178      	str	r0, [r7, #20]
 8007656:	e014      	b.n	8007682 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007658:	4b22      	ldr	r3, [pc, #136]	; (80076e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800765a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800765c:	4a21      	ldr	r2, [pc, #132]	; (80076e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800765e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007662:	6593      	str	r3, [r2, #88]	; 0x58
 8007664:	4b1f      	ldr	r3, [pc, #124]	; (80076e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800766c:	60fb      	str	r3, [r7, #12]
 800766e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007670:	f7ff f8ca 	bl	8006808 <HAL_PWREx_GetVoltageRange>
 8007674:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007676:	4b1b      	ldr	r3, [pc, #108]	; (80076e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800767a:	4a1a      	ldr	r2, [pc, #104]	; (80076e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800767c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007680:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007688:	d10b      	bne.n	80076a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2b80      	cmp	r3, #128	; 0x80
 800768e:	d913      	bls.n	80076b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2ba0      	cmp	r3, #160	; 0xa0
 8007694:	d902      	bls.n	800769c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007696:	2302      	movs	r3, #2
 8007698:	613b      	str	r3, [r7, #16]
 800769a:	e00d      	b.n	80076b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800769c:	2301      	movs	r3, #1
 800769e:	613b      	str	r3, [r7, #16]
 80076a0:	e00a      	b.n	80076b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2b7f      	cmp	r3, #127	; 0x7f
 80076a6:	d902      	bls.n	80076ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80076a8:	2302      	movs	r3, #2
 80076aa:	613b      	str	r3, [r7, #16]
 80076ac:	e004      	b.n	80076b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b70      	cmp	r3, #112	; 0x70
 80076b2:	d101      	bne.n	80076b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80076b4:	2301      	movs	r3, #1
 80076b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80076b8:	4b0b      	ldr	r3, [pc, #44]	; (80076e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f023 020f 	bic.w	r2, r3, #15
 80076c0:	4909      	ldr	r1, [pc, #36]	; (80076e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80076c8:	4b07      	ldr	r3, [pc, #28]	; (80076e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 030f 	and.w	r3, r3, #15
 80076d0:	693a      	ldr	r2, [r7, #16]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d001      	beq.n	80076da <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e000      	b.n	80076dc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3718      	adds	r7, #24
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	40021000 	.word	0x40021000
 80076e8:	40022000 	.word	0x40022000

080076ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b087      	sub	sp, #28
 80076f0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80076f2:	4b2d      	ldr	r3, [pc, #180]	; (80077a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	f003 0303 	and.w	r3, r3, #3
 80076fa:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2b03      	cmp	r3, #3
 8007700:	d00b      	beq.n	800771a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2b03      	cmp	r3, #3
 8007706:	d825      	bhi.n	8007754 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2b01      	cmp	r3, #1
 800770c:	d008      	beq.n	8007720 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2b02      	cmp	r3, #2
 8007712:	d11f      	bne.n	8007754 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8007714:	4b25      	ldr	r3, [pc, #148]	; (80077ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007716:	613b      	str	r3, [r7, #16]
    break;
 8007718:	e01f      	b.n	800775a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800771a:	4b25      	ldr	r3, [pc, #148]	; (80077b0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800771c:	613b      	str	r3, [r7, #16]
    break;
 800771e:	e01c      	b.n	800775a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007720:	4b21      	ldr	r3, [pc, #132]	; (80077a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0308 	and.w	r3, r3, #8
 8007728:	2b00      	cmp	r3, #0
 800772a:	d107      	bne.n	800773c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800772c:	4b1e      	ldr	r3, [pc, #120]	; (80077a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800772e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007732:	0a1b      	lsrs	r3, r3, #8
 8007734:	f003 030f 	and.w	r3, r3, #15
 8007738:	617b      	str	r3, [r7, #20]
 800773a:	e005      	b.n	8007748 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800773c:	4b1a      	ldr	r3, [pc, #104]	; (80077a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	091b      	lsrs	r3, r3, #4
 8007742:	f003 030f 	and.w	r3, r3, #15
 8007746:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8007748:	4a1a      	ldr	r2, [pc, #104]	; (80077b4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007750:	613b      	str	r3, [r7, #16]
    break;
 8007752:	e002      	b.n	800775a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8007754:	2300      	movs	r3, #0
 8007756:	613b      	str	r3, [r7, #16]
    break;
 8007758:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800775a:	4b13      	ldr	r3, [pc, #76]	; (80077a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	091b      	lsrs	r3, r3, #4
 8007760:	f003 030f 	and.w	r3, r3, #15
 8007764:	3301      	adds	r3, #1
 8007766:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007768:	4b0f      	ldr	r3, [pc, #60]	; (80077a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	0a1b      	lsrs	r3, r3, #8
 800776e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	fb03 f202 	mul.w	r2, r3, r2
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	fbb2 f3f3 	udiv	r3, r2, r3
 800777e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007780:	4b09      	ldr	r3, [pc, #36]	; (80077a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	0e5b      	lsrs	r3, r3, #25
 8007786:	f003 0303 	and.w	r3, r3, #3
 800778a:	3301      	adds	r3, #1
 800778c:	005b      	lsls	r3, r3, #1
 800778e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	fbb2 f3f3 	udiv	r3, r2, r3
 8007798:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800779a:	683b      	ldr	r3, [r7, #0]
}
 800779c:	4618      	mov	r0, r3
 800779e:	371c      	adds	r7, #28
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr
 80077a8:	40021000 	.word	0x40021000
 80077ac:	00f42400 	.word	0x00f42400
 80077b0:	007a1200 	.word	0x007a1200
 80077b4:	080178f0 	.word	0x080178f0

080077b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80077c0:	2300      	movs	r3, #0
 80077c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80077c4:	2300      	movs	r3, #0
 80077c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d040      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077d8:	2b80      	cmp	r3, #128	; 0x80
 80077da:	d02a      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80077dc:	2b80      	cmp	r3, #128	; 0x80
 80077de:	d825      	bhi.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80077e0:	2b60      	cmp	r3, #96	; 0x60
 80077e2:	d026      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80077e4:	2b60      	cmp	r3, #96	; 0x60
 80077e6:	d821      	bhi.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80077e8:	2b40      	cmp	r3, #64	; 0x40
 80077ea:	d006      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x42>
 80077ec:	2b40      	cmp	r3, #64	; 0x40
 80077ee:	d81d      	bhi.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d009      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80077f4:	2b20      	cmp	r3, #32
 80077f6:	d010      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x62>
 80077f8:	e018      	b.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80077fa:	4b89      	ldr	r3, [pc, #548]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	4a88      	ldr	r2, [pc, #544]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007804:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007806:	e015      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	3304      	adds	r3, #4
 800780c:	2100      	movs	r1, #0
 800780e:	4618      	mov	r0, r3
 8007810:	f001 fa24 	bl	8008c5c <RCCEx_PLLSAI1_Config>
 8007814:	4603      	mov	r3, r0
 8007816:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007818:	e00c      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	3320      	adds	r3, #32
 800781e:	2100      	movs	r1, #0
 8007820:	4618      	mov	r0, r3
 8007822:	f001 fb0f 	bl	8008e44 <RCCEx_PLLSAI2_Config>
 8007826:	4603      	mov	r3, r0
 8007828:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800782a:	e003      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	74fb      	strb	r3, [r7, #19]
      break;
 8007830:	e000      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8007832:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007834:	7cfb      	ldrb	r3, [r7, #19]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d10b      	bne.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800783a:	4b79      	ldr	r3, [pc, #484]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800783c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007840:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007848:	4975      	ldr	r1, [pc, #468]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800784a:	4313      	orrs	r3, r2
 800784c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007850:	e001      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007852:	7cfb      	ldrb	r3, [r7, #19]
 8007854:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800785e:	2b00      	cmp	r3, #0
 8007860:	d047      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800786a:	d030      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x116>
 800786c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007870:	d82a      	bhi.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007872:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007876:	d02a      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007878:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800787c:	d824      	bhi.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800787e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007882:	d008      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8007884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007888:	d81e      	bhi.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00a      	beq.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800788e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007892:	d010      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007894:	e018      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007896:	4b62      	ldr	r3, [pc, #392]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	4a61      	ldr	r2, [pc, #388]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800789c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078a0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80078a2:	e015      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	3304      	adds	r3, #4
 80078a8:	2100      	movs	r1, #0
 80078aa:	4618      	mov	r0, r3
 80078ac:	f001 f9d6 	bl	8008c5c <RCCEx_PLLSAI1_Config>
 80078b0:	4603      	mov	r3, r0
 80078b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80078b4:	e00c      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	3320      	adds	r3, #32
 80078ba:	2100      	movs	r1, #0
 80078bc:	4618      	mov	r0, r3
 80078be:	f001 fac1 	bl	8008e44 <RCCEx_PLLSAI2_Config>
 80078c2:	4603      	mov	r3, r0
 80078c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80078c6:	e003      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	74fb      	strb	r3, [r7, #19]
      break;
 80078cc:	e000      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80078ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078d0:	7cfb      	ldrb	r3, [r7, #19]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10b      	bne.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80078d6:	4b52      	ldr	r3, [pc, #328]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80078d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80078dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e4:	494e      	ldr	r1, [pc, #312]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80078e6:	4313      	orrs	r3, r2
 80078e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80078ec:	e001      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ee:	7cfb      	ldrb	r3, [r7, #19]
 80078f0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f000 809f 	beq.w	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007900:	2300      	movs	r3, #0
 8007902:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007904:	4b46      	ldr	r3, [pc, #280]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d101      	bne.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007910:	2301      	movs	r3, #1
 8007912:	e000      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8007914:	2300      	movs	r3, #0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00d      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800791a:	4b41      	ldr	r3, [pc, #260]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800791c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800791e:	4a40      	ldr	r2, [pc, #256]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007924:	6593      	str	r3, [r2, #88]	; 0x58
 8007926:	4b3e      	ldr	r3, [pc, #248]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800792a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800792e:	60bb      	str	r3, [r7, #8]
 8007930:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007932:	2301      	movs	r3, #1
 8007934:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007936:	4b3b      	ldr	r3, [pc, #236]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a3a      	ldr	r2, [pc, #232]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800793c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007940:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007942:	f7fc fb2d 	bl	8003fa0 <HAL_GetTick>
 8007946:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007948:	e009      	b.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800794a:	f7fc fb29 	bl	8003fa0 <HAL_GetTick>
 800794e:	4602      	mov	r2, r0
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	2b02      	cmp	r3, #2
 8007956:	d902      	bls.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8007958:	2303      	movs	r3, #3
 800795a:	74fb      	strb	r3, [r7, #19]
        break;
 800795c:	e005      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800795e:	4b31      	ldr	r3, [pc, #196]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007966:	2b00      	cmp	r3, #0
 8007968:	d0ef      	beq.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800796a:	7cfb      	ldrb	r3, [r7, #19]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d15b      	bne.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007970:	4b2b      	ldr	r3, [pc, #172]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800797a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d01f      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	429a      	cmp	r2, r3
 800798c:	d019      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800798e:	4b24      	ldr	r3, [pc, #144]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007998:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800799a:	4b21      	ldr	r3, [pc, #132]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800799c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079a0:	4a1f      	ldr	r2, [pc, #124]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80079aa:	4b1d      	ldr	r3, [pc, #116]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079b0:	4a1b      	ldr	r2, [pc, #108]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80079ba:	4a19      	ldr	r2, [pc, #100]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	f003 0301 	and.w	r3, r3, #1
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d016      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079cc:	f7fc fae8 	bl	8003fa0 <HAL_GetTick>
 80079d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079d2:	e00b      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079d4:	f7fc fae4 	bl	8003fa0 <HAL_GetTick>
 80079d8:	4602      	mov	r2, r0
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	f241 3288 	movw	r2, #5000	; 0x1388
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d902      	bls.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	74fb      	strb	r3, [r7, #19]
            break;
 80079ea:	e006      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079ec:	4b0c      	ldr	r3, [pc, #48]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079f2:	f003 0302 	and.w	r3, r3, #2
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d0ec      	beq.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80079fa:	7cfb      	ldrb	r3, [r7, #19]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10c      	bne.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a00:	4b07      	ldr	r3, [pc, #28]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a10:	4903      	ldr	r1, [pc, #12]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a12:	4313      	orrs	r3, r2
 8007a14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007a18:	e008      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a1a:	7cfb      	ldrb	r3, [r7, #19]
 8007a1c:	74bb      	strb	r3, [r7, #18]
 8007a1e:	e005      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8007a20:	40021000 	.word	0x40021000
 8007a24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a28:	7cfb      	ldrb	r3, [r7, #19]
 8007a2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a2c:	7c7b      	ldrb	r3, [r7, #17]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d105      	bne.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a32:	4ba0      	ldr	r3, [pc, #640]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a36:	4a9f      	ldr	r2, [pc, #636]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a3c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 0301 	and.w	r3, r3, #1
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00a      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007a4a:	4b9a      	ldr	r3, [pc, #616]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a50:	f023 0203 	bic.w	r2, r3, #3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a58:	4996      	ldr	r1, [pc, #600]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 0302 	and.w	r3, r3, #2
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00a      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007a6c:	4b91      	ldr	r3, [pc, #580]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a72:	f023 020c 	bic.w	r2, r3, #12
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7a:	498e      	ldr	r1, [pc, #568]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0304 	and.w	r3, r3, #4
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00a      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007a8e:	4b89      	ldr	r3, [pc, #548]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a94:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a9c:	4985      	ldr	r1, [pc, #532]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 0308 	and.w	r3, r3, #8
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00a      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007ab0:	4b80      	ldr	r3, [pc, #512]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ab6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007abe:	497d      	ldr	r1, [pc, #500]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f003 0310 	and.w	r3, r3, #16
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00a      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007ad2:	4b78      	ldr	r3, [pc, #480]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ad8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ae0:	4974      	ldr	r1, [pc, #464]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 0320 	and.w	r3, r3, #32
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00a      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007af4:	4b6f      	ldr	r3, [pc, #444]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007afa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b02:	496c      	ldr	r1, [pc, #432]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b04:	4313      	orrs	r3, r2
 8007b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00a      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b16:	4b67      	ldr	r3, [pc, #412]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b24:	4963      	ldr	r1, [pc, #396]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b26:	4313      	orrs	r3, r2
 8007b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00a      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b38:	4b5e      	ldr	r3, [pc, #376]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b46:	495b      	ldr	r1, [pc, #364]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00a      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b5a:	4b56      	ldr	r3, [pc, #344]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b60:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b68:	4952      	ldr	r1, [pc, #328]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00a      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007b7c:	4b4d      	ldr	r3, [pc, #308]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b8a:	494a      	ldr	r1, [pc, #296]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00a      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007b9e:	4b45      	ldr	r3, [pc, #276]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ba4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bac:	4941      	ldr	r1, [pc, #260]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00a      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007bc0:	4b3c      	ldr	r3, [pc, #240]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007bc6:	f023 0203 	bic.w	r2, r3, #3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bce:	4939      	ldr	r1, [pc, #228]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d028      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007be2:	4b34      	ldr	r3, [pc, #208]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bf0:	4930      	ldr	r1, [pc, #192]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c00:	d106      	bne.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c02:	4b2c      	ldr	r3, [pc, #176]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	4a2b      	ldr	r2, [pc, #172]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c0c:	60d3      	str	r3, [r2, #12]
 8007c0e:	e011      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c18:	d10c      	bne.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	3304      	adds	r3, #4
 8007c1e:	2101      	movs	r1, #1
 8007c20:	4618      	mov	r0, r3
 8007c22:	f001 f81b 	bl	8008c5c <RCCEx_PLLSAI1_Config>
 8007c26:	4603      	mov	r3, r0
 8007c28:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007c2a:	7cfb      	ldrb	r3, [r7, #19]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d001      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8007c30:	7cfb      	ldrb	r3, [r7, #19]
 8007c32:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d04d      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c48:	d108      	bne.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007c4a:	4b1a      	ldr	r3, [pc, #104]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c50:	4a18      	ldr	r2, [pc, #96]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c56:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007c5a:	e012      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007c5c:	4b15      	ldr	r3, [pc, #84]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c62:	4a14      	ldr	r2, [pc, #80]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c68:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007c6c:	4b11      	ldr	r3, [pc, #68]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c7a:	490e      	ldr	r1, [pc, #56]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c8a:	d106      	bne.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c8c:	4b09      	ldr	r3, [pc, #36]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	4a08      	ldr	r2, [pc, #32]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c96:	60d3      	str	r3, [r2, #12]
 8007c98:	e020      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ca2:	d109      	bne.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007ca4:	4b03      	ldr	r3, [pc, #12]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	4a02      	ldr	r2, [pc, #8]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cae:	60d3      	str	r3, [r2, #12]
 8007cb0:	e014      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007cb2:	bf00      	nop
 8007cb4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007cc0:	d10c      	bne.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	2101      	movs	r1, #1
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f000 ffc7 	bl	8008c5c <RCCEx_PLLSAI1_Config>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007cd2:	7cfb      	ldrb	r3, [r7, #19]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d001      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8007cd8:	7cfb      	ldrb	r3, [r7, #19]
 8007cda:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d028      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ce8:	4b4a      	ldr	r3, [pc, #296]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cf6:	4947      	ldr	r1, [pc, #284]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d06:	d106      	bne.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d08:	4b42      	ldr	r3, [pc, #264]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	4a41      	ldr	r2, [pc, #260]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d12:	60d3      	str	r3, [r2, #12]
 8007d14:	e011      	b.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d1e:	d10c      	bne.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3304      	adds	r3, #4
 8007d24:	2101      	movs	r1, #1
 8007d26:	4618      	mov	r0, r3
 8007d28:	f000 ff98 	bl	8008c5c <RCCEx_PLLSAI1_Config>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007d30:	7cfb      	ldrb	r3, [r7, #19]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d001      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8007d36:	7cfb      	ldrb	r3, [r7, #19]
 8007d38:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d01e      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d46:	4b33      	ldr	r3, [pc, #204]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d4c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d56:	492f      	ldr	r1, [pc, #188]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d68:	d10c      	bne.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	2102      	movs	r1, #2
 8007d70:	4618      	mov	r0, r3
 8007d72:	f000 ff73 	bl	8008c5c <RCCEx_PLLSAI1_Config>
 8007d76:	4603      	mov	r3, r0
 8007d78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007d7a:	7cfb      	ldrb	r3, [r7, #19]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d001      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8007d80:	7cfb      	ldrb	r3, [r7, #19]
 8007d82:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00b      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007d90:	4b20      	ldr	r3, [pc, #128]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d96:	f023 0204 	bic.w	r2, r3, #4
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007da0:	491c      	ldr	r1, [pc, #112]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00b      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007db4:	4b17      	ldr	r3, [pc, #92]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007db6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007dba:	f023 0218 	bic.w	r2, r3, #24
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dc4:	4913      	ldr	r1, [pc, #76]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d017      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007dd8:	4b0e      	ldr	r3, [pc, #56]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007dde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007de8:	490a      	ldr	r1, [pc, #40]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007df6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dfa:	d105      	bne.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007dfc:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	4a04      	ldr	r2, [pc, #16]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e06:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007e08:	7cbb      	ldrb	r3, [r7, #18]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3718      	adds	r7, #24
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	40021000 	.word	0x40021000

08007e18 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b088      	sub	sp, #32
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8007e20:	2300      	movs	r3, #0
 8007e22:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e2a:	d13e      	bne.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007e2c:	4bb6      	ldr	r3, [pc, #728]	; (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e36:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e3e:	d028      	beq.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e46:	f200 86f4 	bhi.w	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e50:	d005      	beq.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e58:	d00e      	beq.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8007e5a:	f000 beea 	b.w	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007e5e:	4baa      	ldr	r3, [pc, #680]	; (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e64:	f003 0302 	and.w	r3, r3, #2
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	f040 86e4 	bne.w	8008c36 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8007e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e72:	61fb      	str	r3, [r7, #28]
      break;
 8007e74:	f000 bedf 	b.w	8008c36 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007e78:	4ba3      	ldr	r3, [pc, #652]	; (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e7e:	f003 0302 	and.w	r3, r3, #2
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	f040 86d9 	bne.w	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8007e88:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007e8c:	61fb      	str	r3, [r7, #28]
      break;
 8007e8e:	f000 bed4 	b.w	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007e92:	4b9d      	ldr	r3, [pc, #628]	; (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e9e:	f040 86ce 	bne.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8007ea2:	4b9a      	ldr	r3, [pc, #616]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007ea4:	61fb      	str	r3, [r7, #28]
      break;
 8007ea6:	f000 beca 	b.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007eaa:	4b97      	ldr	r3, [pc, #604]	; (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	f003 0303 	and.w	r3, r3, #3
 8007eb2:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	2b03      	cmp	r3, #3
 8007eb8:	d036      	beq.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	2b03      	cmp	r3, #3
 8007ebe:	d840      	bhi.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d003      	beq.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d020      	beq.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8007ecc:	e039      	b.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007ece:	4b8e      	ldr	r3, [pc, #568]	; (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0302 	and.w	r3, r3, #2
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d116      	bne.n	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007eda:	4b8b      	ldr	r3, [pc, #556]	; (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 0308 	and.w	r3, r3, #8
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d005      	beq.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8007ee6:	4b88      	ldr	r3, [pc, #544]	; (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	091b      	lsrs	r3, r3, #4
 8007eec:	f003 030f 	and.w	r3, r3, #15
 8007ef0:	e005      	b.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8007ef2:	4b85      	ldr	r3, [pc, #532]	; (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ef8:	0a1b      	lsrs	r3, r3, #8
 8007efa:	f003 030f 	and.w	r3, r3, #15
 8007efe:	4a84      	ldr	r2, [pc, #528]	; (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f04:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007f06:	e01f      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	61bb      	str	r3, [r7, #24]
      break;
 8007f0c:	e01c      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f0e:	4b7e      	ldr	r3, [pc, #504]	; (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f1a:	d102      	bne.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8007f1c:	4b7d      	ldr	r3, [pc, #500]	; (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8007f1e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007f20:	e012      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	61bb      	str	r3, [r7, #24]
      break;
 8007f26:	e00f      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007f28:	4b77      	ldr	r3, [pc, #476]	; (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f34:	d102      	bne.n	8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8007f36:	4b78      	ldr	r3, [pc, #480]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8007f38:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007f3a:	e005      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	61bb      	str	r3, [r7, #24]
      break;
 8007f40:	e002      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8007f42:	2300      	movs	r3, #0
 8007f44:	61bb      	str	r3, [r7, #24]
      break;
 8007f46:	bf00      	nop
    }

    switch(PeriphClk)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f4e:	f000 8606 	beq.w	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f58:	f200 8673 	bhi.w	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f62:	f000 8469 	beq.w	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f6c:	f200 8669 	bhi.w	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f76:	f000 8531 	beq.w	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f80:	f200 865f 	bhi.w	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007f8a:	f000 8187 	beq.w	800829c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007f94:	f200 8655 	bhi.w	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f9e:	f000 80cd 	beq.w	800813c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007fa8:	f200 864b 	bhi.w	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fb2:	f000 8430 	beq.w	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fbc:	f200 8641 	bhi.w	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fc6:	f000 83e4 	beq.w	8008792 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fd0:	f200 8637 	bhi.w	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fda:	f000 80af 	beq.w	800813c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fe4:	f200 862d 	bhi.w	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fee:	f000 809d 	beq.w	800812c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ff8:	f200 8623 	bhi.w	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008002:	f000 808b 	beq.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800800c:	f200 8619 	bhi.w	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008016:	f000 8554 	beq.w	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008020:	f200 860f 	bhi.w	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800802a:	f000 8500 	beq.w	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008034:	f200 8605 	bhi.w	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800803e:	f000 84a1 	beq.w	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008048:	f200 85fb 	bhi.w	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2b80      	cmp	r3, #128	; 0x80
 8008050:	f000 846c 	beq.w	800892c <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b80      	cmp	r3, #128	; 0x80
 8008058:	f200 85f3 	bhi.w	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2b20      	cmp	r3, #32
 8008060:	d84c      	bhi.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2b00      	cmp	r3, #0
 8008066:	f000 85ec 	beq.w	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	3b01      	subs	r3, #1
 800806e:	2b1f      	cmp	r3, #31
 8008070:	f200 85e7 	bhi.w	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8008074:	a201      	add	r2, pc, #4	; (adr r2, 800807c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8008076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800807a:	bf00      	nop
 800807c:	08008491 	.word	0x08008491
 8008080:	080084ff 	.word	0x080084ff
 8008084:	08008c43 	.word	0x08008c43
 8008088:	08008593 	.word	0x08008593
 800808c:	08008c43 	.word	0x08008c43
 8008090:	08008c43 	.word	0x08008c43
 8008094:	08008c43 	.word	0x08008c43
 8008098:	0800860b 	.word	0x0800860b
 800809c:	08008c43 	.word	0x08008c43
 80080a0:	08008c43 	.word	0x08008c43
 80080a4:	08008c43 	.word	0x08008c43
 80080a8:	08008c43 	.word	0x08008c43
 80080ac:	08008c43 	.word	0x08008c43
 80080b0:	08008c43 	.word	0x08008c43
 80080b4:	08008c43 	.word	0x08008c43
 80080b8:	0800868f 	.word	0x0800868f
 80080bc:	08008c43 	.word	0x08008c43
 80080c0:	08008c43 	.word	0x08008c43
 80080c4:	08008c43 	.word	0x08008c43
 80080c8:	08008c43 	.word	0x08008c43
 80080cc:	08008c43 	.word	0x08008c43
 80080d0:	08008c43 	.word	0x08008c43
 80080d4:	08008c43 	.word	0x08008c43
 80080d8:	08008c43 	.word	0x08008c43
 80080dc:	08008c43 	.word	0x08008c43
 80080e0:	08008c43 	.word	0x08008c43
 80080e4:	08008c43 	.word	0x08008c43
 80080e8:	08008c43 	.word	0x08008c43
 80080ec:	08008c43 	.word	0x08008c43
 80080f0:	08008c43 	.word	0x08008c43
 80080f4:	08008c43 	.word	0x08008c43
 80080f8:	08008711 	.word	0x08008711
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b40      	cmp	r3, #64	; 0x40
 8008100:	f000 83e8 	beq.w	80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8008104:	f000 bd9d 	b.w	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8008108:	40021000 	.word	0x40021000
 800810c:	0003d090 	.word	0x0003d090
 8008110:	080178f0 	.word	0x080178f0
 8008114:	00f42400 	.word	0x00f42400
 8008118:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800811c:	69b9      	ldr	r1, [r7, #24]
 800811e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008122:	f000 ff83 	bl	800902c <RCCEx_GetSAIxPeriphCLKFreq>
 8008126:	61f8      	str	r0, [r7, #28]
      break;
 8008128:	f000 bd8e 	b.w	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800812c:	69b9      	ldr	r1, [r7, #24]
 800812e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008132:	f000 ff7b 	bl	800902c <RCCEx_GetSAIxPeriphCLKFreq>
 8008136:	61f8      	str	r0, [r7, #28]
      break;
 8008138:	f000 bd86 	b.w	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800813c:	4b9a      	ldr	r3, [pc, #616]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800813e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008142:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8008146:	60fb      	str	r3, [r7, #12]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800814e:	d015      	beq.n	800817c <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008156:	f200 8092 	bhi.w	800827e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008160:	d029      	beq.n	80081b6 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008168:	f200 8089 	bhi.w	800827e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d07b      	beq.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008178:	d04a      	beq.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 800817a:	e080      	b.n	800827e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800817c:	4b8a      	ldr	r3, [pc, #552]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 0302 	and.w	r3, r3, #2
 8008184:	2b02      	cmp	r3, #2
 8008186:	d17d      	bne.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008188:	4b87      	ldr	r3, [pc, #540]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 0308 	and.w	r3, r3, #8
 8008190:	2b00      	cmp	r3, #0
 8008192:	d005      	beq.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8008194:	4b84      	ldr	r3, [pc, #528]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	091b      	lsrs	r3, r3, #4
 800819a:	f003 030f 	and.w	r3, r3, #15
 800819e:	e005      	b.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 80081a0:	4b81      	ldr	r3, [pc, #516]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80081a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081a6:	0a1b      	lsrs	r3, r3, #8
 80081a8:	f003 030f 	and.w	r3, r3, #15
 80081ac:	4a7f      	ldr	r2, [pc, #508]	; (80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80081ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081b2:	61fb      	str	r3, [r7, #28]
          break;
 80081b4:	e066      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80081b6:	4b7c      	ldr	r3, [pc, #496]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081c2:	d162      	bne.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80081c4:	4b78      	ldr	r3, [pc, #480]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081d0:	d15b      	bne.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80081d2:	4b75      	ldr	r3, [pc, #468]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	0a1b      	lsrs	r3, r3, #8
 80081d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081dc:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	fb03 f202 	mul.w	r2, r3, r2
 80081e6:	4b70      	ldr	r3, [pc, #448]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	091b      	lsrs	r3, r3, #4
 80081ec:	f003 030f 	and.w	r3, r3, #15
 80081f0:	3301      	adds	r3, #1
 80081f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80081f8:	4b6b      	ldr	r3, [pc, #428]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	0d5b      	lsrs	r3, r3, #21
 80081fe:	f003 0303 	and.w	r3, r3, #3
 8008202:	3301      	adds	r3, #1
 8008204:	005b      	lsls	r3, r3, #1
 8008206:	69ba      	ldr	r2, [r7, #24]
 8008208:	fbb2 f3f3 	udiv	r3, r2, r3
 800820c:	61fb      	str	r3, [r7, #28]
          break;
 800820e:	e03c      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8008210:	4b65      	ldr	r3, [pc, #404]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008218:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800821c:	d138      	bne.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800821e:	4b62      	ldr	r3, [pc, #392]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008226:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800822a:	d131      	bne.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800822c:	4b5e      	ldr	r3, [pc, #376]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	0a1b      	lsrs	r3, r3, #8
 8008232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008236:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	fb03 f202 	mul.w	r2, r3, r2
 8008240:	4b59      	ldr	r3, [pc, #356]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	091b      	lsrs	r3, r3, #4
 8008246:	f003 030f 	and.w	r3, r3, #15
 800824a:	3301      	adds	r3, #1
 800824c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008250:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8008252:	4b55      	ldr	r3, [pc, #340]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	0d5b      	lsrs	r3, r3, #21
 8008258:	f003 0303 	and.w	r3, r3, #3
 800825c:	3301      	adds	r3, #1
 800825e:	005b      	lsls	r3, r3, #1
 8008260:	69ba      	ldr	r2, [r7, #24]
 8008262:	fbb2 f3f3 	udiv	r3, r2, r3
 8008266:	61fb      	str	r3, [r7, #28]
          break;
 8008268:	e012      	b.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800826a:	4b4f      	ldr	r3, [pc, #316]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800826c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008270:	f003 0302 	and.w	r3, r3, #2
 8008274:	2b02      	cmp	r3, #2
 8008276:	d10e      	bne.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8008278:	4b4d      	ldr	r3, [pc, #308]	; (80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800827a:	61fb      	str	r3, [r7, #28]
          break;
 800827c:	e00b      	b.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800827e:	bf00      	nop
 8008280:	f000 bce2 	b.w	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008284:	bf00      	nop
 8008286:	f000 bcdf 	b.w	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800828a:	bf00      	nop
 800828c:	f000 bcdc 	b.w	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008290:	bf00      	nop
 8008292:	f000 bcd9 	b.w	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008296:	bf00      	nop
        break;
 8008298:	f000 bcd6 	b.w	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 800829c:	4b42      	ldr	r3, [pc, #264]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800829e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80082a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082aa:	d13d      	bne.n	8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80082ac:	4b3e      	ldr	r3, [pc, #248]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082b8:	f040 84c5 	bne.w	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80082bc:	4b3a      	ldr	r3, [pc, #232]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082c8:	f040 84bd 	bne.w	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80082cc:	4b36      	ldr	r3, [pc, #216]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	0a1b      	lsrs	r3, r3, #8
 80082d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082d6:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	fb03 f202 	mul.w	r2, r3, r2
 80082e0:	4b31      	ldr	r3, [pc, #196]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	091b      	lsrs	r3, r3, #4
 80082e6:	f003 030f 	and.w	r3, r3, #15
 80082ea:	3301      	adds	r3, #1
 80082ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80082f0:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80082f2:	4b2d      	ldr	r3, [pc, #180]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	0edb      	lsrs	r3, r3, #27
 80082f8:	f003 031f 	and.w	r3, r3, #31
 80082fc:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d10a      	bne.n	800831a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8008304:	4b28      	ldr	r3, [pc, #160]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d002      	beq.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8008310:	2311      	movs	r3, #17
 8008312:	617b      	str	r3, [r7, #20]
 8008314:	e001      	b.n	800831a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8008316:	2307      	movs	r3, #7
 8008318:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800831a:	69ba      	ldr	r2, [r7, #24]
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008322:	61fb      	str	r3, [r7, #28]
      break;
 8008324:	f000 bc8f 	b.w	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8008328:	4b1f      	ldr	r3, [pc, #124]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800832a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800832e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8008332:	60fb      	str	r3, [r7, #12]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800833a:	d016      	beq.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008342:	f200 809b 	bhi.w	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800834c:	d032      	beq.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008354:	f200 8092 	bhi.w	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2b00      	cmp	r3, #0
 800835c:	f000 8084 	beq.w	8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008366:	d052      	beq.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8008368:	e088      	b.n	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800836a:	4b0f      	ldr	r3, [pc, #60]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 0302 	and.w	r3, r3, #2
 8008372:	2b02      	cmp	r3, #2
 8008374:	f040 8084 	bne.w	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008378:	4b0b      	ldr	r3, [pc, #44]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 0308 	and.w	r3, r3, #8
 8008380:	2b00      	cmp	r3, #0
 8008382:	d005      	beq.n	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8008384:	4b08      	ldr	r3, [pc, #32]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	091b      	lsrs	r3, r3, #4
 800838a:	f003 030f 	and.w	r3, r3, #15
 800838e:	e005      	b.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8008390:	4b05      	ldr	r3, [pc, #20]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008396:	0a1b      	lsrs	r3, r3, #8
 8008398:	f003 030f 	and.w	r3, r3, #15
 800839c:	4a03      	ldr	r2, [pc, #12]	; (80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800839e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083a2:	61fb      	str	r3, [r7, #28]
          break;
 80083a4:	e06c      	b.n	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 80083a6:	bf00      	nop
 80083a8:	40021000 	.word	0x40021000
 80083ac:	080178f0 	.word	0x080178f0
 80083b0:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80083b4:	4ba5      	ldr	r3, [pc, #660]	; (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083c0:	d160      	bne.n	8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80083c2:	4ba2      	ldr	r3, [pc, #648]	; (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083ce:	d159      	bne.n	8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80083d0:	4b9e      	ldr	r3, [pc, #632]	; (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	0a1b      	lsrs	r3, r3, #8
 80083d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083da:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	68ba      	ldr	r2, [r7, #8]
 80083e0:	fb03 f202 	mul.w	r2, r3, r2
 80083e4:	4b99      	ldr	r3, [pc, #612]	; (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	091b      	lsrs	r3, r3, #4
 80083ea:	f003 030f 	and.w	r3, r3, #15
 80083ee:	3301      	adds	r3, #1
 80083f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80083f4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80083f6:	4b95      	ldr	r3, [pc, #596]	; (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	0d5b      	lsrs	r3, r3, #21
 80083fc:	f003 0303 	and.w	r3, r3, #3
 8008400:	3301      	adds	r3, #1
 8008402:	005b      	lsls	r3, r3, #1
 8008404:	69ba      	ldr	r2, [r7, #24]
 8008406:	fbb2 f3f3 	udiv	r3, r2, r3
 800840a:	61fb      	str	r3, [r7, #28]
          break;
 800840c:	e03a      	b.n	8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800840e:	4b8f      	ldr	r3, [pc, #572]	; (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008416:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800841a:	d135      	bne.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800841c:	4b8b      	ldr	r3, [pc, #556]	; (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008428:	d12e      	bne.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800842a:	4b88      	ldr	r3, [pc, #544]	; (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	0a1b      	lsrs	r3, r3, #8
 8008430:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008434:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	fb03 f202 	mul.w	r2, r3, r2
 800843e:	4b83      	ldr	r3, [pc, #524]	; (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	091b      	lsrs	r3, r3, #4
 8008444:	f003 030f 	and.w	r3, r3, #15
 8008448:	3301      	adds	r3, #1
 800844a:	fbb2 f3f3 	udiv	r3, r2, r3
 800844e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8008450:	4b7e      	ldr	r3, [pc, #504]	; (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	0d5b      	lsrs	r3, r3, #21
 8008456:	f003 0303 	and.w	r3, r3, #3
 800845a:	3301      	adds	r3, #1
 800845c:	005b      	lsls	r3, r3, #1
 800845e:	69ba      	ldr	r2, [r7, #24]
 8008460:	fbb2 f3f3 	udiv	r3, r2, r3
 8008464:	61fb      	str	r3, [r7, #28]
          break;
 8008466:	e00f      	b.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8008468:	4b78      	ldr	r3, [pc, #480]	; (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800846a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800846e:	f003 0302 	and.w	r3, r3, #2
 8008472:	2b02      	cmp	r3, #2
 8008474:	d10a      	bne.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8008476:	4b76      	ldr	r3, [pc, #472]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008478:	61fb      	str	r3, [r7, #28]
          break;
 800847a:	e007      	b.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 800847c:	bf00      	nop
 800847e:	e3e2      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8008480:	bf00      	nop
 8008482:	e3e0      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8008484:	bf00      	nop
 8008486:	e3de      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8008488:	bf00      	nop
 800848a:	e3dc      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800848c:	bf00      	nop
      break;
 800848e:	e3da      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008490:	4b6e      	ldr	r3, [pc, #440]	; (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008496:	f003 0303 	and.w	r3, r3, #3
 800849a:	60fb      	str	r3, [r7, #12]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2b03      	cmp	r3, #3
 80084a0:	d827      	bhi.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80084a2:	a201      	add	r2, pc, #4	; (adr r2, 80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 80084a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a8:	080084b9 	.word	0x080084b9
 80084ac:	080084c1 	.word	0x080084c1
 80084b0:	080084c9 	.word	0x080084c9
 80084b4:	080084dd 	.word	0x080084dd
          frequency = HAL_RCC_GetPCLK2Freq();
 80084b8:	f7ff f87c 	bl	80075b4 <HAL_RCC_GetPCLK2Freq>
 80084bc:	61f8      	str	r0, [r7, #28]
          break;
 80084be:	e01d      	b.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 80084c0:	f7fe ffca 	bl	8007458 <HAL_RCC_GetSysClockFreq>
 80084c4:	61f8      	str	r0, [r7, #28]
          break;
 80084c6:	e019      	b.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80084c8:	4b60      	ldr	r3, [pc, #384]	; (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084d4:	d10f      	bne.n	80084f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 80084d6:	4b5f      	ldr	r3, [pc, #380]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80084d8:	61fb      	str	r3, [r7, #28]
          break;
 80084da:	e00c      	b.n	80084f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80084dc:	4b5b      	ldr	r3, [pc, #364]	; (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80084de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084e2:	f003 0302 	and.w	r3, r3, #2
 80084e6:	2b02      	cmp	r3, #2
 80084e8:	d107      	bne.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 80084ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084ee:	61fb      	str	r3, [r7, #28]
          break;
 80084f0:	e003      	b.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 80084f2:	bf00      	nop
 80084f4:	e3a8      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80084f6:	bf00      	nop
 80084f8:	e3a6      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80084fa:	bf00      	nop
        break;
 80084fc:	e3a4      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80084fe:	4b53      	ldr	r3, [pc, #332]	; (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008504:	f003 030c 	and.w	r3, r3, #12
 8008508:	60fb      	str	r3, [r7, #12]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2b0c      	cmp	r3, #12
 800850e:	d83a      	bhi.n	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008510:	a201      	add	r2, pc, #4	; (adr r2, 8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8008512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008516:	bf00      	nop
 8008518:	0800854d 	.word	0x0800854d
 800851c:	08008587 	.word	0x08008587
 8008520:	08008587 	.word	0x08008587
 8008524:	08008587 	.word	0x08008587
 8008528:	08008555 	.word	0x08008555
 800852c:	08008587 	.word	0x08008587
 8008530:	08008587 	.word	0x08008587
 8008534:	08008587 	.word	0x08008587
 8008538:	0800855d 	.word	0x0800855d
 800853c:	08008587 	.word	0x08008587
 8008540:	08008587 	.word	0x08008587
 8008544:	08008587 	.word	0x08008587
 8008548:	08008571 	.word	0x08008571
          frequency = HAL_RCC_GetPCLK1Freq();
 800854c:	f7ff f81c 	bl	8007588 <HAL_RCC_GetPCLK1Freq>
 8008550:	61f8      	str	r0, [r7, #28]
          break;
 8008552:	e01d      	b.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8008554:	f7fe ff80 	bl	8007458 <HAL_RCC_GetSysClockFreq>
 8008558:	61f8      	str	r0, [r7, #28]
          break;
 800855a:	e019      	b.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800855c:	4b3b      	ldr	r3, [pc, #236]	; (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008568:	d10f      	bne.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 800856a:	4b3a      	ldr	r3, [pc, #232]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800856c:	61fb      	str	r3, [r7, #28]
          break;
 800856e:	e00c      	b.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008570:	4b36      	ldr	r3, [pc, #216]	; (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008576:	f003 0302 	and.w	r3, r3, #2
 800857a:	2b02      	cmp	r3, #2
 800857c:	d107      	bne.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 800857e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008582:	61fb      	str	r3, [r7, #28]
          break;
 8008584:	e003      	b.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8008586:	bf00      	nop
 8008588:	e35e      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800858a:	bf00      	nop
 800858c:	e35c      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800858e:	bf00      	nop
        break;
 8008590:	e35a      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008592:	4b2e      	ldr	r3, [pc, #184]	; (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008598:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800859c:	60fb      	str	r3, [r7, #12]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2b30      	cmp	r3, #48	; 0x30
 80085a2:	d021      	beq.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2b30      	cmp	r3, #48	; 0x30
 80085a8:	d829      	bhi.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2b20      	cmp	r3, #32
 80085ae:	d011      	beq.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2b20      	cmp	r3, #32
 80085b4:	d823      	bhi.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d003      	beq.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2b10      	cmp	r3, #16
 80085c0:	d004      	beq.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 80085c2:	e01c      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 80085c4:	f7fe ffe0 	bl	8007588 <HAL_RCC_GetPCLK1Freq>
 80085c8:	61f8      	str	r0, [r7, #28]
          break;
 80085ca:	e01d      	b.n	8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80085cc:	f7fe ff44 	bl	8007458 <HAL_RCC_GetSysClockFreq>
 80085d0:	61f8      	str	r0, [r7, #28]
          break;
 80085d2:	e019      	b.n	8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80085d4:	4b1d      	ldr	r3, [pc, #116]	; (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085e0:	d10f      	bne.n	8008602 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 80085e2:	4b1c      	ldr	r3, [pc, #112]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80085e4:	61fb      	str	r3, [r7, #28]
          break;
 80085e6:	e00c      	b.n	8008602 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80085e8:	4b18      	ldr	r3, [pc, #96]	; (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80085ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ee:	f003 0302 	and.w	r3, r3, #2
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d107      	bne.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 80085f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085fa:	61fb      	str	r3, [r7, #28]
          break;
 80085fc:	e003      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 80085fe:	bf00      	nop
 8008600:	e322      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008602:	bf00      	nop
 8008604:	e320      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008606:	bf00      	nop
        break;
 8008608:	e31e      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800860a:	4b10      	ldr	r3, [pc, #64]	; (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800860c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008610:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008614:	60fb      	str	r3, [r7, #12]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2bc0      	cmp	r3, #192	; 0xc0
 800861a:	d027      	beq.n	800866c <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2bc0      	cmp	r3, #192	; 0xc0
 8008620:	d82f      	bhi.n	8008682 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2b80      	cmp	r3, #128	; 0x80
 8008626:	d017      	beq.n	8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2b80      	cmp	r3, #128	; 0x80
 800862c:	d829      	bhi.n	8008682 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d003      	beq.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2b40      	cmp	r3, #64	; 0x40
 8008638:	d004      	beq.n	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 800863a:	e022      	b.n	8008682 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800863c:	f7fe ffa4 	bl	8007588 <HAL_RCC_GetPCLK1Freq>
 8008640:	61f8      	str	r0, [r7, #28]
          break;
 8008642:	e023      	b.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8008644:	f7fe ff08 	bl	8007458 <HAL_RCC_GetSysClockFreq>
 8008648:	61f8      	str	r0, [r7, #28]
          break;
 800864a:	e01f      	b.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 800864c:	40021000 	.word	0x40021000
 8008650:	02dc6c00 	.word	0x02dc6c00
 8008654:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008658:	4b9b      	ldr	r3, [pc, #620]	; (80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008664:	d10f      	bne.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8008666:	4b99      	ldr	r3, [pc, #612]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8008668:	61fb      	str	r3, [r7, #28]
          break;
 800866a:	e00c      	b.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800866c:	4b96      	ldr	r3, [pc, #600]	; (80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800866e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008672:	f003 0302 	and.w	r3, r3, #2
 8008676:	2b02      	cmp	r3, #2
 8008678:	d107      	bne.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 800867a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800867e:	61fb      	str	r3, [r7, #28]
          break;
 8008680:	e003      	b.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8008682:	bf00      	nop
 8008684:	e2e0      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008686:	bf00      	nop
 8008688:	e2de      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800868a:	bf00      	nop
        break;
 800868c:	e2dc      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800868e:	4b8e      	ldr	r3, [pc, #568]	; (80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8008690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008694:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008698:	60fb      	str	r3, [r7, #12]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086a0:	d025      	beq.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086a8:	d82c      	bhi.n	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086b0:	d013      	beq.n	80086da <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086b8:	d824      	bhi.n	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d004      	beq.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086c6:	d004      	beq.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 80086c8:	e01c      	b.n	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 80086ca:	f7fe ff5d 	bl	8007588 <HAL_RCC_GetPCLK1Freq>
 80086ce:	61f8      	str	r0, [r7, #28]
          break;
 80086d0:	e01d      	b.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 80086d2:	f7fe fec1 	bl	8007458 <HAL_RCC_GetSysClockFreq>
 80086d6:	61f8      	str	r0, [r7, #28]
          break;
 80086d8:	e019      	b.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80086da:	4b7b      	ldr	r3, [pc, #492]	; (80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086e6:	d10f      	bne.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 80086e8:	4b78      	ldr	r3, [pc, #480]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80086ea:	61fb      	str	r3, [r7, #28]
          break;
 80086ec:	e00c      	b.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80086ee:	4b76      	ldr	r3, [pc, #472]	; (80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80086f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086f4:	f003 0302 	and.w	r3, r3, #2
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d107      	bne.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 80086fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008700:	61fb      	str	r3, [r7, #28]
          break;
 8008702:	e003      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8008704:	bf00      	nop
 8008706:	e29f      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008708:	bf00      	nop
 800870a:	e29d      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800870c:	bf00      	nop
        break;
 800870e:	e29b      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008710:	4b6d      	ldr	r3, [pc, #436]	; (80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8008712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008716:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800871a:	60fb      	str	r3, [r7, #12]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008722:	d025      	beq.n	8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800872a:	d82c      	bhi.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008732:	d013      	beq.n	800875c <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800873a:	d824      	bhi.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d004      	beq.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008748:	d004      	beq.n	8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 800874a:	e01c      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800874c:	f7fe ff1c 	bl	8007588 <HAL_RCC_GetPCLK1Freq>
 8008750:	61f8      	str	r0, [r7, #28]
          break;
 8008752:	e01d      	b.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8008754:	f7fe fe80 	bl	8007458 <HAL_RCC_GetSysClockFreq>
 8008758:	61f8      	str	r0, [r7, #28]
          break;
 800875a:	e019      	b.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800875c:	4b5a      	ldr	r3, [pc, #360]	; (80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008768:	d10f      	bne.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 800876a:	4b58      	ldr	r3, [pc, #352]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800876c:	61fb      	str	r3, [r7, #28]
          break;
 800876e:	e00c      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008770:	4b55      	ldr	r3, [pc, #340]	; (80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8008772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008776:	f003 0302 	and.w	r3, r3, #2
 800877a:	2b02      	cmp	r3, #2
 800877c:	d107      	bne.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 800877e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008782:	61fb      	str	r3, [r7, #28]
          break;
 8008784:	e003      	b.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8008786:	bf00      	nop
 8008788:	e25e      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800878a:	bf00      	nop
 800878c:	e25c      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800878e:	bf00      	nop
        break;
 8008790:	e25a      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008792:	4b4d      	ldr	r3, [pc, #308]	; (80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8008794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008798:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800879c:	60fb      	str	r3, [r7, #12]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087a4:	d007      	beq.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087ac:	d12f      	bne.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 80087ae:	f7fe fe53 	bl	8007458 <HAL_RCC_GetSysClockFreq>
 80087b2:	61f8      	str	r0, [r7, #28]
          break;
 80087b4:	e02e      	b.n	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80087b6:	4b44      	ldr	r3, [pc, #272]	; (80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087c2:	d126      	bne.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 80087c4:	4b40      	ldr	r3, [pc, #256]	; (80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d020      	beq.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80087d0:	4b3d      	ldr	r3, [pc, #244]	; (80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	0a1b      	lsrs	r3, r3, #8
 80087d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087da:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	68ba      	ldr	r2, [r7, #8]
 80087e0:	fb03 f202 	mul.w	r2, r3, r2
 80087e4:	4b38      	ldr	r3, [pc, #224]	; (80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80087e6:	691b      	ldr	r3, [r3, #16]
 80087e8:	091b      	lsrs	r3, r3, #4
 80087ea:	f003 030f 	and.w	r3, r3, #15
 80087ee:	3301      	adds	r3, #1
 80087f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087f4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80087f6:	4b34      	ldr	r3, [pc, #208]	; (80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80087f8:	691b      	ldr	r3, [r3, #16]
 80087fa:	0e5b      	lsrs	r3, r3, #25
 80087fc:	f003 0303 	and.w	r3, r3, #3
 8008800:	3301      	adds	r3, #1
 8008802:	005b      	lsls	r3, r3, #1
 8008804:	69ba      	ldr	r2, [r7, #24]
 8008806:	fbb2 f3f3 	udiv	r3, r2, r3
 800880a:	61fb      	str	r3, [r7, #28]
          break;
 800880c:	e001      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 800880e:	bf00      	nop
 8008810:	e21a      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008812:	bf00      	nop
        break;
 8008814:	e218      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8008816:	4b2c      	ldr	r3, [pc, #176]	; (80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8008818:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800881c:	f003 0304 	and.w	r3, r3, #4
 8008820:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d103      	bne.n	8008830 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8008828:	f7fe fec4 	bl	80075b4 <HAL_RCC_GetPCLK2Freq>
 800882c:	61f8      	str	r0, [r7, #28]
        break;
 800882e:	e20b      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8008830:	f7fe fe12 	bl	8007458 <HAL_RCC_GetSysClockFreq>
 8008834:	61f8      	str	r0, [r7, #28]
        break;
 8008836:	e207      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8008838:	4b23      	ldr	r3, [pc, #140]	; (80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800883a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800883e:	f003 0318 	and.w	r3, r3, #24
 8008842:	60fb      	str	r3, [r7, #12]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2b10      	cmp	r3, #16
 8008848:	d010      	beq.n	800886c <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2b10      	cmp	r3, #16
 800884e:	d834      	bhi.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d003      	beq.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2b08      	cmp	r3, #8
 800885a:	d024      	beq.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 800885c:	e02d      	b.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800885e:	69b9      	ldr	r1, [r7, #24]
 8008860:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008864:	f000 fbe2 	bl	800902c <RCCEx_GetSAIxPeriphCLKFreq>
 8008868:	61f8      	str	r0, [r7, #28]
          break;
 800886a:	e02b      	b.n	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800886c:	4b16      	ldr	r3, [pc, #88]	; (80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 0302 	and.w	r3, r3, #2
 8008874:	2b02      	cmp	r3, #2
 8008876:	d122      	bne.n	80088be <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008878:	4b13      	ldr	r3, [pc, #76]	; (80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 0308 	and.w	r3, r3, #8
 8008880:	2b00      	cmp	r3, #0
 8008882:	d005      	beq.n	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8008884:	4b10      	ldr	r3, [pc, #64]	; (80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	091b      	lsrs	r3, r3, #4
 800888a:	f003 030f 	and.w	r3, r3, #15
 800888e:	e005      	b.n	800889c <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8008890:	4b0d      	ldr	r3, [pc, #52]	; (80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8008892:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008896:	0a1b      	lsrs	r3, r3, #8
 8008898:	f003 030f 	and.w	r3, r3, #15
 800889c:	4a0c      	ldr	r2, [pc, #48]	; (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800889e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088a2:	61fb      	str	r3, [r7, #28]
          break;
 80088a4:	e00b      	b.n	80088be <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80088a6:	4b08      	ldr	r3, [pc, #32]	; (80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088b2:	d106      	bne.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 80088b4:	4b05      	ldr	r3, [pc, #20]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80088b6:	61fb      	str	r3, [r7, #28]
          break;
 80088b8:	e003      	b.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 80088ba:	bf00      	nop
 80088bc:	e1c4      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80088be:	bf00      	nop
 80088c0:	e1c2      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80088c2:	bf00      	nop
        break;
 80088c4:	e1c0      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 80088c6:	bf00      	nop
 80088c8:	40021000 	.word	0x40021000
 80088cc:	00f42400 	.word	0x00f42400
 80088d0:	080178f0 	.word	0x080178f0
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80088d4:	4b96      	ldr	r3, [pc, #600]	; (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80088d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80088de:	60fb      	str	r3, [r7, #12]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088e6:	d013      	beq.n	8008910 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088ee:	d819      	bhi.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d004      	beq.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088fc:	d004      	beq.n	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 80088fe:	e011      	b.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008900:	f7fe fe42 	bl	8007588 <HAL_RCC_GetPCLK1Freq>
 8008904:	61f8      	str	r0, [r7, #28]
          break;
 8008906:	e010      	b.n	800892a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8008908:	f7fe fda6 	bl	8007458 <HAL_RCC_GetSysClockFreq>
 800890c:	61f8      	str	r0, [r7, #28]
          break;
 800890e:	e00c      	b.n	800892a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008910:	4b87      	ldr	r3, [pc, #540]	; (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800891c:	d104      	bne.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 800891e:	4b85      	ldr	r3, [pc, #532]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8008920:	61fb      	str	r3, [r7, #28]
          break;
 8008922:	e001      	b.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8008924:	bf00      	nop
 8008926:	e18f      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008928:	bf00      	nop
        break;
 800892a:	e18d      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800892c:	4b80      	ldr	r3, [pc, #512]	; (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800892e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008932:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008936:	60fb      	str	r3, [r7, #12]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800893e:	d013      	beq.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008946:	d819      	bhi.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d004      	beq.n	8008958 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008954:	d004      	beq.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8008956:	e011      	b.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008958:	f7fe fe16 	bl	8007588 <HAL_RCC_GetPCLK1Freq>
 800895c:	61f8      	str	r0, [r7, #28]
          break;
 800895e:	e010      	b.n	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8008960:	f7fe fd7a 	bl	8007458 <HAL_RCC_GetSysClockFreq>
 8008964:	61f8      	str	r0, [r7, #28]
          break;
 8008966:	e00c      	b.n	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008968:	4b71      	ldr	r3, [pc, #452]	; (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008974:	d104      	bne.n	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8008976:	4b6f      	ldr	r3, [pc, #444]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8008978:	61fb      	str	r3, [r7, #28]
          break;
 800897a:	e001      	b.n	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 800897c:	bf00      	nop
 800897e:	e163      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008980:	bf00      	nop
        break;
 8008982:	e161      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008984:	4b6a      	ldr	r3, [pc, #424]	; (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800898a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800898e:	60fb      	str	r3, [r7, #12]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008996:	d013      	beq.n	80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800899e:	d819      	bhi.n	80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d004      	beq.n	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089ac:	d004      	beq.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 80089ae:	e011      	b.n	80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 80089b0:	f7fe fdea 	bl	8007588 <HAL_RCC_GetPCLK1Freq>
 80089b4:	61f8      	str	r0, [r7, #28]
          break;
 80089b6:	e010      	b.n	80089da <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 80089b8:	f7fe fd4e 	bl	8007458 <HAL_RCC_GetSysClockFreq>
 80089bc:	61f8      	str	r0, [r7, #28]
          break;
 80089be:	e00c      	b.n	80089da <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80089c0:	4b5b      	ldr	r3, [pc, #364]	; (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089cc:	d104      	bne.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 80089ce:	4b59      	ldr	r3, [pc, #356]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80089d0:	61fb      	str	r3, [r7, #28]
          break;
 80089d2:	e001      	b.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 80089d4:	bf00      	nop
 80089d6:	e137      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80089d8:	bf00      	nop
        break;
 80089da:	e135      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80089dc:	4b54      	ldr	r3, [pc, #336]	; (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80089de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80089e2:	f003 0303 	and.w	r3, r3, #3
 80089e6:	60fb      	str	r3, [r7, #12]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d011      	beq.n	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	d818      	bhi.n	8008a26 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d003      	beq.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d004      	beq.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8008a00:	e011      	b.n	8008a26 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008a02:	f7fe fdc1 	bl	8007588 <HAL_RCC_GetPCLK1Freq>
 8008a06:	61f8      	str	r0, [r7, #28]
          break;
 8008a08:	e010      	b.n	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8008a0a:	f7fe fd25 	bl	8007458 <HAL_RCC_GetSysClockFreq>
 8008a0e:	61f8      	str	r0, [r7, #28]
          break;
 8008a10:	e00c      	b.n	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a12:	4b47      	ldr	r3, [pc, #284]	; (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a1e:	d104      	bne.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8008a20:	4b44      	ldr	r3, [pc, #272]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8008a22:	61fb      	str	r3, [r7, #28]
          break;
 8008a24:	e001      	b.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8008a26:	bf00      	nop
 8008a28:	e10e      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008a2a:	bf00      	nop
        break;
 8008a2c:	e10c      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008a2e:	4b40      	ldr	r3, [pc, #256]	; (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a34:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008a38:	60fb      	str	r3, [r7, #12]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008a40:	d02c      	beq.n	8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008a48:	d833      	bhi.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008a50:	d01a      	beq.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008a58:	d82b      	bhi.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d004      	beq.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a66:	d004      	beq.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8008a68:	e023      	b.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008a6a:	f7fe fd8d 	bl	8007588 <HAL_RCC_GetPCLK1Freq>
 8008a6e:	61f8      	str	r0, [r7, #28]
          break;
 8008a70:	e026      	b.n	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008a72:	4b2f      	ldr	r3, [pc, #188]	; (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a78:	f003 0302 	and.w	r3, r3, #2
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d11a      	bne.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8008a80:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008a84:	61fb      	str	r3, [r7, #28]
          break;
 8008a86:	e016      	b.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a88:	4b29      	ldr	r3, [pc, #164]	; (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a94:	d111      	bne.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8008a96:	4b27      	ldr	r3, [pc, #156]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8008a98:	61fb      	str	r3, [r7, #28]
          break;
 8008a9a:	e00e      	b.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008a9c:	4b24      	ldr	r3, [pc, #144]	; (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aa2:	f003 0302 	and.w	r3, r3, #2
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d109      	bne.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8008aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008aae:	61fb      	str	r3, [r7, #28]
          break;
 8008ab0:	e005      	b.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8008ab2:	bf00      	nop
 8008ab4:	e0c8      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008ab6:	bf00      	nop
 8008ab8:	e0c6      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008aba:	bf00      	nop
 8008abc:	e0c4      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008abe:	bf00      	nop
        break;
 8008ac0:	e0c2      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008ac2:	4b1b      	ldr	r3, [pc, #108]	; (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ac8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008acc:	60fb      	str	r3, [r7, #12]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ad4:	d030      	beq.n	8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008adc:	d837      	bhi.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ae4:	d01a      	beq.n	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008aec:	d82f      	bhi.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d004      	beq.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008afa:	d004      	beq.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8008afc:	e027      	b.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008afe:	f7fe fd43 	bl	8007588 <HAL_RCC_GetPCLK1Freq>
 8008b02:	61f8      	str	r0, [r7, #28]
          break;
 8008b04:	e02a      	b.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008b06:	4b0a      	ldr	r3, [pc, #40]	; (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b0c:	f003 0302 	and.w	r3, r3, #2
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d11e      	bne.n	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8008b14:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008b18:	61fb      	str	r3, [r7, #28]
          break;
 8008b1a:	e01a      	b.n	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008b1c:	4b04      	ldr	r3, [pc, #16]	; (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b28:	d115      	bne.n	8008b56 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8008b2a:	4b02      	ldr	r3, [pc, #8]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8008b2c:	61fb      	str	r3, [r7, #28]
          break;
 8008b2e:	e012      	b.n	8008b56 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8008b30:	40021000 	.word	0x40021000
 8008b34:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008b38:	4b46      	ldr	r3, [pc, #280]	; (8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b3e:	f003 0302 	and.w	r3, r3, #2
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d109      	bne.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8008b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b4a:	61fb      	str	r3, [r7, #28]
          break;
 8008b4c:	e005      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8008b4e:	bf00      	nop
 8008b50:	e07a      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008b52:	bf00      	nop
 8008b54:	e078      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008b56:	bf00      	nop
 8008b58:	e076      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008b5a:	bf00      	nop
        break;
 8008b5c:	e074      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008b5e:	4b3d      	ldr	r3, [pc, #244]	; (8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008b60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b64:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008b68:	60fb      	str	r3, [r7, #12]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b70:	d02c      	beq.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b78:	d855      	bhi.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d004      	beq.n	8008b8a <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b86:	d004      	beq.n	8008b92 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8008b88:	e04d      	b.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8008b8a:	f7fe fc65 	bl	8007458 <HAL_RCC_GetSysClockFreq>
 8008b8e:	61f8      	str	r0, [r7, #28]
          break;
 8008b90:	e04e      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008b92:	4b30      	ldr	r3, [pc, #192]	; (8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f003 0302 	and.w	r3, r3, #2
 8008b9a:	2b02      	cmp	r3, #2
 8008b9c:	d145      	bne.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008b9e:	4b2d      	ldr	r3, [pc, #180]	; (8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f003 0308 	and.w	r3, r3, #8
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d005      	beq.n	8008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8008baa:	4b2a      	ldr	r3, [pc, #168]	; (8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	091b      	lsrs	r3, r3, #4
 8008bb0:	f003 030f 	and.w	r3, r3, #15
 8008bb4:	e005      	b.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8008bb6:	4b27      	ldr	r3, [pc, #156]	; (8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008bbc:	0a1b      	lsrs	r3, r3, #8
 8008bbe:	f003 030f 	and.w	r3, r3, #15
 8008bc2:	4a25      	ldr	r2, [pc, #148]	; (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8008bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bc8:	61fb      	str	r3, [r7, #28]
          break;
 8008bca:	e02e      	b.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008bcc:	4b21      	ldr	r3, [pc, #132]	; (8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bd8:	d129      	bne.n	8008c2e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8008bda:	4b1e      	ldr	r3, [pc, #120]	; (8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008be2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008be6:	d122      	bne.n	8008c2e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008be8:	4b1a      	ldr	r3, [pc, #104]	; (8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	0a1b      	lsrs	r3, r3, #8
 8008bee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bf2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008bf4:	69bb      	ldr	r3, [r7, #24]
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	fb03 f202 	mul.w	r2, r3, r2
 8008bfc:	4b15      	ldr	r3, [pc, #84]	; (8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	091b      	lsrs	r3, r3, #4
 8008c02:	f003 030f 	and.w	r3, r3, #15
 8008c06:	3301      	adds	r3, #1
 8008c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c0c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8008c0e:	4b11      	ldr	r3, [pc, #68]	; (8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	0d5b      	lsrs	r3, r3, #21
 8008c14:	f003 0303 	and.w	r3, r3, #3
 8008c18:	3301      	adds	r3, #1
 8008c1a:	005b      	lsls	r3, r3, #1
 8008c1c:	69ba      	ldr	r2, [r7, #24]
 8008c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c22:	61fb      	str	r3, [r7, #28]
          break;
 8008c24:	e003      	b.n	8008c2e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8008c26:	bf00      	nop
 8008c28:	e00e      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008c2a:	bf00      	nop
 8008c2c:	e00c      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008c2e:	bf00      	nop
        break;
 8008c30:	e00a      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8008c32:	bf00      	nop
 8008c34:	e008      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8008c36:	bf00      	nop
 8008c38:	e006      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8008c3a:	bf00      	nop
 8008c3c:	e004      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8008c3e:	bf00      	nop
 8008c40:	e002      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8008c42:	bf00      	nop
 8008c44:	e000      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8008c46:	bf00      	nop
    }
  }

  return(frequency);
 8008c48:	69fb      	ldr	r3, [r7, #28]
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3720      	adds	r7, #32
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	40021000 	.word	0x40021000
 8008c58:	080178f0 	.word	0x080178f0

08008c5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c66:	2300      	movs	r3, #0
 8008c68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008c6a:	4b72      	ldr	r3, [pc, #456]	; (8008e34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	f003 0303 	and.w	r3, r3, #3
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00e      	beq.n	8008c94 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008c76:	4b6f      	ldr	r3, [pc, #444]	; (8008e34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	f003 0203 	and.w	r2, r3, #3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d103      	bne.n	8008c8e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
       ||
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d142      	bne.n	8008d14 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	73fb      	strb	r3, [r7, #15]
 8008c92:	e03f      	b.n	8008d14 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2b03      	cmp	r3, #3
 8008c9a:	d018      	beq.n	8008cce <RCCEx_PLLSAI1_Config+0x72>
 8008c9c:	2b03      	cmp	r3, #3
 8008c9e:	d825      	bhi.n	8008cec <RCCEx_PLLSAI1_Config+0x90>
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d002      	beq.n	8008caa <RCCEx_PLLSAI1_Config+0x4e>
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d009      	beq.n	8008cbc <RCCEx_PLLSAI1_Config+0x60>
 8008ca8:	e020      	b.n	8008cec <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008caa:	4b62      	ldr	r3, [pc, #392]	; (8008e34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 0302 	and.w	r3, r3, #2
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d11d      	bne.n	8008cf2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008cba:	e01a      	b.n	8008cf2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008cbc:	4b5d      	ldr	r3, [pc, #372]	; (8008e34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d116      	bne.n	8008cf6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ccc:	e013      	b.n	8008cf6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008cce:	4b59      	ldr	r3, [pc, #356]	; (8008e34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d10f      	bne.n	8008cfa <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008cda:	4b56      	ldr	r3, [pc, #344]	; (8008e34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d109      	bne.n	8008cfa <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008cea:	e006      	b.n	8008cfa <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	73fb      	strb	r3, [r7, #15]
      break;
 8008cf0:	e004      	b.n	8008cfc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008cf2:	bf00      	nop
 8008cf4:	e002      	b.n	8008cfc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008cf6:	bf00      	nop
 8008cf8:	e000      	b.n	8008cfc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008cfa:	bf00      	nop
    }

    if(status == HAL_OK)
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d108      	bne.n	8008d14 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8008d02:	4b4c      	ldr	r3, [pc, #304]	; (8008e34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	f023 0203 	bic.w	r2, r3, #3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4949      	ldr	r1, [pc, #292]	; (8008e34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008d10:	4313      	orrs	r3, r2
 8008d12:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008d14:	7bfb      	ldrb	r3, [r7, #15]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f040 8086 	bne.w	8008e28 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008d1c:	4b45      	ldr	r3, [pc, #276]	; (8008e34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a44      	ldr	r2, [pc, #272]	; (8008e34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008d22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008d26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d28:	f7fb f93a 	bl	8003fa0 <HAL_GetTick>
 8008d2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008d2e:	e009      	b.n	8008d44 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008d30:	f7fb f936 	bl	8003fa0 <HAL_GetTick>
 8008d34:	4602      	mov	r2, r0
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d902      	bls.n	8008d44 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	73fb      	strb	r3, [r7, #15]
        break;
 8008d42:	e005      	b.n	8008d50 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008d44:	4b3b      	ldr	r3, [pc, #236]	; (8008e34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d1ef      	bne.n	8008d30 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d168      	bne.n	8008e28 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d113      	bne.n	8008d84 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008d5c:	4b35      	ldr	r3, [pc, #212]	; (8008e34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008d5e:	691a      	ldr	r2, [r3, #16]
 8008d60:	4b35      	ldr	r3, [pc, #212]	; (8008e38 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008d62:	4013      	ands	r3, r2
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	6892      	ldr	r2, [r2, #8]
 8008d68:	0211      	lsls	r1, r2, #8
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	68d2      	ldr	r2, [r2, #12]
 8008d6e:	06d2      	lsls	r2, r2, #27
 8008d70:	4311      	orrs	r1, r2
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	6852      	ldr	r2, [r2, #4]
 8008d76:	3a01      	subs	r2, #1
 8008d78:	0112      	lsls	r2, r2, #4
 8008d7a:	430a      	orrs	r2, r1
 8008d7c:	492d      	ldr	r1, [pc, #180]	; (8008e34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	610b      	str	r3, [r1, #16]
 8008d82:	e02d      	b.n	8008de0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d115      	bne.n	8008db6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008d8a:	4b2a      	ldr	r3, [pc, #168]	; (8008e34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008d8c:	691a      	ldr	r2, [r3, #16]
 8008d8e:	4b2b      	ldr	r3, [pc, #172]	; (8008e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d90:	4013      	ands	r3, r2
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	6892      	ldr	r2, [r2, #8]
 8008d96:	0211      	lsls	r1, r2, #8
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	6912      	ldr	r2, [r2, #16]
 8008d9c:	0852      	lsrs	r2, r2, #1
 8008d9e:	3a01      	subs	r2, #1
 8008da0:	0552      	lsls	r2, r2, #21
 8008da2:	4311      	orrs	r1, r2
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	6852      	ldr	r2, [r2, #4]
 8008da8:	3a01      	subs	r2, #1
 8008daa:	0112      	lsls	r2, r2, #4
 8008dac:	430a      	orrs	r2, r1
 8008dae:	4921      	ldr	r1, [pc, #132]	; (8008e34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008db0:	4313      	orrs	r3, r2
 8008db2:	610b      	str	r3, [r1, #16]
 8008db4:	e014      	b.n	8008de0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008db6:	4b1f      	ldr	r3, [pc, #124]	; (8008e34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008db8:	691a      	ldr	r2, [r3, #16]
 8008dba:	4b21      	ldr	r3, [pc, #132]	; (8008e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008dbc:	4013      	ands	r3, r2
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	6892      	ldr	r2, [r2, #8]
 8008dc2:	0211      	lsls	r1, r2, #8
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	6952      	ldr	r2, [r2, #20]
 8008dc8:	0852      	lsrs	r2, r2, #1
 8008dca:	3a01      	subs	r2, #1
 8008dcc:	0652      	lsls	r2, r2, #25
 8008dce:	4311      	orrs	r1, r2
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	6852      	ldr	r2, [r2, #4]
 8008dd4:	3a01      	subs	r2, #1
 8008dd6:	0112      	lsls	r2, r2, #4
 8008dd8:	430a      	orrs	r2, r1
 8008dda:	4916      	ldr	r1, [pc, #88]	; (8008e34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008de0:	4b14      	ldr	r3, [pc, #80]	; (8008e34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a13      	ldr	r2, [pc, #76]	; (8008e34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008de6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008dea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dec:	f7fb f8d8 	bl	8003fa0 <HAL_GetTick>
 8008df0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008df2:	e009      	b.n	8008e08 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008df4:	f7fb f8d4 	bl	8003fa0 <HAL_GetTick>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	1ad3      	subs	r3, r2, r3
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d902      	bls.n	8008e08 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8008e02:	2303      	movs	r3, #3
 8008e04:	73fb      	strb	r3, [r7, #15]
          break;
 8008e06:	e005      	b.n	8008e14 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008e08:	4b0a      	ldr	r3, [pc, #40]	; (8008e34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d0ef      	beq.n	8008df4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008e14:	7bfb      	ldrb	r3, [r7, #15]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d106      	bne.n	8008e28 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008e1a:	4b06      	ldr	r3, [pc, #24]	; (8008e34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008e1c:	691a      	ldr	r2, [r3, #16]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	699b      	ldr	r3, [r3, #24]
 8008e22:	4904      	ldr	r1, [pc, #16]	; (8008e34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008e24:	4313      	orrs	r3, r2
 8008e26:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	40021000 	.word	0x40021000
 8008e38:	07ff800f 	.word	0x07ff800f
 8008e3c:	ff9f800f 	.word	0xff9f800f
 8008e40:	f9ff800f 	.word	0xf9ff800f

08008e44 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008e52:	4b72      	ldr	r3, [pc, #456]	; (800901c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	f003 0303 	and.w	r3, r3, #3
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00e      	beq.n	8008e7c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008e5e:	4b6f      	ldr	r3, [pc, #444]	; (800901c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	f003 0203 	and.w	r2, r3, #3
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d103      	bne.n	8008e76 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
       ||
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d142      	bne.n	8008efc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	73fb      	strb	r3, [r7, #15]
 8008e7a:	e03f      	b.n	8008efc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2b03      	cmp	r3, #3
 8008e82:	d018      	beq.n	8008eb6 <RCCEx_PLLSAI2_Config+0x72>
 8008e84:	2b03      	cmp	r3, #3
 8008e86:	d825      	bhi.n	8008ed4 <RCCEx_PLLSAI2_Config+0x90>
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d002      	beq.n	8008e92 <RCCEx_PLLSAI2_Config+0x4e>
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d009      	beq.n	8008ea4 <RCCEx_PLLSAI2_Config+0x60>
 8008e90:	e020      	b.n	8008ed4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008e92:	4b62      	ldr	r3, [pc, #392]	; (800901c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f003 0302 	and.w	r3, r3, #2
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d11d      	bne.n	8008eda <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ea2:	e01a      	b.n	8008eda <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008ea4:	4b5d      	ldr	r3, [pc, #372]	; (800901c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d116      	bne.n	8008ede <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008eb4:	e013      	b.n	8008ede <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008eb6:	4b59      	ldr	r3, [pc, #356]	; (800901c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d10f      	bne.n	8008ee2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008ec2:	4b56      	ldr	r3, [pc, #344]	; (800901c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d109      	bne.n	8008ee2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008ed2:	e006      	b.n	8008ee2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ed8:	e004      	b.n	8008ee4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008eda:	bf00      	nop
 8008edc:	e002      	b.n	8008ee4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008ede:	bf00      	nop
 8008ee0:	e000      	b.n	8008ee4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008ee2:	bf00      	nop
    }

    if(status == HAL_OK)
 8008ee4:	7bfb      	ldrb	r3, [r7, #15]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d108      	bne.n	8008efc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8008eea:	4b4c      	ldr	r3, [pc, #304]	; (800901c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	f023 0203 	bic.w	r2, r3, #3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4949      	ldr	r1, [pc, #292]	; (800901c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008efc:	7bfb      	ldrb	r3, [r7, #15]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	f040 8086 	bne.w	8009010 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008f04:	4b45      	ldr	r3, [pc, #276]	; (800901c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a44      	ldr	r2, [pc, #272]	; (800901c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008f0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f10:	f7fb f846 	bl	8003fa0 <HAL_GetTick>
 8008f14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008f16:	e009      	b.n	8008f2c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008f18:	f7fb f842 	bl	8003fa0 <HAL_GetTick>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	1ad3      	subs	r3, r2, r3
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d902      	bls.n	8008f2c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008f26:	2303      	movs	r3, #3
 8008f28:	73fb      	strb	r3, [r7, #15]
        break;
 8008f2a:	e005      	b.n	8008f38 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008f2c:	4b3b      	ldr	r3, [pc, #236]	; (800901c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1ef      	bne.n	8008f18 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d168      	bne.n	8009010 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d113      	bne.n	8008f6c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008f44:	4b35      	ldr	r3, [pc, #212]	; (800901c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008f46:	695a      	ldr	r2, [r3, #20]
 8008f48:	4b35      	ldr	r3, [pc, #212]	; (8009020 <RCCEx_PLLSAI2_Config+0x1dc>)
 8008f4a:	4013      	ands	r3, r2
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	6892      	ldr	r2, [r2, #8]
 8008f50:	0211      	lsls	r1, r2, #8
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	68d2      	ldr	r2, [r2, #12]
 8008f56:	06d2      	lsls	r2, r2, #27
 8008f58:	4311      	orrs	r1, r2
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	6852      	ldr	r2, [r2, #4]
 8008f5e:	3a01      	subs	r2, #1
 8008f60:	0112      	lsls	r2, r2, #4
 8008f62:	430a      	orrs	r2, r1
 8008f64:	492d      	ldr	r1, [pc, #180]	; (800901c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008f66:	4313      	orrs	r3, r2
 8008f68:	614b      	str	r3, [r1, #20]
 8008f6a:	e02d      	b.n	8008fc8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d115      	bne.n	8008f9e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008f72:	4b2a      	ldr	r3, [pc, #168]	; (800901c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008f74:	695a      	ldr	r2, [r3, #20]
 8008f76:	4b2b      	ldr	r3, [pc, #172]	; (8009024 <RCCEx_PLLSAI2_Config+0x1e0>)
 8008f78:	4013      	ands	r3, r2
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	6892      	ldr	r2, [r2, #8]
 8008f7e:	0211      	lsls	r1, r2, #8
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	6912      	ldr	r2, [r2, #16]
 8008f84:	0852      	lsrs	r2, r2, #1
 8008f86:	3a01      	subs	r2, #1
 8008f88:	0552      	lsls	r2, r2, #21
 8008f8a:	4311      	orrs	r1, r2
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	6852      	ldr	r2, [r2, #4]
 8008f90:	3a01      	subs	r2, #1
 8008f92:	0112      	lsls	r2, r2, #4
 8008f94:	430a      	orrs	r2, r1
 8008f96:	4921      	ldr	r1, [pc, #132]	; (800901c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	614b      	str	r3, [r1, #20]
 8008f9c:	e014      	b.n	8008fc8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008f9e:	4b1f      	ldr	r3, [pc, #124]	; (800901c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008fa0:	695a      	ldr	r2, [r3, #20]
 8008fa2:	4b21      	ldr	r3, [pc, #132]	; (8009028 <RCCEx_PLLSAI2_Config+0x1e4>)
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	6892      	ldr	r2, [r2, #8]
 8008faa:	0211      	lsls	r1, r2, #8
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	6952      	ldr	r2, [r2, #20]
 8008fb0:	0852      	lsrs	r2, r2, #1
 8008fb2:	3a01      	subs	r2, #1
 8008fb4:	0652      	lsls	r2, r2, #25
 8008fb6:	4311      	orrs	r1, r2
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	6852      	ldr	r2, [r2, #4]
 8008fbc:	3a01      	subs	r2, #1
 8008fbe:	0112      	lsls	r2, r2, #4
 8008fc0:	430a      	orrs	r2, r1
 8008fc2:	4916      	ldr	r1, [pc, #88]	; (800901c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008fc8:	4b14      	ldr	r3, [pc, #80]	; (800901c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a13      	ldr	r2, [pc, #76]	; (800901c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fd4:	f7fa ffe4 	bl	8003fa0 <HAL_GetTick>
 8008fd8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008fda:	e009      	b.n	8008ff0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008fdc:	f7fa ffe0 	bl	8003fa0 <HAL_GetTick>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d902      	bls.n	8008ff0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8008fea:	2303      	movs	r3, #3
 8008fec:	73fb      	strb	r3, [r7, #15]
          break;
 8008fee:	e005      	b.n	8008ffc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008ff0:	4b0a      	ldr	r3, [pc, #40]	; (800901c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d0ef      	beq.n	8008fdc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008ffc:	7bfb      	ldrb	r3, [r7, #15]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d106      	bne.n	8009010 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009002:	4b06      	ldr	r3, [pc, #24]	; (800901c <RCCEx_PLLSAI2_Config+0x1d8>)
 8009004:	695a      	ldr	r2, [r3, #20]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	699b      	ldr	r3, [r3, #24]
 800900a:	4904      	ldr	r1, [pc, #16]	; (800901c <RCCEx_PLLSAI2_Config+0x1d8>)
 800900c:	4313      	orrs	r3, r2
 800900e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009010:	7bfb      	ldrb	r3, [r7, #15]
}
 8009012:	4618      	mov	r0, r3
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	40021000 	.word	0x40021000
 8009020:	07ff800f 	.word	0x07ff800f
 8009024:	ff9f800f 	.word	0xff9f800f
 8009028:	f9ff800f 	.word	0xf9ff800f

0800902c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800902c:	b480      	push	{r7}
 800902e:	b089      	sub	sp, #36	; 0x24
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8009036:	2300      	movs	r3, #0
 8009038:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800903a:	2300      	movs	r3, #0
 800903c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800903e:	2300      	movs	r3, #0
 8009040:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009048:	d10b      	bne.n	8009062 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800904a:	4b7e      	ldr	r3, [pc, #504]	; (8009244 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800904c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009050:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8009054:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	2b60      	cmp	r3, #96	; 0x60
 800905a:	d112      	bne.n	8009082 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800905c:	4b7a      	ldr	r3, [pc, #488]	; (8009248 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800905e:	61fb      	str	r3, [r7, #28]
 8009060:	e00f      	b.n	8009082 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009068:	d10b      	bne.n	8009082 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800906a:	4b76      	ldr	r3, [pc, #472]	; (8009244 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800906c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009070:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009074:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800907c:	d101      	bne.n	8009082 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800907e:	4b72      	ldr	r3, [pc, #456]	; (8009248 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8009080:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	2b00      	cmp	r3, #0
 8009086:	f040 80d6 	bne.w	8009236 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	2b40      	cmp	r3, #64	; 0x40
 8009092:	d003      	beq.n	800909c <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8009094:	69bb      	ldr	r3, [r7, #24]
 8009096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800909a:	d13b      	bne.n	8009114 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800909c:	4b69      	ldr	r3, [pc, #420]	; (8009244 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090a8:	f040 80c4 	bne.w	8009234 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80090ac:	4b65      	ldr	r3, [pc, #404]	; (8009244 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f000 80bd 	beq.w	8009234 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80090ba:	4b62      	ldr	r3, [pc, #392]	; (8009244 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80090bc:	68db      	ldr	r3, [r3, #12]
 80090be:	091b      	lsrs	r3, r3, #4
 80090c0:	f003 030f 	and.w	r3, r3, #15
 80090c4:	3301      	adds	r3, #1
 80090c6:	693a      	ldr	r2, [r7, #16]
 80090c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80090cc:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80090ce:	4b5d      	ldr	r3, [pc, #372]	; (8009244 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	0a1b      	lsrs	r3, r3, #8
 80090d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090d8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80090da:	4b5a      	ldr	r3, [pc, #360]	; (8009244 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	0edb      	lsrs	r3, r3, #27
 80090e0:	f003 031f 	and.w	r3, r3, #31
 80090e4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d10a      	bne.n	8009102 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80090ec:	4b55      	ldr	r3, [pc, #340]	; (8009244 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d002      	beq.n	80090fe <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 80090f8:	2311      	movs	r3, #17
 80090fa:	617b      	str	r3, [r7, #20]
 80090fc:	e001      	b.n	8009102 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 80090fe:	2307      	movs	r3, #7
 8009100:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	fb03 f202 	mul.w	r2, r3, r2
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009110:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8009112:	e08f      	b.n	8009234 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d13a      	bne.n	8009190 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800911a:	4b4a      	ldr	r3, [pc, #296]	; (8009244 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009122:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009126:	f040 8086 	bne.w	8009236 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800912a:	4b46      	ldr	r3, [pc, #280]	; (8009244 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009132:	2b00      	cmp	r3, #0
 8009134:	d07f      	beq.n	8009236 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009136:	4b43      	ldr	r3, [pc, #268]	; (8009244 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009138:	691b      	ldr	r3, [r3, #16]
 800913a:	091b      	lsrs	r3, r3, #4
 800913c:	f003 030f 	and.w	r3, r3, #15
 8009140:	3301      	adds	r3, #1
 8009142:	693a      	ldr	r2, [r7, #16]
 8009144:	fbb2 f3f3 	udiv	r3, r2, r3
 8009148:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800914a:	4b3e      	ldr	r3, [pc, #248]	; (8009244 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800914c:	691b      	ldr	r3, [r3, #16]
 800914e:	0a1b      	lsrs	r3, r3, #8
 8009150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009154:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8009156:	4b3b      	ldr	r3, [pc, #236]	; (8009244 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009158:	691b      	ldr	r3, [r3, #16]
 800915a:	0edb      	lsrs	r3, r3, #27
 800915c:	f003 031f 	and.w	r3, r3, #31
 8009160:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d10a      	bne.n	800917e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8009168:	4b36      	ldr	r3, [pc, #216]	; (8009244 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800916a:	691b      	ldr	r3, [r3, #16]
 800916c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009170:	2b00      	cmp	r3, #0
 8009172:	d002      	beq.n	800917a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8009174:	2311      	movs	r3, #17
 8009176:	617b      	str	r3, [r7, #20]
 8009178:	e001      	b.n	800917e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800917a:	2307      	movs	r3, #7
 800917c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	fb03 f202 	mul.w	r2, r3, r2
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	fbb2 f3f3 	udiv	r3, r2, r3
 800918c:	61fb      	str	r3, [r7, #28]
 800918e:	e052      	b.n	8009236 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	2b80      	cmp	r3, #128	; 0x80
 8009194:	d003      	beq.n	800919e <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800919c:	d109      	bne.n	80091b2 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800919e:	4b29      	ldr	r3, [pc, #164]	; (8009244 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091aa:	d144      	bne.n	8009236 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80091ac:	4b27      	ldr	r3, [pc, #156]	; (800924c <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80091ae:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80091b0:	e041      	b.n	8009236 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	2b20      	cmp	r3, #32
 80091b6:	d003      	beq.n	80091c0 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80091b8:	69bb      	ldr	r3, [r7, #24]
 80091ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091be:	d13a      	bne.n	8009236 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80091c0:	4b20      	ldr	r3, [pc, #128]	; (8009244 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091cc:	d133      	bne.n	8009236 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80091ce:	4b1d      	ldr	r3, [pc, #116]	; (8009244 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80091d0:	695b      	ldr	r3, [r3, #20]
 80091d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d02d      	beq.n	8009236 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80091da:	4b1a      	ldr	r3, [pc, #104]	; (8009244 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80091dc:	695b      	ldr	r3, [r3, #20]
 80091de:	091b      	lsrs	r3, r3, #4
 80091e0:	f003 030f 	and.w	r3, r3, #15
 80091e4:	3301      	adds	r3, #1
 80091e6:	693a      	ldr	r2, [r7, #16]
 80091e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80091ec:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80091ee:	4b15      	ldr	r3, [pc, #84]	; (8009244 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80091f0:	695b      	ldr	r3, [r3, #20]
 80091f2:	0a1b      	lsrs	r3, r3, #8
 80091f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091f8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80091fa:	4b12      	ldr	r3, [pc, #72]	; (8009244 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80091fc:	695b      	ldr	r3, [r3, #20]
 80091fe:	0edb      	lsrs	r3, r3, #27
 8009200:	f003 031f 	and.w	r3, r3, #31
 8009204:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d10a      	bne.n	8009222 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800920c:	4b0d      	ldr	r3, [pc, #52]	; (8009244 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800920e:	695b      	ldr	r3, [r3, #20]
 8009210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009214:	2b00      	cmp	r3, #0
 8009216:	d002      	beq.n	800921e <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8009218:	2311      	movs	r3, #17
 800921a:	617b      	str	r3, [r7, #20]
 800921c:	e001      	b.n	8009222 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800921e:	2307      	movs	r3, #7
 8009220:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	68fa      	ldr	r2, [r7, #12]
 8009226:	fb03 f202 	mul.w	r2, r3, r2
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009230:	61fb      	str	r3, [r7, #28]
 8009232:	e000      	b.n	8009236 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8009234:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8009236:	69fb      	ldr	r3, [r7, #28]
}
 8009238:	4618      	mov	r0, r3
 800923a:	3724      	adds	r7, #36	; 0x24
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr
 8009244:	40021000 	.word	0x40021000
 8009248:	001fff68 	.word	0x001fff68
 800924c:	00f42400 	.word	0x00f42400

08009250 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b08a      	sub	sp, #40	; 0x28
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d101      	bne.n	8009262 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	e078      	b.n	8009354 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009268:	b2db      	uxtb	r3, r3
 800926a:	2b00      	cmp	r3, #0
 800926c:	d105      	bne.n	800927a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f7fa fbb5 	bl	80039e4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2203      	movs	r2, #3
 800927e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 f86a 	bl	800935c <HAL_SD_InitCard>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d001      	beq.n	8009292 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e060      	b.n	8009354 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009292:	f107 0308 	add.w	r3, r7, #8
 8009296:	4619      	mov	r1, r3
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 fdcd 	bl	8009e38 <HAL_SD_GetCardStatus>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d001      	beq.n	80092a8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	e055      	b.n	8009354 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80092a8:	7e3b      	ldrb	r3, [r7, #24]
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80092ae:	7e7b      	ldrb	r3, [r7, #25]
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d10a      	bne.n	80092d2 <HAL_SD_Init+0x82>
 80092bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d102      	bne.n	80092c8 <HAL_SD_Init+0x78>
 80092c2:	6a3b      	ldr	r3, [r7, #32]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d004      	beq.n	80092d2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80092d0:	e00b      	b.n	80092ea <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d104      	bne.n	80092e4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80092e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80092e2:	e002      	b.n	80092ea <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	4619      	mov	r1, r3
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 fe83 	bl	8009ffc <HAL_SD_ConfigWideBusOperation>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d001      	beq.n	8009300 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	e029      	b.n	8009354 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009300:	f7fa fe4e 	bl	8003fa0 <HAL_GetTick>
 8009304:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009306:	e014      	b.n	8009332 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8009308:	f7fa fe4a 	bl	8003fa0 <HAL_GetTick>
 800930c:	4602      	mov	r2, r0
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	1ad3      	subs	r3, r2, r3
 8009312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009316:	d10c      	bne.n	8009332 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800931e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800932e:	2303      	movs	r3, #3
 8009330:	e010      	b.n	8009354 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 ff76 	bl	800a224 <HAL_SD_GetCardState>
 8009338:	4603      	mov	r3, r0
 800933a:	2b04      	cmp	r3, #4
 800933c:	d1e4      	bne.n	8009308 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2201      	movs	r2, #1
 800934e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009352:	2300      	movs	r3, #0
}
 8009354:	4618      	mov	r0, r3
 8009356:	3728      	adds	r7, #40	; 0x28
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800935c:	b5b0      	push	{r4, r5, r7, lr}
 800935e:	b08e      	sub	sp, #56	; 0x38
 8009360:	af04      	add	r7, sp, #16
 8009362:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009364:	2300      	movs	r3, #0
 8009366:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009368:	2300      	movs	r3, #0
 800936a:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800936c:	2300      	movs	r3, #0
 800936e:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009370:	2300      	movs	r3, #0
 8009372:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8009374:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009378:	f7fe fd4e 	bl	8007e18 <HAL_RCCEx_GetPeriphCLKFreq>
 800937c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800937e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009380:	2b00      	cmp	r3, #0
 8009382:	d109      	bne.n	8009398 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2201      	movs	r2, #1
 8009388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009392:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009394:	2301      	movs	r3, #1
 8009396:	e079      	b.n	800948c <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939a:	0a1b      	lsrs	r3, r3, #8
 800939c:	4a3d      	ldr	r2, [pc, #244]	; (8009494 <HAL_SD_InitCard+0x138>)
 800939e:	fba2 2303 	umull	r2, r3, r2, r3
 80093a2:	091b      	lsrs	r3, r3, #4
 80093a4:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	699b      	ldr	r3, [r3, #24]
 80093aa:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	699b      	ldr	r3, [r3, #24]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d107      	bne.n	80093c4 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f042 0210 	orr.w	r2, r2, #16
 80093c2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681d      	ldr	r5, [r3, #0]
 80093c8:	466c      	mov	r4, sp
 80093ca:	f107 0314 	add.w	r3, r7, #20
 80093ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80093d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80093d6:	f107 0308 	add.w	r3, r7, #8
 80093da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80093dc:	4628      	mov	r0, r5
 80093de:	f003 fd1b 	bl	800ce18 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4618      	mov	r0, r3
 80093e8:	f003 fd5e 	bl	800cea8 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	005b      	lsls	r3, r3, #1
 80093f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80093f6:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80093f8:	4a27      	ldr	r2, [pc, #156]	; (8009498 <HAL_SD_InitCard+0x13c>)
 80093fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009400:	3301      	adds	r3, #1
 8009402:	4618      	mov	r0, r3
 8009404:	f7fa fdd8 	bl	8003fb8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 ffeb 	bl	800a3e4 <SD_PowerON>
 800940e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009410:	6a3b      	ldr	r3, [r7, #32]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00b      	beq.n	800942e <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2201      	movs	r2, #1
 800941a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009422:	6a3b      	ldr	r3, [r7, #32]
 8009424:	431a      	orrs	r2, r3
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	e02e      	b.n	800948c <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 ff18 	bl	800a264 <SD_InitCard>
 8009434:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009436:	6a3b      	ldr	r3, [r7, #32]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00b      	beq.n	8009454 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009448:	6a3b      	ldr	r3, [r7, #32]
 800944a:	431a      	orrs	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009450:	2301      	movs	r3, #1
 8009452:	e01b      	b.n	800948c <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f44f 7100 	mov.w	r1, #512	; 0x200
 800945c:	4618      	mov	r0, r3
 800945e:	f003 fdb9 	bl	800cfd4 <SDMMC_CmdBlockLength>
 8009462:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009464:	6a3b      	ldr	r3, [r7, #32]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d00f      	beq.n	800948a <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a0b      	ldr	r2, [pc, #44]	; (800949c <HAL_SD_InitCard+0x140>)
 8009470:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009476:	6a3b      	ldr	r3, [r7, #32]
 8009478:	431a      	orrs	r2, r3
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2201      	movs	r2, #1
 8009482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	e000      	b.n	800948c <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3728      	adds	r7, #40	; 0x28
 8009490:	46bd      	mov	sp, r7
 8009492:	bdb0      	pop	{r4, r5, r7, pc}
 8009494:	014f8b59 	.word	0x014f8b59
 8009498:	00012110 	.word	0x00012110
 800949c:	1fe00fff 	.word	0x1fe00fff

080094a0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b092      	sub	sp, #72	; 0x48
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	607a      	str	r2, [r7, #4]
 80094ac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80094ae:	f7fa fd77 	bl	8003fa0 <HAL_GetTick>
 80094b2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d107      	bne.n	80094d2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	e170      	b.n	80097b4 <HAL_SD_ReadBlocks+0x314>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	2b01      	cmp	r3, #1
 80094dc:	f040 8163 	bne.w	80097a6 <HAL_SD_ReadBlocks+0x306>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2200      	movs	r2, #0
 80094e4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80094e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	441a      	add	r2, r3
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d907      	bls.n	8009504 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	e157      	b.n	80097b4 <HAL_SD_ReadBlocks+0x314>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2203      	movs	r2, #3
 8009508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2200      	movs	r2, #0
 8009512:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009518:	2b01      	cmp	r3, #1
 800951a:	d002      	beq.n	8009522 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800951c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951e:	025b      	lsls	r3, r3, #9
 8009520:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009526:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	025b      	lsls	r3, r3, #9
 800952c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800952e:	2390      	movs	r3, #144	; 0x90
 8009530:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009532:	2302      	movs	r3, #2
 8009534:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009536:	2300      	movs	r3, #0
 8009538:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800953a:	2300      	movs	r3, #0
 800953c:	62bb      	str	r3, [r7, #40]	; 0x28
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f107 0214 	add.w	r2, r7, #20
 8009546:	4611      	mov	r1, r2
 8009548:	4618      	mov	r0, r3
 800954a:	f003 fd17 	bl	800cf7c <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	68da      	ldr	r2, [r3, #12]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800955c:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	2b01      	cmp	r3, #1
 8009562:	d90a      	bls.n	800957a <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2202      	movs	r2, #2
 8009568:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009570:	4618      	mov	r0, r3
 8009572:	f003 fd75 	bl	800d060 <SDMMC_CmdReadMultiBlock>
 8009576:	6478      	str	r0, [r7, #68]	; 0x44
 8009578:	e009      	b.n	800958e <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2201      	movs	r2, #1
 800957e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009586:	4618      	mov	r0, r3
 8009588:	f003 fd47 	bl	800d01a <SDMMC_CmdReadSingleBlock>
 800958c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800958e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009590:	2b00      	cmp	r3, #0
 8009592:	d012      	beq.n	80095ba <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a88      	ldr	r2, [pc, #544]	; (80097bc <HAL_SD_ReadBlocks+0x31c>)
 800959a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095a2:	431a      	orrs	r2, r3
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2200      	movs	r2, #0
 80095b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	e0fc      	b.n	80097b4 <HAL_SD_ReadBlocks+0x314>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80095be:	e061      	b.n	8009684 <HAL_SD_ReadBlocks+0x1e4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d03c      	beq.n	8009648 <HAL_SD_ReadBlocks+0x1a8>
 80095ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d039      	beq.n	8009648 <HAL_SD_ReadBlocks+0x1a8>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80095d4:	2300      	movs	r3, #0
 80095d6:	643b      	str	r3, [r7, #64]	; 0x40
 80095d8:	e033      	b.n	8009642 <HAL_SD_ReadBlocks+0x1a2>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4618      	mov	r0, r3
 80095e0:	f003 fc44 	bl	800ce6c <SDMMC_ReadFIFO>
 80095e4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80095e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e8:	b2da      	uxtb	r2, r3
 80095ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ec:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80095ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095f0:	3301      	adds	r3, #1
 80095f2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80095f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095f6:	3b01      	subs	r3, #1
 80095f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80095fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fc:	0a1b      	lsrs	r3, r3, #8
 80095fe:	b2da      	uxtb	r2, r3
 8009600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009602:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009606:	3301      	adds	r3, #1
 8009608:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800960a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800960c:	3b01      	subs	r3, #1
 800960e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009612:	0c1b      	lsrs	r3, r3, #16
 8009614:	b2da      	uxtb	r2, r3
 8009616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009618:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800961a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800961c:	3301      	adds	r3, #1
 800961e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009622:	3b01      	subs	r3, #1
 8009624:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009628:	0e1b      	lsrs	r3, r3, #24
 800962a:	b2da      	uxtb	r2, r3
 800962c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800962e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009632:	3301      	adds	r3, #1
 8009634:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009638:	3b01      	subs	r3, #1
 800963a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800963c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800963e:	3301      	adds	r3, #1
 8009640:	643b      	str	r3, [r7, #64]	; 0x40
 8009642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009644:	2b07      	cmp	r3, #7
 8009646:	d9c8      	bls.n	80095da <HAL_SD_ReadBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009648:	f7fa fcaa 	bl	8003fa0 <HAL_GetTick>
 800964c:	4602      	mov	r2, r0
 800964e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009650:	1ad3      	subs	r3, r2, r3
 8009652:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009654:	429a      	cmp	r2, r3
 8009656:	d902      	bls.n	800965e <HAL_SD_ReadBlocks+0x1be>
 8009658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800965a:	2b00      	cmp	r3, #0
 800965c:	d112      	bne.n	8009684 <HAL_SD_ReadBlocks+0x1e4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a56      	ldr	r2, [pc, #344]	; (80097bc <HAL_SD_ReadBlocks+0x31c>)
 8009664:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800966a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2201      	movs	r2, #1
 8009676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2200      	movs	r2, #0
 800967e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009680:	2303      	movs	r3, #3
 8009682:	e097      	b.n	80097b4 <HAL_SD_ReadBlocks+0x314>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800968a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800968e:	2b00      	cmp	r3, #0
 8009690:	d096      	beq.n	80095c0 <HAL_SD_ReadBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	68da      	ldr	r2, [r3, #12]
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096a0:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d022      	beq.n	80096f6 <HAL_SD_ReadBlocks+0x256>
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d91f      	bls.n	80096f6 <HAL_SD_ReadBlocks+0x256>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ba:	2b03      	cmp	r3, #3
 80096bc:	d01b      	beq.n	80096f6 <HAL_SD_ReadBlocks+0x256>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4618      	mov	r0, r3
 80096c4:	f003 fd36 	bl	800d134 <SDMMC_CmdStopTransfer>
 80096c8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80096ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d012      	beq.n	80096f6 <HAL_SD_ReadBlocks+0x256>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a39      	ldr	r2, [pc, #228]	; (80097bc <HAL_SD_ReadBlocks+0x31c>)
 80096d6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096de:	431a      	orrs	r2, r3
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2201      	movs	r2, #1
 80096e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2200      	movs	r2, #0
 80096f0:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	e05e      	b.n	80097b4 <HAL_SD_ReadBlocks+0x314>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096fc:	f003 0308 	and.w	r3, r3, #8
 8009700:	2b00      	cmp	r3, #0
 8009702:	d012      	beq.n	800972a <HAL_SD_ReadBlocks+0x28a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a2c      	ldr	r2, [pc, #176]	; (80097bc <HAL_SD_ReadBlocks+0x31c>)
 800970a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009710:	f043 0208 	orr.w	r2, r3, #8
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2200      	movs	r2, #0
 8009724:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e044      	b.n	80097b4 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009730:	f003 0302 	and.w	r3, r3, #2
 8009734:	2b00      	cmp	r3, #0
 8009736:	d012      	beq.n	800975e <HAL_SD_ReadBlocks+0x2be>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a1f      	ldr	r2, [pc, #124]	; (80097bc <HAL_SD_ReadBlocks+0x31c>)
 800973e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009744:	f043 0202 	orr.w	r2, r3, #2
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e02a      	b.n	80097b4 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009764:	f003 0320 	and.w	r3, r3, #32
 8009768:	2b00      	cmp	r3, #0
 800976a:	d012      	beq.n	8009792 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a12      	ldr	r2, [pc, #72]	; (80097bc <HAL_SD_ReadBlocks+0x31c>)
 8009772:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009778:	f043 0220 	orr.w	r2, r3, #32
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2200      	movs	r2, #0
 800978c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	e010      	b.n	80097b4 <HAL_SD_ReadBlocks+0x314>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a0a      	ldr	r2, [pc, #40]	; (80097c0 <HAL_SD_ReadBlocks+0x320>)
 8009798:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2201      	movs	r2, #1
 800979e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80097a2:	2300      	movs	r3, #0
 80097a4:	e006      	b.n	80097b4 <HAL_SD_ReadBlocks+0x314>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80097b2:	2301      	movs	r3, #1
  }
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3748      	adds	r7, #72	; 0x48
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	1fe00fff 	.word	0x1fe00fff
 80097c0:	18000f3a 	.word	0x18000f3a

080097c4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b092      	sub	sp, #72	; 0x48
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	607a      	str	r2, [r7, #4]
 80097d0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80097d2:	f7fa fbe5 	bl	8003fa0 <HAL_GetTick>
 80097d6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d107      	bne.n	80097f6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e174      	b.n	8009ae0 <HAL_SD_WriteBlocks+0x31c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	2b01      	cmp	r3, #1
 8009800:	f040 8167 	bne.w	8009ad2 <HAL_SD_WriteBlocks+0x30e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2200      	movs	r2, #0
 8009808:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800980a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	441a      	add	r2, r3
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009814:	429a      	cmp	r2, r3
 8009816:	d907      	bls.n	8009828 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800981c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	e15b      	b.n	8009ae0 <HAL_SD_WriteBlocks+0x31c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2203      	movs	r2, #3
 800982c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2200      	movs	r2, #0
 8009836:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800983c:	2b01      	cmp	r3, #1
 800983e:	d002      	beq.n	8009846 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009842:	025b      	lsls	r3, r3, #9
 8009844:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800984a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	025b      	lsls	r3, r3, #9
 8009850:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009852:	2390      	movs	r3, #144	; 0x90
 8009854:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009856:	2300      	movs	r3, #0
 8009858:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800985a:	2300      	movs	r3, #0
 800985c:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800985e:	2300      	movs	r3, #0
 8009860:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f107 0218 	add.w	r2, r7, #24
 800986a:	4611      	mov	r1, r2
 800986c:	4618      	mov	r0, r3
 800986e:	f003 fb85 	bl	800cf7c <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	68da      	ldr	r2, [r3, #12]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009880:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	2b01      	cmp	r3, #1
 8009886:	d90a      	bls.n	800989e <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2220      	movs	r2, #32
 800988c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009894:	4618      	mov	r0, r3
 8009896:	f003 fc29 	bl	800d0ec <SDMMC_CmdWriteMultiBlock>
 800989a:	6478      	str	r0, [r7, #68]	; 0x44
 800989c:	e009      	b.n	80098b2 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2210      	movs	r2, #16
 80098a2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80098aa:	4618      	mov	r0, r3
 80098ac:	f003 fbfb 	bl	800d0a6 <SDMMC_CmdWriteSingleBlock>
 80098b0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80098b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d012      	beq.n	80098de <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a8a      	ldr	r2, [pc, #552]	; (8009ae8 <HAL_SD_WriteBlocks+0x324>)
 80098be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098c6:	431a      	orrs	r2, r3
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2201      	movs	r2, #1
 80098d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2200      	movs	r2, #0
 80098d8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	e100      	b.n	8009ae0 <HAL_SD_WriteBlocks+0x31c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80098de:	69fb      	ldr	r3, [r7, #28]
 80098e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80098e2:	e065      	b.n	80099b0 <HAL_SD_WriteBlocks+0x1ec>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d040      	beq.n	8009974 <HAL_SD_WriteBlocks+0x1b0>
 80098f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d03d      	beq.n	8009974 <HAL_SD_WriteBlocks+0x1b0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80098f8:	2300      	movs	r3, #0
 80098fa:	643b      	str	r3, [r7, #64]	; 0x40
 80098fc:	e037      	b.n	800996e <HAL_SD_WriteBlocks+0x1aa>
        {
          data = (uint32_t)(*tempbuff);
 80098fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009906:	3301      	adds	r3, #1
 8009908:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800990a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800990c:	3b01      	subs	r3, #1
 800990e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8009910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	021a      	lsls	r2, r3, #8
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	4313      	orrs	r3, r2
 800991a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800991c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800991e:	3301      	adds	r3, #1
 8009920:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009924:	3b01      	subs	r3, #1
 8009926:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	041a      	lsls	r2, r3, #16
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	4313      	orrs	r3, r2
 8009932:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009936:	3301      	adds	r3, #1
 8009938:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800993a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800993c:	3b01      	subs	r3, #1
 800993e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	061a      	lsls	r2, r3, #24
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	4313      	orrs	r3, r2
 800994a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800994c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800994e:	3301      	adds	r3, #1
 8009950:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009954:	3b01      	subs	r3, #1
 8009956:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f107 0214 	add.w	r2, r7, #20
 8009960:	4611      	mov	r1, r2
 8009962:	4618      	mov	r0, r3
 8009964:	f003 fa8f 	bl	800ce86 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8009968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800996a:	3301      	adds	r3, #1
 800996c:	643b      	str	r3, [r7, #64]	; 0x40
 800996e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009970:	2b07      	cmp	r3, #7
 8009972:	d9c4      	bls.n	80098fe <HAL_SD_WriteBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009974:	f7fa fb14 	bl	8003fa0 <HAL_GetTick>
 8009978:	4602      	mov	r2, r0
 800997a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800997c:	1ad3      	subs	r3, r2, r3
 800997e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009980:	429a      	cmp	r2, r3
 8009982:	d902      	bls.n	800998a <HAL_SD_WriteBlocks+0x1c6>
 8009984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009986:	2b00      	cmp	r3, #0
 8009988:	d112      	bne.n	80099b0 <HAL_SD_WriteBlocks+0x1ec>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a56      	ldr	r2, [pc, #344]	; (8009ae8 <HAL_SD_WriteBlocks+0x324>)
 8009990:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009998:	431a      	orrs	r2, r3
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2201      	movs	r2, #1
 80099a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2200      	movs	r2, #0
 80099aa:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80099ac:	2303      	movs	r3, #3
 80099ae:	e097      	b.n	8009ae0 <HAL_SD_WriteBlocks+0x31c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099b6:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d092      	beq.n	80098e4 <HAL_SD_WriteBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68da      	ldr	r2, [r3, #12]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099cc:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d022      	beq.n	8009a22 <HAL_SD_WriteBlocks+0x25e>
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d91f      	bls.n	8009a22 <HAL_SD_WriteBlocks+0x25e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099e6:	2b03      	cmp	r3, #3
 80099e8:	d01b      	beq.n	8009a22 <HAL_SD_WriteBlocks+0x25e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4618      	mov	r0, r3
 80099f0:	f003 fba0 	bl	800d134 <SDMMC_CmdStopTransfer>
 80099f4:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80099f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d012      	beq.n	8009a22 <HAL_SD_WriteBlocks+0x25e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a39      	ldr	r2, [pc, #228]	; (8009ae8 <HAL_SD_WriteBlocks+0x324>)
 8009a02:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a0a:	431a      	orrs	r2, r3
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2201      	movs	r2, #1
 8009a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e05e      	b.n	8009ae0 <HAL_SD_WriteBlocks+0x31c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a28:	f003 0308 	and.w	r3, r3, #8
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d012      	beq.n	8009a56 <HAL_SD_WriteBlocks+0x292>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a2c      	ldr	r2, [pc, #176]	; (8009ae8 <HAL_SD_WriteBlocks+0x324>)
 8009a36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a3c:	f043 0208 	orr.w	r2, r3, #8
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2201      	movs	r2, #1
 8009a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	e044      	b.n	8009ae0 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a5c:	f003 0302 	and.w	r3, r3, #2
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d012      	beq.n	8009a8a <HAL_SD_WriteBlocks+0x2c6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a1f      	ldr	r2, [pc, #124]	; (8009ae8 <HAL_SD_WriteBlocks+0x324>)
 8009a6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a70:	f043 0202 	orr.w	r2, r3, #2
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2200      	movs	r2, #0
 8009a84:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009a86:	2301      	movs	r3, #1
 8009a88:	e02a      	b.n	8009ae0 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a90:	f003 0310 	and.w	r3, r3, #16
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d012      	beq.n	8009abe <HAL_SD_WriteBlocks+0x2fa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a12      	ldr	r2, [pc, #72]	; (8009ae8 <HAL_SD_WriteBlocks+0x324>)
 8009a9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa4:	f043 0210 	orr.w	r2, r3, #16
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	e010      	b.n	8009ae0 <HAL_SD_WriteBlocks+0x31c>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a0a      	ldr	r2, [pc, #40]	; (8009aec <HAL_SD_WriteBlocks+0x328>)
 8009ac4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	e006      	b.n	8009ae0 <HAL_SD_WriteBlocks+0x31c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009ade:	2301      	movs	r3, #1
  }
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3748      	adds	r7, #72	; 0x48
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	1fe00fff 	.word	0x1fe00fff
 8009aec:	18000f3a 	.word	0x18000f3a

08009af0 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009afe:	0f9b      	lsrs	r3, r3, #30
 8009b00:	b2da      	uxtb	r2, r3
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b0a:	0e9b      	lsrs	r3, r3, #26
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	f003 030f 	and.w	r3, r3, #15
 8009b12:	b2da      	uxtb	r2, r3
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b1c:	0e1b      	lsrs	r3, r3, #24
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	f003 0303 	and.w	r3, r3, #3
 8009b24:	b2da      	uxtb	r2, r3
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b2e:	0c1b      	lsrs	r3, r3, #16
 8009b30:	b2da      	uxtb	r2, r3
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b3a:	0a1b      	lsrs	r3, r3, #8
 8009b3c:	b2da      	uxtb	r2, r3
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b46:	b2da      	uxtb	r2, r3
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b50:	0d1b      	lsrs	r3, r3, #20
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b5c:	0c1b      	lsrs	r3, r3, #16
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	f003 030f 	and.w	r3, r3, #15
 8009b64:	b2da      	uxtb	r2, r3
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b6e:	0bdb      	lsrs	r3, r3, #15
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	f003 0301 	and.w	r3, r3, #1
 8009b76:	b2da      	uxtb	r2, r3
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b80:	0b9b      	lsrs	r3, r3, #14
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	f003 0301 	and.w	r3, r3, #1
 8009b88:	b2da      	uxtb	r2, r3
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b92:	0b5b      	lsrs	r3, r3, #13
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	f003 0301 	and.w	r3, r3, #1
 8009b9a:	b2da      	uxtb	r2, r3
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ba4:	0b1b      	lsrs	r3, r3, #12
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	f003 0301 	and.w	r3, r3, #1
 8009bac:	b2da      	uxtb	r2, r3
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d163      	bne.n	8009c88 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bc4:	009a      	lsls	r2, r3, #2
 8009bc6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009bca:	4013      	ands	r3, r2
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009bd0:	0f92      	lsrs	r2, r2, #30
 8009bd2:	431a      	orrs	r2, r3
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bdc:	0edb      	lsrs	r3, r3, #27
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	f003 0307 	and.w	r3, r3, #7
 8009be4:	b2da      	uxtb	r2, r3
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bee:	0e1b      	lsrs	r3, r3, #24
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	f003 0307 	and.w	r3, r3, #7
 8009bf6:	b2da      	uxtb	r2, r3
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c00:	0d5b      	lsrs	r3, r3, #21
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	f003 0307 	and.w	r3, r3, #7
 8009c08:	b2da      	uxtb	r2, r3
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c12:	0c9b      	lsrs	r3, r3, #18
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	f003 0307 	and.w	r3, r3, #7
 8009c1a:	b2da      	uxtb	r2, r3
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c24:	0bdb      	lsrs	r3, r3, #15
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	f003 0307 	and.w	r3, r3, #7
 8009c2c:	b2da      	uxtb	r2, r3
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	1c5a      	adds	r2, r3, #1
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	7e1b      	ldrb	r3, [r3, #24]
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	f003 0307 	and.w	r3, r3, #7
 8009c46:	3302      	adds	r3, #2
 8009c48:	2201      	movs	r2, #1
 8009c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009c52:	fb03 f202 	mul.w	r2, r3, r2
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	7a1b      	ldrb	r3, [r3, #8]
 8009c5e:	b2db      	uxtb	r3, r3
 8009c60:	f003 030f 	and.w	r3, r3, #15
 8009c64:	2201      	movs	r2, #1
 8009c66:	409a      	lsls	r2, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009c74:	0a52      	lsrs	r2, r2, #9
 8009c76:	fb03 f202 	mul.w	r2, r3, r2
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c84:	659a      	str	r2, [r3, #88]	; 0x58
 8009c86:	e031      	b.n	8009cec <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d11d      	bne.n	8009ccc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c94:	041b      	lsls	r3, r3, #16
 8009c96:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c9e:	0c1b      	lsrs	r3, r3, #16
 8009ca0:	431a      	orrs	r2, r3
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	691b      	ldr	r3, [r3, #16]
 8009caa:	3301      	adds	r3, #1
 8009cac:	029a      	lsls	r2, r3, #10
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cc0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	659a      	str	r2, [r3, #88]	; 0x58
 8009cca:	e00f      	b.n	8009cec <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a58      	ldr	r2, [pc, #352]	; (8009e34 <HAL_SD_GetCardCSD+0x344>)
 8009cd2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	e09d      	b.n	8009e28 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cf0:	0b9b      	lsrs	r3, r3, #14
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	f003 0301 	and.w	r3, r3, #1
 8009cf8:	b2da      	uxtb	r2, r3
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d02:	09db      	lsrs	r3, r3, #7
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d0a:	b2da      	uxtb	r2, r3
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d1a:	b2da      	uxtb	r2, r3
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d24:	0fdb      	lsrs	r3, r3, #31
 8009d26:	b2da      	uxtb	r2, r3
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d30:	0f5b      	lsrs	r3, r3, #29
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	f003 0303 	and.w	r3, r3, #3
 8009d38:	b2da      	uxtb	r2, r3
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d42:	0e9b      	lsrs	r3, r3, #26
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	f003 0307 	and.w	r3, r3, #7
 8009d4a:	b2da      	uxtb	r2, r3
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d54:	0d9b      	lsrs	r3, r3, #22
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	f003 030f 	and.w	r3, r3, #15
 8009d5c:	b2da      	uxtb	r2, r3
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d66:	0d5b      	lsrs	r3, r3, #21
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	f003 0301 	and.w	r3, r3, #1
 8009d6e:	b2da      	uxtb	r2, r3
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d82:	0c1b      	lsrs	r3, r3, #16
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	f003 0301 	and.w	r3, r3, #1
 8009d8a:	b2da      	uxtb	r2, r3
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d96:	0bdb      	lsrs	r3, r3, #15
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	f003 0301 	and.w	r3, r3, #1
 8009d9e:	b2da      	uxtb	r2, r3
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009daa:	0b9b      	lsrs	r3, r3, #14
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	f003 0301 	and.w	r3, r3, #1
 8009db2:	b2da      	uxtb	r2, r3
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dbe:	0b5b      	lsrs	r3, r3, #13
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	f003 0301 	and.w	r3, r3, #1
 8009dc6:	b2da      	uxtb	r2, r3
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dd2:	0b1b      	lsrs	r3, r3, #12
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	f003 0301 	and.w	r3, r3, #1
 8009dda:	b2da      	uxtb	r2, r3
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009de6:	0a9b      	lsrs	r3, r3, #10
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	f003 0303 	and.w	r3, r3, #3
 8009dee:	b2da      	uxtb	r2, r3
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dfa:	0a1b      	lsrs	r3, r3, #8
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	f003 0303 	and.w	r3, r3, #3
 8009e02:	b2da      	uxtb	r2, r3
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e0e:	085b      	lsrs	r3, r3, #1
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e16:	b2da      	uxtb	r2, r3
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	2201      	movs	r2, #1
 8009e22:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr
 8009e34:	1fe00fff 	.word	0x1fe00fff

08009e38 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b094      	sub	sp, #80	; 0x50
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009e42:	2300      	movs	r3, #0
 8009e44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009e48:	f107 0308 	add.w	r3, r7, #8
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 fbd4 	bl	800a5fc <SD_SendSDStatus>
 8009e54:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d011      	beq.n	8009e80 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a4f      	ldr	r2, [pc, #316]	; (8009fa0 <HAL_SD_GetCardStatus+0x168>)
 8009e62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e6a:	431a      	orrs	r2, r3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009e7e:	e070      	b.n	8009f62 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	099b      	lsrs	r3, r3, #6
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	f003 0303 	and.w	r3, r3, #3
 8009e8a:	b2da      	uxtb	r2, r3
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	095b      	lsrs	r3, r3, #5
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	f003 0301 	and.w	r3, r3, #1
 8009e9a:	b2da      	uxtb	r2, r3
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	0a1b      	lsrs	r3, r3, #8
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	0e1b      	lsrs	r3, r3, #24
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	b29a      	uxth	r2, r3
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	061a      	lsls	r2, r3, #24
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	021b      	lsls	r3, r3, #8
 8009ec2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009ec6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	0a1b      	lsrs	r3, r3, #8
 8009ecc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009ed0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	0e1b      	lsrs	r3, r3, #24
 8009ed6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	b2da      	uxtb	r2, r3
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	0a1b      	lsrs	r3, r3, #8
 8009ee8:	b2da      	uxtb	r2, r3
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	0d1b      	lsrs	r3, r3, #20
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	f003 030f 	and.w	r3, r3, #15
 8009ef8:	b2da      	uxtb	r2, r3
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	0c1b      	lsrs	r3, r3, #16
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009f08:	b29a      	uxth	r2, r3
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	4313      	orrs	r3, r2
 8009f14:	b29a      	uxth	r2, r3
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	0a9b      	lsrs	r3, r3, #10
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f24:	b2da      	uxtb	r2, r3
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	0a1b      	lsrs	r3, r3, #8
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	f003 0303 	and.w	r3, r3, #3
 8009f34:	b2da      	uxtb	r2, r3
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	091b      	lsrs	r3, r3, #4
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	f003 030f 	and.w	r3, r3, #15
 8009f44:	b2da      	uxtb	r2, r3
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	f003 030f 	and.w	r3, r3, #15
 8009f52:	b2da      	uxtb	r2, r3
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	0e1b      	lsrs	r3, r3, #24
 8009f5c:	b2da      	uxtb	r2, r3
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f003 f832 	bl	800cfd4 <SDMMC_CmdBlockLength>
 8009f70:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d00d      	beq.n	8009f94 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4a08      	ldr	r2, [pc, #32]	; (8009fa0 <HAL_SD_GetCardStatus+0x168>)
 8009f7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f84:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8009f94:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3750      	adds	r7, #80	; 0x50
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	1fe00fff 	.word	0x1fe00fff

08009fa4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009fee:	2300      	movs	r3, #0
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009ffc:	b5b0      	push	{r4, r5, r7, lr}
 8009ffe:	b090      	sub	sp, #64	; 0x40
 800a000:	af04      	add	r7, sp, #16
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800a006:	2300      	movs	r3, #0
 800a008:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2203      	movs	r2, #3
 800a010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a018:	2b03      	cmp	r3, #3
 800a01a:	d02e      	beq.n	800a07a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a022:	d106      	bne.n	800a032 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a028:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	639a      	str	r2, [r3, #56]	; 0x38
 800a030:	e029      	b.n	800a086 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a038:	d10a      	bne.n	800a050 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 fbd6 	bl	800a7ec <SD_WideBus_Enable>
 800a040:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a048:	431a      	orrs	r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	639a      	str	r2, [r3, #56]	; 0x38
 800a04e:	e01a      	b.n	800a086 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d10a      	bne.n	800a06c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 fc13 	bl	800a882 <SD_WideBus_Disable>
 800a05c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a064:	431a      	orrs	r2, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	639a      	str	r2, [r3, #56]	; 0x38
 800a06a:	e00c      	b.n	800a086 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a070:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	639a      	str	r2, [r3, #56]	; 0x38
 800a078:	e005      	b.n	800a086 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a07e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d007      	beq.n	800a09e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a60      	ldr	r2, [pc, #384]	; (800a214 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a094:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a09c:	e097      	b.n	800a1ce <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800a09e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a0a2:	f7fd feb9 	bl	8007e18 <HAL_RCCEx_GetPeriphCLKFreq>
 800a0a6:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	f000 8086 	beq.w	800a1bc <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	689b      	ldr	r3, [r3, #8]
 800a0ba:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	691b      	ldr	r3, [r3, #16]
 800a0c4:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	695a      	ldr	r2, [r3, #20]
 800a0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0cc:	4952      	ldr	r1, [pc, #328]	; (800a218 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a0ce:	fba1 1303 	umull	r1, r3, r1, r3
 800a0d2:	0e1b      	lsrs	r3, r3, #24
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d303      	bcc.n	800a0e0 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	695b      	ldr	r3, [r3, #20]
 800a0dc:	61fb      	str	r3, [r7, #28]
 800a0de:	e05a      	b.n	800a196 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0e8:	d103      	bne.n	800a0f2 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	695b      	ldr	r3, [r3, #20]
 800a0ee:	61fb      	str	r3, [r7, #28]
 800a0f0:	e051      	b.n	800a196 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0fa:	d126      	bne.n	800a14a <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	695b      	ldr	r3, [r3, #20]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d10e      	bne.n	800a122 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800a104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a106:	4a45      	ldr	r2, [pc, #276]	; (800a21c <HAL_SD_ConfigWideBusOperation+0x220>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d906      	bls.n	800a11a <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10e:	4a42      	ldr	r2, [pc, #264]	; (800a218 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a110:	fba2 2303 	umull	r2, r3, r2, r3
 800a114:	0e5b      	lsrs	r3, r3, #25
 800a116:	61fb      	str	r3, [r7, #28]
 800a118:	e03d      	b.n	800a196 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	695b      	ldr	r3, [r3, #20]
 800a11e:	61fb      	str	r3, [r7, #28]
 800a120:	e039      	b.n	800a196 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	695b      	ldr	r3, [r3, #20]
 800a126:	005b      	lsls	r3, r3, #1
 800a128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a12a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a12e:	4a3b      	ldr	r2, [pc, #236]	; (800a21c <HAL_SD_ConfigWideBusOperation+0x220>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d906      	bls.n	800a142 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a136:	4a38      	ldr	r2, [pc, #224]	; (800a218 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a138:	fba2 2303 	umull	r2, r3, r2, r3
 800a13c:	0e5b      	lsrs	r3, r3, #25
 800a13e:	61fb      	str	r3, [r7, #28]
 800a140:	e029      	b.n	800a196 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	695b      	ldr	r3, [r3, #20]
 800a146:	61fb      	str	r3, [r7, #28]
 800a148:	e025      	b.n	800a196 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	695b      	ldr	r3, [r3, #20]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d10e      	bne.n	800a170 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800a152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a154:	4a32      	ldr	r2, [pc, #200]	; (800a220 <HAL_SD_ConfigWideBusOperation+0x224>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d906      	bls.n	800a168 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15c:	4a2e      	ldr	r2, [pc, #184]	; (800a218 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a15e:	fba2 2303 	umull	r2, r3, r2, r3
 800a162:	0e1b      	lsrs	r3, r3, #24
 800a164:	61fb      	str	r3, [r7, #28]
 800a166:	e016      	b.n	800a196 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	695b      	ldr	r3, [r3, #20]
 800a16c:	61fb      	str	r3, [r7, #28]
 800a16e:	e012      	b.n	800a196 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	695b      	ldr	r3, [r3, #20]
 800a174:	005b      	lsls	r3, r3, #1
 800a176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a178:	fbb2 f3f3 	udiv	r3, r2, r3
 800a17c:	4a28      	ldr	r2, [pc, #160]	; (800a220 <HAL_SD_ConfigWideBusOperation+0x224>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d906      	bls.n	800a190 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a184:	4a24      	ldr	r2, [pc, #144]	; (800a218 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a186:	fba2 2303 	umull	r2, r3, r2, r3
 800a18a:	0e1b      	lsrs	r3, r3, #24
 800a18c:	61fb      	str	r3, [r7, #28]
 800a18e:	e002      	b.n	800a196 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	695b      	ldr	r3, [r3, #20]
 800a194:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	699b      	ldr	r3, [r3, #24]
 800a19a:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681d      	ldr	r5, [r3, #0]
 800a1a0:	466c      	mov	r4, sp
 800a1a2:	f107 0318 	add.w	r3, r7, #24
 800a1a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a1aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a1ae:	f107 030c 	add.w	r3, r7, #12
 800a1b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a1b4:	4628      	mov	r0, r5
 800a1b6:	f002 fe2f 	bl	800ce18 <SDMMC_Init>
 800a1ba:	e008      	b.n	800a1ce <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f002 fefc 	bl	800cfd4 <SDMMC_CmdBlockLength>
 800a1dc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d00c      	beq.n	800a1fe <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a0a      	ldr	r2, [pc, #40]	; (800a214 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a1ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f2:	431a      	orrs	r2, r3
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2201      	movs	r2, #1
 800a202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800a206:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3730      	adds	r7, #48	; 0x30
 800a20e:	46bd      	mov	sp, r7
 800a210:	bdb0      	pop	{r4, r5, r7, pc}
 800a212:	bf00      	nop
 800a214:	1fe00fff 	.word	0x1fe00fff
 800a218:	55e63b89 	.word	0x55e63b89
 800a21c:	02faf080 	.word	0x02faf080
 800a220:	017d7840 	.word	0x017d7840

0800a224 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b086      	sub	sp, #24
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a22c:	2300      	movs	r3, #0
 800a22e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a230:	f107 030c 	add.w	r3, r7, #12
 800a234:	4619      	mov	r1, r3
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 fab0 	bl	800a79c <SD_SendStatus>
 800a23c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d005      	beq.n	800a250 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	431a      	orrs	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	0a5b      	lsrs	r3, r3, #9
 800a254:	f003 030f 	and.w	r3, r3, #15
 800a258:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a25a:	693b      	ldr	r3, [r7, #16]
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3718      	adds	r7, #24
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a264:	b5b0      	push	{r4, r5, r7, lr}
 800a266:	b090      	sub	sp, #64	; 0x40
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a26c:	2301      	movs	r3, #1
 800a26e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4618      	mov	r0, r3
 800a276:	f002 fe29 	bl	800cecc <SDMMC_GetPowerState>
 800a27a:	4603      	mov	r3, r0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d102      	bne.n	800a286 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a280:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a284:	e0a9      	b.n	800a3da <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a28a:	2b03      	cmp	r3, #3
 800a28c:	d02e      	beq.n	800a2ec <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4618      	mov	r0, r3
 800a294:	f003 f86e 	bl	800d374 <SDMMC_CmdSendCID>
 800a298:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a29a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d001      	beq.n	800a2a4 <SD_InitCard+0x40>
    {
      return errorstate;
 800a2a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2a2:	e09a      	b.n	800a3da <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2100      	movs	r1, #0
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f002 fe53 	bl	800cf56 <SDMMC_GetResponse>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	2104      	movs	r1, #4
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f002 fe4a 	bl	800cf56 <SDMMC_GetResponse>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2108      	movs	r1, #8
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f002 fe41 	bl	800cf56 <SDMMC_GetResponse>
 800a2d4:	4602      	mov	r2, r0
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	210c      	movs	r1, #12
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f002 fe38 	bl	800cf56 <SDMMC_GetResponse>
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2f0:	2b03      	cmp	r3, #3
 800a2f2:	d00d      	beq.n	800a310 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f107 020e 	add.w	r2, r7, #14
 800a2fc:	4611      	mov	r1, r2
 800a2fe:	4618      	mov	r0, r3
 800a300:	f003 f877 	bl	800d3f2 <SDMMC_CmdSetRelAdd>
 800a304:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d001      	beq.n	800a310 <SD_InitCard+0xac>
    {
      return errorstate;
 800a30c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a30e:	e064      	b.n	800a3da <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a314:	2b03      	cmp	r3, #3
 800a316:	d036      	beq.n	800a386 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a318:	89fb      	ldrh	r3, [r7, #14]
 800a31a:	461a      	mov	r2, r3
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681a      	ldr	r2, [r3, #0]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a328:	041b      	lsls	r3, r3, #16
 800a32a:	4619      	mov	r1, r3
 800a32c:	4610      	mov	r0, r2
 800a32e:	f003 f840 	bl	800d3b2 <SDMMC_CmdSendCSD>
 800a332:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a336:	2b00      	cmp	r3, #0
 800a338:	d001      	beq.n	800a33e <SD_InitCard+0xda>
    {
      return errorstate;
 800a33a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a33c:	e04d      	b.n	800a3da <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	2100      	movs	r1, #0
 800a344:	4618      	mov	r0, r3
 800a346:	f002 fe06 	bl	800cf56 <SDMMC_GetResponse>
 800a34a:	4602      	mov	r2, r0
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2104      	movs	r1, #4
 800a356:	4618      	mov	r0, r3
 800a358:	f002 fdfd 	bl	800cf56 <SDMMC_GetResponse>
 800a35c:	4602      	mov	r2, r0
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	2108      	movs	r1, #8
 800a368:	4618      	mov	r0, r3
 800a36a:	f002 fdf4 	bl	800cf56 <SDMMC_GetResponse>
 800a36e:	4602      	mov	r2, r0
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	210c      	movs	r1, #12
 800a37a:	4618      	mov	r0, r3
 800a37c:	f002 fdeb 	bl	800cf56 <SDMMC_GetResponse>
 800a380:	4602      	mov	r2, r0
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	2104      	movs	r1, #4
 800a38c:	4618      	mov	r0, r3
 800a38e:	f002 fde2 	bl	800cf56 <SDMMC_GetResponse>
 800a392:	4603      	mov	r3, r0
 800a394:	0d1a      	lsrs	r2, r3, #20
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a39a:	f107 0310 	add.w	r3, r7, #16
 800a39e:	4619      	mov	r1, r3
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f7ff fba5 	bl	8009af0 <HAL_SD_GetCardCSD>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d002      	beq.n	800a3b2 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a3ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a3b0:	e013      	b.n	800a3da <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6819      	ldr	r1, [r3, #0]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3ba:	041b      	lsls	r3, r3, #16
 800a3bc:	2200      	movs	r2, #0
 800a3be:	461c      	mov	r4, r3
 800a3c0:	4615      	mov	r5, r2
 800a3c2:	4622      	mov	r2, r4
 800a3c4:	462b      	mov	r3, r5
 800a3c6:	4608      	mov	r0, r1
 800a3c8:	f002 feea 	bl	800d1a0 <SDMMC_CmdSelDesel>
 800a3cc:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a3ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d001      	beq.n	800a3d8 <SD_InitCard+0x174>
  {
    return errorstate;
 800a3d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3d6:	e000      	b.n	800a3da <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3740      	adds	r7, #64	; 0x40
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a3e4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b088      	sub	sp, #32
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	61fb      	str	r3, [r7, #28]
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 800a3f8:	f7f9 fdd2 	bl	8003fa0 <HAL_GetTick>
 800a3fc:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4618      	mov	r0, r3
 800a404:	f002 fef0 	bl	800d1e8 <SDMMC_CmdGoIdleState>
 800a408:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d001      	beq.n	800a414 <SD_PowerON+0x30>
  {
    return errorstate;
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	e0ed      	b.n	800a5f0 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4618      	mov	r0, r3
 800a41a:	f002 ff03 	bl	800d224 <SDMMC_CmdOperCond>
 800a41e:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d00d      	beq.n	800a442 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2200      	movs	r2, #0
 800a42a:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4618      	mov	r0, r3
 800a432:	f002 fed9 	bl	800d1e8 <SDMMC_CmdGoIdleState>
 800a436:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d004      	beq.n	800a448 <SD_PowerON+0x64>
    {
      return errorstate;
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	e0d6      	b.n	800a5f0 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2201      	movs	r2, #1
 800a446:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d137      	bne.n	800a4c0 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2100      	movs	r1, #0
 800a456:	4618      	mov	r0, r3
 800a458:	f002 ff04 	bl	800d264 <SDMMC_CmdAppCommand>
 800a45c:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d02d      	beq.n	800a4c0 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a464:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a468:	e0c2      	b.n	800a5f0 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	2100      	movs	r1, #0
 800a470:	4618      	mov	r0, r3
 800a472:	f002 fef7 	bl	800d264 <SDMMC_CmdAppCommand>
 800a476:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d001      	beq.n	800a482 <SD_PowerON+0x9e>
    {
      return errorstate;
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	e0b6      	b.n	800a5f0 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	495c      	ldr	r1, [pc, #368]	; (800a5f8 <SD_PowerON+0x214>)
 800a488:	4618      	mov	r0, r3
 800a48a:	f002 ff0e 	bl	800d2aa <SDMMC_CmdAppOperCommand>
 800a48e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d002      	beq.n	800a49c <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a496:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a49a:	e0a9      	b.n	800a5f0 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f002 fd57 	bl	800cf56 <SDMMC_GetResponse>
 800a4a8:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a4aa:	69fb      	ldr	r3, [r7, #28]
 800a4ac:	0fdb      	lsrs	r3, r3, #31
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d101      	bne.n	800a4b6 <SD_PowerON+0xd2>
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e000      	b.n	800a4b8 <SD_PowerON+0xd4>
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	61bb      	str	r3, [r7, #24]

    count++;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	3301      	adds	r3, #1
 800a4be:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d802      	bhi.n	800a4d0 <SD_PowerON+0xec>
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d0cc      	beq.n	800a46a <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d902      	bls.n	800a4e0 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a4da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a4de:	e087      	b.n	800a5f0 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a4e0:	69fb      	ldr	r3, [r7, #28]
 800a4e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d07e      	beq.n	800a5e8 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	699b      	ldr	r3, [r3, #24]
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d17a      	bne.n	800a5ee <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d075      	beq.n	800a5ee <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a508:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f042 0208 	orr.w	r2, r2, #8
 800a518:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4618      	mov	r0, r3
 800a520:	f002 ffce 	bl	800d4c0 <SDMMC_CmdVoltageSwitch>
 800a524:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d00c      	beq.n	800a546 <SD_PowerON+0x162>
        {
          return errorstate;
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	e05f      	b.n	800a5f0 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a530:	f7f9 fd36 	bl	8003fa0 <HAL_GetTick>
 800a534:	4602      	mov	r2, r0
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	1ad3      	subs	r3, r2, r3
 800a53a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a53e:	d102      	bne.n	800a546 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800a540:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a544:	e054      	b.n	800a5f0 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a54c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a550:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a554:	d1ec      	bne.n	800a530 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800a55e:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a56a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a56e:	d002      	beq.n	800a576 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800a570:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a574:	e03c      	b.n	800a5f0 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800a576:	2001      	movs	r0, #1
 800a578:	f000 fa9e 	bl	800aab8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f042 0204 	orr.w	r2, r2, #4
 800a58a:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800a58c:	e00a      	b.n	800a5a4 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a58e:	f7f9 fd07 	bl	8003fa0 <HAL_GetTick>
 800a592:	4602      	mov	r2, r0
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	1ad3      	subs	r3, r2, r3
 800a598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a59c:	d102      	bne.n	800a5a4 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800a59e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a5a2:	e025      	b.n	800a5f0 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5b2:	d1ec      	bne.n	800a58e <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a5bc:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a5c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5cc:	d102      	bne.n	800a5d4 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a5ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a5d2:	e00d      	b.n	800a5f0 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2213      	movs	r2, #19
 800a5da:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5e4:	639a      	str	r2, [r3, #56]	; 0x38
 800a5e6:	e002      	b.n	800a5ee <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800a5ee:	2300      	movs	r3, #0
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3720      	adds	r7, #32
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	c1100000 	.word	0xc1100000

0800a5fc <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b08c      	sub	sp, #48	; 0x30
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a606:	f7f9 fccb 	bl	8003fa0 <HAL_GetTick>
 800a60a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2100      	movs	r1, #0
 800a616:	4618      	mov	r0, r3
 800a618:	f002 fc9d 	bl	800cf56 <SDMMC_GetResponse>
 800a61c:	4603      	mov	r3, r0
 800a61e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a622:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a626:	d102      	bne.n	800a62e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a628:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a62c:	e0b0      	b.n	800a790 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2140      	movs	r1, #64	; 0x40
 800a634:	4618      	mov	r0, r3
 800a636:	f002 fccd 	bl	800cfd4 <SDMMC_CmdBlockLength>
 800a63a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a63c:	6a3b      	ldr	r3, [r7, #32]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d005      	beq.n	800a64e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800a64a:	6a3b      	ldr	r3, [r7, #32]
 800a64c:	e0a0      	b.n	800a790 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a656:	041b      	lsls	r3, r3, #16
 800a658:	4619      	mov	r1, r3
 800a65a:	4610      	mov	r0, r2
 800a65c:	f002 fe02 	bl	800d264 <SDMMC_CmdAppCommand>
 800a660:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a662:	6a3b      	ldr	r3, [r7, #32]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d005      	beq.n	800a674 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800a670:	6a3b      	ldr	r3, [r7, #32]
 800a672:	e08d      	b.n	800a790 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a678:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800a67a:	2340      	movs	r3, #64	; 0x40
 800a67c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800a67e:	2360      	movs	r3, #96	; 0x60
 800a680:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a682:	2302      	movs	r3, #2
 800a684:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a686:	2300      	movs	r3, #0
 800a688:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a68a:	2301      	movs	r3, #1
 800a68c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f107 0208 	add.w	r2, r7, #8
 800a696:	4611      	mov	r1, r2
 800a698:	4618      	mov	r0, r3
 800a69a:	f002 fc6f 	bl	800cf7c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f002 feea 	bl	800d47c <SDMMC_CmdStatusRegister>
 800a6a8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a6aa:	6a3b      	ldr	r3, [r7, #32]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d02b      	beq.n	800a708 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800a6b8:	6a3b      	ldr	r3, [r7, #32]
 800a6ba:	e069      	b.n	800a790 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d013      	beq.n	800a6f2 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6ce:	e00d      	b.n	800a6ec <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f002 fbc9 	bl	800ce6c <SDMMC_ReadFIFO>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6de:	601a      	str	r2, [r3, #0]
        pData++;
 800a6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e2:	3304      	adds	r3, #4
 800a6e4:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800a6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ee:	2b07      	cmp	r3, #7
 800a6f0:	d9ee      	bls.n	800a6d0 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a6f2:	f7f9 fc55 	bl	8003fa0 <HAL_GetTick>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fa:	1ad3      	subs	r3, r2, r3
 800a6fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a700:	d102      	bne.n	800a708 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a702:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a706:	e043      	b.n	800a790 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a70e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800a712:	2b00      	cmp	r3, #0
 800a714:	d0d2      	beq.n	800a6bc <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a71c:	f003 0308 	and.w	r3, r3, #8
 800a720:	2b00      	cmp	r3, #0
 800a722:	d001      	beq.n	800a728 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a724:	2308      	movs	r3, #8
 800a726:	e033      	b.n	800a790 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a72e:	f003 0302 	and.w	r3, r3, #2
 800a732:	2b00      	cmp	r3, #0
 800a734:	d001      	beq.n	800a73a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a736:	2302      	movs	r3, #2
 800a738:	e02a      	b.n	800a790 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a740:	f003 0320 	and.w	r3, r3, #32
 800a744:	2b00      	cmp	r3, #0
 800a746:	d017      	beq.n	800a778 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800a748:	2320      	movs	r3, #32
 800a74a:	e021      	b.n	800a790 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4618      	mov	r0, r3
 800a752:	f002 fb8b 	bl	800ce6c <SDMMC_ReadFIFO>
 800a756:	4602      	mov	r2, r0
 800a758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75a:	601a      	str	r2, [r3, #0]
    pData++;
 800a75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75e:	3304      	adds	r3, #4
 800a760:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a762:	f7f9 fc1d 	bl	8003fa0 <HAL_GetTick>
 800a766:	4602      	mov	r2, r0
 800a768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76a:	1ad3      	subs	r3, r2, r3
 800a76c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a770:	d102      	bne.n	800a778 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a772:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a776:	e00b      	b.n	800a790 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a77e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a782:	2b00      	cmp	r3, #0
 800a784:	d1e2      	bne.n	800a74c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a03      	ldr	r2, [pc, #12]	; (800a798 <SD_SendSDStatus+0x19c>)
 800a78c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800a78e:	2300      	movs	r3, #0
}
 800a790:	4618      	mov	r0, r3
 800a792:	3730      	adds	r7, #48	; 0x30
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}
 800a798:	18000f3a 	.word	0x18000f3a

0800a79c <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b084      	sub	sp, #16
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d102      	bne.n	800a7b2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a7ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a7b0:	e018      	b.n	800a7e4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7ba:	041b      	lsls	r3, r3, #16
 800a7bc:	4619      	mov	r1, r3
 800a7be:	4610      	mov	r0, r2
 800a7c0:	f002 fe39 	bl	800d436 <SDMMC_CmdSendStatus>
 800a7c4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d001      	beq.n	800a7d0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	e009      	b.n	800a7e4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2100      	movs	r1, #0
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f002 fbbd 	bl	800cf56 <SDMMC_GetResponse>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a7e2:	2300      	movs	r3, #0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3710      	adds	r7, #16
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b086      	sub	sp, #24
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	60fb      	str	r3, [r7, #12]
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	2100      	movs	r1, #0
 800a802:	4618      	mov	r0, r3
 800a804:	f002 fba7 	bl	800cf56 <SDMMC_GetResponse>
 800a808:	4603      	mov	r3, r0
 800a80a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a80e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a812:	d102      	bne.n	800a81a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a814:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a818:	e02f      	b.n	800a87a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a81a:	f107 030c 	add.w	r3, r7, #12
 800a81e:	4619      	mov	r1, r3
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 f879 	bl	800a918 <SD_FindSCR>
 800a826:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d001      	beq.n	800a832 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	e023      	b.n	800a87a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d01c      	beq.n	800a876 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a844:	041b      	lsls	r3, r3, #16
 800a846:	4619      	mov	r1, r3
 800a848:	4610      	mov	r0, r2
 800a84a:	f002 fd0b 	bl	800d264 <SDMMC_CmdAppCommand>
 800a84e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d001      	beq.n	800a85a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	e00f      	b.n	800a87a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	2102      	movs	r1, #2
 800a860:	4618      	mov	r0, r3
 800a862:	f002 fd42 	bl	800d2ea <SDMMC_CmdBusWidth>
 800a866:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d001      	beq.n	800a872 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	e003      	b.n	800a87a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a872:	2300      	movs	r3, #0
 800a874:	e001      	b.n	800a87a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a876:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3718      	adds	r7, #24
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}

0800a882 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a882:	b580      	push	{r7, lr}
 800a884:	b086      	sub	sp, #24
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a88a:	2300      	movs	r3, #0
 800a88c:	60fb      	str	r3, [r7, #12]
 800a88e:	2300      	movs	r3, #0
 800a890:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	2100      	movs	r1, #0
 800a898:	4618      	mov	r0, r3
 800a89a:	f002 fb5c 	bl	800cf56 <SDMMC_GetResponse>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8a8:	d102      	bne.n	800a8b0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a8aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a8ae:	e02f      	b.n	800a910 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a8b0:	f107 030c 	add.w	r3, r7, #12
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 f82e 	bl	800a918 <SD_FindSCR>
 800a8bc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d001      	beq.n	800a8c8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	e023      	b.n	800a910 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d01c      	beq.n	800a90c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8da:	041b      	lsls	r3, r3, #16
 800a8dc:	4619      	mov	r1, r3
 800a8de:	4610      	mov	r0, r2
 800a8e0:	f002 fcc0 	bl	800d264 <SDMMC_CmdAppCommand>
 800a8e4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d001      	beq.n	800a8f0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	e00f      	b.n	800a910 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	2100      	movs	r1, #0
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f002 fcf7 	bl	800d2ea <SDMMC_CmdBusWidth>
 800a8fc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d001      	beq.n	800a908 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	e003      	b.n	800a910 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a908:	2300      	movs	r3, #0
 800a90a:	e001      	b.n	800a910 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a90c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a910:	4618      	mov	r0, r3
 800a912:	3718      	adds	r7, #24
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b08e      	sub	sp, #56	; 0x38
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a922:	f7f9 fb3d 	bl	8003fa0 <HAL_GetTick>
 800a926:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a928:	2300      	movs	r3, #0
 800a92a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a92c:	2300      	movs	r3, #0
 800a92e:	60bb      	str	r3, [r7, #8]
 800a930:	2300      	movs	r3, #0
 800a932:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	2108      	movs	r1, #8
 800a93e:	4618      	mov	r0, r3
 800a940:	f002 fb48 	bl	800cfd4 <SDMMC_CmdBlockLength>
 800a944:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d001      	beq.n	800a950 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94e:	e0ad      	b.n	800aaac <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a958:	041b      	lsls	r3, r3, #16
 800a95a:	4619      	mov	r1, r3
 800a95c:	4610      	mov	r0, r2
 800a95e:	f002 fc81 	bl	800d264 <SDMMC_CmdAppCommand>
 800a962:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a966:	2b00      	cmp	r3, #0
 800a968:	d001      	beq.n	800a96e <SD_FindSCR+0x56>
  {
    return errorstate;
 800a96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96c:	e09e      	b.n	800aaac <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a96e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a972:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a974:	2308      	movs	r3, #8
 800a976:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a978:	2330      	movs	r3, #48	; 0x30
 800a97a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a97c:	2302      	movs	r3, #2
 800a97e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a980:	2300      	movs	r3, #0
 800a982:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a984:	2301      	movs	r3, #1
 800a986:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f107 0210 	add.w	r2, r7, #16
 800a990:	4611      	mov	r1, r2
 800a992:	4618      	mov	r0, r3
 800a994:	f002 faf2 	bl	800cf7c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4618      	mov	r0, r3
 800a99e:	f002 fcc7 	bl	800d330 <SDMMC_CmdSendSCR>
 800a9a2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d027      	beq.n	800a9fa <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ac:	e07e      	b.n	800aaac <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d113      	bne.n	800a9e4 <SD_FindSCR+0xcc>
 800a9bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d110      	bne.n	800a9e4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f002 fa50 	bl	800ce6c <SDMMC_ReadFIFO>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f002 fa49 	bl	800ce6c <SDMMC_ReadFIFO>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	60fb      	str	r3, [r7, #12]
      index++;
 800a9de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a9e4:	f7f9 fadc 	bl	8003fa0 <HAL_GetTick>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ec:	1ad3      	subs	r3, r2, r3
 800a9ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9f2:	d102      	bne.n	800a9fa <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a9f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a9f8:	e058      	b.n	800aaac <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa00:	f240 532a 	movw	r3, #1322	; 0x52a
 800aa04:	4013      	ands	r3, r2
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d0d1      	beq.n	800a9ae <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa10:	f003 0308 	and.w	r3, r3, #8
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d005      	beq.n	800aa24 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2208      	movs	r2, #8
 800aa1e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800aa20:	2308      	movs	r3, #8
 800aa22:	e043      	b.n	800aaac <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa2a:	f003 0302 	and.w	r3, r3, #2
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d005      	beq.n	800aa3e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	2202      	movs	r2, #2
 800aa38:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800aa3a:	2302      	movs	r3, #2
 800aa3c:	e036      	b.n	800aaac <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa44:	f003 0320 	and.w	r3, r3, #32
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d005      	beq.n	800aa58 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	2220      	movs	r2, #32
 800aa52:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800aa54:	2320      	movs	r3, #32
 800aa56:	e029      	b.n	800aaac <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a15      	ldr	r2, [pc, #84]	; (800aab4 <SD_FindSCR+0x19c>)
 800aa5e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	061a      	lsls	r2, r3, #24
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	021b      	lsls	r3, r3, #8
 800aa68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aa6c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	0a1b      	lsrs	r3, r3, #8
 800aa72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800aa76:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	0e1b      	lsrs	r3, r3, #24
 800aa7c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800aa7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa80:	601a      	str	r2, [r3, #0]
    scr++;
 800aa82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa84:	3304      	adds	r3, #4
 800aa86:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	061a      	lsls	r2, r3, #24
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	021b      	lsls	r3, r3, #8
 800aa90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aa94:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	0a1b      	lsrs	r3, r3, #8
 800aa9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800aa9e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	0e1b      	lsrs	r3, r3, #24
 800aaa4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800aaa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3738      	adds	r7, #56	; 0x38
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}
 800aab4:	18000f3a 	.word	0x18000f3a

0800aab8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	4603      	mov	r3, r0
 800aac0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800aac2:	bf00      	nop
 800aac4:	370c      	adds	r7, #12
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr

0800aace <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aace:	b580      	push	{r7, lr}
 800aad0:	b084      	sub	sp, #16
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d101      	bne.n	800aae0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aadc:	2301      	movs	r3, #1
 800aade:	e095      	b.n	800ac0c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d108      	bne.n	800aafa <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	685b      	ldr	r3, [r3, #4]
 800aaec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aaf0:	d009      	beq.n	800ab06 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	61da      	str	r2, [r3, #28]
 800aaf8:	e005      	b.n	800ab06 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2200      	movs	r2, #0
 800aafe:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2200      	movs	r2, #0
 800ab04:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d106      	bne.n	800ab26 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f7f8 ffe3 	bl	8003aec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2202      	movs	r2, #2
 800ab2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	681a      	ldr	r2, [r3, #0]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab3c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	68db      	ldr	r3, [r3, #12]
 800ab42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ab46:	d902      	bls.n	800ab4e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	60fb      	str	r3, [r7, #12]
 800ab4c:	e002      	b.n	800ab54 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ab4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab52:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800ab5c:	d007      	beq.n	800ab6e <HAL_SPI_Init+0xa0>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ab66:	d002      	beq.n	800ab6e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	685b      	ldr	r3, [r3, #4]
 800ab72:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	689b      	ldr	r3, [r3, #8]
 800ab7a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ab7e:	431a      	orrs	r2, r3
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	691b      	ldr	r3, [r3, #16]
 800ab84:	f003 0302 	and.w	r3, r3, #2
 800ab88:	431a      	orrs	r2, r3
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	695b      	ldr	r3, [r3, #20]
 800ab8e:	f003 0301 	and.w	r3, r3, #1
 800ab92:	431a      	orrs	r2, r3
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	699b      	ldr	r3, [r3, #24]
 800ab98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ab9c:	431a      	orrs	r2, r3
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	69db      	ldr	r3, [r3, #28]
 800aba2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aba6:	431a      	orrs	r2, r3
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6a1b      	ldr	r3, [r3, #32]
 800abac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abb0:	ea42 0103 	orr.w	r1, r2, r3
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abb8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	430a      	orrs	r2, r1
 800abc2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	699b      	ldr	r3, [r3, #24]
 800abc8:	0c1b      	lsrs	r3, r3, #16
 800abca:	f003 0204 	and.w	r2, r3, #4
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abd2:	f003 0310 	and.w	r3, r3, #16
 800abd6:	431a      	orrs	r2, r3
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abdc:	f003 0308 	and.w	r3, r3, #8
 800abe0:	431a      	orrs	r2, r3
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800abea:	ea42 0103 	orr.w	r1, r2, r3
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	430a      	orrs	r2, r1
 800abfa:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2200      	movs	r2, #0
 800ac00:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2201      	movs	r2, #1
 800ac06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ac0a:	2300      	movs	r3, #0
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3710      	adds	r7, #16
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d101      	bne.n	800ac26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ac22:	2301      	movs	r3, #1
 800ac24:	e049      	b.n	800acba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d106      	bne.n	800ac40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f7f8 ff98 	bl	8003b70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2202      	movs	r2, #2
 800ac44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	3304      	adds	r3, #4
 800ac50:	4619      	mov	r1, r3
 800ac52:	4610      	mov	r0, r2
 800ac54:	f000 fad2 	bl	800b1fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2201      	movs	r2, #1
 800ac64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2201      	movs	r2, #1
 800ac74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2201      	movs	r2, #1
 800aca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2201      	movs	r2, #1
 800acac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2201      	movs	r2, #1
 800acb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800acb8:	2300      	movs	r3, #0
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3708      	adds	r7, #8
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
	...

0800acc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b085      	sub	sp, #20
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d001      	beq.n	800acdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800acd8:	2301      	movs	r3, #1
 800acda:	e04f      	b.n	800ad7c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2202      	movs	r2, #2
 800ace0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	68da      	ldr	r2, [r3, #12]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f042 0201 	orr.w	r2, r2, #1
 800acf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a23      	ldr	r2, [pc, #140]	; (800ad88 <HAL_TIM_Base_Start_IT+0xc4>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d01d      	beq.n	800ad3a <HAL_TIM_Base_Start_IT+0x76>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad06:	d018      	beq.n	800ad3a <HAL_TIM_Base_Start_IT+0x76>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a1f      	ldr	r2, [pc, #124]	; (800ad8c <HAL_TIM_Base_Start_IT+0xc8>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d013      	beq.n	800ad3a <HAL_TIM_Base_Start_IT+0x76>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4a1e      	ldr	r2, [pc, #120]	; (800ad90 <HAL_TIM_Base_Start_IT+0xcc>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d00e      	beq.n	800ad3a <HAL_TIM_Base_Start_IT+0x76>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a1c      	ldr	r2, [pc, #112]	; (800ad94 <HAL_TIM_Base_Start_IT+0xd0>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d009      	beq.n	800ad3a <HAL_TIM_Base_Start_IT+0x76>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a1b      	ldr	r2, [pc, #108]	; (800ad98 <HAL_TIM_Base_Start_IT+0xd4>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d004      	beq.n	800ad3a <HAL_TIM_Base_Start_IT+0x76>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4a19      	ldr	r2, [pc, #100]	; (800ad9c <HAL_TIM_Base_Start_IT+0xd8>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d115      	bne.n	800ad66 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	689a      	ldr	r2, [r3, #8]
 800ad40:	4b17      	ldr	r3, [pc, #92]	; (800ada0 <HAL_TIM_Base_Start_IT+0xdc>)
 800ad42:	4013      	ands	r3, r2
 800ad44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2b06      	cmp	r3, #6
 800ad4a:	d015      	beq.n	800ad78 <HAL_TIM_Base_Start_IT+0xb4>
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad52:	d011      	beq.n	800ad78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	681a      	ldr	r2, [r3, #0]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f042 0201 	orr.w	r2, r2, #1
 800ad62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad64:	e008      	b.n	800ad78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f042 0201 	orr.w	r2, r2, #1
 800ad74:	601a      	str	r2, [r3, #0]
 800ad76:	e000      	b.n	800ad7a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad78:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ad7a:	2300      	movs	r3, #0
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3714      	adds	r7, #20
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr
 800ad88:	40012c00 	.word	0x40012c00
 800ad8c:	40000400 	.word	0x40000400
 800ad90:	40000800 	.word	0x40000800
 800ad94:	40000c00 	.word	0x40000c00
 800ad98:	40013400 	.word	0x40013400
 800ad9c:	40014000 	.word	0x40014000
 800ada0:	00010007 	.word	0x00010007

0800ada4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d101      	bne.n	800adb6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800adb2:	2301      	movs	r3, #1
 800adb4:	e049      	b.n	800ae4a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800adbc:	b2db      	uxtb	r3, r3
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d106      	bne.n	800add0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2200      	movs	r2, #0
 800adc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 f841 	bl	800ae52 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2202      	movs	r2, #2
 800add4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681a      	ldr	r2, [r3, #0]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	3304      	adds	r3, #4
 800ade0:	4619      	mov	r1, r3
 800ade2:	4610      	mov	r0, r2
 800ade4:	f000 fa0a 	bl	800b1fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2201      	movs	r2, #1
 800adec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2201      	movs	r2, #1
 800adf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2201      	movs	r2, #1
 800adfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2201      	movs	r2, #1
 800ae04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2201      	movs	r2, #1
 800ae14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2201      	movs	r2, #1
 800ae24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2201      	movs	r2, #1
 800ae34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2201      	movs	r2, #1
 800ae44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ae48:	2300      	movs	r3, #0
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3708      	adds	r7, #8
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800ae52:	b480      	push	{r7}
 800ae54:	b083      	sub	sp, #12
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800ae5a:	bf00      	nop
 800ae5c:	370c      	adds	r7, #12
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr

0800ae66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b082      	sub	sp, #8
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	691b      	ldr	r3, [r3, #16]
 800ae74:	f003 0302 	and.w	r3, r3, #2
 800ae78:	2b02      	cmp	r3, #2
 800ae7a:	d122      	bne.n	800aec2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	f003 0302 	and.w	r3, r3, #2
 800ae86:	2b02      	cmp	r3, #2
 800ae88:	d11b      	bne.n	800aec2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f06f 0202 	mvn.w	r2, #2
 800ae92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2201      	movs	r2, #1
 800ae98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	699b      	ldr	r3, [r3, #24]
 800aea0:	f003 0303 	and.w	r3, r3, #3
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d003      	beq.n	800aeb0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 f989 	bl	800b1c0 <HAL_TIM_IC_CaptureCallback>
 800aeae:	e005      	b.n	800aebc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f000 f97b 	bl	800b1ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 f98c 	bl	800b1d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	691b      	ldr	r3, [r3, #16]
 800aec8:	f003 0304 	and.w	r3, r3, #4
 800aecc:	2b04      	cmp	r3, #4
 800aece:	d122      	bne.n	800af16 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	68db      	ldr	r3, [r3, #12]
 800aed6:	f003 0304 	and.w	r3, r3, #4
 800aeda:	2b04      	cmp	r3, #4
 800aedc:	d11b      	bne.n	800af16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f06f 0204 	mvn.w	r2, #4
 800aee6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2202      	movs	r2, #2
 800aeec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	699b      	ldr	r3, [r3, #24]
 800aef4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d003      	beq.n	800af04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f000 f95f 	bl	800b1c0 <HAL_TIM_IC_CaptureCallback>
 800af02:	e005      	b.n	800af10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f000 f951 	bl	800b1ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 f962 	bl	800b1d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2200      	movs	r2, #0
 800af14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	691b      	ldr	r3, [r3, #16]
 800af1c:	f003 0308 	and.w	r3, r3, #8
 800af20:	2b08      	cmp	r3, #8
 800af22:	d122      	bne.n	800af6a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	68db      	ldr	r3, [r3, #12]
 800af2a:	f003 0308 	and.w	r3, r3, #8
 800af2e:	2b08      	cmp	r3, #8
 800af30:	d11b      	bne.n	800af6a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f06f 0208 	mvn.w	r2, #8
 800af3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2204      	movs	r2, #4
 800af40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	69db      	ldr	r3, [r3, #28]
 800af48:	f003 0303 	and.w	r3, r3, #3
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d003      	beq.n	800af58 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 f935 	bl	800b1c0 <HAL_TIM_IC_CaptureCallback>
 800af56:	e005      	b.n	800af64 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f000 f927 	bl	800b1ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 f938 	bl	800b1d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	691b      	ldr	r3, [r3, #16]
 800af70:	f003 0310 	and.w	r3, r3, #16
 800af74:	2b10      	cmp	r3, #16
 800af76:	d122      	bne.n	800afbe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	68db      	ldr	r3, [r3, #12]
 800af7e:	f003 0310 	and.w	r3, r3, #16
 800af82:	2b10      	cmp	r3, #16
 800af84:	d11b      	bne.n	800afbe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f06f 0210 	mvn.w	r2, #16
 800af8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2208      	movs	r2, #8
 800af94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	69db      	ldr	r3, [r3, #28]
 800af9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d003      	beq.n	800afac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f000 f90b 	bl	800b1c0 <HAL_TIM_IC_CaptureCallback>
 800afaa:	e005      	b.n	800afb8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 f8fd 	bl	800b1ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 f90e 	bl	800b1d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2200      	movs	r2, #0
 800afbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	691b      	ldr	r3, [r3, #16]
 800afc4:	f003 0301 	and.w	r3, r3, #1
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d10e      	bne.n	800afea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	68db      	ldr	r3, [r3, #12]
 800afd2:	f003 0301 	and.w	r3, r3, #1
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d107      	bne.n	800afea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f06f 0201 	mvn.w	r2, #1
 800afe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 f8d7 	bl	800b198 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	691b      	ldr	r3, [r3, #16]
 800aff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aff4:	2b80      	cmp	r3, #128	; 0x80
 800aff6:	d10e      	bne.n	800b016 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	68db      	ldr	r3, [r3, #12]
 800affe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b002:	2b80      	cmp	r3, #128	; 0x80
 800b004:	d107      	bne.n	800b016 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b00e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 fceb 	bl	800b9ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	691b      	ldr	r3, [r3, #16]
 800b01c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b024:	d10e      	bne.n	800b044 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	68db      	ldr	r3, [r3, #12]
 800b02c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b030:	2b80      	cmp	r3, #128	; 0x80
 800b032:	d107      	bne.n	800b044 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b03c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 fcde 	bl	800ba00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	691b      	ldr	r3, [r3, #16]
 800b04a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b04e:	2b40      	cmp	r3, #64	; 0x40
 800b050:	d10e      	bne.n	800b070 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	68db      	ldr	r3, [r3, #12]
 800b058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b05c:	2b40      	cmp	r3, #64	; 0x40
 800b05e:	d107      	bne.n	800b070 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 f8bc 	bl	800b1e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	691b      	ldr	r3, [r3, #16]
 800b076:	f003 0320 	and.w	r3, r3, #32
 800b07a:	2b20      	cmp	r3, #32
 800b07c:	d10e      	bne.n	800b09c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	68db      	ldr	r3, [r3, #12]
 800b084:	f003 0320 	and.w	r3, r3, #32
 800b088:	2b20      	cmp	r3, #32
 800b08a:	d107      	bne.n	800b09c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f06f 0220 	mvn.w	r2, #32
 800b094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 fc9e 	bl	800b9d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b09c:	bf00      	nop
 800b09e:	3708      	adds	r7, #8
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b086      	sub	sp, #24
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	60b9      	str	r1, [r7, #8]
 800b0ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0ba:	2b01      	cmp	r3, #1
 800b0bc:	d101      	bne.n	800b0c2 <HAL_TIM_OC_ConfigChannel+0x1e>
 800b0be:	2302      	movs	r3, #2
 800b0c0:	e066      	b.n	800b190 <HAL_TIM_OC_ConfigChannel+0xec>
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2b14      	cmp	r3, #20
 800b0ce:	d857      	bhi.n	800b180 <HAL_TIM_OC_ConfigChannel+0xdc>
 800b0d0:	a201      	add	r2, pc, #4	; (adr r2, 800b0d8 <HAL_TIM_OC_ConfigChannel+0x34>)
 800b0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d6:	bf00      	nop
 800b0d8:	0800b12d 	.word	0x0800b12d
 800b0dc:	0800b181 	.word	0x0800b181
 800b0e0:	0800b181 	.word	0x0800b181
 800b0e4:	0800b181 	.word	0x0800b181
 800b0e8:	0800b13b 	.word	0x0800b13b
 800b0ec:	0800b181 	.word	0x0800b181
 800b0f0:	0800b181 	.word	0x0800b181
 800b0f4:	0800b181 	.word	0x0800b181
 800b0f8:	0800b149 	.word	0x0800b149
 800b0fc:	0800b181 	.word	0x0800b181
 800b100:	0800b181 	.word	0x0800b181
 800b104:	0800b181 	.word	0x0800b181
 800b108:	0800b157 	.word	0x0800b157
 800b10c:	0800b181 	.word	0x0800b181
 800b110:	0800b181 	.word	0x0800b181
 800b114:	0800b181 	.word	0x0800b181
 800b118:	0800b165 	.word	0x0800b165
 800b11c:	0800b181 	.word	0x0800b181
 800b120:	0800b181 	.word	0x0800b181
 800b124:	0800b181 	.word	0x0800b181
 800b128:	0800b173 	.word	0x0800b173
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	68b9      	ldr	r1, [r7, #8]
 800b132:	4618      	mov	r0, r3
 800b134:	f000 f8fc 	bl	800b330 <TIM_OC1_SetConfig>
      break;
 800b138:	e025      	b.n	800b186 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	68b9      	ldr	r1, [r7, #8]
 800b140:	4618      	mov	r0, r3
 800b142:	f000 f985 	bl	800b450 <TIM_OC2_SetConfig>
      break;
 800b146:	e01e      	b.n	800b186 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	68b9      	ldr	r1, [r7, #8]
 800b14e:	4618      	mov	r0, r3
 800b150:	f000 fa08 	bl	800b564 <TIM_OC3_SetConfig>
      break;
 800b154:	e017      	b.n	800b186 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	68b9      	ldr	r1, [r7, #8]
 800b15c:	4618      	mov	r0, r3
 800b15e:	f000 fa89 	bl	800b674 <TIM_OC4_SetConfig>
      break;
 800b162:	e010      	b.n	800b186 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	68b9      	ldr	r1, [r7, #8]
 800b16a:	4618      	mov	r0, r3
 800b16c:	f000 faec 	bl	800b748 <TIM_OC5_SetConfig>
      break;
 800b170:	e009      	b.n	800b186 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	68b9      	ldr	r1, [r7, #8]
 800b178:	4618      	mov	r0, r3
 800b17a:	f000 fb49 	bl	800b810 <TIM_OC6_SetConfig>
      break;
 800b17e:	e002      	b.n	800b186 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800b180:	2301      	movs	r3, #1
 800b182:	75fb      	strb	r3, [r7, #23]
      break;
 800b184:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2200      	movs	r2, #0
 800b18a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b18e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b190:	4618      	mov	r0, r3
 800b192:	3718      	adds	r7, #24
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b1a0:	bf00      	nop
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b083      	sub	sp, #12
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b1b4:	bf00      	nop
 800b1b6:	370c      	adds	r7, #12
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr

0800b1c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b083      	sub	sp, #12
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b1c8:	bf00      	nop
 800b1ca:	370c      	adds	r7, #12
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr

0800b1d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b083      	sub	sp, #12
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b1dc:	bf00      	nop
 800b1de:	370c      	adds	r7, #12
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr

0800b1e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b1f0:	bf00      	nop
 800b1f2:	370c      	adds	r7, #12
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b085      	sub	sp, #20
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	4a40      	ldr	r2, [pc, #256]	; (800b310 <TIM_Base_SetConfig+0x114>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d013      	beq.n	800b23c <TIM_Base_SetConfig+0x40>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b21a:	d00f      	beq.n	800b23c <TIM_Base_SetConfig+0x40>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	4a3d      	ldr	r2, [pc, #244]	; (800b314 <TIM_Base_SetConfig+0x118>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d00b      	beq.n	800b23c <TIM_Base_SetConfig+0x40>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	4a3c      	ldr	r2, [pc, #240]	; (800b318 <TIM_Base_SetConfig+0x11c>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d007      	beq.n	800b23c <TIM_Base_SetConfig+0x40>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4a3b      	ldr	r2, [pc, #236]	; (800b31c <TIM_Base_SetConfig+0x120>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d003      	beq.n	800b23c <TIM_Base_SetConfig+0x40>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	4a3a      	ldr	r2, [pc, #232]	; (800b320 <TIM_Base_SetConfig+0x124>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d108      	bne.n	800b24e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	68fa      	ldr	r2, [r7, #12]
 800b24a:	4313      	orrs	r3, r2
 800b24c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	4a2f      	ldr	r2, [pc, #188]	; (800b310 <TIM_Base_SetConfig+0x114>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d01f      	beq.n	800b296 <TIM_Base_SetConfig+0x9a>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b25c:	d01b      	beq.n	800b296 <TIM_Base_SetConfig+0x9a>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	4a2c      	ldr	r2, [pc, #176]	; (800b314 <TIM_Base_SetConfig+0x118>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d017      	beq.n	800b296 <TIM_Base_SetConfig+0x9a>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	4a2b      	ldr	r2, [pc, #172]	; (800b318 <TIM_Base_SetConfig+0x11c>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d013      	beq.n	800b296 <TIM_Base_SetConfig+0x9a>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	4a2a      	ldr	r2, [pc, #168]	; (800b31c <TIM_Base_SetConfig+0x120>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d00f      	beq.n	800b296 <TIM_Base_SetConfig+0x9a>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	4a29      	ldr	r2, [pc, #164]	; (800b320 <TIM_Base_SetConfig+0x124>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d00b      	beq.n	800b296 <TIM_Base_SetConfig+0x9a>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	4a28      	ldr	r2, [pc, #160]	; (800b324 <TIM_Base_SetConfig+0x128>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d007      	beq.n	800b296 <TIM_Base_SetConfig+0x9a>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4a27      	ldr	r2, [pc, #156]	; (800b328 <TIM_Base_SetConfig+0x12c>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d003      	beq.n	800b296 <TIM_Base_SetConfig+0x9a>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4a26      	ldr	r2, [pc, #152]	; (800b32c <TIM_Base_SetConfig+0x130>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d108      	bne.n	800b2a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b29c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	68db      	ldr	r3, [r3, #12]
 800b2a2:	68fa      	ldr	r2, [r7, #12]
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	695b      	ldr	r3, [r3, #20]
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	689a      	ldr	r2, [r3, #8]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	681a      	ldr	r2, [r3, #0]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	4a10      	ldr	r2, [pc, #64]	; (800b310 <TIM_Base_SetConfig+0x114>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d00f      	beq.n	800b2f4 <TIM_Base_SetConfig+0xf8>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	4a12      	ldr	r2, [pc, #72]	; (800b320 <TIM_Base_SetConfig+0x124>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d00b      	beq.n	800b2f4 <TIM_Base_SetConfig+0xf8>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	4a11      	ldr	r2, [pc, #68]	; (800b324 <TIM_Base_SetConfig+0x128>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d007      	beq.n	800b2f4 <TIM_Base_SetConfig+0xf8>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	4a10      	ldr	r2, [pc, #64]	; (800b328 <TIM_Base_SetConfig+0x12c>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d003      	beq.n	800b2f4 <TIM_Base_SetConfig+0xf8>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	4a0f      	ldr	r2, [pc, #60]	; (800b32c <TIM_Base_SetConfig+0x130>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d103      	bne.n	800b2fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	691a      	ldr	r2, [r3, #16]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2201      	movs	r2, #1
 800b300:	615a      	str	r2, [r3, #20]
}
 800b302:	bf00      	nop
 800b304:	3714      	adds	r7, #20
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr
 800b30e:	bf00      	nop
 800b310:	40012c00 	.word	0x40012c00
 800b314:	40000400 	.word	0x40000400
 800b318:	40000800 	.word	0x40000800
 800b31c:	40000c00 	.word	0x40000c00
 800b320:	40013400 	.word	0x40013400
 800b324:	40014000 	.word	0x40014000
 800b328:	40014400 	.word	0x40014400
 800b32c:	40014800 	.word	0x40014800

0800b330 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b330:	b480      	push	{r7}
 800b332:	b087      	sub	sp, #28
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6a1b      	ldr	r3, [r3, #32]
 800b33e:	f023 0201 	bic.w	r2, r3, #1
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6a1b      	ldr	r3, [r3, #32]
 800b34a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	699b      	ldr	r3, [r3, #24]
 800b356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b35e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f023 0303 	bic.w	r3, r3, #3
 800b36a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	68fa      	ldr	r2, [r7, #12]
 800b372:	4313      	orrs	r3, r2
 800b374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	f023 0302 	bic.w	r3, r3, #2
 800b37c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	689b      	ldr	r3, [r3, #8]
 800b382:	697a      	ldr	r2, [r7, #20]
 800b384:	4313      	orrs	r3, r2
 800b386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	4a2c      	ldr	r2, [pc, #176]	; (800b43c <TIM_OC1_SetConfig+0x10c>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d00f      	beq.n	800b3b0 <TIM_OC1_SetConfig+0x80>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	4a2b      	ldr	r2, [pc, #172]	; (800b440 <TIM_OC1_SetConfig+0x110>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d00b      	beq.n	800b3b0 <TIM_OC1_SetConfig+0x80>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	4a2a      	ldr	r2, [pc, #168]	; (800b444 <TIM_OC1_SetConfig+0x114>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d007      	beq.n	800b3b0 <TIM_OC1_SetConfig+0x80>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	4a29      	ldr	r2, [pc, #164]	; (800b448 <TIM_OC1_SetConfig+0x118>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d003      	beq.n	800b3b0 <TIM_OC1_SetConfig+0x80>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	4a28      	ldr	r2, [pc, #160]	; (800b44c <TIM_OC1_SetConfig+0x11c>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d10c      	bne.n	800b3ca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	f023 0308 	bic.w	r3, r3, #8
 800b3b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	68db      	ldr	r3, [r3, #12]
 800b3bc:	697a      	ldr	r2, [r7, #20]
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	f023 0304 	bic.w	r3, r3, #4
 800b3c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	4a1b      	ldr	r2, [pc, #108]	; (800b43c <TIM_OC1_SetConfig+0x10c>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d00f      	beq.n	800b3f2 <TIM_OC1_SetConfig+0xc2>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	4a1a      	ldr	r2, [pc, #104]	; (800b440 <TIM_OC1_SetConfig+0x110>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d00b      	beq.n	800b3f2 <TIM_OC1_SetConfig+0xc2>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	4a19      	ldr	r2, [pc, #100]	; (800b444 <TIM_OC1_SetConfig+0x114>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d007      	beq.n	800b3f2 <TIM_OC1_SetConfig+0xc2>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	4a18      	ldr	r2, [pc, #96]	; (800b448 <TIM_OC1_SetConfig+0x118>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d003      	beq.n	800b3f2 <TIM_OC1_SetConfig+0xc2>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	4a17      	ldr	r2, [pc, #92]	; (800b44c <TIM_OC1_SetConfig+0x11c>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d111      	bne.n	800b416 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b400:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	695b      	ldr	r3, [r3, #20]
 800b406:	693a      	ldr	r2, [r7, #16]
 800b408:	4313      	orrs	r3, r2
 800b40a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	699b      	ldr	r3, [r3, #24]
 800b410:	693a      	ldr	r2, [r7, #16]
 800b412:	4313      	orrs	r3, r2
 800b414:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	693a      	ldr	r2, [r7, #16]
 800b41a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	68fa      	ldr	r2, [r7, #12]
 800b420:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	685a      	ldr	r2, [r3, #4]
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	697a      	ldr	r2, [r7, #20]
 800b42e:	621a      	str	r2, [r3, #32]
}
 800b430:	bf00      	nop
 800b432:	371c      	adds	r7, #28
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr
 800b43c:	40012c00 	.word	0x40012c00
 800b440:	40013400 	.word	0x40013400
 800b444:	40014000 	.word	0x40014000
 800b448:	40014400 	.word	0x40014400
 800b44c:	40014800 	.word	0x40014800

0800b450 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b450:	b480      	push	{r7}
 800b452:	b087      	sub	sp, #28
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6a1b      	ldr	r3, [r3, #32]
 800b45e:	f023 0210 	bic.w	r2, r3, #16
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6a1b      	ldr	r3, [r3, #32]
 800b46a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	699b      	ldr	r3, [r3, #24]
 800b476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b47e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b48a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	021b      	lsls	r3, r3, #8
 800b492:	68fa      	ldr	r2, [r7, #12]
 800b494:	4313      	orrs	r3, r2
 800b496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	f023 0320 	bic.w	r3, r3, #32
 800b49e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	689b      	ldr	r3, [r3, #8]
 800b4a4:	011b      	lsls	r3, r3, #4
 800b4a6:	697a      	ldr	r2, [r7, #20]
 800b4a8:	4313      	orrs	r3, r2
 800b4aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	4a28      	ldr	r2, [pc, #160]	; (800b550 <TIM_OC2_SetConfig+0x100>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d003      	beq.n	800b4bc <TIM_OC2_SetConfig+0x6c>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	4a27      	ldr	r2, [pc, #156]	; (800b554 <TIM_OC2_SetConfig+0x104>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d10d      	bne.n	800b4d8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b4c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	68db      	ldr	r3, [r3, #12]
 800b4c8:	011b      	lsls	r3, r3, #4
 800b4ca:	697a      	ldr	r2, [r7, #20]
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	4a1d      	ldr	r2, [pc, #116]	; (800b550 <TIM_OC2_SetConfig+0x100>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d00f      	beq.n	800b500 <TIM_OC2_SetConfig+0xb0>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	4a1c      	ldr	r2, [pc, #112]	; (800b554 <TIM_OC2_SetConfig+0x104>)
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	d00b      	beq.n	800b500 <TIM_OC2_SetConfig+0xb0>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	4a1b      	ldr	r2, [pc, #108]	; (800b558 <TIM_OC2_SetConfig+0x108>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d007      	beq.n	800b500 <TIM_OC2_SetConfig+0xb0>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	4a1a      	ldr	r2, [pc, #104]	; (800b55c <TIM_OC2_SetConfig+0x10c>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d003      	beq.n	800b500 <TIM_OC2_SetConfig+0xb0>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	4a19      	ldr	r2, [pc, #100]	; (800b560 <TIM_OC2_SetConfig+0x110>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d113      	bne.n	800b528 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b506:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b50e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	695b      	ldr	r3, [r3, #20]
 800b514:	009b      	lsls	r3, r3, #2
 800b516:	693a      	ldr	r2, [r7, #16]
 800b518:	4313      	orrs	r3, r2
 800b51a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	699b      	ldr	r3, [r3, #24]
 800b520:	009b      	lsls	r3, r3, #2
 800b522:	693a      	ldr	r2, [r7, #16]
 800b524:	4313      	orrs	r3, r2
 800b526:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	693a      	ldr	r2, [r7, #16]
 800b52c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	68fa      	ldr	r2, [r7, #12]
 800b532:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	685a      	ldr	r2, [r3, #4]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	697a      	ldr	r2, [r7, #20]
 800b540:	621a      	str	r2, [r3, #32]
}
 800b542:	bf00      	nop
 800b544:	371c      	adds	r7, #28
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop
 800b550:	40012c00 	.word	0x40012c00
 800b554:	40013400 	.word	0x40013400
 800b558:	40014000 	.word	0x40014000
 800b55c:	40014400 	.word	0x40014400
 800b560:	40014800 	.word	0x40014800

0800b564 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b564:	b480      	push	{r7}
 800b566:	b087      	sub	sp, #28
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6a1b      	ldr	r3, [r3, #32]
 800b572:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6a1b      	ldr	r3, [r3, #32]
 800b57e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	69db      	ldr	r3, [r3, #28]
 800b58a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f023 0303 	bic.w	r3, r3, #3
 800b59e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	68fa      	ldr	r2, [r7, #12]
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b5b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	021b      	lsls	r3, r3, #8
 800b5b8:	697a      	ldr	r2, [r7, #20]
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	4a27      	ldr	r2, [pc, #156]	; (800b660 <TIM_OC3_SetConfig+0xfc>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d003      	beq.n	800b5ce <TIM_OC3_SetConfig+0x6a>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	4a26      	ldr	r2, [pc, #152]	; (800b664 <TIM_OC3_SetConfig+0x100>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d10d      	bne.n	800b5ea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b5d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	68db      	ldr	r3, [r3, #12]
 800b5da:	021b      	lsls	r3, r3, #8
 800b5dc:	697a      	ldr	r2, [r7, #20]
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b5e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	4a1c      	ldr	r2, [pc, #112]	; (800b660 <TIM_OC3_SetConfig+0xfc>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d00f      	beq.n	800b612 <TIM_OC3_SetConfig+0xae>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	4a1b      	ldr	r2, [pc, #108]	; (800b664 <TIM_OC3_SetConfig+0x100>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d00b      	beq.n	800b612 <TIM_OC3_SetConfig+0xae>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	4a1a      	ldr	r2, [pc, #104]	; (800b668 <TIM_OC3_SetConfig+0x104>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d007      	beq.n	800b612 <TIM_OC3_SetConfig+0xae>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	4a19      	ldr	r2, [pc, #100]	; (800b66c <TIM_OC3_SetConfig+0x108>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d003      	beq.n	800b612 <TIM_OC3_SetConfig+0xae>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	4a18      	ldr	r2, [pc, #96]	; (800b670 <TIM_OC3_SetConfig+0x10c>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d113      	bne.n	800b63a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	695b      	ldr	r3, [r3, #20]
 800b626:	011b      	lsls	r3, r3, #4
 800b628:	693a      	ldr	r2, [r7, #16]
 800b62a:	4313      	orrs	r3, r2
 800b62c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	699b      	ldr	r3, [r3, #24]
 800b632:	011b      	lsls	r3, r3, #4
 800b634:	693a      	ldr	r2, [r7, #16]
 800b636:	4313      	orrs	r3, r2
 800b638:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	693a      	ldr	r2, [r7, #16]
 800b63e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	68fa      	ldr	r2, [r7, #12]
 800b644:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	685a      	ldr	r2, [r3, #4]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	697a      	ldr	r2, [r7, #20]
 800b652:	621a      	str	r2, [r3, #32]
}
 800b654:	bf00      	nop
 800b656:	371c      	adds	r7, #28
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr
 800b660:	40012c00 	.word	0x40012c00
 800b664:	40013400 	.word	0x40013400
 800b668:	40014000 	.word	0x40014000
 800b66c:	40014400 	.word	0x40014400
 800b670:	40014800 	.word	0x40014800

0800b674 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b674:	b480      	push	{r7}
 800b676:	b087      	sub	sp, #28
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6a1b      	ldr	r3, [r3, #32]
 800b682:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6a1b      	ldr	r3, [r3, #32]
 800b68e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	69db      	ldr	r3, [r3, #28]
 800b69a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b6a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	021b      	lsls	r3, r3, #8
 800b6b6:	68fa      	ldr	r2, [r7, #12]
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b6c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	689b      	ldr	r3, [r3, #8]
 800b6c8:	031b      	lsls	r3, r3, #12
 800b6ca:	693a      	ldr	r2, [r7, #16]
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	4a18      	ldr	r2, [pc, #96]	; (800b734 <TIM_OC4_SetConfig+0xc0>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d00f      	beq.n	800b6f8 <TIM_OC4_SetConfig+0x84>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	4a17      	ldr	r2, [pc, #92]	; (800b738 <TIM_OC4_SetConfig+0xc4>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d00b      	beq.n	800b6f8 <TIM_OC4_SetConfig+0x84>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	4a16      	ldr	r2, [pc, #88]	; (800b73c <TIM_OC4_SetConfig+0xc8>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d007      	beq.n	800b6f8 <TIM_OC4_SetConfig+0x84>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	4a15      	ldr	r2, [pc, #84]	; (800b740 <TIM_OC4_SetConfig+0xcc>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d003      	beq.n	800b6f8 <TIM_OC4_SetConfig+0x84>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	4a14      	ldr	r2, [pc, #80]	; (800b744 <TIM_OC4_SetConfig+0xd0>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d109      	bne.n	800b70c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b6fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	695b      	ldr	r3, [r3, #20]
 800b704:	019b      	lsls	r3, r3, #6
 800b706:	697a      	ldr	r2, [r7, #20]
 800b708:	4313      	orrs	r3, r2
 800b70a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	697a      	ldr	r2, [r7, #20]
 800b710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	68fa      	ldr	r2, [r7, #12]
 800b716:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	685a      	ldr	r2, [r3, #4]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	693a      	ldr	r2, [r7, #16]
 800b724:	621a      	str	r2, [r3, #32]
}
 800b726:	bf00      	nop
 800b728:	371c      	adds	r7, #28
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr
 800b732:	bf00      	nop
 800b734:	40012c00 	.word	0x40012c00
 800b738:	40013400 	.word	0x40013400
 800b73c:	40014000 	.word	0x40014000
 800b740:	40014400 	.word	0x40014400
 800b744:	40014800 	.word	0x40014800

0800b748 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b748:	b480      	push	{r7}
 800b74a:	b087      	sub	sp, #28
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6a1b      	ldr	r3, [r3, #32]
 800b756:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6a1b      	ldr	r3, [r3, #32]
 800b762:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b76e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b77a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	68fa      	ldr	r2, [r7, #12]
 800b782:	4313      	orrs	r3, r2
 800b784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b78c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	689b      	ldr	r3, [r3, #8]
 800b792:	041b      	lsls	r3, r3, #16
 800b794:	693a      	ldr	r2, [r7, #16]
 800b796:	4313      	orrs	r3, r2
 800b798:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	4a17      	ldr	r2, [pc, #92]	; (800b7fc <TIM_OC5_SetConfig+0xb4>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d00f      	beq.n	800b7c2 <TIM_OC5_SetConfig+0x7a>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	4a16      	ldr	r2, [pc, #88]	; (800b800 <TIM_OC5_SetConfig+0xb8>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d00b      	beq.n	800b7c2 <TIM_OC5_SetConfig+0x7a>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	4a15      	ldr	r2, [pc, #84]	; (800b804 <TIM_OC5_SetConfig+0xbc>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d007      	beq.n	800b7c2 <TIM_OC5_SetConfig+0x7a>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	4a14      	ldr	r2, [pc, #80]	; (800b808 <TIM_OC5_SetConfig+0xc0>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d003      	beq.n	800b7c2 <TIM_OC5_SetConfig+0x7a>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	4a13      	ldr	r2, [pc, #76]	; (800b80c <TIM_OC5_SetConfig+0xc4>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d109      	bne.n	800b7d6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	695b      	ldr	r3, [r3, #20]
 800b7ce:	021b      	lsls	r3, r3, #8
 800b7d0:	697a      	ldr	r2, [r7, #20]
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	697a      	ldr	r2, [r7, #20]
 800b7da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	68fa      	ldr	r2, [r7, #12]
 800b7e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	685a      	ldr	r2, [r3, #4]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	693a      	ldr	r2, [r7, #16]
 800b7ee:	621a      	str	r2, [r3, #32]
}
 800b7f0:	bf00      	nop
 800b7f2:	371c      	adds	r7, #28
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr
 800b7fc:	40012c00 	.word	0x40012c00
 800b800:	40013400 	.word	0x40013400
 800b804:	40014000 	.word	0x40014000
 800b808:	40014400 	.word	0x40014400
 800b80c:	40014800 	.word	0x40014800

0800b810 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b810:	b480      	push	{r7}
 800b812:	b087      	sub	sp, #28
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a1b      	ldr	r3, [r3, #32]
 800b81e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6a1b      	ldr	r3, [r3, #32]
 800b82a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b83e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	021b      	lsls	r3, r3, #8
 800b84a:	68fa      	ldr	r2, [r7, #12]
 800b84c:	4313      	orrs	r3, r2
 800b84e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b856:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	051b      	lsls	r3, r3, #20
 800b85e:	693a      	ldr	r2, [r7, #16]
 800b860:	4313      	orrs	r3, r2
 800b862:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	4a18      	ldr	r2, [pc, #96]	; (800b8c8 <TIM_OC6_SetConfig+0xb8>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d00f      	beq.n	800b88c <TIM_OC6_SetConfig+0x7c>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	4a17      	ldr	r2, [pc, #92]	; (800b8cc <TIM_OC6_SetConfig+0xbc>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d00b      	beq.n	800b88c <TIM_OC6_SetConfig+0x7c>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	4a16      	ldr	r2, [pc, #88]	; (800b8d0 <TIM_OC6_SetConfig+0xc0>)
 800b878:	4293      	cmp	r3, r2
 800b87a:	d007      	beq.n	800b88c <TIM_OC6_SetConfig+0x7c>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	4a15      	ldr	r2, [pc, #84]	; (800b8d4 <TIM_OC6_SetConfig+0xc4>)
 800b880:	4293      	cmp	r3, r2
 800b882:	d003      	beq.n	800b88c <TIM_OC6_SetConfig+0x7c>
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	4a14      	ldr	r2, [pc, #80]	; (800b8d8 <TIM_OC6_SetConfig+0xc8>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d109      	bne.n	800b8a0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b892:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	695b      	ldr	r3, [r3, #20]
 800b898:	029b      	lsls	r3, r3, #10
 800b89a:	697a      	ldr	r2, [r7, #20]
 800b89c:	4313      	orrs	r3, r2
 800b89e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	697a      	ldr	r2, [r7, #20]
 800b8a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	68fa      	ldr	r2, [r7, #12]
 800b8aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	685a      	ldr	r2, [r3, #4]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	693a      	ldr	r2, [r7, #16]
 800b8b8:	621a      	str	r2, [r3, #32]
}
 800b8ba:	bf00      	nop
 800b8bc:	371c      	adds	r7, #28
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop
 800b8c8:	40012c00 	.word	0x40012c00
 800b8cc:	40013400 	.word	0x40013400
 800b8d0:	40014000 	.word	0x40014000
 800b8d4:	40014400 	.word	0x40014400
 800b8d8:	40014800 	.word	0x40014800

0800b8dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b085      	sub	sp, #20
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8f0:	2b01      	cmp	r3, #1
 800b8f2:	d101      	bne.n	800b8f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b8f4:	2302      	movs	r3, #2
 800b8f6:	e065      	b.n	800b9c4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	68db      	ldr	r3, [r3, #12]
 800b90a:	4313      	orrs	r3, r2
 800b90c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	689b      	ldr	r3, [r3, #8]
 800b918:	4313      	orrs	r3, r2
 800b91a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	4313      	orrs	r3, r2
 800b928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4313      	orrs	r3, r2
 800b936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	691b      	ldr	r3, [r3, #16]
 800b942:	4313      	orrs	r3, r2
 800b944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	695b      	ldr	r3, [r3, #20]
 800b950:	4313      	orrs	r3, r2
 800b952:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b95e:	4313      	orrs	r3, r2
 800b960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	699b      	ldr	r3, [r3, #24]
 800b96c:	041b      	lsls	r3, r3, #16
 800b96e:	4313      	orrs	r3, r2
 800b970:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4a16      	ldr	r2, [pc, #88]	; (800b9d0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d004      	beq.n	800b986 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a14      	ldr	r2, [pc, #80]	; (800b9d4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d115      	bne.n	800b9b2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b990:	051b      	lsls	r3, r3, #20
 800b992:	4313      	orrs	r3, r2
 800b994:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	69db      	ldr	r3, [r3, #28]
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	6a1b      	ldr	r3, [r3, #32]
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	68fa      	ldr	r2, [r7, #12]
 800b9b8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b9c2:	2300      	movs	r3, #0
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3714      	adds	r7, #20
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ce:	4770      	bx	lr
 800b9d0:	40012c00 	.word	0x40012c00
 800b9d4:	40013400 	.word	0x40013400

0800b9d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b083      	sub	sp, #12
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b9e0:	bf00      	nop
 800b9e2:	370c      	adds	r7, #12
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr

0800b9ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b083      	sub	sp, #12
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b9f4:	bf00      	nop
 800b9f6:	370c      	adds	r7, #12
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr

0800ba00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b083      	sub	sp, #12
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ba08:	bf00      	nop
 800ba0a:	370c      	adds	r7, #12
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr

0800ba14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d101      	bne.n	800ba26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ba22:	2301      	movs	r3, #1
 800ba24:	e042      	b.n	800baac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d106      	bne.n	800ba3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2200      	movs	r2, #0
 800ba34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f7f8 f8b9 	bl	8003bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2224      	movs	r2, #36	; 0x24
 800ba42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f022 0201 	bic.w	r2, r2, #1
 800ba54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f000 fb64 	bl	800c124 <UART_SetConfig>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d101      	bne.n	800ba66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ba62:	2301      	movs	r3, #1
 800ba64:	e022      	b.n	800baac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d002      	beq.n	800ba74 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f000 fe54 	bl	800c71c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	685a      	ldr	r2, [r3, #4]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ba82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	689a      	ldr	r2, [r3, #8]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ba92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	681a      	ldr	r2, [r3, #0]
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f042 0201 	orr.w	r2, r2, #1
 800baa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 fedb 	bl	800c860 <UART_CheckIdleState>
 800baaa:	4603      	mov	r3, r0
}
 800baac:	4618      	mov	r0, r3
 800baae:	3708      	adds	r7, #8
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}

0800bab4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b0ba      	sub	sp, #232	; 0xe8
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	69db      	ldr	r3, [r3, #28]
 800bac2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	689b      	ldr	r3, [r3, #8]
 800bad6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bada:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bade:	f640 030f 	movw	r3, #2063	; 0x80f
 800bae2:	4013      	ands	r3, r2
 800bae4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bae8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800baec:	2b00      	cmp	r3, #0
 800baee:	d11b      	bne.n	800bb28 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800baf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baf4:	f003 0320 	and.w	r3, r3, #32
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d015      	beq.n	800bb28 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bafc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb00:	f003 0320 	and.w	r3, r3, #32
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d105      	bne.n	800bb14 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bb08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d009      	beq.n	800bb28 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	f000 82d6 	beq.w	800c0ca <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	4798      	blx	r3
      }
      return;
 800bb26:	e2d0      	b.n	800c0ca <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800bb28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	f000 811f 	beq.w	800bd70 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bb32:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bb36:	4b8b      	ldr	r3, [pc, #556]	; (800bd64 <HAL_UART_IRQHandler+0x2b0>)
 800bb38:	4013      	ands	r3, r2
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d106      	bne.n	800bb4c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bb3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bb42:	4b89      	ldr	r3, [pc, #548]	; (800bd68 <HAL_UART_IRQHandler+0x2b4>)
 800bb44:	4013      	ands	r3, r2
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	f000 8112 	beq.w	800bd70 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bb4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb50:	f003 0301 	and.w	r3, r3, #1
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d011      	beq.n	800bb7c <HAL_UART_IRQHandler+0xc8>
 800bb58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d00b      	beq.n	800bb7c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	2201      	movs	r2, #1
 800bb6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb72:	f043 0201 	orr.w	r2, r3, #1
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb80:	f003 0302 	and.w	r3, r3, #2
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d011      	beq.n	800bbac <HAL_UART_IRQHandler+0xf8>
 800bb88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb8c:	f003 0301 	and.w	r3, r3, #1
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d00b      	beq.n	800bbac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	2202      	movs	r2, #2
 800bb9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bba2:	f043 0204 	orr.w	r2, r3, #4
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bbac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbb0:	f003 0304 	and.w	r3, r3, #4
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d011      	beq.n	800bbdc <HAL_UART_IRQHandler+0x128>
 800bbb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbbc:	f003 0301 	and.w	r3, r3, #1
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d00b      	beq.n	800bbdc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	2204      	movs	r2, #4
 800bbca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbd2:	f043 0202 	orr.w	r2, r3, #2
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bbdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbe0:	f003 0308 	and.w	r3, r3, #8
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d017      	beq.n	800bc18 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bbe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbec:	f003 0320 	and.w	r3, r3, #32
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d105      	bne.n	800bc00 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bbf4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bbf8:	4b5a      	ldr	r3, [pc, #360]	; (800bd64 <HAL_UART_IRQHandler+0x2b0>)
 800bbfa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d00b      	beq.n	800bc18 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	2208      	movs	r2, #8
 800bc06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc0e:	f043 0208 	orr.w	r2, r3, #8
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bc18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d012      	beq.n	800bc4a <HAL_UART_IRQHandler+0x196>
 800bc24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d00c      	beq.n	800bc4a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bc38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc40:	f043 0220 	orr.w	r2, r3, #32
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	f000 823c 	beq.w	800c0ce <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bc56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc5a:	f003 0320 	and.w	r3, r3, #32
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d013      	beq.n	800bc8a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bc62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc66:	f003 0320 	and.w	r3, r3, #32
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d105      	bne.n	800bc7a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bc6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d007      	beq.n	800bc8a <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d003      	beq.n	800bc8a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	689b      	ldr	r3, [r3, #8]
 800bc9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc9e:	2b40      	cmp	r3, #64	; 0x40
 800bca0:	d005      	beq.n	800bcae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bca2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bca6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d04f      	beq.n	800bd4e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f000 fee9 	bl	800ca86 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	689b      	ldr	r3, [r3, #8]
 800bcba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcbe:	2b40      	cmp	r3, #64	; 0x40
 800bcc0:	d141      	bne.n	800bd46 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	3308      	adds	r3, #8
 800bcc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bccc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bcd0:	e853 3f00 	ldrex	r3, [r3]
 800bcd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bcd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bcdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bce0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	3308      	adds	r3, #8
 800bcea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bcee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bcf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcf6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bcfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bcfe:	e841 2300 	strex	r3, r2, [r1]
 800bd02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bd06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d1d9      	bne.n	800bcc2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d013      	beq.n	800bd3e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd1a:	4a14      	ldr	r2, [pc, #80]	; (800bd6c <HAL_UART_IRQHandler+0x2b8>)
 800bd1c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd22:	4618      	mov	r0, r3
 800bd24:	f7f8 fad9 	bl	80042da <HAL_DMA_Abort_IT>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d017      	beq.n	800bd5e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd34:	687a      	ldr	r2, [r7, #4]
 800bd36:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800bd38:	4610      	mov	r0, r2
 800bd3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd3c:	e00f      	b.n	800bd5e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f000 f9da 	bl	800c0f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd44:	e00b      	b.n	800bd5e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 f9d6 	bl	800c0f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd4c:	e007      	b.n	800bd5e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f000 f9d2 	bl	800c0f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800bd5c:	e1b7      	b.n	800c0ce <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd5e:	bf00      	nop
    return;
 800bd60:	e1b5      	b.n	800c0ce <HAL_UART_IRQHandler+0x61a>
 800bd62:	bf00      	nop
 800bd64:	10000001 	.word	0x10000001
 800bd68:	04000120 	.word	0x04000120
 800bd6c:	0800cb53 	.word	0x0800cb53

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	f040 814a 	bne.w	800c00e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bd7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd7e:	f003 0310 	and.w	r3, r3, #16
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	f000 8143 	beq.w	800c00e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bd88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd8c:	f003 0310 	and.w	r3, r3, #16
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	f000 813c 	beq.w	800c00e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	2210      	movs	r2, #16
 800bd9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	689b      	ldr	r3, [r3, #8]
 800bda4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bda8:	2b40      	cmp	r3, #64	; 0x40
 800bdaa:	f040 80b5 	bne.w	800bf18 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bdba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	f000 8187 	beq.w	800c0d2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bdca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	f080 817f 	bcs.w	800c0d2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bdda:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f003 0320 	and.w	r3, r3, #32
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	f040 8086 	bne.w	800befc <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bdfc:	e853 3f00 	ldrex	r3, [r3]
 800be00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800be04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800be08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	461a      	mov	r2, r3
 800be16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800be1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800be1e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800be26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800be2a:	e841 2300 	strex	r3, r2, [r1]
 800be2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800be32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be36:	2b00      	cmp	r3, #0
 800be38:	d1da      	bne.n	800bdf0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	3308      	adds	r3, #8
 800be40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be44:	e853 3f00 	ldrex	r3, [r3]
 800be48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800be4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800be4c:	f023 0301 	bic.w	r3, r3, #1
 800be50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	3308      	adds	r3, #8
 800be5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800be5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800be62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800be66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800be6a:	e841 2300 	strex	r3, r2, [r1]
 800be6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800be70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be72:	2b00      	cmp	r3, #0
 800be74:	d1e1      	bne.n	800be3a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	3308      	adds	r3, #8
 800be7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be80:	e853 3f00 	ldrex	r3, [r3]
 800be84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800be86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	3308      	adds	r3, #8
 800be96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800be9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800be9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bea0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bea2:	e841 2300 	strex	r3, r2, [r1]
 800bea6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bea8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d1e3      	bne.n	800be76 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2220      	movs	r2, #32
 800beb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2200      	movs	r2, #0
 800beba:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bec4:	e853 3f00 	ldrex	r3, [r3]
 800bec8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800beca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800becc:	f023 0310 	bic.w	r3, r3, #16
 800bed0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	461a      	mov	r2, r3
 800beda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bede:	65bb      	str	r3, [r7, #88]	; 0x58
 800bee0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bee2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bee4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bee6:	e841 2300 	strex	r3, r2, [r1]
 800beea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800beec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d1e4      	bne.n	800bebc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7f8 f993 	bl	8004222 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf08:	b29b      	uxth	r3, r3
 800bf0a:	1ad3      	subs	r3, r2, r3
 800bf0c:	b29b      	uxth	r3, r3
 800bf0e:	4619      	mov	r1, r3
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f000 f8fb 	bl	800c10c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bf16:	e0dc      	b.n	800c0d2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf24:	b29b      	uxth	r3, r3
 800bf26:	1ad3      	subs	r3, r2, r3
 800bf28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	f000 80ce 	beq.w	800c0d6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800bf3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	f000 80c9 	beq.w	800c0d6 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf4c:	e853 3f00 	ldrex	r3, [r3]
 800bf50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bf52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	461a      	mov	r2, r3
 800bf62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bf66:	647b      	str	r3, [r7, #68]	; 0x44
 800bf68:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bf6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf6e:	e841 2300 	strex	r3, r2, [r1]
 800bf72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bf74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d1e4      	bne.n	800bf44 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	3308      	adds	r3, #8
 800bf80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf84:	e853 3f00 	ldrex	r3, [r3]
 800bf88:	623b      	str	r3, [r7, #32]
   return(result);
 800bf8a:	6a3b      	ldr	r3, [r7, #32]
 800bf8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf90:	f023 0301 	bic.w	r3, r3, #1
 800bf94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	3308      	adds	r3, #8
 800bf9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bfa2:	633a      	str	r2, [r7, #48]	; 0x30
 800bfa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bfa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfaa:	e841 2300 	strex	r3, r2, [r1]
 800bfae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d1e1      	bne.n	800bf7a <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2220      	movs	r2, #32
 800bfba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	e853 3f00 	ldrex	r3, [r3]
 800bfd6:	60fb      	str	r3, [r7, #12]
   return(result);
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	f023 0310 	bic.w	r3, r3, #16
 800bfde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bfec:	61fb      	str	r3, [r7, #28]
 800bfee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bff0:	69b9      	ldr	r1, [r7, #24]
 800bff2:	69fa      	ldr	r2, [r7, #28]
 800bff4:	e841 2300 	strex	r3, r2, [r1]
 800bff8:	617b      	str	r3, [r7, #20]
   return(result);
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d1e4      	bne.n	800bfca <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c000:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c004:	4619      	mov	r1, r3
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 f880 	bl	800c10c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c00c:	e063      	b.n	800c0d6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c00e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c016:	2b00      	cmp	r3, #0
 800c018:	d00e      	beq.n	800c038 <HAL_UART_IRQHandler+0x584>
 800c01a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c01e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c022:	2b00      	cmp	r3, #0
 800c024:	d008      	beq.n	800c038 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c02e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f000 fdcf 	bl	800cbd4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c036:	e051      	b.n	800c0dc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c03c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c040:	2b00      	cmp	r3, #0
 800c042:	d014      	beq.n	800c06e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d105      	bne.n	800c05c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c054:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d008      	beq.n	800c06e <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c060:	2b00      	cmp	r3, #0
 800c062:	d03a      	beq.n	800c0da <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	4798      	blx	r3
    }
    return;
 800c06c:	e035      	b.n	800c0da <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c06e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c076:	2b00      	cmp	r3, #0
 800c078:	d009      	beq.n	800c08e <HAL_UART_IRQHandler+0x5da>
 800c07a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c07e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c082:	2b00      	cmp	r3, #0
 800c084:	d003      	beq.n	800c08e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f000 fd79 	bl	800cb7e <UART_EndTransmit_IT>
    return;
 800c08c:	e026      	b.n	800c0dc <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c08e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c092:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c096:	2b00      	cmp	r3, #0
 800c098:	d009      	beq.n	800c0ae <HAL_UART_IRQHandler+0x5fa>
 800c09a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c09e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d003      	beq.n	800c0ae <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f000 fda8 	bl	800cbfc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c0ac:	e016      	b.n	800c0dc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c0ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d010      	beq.n	800c0dc <HAL_UART_IRQHandler+0x628>
 800c0ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	da0c      	bge.n	800c0dc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f000 fd90 	bl	800cbe8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c0c8:	e008      	b.n	800c0dc <HAL_UART_IRQHandler+0x628>
      return;
 800c0ca:	bf00      	nop
 800c0cc:	e006      	b.n	800c0dc <HAL_UART_IRQHandler+0x628>
    return;
 800c0ce:	bf00      	nop
 800c0d0:	e004      	b.n	800c0dc <HAL_UART_IRQHandler+0x628>
      return;
 800c0d2:	bf00      	nop
 800c0d4:	e002      	b.n	800c0dc <HAL_UART_IRQHandler+0x628>
      return;
 800c0d6:	bf00      	nop
 800c0d8:	e000      	b.n	800c0dc <HAL_UART_IRQHandler+0x628>
    return;
 800c0da:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800c0dc:	37e8      	adds	r7, #232	; 0xe8
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}
 800c0e2:	bf00      	nop

0800c0e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b083      	sub	sp, #12
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c0ec:	bf00      	nop
 800c0ee:	370c      	adds	r7, #12
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b083      	sub	sp, #12
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c100:	bf00      	nop
 800c102:	370c      	adds	r7, #12
 800c104:	46bd      	mov	sp, r7
 800c106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10a:	4770      	bx	lr

0800c10c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c10c:	b480      	push	{r7}
 800c10e:	b083      	sub	sp, #12
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	460b      	mov	r3, r1
 800c116:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c118:	bf00      	nop
 800c11a:	370c      	adds	r7, #12
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c128:	b08c      	sub	sp, #48	; 0x30
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c12e:	2300      	movs	r3, #0
 800c130:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	689a      	ldr	r2, [r3, #8]
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	691b      	ldr	r3, [r3, #16]
 800c13c:	431a      	orrs	r2, r3
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	695b      	ldr	r3, [r3, #20]
 800c142:	431a      	orrs	r2, r3
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	69db      	ldr	r3, [r3, #28]
 800c148:	4313      	orrs	r3, r2
 800c14a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	681a      	ldr	r2, [r3, #0]
 800c152:	4baa      	ldr	r3, [pc, #680]	; (800c3fc <UART_SetConfig+0x2d8>)
 800c154:	4013      	ands	r3, r2
 800c156:	697a      	ldr	r2, [r7, #20]
 800c158:	6812      	ldr	r2, [r2, #0]
 800c15a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c15c:	430b      	orrs	r3, r1
 800c15e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	685b      	ldr	r3, [r3, #4]
 800c166:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	68da      	ldr	r2, [r3, #12]
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	430a      	orrs	r2, r1
 800c174:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	699b      	ldr	r3, [r3, #24]
 800c17a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a9f      	ldr	r2, [pc, #636]	; (800c400 <UART_SetConfig+0x2dc>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d004      	beq.n	800c190 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	6a1b      	ldr	r3, [r3, #32]
 800c18a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c18c:	4313      	orrs	r3, r2
 800c18e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	689b      	ldr	r3, [r3, #8]
 800c196:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c19a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c19e:	697a      	ldr	r2, [r7, #20]
 800c1a0:	6812      	ldr	r2, [r2, #0]
 800c1a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c1a4:	430b      	orrs	r3, r1
 800c1a6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ae:	f023 010f 	bic.w	r1, r3, #15
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	430a      	orrs	r2, r1
 800c1bc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	4a90      	ldr	r2, [pc, #576]	; (800c404 <UART_SetConfig+0x2e0>)
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d125      	bne.n	800c214 <UART_SetConfig+0xf0>
 800c1c8:	4b8f      	ldr	r3, [pc, #572]	; (800c408 <UART_SetConfig+0x2e4>)
 800c1ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1ce:	f003 0303 	and.w	r3, r3, #3
 800c1d2:	2b03      	cmp	r3, #3
 800c1d4:	d81a      	bhi.n	800c20c <UART_SetConfig+0xe8>
 800c1d6:	a201      	add	r2, pc, #4	; (adr r2, 800c1dc <UART_SetConfig+0xb8>)
 800c1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1dc:	0800c1ed 	.word	0x0800c1ed
 800c1e0:	0800c1fd 	.word	0x0800c1fd
 800c1e4:	0800c1f5 	.word	0x0800c1f5
 800c1e8:	0800c205 	.word	0x0800c205
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1f2:	e116      	b.n	800c422 <UART_SetConfig+0x2fe>
 800c1f4:	2302      	movs	r3, #2
 800c1f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1fa:	e112      	b.n	800c422 <UART_SetConfig+0x2fe>
 800c1fc:	2304      	movs	r3, #4
 800c1fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c202:	e10e      	b.n	800c422 <UART_SetConfig+0x2fe>
 800c204:	2308      	movs	r3, #8
 800c206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c20a:	e10a      	b.n	800c422 <UART_SetConfig+0x2fe>
 800c20c:	2310      	movs	r3, #16
 800c20e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c212:	e106      	b.n	800c422 <UART_SetConfig+0x2fe>
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4a7c      	ldr	r2, [pc, #496]	; (800c40c <UART_SetConfig+0x2e8>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d138      	bne.n	800c290 <UART_SetConfig+0x16c>
 800c21e:	4b7a      	ldr	r3, [pc, #488]	; (800c408 <UART_SetConfig+0x2e4>)
 800c220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c224:	f003 030c 	and.w	r3, r3, #12
 800c228:	2b0c      	cmp	r3, #12
 800c22a:	d82d      	bhi.n	800c288 <UART_SetConfig+0x164>
 800c22c:	a201      	add	r2, pc, #4	; (adr r2, 800c234 <UART_SetConfig+0x110>)
 800c22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c232:	bf00      	nop
 800c234:	0800c269 	.word	0x0800c269
 800c238:	0800c289 	.word	0x0800c289
 800c23c:	0800c289 	.word	0x0800c289
 800c240:	0800c289 	.word	0x0800c289
 800c244:	0800c279 	.word	0x0800c279
 800c248:	0800c289 	.word	0x0800c289
 800c24c:	0800c289 	.word	0x0800c289
 800c250:	0800c289 	.word	0x0800c289
 800c254:	0800c271 	.word	0x0800c271
 800c258:	0800c289 	.word	0x0800c289
 800c25c:	0800c289 	.word	0x0800c289
 800c260:	0800c289 	.word	0x0800c289
 800c264:	0800c281 	.word	0x0800c281
 800c268:	2300      	movs	r3, #0
 800c26a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c26e:	e0d8      	b.n	800c422 <UART_SetConfig+0x2fe>
 800c270:	2302      	movs	r3, #2
 800c272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c276:	e0d4      	b.n	800c422 <UART_SetConfig+0x2fe>
 800c278:	2304      	movs	r3, #4
 800c27a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c27e:	e0d0      	b.n	800c422 <UART_SetConfig+0x2fe>
 800c280:	2308      	movs	r3, #8
 800c282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c286:	e0cc      	b.n	800c422 <UART_SetConfig+0x2fe>
 800c288:	2310      	movs	r3, #16
 800c28a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c28e:	e0c8      	b.n	800c422 <UART_SetConfig+0x2fe>
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4a5e      	ldr	r2, [pc, #376]	; (800c410 <UART_SetConfig+0x2ec>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d125      	bne.n	800c2e6 <UART_SetConfig+0x1c2>
 800c29a:	4b5b      	ldr	r3, [pc, #364]	; (800c408 <UART_SetConfig+0x2e4>)
 800c29c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c2a4:	2b30      	cmp	r3, #48	; 0x30
 800c2a6:	d016      	beq.n	800c2d6 <UART_SetConfig+0x1b2>
 800c2a8:	2b30      	cmp	r3, #48	; 0x30
 800c2aa:	d818      	bhi.n	800c2de <UART_SetConfig+0x1ba>
 800c2ac:	2b20      	cmp	r3, #32
 800c2ae:	d00a      	beq.n	800c2c6 <UART_SetConfig+0x1a2>
 800c2b0:	2b20      	cmp	r3, #32
 800c2b2:	d814      	bhi.n	800c2de <UART_SetConfig+0x1ba>
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d002      	beq.n	800c2be <UART_SetConfig+0x19a>
 800c2b8:	2b10      	cmp	r3, #16
 800c2ba:	d008      	beq.n	800c2ce <UART_SetConfig+0x1aa>
 800c2bc:	e00f      	b.n	800c2de <UART_SetConfig+0x1ba>
 800c2be:	2300      	movs	r3, #0
 800c2c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2c4:	e0ad      	b.n	800c422 <UART_SetConfig+0x2fe>
 800c2c6:	2302      	movs	r3, #2
 800c2c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2cc:	e0a9      	b.n	800c422 <UART_SetConfig+0x2fe>
 800c2ce:	2304      	movs	r3, #4
 800c2d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2d4:	e0a5      	b.n	800c422 <UART_SetConfig+0x2fe>
 800c2d6:	2308      	movs	r3, #8
 800c2d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2dc:	e0a1      	b.n	800c422 <UART_SetConfig+0x2fe>
 800c2de:	2310      	movs	r3, #16
 800c2e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2e4:	e09d      	b.n	800c422 <UART_SetConfig+0x2fe>
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4a4a      	ldr	r2, [pc, #296]	; (800c414 <UART_SetConfig+0x2f0>)
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d125      	bne.n	800c33c <UART_SetConfig+0x218>
 800c2f0:	4b45      	ldr	r3, [pc, #276]	; (800c408 <UART_SetConfig+0x2e4>)
 800c2f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c2fa:	2bc0      	cmp	r3, #192	; 0xc0
 800c2fc:	d016      	beq.n	800c32c <UART_SetConfig+0x208>
 800c2fe:	2bc0      	cmp	r3, #192	; 0xc0
 800c300:	d818      	bhi.n	800c334 <UART_SetConfig+0x210>
 800c302:	2b80      	cmp	r3, #128	; 0x80
 800c304:	d00a      	beq.n	800c31c <UART_SetConfig+0x1f8>
 800c306:	2b80      	cmp	r3, #128	; 0x80
 800c308:	d814      	bhi.n	800c334 <UART_SetConfig+0x210>
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d002      	beq.n	800c314 <UART_SetConfig+0x1f0>
 800c30e:	2b40      	cmp	r3, #64	; 0x40
 800c310:	d008      	beq.n	800c324 <UART_SetConfig+0x200>
 800c312:	e00f      	b.n	800c334 <UART_SetConfig+0x210>
 800c314:	2300      	movs	r3, #0
 800c316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c31a:	e082      	b.n	800c422 <UART_SetConfig+0x2fe>
 800c31c:	2302      	movs	r3, #2
 800c31e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c322:	e07e      	b.n	800c422 <UART_SetConfig+0x2fe>
 800c324:	2304      	movs	r3, #4
 800c326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c32a:	e07a      	b.n	800c422 <UART_SetConfig+0x2fe>
 800c32c:	2308      	movs	r3, #8
 800c32e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c332:	e076      	b.n	800c422 <UART_SetConfig+0x2fe>
 800c334:	2310      	movs	r3, #16
 800c336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c33a:	e072      	b.n	800c422 <UART_SetConfig+0x2fe>
 800c33c:	697b      	ldr	r3, [r7, #20]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4a35      	ldr	r2, [pc, #212]	; (800c418 <UART_SetConfig+0x2f4>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d12a      	bne.n	800c39c <UART_SetConfig+0x278>
 800c346:	4b30      	ldr	r3, [pc, #192]	; (800c408 <UART_SetConfig+0x2e4>)
 800c348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c34c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c350:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c354:	d01a      	beq.n	800c38c <UART_SetConfig+0x268>
 800c356:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c35a:	d81b      	bhi.n	800c394 <UART_SetConfig+0x270>
 800c35c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c360:	d00c      	beq.n	800c37c <UART_SetConfig+0x258>
 800c362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c366:	d815      	bhi.n	800c394 <UART_SetConfig+0x270>
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d003      	beq.n	800c374 <UART_SetConfig+0x250>
 800c36c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c370:	d008      	beq.n	800c384 <UART_SetConfig+0x260>
 800c372:	e00f      	b.n	800c394 <UART_SetConfig+0x270>
 800c374:	2300      	movs	r3, #0
 800c376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c37a:	e052      	b.n	800c422 <UART_SetConfig+0x2fe>
 800c37c:	2302      	movs	r3, #2
 800c37e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c382:	e04e      	b.n	800c422 <UART_SetConfig+0x2fe>
 800c384:	2304      	movs	r3, #4
 800c386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c38a:	e04a      	b.n	800c422 <UART_SetConfig+0x2fe>
 800c38c:	2308      	movs	r3, #8
 800c38e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c392:	e046      	b.n	800c422 <UART_SetConfig+0x2fe>
 800c394:	2310      	movs	r3, #16
 800c396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c39a:	e042      	b.n	800c422 <UART_SetConfig+0x2fe>
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4a17      	ldr	r2, [pc, #92]	; (800c400 <UART_SetConfig+0x2dc>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d13a      	bne.n	800c41c <UART_SetConfig+0x2f8>
 800c3a6:	4b18      	ldr	r3, [pc, #96]	; (800c408 <UART_SetConfig+0x2e4>)
 800c3a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c3b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c3b4:	d01a      	beq.n	800c3ec <UART_SetConfig+0x2c8>
 800c3b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c3ba:	d81b      	bhi.n	800c3f4 <UART_SetConfig+0x2d0>
 800c3bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3c0:	d00c      	beq.n	800c3dc <UART_SetConfig+0x2b8>
 800c3c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3c6:	d815      	bhi.n	800c3f4 <UART_SetConfig+0x2d0>
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d003      	beq.n	800c3d4 <UART_SetConfig+0x2b0>
 800c3cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3d0:	d008      	beq.n	800c3e4 <UART_SetConfig+0x2c0>
 800c3d2:	e00f      	b.n	800c3f4 <UART_SetConfig+0x2d0>
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c3da:	e022      	b.n	800c422 <UART_SetConfig+0x2fe>
 800c3dc:	2302      	movs	r3, #2
 800c3de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c3e2:	e01e      	b.n	800c422 <UART_SetConfig+0x2fe>
 800c3e4:	2304      	movs	r3, #4
 800c3e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c3ea:	e01a      	b.n	800c422 <UART_SetConfig+0x2fe>
 800c3ec:	2308      	movs	r3, #8
 800c3ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c3f2:	e016      	b.n	800c422 <UART_SetConfig+0x2fe>
 800c3f4:	2310      	movs	r3, #16
 800c3f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c3fa:	e012      	b.n	800c422 <UART_SetConfig+0x2fe>
 800c3fc:	cfff69f3 	.word	0xcfff69f3
 800c400:	40008000 	.word	0x40008000
 800c404:	40013800 	.word	0x40013800
 800c408:	40021000 	.word	0x40021000
 800c40c:	40004400 	.word	0x40004400
 800c410:	40004800 	.word	0x40004800
 800c414:	40004c00 	.word	0x40004c00
 800c418:	40005000 	.word	0x40005000
 800c41c:	2310      	movs	r3, #16
 800c41e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4aae      	ldr	r2, [pc, #696]	; (800c6e0 <UART_SetConfig+0x5bc>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	f040 8097 	bne.w	800c55c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c42e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c432:	2b08      	cmp	r3, #8
 800c434:	d823      	bhi.n	800c47e <UART_SetConfig+0x35a>
 800c436:	a201      	add	r2, pc, #4	; (adr r2, 800c43c <UART_SetConfig+0x318>)
 800c438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c43c:	0800c461 	.word	0x0800c461
 800c440:	0800c47f 	.word	0x0800c47f
 800c444:	0800c469 	.word	0x0800c469
 800c448:	0800c47f 	.word	0x0800c47f
 800c44c:	0800c46f 	.word	0x0800c46f
 800c450:	0800c47f 	.word	0x0800c47f
 800c454:	0800c47f 	.word	0x0800c47f
 800c458:	0800c47f 	.word	0x0800c47f
 800c45c:	0800c477 	.word	0x0800c477
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c460:	f7fb f892 	bl	8007588 <HAL_RCC_GetPCLK1Freq>
 800c464:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c466:	e010      	b.n	800c48a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c468:	4b9e      	ldr	r3, [pc, #632]	; (800c6e4 <UART_SetConfig+0x5c0>)
 800c46a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c46c:	e00d      	b.n	800c48a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c46e:	f7fa fff3 	bl	8007458 <HAL_RCC_GetSysClockFreq>
 800c472:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c474:	e009      	b.n	800c48a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c47a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c47c:	e005      	b.n	800c48a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c47e:	2300      	movs	r3, #0
 800c480:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c482:	2301      	movs	r3, #1
 800c484:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c488:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	f000 8130 	beq.w	800c6f2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c496:	4a94      	ldr	r2, [pc, #592]	; (800c6e8 <UART_SetConfig+0x5c4>)
 800c498:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c49c:	461a      	mov	r2, r3
 800c49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4a4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	685a      	ldr	r2, [r3, #4]
 800c4aa:	4613      	mov	r3, r2
 800c4ac:	005b      	lsls	r3, r3, #1
 800c4ae:	4413      	add	r3, r2
 800c4b0:	69ba      	ldr	r2, [r7, #24]
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d305      	bcc.n	800c4c2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	685b      	ldr	r3, [r3, #4]
 800c4ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c4bc:	69ba      	ldr	r2, [r7, #24]
 800c4be:	429a      	cmp	r2, r3
 800c4c0:	d903      	bls.n	800c4ca <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c4c8:	e113      	b.n	800c6f2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	60bb      	str	r3, [r7, #8]
 800c4d0:	60fa      	str	r2, [r7, #12]
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4d6:	4a84      	ldr	r2, [pc, #528]	; (800c6e8 <UART_SetConfig+0x5c4>)
 800c4d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4dc:	b29b      	uxth	r3, r3
 800c4de:	2200      	movs	r2, #0
 800c4e0:	603b      	str	r3, [r7, #0]
 800c4e2:	607a      	str	r2, [r7, #4]
 800c4e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c4ec:	f7f4 fbc4 	bl	8000c78 <__aeabi_uldivmod>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	460b      	mov	r3, r1
 800c4f4:	4610      	mov	r0, r2
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	f04f 0200 	mov.w	r2, #0
 800c4fc:	f04f 0300 	mov.w	r3, #0
 800c500:	020b      	lsls	r3, r1, #8
 800c502:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c506:	0202      	lsls	r2, r0, #8
 800c508:	6979      	ldr	r1, [r7, #20]
 800c50a:	6849      	ldr	r1, [r1, #4]
 800c50c:	0849      	lsrs	r1, r1, #1
 800c50e:	2000      	movs	r0, #0
 800c510:	460c      	mov	r4, r1
 800c512:	4605      	mov	r5, r0
 800c514:	eb12 0804 	adds.w	r8, r2, r4
 800c518:	eb43 0905 	adc.w	r9, r3, r5
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	685b      	ldr	r3, [r3, #4]
 800c520:	2200      	movs	r2, #0
 800c522:	469a      	mov	sl, r3
 800c524:	4693      	mov	fp, r2
 800c526:	4652      	mov	r2, sl
 800c528:	465b      	mov	r3, fp
 800c52a:	4640      	mov	r0, r8
 800c52c:	4649      	mov	r1, r9
 800c52e:	f7f4 fba3 	bl	8000c78 <__aeabi_uldivmod>
 800c532:	4602      	mov	r2, r0
 800c534:	460b      	mov	r3, r1
 800c536:	4613      	mov	r3, r2
 800c538:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c53a:	6a3b      	ldr	r3, [r7, #32]
 800c53c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c540:	d308      	bcc.n	800c554 <UART_SetConfig+0x430>
 800c542:	6a3b      	ldr	r3, [r7, #32]
 800c544:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c548:	d204      	bcs.n	800c554 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	6a3a      	ldr	r2, [r7, #32]
 800c550:	60da      	str	r2, [r3, #12]
 800c552:	e0ce      	b.n	800c6f2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c554:	2301      	movs	r3, #1
 800c556:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c55a:	e0ca      	b.n	800c6f2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	69db      	ldr	r3, [r3, #28]
 800c560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c564:	d166      	bne.n	800c634 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c566:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c56a:	2b08      	cmp	r3, #8
 800c56c:	d827      	bhi.n	800c5be <UART_SetConfig+0x49a>
 800c56e:	a201      	add	r2, pc, #4	; (adr r2, 800c574 <UART_SetConfig+0x450>)
 800c570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c574:	0800c599 	.word	0x0800c599
 800c578:	0800c5a1 	.word	0x0800c5a1
 800c57c:	0800c5a9 	.word	0x0800c5a9
 800c580:	0800c5bf 	.word	0x0800c5bf
 800c584:	0800c5af 	.word	0x0800c5af
 800c588:	0800c5bf 	.word	0x0800c5bf
 800c58c:	0800c5bf 	.word	0x0800c5bf
 800c590:	0800c5bf 	.word	0x0800c5bf
 800c594:	0800c5b7 	.word	0x0800c5b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c598:	f7fa fff6 	bl	8007588 <HAL_RCC_GetPCLK1Freq>
 800c59c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c59e:	e014      	b.n	800c5ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c5a0:	f7fb f808 	bl	80075b4 <HAL_RCC_GetPCLK2Freq>
 800c5a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c5a6:	e010      	b.n	800c5ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c5a8:	4b4e      	ldr	r3, [pc, #312]	; (800c6e4 <UART_SetConfig+0x5c0>)
 800c5aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c5ac:	e00d      	b.n	800c5ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c5ae:	f7fa ff53 	bl	8007458 <HAL_RCC_GetSysClockFreq>
 800c5b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c5b4:	e009      	b.n	800c5ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c5b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c5ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c5bc:	e005      	b.n	800c5ca <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c5c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	f000 8090 	beq.w	800c6f2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5d6:	4a44      	ldr	r2, [pc, #272]	; (800c6e8 <UART_SetConfig+0x5c4>)
 800c5d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c5dc:	461a      	mov	r2, r3
 800c5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5e4:	005a      	lsls	r2, r3, #1
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	085b      	lsrs	r3, r3, #1
 800c5ec:	441a      	add	r2, r3
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	685b      	ldr	r3, [r3, #4]
 800c5f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5f6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c5f8:	6a3b      	ldr	r3, [r7, #32]
 800c5fa:	2b0f      	cmp	r3, #15
 800c5fc:	d916      	bls.n	800c62c <UART_SetConfig+0x508>
 800c5fe:	6a3b      	ldr	r3, [r7, #32]
 800c600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c604:	d212      	bcs.n	800c62c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c606:	6a3b      	ldr	r3, [r7, #32]
 800c608:	b29b      	uxth	r3, r3
 800c60a:	f023 030f 	bic.w	r3, r3, #15
 800c60e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c610:	6a3b      	ldr	r3, [r7, #32]
 800c612:	085b      	lsrs	r3, r3, #1
 800c614:	b29b      	uxth	r3, r3
 800c616:	f003 0307 	and.w	r3, r3, #7
 800c61a:	b29a      	uxth	r2, r3
 800c61c:	8bfb      	ldrh	r3, [r7, #30]
 800c61e:	4313      	orrs	r3, r2
 800c620:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	8bfa      	ldrh	r2, [r7, #30]
 800c628:	60da      	str	r2, [r3, #12]
 800c62a:	e062      	b.n	800c6f2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800c62c:	2301      	movs	r3, #1
 800c62e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c632:	e05e      	b.n	800c6f2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c634:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c638:	2b08      	cmp	r3, #8
 800c63a:	d828      	bhi.n	800c68e <UART_SetConfig+0x56a>
 800c63c:	a201      	add	r2, pc, #4	; (adr r2, 800c644 <UART_SetConfig+0x520>)
 800c63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c642:	bf00      	nop
 800c644:	0800c669 	.word	0x0800c669
 800c648:	0800c671 	.word	0x0800c671
 800c64c:	0800c679 	.word	0x0800c679
 800c650:	0800c68f 	.word	0x0800c68f
 800c654:	0800c67f 	.word	0x0800c67f
 800c658:	0800c68f 	.word	0x0800c68f
 800c65c:	0800c68f 	.word	0x0800c68f
 800c660:	0800c68f 	.word	0x0800c68f
 800c664:	0800c687 	.word	0x0800c687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c668:	f7fa ff8e 	bl	8007588 <HAL_RCC_GetPCLK1Freq>
 800c66c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c66e:	e014      	b.n	800c69a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c670:	f7fa ffa0 	bl	80075b4 <HAL_RCC_GetPCLK2Freq>
 800c674:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c676:	e010      	b.n	800c69a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c678:	4b1a      	ldr	r3, [pc, #104]	; (800c6e4 <UART_SetConfig+0x5c0>)
 800c67a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c67c:	e00d      	b.n	800c69a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c67e:	f7fa feeb 	bl	8007458 <HAL_RCC_GetSysClockFreq>
 800c682:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c684:	e009      	b.n	800c69a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c68a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c68c:	e005      	b.n	800c69a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c68e:	2300      	movs	r3, #0
 800c690:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c692:	2301      	movs	r3, #1
 800c694:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c698:	bf00      	nop
    }

    if (pclk != 0U)
 800c69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d028      	beq.n	800c6f2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6a4:	4a10      	ldr	r2, [pc, #64]	; (800c6e8 <UART_SetConfig+0x5c4>)
 800c6a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ae:	fbb3 f2f2 	udiv	r2, r3, r2
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	685b      	ldr	r3, [r3, #4]
 800c6b6:	085b      	lsrs	r3, r3, #1
 800c6b8:	441a      	add	r2, r3
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	685b      	ldr	r3, [r3, #4]
 800c6be:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6c2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c6c4:	6a3b      	ldr	r3, [r7, #32]
 800c6c6:	2b0f      	cmp	r3, #15
 800c6c8:	d910      	bls.n	800c6ec <UART_SetConfig+0x5c8>
 800c6ca:	6a3b      	ldr	r3, [r7, #32]
 800c6cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6d0:	d20c      	bcs.n	800c6ec <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c6d2:	6a3b      	ldr	r3, [r7, #32]
 800c6d4:	b29a      	uxth	r2, r3
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	60da      	str	r2, [r3, #12]
 800c6dc:	e009      	b.n	800c6f2 <UART_SetConfig+0x5ce>
 800c6de:	bf00      	nop
 800c6e0:	40008000 	.word	0x40008000
 800c6e4:	00f42400 	.word	0x00f42400
 800c6e8:	08017920 	.word	0x08017920
      }
      else
      {
        ret = HAL_ERROR;
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	2201      	movs	r2, #1
 800c6f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	2201      	movs	r2, #1
 800c6fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	2200      	movs	r2, #0
 800c706:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	2200      	movs	r2, #0
 800c70c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c70e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800c712:	4618      	mov	r0, r3
 800c714:	3730      	adds	r7, #48	; 0x30
 800c716:	46bd      	mov	sp, r7
 800c718:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c71c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b083      	sub	sp, #12
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c728:	f003 0301 	and.w	r3, r3, #1
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d00a      	beq.n	800c746 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	430a      	orrs	r2, r1
 800c744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c74a:	f003 0302 	and.w	r3, r3, #2
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d00a      	beq.n	800c768 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	430a      	orrs	r2, r1
 800c766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c76c:	f003 0304 	and.w	r3, r3, #4
 800c770:	2b00      	cmp	r3, #0
 800c772:	d00a      	beq.n	800c78a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	430a      	orrs	r2, r1
 800c788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c78e:	f003 0308 	and.w	r3, r3, #8
 800c792:	2b00      	cmp	r3, #0
 800c794:	d00a      	beq.n	800c7ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	685b      	ldr	r3, [r3, #4]
 800c79c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	430a      	orrs	r2, r1
 800c7aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7b0:	f003 0310 	and.w	r3, r3, #16
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d00a      	beq.n	800c7ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	689b      	ldr	r3, [r3, #8]
 800c7be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	430a      	orrs	r2, r1
 800c7cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7d2:	f003 0320 	and.w	r3, r3, #32
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d00a      	beq.n	800c7f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	689b      	ldr	r3, [r3, #8]
 800c7e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	430a      	orrs	r2, r1
 800c7ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d01a      	beq.n	800c832 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	430a      	orrs	r2, r1
 800c810:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c816:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c81a:	d10a      	bne.n	800c832 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	430a      	orrs	r2, r1
 800c830:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d00a      	beq.n	800c854 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	430a      	orrs	r2, r1
 800c852:	605a      	str	r2, [r3, #4]
  }
}
 800c854:	bf00      	nop
 800c856:	370c      	adds	r7, #12
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr

0800c860 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b086      	sub	sp, #24
 800c864:	af02      	add	r7, sp, #8
 800c866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2200      	movs	r2, #0
 800c86c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c870:	f7f7 fb96 	bl	8003fa0 <HAL_GetTick>
 800c874:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f003 0308 	and.w	r3, r3, #8
 800c880:	2b08      	cmp	r3, #8
 800c882:	d10e      	bne.n	800c8a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c884:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c888:	9300      	str	r3, [sp, #0]
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2200      	movs	r2, #0
 800c88e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 f82f 	bl	800c8f6 <UART_WaitOnFlagUntilTimeout>
 800c898:	4603      	mov	r3, r0
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d001      	beq.n	800c8a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c89e:	2303      	movs	r3, #3
 800c8a0:	e025      	b.n	800c8ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f003 0304 	and.w	r3, r3, #4
 800c8ac:	2b04      	cmp	r3, #4
 800c8ae:	d10e      	bne.n	800c8ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c8b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c8b4:	9300      	str	r3, [sp, #0]
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f000 f819 	bl	800c8f6 <UART_WaitOnFlagUntilTimeout>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d001      	beq.n	800c8ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c8ca:	2303      	movs	r3, #3
 800c8cc:	e00f      	b.n	800c8ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2220      	movs	r2, #32
 800c8d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2220      	movs	r2, #32
 800c8da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c8ec:	2300      	movs	r3, #0
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3710      	adds	r7, #16
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}

0800c8f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c8f6:	b580      	push	{r7, lr}
 800c8f8:	b09c      	sub	sp, #112	; 0x70
 800c8fa:	af00      	add	r7, sp, #0
 800c8fc:	60f8      	str	r0, [r7, #12]
 800c8fe:	60b9      	str	r1, [r7, #8]
 800c900:	603b      	str	r3, [r7, #0]
 800c902:	4613      	mov	r3, r2
 800c904:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c906:	e0a9      	b.n	800ca5c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c908:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c90a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c90e:	f000 80a5 	beq.w	800ca5c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c912:	f7f7 fb45 	bl	8003fa0 <HAL_GetTick>
 800c916:	4602      	mov	r2, r0
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	1ad3      	subs	r3, r2, r3
 800c91c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c91e:	429a      	cmp	r2, r3
 800c920:	d302      	bcc.n	800c928 <UART_WaitOnFlagUntilTimeout+0x32>
 800c922:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c924:	2b00      	cmp	r3, #0
 800c926:	d140      	bne.n	800c9aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c92e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c930:	e853 3f00 	ldrex	r3, [r3]
 800c934:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c938:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c93c:	667b      	str	r3, [r7, #100]	; 0x64
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	461a      	mov	r2, r3
 800c944:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c946:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c948:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c94a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c94c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c94e:	e841 2300 	strex	r3, r2, [r1]
 800c952:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c956:	2b00      	cmp	r3, #0
 800c958:	d1e6      	bne.n	800c928 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	3308      	adds	r3, #8
 800c960:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c964:	e853 3f00 	ldrex	r3, [r3]
 800c968:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c96c:	f023 0301 	bic.w	r3, r3, #1
 800c970:	663b      	str	r3, [r7, #96]	; 0x60
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	3308      	adds	r3, #8
 800c978:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c97a:	64ba      	str	r2, [r7, #72]	; 0x48
 800c97c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c97e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c980:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c982:	e841 2300 	strex	r3, r2, [r1]
 800c986:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d1e5      	bne.n	800c95a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	2220      	movs	r2, #32
 800c992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	2220      	movs	r2, #32
 800c99a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c9a6:	2303      	movs	r3, #3
 800c9a8:	e069      	b.n	800ca7e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f003 0304 	and.w	r3, r3, #4
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d051      	beq.n	800ca5c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	69db      	ldr	r3, [r3, #28]
 800c9be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c9c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c9c6:	d149      	bne.n	800ca5c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c9d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9da:	e853 3f00 	ldrex	r3, [r3]
 800c9de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c9e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c9f0:	637b      	str	r3, [r7, #52]	; 0x34
 800c9f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c9f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9f8:	e841 2300 	strex	r3, r2, [r1]
 800c9fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d1e6      	bne.n	800c9d2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	3308      	adds	r3, #8
 800ca0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	e853 3f00 	ldrex	r3, [r3]
 800ca12:	613b      	str	r3, [r7, #16]
   return(result);
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	f023 0301 	bic.w	r3, r3, #1
 800ca1a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	3308      	adds	r3, #8
 800ca22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ca24:	623a      	str	r2, [r7, #32]
 800ca26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca28:	69f9      	ldr	r1, [r7, #28]
 800ca2a:	6a3a      	ldr	r2, [r7, #32]
 800ca2c:	e841 2300 	strex	r3, r2, [r1]
 800ca30:	61bb      	str	r3, [r7, #24]
   return(result);
 800ca32:	69bb      	ldr	r3, [r7, #24]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d1e5      	bne.n	800ca04 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2220      	movs	r2, #32
 800ca3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	2220      	movs	r2, #32
 800ca44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	2220      	movs	r2, #32
 800ca4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	2200      	movs	r2, #0
 800ca54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ca58:	2303      	movs	r3, #3
 800ca5a:	e010      	b.n	800ca7e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	69da      	ldr	r2, [r3, #28]
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	4013      	ands	r3, r2
 800ca66:	68ba      	ldr	r2, [r7, #8]
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	bf0c      	ite	eq
 800ca6c:	2301      	moveq	r3, #1
 800ca6e:	2300      	movne	r3, #0
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	461a      	mov	r2, r3
 800ca74:	79fb      	ldrb	r3, [r7, #7]
 800ca76:	429a      	cmp	r2, r3
 800ca78:	f43f af46 	beq.w	800c908 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ca7c:	2300      	movs	r3, #0
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3770      	adds	r7, #112	; 0x70
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}

0800ca86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ca86:	b480      	push	{r7}
 800ca88:	b095      	sub	sp, #84	; 0x54
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca96:	e853 3f00 	ldrex	r3, [r3]
 800ca9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ca9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800caa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	461a      	mov	r2, r3
 800caaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caac:	643b      	str	r3, [r7, #64]	; 0x40
 800caae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cab0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cab2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cab4:	e841 2300 	strex	r3, r2, [r1]
 800cab8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800caba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d1e6      	bne.n	800ca8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	3308      	adds	r3, #8
 800cac6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cac8:	6a3b      	ldr	r3, [r7, #32]
 800caca:	e853 3f00 	ldrex	r3, [r3]
 800cace:	61fb      	str	r3, [r7, #28]
   return(result);
 800cad0:	69fb      	ldr	r3, [r7, #28]
 800cad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cad6:	f023 0301 	bic.w	r3, r3, #1
 800cada:	64bb      	str	r3, [r7, #72]	; 0x48
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	3308      	adds	r3, #8
 800cae2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cae4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cae6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cae8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800caea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800caec:	e841 2300 	strex	r3, r2, [r1]
 800caf0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800caf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d1e3      	bne.n	800cac0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cafc:	2b01      	cmp	r3, #1
 800cafe:	d118      	bne.n	800cb32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	e853 3f00 	ldrex	r3, [r3]
 800cb0c:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	f023 0310 	bic.w	r3, r3, #16
 800cb14:	647b      	str	r3, [r7, #68]	; 0x44
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	461a      	mov	r2, r3
 800cb1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb1e:	61bb      	str	r3, [r7, #24]
 800cb20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb22:	6979      	ldr	r1, [r7, #20]
 800cb24:	69ba      	ldr	r2, [r7, #24]
 800cb26:	e841 2300 	strex	r3, r2, [r1]
 800cb2a:	613b      	str	r3, [r7, #16]
   return(result);
 800cb2c:	693b      	ldr	r3, [r7, #16]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d1e6      	bne.n	800cb00 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2220      	movs	r2, #32
 800cb36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2200      	movs	r2, #0
 800cb44:	671a      	str	r2, [r3, #112]	; 0x70
}
 800cb46:	bf00      	nop
 800cb48:	3754      	adds	r7, #84	; 0x54
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb50:	4770      	bx	lr

0800cb52 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cb52:	b580      	push	{r7, lr}
 800cb54:	b084      	sub	sp, #16
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	2200      	movs	r2, #0
 800cb64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cb70:	68f8      	ldr	r0, [r7, #12]
 800cb72:	f7ff fac1 	bl	800c0f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb76:	bf00      	nop
 800cb78:	3710      	adds	r7, #16
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}

0800cb7e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cb7e:	b580      	push	{r7, lr}
 800cb80:	b088      	sub	sp, #32
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	e853 3f00 	ldrex	r3, [r3]
 800cb92:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb9a:	61fb      	str	r3, [r7, #28]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	461a      	mov	r2, r3
 800cba2:	69fb      	ldr	r3, [r7, #28]
 800cba4:	61bb      	str	r3, [r7, #24]
 800cba6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cba8:	6979      	ldr	r1, [r7, #20]
 800cbaa:	69ba      	ldr	r2, [r7, #24]
 800cbac:	e841 2300 	strex	r3, r2, [r1]
 800cbb0:	613b      	str	r3, [r7, #16]
   return(result);
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d1e6      	bne.n	800cb86 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2220      	movs	r2, #32
 800cbbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f7ff fa8c 	bl	800c0e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cbcc:	bf00      	nop
 800cbce:	3720      	adds	r7, #32
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}

0800cbd4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b083      	sub	sp, #12
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cbdc:	bf00      	nop
 800cbde:	370c      	adds	r7, #12
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe6:	4770      	bx	lr

0800cbe8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b083      	sub	sp, #12
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cbf0:	bf00      	nop
 800cbf2:	370c      	adds	r7, #12
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfa:	4770      	bx	lr

0800cbfc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b083      	sub	sp, #12
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cc04:	bf00      	nop
 800cc06:	370c      	adds	r7, #12
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr

0800cc10 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cc10:	b480      	push	{r7}
 800cc12:	b085      	sub	sp, #20
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cc1e:	2b01      	cmp	r3, #1
 800cc20:	d101      	bne.n	800cc26 <HAL_UARTEx_DisableFifoMode+0x16>
 800cc22:	2302      	movs	r3, #2
 800cc24:	e027      	b.n	800cc76 <HAL_UARTEx_DisableFifoMode+0x66>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2201      	movs	r2, #1
 800cc2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2224      	movs	r2, #36	; 0x24
 800cc32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	681a      	ldr	r2, [r3, #0]
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	f022 0201 	bic.w	r2, r2, #1
 800cc4c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cc54:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	68fa      	ldr	r2, [r7, #12]
 800cc62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2220      	movs	r2, #32
 800cc68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cc74:	2300      	movs	r3, #0
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3714      	adds	r7, #20
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc80:	4770      	bx	lr

0800cc82 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cc82:	b580      	push	{r7, lr}
 800cc84:	b084      	sub	sp, #16
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
 800cc8a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cc92:	2b01      	cmp	r3, #1
 800cc94:	d101      	bne.n	800cc9a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cc96:	2302      	movs	r3, #2
 800cc98:	e02d      	b.n	800ccf6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2201      	movs	r2, #1
 800cc9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2224      	movs	r2, #36	; 0x24
 800cca6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	681a      	ldr	r2, [r3, #0]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	f022 0201 	bic.w	r2, r2, #1
 800ccc0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	689b      	ldr	r3, [r3, #8]
 800ccc8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	683a      	ldr	r2, [r7, #0]
 800ccd2:	430a      	orrs	r2, r1
 800ccd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f000 f850 	bl	800cd7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	68fa      	ldr	r2, [r7, #12]
 800cce2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2220      	movs	r2, #32
 800cce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ccf4:	2300      	movs	r3, #0
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3710      	adds	r7, #16
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}

0800ccfe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ccfe:	b580      	push	{r7, lr}
 800cd00:	b084      	sub	sp, #16
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	6078      	str	r0, [r7, #4]
 800cd06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cd0e:	2b01      	cmp	r3, #1
 800cd10:	d101      	bne.n	800cd16 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cd12:	2302      	movs	r3, #2
 800cd14:	e02d      	b.n	800cd72 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2201      	movs	r2, #1
 800cd1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2224      	movs	r2, #36	; 0x24
 800cd22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	681a      	ldr	r2, [r3, #0]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	f022 0201 	bic.w	r2, r2, #1
 800cd3c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	689b      	ldr	r3, [r3, #8]
 800cd44:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	683a      	ldr	r2, [r7, #0]
 800cd4e:	430a      	orrs	r2, r1
 800cd50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f000 f812 	bl	800cd7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	68fa      	ldr	r2, [r7, #12]
 800cd5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2220      	movs	r2, #32
 800cd64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cd70:	2300      	movs	r3, #0
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3710      	adds	r7, #16
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
	...

0800cd7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b085      	sub	sp, #20
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d108      	bne.n	800cd9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2201      	movs	r2, #1
 800cd90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2201      	movs	r2, #1
 800cd98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cd9c:	e031      	b.n	800ce02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cd9e:	2308      	movs	r3, #8
 800cda0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cda2:	2308      	movs	r3, #8
 800cda4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	689b      	ldr	r3, [r3, #8]
 800cdac:	0e5b      	lsrs	r3, r3, #25
 800cdae:	b2db      	uxtb	r3, r3
 800cdb0:	f003 0307 	and.w	r3, r3, #7
 800cdb4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	689b      	ldr	r3, [r3, #8]
 800cdbc:	0f5b      	lsrs	r3, r3, #29
 800cdbe:	b2db      	uxtb	r3, r3
 800cdc0:	f003 0307 	and.w	r3, r3, #7
 800cdc4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cdc6:	7bbb      	ldrb	r3, [r7, #14]
 800cdc8:	7b3a      	ldrb	r2, [r7, #12]
 800cdca:	4911      	ldr	r1, [pc, #68]	; (800ce10 <UARTEx_SetNbDataToProcess+0x94>)
 800cdcc:	5c8a      	ldrb	r2, [r1, r2]
 800cdce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cdd2:	7b3a      	ldrb	r2, [r7, #12]
 800cdd4:	490f      	ldr	r1, [pc, #60]	; (800ce14 <UARTEx_SetNbDataToProcess+0x98>)
 800cdd6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cdd8:	fb93 f3f2 	sdiv	r3, r3, r2
 800cddc:	b29a      	uxth	r2, r3
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cde4:	7bfb      	ldrb	r3, [r7, #15]
 800cde6:	7b7a      	ldrb	r2, [r7, #13]
 800cde8:	4909      	ldr	r1, [pc, #36]	; (800ce10 <UARTEx_SetNbDataToProcess+0x94>)
 800cdea:	5c8a      	ldrb	r2, [r1, r2]
 800cdec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cdf0:	7b7a      	ldrb	r2, [r7, #13]
 800cdf2:	4908      	ldr	r1, [pc, #32]	; (800ce14 <UARTEx_SetNbDataToProcess+0x98>)
 800cdf4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cdf6:	fb93 f3f2 	sdiv	r3, r3, r2
 800cdfa:	b29a      	uxth	r2, r3
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ce02:	bf00      	nop
 800ce04:	3714      	adds	r7, #20
 800ce06:	46bd      	mov	sp, r7
 800ce08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0c:	4770      	bx	lr
 800ce0e:	bf00      	nop
 800ce10:	08017938 	.word	0x08017938
 800ce14:	08017940 	.word	0x08017940

0800ce18 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ce18:	b084      	sub	sp, #16
 800ce1a:	b480      	push	{r7}
 800ce1c:	b085      	sub	sp, #20
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	6078      	str	r0, [r7, #4]
 800ce22:	f107 001c 	add.w	r0, r7, #28
 800ce26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800ce2e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800ce30:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ce32:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ce34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800ce36:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ce38:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800ce3a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ce3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800ce3e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ce40:	68fa      	ldr	r2, [r7, #12]
 800ce42:	4313      	orrs	r3, r2
 800ce44:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	685a      	ldr	r2, [r3, #4]
 800ce4a:	4b07      	ldr	r3, [pc, #28]	; (800ce68 <SDMMC_Init+0x50>)
 800ce4c:	4013      	ands	r3, r2
 800ce4e:	68fa      	ldr	r2, [r7, #12]
 800ce50:	431a      	orrs	r2, r3
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ce56:	2300      	movs	r3, #0
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3714      	adds	r7, #20
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce62:	b004      	add	sp, #16
 800ce64:	4770      	bx	lr
 800ce66:	bf00      	nop
 800ce68:	ffc02c00 	.word	0xffc02c00

0800ce6c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b083      	sub	sp, #12
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	370c      	adds	r7, #12
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce84:	4770      	bx	lr

0800ce86 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800ce86:	b480      	push	{r7}
 800ce88:	b083      	sub	sp, #12
 800ce8a:	af00      	add	r7, sp, #0
 800ce8c:	6078      	str	r0, [r7, #4]
 800ce8e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	681a      	ldr	r2, [r3, #0]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ce9a:	2300      	movs	r3, #0
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	370c      	adds	r7, #12
 800cea0:	46bd      	mov	sp, r7
 800cea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea6:	4770      	bx	lr

0800cea8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b082      	sub	sp, #8
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	f043 0203 	orr.w	r2, r3, #3
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800cebc:	2002      	movs	r0, #2
 800cebe:	f7f7 f87b 	bl	8003fb8 <HAL_Delay>

  return HAL_OK;
 800cec2:	2300      	movs	r3, #0
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	3708      	adds	r7, #8
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}

0800cecc <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800cecc:	b480      	push	{r7}
 800cece:	b083      	sub	sp, #12
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f003 0303 	and.w	r3, r3, #3
}
 800cedc:	4618      	mov	r0, r3
 800cede:	370c      	adds	r7, #12
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr

0800cee8 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b085      	sub	sp, #20
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cef2:	2300      	movs	r3, #0
 800cef4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cf06:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800cf0c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800cf12:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cf14:	68fa      	ldr	r2, [r7, #12]
 800cf16:	4313      	orrs	r3, r2
 800cf18:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	68da      	ldr	r2, [r3, #12]
 800cf1e:	4b06      	ldr	r3, [pc, #24]	; (800cf38 <SDMMC_SendCommand+0x50>)
 800cf20:	4013      	ands	r3, r2
 800cf22:	68fa      	ldr	r2, [r7, #12]
 800cf24:	431a      	orrs	r2, r3
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cf2a:	2300      	movs	r3, #0
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3714      	adds	r7, #20
 800cf30:	46bd      	mov	sp, r7
 800cf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf36:	4770      	bx	lr
 800cf38:	fffee0c0 	.word	0xfffee0c0

0800cf3c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b083      	sub	sp, #12
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	691b      	ldr	r3, [r3, #16]
 800cf48:	b2db      	uxtb	r3, r3
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	370c      	adds	r7, #12
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf54:	4770      	bx	lr

0800cf56 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800cf56:	b480      	push	{r7}
 800cf58:	b085      	sub	sp, #20
 800cf5a:	af00      	add	r7, sp, #0
 800cf5c:	6078      	str	r0, [r7, #4]
 800cf5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	3314      	adds	r3, #20
 800cf64:	461a      	mov	r2, r3
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	4413      	add	r3, r2
 800cf6a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3714      	adds	r7, #20
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr

0800cf7c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b085      	sub	sp, #20
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cf86:	2300      	movs	r3, #0
 800cf88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	681a      	ldr	r2, [r3, #0]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	685a      	ldr	r2, [r3, #4]
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cfa2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800cfa8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800cfae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cfb0:	68fa      	ldr	r2, [r7, #12]
 800cfb2:	4313      	orrs	r3, r2
 800cfb4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	431a      	orrs	r2, r3
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800cfc6:	2300      	movs	r3, #0

}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3714      	adds	r7, #20
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr

0800cfd4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b088      	sub	sp, #32
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cfe2:	2310      	movs	r3, #16
 800cfe4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cfe6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cfea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cfec:	2300      	movs	r3, #0
 800cfee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cff0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cff4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cff6:	f107 0308 	add.w	r3, r7, #8
 800cffa:	4619      	mov	r1, r3
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f7ff ff73 	bl	800cee8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d002:	f241 3288 	movw	r2, #5000	; 0x1388
 800d006:	2110      	movs	r1, #16
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f000 fa7b 	bl	800d504 <SDMMC_GetCmdResp1>
 800d00e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d010:	69fb      	ldr	r3, [r7, #28]
}
 800d012:	4618      	mov	r0, r3
 800d014:	3720      	adds	r7, #32
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}

0800d01a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d01a:	b580      	push	{r7, lr}
 800d01c:	b088      	sub	sp, #32
 800d01e:	af00      	add	r7, sp, #0
 800d020:	6078      	str	r0, [r7, #4]
 800d022:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d028:	2311      	movs	r3, #17
 800d02a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d02c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d030:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d032:	2300      	movs	r3, #0
 800d034:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d036:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d03a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d03c:	f107 0308 	add.w	r3, r7, #8
 800d040:	4619      	mov	r1, r3
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f7ff ff50 	bl	800cee8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d048:	f241 3288 	movw	r2, #5000	; 0x1388
 800d04c:	2111      	movs	r1, #17
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f000 fa58 	bl	800d504 <SDMMC_GetCmdResp1>
 800d054:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d056:	69fb      	ldr	r3, [r7, #28]
}
 800d058:	4618      	mov	r0, r3
 800d05a:	3720      	adds	r7, #32
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}

0800d060 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b088      	sub	sp, #32
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
 800d068:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d06e:	2312      	movs	r3, #18
 800d070:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d072:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d076:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d078:	2300      	movs	r3, #0
 800d07a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d07c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d080:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d082:	f107 0308 	add.w	r3, r7, #8
 800d086:	4619      	mov	r1, r3
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f7ff ff2d 	bl	800cee8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d08e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d092:	2112      	movs	r1, #18
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f000 fa35 	bl	800d504 <SDMMC_GetCmdResp1>
 800d09a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d09c:	69fb      	ldr	r3, [r7, #28]
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3720      	adds	r7, #32
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}

0800d0a6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d0a6:	b580      	push	{r7, lr}
 800d0a8:	b088      	sub	sp, #32
 800d0aa:	af00      	add	r7, sp, #0
 800d0ac:	6078      	str	r0, [r7, #4]
 800d0ae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d0b4:	2318      	movs	r3, #24
 800d0b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d0b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d0bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d0c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0c8:	f107 0308 	add.w	r3, r7, #8
 800d0cc:	4619      	mov	r1, r3
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f7ff ff0a 	bl	800cee8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d0d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0d8:	2118      	movs	r1, #24
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f000 fa12 	bl	800d504 <SDMMC_GetCmdResp1>
 800d0e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0e2:	69fb      	ldr	r3, [r7, #28]
}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3720      	adds	r7, #32
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}

0800d0ec <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b088      	sub	sp, #32
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
 800d0f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d0fa:	2319      	movs	r3, #25
 800d0fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d0fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d102:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d104:	2300      	movs	r3, #0
 800d106:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d10c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d10e:	f107 0308 	add.w	r3, r7, #8
 800d112:	4619      	mov	r1, r3
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f7ff fee7 	bl	800cee8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d11a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d11e:	2119      	movs	r1, #25
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f000 f9ef 	bl	800d504 <SDMMC_GetCmdResp1>
 800d126:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d128:	69fb      	ldr	r3, [r7, #28]
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3720      	adds	r7, #32
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
	...

0800d134 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b088      	sub	sp, #32
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d13c:	2300      	movs	r3, #0
 800d13e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d140:	230c      	movs	r3, #12
 800d142:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d144:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d148:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d14a:	2300      	movs	r3, #0
 800d14c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d14e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d152:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	68db      	ldr	r3, [r3, #12]
 800d158:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	68db      	ldr	r3, [r3, #12]
 800d164:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d16c:	f107 0308 	add.w	r3, r7, #8
 800d170:	4619      	mov	r1, r3
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f7ff feb8 	bl	800cee8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d178:	4a08      	ldr	r2, [pc, #32]	; (800d19c <SDMMC_CmdStopTransfer+0x68>)
 800d17a:	210c      	movs	r1, #12
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f000 f9c1 	bl	800d504 <SDMMC_GetCmdResp1>
 800d182:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	68db      	ldr	r3, [r3, #12]
 800d188:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800d190:	69fb      	ldr	r3, [r7, #28]
}
 800d192:	4618      	mov	r0, r3
 800d194:	3720      	adds	r7, #32
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}
 800d19a:	bf00      	nop
 800d19c:	05f5e100 	.word	0x05f5e100

0800d1a0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b08a      	sub	sp, #40	; 0x28
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	60f8      	str	r0, [r7, #12]
 800d1a8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d1b0:	2307      	movs	r3, #7
 800d1b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d1b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d1b8:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d1be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d1c2:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d1c4:	f107 0310 	add.w	r3, r7, #16
 800d1c8:	4619      	mov	r1, r3
 800d1ca:	68f8      	ldr	r0, [r7, #12]
 800d1cc:	f7ff fe8c 	bl	800cee8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d1d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1d4:	2107      	movs	r1, #7
 800d1d6:	68f8      	ldr	r0, [r7, #12]
 800d1d8:	f000 f994 	bl	800d504 <SDMMC_GetCmdResp1>
 800d1dc:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3728      	adds	r7, #40	; 0x28
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b088      	sub	sp, #32
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d204:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d206:	f107 0308 	add.w	r3, r7, #8
 800d20a:	4619      	mov	r1, r3
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f7ff fe6b 	bl	800cee8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f000 fbb8 	bl	800d988 <SDMMC_GetCmdError>
 800d218:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d21a:	69fb      	ldr	r3, [r7, #28]
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3720      	adds	r7, #32
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b088      	sub	sp, #32
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d22c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d230:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d232:	2308      	movs	r3, #8
 800d234:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d236:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d23a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d23c:	2300      	movs	r3, #0
 800d23e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d244:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d246:	f107 0308 	add.w	r3, r7, #8
 800d24a:	4619      	mov	r1, r3
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f7ff fe4b 	bl	800cee8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f000 fb4a 	bl	800d8ec <SDMMC_GetCmdResp7>
 800d258:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d25a:	69fb      	ldr	r3, [r7, #28]
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3720      	adds	r7, #32
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b088      	sub	sp, #32
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
 800d26c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d272:	2337      	movs	r3, #55	; 0x37
 800d274:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d276:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d27a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d27c:	2300      	movs	r3, #0
 800d27e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d284:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d286:	f107 0308 	add.w	r3, r7, #8
 800d28a:	4619      	mov	r1, r3
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f7ff fe2b 	bl	800cee8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d292:	f241 3288 	movw	r2, #5000	; 0x1388
 800d296:	2137      	movs	r1, #55	; 0x37
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f000 f933 	bl	800d504 <SDMMC_GetCmdResp1>
 800d29e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2a0:	69fb      	ldr	r3, [r7, #28]
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3720      	adds	r7, #32
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}

0800d2aa <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d2aa:	b580      	push	{r7, lr}
 800d2ac:	b088      	sub	sp, #32
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	6078      	str	r0, [r7, #4]
 800d2b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d2b8:	2329      	movs	r3, #41	; 0x29
 800d2ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d2bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d2c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d2ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2cc:	f107 0308 	add.w	r3, r7, #8
 800d2d0:	4619      	mov	r1, r3
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f7ff fe08 	bl	800cee8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f000 fa4f 	bl	800d77c <SDMMC_GetCmdResp3>
 800d2de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2e0:	69fb      	ldr	r3, [r7, #28]
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3720      	adds	r7, #32
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}

0800d2ea <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d2ea:	b580      	push	{r7, lr}
 800d2ec:	b088      	sub	sp, #32
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	6078      	str	r0, [r7, #4]
 800d2f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d2f8:	2306      	movs	r3, #6
 800d2fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d2fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d300:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d302:	2300      	movs	r3, #0
 800d304:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d30a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d30c:	f107 0308 	add.w	r3, r7, #8
 800d310:	4619      	mov	r1, r3
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f7ff fde8 	bl	800cee8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d318:	f241 3288 	movw	r2, #5000	; 0x1388
 800d31c:	2106      	movs	r1, #6
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f000 f8f0 	bl	800d504 <SDMMC_GetCmdResp1>
 800d324:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d326:	69fb      	ldr	r3, [r7, #28]
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3720      	adds	r7, #32
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}

0800d330 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b088      	sub	sp, #32
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d338:	2300      	movs	r3, #0
 800d33a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d33c:	2333      	movs	r3, #51	; 0x33
 800d33e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d340:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d344:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d346:	2300      	movs	r3, #0
 800d348:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d34a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d34e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d350:	f107 0308 	add.w	r3, r7, #8
 800d354:	4619      	mov	r1, r3
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f7ff fdc6 	bl	800cee8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d35c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d360:	2133      	movs	r1, #51	; 0x33
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f000 f8ce 	bl	800d504 <SDMMC_GetCmdResp1>
 800d368:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d36a:	69fb      	ldr	r3, [r7, #28]
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3720      	adds	r7, #32
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}

0800d374 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b088      	sub	sp, #32
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d37c:	2300      	movs	r3, #0
 800d37e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d380:	2302      	movs	r3, #2
 800d382:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d384:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d388:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d38a:	2300      	movs	r3, #0
 800d38c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d38e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d392:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d394:	f107 0308 	add.w	r3, r7, #8
 800d398:	4619      	mov	r1, r3
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	f7ff fda4 	bl	800cee8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f000 f9a1 	bl	800d6e8 <SDMMC_GetCmdResp2>
 800d3a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3a8:	69fb      	ldr	r3, [r7, #28]
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3720      	adds	r7, #32
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}

0800d3b2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d3b2:	b580      	push	{r7, lr}
 800d3b4:	b088      	sub	sp, #32
 800d3b6:	af00      	add	r7, sp, #0
 800d3b8:	6078      	str	r0, [r7, #4]
 800d3ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d3c0:	2309      	movs	r3, #9
 800d3c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d3c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d3c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d3ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d3d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3d4:	f107 0308 	add.w	r3, r7, #8
 800d3d8:	4619      	mov	r1, r3
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f7ff fd84 	bl	800cee8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f000 f981 	bl	800d6e8 <SDMMC_GetCmdResp2>
 800d3e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3e8:	69fb      	ldr	r3, [r7, #28]
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3720      	adds	r7, #32
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}

0800d3f2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d3f2:	b580      	push	{r7, lr}
 800d3f4:	b088      	sub	sp, #32
 800d3f6:	af00      	add	r7, sp, #0
 800d3f8:	6078      	str	r0, [r7, #4]
 800d3fa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d400:	2303      	movs	r3, #3
 800d402:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d404:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d408:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d40a:	2300      	movs	r3, #0
 800d40c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d40e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d412:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d414:	f107 0308 	add.w	r3, r7, #8
 800d418:	4619      	mov	r1, r3
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f7ff fd64 	bl	800cee8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d420:	683a      	ldr	r2, [r7, #0]
 800d422:	2103      	movs	r1, #3
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f000 f9e9 	bl	800d7fc <SDMMC_GetCmdResp6>
 800d42a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d42c:	69fb      	ldr	r3, [r7, #28]
}
 800d42e:	4618      	mov	r0, r3
 800d430:	3720      	adds	r7, #32
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}

0800d436 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d436:	b580      	push	{r7, lr}
 800d438:	b088      	sub	sp, #32
 800d43a:	af00      	add	r7, sp, #0
 800d43c:	6078      	str	r0, [r7, #4]
 800d43e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d444:	230d      	movs	r3, #13
 800d446:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d448:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d44c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d44e:	2300      	movs	r3, #0
 800d450:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d456:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d458:	f107 0308 	add.w	r3, r7, #8
 800d45c:	4619      	mov	r1, r3
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f7ff fd42 	bl	800cee8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d464:	f241 3288 	movw	r2, #5000	; 0x1388
 800d468:	210d      	movs	r1, #13
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f000 f84a 	bl	800d504 <SDMMC_GetCmdResp1>
 800d470:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d472:	69fb      	ldr	r3, [r7, #28]
}
 800d474:	4618      	mov	r0, r3
 800d476:	3720      	adds	r7, #32
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}

0800d47c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b088      	sub	sp, #32
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d484:	2300      	movs	r3, #0
 800d486:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d488:	230d      	movs	r3, #13
 800d48a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d48c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d490:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d492:	2300      	movs	r3, #0
 800d494:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d496:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d49a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d49c:	f107 0308 	add.w	r3, r7, #8
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f7ff fd20 	bl	800cee8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d4a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4ac:	210d      	movs	r1, #13
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f000 f828 	bl	800d504 <SDMMC_GetCmdResp1>
 800d4b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4b6:	69fb      	ldr	r3, [r7, #28]
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3720      	adds	r7, #32
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}

0800d4c0 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b088      	sub	sp, #32
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800d4cc:	230b      	movs	r3, #11
 800d4ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d4d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d4d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d4de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4e0:	f107 0308 	add.w	r3, r7, #8
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f7ff fcfe 	bl	800cee8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800d4ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4f0:	210b      	movs	r1, #11
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f000 f806 	bl	800d504 <SDMMC_GetCmdResp1>
 800d4f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4fa:	69fb      	ldr	r3, [r7, #28]
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	3720      	adds	r7, #32
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}

0800d504 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b088      	sub	sp, #32
 800d508:	af00      	add	r7, sp, #0
 800d50a:	60f8      	str	r0, [r7, #12]
 800d50c:	460b      	mov	r3, r1
 800d50e:	607a      	str	r2, [r7, #4]
 800d510:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d512:	4b70      	ldr	r3, [pc, #448]	; (800d6d4 <SDMMC_GetCmdResp1+0x1d0>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	4a70      	ldr	r2, [pc, #448]	; (800d6d8 <SDMMC_GetCmdResp1+0x1d4>)
 800d518:	fba2 2303 	umull	r2, r3, r2, r3
 800d51c:	0a5a      	lsrs	r2, r3, #9
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	fb02 f303 	mul.w	r3, r2, r3
 800d524:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d526:	69fb      	ldr	r3, [r7, #28]
 800d528:	1e5a      	subs	r2, r3, #1
 800d52a:	61fa      	str	r2, [r7, #28]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d102      	bne.n	800d536 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d530:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d534:	e0c9      	b.n	800d6ca <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d53a:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d53c:	69ba      	ldr	r2, [r7, #24]
 800d53e:	4b67      	ldr	r3, [pc, #412]	; (800d6dc <SDMMC_GetCmdResp1+0x1d8>)
 800d540:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d542:	2b00      	cmp	r3, #0
 800d544:	d0ef      	beq.n	800d526 <SDMMC_GetCmdResp1+0x22>
 800d546:	69bb      	ldr	r3, [r7, #24]
 800d548:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d1ea      	bne.n	800d526 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d554:	f003 0304 	and.w	r3, r3, #4
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d004      	beq.n	800d566 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2204      	movs	r2, #4
 800d560:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d562:	2304      	movs	r3, #4
 800d564:	e0b1      	b.n	800d6ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d56a:	f003 0301 	and.w	r3, r3, #1
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d004      	beq.n	800d57c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	2201      	movs	r2, #1
 800d576:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d578:	2301      	movs	r3, #1
 800d57a:	e0a6      	b.n	800d6ca <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	4a58      	ldr	r2, [pc, #352]	; (800d6e0 <SDMMC_GetCmdResp1+0x1dc>)
 800d580:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d582:	68f8      	ldr	r0, [r7, #12]
 800d584:	f7ff fcda 	bl	800cf3c <SDMMC_GetCommandResponse>
 800d588:	4603      	mov	r3, r0
 800d58a:	461a      	mov	r2, r3
 800d58c:	7afb      	ldrb	r3, [r7, #11]
 800d58e:	4293      	cmp	r3, r2
 800d590:	d001      	beq.n	800d596 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d592:	2301      	movs	r3, #1
 800d594:	e099      	b.n	800d6ca <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d596:	2100      	movs	r1, #0
 800d598:	68f8      	ldr	r0, [r7, #12]
 800d59a:	f7ff fcdc 	bl	800cf56 <SDMMC_GetResponse>
 800d59e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d5a0:	697a      	ldr	r2, [r7, #20]
 800d5a2:	4b50      	ldr	r3, [pc, #320]	; (800d6e4 <SDMMC_GetCmdResp1+0x1e0>)
 800d5a4:	4013      	ands	r3, r2
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d101      	bne.n	800d5ae <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	e08d      	b.n	800d6ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	da02      	bge.n	800d5ba <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d5b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d5b8:	e087      	b.n	800d6ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d001      	beq.n	800d5c8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d5c4:	2340      	movs	r3, #64	; 0x40
 800d5c6:	e080      	b.n	800d6ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d001      	beq.n	800d5d6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d5d2:	2380      	movs	r3, #128	; 0x80
 800d5d4:	e079      	b.n	800d6ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d002      	beq.n	800d5e6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d5e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d5e4:	e071      	b.n	800d6ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d002      	beq.n	800d5f6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d5f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d5f4:	e069      	b.n	800d6ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d002      	beq.n	800d606 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d600:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d604:	e061      	b.n	800d6ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d002      	beq.n	800d616 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d610:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d614:	e059      	b.n	800d6ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d002      	beq.n	800d626 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d624:	e051      	b.n	800d6ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d002      	beq.n	800d636 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d630:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d634:	e049      	b.n	800d6ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d002      	beq.n	800d646 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d640:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d644:	e041      	b.n	800d6ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d002      	beq.n	800d656 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d650:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d654:	e039      	b.n	800d6ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d002      	beq.n	800d666 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d660:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d664:	e031      	b.n	800d6ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d002      	beq.n	800d676 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d670:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d674:	e029      	b.n	800d6ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d002      	beq.n	800d686 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d680:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d684:	e021      	b.n	800d6ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d002      	beq.n	800d696 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d690:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d694:	e019      	b.n	800d6ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d002      	beq.n	800d6a6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d6a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d6a4:	e011      	b.n	800d6ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d002      	beq.n	800d6b6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d6b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d6b4:	e009      	b.n	800d6ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	f003 0308 	and.w	r3, r3, #8
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d002      	beq.n	800d6c6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d6c0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d6c4:	e001      	b.n	800d6ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d6c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3720      	adds	r7, #32
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}
 800d6d2:	bf00      	nop
 800d6d4:	20000004 	.word	0x20000004
 800d6d8:	10624dd3 	.word	0x10624dd3
 800d6dc:	00200045 	.word	0x00200045
 800d6e0:	002000c5 	.word	0x002000c5
 800d6e4:	fdffe008 	.word	0xfdffe008

0800d6e8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d6e8:	b480      	push	{r7}
 800d6ea:	b085      	sub	sp, #20
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d6f0:	4b1f      	ldr	r3, [pc, #124]	; (800d770 <SDMMC_GetCmdResp2+0x88>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	4a1f      	ldr	r2, [pc, #124]	; (800d774 <SDMMC_GetCmdResp2+0x8c>)
 800d6f6:	fba2 2303 	umull	r2, r3, r2, r3
 800d6fa:	0a5b      	lsrs	r3, r3, #9
 800d6fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d700:	fb02 f303 	mul.w	r3, r2, r3
 800d704:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	1e5a      	subs	r2, r3, #1
 800d70a:	60fa      	str	r2, [r7, #12]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d102      	bne.n	800d716 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d710:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d714:	e026      	b.n	800d764 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d71a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d722:	2b00      	cmp	r3, #0
 800d724:	d0ef      	beq.n	800d706 <SDMMC_GetCmdResp2+0x1e>
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d1ea      	bne.n	800d706 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d734:	f003 0304 	and.w	r3, r3, #4
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d004      	beq.n	800d746 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2204      	movs	r2, #4
 800d740:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d742:	2304      	movs	r3, #4
 800d744:	e00e      	b.n	800d764 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d74a:	f003 0301 	and.w	r3, r3, #1
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d004      	beq.n	800d75c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2201      	movs	r2, #1
 800d756:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d758:	2301      	movs	r3, #1
 800d75a:	e003      	b.n	800d764 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	4a06      	ldr	r2, [pc, #24]	; (800d778 <SDMMC_GetCmdResp2+0x90>)
 800d760:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d762:	2300      	movs	r3, #0
}
 800d764:	4618      	mov	r0, r3
 800d766:	3714      	adds	r7, #20
 800d768:	46bd      	mov	sp, r7
 800d76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76e:	4770      	bx	lr
 800d770:	20000004 	.word	0x20000004
 800d774:	10624dd3 	.word	0x10624dd3
 800d778:	002000c5 	.word	0x002000c5

0800d77c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d77c:	b480      	push	{r7}
 800d77e:	b085      	sub	sp, #20
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d784:	4b1a      	ldr	r3, [pc, #104]	; (800d7f0 <SDMMC_GetCmdResp3+0x74>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	4a1a      	ldr	r2, [pc, #104]	; (800d7f4 <SDMMC_GetCmdResp3+0x78>)
 800d78a:	fba2 2303 	umull	r2, r3, r2, r3
 800d78e:	0a5b      	lsrs	r3, r3, #9
 800d790:	f241 3288 	movw	r2, #5000	; 0x1388
 800d794:	fb02 f303 	mul.w	r3, r2, r3
 800d798:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	1e5a      	subs	r2, r3, #1
 800d79e:	60fa      	str	r2, [r7, #12]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d102      	bne.n	800d7aa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d7a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d7a8:	e01b      	b.n	800d7e2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7ae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d0ef      	beq.n	800d79a <SDMMC_GetCmdResp3+0x1e>
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d1ea      	bne.n	800d79a <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7c8:	f003 0304 	and.w	r3, r3, #4
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d004      	beq.n	800d7da <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2204      	movs	r2, #4
 800d7d4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d7d6:	2304      	movs	r3, #4
 800d7d8:	e003      	b.n	800d7e2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	4a06      	ldr	r2, [pc, #24]	; (800d7f8 <SDMMC_GetCmdResp3+0x7c>)
 800d7de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d7e0:	2300      	movs	r3, #0
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3714      	adds	r7, #20
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ec:	4770      	bx	lr
 800d7ee:	bf00      	nop
 800d7f0:	20000004 	.word	0x20000004
 800d7f4:	10624dd3 	.word	0x10624dd3
 800d7f8:	002000c5 	.word	0x002000c5

0800d7fc <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b088      	sub	sp, #32
 800d800:	af00      	add	r7, sp, #0
 800d802:	60f8      	str	r0, [r7, #12]
 800d804:	460b      	mov	r3, r1
 800d806:	607a      	str	r2, [r7, #4]
 800d808:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d80a:	4b35      	ldr	r3, [pc, #212]	; (800d8e0 <SDMMC_GetCmdResp6+0xe4>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	4a35      	ldr	r2, [pc, #212]	; (800d8e4 <SDMMC_GetCmdResp6+0xe8>)
 800d810:	fba2 2303 	umull	r2, r3, r2, r3
 800d814:	0a5b      	lsrs	r3, r3, #9
 800d816:	f241 3288 	movw	r2, #5000	; 0x1388
 800d81a:	fb02 f303 	mul.w	r3, r2, r3
 800d81e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d820:	69fb      	ldr	r3, [r7, #28]
 800d822:	1e5a      	subs	r2, r3, #1
 800d824:	61fa      	str	r2, [r7, #28]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d102      	bne.n	800d830 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d82a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d82e:	e052      	b.n	800d8d6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d834:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d836:	69bb      	ldr	r3, [r7, #24]
 800d838:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d0ef      	beq.n	800d820 <SDMMC_GetCmdResp6+0x24>
 800d840:	69bb      	ldr	r3, [r7, #24]
 800d842:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d846:	2b00      	cmp	r3, #0
 800d848:	d1ea      	bne.n	800d820 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d84e:	f003 0304 	and.w	r3, r3, #4
 800d852:	2b00      	cmp	r3, #0
 800d854:	d004      	beq.n	800d860 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	2204      	movs	r2, #4
 800d85a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d85c:	2304      	movs	r3, #4
 800d85e:	e03a      	b.n	800d8d6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d864:	f003 0301 	and.w	r3, r3, #1
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d004      	beq.n	800d876 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	2201      	movs	r2, #1
 800d870:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d872:	2301      	movs	r3, #1
 800d874:	e02f      	b.n	800d8d6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d876:	68f8      	ldr	r0, [r7, #12]
 800d878:	f7ff fb60 	bl	800cf3c <SDMMC_GetCommandResponse>
 800d87c:	4603      	mov	r3, r0
 800d87e:	461a      	mov	r2, r3
 800d880:	7afb      	ldrb	r3, [r7, #11]
 800d882:	4293      	cmp	r3, r2
 800d884:	d001      	beq.n	800d88a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d886:	2301      	movs	r3, #1
 800d888:	e025      	b.n	800d8d6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	4a16      	ldr	r2, [pc, #88]	; (800d8e8 <SDMMC_GetCmdResp6+0xec>)
 800d88e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d890:	2100      	movs	r1, #0
 800d892:	68f8      	ldr	r0, [r7, #12]
 800d894:	f7ff fb5f 	bl	800cf56 <SDMMC_GetResponse>
 800d898:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d106      	bne.n	800d8b2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	0c1b      	lsrs	r3, r3, #16
 800d8a8:	b29a      	uxth	r2, r3
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	e011      	b.n	800d8d6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d002      	beq.n	800d8c2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d8bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d8c0:	e009      	b.n	800d8d6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d002      	beq.n	800d8d2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d8cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d8d0:	e001      	b.n	800d8d6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d8d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3720      	adds	r7, #32
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}
 800d8de:	bf00      	nop
 800d8e0:	20000004 	.word	0x20000004
 800d8e4:	10624dd3 	.word	0x10624dd3
 800d8e8:	002000c5 	.word	0x002000c5

0800d8ec <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	b085      	sub	sp, #20
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d8f4:	4b22      	ldr	r3, [pc, #136]	; (800d980 <SDMMC_GetCmdResp7+0x94>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	4a22      	ldr	r2, [pc, #136]	; (800d984 <SDMMC_GetCmdResp7+0x98>)
 800d8fa:	fba2 2303 	umull	r2, r3, r2, r3
 800d8fe:	0a5b      	lsrs	r3, r3, #9
 800d900:	f241 3288 	movw	r2, #5000	; 0x1388
 800d904:	fb02 f303 	mul.w	r3, r2, r3
 800d908:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	1e5a      	subs	r2, r3, #1
 800d90e:	60fa      	str	r2, [r7, #12]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d102      	bne.n	800d91a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d914:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d918:	e02c      	b.n	800d974 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d91e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d926:	2b00      	cmp	r3, #0
 800d928:	d0ef      	beq.n	800d90a <SDMMC_GetCmdResp7+0x1e>
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d930:	2b00      	cmp	r3, #0
 800d932:	d1ea      	bne.n	800d90a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d938:	f003 0304 	and.w	r3, r3, #4
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d004      	beq.n	800d94a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2204      	movs	r2, #4
 800d944:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d946:	2304      	movs	r3, #4
 800d948:	e014      	b.n	800d974 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d94e:	f003 0301 	and.w	r3, r3, #1
 800d952:	2b00      	cmp	r3, #0
 800d954:	d004      	beq.n	800d960 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2201      	movs	r2, #1
 800d95a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d95c:	2301      	movs	r3, #1
 800d95e:	e009      	b.n	800d974 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d002      	beq.n	800d972 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2240      	movs	r2, #64	; 0x40
 800d970:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d972:	2300      	movs	r3, #0

}
 800d974:	4618      	mov	r0, r3
 800d976:	3714      	adds	r7, #20
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr
 800d980:	20000004 	.word	0x20000004
 800d984:	10624dd3 	.word	0x10624dd3

0800d988 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d988:	b480      	push	{r7}
 800d98a:	b085      	sub	sp, #20
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d990:	4b11      	ldr	r3, [pc, #68]	; (800d9d8 <SDMMC_GetCmdError+0x50>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	4a11      	ldr	r2, [pc, #68]	; (800d9dc <SDMMC_GetCmdError+0x54>)
 800d996:	fba2 2303 	umull	r2, r3, r2, r3
 800d99a:	0a5b      	lsrs	r3, r3, #9
 800d99c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9a0:	fb02 f303 	mul.w	r3, r2, r3
 800d9a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	1e5a      	subs	r2, r3, #1
 800d9aa:	60fa      	str	r2, [r7, #12]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d102      	bne.n	800d9b6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d9b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d9b4:	e009      	b.n	800d9ca <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d0f1      	beq.n	800d9a6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	4a06      	ldr	r2, [pc, #24]	; (800d9e0 <SDMMC_GetCmdError+0x58>)
 800d9c6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800d9c8:	2300      	movs	r3, #0
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3714      	adds	r7, #20
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d4:	4770      	bx	lr
 800d9d6:	bf00      	nop
 800d9d8:	20000004 	.word	0x20000004
 800d9dc:	10624dd3 	.word	0x10624dd3
 800d9e0:	002000c5 	.word	0x002000c5

0800d9e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d9e4:	b084      	sub	sp, #16
 800d9e6:	b580      	push	{r7, lr}
 800d9e8:	b084      	sub	sp, #16
 800d9ea:	af00      	add	r7, sp, #0
 800d9ec:	6078      	str	r0, [r7, #4]
 800d9ee:	f107 001c 	add.w	r0, r7, #28
 800d9f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	68db      	ldr	r3, [r3, #12]
 800d9fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f001 faf6 	bl	800eff4 <USB_CoreReset>
 800da08:	4603      	mov	r3, r0
 800da0a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800da0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d106      	bne.n	800da20 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	639a      	str	r2, [r3, #56]	; 0x38
 800da1e:	e005      	b.n	800da2c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800da2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da2e:	4618      	mov	r0, r3
 800da30:	3710      	adds	r7, #16
 800da32:	46bd      	mov	sp, r7
 800da34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800da38:	b004      	add	sp, #16
 800da3a:	4770      	bx	lr

0800da3c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800da3c:	b480      	push	{r7}
 800da3e:	b087      	sub	sp, #28
 800da40:	af00      	add	r7, sp, #0
 800da42:	60f8      	str	r0, [r7, #12]
 800da44:	60b9      	str	r1, [r7, #8]
 800da46:	4613      	mov	r3, r2
 800da48:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800da4a:	79fb      	ldrb	r3, [r7, #7]
 800da4c:	2b02      	cmp	r3, #2
 800da4e:	d165      	bne.n	800db1c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	4a3e      	ldr	r2, [pc, #248]	; (800db4c <USB_SetTurnaroundTime+0x110>)
 800da54:	4293      	cmp	r3, r2
 800da56:	d906      	bls.n	800da66 <USB_SetTurnaroundTime+0x2a>
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	4a3d      	ldr	r2, [pc, #244]	; (800db50 <USB_SetTurnaroundTime+0x114>)
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d202      	bcs.n	800da66 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800da60:	230f      	movs	r3, #15
 800da62:	617b      	str	r3, [r7, #20]
 800da64:	e05c      	b.n	800db20 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	4a39      	ldr	r2, [pc, #228]	; (800db50 <USB_SetTurnaroundTime+0x114>)
 800da6a:	4293      	cmp	r3, r2
 800da6c:	d306      	bcc.n	800da7c <USB_SetTurnaroundTime+0x40>
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	4a38      	ldr	r2, [pc, #224]	; (800db54 <USB_SetTurnaroundTime+0x118>)
 800da72:	4293      	cmp	r3, r2
 800da74:	d202      	bcs.n	800da7c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800da76:	230e      	movs	r3, #14
 800da78:	617b      	str	r3, [r7, #20]
 800da7a:	e051      	b.n	800db20 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	4a35      	ldr	r2, [pc, #212]	; (800db54 <USB_SetTurnaroundTime+0x118>)
 800da80:	4293      	cmp	r3, r2
 800da82:	d306      	bcc.n	800da92 <USB_SetTurnaroundTime+0x56>
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	4a34      	ldr	r2, [pc, #208]	; (800db58 <USB_SetTurnaroundTime+0x11c>)
 800da88:	4293      	cmp	r3, r2
 800da8a:	d202      	bcs.n	800da92 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800da8c:	230d      	movs	r3, #13
 800da8e:	617b      	str	r3, [r7, #20]
 800da90:	e046      	b.n	800db20 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	4a30      	ldr	r2, [pc, #192]	; (800db58 <USB_SetTurnaroundTime+0x11c>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d306      	bcc.n	800daa8 <USB_SetTurnaroundTime+0x6c>
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	4a2f      	ldr	r2, [pc, #188]	; (800db5c <USB_SetTurnaroundTime+0x120>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d802      	bhi.n	800daa8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800daa2:	230c      	movs	r3, #12
 800daa4:	617b      	str	r3, [r7, #20]
 800daa6:	e03b      	b.n	800db20 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	4a2c      	ldr	r2, [pc, #176]	; (800db5c <USB_SetTurnaroundTime+0x120>)
 800daac:	4293      	cmp	r3, r2
 800daae:	d906      	bls.n	800dabe <USB_SetTurnaroundTime+0x82>
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	4a2b      	ldr	r2, [pc, #172]	; (800db60 <USB_SetTurnaroundTime+0x124>)
 800dab4:	4293      	cmp	r3, r2
 800dab6:	d802      	bhi.n	800dabe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800dab8:	230b      	movs	r3, #11
 800daba:	617b      	str	r3, [r7, #20]
 800dabc:	e030      	b.n	800db20 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	4a27      	ldr	r2, [pc, #156]	; (800db60 <USB_SetTurnaroundTime+0x124>)
 800dac2:	4293      	cmp	r3, r2
 800dac4:	d906      	bls.n	800dad4 <USB_SetTurnaroundTime+0x98>
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	4a26      	ldr	r2, [pc, #152]	; (800db64 <USB_SetTurnaroundTime+0x128>)
 800daca:	4293      	cmp	r3, r2
 800dacc:	d802      	bhi.n	800dad4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800dace:	230a      	movs	r3, #10
 800dad0:	617b      	str	r3, [r7, #20]
 800dad2:	e025      	b.n	800db20 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	4a23      	ldr	r2, [pc, #140]	; (800db64 <USB_SetTurnaroundTime+0x128>)
 800dad8:	4293      	cmp	r3, r2
 800dada:	d906      	bls.n	800daea <USB_SetTurnaroundTime+0xae>
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	4a22      	ldr	r2, [pc, #136]	; (800db68 <USB_SetTurnaroundTime+0x12c>)
 800dae0:	4293      	cmp	r3, r2
 800dae2:	d202      	bcs.n	800daea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800dae4:	2309      	movs	r3, #9
 800dae6:	617b      	str	r3, [r7, #20]
 800dae8:	e01a      	b.n	800db20 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	4a1e      	ldr	r2, [pc, #120]	; (800db68 <USB_SetTurnaroundTime+0x12c>)
 800daee:	4293      	cmp	r3, r2
 800daf0:	d306      	bcc.n	800db00 <USB_SetTurnaroundTime+0xc4>
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	4a1d      	ldr	r2, [pc, #116]	; (800db6c <USB_SetTurnaroundTime+0x130>)
 800daf6:	4293      	cmp	r3, r2
 800daf8:	d802      	bhi.n	800db00 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800dafa:	2308      	movs	r3, #8
 800dafc:	617b      	str	r3, [r7, #20]
 800dafe:	e00f      	b.n	800db20 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	4a1a      	ldr	r2, [pc, #104]	; (800db6c <USB_SetTurnaroundTime+0x130>)
 800db04:	4293      	cmp	r3, r2
 800db06:	d906      	bls.n	800db16 <USB_SetTurnaroundTime+0xda>
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	4a19      	ldr	r2, [pc, #100]	; (800db70 <USB_SetTurnaroundTime+0x134>)
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d202      	bcs.n	800db16 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800db10:	2307      	movs	r3, #7
 800db12:	617b      	str	r3, [r7, #20]
 800db14:	e004      	b.n	800db20 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800db16:	2306      	movs	r3, #6
 800db18:	617b      	str	r3, [r7, #20]
 800db1a:	e001      	b.n	800db20 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800db1c:	2309      	movs	r3, #9
 800db1e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	68db      	ldr	r3, [r3, #12]
 800db24:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	68da      	ldr	r2, [r3, #12]
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	029b      	lsls	r3, r3, #10
 800db34:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800db38:	431a      	orrs	r2, r3
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800db3e:	2300      	movs	r3, #0
}
 800db40:	4618      	mov	r0, r3
 800db42:	371c      	adds	r7, #28
 800db44:	46bd      	mov	sp, r7
 800db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4a:	4770      	bx	lr
 800db4c:	00d8acbf 	.word	0x00d8acbf
 800db50:	00e4e1c0 	.word	0x00e4e1c0
 800db54:	00f42400 	.word	0x00f42400
 800db58:	01067380 	.word	0x01067380
 800db5c:	011a499f 	.word	0x011a499f
 800db60:	01312cff 	.word	0x01312cff
 800db64:	014ca43f 	.word	0x014ca43f
 800db68:	016e3600 	.word	0x016e3600
 800db6c:	01a6ab1f 	.word	0x01a6ab1f
 800db70:	01e84800 	.word	0x01e84800

0800db74 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800db74:	b480      	push	{r7}
 800db76:	b083      	sub	sp, #12
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	689b      	ldr	r3, [r3, #8]
 800db80:	f043 0201 	orr.w	r2, r3, #1
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800db88:	2300      	movs	r3, #0
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	370c      	adds	r7, #12
 800db8e:	46bd      	mov	sp, r7
 800db90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db94:	4770      	bx	lr

0800db96 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800db96:	b480      	push	{r7}
 800db98:	b083      	sub	sp, #12
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	689b      	ldr	r3, [r3, #8]
 800dba2:	f023 0201 	bic.w	r2, r3, #1
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dbaa:	2300      	movs	r3, #0
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	370c      	adds	r7, #12
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb6:	4770      	bx	lr

0800dbb8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b084      	sub	sp, #16
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	460b      	mov	r3, r1
 800dbc2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	68db      	ldr	r3, [r3, #12]
 800dbcc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dbd4:	78fb      	ldrb	r3, [r7, #3]
 800dbd6:	2b01      	cmp	r3, #1
 800dbd8:	d115      	bne.n	800dc06 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	68db      	ldr	r3, [r3, #12]
 800dbde:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800dbe6:	2001      	movs	r0, #1
 800dbe8:	f7f6 f9e6 	bl	8003fb8 <HAL_Delay>
      ms++;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	3301      	adds	r3, #1
 800dbf0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f001 f985 	bl	800ef02 <USB_GetMode>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	2b01      	cmp	r3, #1
 800dbfc:	d01e      	beq.n	800dc3c <USB_SetCurrentMode+0x84>
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	2b31      	cmp	r3, #49	; 0x31
 800dc02:	d9f0      	bls.n	800dbe6 <USB_SetCurrentMode+0x2e>
 800dc04:	e01a      	b.n	800dc3c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800dc06:	78fb      	ldrb	r3, [r7, #3]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d115      	bne.n	800dc38 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	68db      	ldr	r3, [r3, #12]
 800dc10:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800dc18:	2001      	movs	r0, #1
 800dc1a:	f7f6 f9cd 	bl	8003fb8 <HAL_Delay>
      ms++;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	3301      	adds	r3, #1
 800dc22:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f001 f96c 	bl	800ef02 <USB_GetMode>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d005      	beq.n	800dc3c <USB_SetCurrentMode+0x84>
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	2b31      	cmp	r3, #49	; 0x31
 800dc34:	d9f0      	bls.n	800dc18 <USB_SetCurrentMode+0x60>
 800dc36:	e001      	b.n	800dc3c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800dc38:	2301      	movs	r3, #1
 800dc3a:	e005      	b.n	800dc48 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	2b32      	cmp	r3, #50	; 0x32
 800dc40:	d101      	bne.n	800dc46 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800dc42:	2301      	movs	r3, #1
 800dc44:	e000      	b.n	800dc48 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800dc46:	2300      	movs	r3, #0
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3710      	adds	r7, #16
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}

0800dc50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dc50:	b084      	sub	sp, #16
 800dc52:	b580      	push	{r7, lr}
 800dc54:	b086      	sub	sp, #24
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	6078      	str	r0, [r7, #4]
 800dc5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800dc5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800dc62:	2300      	movs	r3, #0
 800dc64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	613b      	str	r3, [r7, #16]
 800dc6e:	e009      	b.n	800dc84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800dc70:	687a      	ldr	r2, [r7, #4]
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	3340      	adds	r3, #64	; 0x40
 800dc76:	009b      	lsls	r3, r3, #2
 800dc78:	4413      	add	r3, r2
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	3301      	adds	r3, #1
 800dc82:	613b      	str	r3, [r7, #16]
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	2b0e      	cmp	r3, #14
 800dc88:	d9f2      	bls.n	800dc70 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800dc8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d11c      	bne.n	800dcca <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc96:	685b      	ldr	r3, [r3, #4]
 800dc98:	68fa      	ldr	r2, [r7, #12]
 800dc9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dc9e:	f043 0302 	orr.w	r3, r3, #2
 800dca2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dca8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	601a      	str	r2, [r3, #0]
 800dcc8:	e005      	b.n	800dcd6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dcdc:	461a      	mov	r2, r3
 800dcde:	2300      	movs	r3, #0
 800dce0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dce8:	4619      	mov	r1, r3
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcf0:	461a      	mov	r2, r3
 800dcf2:	680b      	ldr	r3, [r1, #0]
 800dcf4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dcf6:	2103      	movs	r1, #3
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f000 f959 	bl	800dfb0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dcfe:	2110      	movs	r1, #16
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f000 f8f1 	bl	800dee8 <USB_FlushTxFifo>
 800dd06:	4603      	mov	r3, r0
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d001      	beq.n	800dd10 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	f000 f91d 	bl	800df50 <USB_FlushRxFifo>
 800dd16:	4603      	mov	r3, r0
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d001      	beq.n	800dd20 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd26:	461a      	mov	r2, r3
 800dd28:	2300      	movs	r3, #0
 800dd2a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd32:	461a      	mov	r2, r3
 800dd34:	2300      	movs	r3, #0
 800dd36:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd3e:	461a      	mov	r2, r3
 800dd40:	2300      	movs	r3, #0
 800dd42:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd44:	2300      	movs	r3, #0
 800dd46:	613b      	str	r3, [r7, #16]
 800dd48:	e043      	b.n	800ddd2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	015a      	lsls	r2, r3, #5
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	4413      	add	r3, r2
 800dd52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd60:	d118      	bne.n	800dd94 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d10a      	bne.n	800dd7e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	015a      	lsls	r2, r3, #5
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	4413      	add	r3, r2
 800dd70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd74:	461a      	mov	r2, r3
 800dd76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dd7a:	6013      	str	r3, [r2, #0]
 800dd7c:	e013      	b.n	800dda6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800dd7e:	693b      	ldr	r3, [r7, #16]
 800dd80:	015a      	lsls	r2, r3, #5
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	4413      	add	r3, r2
 800dd86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd8a:	461a      	mov	r2, r3
 800dd8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dd90:	6013      	str	r3, [r2, #0]
 800dd92:	e008      	b.n	800dda6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800dd94:	693b      	ldr	r3, [r7, #16]
 800dd96:	015a      	lsls	r2, r3, #5
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	4413      	add	r3, r2
 800dd9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dda0:	461a      	mov	r2, r3
 800dda2:	2300      	movs	r3, #0
 800dda4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	015a      	lsls	r2, r3, #5
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	4413      	add	r3, r2
 800ddae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddb2:	461a      	mov	r2, r3
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	015a      	lsls	r2, r3, #5
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	4413      	add	r3, r2
 800ddc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddc4:	461a      	mov	r2, r3
 800ddc6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ddca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ddcc:	693b      	ldr	r3, [r7, #16]
 800ddce:	3301      	adds	r3, #1
 800ddd0:	613b      	str	r3, [r7, #16]
 800ddd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd4:	693a      	ldr	r2, [r7, #16]
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	d3b7      	bcc.n	800dd4a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ddda:	2300      	movs	r3, #0
 800dddc:	613b      	str	r3, [r7, #16]
 800ddde:	e043      	b.n	800de68 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	015a      	lsls	r2, r3, #5
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	4413      	add	r3, r2
 800dde8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ddf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ddf6:	d118      	bne.n	800de2a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d10a      	bne.n	800de14 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	015a      	lsls	r2, r3, #5
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	4413      	add	r3, r2
 800de06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de0a:	461a      	mov	r2, r3
 800de0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800de10:	6013      	str	r3, [r2, #0]
 800de12:	e013      	b.n	800de3c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800de14:	693b      	ldr	r3, [r7, #16]
 800de16:	015a      	lsls	r2, r3, #5
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	4413      	add	r3, r2
 800de1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de20:	461a      	mov	r2, r3
 800de22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800de26:	6013      	str	r3, [r2, #0]
 800de28:	e008      	b.n	800de3c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	015a      	lsls	r2, r3, #5
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	4413      	add	r3, r2
 800de32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de36:	461a      	mov	r2, r3
 800de38:	2300      	movs	r3, #0
 800de3a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800de3c:	693b      	ldr	r3, [r7, #16]
 800de3e:	015a      	lsls	r2, r3, #5
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	4413      	add	r3, r2
 800de44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de48:	461a      	mov	r2, r3
 800de4a:	2300      	movs	r3, #0
 800de4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	015a      	lsls	r2, r3, #5
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	4413      	add	r3, r2
 800de56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de5a:	461a      	mov	r2, r3
 800de5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800de60:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800de62:	693b      	ldr	r3, [r7, #16]
 800de64:	3301      	adds	r3, #1
 800de66:	613b      	str	r3, [r7, #16]
 800de68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de6a:	693a      	ldr	r2, [r7, #16]
 800de6c:	429a      	cmp	r2, r3
 800de6e:	d3b7      	bcc.n	800dde0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de76:	691b      	ldr	r3, [r3, #16]
 800de78:	68fa      	ldr	r2, [r7, #12]
 800de7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800de7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800de82:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2200      	movs	r2, #0
 800de88:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800de90:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	699b      	ldr	r3, [r3, #24]
 800de96:	f043 0210 	orr.w	r2, r3, #16
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	699a      	ldr	r2, [r3, #24]
 800dea2:	4b10      	ldr	r3, [pc, #64]	; (800dee4 <USB_DevInit+0x294>)
 800dea4:	4313      	orrs	r3, r2
 800dea6:	687a      	ldr	r2, [r7, #4]
 800dea8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800deaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800deac:	2b00      	cmp	r3, #0
 800deae:	d005      	beq.n	800debc <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	699b      	ldr	r3, [r3, #24]
 800deb4:	f043 0208 	orr.w	r2, r3, #8
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800debc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800debe:	2b01      	cmp	r3, #1
 800dec0:	d107      	bne.n	800ded2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	699b      	ldr	r3, [r3, #24]
 800dec6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800deca:	f043 0304 	orr.w	r3, r3, #4
 800dece:	687a      	ldr	r2, [r7, #4]
 800ded0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ded2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3718      	adds	r7, #24
 800ded8:	46bd      	mov	sp, r7
 800deda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dede:	b004      	add	sp, #16
 800dee0:	4770      	bx	lr
 800dee2:	bf00      	nop
 800dee4:	803c3800 	.word	0x803c3800

0800dee8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800dee8:	b480      	push	{r7}
 800deea:	b085      	sub	sp, #20
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800def2:	2300      	movs	r3, #0
 800def4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	3301      	adds	r3, #1
 800defa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	4a13      	ldr	r2, [pc, #76]	; (800df4c <USB_FlushTxFifo+0x64>)
 800df00:	4293      	cmp	r3, r2
 800df02:	d901      	bls.n	800df08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800df04:	2303      	movs	r3, #3
 800df06:	e01b      	b.n	800df40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	691b      	ldr	r3, [r3, #16]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	daf2      	bge.n	800def6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800df10:	2300      	movs	r3, #0
 800df12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	019b      	lsls	r3, r3, #6
 800df18:	f043 0220 	orr.w	r2, r3, #32
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	3301      	adds	r3, #1
 800df24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	4a08      	ldr	r2, [pc, #32]	; (800df4c <USB_FlushTxFifo+0x64>)
 800df2a:	4293      	cmp	r3, r2
 800df2c:	d901      	bls.n	800df32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800df2e:	2303      	movs	r3, #3
 800df30:	e006      	b.n	800df40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	691b      	ldr	r3, [r3, #16]
 800df36:	f003 0320 	and.w	r3, r3, #32
 800df3a:	2b20      	cmp	r3, #32
 800df3c:	d0f0      	beq.n	800df20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800df3e:	2300      	movs	r3, #0
}
 800df40:	4618      	mov	r0, r3
 800df42:	3714      	adds	r7, #20
 800df44:	46bd      	mov	sp, r7
 800df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4a:	4770      	bx	lr
 800df4c:	00030d40 	.word	0x00030d40

0800df50 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800df50:	b480      	push	{r7}
 800df52:	b085      	sub	sp, #20
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800df58:	2300      	movs	r3, #0
 800df5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	3301      	adds	r3, #1
 800df60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	4a11      	ldr	r2, [pc, #68]	; (800dfac <USB_FlushRxFifo+0x5c>)
 800df66:	4293      	cmp	r3, r2
 800df68:	d901      	bls.n	800df6e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800df6a:	2303      	movs	r3, #3
 800df6c:	e018      	b.n	800dfa0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	691b      	ldr	r3, [r3, #16]
 800df72:	2b00      	cmp	r3, #0
 800df74:	daf2      	bge.n	800df5c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800df76:	2300      	movs	r3, #0
 800df78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2210      	movs	r2, #16
 800df7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	3301      	adds	r3, #1
 800df84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	4a08      	ldr	r2, [pc, #32]	; (800dfac <USB_FlushRxFifo+0x5c>)
 800df8a:	4293      	cmp	r3, r2
 800df8c:	d901      	bls.n	800df92 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800df8e:	2303      	movs	r3, #3
 800df90:	e006      	b.n	800dfa0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	691b      	ldr	r3, [r3, #16]
 800df96:	f003 0310 	and.w	r3, r3, #16
 800df9a:	2b10      	cmp	r3, #16
 800df9c:	d0f0      	beq.n	800df80 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800df9e:	2300      	movs	r3, #0
}
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	3714      	adds	r7, #20
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr
 800dfac:	00030d40 	.word	0x00030d40

0800dfb0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	b085      	sub	sp, #20
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	460b      	mov	r3, r1
 800dfba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfc6:	681a      	ldr	r2, [r3, #0]
 800dfc8:	78fb      	ldrb	r3, [r7, #3]
 800dfca:	68f9      	ldr	r1, [r7, #12]
 800dfcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dfd0:	4313      	orrs	r3, r2
 800dfd2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800dfd4:	2300      	movs	r3, #0
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3714      	adds	r7, #20
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr

0800dfe2 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800dfe2:	b480      	push	{r7}
 800dfe4:	b087      	sub	sp, #28
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dff4:	689b      	ldr	r3, [r3, #8]
 800dff6:	f003 0306 	and.w	r3, r3, #6
 800dffa:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	2b02      	cmp	r3, #2
 800e000:	d002      	beq.n	800e008 <USB_GetDevSpeed+0x26>
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	2b06      	cmp	r3, #6
 800e006:	d102      	bne.n	800e00e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e008:	2302      	movs	r3, #2
 800e00a:	75fb      	strb	r3, [r7, #23]
 800e00c:	e001      	b.n	800e012 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800e00e:	230f      	movs	r3, #15
 800e010:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e012:	7dfb      	ldrb	r3, [r7, #23]
}
 800e014:	4618      	mov	r0, r3
 800e016:	371c      	adds	r7, #28
 800e018:	46bd      	mov	sp, r7
 800e01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01e:	4770      	bx	lr

0800e020 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e020:	b480      	push	{r7}
 800e022:	b085      	sub	sp, #20
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
 800e028:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	781b      	ldrb	r3, [r3, #0]
 800e032:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	785b      	ldrb	r3, [r3, #1]
 800e038:	2b01      	cmp	r3, #1
 800e03a:	d13a      	bne.n	800e0b2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e042:	69da      	ldr	r2, [r3, #28]
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	781b      	ldrb	r3, [r3, #0]
 800e048:	f003 030f 	and.w	r3, r3, #15
 800e04c:	2101      	movs	r1, #1
 800e04e:	fa01 f303 	lsl.w	r3, r1, r3
 800e052:	b29b      	uxth	r3, r3
 800e054:	68f9      	ldr	r1, [r7, #12]
 800e056:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e05a:	4313      	orrs	r3, r2
 800e05c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	015a      	lsls	r2, r3, #5
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	4413      	add	r3, r2
 800e066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e070:	2b00      	cmp	r3, #0
 800e072:	d155      	bne.n	800e120 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	015a      	lsls	r2, r3, #5
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	4413      	add	r3, r2
 800e07c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e080:	681a      	ldr	r2, [r3, #0]
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	68db      	ldr	r3, [r3, #12]
 800e086:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	791b      	ldrb	r3, [r3, #4]
 800e08e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e090:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	059b      	lsls	r3, r3, #22
 800e096:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e098:	4313      	orrs	r3, r2
 800e09a:	68ba      	ldr	r2, [r7, #8]
 800e09c:	0151      	lsls	r1, r2, #5
 800e09e:	68fa      	ldr	r2, [r7, #12]
 800e0a0:	440a      	add	r2, r1
 800e0a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e0aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e0ae:	6013      	str	r3, [r2, #0]
 800e0b0:	e036      	b.n	800e120 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0b8:	69da      	ldr	r2, [r3, #28]
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	781b      	ldrb	r3, [r3, #0]
 800e0be:	f003 030f 	and.w	r3, r3, #15
 800e0c2:	2101      	movs	r1, #1
 800e0c4:	fa01 f303 	lsl.w	r3, r1, r3
 800e0c8:	041b      	lsls	r3, r3, #16
 800e0ca:	68f9      	ldr	r1, [r7, #12]
 800e0cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e0d0:	4313      	orrs	r3, r2
 800e0d2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e0d4:	68bb      	ldr	r3, [r7, #8]
 800e0d6:	015a      	lsls	r2, r3, #5
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	4413      	add	r3, r2
 800e0dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d11a      	bne.n	800e120 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	015a      	lsls	r2, r3, #5
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	4413      	add	r3, r2
 800e0f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0f6:	681a      	ldr	r2, [r3, #0]
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	68db      	ldr	r3, [r3, #12]
 800e0fc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	791b      	ldrb	r3, [r3, #4]
 800e104:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e106:	430b      	orrs	r3, r1
 800e108:	4313      	orrs	r3, r2
 800e10a:	68ba      	ldr	r2, [r7, #8]
 800e10c:	0151      	lsls	r1, r2, #5
 800e10e:	68fa      	ldr	r2, [r7, #12]
 800e110:	440a      	add	r2, r1
 800e112:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e11a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e11e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e120:	2300      	movs	r3, #0
}
 800e122:	4618      	mov	r0, r3
 800e124:	3714      	adds	r7, #20
 800e126:	46bd      	mov	sp, r7
 800e128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12c:	4770      	bx	lr
	...

0800e130 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e130:	b480      	push	{r7}
 800e132:	b085      	sub	sp, #20
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
 800e138:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	781b      	ldrb	r3, [r3, #0]
 800e142:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	785b      	ldrb	r3, [r3, #1]
 800e148:	2b01      	cmp	r3, #1
 800e14a:	d161      	bne.n	800e210 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	015a      	lsls	r2, r3, #5
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	4413      	add	r3, r2
 800e154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e15e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e162:	d11f      	bne.n	800e1a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	015a      	lsls	r2, r3, #5
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	4413      	add	r3, r2
 800e16c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	68ba      	ldr	r2, [r7, #8]
 800e174:	0151      	lsls	r1, r2, #5
 800e176:	68fa      	ldr	r2, [r7, #12]
 800e178:	440a      	add	r2, r1
 800e17a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e17e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e182:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	015a      	lsls	r2, r3, #5
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	4413      	add	r3, r2
 800e18c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	68ba      	ldr	r2, [r7, #8]
 800e194:	0151      	lsls	r1, r2, #5
 800e196:	68fa      	ldr	r2, [r7, #12]
 800e198:	440a      	add	r2, r1
 800e19a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e19e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e1a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	781b      	ldrb	r3, [r3, #0]
 800e1b0:	f003 030f 	and.w	r3, r3, #15
 800e1b4:	2101      	movs	r1, #1
 800e1b6:	fa01 f303 	lsl.w	r3, r1, r3
 800e1ba:	b29b      	uxth	r3, r3
 800e1bc:	43db      	mvns	r3, r3
 800e1be:	68f9      	ldr	r1, [r7, #12]
 800e1c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e1c4:	4013      	ands	r3, r2
 800e1c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1ce:	69da      	ldr	r2, [r3, #28]
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	781b      	ldrb	r3, [r3, #0]
 800e1d4:	f003 030f 	and.w	r3, r3, #15
 800e1d8:	2101      	movs	r1, #1
 800e1da:	fa01 f303 	lsl.w	r3, r1, r3
 800e1de:	b29b      	uxth	r3, r3
 800e1e0:	43db      	mvns	r3, r3
 800e1e2:	68f9      	ldr	r1, [r7, #12]
 800e1e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e1e8:	4013      	ands	r3, r2
 800e1ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	015a      	lsls	r2, r3, #5
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	4413      	add	r3, r2
 800e1f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1f8:	681a      	ldr	r2, [r3, #0]
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	0159      	lsls	r1, r3, #5
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	440b      	add	r3, r1
 800e202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e206:	4619      	mov	r1, r3
 800e208:	4b35      	ldr	r3, [pc, #212]	; (800e2e0 <USB_DeactivateEndpoint+0x1b0>)
 800e20a:	4013      	ands	r3, r2
 800e20c:	600b      	str	r3, [r1, #0]
 800e20e:	e060      	b.n	800e2d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e210:	68bb      	ldr	r3, [r7, #8]
 800e212:	015a      	lsls	r2, r3, #5
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	4413      	add	r3, r2
 800e218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e222:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e226:	d11f      	bne.n	800e268 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	015a      	lsls	r2, r3, #5
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	4413      	add	r3, r2
 800e230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	68ba      	ldr	r2, [r7, #8]
 800e238:	0151      	lsls	r1, r2, #5
 800e23a:	68fa      	ldr	r2, [r7, #12]
 800e23c:	440a      	add	r2, r1
 800e23e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e242:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e246:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	015a      	lsls	r2, r3, #5
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	4413      	add	r3, r2
 800e250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	68ba      	ldr	r2, [r7, #8]
 800e258:	0151      	lsls	r1, r2, #5
 800e25a:	68fa      	ldr	r2, [r7, #12]
 800e25c:	440a      	add	r2, r1
 800e25e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e262:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e266:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e26e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	781b      	ldrb	r3, [r3, #0]
 800e274:	f003 030f 	and.w	r3, r3, #15
 800e278:	2101      	movs	r1, #1
 800e27a:	fa01 f303 	lsl.w	r3, r1, r3
 800e27e:	041b      	lsls	r3, r3, #16
 800e280:	43db      	mvns	r3, r3
 800e282:	68f9      	ldr	r1, [r7, #12]
 800e284:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e288:	4013      	ands	r3, r2
 800e28a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e292:	69da      	ldr	r2, [r3, #28]
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	781b      	ldrb	r3, [r3, #0]
 800e298:	f003 030f 	and.w	r3, r3, #15
 800e29c:	2101      	movs	r1, #1
 800e29e:	fa01 f303 	lsl.w	r3, r1, r3
 800e2a2:	041b      	lsls	r3, r3, #16
 800e2a4:	43db      	mvns	r3, r3
 800e2a6:	68f9      	ldr	r1, [r7, #12]
 800e2a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e2ac:	4013      	ands	r3, r2
 800e2ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e2b0:	68bb      	ldr	r3, [r7, #8]
 800e2b2:	015a      	lsls	r2, r3, #5
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	4413      	add	r3, r2
 800e2b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2bc:	681a      	ldr	r2, [r3, #0]
 800e2be:	68bb      	ldr	r3, [r7, #8]
 800e2c0:	0159      	lsls	r1, r3, #5
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	440b      	add	r3, r1
 800e2c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2ca:	4619      	mov	r1, r3
 800e2cc:	4b05      	ldr	r3, [pc, #20]	; (800e2e4 <USB_DeactivateEndpoint+0x1b4>)
 800e2ce:	4013      	ands	r3, r2
 800e2d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e2d2:	2300      	movs	r3, #0
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3714      	adds	r7, #20
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2de:	4770      	bx	lr
 800e2e0:	ec337800 	.word	0xec337800
 800e2e4:	eff37800 	.word	0xeff37800

0800e2e8 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b086      	sub	sp, #24
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
 800e2f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	781b      	ldrb	r3, [r3, #0]
 800e2fa:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	785b      	ldrb	r3, [r3, #1]
 800e300:	2b01      	cmp	r3, #1
 800e302:	f040 810a 	bne.w	800e51a <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	699b      	ldr	r3, [r3, #24]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d132      	bne.n	800e374 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e30e:	693b      	ldr	r3, [r7, #16]
 800e310:	015a      	lsls	r2, r3, #5
 800e312:	697b      	ldr	r3, [r7, #20]
 800e314:	4413      	add	r3, r2
 800e316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e31a:	691b      	ldr	r3, [r3, #16]
 800e31c:	693a      	ldr	r2, [r7, #16]
 800e31e:	0151      	lsls	r1, r2, #5
 800e320:	697a      	ldr	r2, [r7, #20]
 800e322:	440a      	add	r2, r1
 800e324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e328:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e32c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e330:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e332:	693b      	ldr	r3, [r7, #16]
 800e334:	015a      	lsls	r2, r3, #5
 800e336:	697b      	ldr	r3, [r7, #20]
 800e338:	4413      	add	r3, r2
 800e33a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e33e:	691b      	ldr	r3, [r3, #16]
 800e340:	693a      	ldr	r2, [r7, #16]
 800e342:	0151      	lsls	r1, r2, #5
 800e344:	697a      	ldr	r2, [r7, #20]
 800e346:	440a      	add	r2, r1
 800e348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e34c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e350:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	015a      	lsls	r2, r3, #5
 800e356:	697b      	ldr	r3, [r7, #20]
 800e358:	4413      	add	r3, r2
 800e35a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e35e:	691b      	ldr	r3, [r3, #16]
 800e360:	693a      	ldr	r2, [r7, #16]
 800e362:	0151      	lsls	r1, r2, #5
 800e364:	697a      	ldr	r2, [r7, #20]
 800e366:	440a      	add	r2, r1
 800e368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e36c:	0cdb      	lsrs	r3, r3, #19
 800e36e:	04db      	lsls	r3, r3, #19
 800e370:	6113      	str	r3, [r2, #16]
 800e372:	e074      	b.n	800e45e <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e374:	693b      	ldr	r3, [r7, #16]
 800e376:	015a      	lsls	r2, r3, #5
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	4413      	add	r3, r2
 800e37c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e380:	691b      	ldr	r3, [r3, #16]
 800e382:	693a      	ldr	r2, [r7, #16]
 800e384:	0151      	lsls	r1, r2, #5
 800e386:	697a      	ldr	r2, [r7, #20]
 800e388:	440a      	add	r2, r1
 800e38a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e38e:	0cdb      	lsrs	r3, r3, #19
 800e390:	04db      	lsls	r3, r3, #19
 800e392:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e394:	693b      	ldr	r3, [r7, #16]
 800e396:	015a      	lsls	r2, r3, #5
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	4413      	add	r3, r2
 800e39c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3a0:	691b      	ldr	r3, [r3, #16]
 800e3a2:	693a      	ldr	r2, [r7, #16]
 800e3a4:	0151      	lsls	r1, r2, #5
 800e3a6:	697a      	ldr	r2, [r7, #20]
 800e3a8:	440a      	add	r2, r1
 800e3aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e3b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e3b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e3b8:	693b      	ldr	r3, [r7, #16]
 800e3ba:	015a      	lsls	r2, r3, #5
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	4413      	add	r3, r2
 800e3c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3c4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	6999      	ldr	r1, [r3, #24]
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	68db      	ldr	r3, [r3, #12]
 800e3ce:	440b      	add	r3, r1
 800e3d0:	1e59      	subs	r1, r3, #1
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	68db      	ldr	r3, [r3, #12]
 800e3d6:	fbb1 f3f3 	udiv	r3, r1, r3
 800e3da:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e3dc:	4b9e      	ldr	r3, [pc, #632]	; (800e658 <USB_EPStartXfer+0x370>)
 800e3de:	400b      	ands	r3, r1
 800e3e0:	6939      	ldr	r1, [r7, #16]
 800e3e2:	0148      	lsls	r0, r1, #5
 800e3e4:	6979      	ldr	r1, [r7, #20]
 800e3e6:	4401      	add	r1, r0
 800e3e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e3ec:	4313      	orrs	r3, r2
 800e3ee:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	015a      	lsls	r2, r3, #5
 800e3f4:	697b      	ldr	r3, [r7, #20]
 800e3f6:	4413      	add	r3, r2
 800e3f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3fc:	691a      	ldr	r2, [r3, #16]
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	699b      	ldr	r3, [r3, #24]
 800e402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e406:	6939      	ldr	r1, [r7, #16]
 800e408:	0148      	lsls	r0, r1, #5
 800e40a:	6979      	ldr	r1, [r7, #20]
 800e40c:	4401      	add	r1, r0
 800e40e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e412:	4313      	orrs	r3, r2
 800e414:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e416:	683b      	ldr	r3, [r7, #0]
 800e418:	791b      	ldrb	r3, [r3, #4]
 800e41a:	2b01      	cmp	r3, #1
 800e41c:	d11f      	bne.n	800e45e <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	015a      	lsls	r2, r3, #5
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	4413      	add	r3, r2
 800e426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e42a:	691b      	ldr	r3, [r3, #16]
 800e42c:	693a      	ldr	r2, [r7, #16]
 800e42e:	0151      	lsls	r1, r2, #5
 800e430:	697a      	ldr	r2, [r7, #20]
 800e432:	440a      	add	r2, r1
 800e434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e438:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e43c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e43e:	693b      	ldr	r3, [r7, #16]
 800e440:	015a      	lsls	r2, r3, #5
 800e442:	697b      	ldr	r3, [r7, #20]
 800e444:	4413      	add	r3, r2
 800e446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e44a:	691b      	ldr	r3, [r3, #16]
 800e44c:	693a      	ldr	r2, [r7, #16]
 800e44e:	0151      	lsls	r1, r2, #5
 800e450:	697a      	ldr	r2, [r7, #20]
 800e452:	440a      	add	r2, r1
 800e454:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e458:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e45c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	015a      	lsls	r2, r3, #5
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	4413      	add	r3, r2
 800e466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	693a      	ldr	r2, [r7, #16]
 800e46e:	0151      	lsls	r1, r2, #5
 800e470:	697a      	ldr	r2, [r7, #20]
 800e472:	440a      	add	r2, r1
 800e474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e478:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e47c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	791b      	ldrb	r3, [r3, #4]
 800e482:	2b01      	cmp	r3, #1
 800e484:	d015      	beq.n	800e4b2 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	699b      	ldr	r3, [r3, #24]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	f000 8106 	beq.w	800e69c <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e490:	697b      	ldr	r3, [r7, #20]
 800e492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	781b      	ldrb	r3, [r3, #0]
 800e49c:	f003 030f 	and.w	r3, r3, #15
 800e4a0:	2101      	movs	r1, #1
 800e4a2:	fa01 f303 	lsl.w	r3, r1, r3
 800e4a6:	6979      	ldr	r1, [r7, #20]
 800e4a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e4ac:	4313      	orrs	r3, r2
 800e4ae:	634b      	str	r3, [r1, #52]	; 0x34
 800e4b0:	e0f4      	b.n	800e69c <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4b8:	689b      	ldr	r3, [r3, #8]
 800e4ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d110      	bne.n	800e4e4 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e4c2:	693b      	ldr	r3, [r7, #16]
 800e4c4:	015a      	lsls	r2, r3, #5
 800e4c6:	697b      	ldr	r3, [r7, #20]
 800e4c8:	4413      	add	r3, r2
 800e4ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	693a      	ldr	r2, [r7, #16]
 800e4d2:	0151      	lsls	r1, r2, #5
 800e4d4:	697a      	ldr	r2, [r7, #20]
 800e4d6:	440a      	add	r2, r1
 800e4d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e4dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e4e0:	6013      	str	r3, [r2, #0]
 800e4e2:	e00f      	b.n	800e504 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e4e4:	693b      	ldr	r3, [r7, #16]
 800e4e6:	015a      	lsls	r2, r3, #5
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	4413      	add	r3, r2
 800e4ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	693a      	ldr	r2, [r7, #16]
 800e4f4:	0151      	lsls	r1, r2, #5
 800e4f6:	697a      	ldr	r2, [r7, #20]
 800e4f8:	440a      	add	r2, r1
 800e4fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e4fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e502:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	6919      	ldr	r1, [r3, #16]
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	781a      	ldrb	r2, [r3, #0]
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	699b      	ldr	r3, [r3, #24]
 800e510:	b29b      	uxth	r3, r3
 800e512:	6878      	ldr	r0, [r7, #4]
 800e514:	f000 fa94 	bl	800ea40 <USB_WritePacket>
 800e518:	e0c0      	b.n	800e69c <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e51a:	693b      	ldr	r3, [r7, #16]
 800e51c:	015a      	lsls	r2, r3, #5
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	4413      	add	r3, r2
 800e522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e526:	691b      	ldr	r3, [r3, #16]
 800e528:	693a      	ldr	r2, [r7, #16]
 800e52a:	0151      	lsls	r1, r2, #5
 800e52c:	697a      	ldr	r2, [r7, #20]
 800e52e:	440a      	add	r2, r1
 800e530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e534:	0cdb      	lsrs	r3, r3, #19
 800e536:	04db      	lsls	r3, r3, #19
 800e538:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	015a      	lsls	r2, r3, #5
 800e53e:	697b      	ldr	r3, [r7, #20]
 800e540:	4413      	add	r3, r2
 800e542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e546:	691b      	ldr	r3, [r3, #16]
 800e548:	693a      	ldr	r2, [r7, #16]
 800e54a:	0151      	lsls	r1, r2, #5
 800e54c:	697a      	ldr	r2, [r7, #20]
 800e54e:	440a      	add	r2, r1
 800e550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e554:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e558:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e55c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	699b      	ldr	r3, [r3, #24]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d123      	bne.n	800e5ae <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e566:	693b      	ldr	r3, [r7, #16]
 800e568:	015a      	lsls	r2, r3, #5
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	4413      	add	r3, r2
 800e56e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e572:	691a      	ldr	r2, [r3, #16]
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	68db      	ldr	r3, [r3, #12]
 800e578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e57c:	6939      	ldr	r1, [r7, #16]
 800e57e:	0148      	lsls	r0, r1, #5
 800e580:	6979      	ldr	r1, [r7, #20]
 800e582:	4401      	add	r1, r0
 800e584:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e588:	4313      	orrs	r3, r2
 800e58a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	015a      	lsls	r2, r3, #5
 800e590:	697b      	ldr	r3, [r7, #20]
 800e592:	4413      	add	r3, r2
 800e594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e598:	691b      	ldr	r3, [r3, #16]
 800e59a:	693a      	ldr	r2, [r7, #16]
 800e59c:	0151      	lsls	r1, r2, #5
 800e59e:	697a      	ldr	r2, [r7, #20]
 800e5a0:	440a      	add	r2, r1
 800e5a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e5a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e5aa:	6113      	str	r3, [r2, #16]
 800e5ac:	e037      	b.n	800e61e <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	699a      	ldr	r2, [r3, #24]
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	68db      	ldr	r3, [r3, #12]
 800e5b6:	4413      	add	r3, r2
 800e5b8:	1e5a      	subs	r2, r3, #1
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	68db      	ldr	r3, [r3, #12]
 800e5be:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5c2:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	68db      	ldr	r3, [r3, #12]
 800e5c8:	89fa      	ldrh	r2, [r7, #14]
 800e5ca:	fb03 f202 	mul.w	r2, r3, r2
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	015a      	lsls	r2, r3, #5
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	4413      	add	r3, r2
 800e5da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5de:	691a      	ldr	r2, [r3, #16]
 800e5e0:	89fb      	ldrh	r3, [r7, #14]
 800e5e2:	04d9      	lsls	r1, r3, #19
 800e5e4:	4b1c      	ldr	r3, [pc, #112]	; (800e658 <USB_EPStartXfer+0x370>)
 800e5e6:	400b      	ands	r3, r1
 800e5e8:	6939      	ldr	r1, [r7, #16]
 800e5ea:	0148      	lsls	r0, r1, #5
 800e5ec:	6979      	ldr	r1, [r7, #20]
 800e5ee:	4401      	add	r1, r0
 800e5f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e5f4:	4313      	orrs	r3, r2
 800e5f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	015a      	lsls	r2, r3, #5
 800e5fc:	697b      	ldr	r3, [r7, #20]
 800e5fe:	4413      	add	r3, r2
 800e600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e604:	691a      	ldr	r2, [r3, #16]
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	69db      	ldr	r3, [r3, #28]
 800e60a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e60e:	6939      	ldr	r1, [r7, #16]
 800e610:	0148      	lsls	r0, r1, #5
 800e612:	6979      	ldr	r1, [r7, #20]
 800e614:	4401      	add	r1, r0
 800e616:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e61a:	4313      	orrs	r3, r2
 800e61c:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	791b      	ldrb	r3, [r3, #4]
 800e622:	2b01      	cmp	r3, #1
 800e624:	d12a      	bne.n	800e67c <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e62c:	689b      	ldr	r3, [r3, #8]
 800e62e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e632:	2b00      	cmp	r3, #0
 800e634:	d112      	bne.n	800e65c <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e636:	693b      	ldr	r3, [r7, #16]
 800e638:	015a      	lsls	r2, r3, #5
 800e63a:	697b      	ldr	r3, [r7, #20]
 800e63c:	4413      	add	r3, r2
 800e63e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	693a      	ldr	r2, [r7, #16]
 800e646:	0151      	lsls	r1, r2, #5
 800e648:	697a      	ldr	r2, [r7, #20]
 800e64a:	440a      	add	r2, r1
 800e64c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e650:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e654:	6013      	str	r3, [r2, #0]
 800e656:	e011      	b.n	800e67c <USB_EPStartXfer+0x394>
 800e658:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	015a      	lsls	r2, r3, #5
 800e660:	697b      	ldr	r3, [r7, #20]
 800e662:	4413      	add	r3, r2
 800e664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	693a      	ldr	r2, [r7, #16]
 800e66c:	0151      	lsls	r1, r2, #5
 800e66e:	697a      	ldr	r2, [r7, #20]
 800e670:	440a      	add	r2, r1
 800e672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e67a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e67c:	693b      	ldr	r3, [r7, #16]
 800e67e:	015a      	lsls	r2, r3, #5
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	4413      	add	r3, r2
 800e684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	693a      	ldr	r2, [r7, #16]
 800e68c:	0151      	lsls	r1, r2, #5
 800e68e:	697a      	ldr	r2, [r7, #20]
 800e690:	440a      	add	r2, r1
 800e692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e696:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e69a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e69c:	2300      	movs	r3, #0
}
 800e69e:	4618      	mov	r0, r3
 800e6a0:	3718      	adds	r7, #24
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}
 800e6a6:	bf00      	nop

0800e6a8 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b085      	sub	sp, #20
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
 800e6b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	785b      	ldrb	r3, [r3, #1]
 800e6c0:	2b01      	cmp	r3, #1
 800e6c2:	f040 80ab 	bne.w	800e81c <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	699b      	ldr	r3, [r3, #24]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d132      	bne.n	800e734 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	015a      	lsls	r2, r3, #5
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	4413      	add	r3, r2
 800e6d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6da:	691b      	ldr	r3, [r3, #16]
 800e6dc:	68ba      	ldr	r2, [r7, #8]
 800e6de:	0151      	lsls	r1, r2, #5
 800e6e0:	68fa      	ldr	r2, [r7, #12]
 800e6e2:	440a      	add	r2, r1
 800e6e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e6e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e6ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e6f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	015a      	lsls	r2, r3, #5
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	4413      	add	r3, r2
 800e6fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6fe:	691b      	ldr	r3, [r3, #16]
 800e700:	68ba      	ldr	r2, [r7, #8]
 800e702:	0151      	lsls	r1, r2, #5
 800e704:	68fa      	ldr	r2, [r7, #12]
 800e706:	440a      	add	r2, r1
 800e708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e70c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e710:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	015a      	lsls	r2, r3, #5
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	4413      	add	r3, r2
 800e71a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e71e:	691b      	ldr	r3, [r3, #16]
 800e720:	68ba      	ldr	r2, [r7, #8]
 800e722:	0151      	lsls	r1, r2, #5
 800e724:	68fa      	ldr	r2, [r7, #12]
 800e726:	440a      	add	r2, r1
 800e728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e72c:	0cdb      	lsrs	r3, r3, #19
 800e72e:	04db      	lsls	r3, r3, #19
 800e730:	6113      	str	r3, [r2, #16]
 800e732:	e04e      	b.n	800e7d2 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	015a      	lsls	r2, r3, #5
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	4413      	add	r3, r2
 800e73c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e740:	691b      	ldr	r3, [r3, #16]
 800e742:	68ba      	ldr	r2, [r7, #8]
 800e744:	0151      	lsls	r1, r2, #5
 800e746:	68fa      	ldr	r2, [r7, #12]
 800e748:	440a      	add	r2, r1
 800e74a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e74e:	0cdb      	lsrs	r3, r3, #19
 800e750:	04db      	lsls	r3, r3, #19
 800e752:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	015a      	lsls	r2, r3, #5
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	4413      	add	r3, r2
 800e75c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e760:	691b      	ldr	r3, [r3, #16]
 800e762:	68ba      	ldr	r2, [r7, #8]
 800e764:	0151      	lsls	r1, r2, #5
 800e766:	68fa      	ldr	r2, [r7, #12]
 800e768:	440a      	add	r2, r1
 800e76a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e76e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e772:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e776:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	699a      	ldr	r2, [r3, #24]
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	68db      	ldr	r3, [r3, #12]
 800e780:	429a      	cmp	r2, r3
 800e782:	d903      	bls.n	800e78c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	68da      	ldr	r2, [r3, #12]
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	015a      	lsls	r2, r3, #5
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	4413      	add	r3, r2
 800e794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e798:	691b      	ldr	r3, [r3, #16]
 800e79a:	68ba      	ldr	r2, [r7, #8]
 800e79c:	0151      	lsls	r1, r2, #5
 800e79e:	68fa      	ldr	r2, [r7, #12]
 800e7a0:	440a      	add	r2, r1
 800e7a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e7aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	015a      	lsls	r2, r3, #5
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	4413      	add	r3, r2
 800e7b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7b8:	691a      	ldr	r2, [r3, #16]
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	699b      	ldr	r3, [r3, #24]
 800e7be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e7c2:	68b9      	ldr	r1, [r7, #8]
 800e7c4:	0148      	lsls	r0, r1, #5
 800e7c6:	68f9      	ldr	r1, [r7, #12]
 800e7c8:	4401      	add	r1, r0
 800e7ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e7ce:	4313      	orrs	r3, r2
 800e7d0:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e7d2:	68bb      	ldr	r3, [r7, #8]
 800e7d4:	015a      	lsls	r2, r3, #5
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	4413      	add	r3, r2
 800e7da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	68ba      	ldr	r2, [r7, #8]
 800e7e2:	0151      	lsls	r1, r2, #5
 800e7e4:	68fa      	ldr	r2, [r7, #12]
 800e7e6:	440a      	add	r2, r1
 800e7e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e7f0:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	699b      	ldr	r3, [r3, #24]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d071      	beq.n	800e8de <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	781b      	ldrb	r3, [r3, #0]
 800e806:	f003 030f 	and.w	r3, r3, #15
 800e80a:	2101      	movs	r1, #1
 800e80c:	fa01 f303 	lsl.w	r3, r1, r3
 800e810:	68f9      	ldr	r1, [r7, #12]
 800e812:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e816:	4313      	orrs	r3, r2
 800e818:	634b      	str	r3, [r1, #52]	; 0x34
 800e81a:	e060      	b.n	800e8de <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e81c:	68bb      	ldr	r3, [r7, #8]
 800e81e:	015a      	lsls	r2, r3, #5
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	4413      	add	r3, r2
 800e824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e828:	691b      	ldr	r3, [r3, #16]
 800e82a:	68ba      	ldr	r2, [r7, #8]
 800e82c:	0151      	lsls	r1, r2, #5
 800e82e:	68fa      	ldr	r2, [r7, #12]
 800e830:	440a      	add	r2, r1
 800e832:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e836:	0cdb      	lsrs	r3, r3, #19
 800e838:	04db      	lsls	r3, r3, #19
 800e83a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e83c:	68bb      	ldr	r3, [r7, #8]
 800e83e:	015a      	lsls	r2, r3, #5
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	4413      	add	r3, r2
 800e844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e848:	691b      	ldr	r3, [r3, #16]
 800e84a:	68ba      	ldr	r2, [r7, #8]
 800e84c:	0151      	lsls	r1, r2, #5
 800e84e:	68fa      	ldr	r2, [r7, #12]
 800e850:	440a      	add	r2, r1
 800e852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e856:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e85a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e85e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	699b      	ldr	r3, [r3, #24]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d003      	beq.n	800e870 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	68da      	ldr	r2, [r3, #12]
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	68da      	ldr	r2, [r3, #12]
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	015a      	lsls	r2, r3, #5
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	4413      	add	r3, r2
 800e880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e884:	691b      	ldr	r3, [r3, #16]
 800e886:	68ba      	ldr	r2, [r7, #8]
 800e888:	0151      	lsls	r1, r2, #5
 800e88a:	68fa      	ldr	r2, [r7, #12]
 800e88c:	440a      	add	r2, r1
 800e88e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e892:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e896:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	015a      	lsls	r2, r3, #5
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	4413      	add	r3, r2
 800e8a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8a4:	691a      	ldr	r2, [r3, #16]
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	69db      	ldr	r3, [r3, #28]
 800e8aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e8ae:	68b9      	ldr	r1, [r7, #8]
 800e8b0:	0148      	lsls	r0, r1, #5
 800e8b2:	68f9      	ldr	r1, [r7, #12]
 800e8b4:	4401      	add	r1, r0
 800e8b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e8ba:	4313      	orrs	r3, r2
 800e8bc:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	015a      	lsls	r2, r3, #5
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	4413      	add	r3, r2
 800e8c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	68ba      	ldr	r2, [r7, #8]
 800e8ce:	0151      	lsls	r1, r2, #5
 800e8d0:	68fa      	ldr	r2, [r7, #12]
 800e8d2:	440a      	add	r2, r1
 800e8d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e8dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e8de:	2300      	movs	r3, #0
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	3714      	adds	r7, #20
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ea:	4770      	bx	lr

0800e8ec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	b087      	sub	sp, #28
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	785b      	ldrb	r3, [r3, #1]
 800e906:	2b01      	cmp	r3, #1
 800e908:	d14a      	bne.n	800e9a0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	781b      	ldrb	r3, [r3, #0]
 800e90e:	015a      	lsls	r2, r3, #5
 800e910:	693b      	ldr	r3, [r7, #16]
 800e912:	4413      	add	r3, r2
 800e914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e91e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e922:	f040 8086 	bne.w	800ea32 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	781b      	ldrb	r3, [r3, #0]
 800e92a:	015a      	lsls	r2, r3, #5
 800e92c:	693b      	ldr	r3, [r7, #16]
 800e92e:	4413      	add	r3, r2
 800e930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	683a      	ldr	r2, [r7, #0]
 800e938:	7812      	ldrb	r2, [r2, #0]
 800e93a:	0151      	lsls	r1, r2, #5
 800e93c:	693a      	ldr	r2, [r7, #16]
 800e93e:	440a      	add	r2, r1
 800e940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e944:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e948:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e94a:	683b      	ldr	r3, [r7, #0]
 800e94c:	781b      	ldrb	r3, [r3, #0]
 800e94e:	015a      	lsls	r2, r3, #5
 800e950:	693b      	ldr	r3, [r7, #16]
 800e952:	4413      	add	r3, r2
 800e954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	683a      	ldr	r2, [r7, #0]
 800e95c:	7812      	ldrb	r2, [r2, #0]
 800e95e:	0151      	lsls	r1, r2, #5
 800e960:	693a      	ldr	r2, [r7, #16]
 800e962:	440a      	add	r2, r1
 800e964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e968:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e96c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	3301      	adds	r3, #1
 800e972:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	f242 7210 	movw	r2, #10000	; 0x2710
 800e97a:	4293      	cmp	r3, r2
 800e97c:	d902      	bls.n	800e984 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e97e:	2301      	movs	r3, #1
 800e980:	75fb      	strb	r3, [r7, #23]
          break;
 800e982:	e056      	b.n	800ea32 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	781b      	ldrb	r3, [r3, #0]
 800e988:	015a      	lsls	r2, r3, #5
 800e98a:	693b      	ldr	r3, [r7, #16]
 800e98c:	4413      	add	r3, r2
 800e98e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e998:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e99c:	d0e7      	beq.n	800e96e <USB_EPStopXfer+0x82>
 800e99e:	e048      	b.n	800ea32 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	781b      	ldrb	r3, [r3, #0]
 800e9a4:	015a      	lsls	r2, r3, #5
 800e9a6:	693b      	ldr	r3, [r7, #16]
 800e9a8:	4413      	add	r3, r2
 800e9aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e9b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e9b8:	d13b      	bne.n	800ea32 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	781b      	ldrb	r3, [r3, #0]
 800e9be:	015a      	lsls	r2, r3, #5
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	4413      	add	r3, r2
 800e9c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	683a      	ldr	r2, [r7, #0]
 800e9cc:	7812      	ldrb	r2, [r2, #0]
 800e9ce:	0151      	lsls	r1, r2, #5
 800e9d0:	693a      	ldr	r2, [r7, #16]
 800e9d2:	440a      	add	r2, r1
 800e9d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e9d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e9dc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	781b      	ldrb	r3, [r3, #0]
 800e9e2:	015a      	lsls	r2, r3, #5
 800e9e4:	693b      	ldr	r3, [r7, #16]
 800e9e6:	4413      	add	r3, r2
 800e9e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	683a      	ldr	r2, [r7, #0]
 800e9f0:	7812      	ldrb	r2, [r2, #0]
 800e9f2:	0151      	lsls	r1, r2, #5
 800e9f4:	693a      	ldr	r2, [r7, #16]
 800e9f6:	440a      	add	r2, r1
 800e9f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e9fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ea00:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	3301      	adds	r3, #1
 800ea06:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	f242 7210 	movw	r2, #10000	; 0x2710
 800ea0e:	4293      	cmp	r3, r2
 800ea10:	d902      	bls.n	800ea18 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ea12:	2301      	movs	r3, #1
 800ea14:	75fb      	strb	r3, [r7, #23]
          break;
 800ea16:	e00c      	b.n	800ea32 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	781b      	ldrb	r3, [r3, #0]
 800ea1c:	015a      	lsls	r2, r3, #5
 800ea1e:	693b      	ldr	r3, [r7, #16]
 800ea20:	4413      	add	r3, r2
 800ea22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ea2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ea30:	d0e7      	beq.n	800ea02 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ea32:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	371c      	adds	r7, #28
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3e:	4770      	bx	lr

0800ea40 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800ea40:	b480      	push	{r7}
 800ea42:	b089      	sub	sp, #36	; 0x24
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	60f8      	str	r0, [r7, #12]
 800ea48:	60b9      	str	r1, [r7, #8]
 800ea4a:	4611      	mov	r1, r2
 800ea4c:	461a      	mov	r2, r3
 800ea4e:	460b      	mov	r3, r1
 800ea50:	71fb      	strb	r3, [r7, #7]
 800ea52:	4613      	mov	r3, r2
 800ea54:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ea5a:	68bb      	ldr	r3, [r7, #8]
 800ea5c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800ea5e:	88bb      	ldrh	r3, [r7, #4]
 800ea60:	3303      	adds	r3, #3
 800ea62:	089b      	lsrs	r3, r3, #2
 800ea64:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800ea66:	2300      	movs	r3, #0
 800ea68:	61bb      	str	r3, [r7, #24]
 800ea6a:	e018      	b.n	800ea9e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ea6c:	79fb      	ldrb	r3, [r7, #7]
 800ea6e:	031a      	lsls	r2, r3, #12
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	4413      	add	r3, r2
 800ea74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea78:	461a      	mov	r2, r3
 800ea7a:	69fb      	ldr	r3, [r7, #28]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	6013      	str	r3, [r2, #0]
    pSrc++;
 800ea80:	69fb      	ldr	r3, [r7, #28]
 800ea82:	3301      	adds	r3, #1
 800ea84:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800ea86:	69fb      	ldr	r3, [r7, #28]
 800ea88:	3301      	adds	r3, #1
 800ea8a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800ea8c:	69fb      	ldr	r3, [r7, #28]
 800ea8e:	3301      	adds	r3, #1
 800ea90:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800ea92:	69fb      	ldr	r3, [r7, #28]
 800ea94:	3301      	adds	r3, #1
 800ea96:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ea98:	69bb      	ldr	r3, [r7, #24]
 800ea9a:	3301      	adds	r3, #1
 800ea9c:	61bb      	str	r3, [r7, #24]
 800ea9e:	69ba      	ldr	r2, [r7, #24]
 800eaa0:	693b      	ldr	r3, [r7, #16]
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	d3e2      	bcc.n	800ea6c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800eaa6:	2300      	movs	r3, #0
}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	3724      	adds	r7, #36	; 0x24
 800eaac:	46bd      	mov	sp, r7
 800eaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab2:	4770      	bx	lr

0800eab4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800eab4:	b480      	push	{r7}
 800eab6:	b08b      	sub	sp, #44	; 0x2c
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	60f8      	str	r0, [r7, #12]
 800eabc:	60b9      	str	r1, [r7, #8]
 800eabe:	4613      	mov	r3, r2
 800eac0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800eaca:	88fb      	ldrh	r3, [r7, #6]
 800eacc:	089b      	lsrs	r3, r3, #2
 800eace:	b29b      	uxth	r3, r3
 800ead0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ead2:	88fb      	ldrh	r3, [r7, #6]
 800ead4:	f003 0303 	and.w	r3, r3, #3
 800ead8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800eada:	2300      	movs	r3, #0
 800eadc:	623b      	str	r3, [r7, #32]
 800eade:	e014      	b.n	800eb0a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800eae0:	69bb      	ldr	r3, [r7, #24]
 800eae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eae6:	681a      	ldr	r2, [r3, #0]
 800eae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaea:	601a      	str	r2, [r3, #0]
    pDest++;
 800eaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaee:	3301      	adds	r3, #1
 800eaf0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800eaf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf4:	3301      	adds	r3, #1
 800eaf6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800eaf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eafa:	3301      	adds	r3, #1
 800eafc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800eafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb00:	3301      	adds	r3, #1
 800eb02:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800eb04:	6a3b      	ldr	r3, [r7, #32]
 800eb06:	3301      	adds	r3, #1
 800eb08:	623b      	str	r3, [r7, #32]
 800eb0a:	6a3a      	ldr	r2, [r7, #32]
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	d3e6      	bcc.n	800eae0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800eb12:	8bfb      	ldrh	r3, [r7, #30]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d01e      	beq.n	800eb56 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800eb1c:	69bb      	ldr	r3, [r7, #24]
 800eb1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb22:	461a      	mov	r2, r3
 800eb24:	f107 0310 	add.w	r3, r7, #16
 800eb28:	6812      	ldr	r2, [r2, #0]
 800eb2a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800eb2c:	693a      	ldr	r2, [r7, #16]
 800eb2e:	6a3b      	ldr	r3, [r7, #32]
 800eb30:	b2db      	uxtb	r3, r3
 800eb32:	00db      	lsls	r3, r3, #3
 800eb34:	fa22 f303 	lsr.w	r3, r2, r3
 800eb38:	b2da      	uxtb	r2, r3
 800eb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb3c:	701a      	strb	r2, [r3, #0]
      i++;
 800eb3e:	6a3b      	ldr	r3, [r7, #32]
 800eb40:	3301      	adds	r3, #1
 800eb42:	623b      	str	r3, [r7, #32]
      pDest++;
 800eb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb46:	3301      	adds	r3, #1
 800eb48:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800eb4a:	8bfb      	ldrh	r3, [r7, #30]
 800eb4c:	3b01      	subs	r3, #1
 800eb4e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800eb50:	8bfb      	ldrh	r3, [r7, #30]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d1ea      	bne.n	800eb2c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800eb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	372c      	adds	r7, #44	; 0x2c
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb62:	4770      	bx	lr

0800eb64 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800eb64:	b480      	push	{r7}
 800eb66:	b085      	sub	sp, #20
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
 800eb6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eb72:	683b      	ldr	r3, [r7, #0]
 800eb74:	781b      	ldrb	r3, [r3, #0]
 800eb76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	785b      	ldrb	r3, [r3, #1]
 800eb7c:	2b01      	cmp	r3, #1
 800eb7e:	d12c      	bne.n	800ebda <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	015a      	lsls	r2, r3, #5
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	4413      	add	r3, r2
 800eb88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	db12      	blt.n	800ebb8 <USB_EPSetStall+0x54>
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d00f      	beq.n	800ebb8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	015a      	lsls	r2, r3, #5
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	4413      	add	r3, r2
 800eba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	68ba      	ldr	r2, [r7, #8]
 800eba8:	0151      	lsls	r1, r2, #5
 800ebaa:	68fa      	ldr	r2, [r7, #12]
 800ebac:	440a      	add	r2, r1
 800ebae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ebb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ebb6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	015a      	lsls	r2, r3, #5
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	4413      	add	r3, r2
 800ebc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	68ba      	ldr	r2, [r7, #8]
 800ebc8:	0151      	lsls	r1, r2, #5
 800ebca:	68fa      	ldr	r2, [r7, #12]
 800ebcc:	440a      	add	r2, r1
 800ebce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ebd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ebd6:	6013      	str	r3, [r2, #0]
 800ebd8:	e02b      	b.n	800ec32 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	015a      	lsls	r2, r3, #5
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	4413      	add	r3, r2
 800ebe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	db12      	blt.n	800ec12 <USB_EPSetStall+0xae>
 800ebec:	68bb      	ldr	r3, [r7, #8]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d00f      	beq.n	800ec12 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ebf2:	68bb      	ldr	r3, [r7, #8]
 800ebf4:	015a      	lsls	r2, r3, #5
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	4413      	add	r3, r2
 800ebfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	68ba      	ldr	r2, [r7, #8]
 800ec02:	0151      	lsls	r1, r2, #5
 800ec04:	68fa      	ldr	r2, [r7, #12]
 800ec06:	440a      	add	r2, r1
 800ec08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ec10:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ec12:	68bb      	ldr	r3, [r7, #8]
 800ec14:	015a      	lsls	r2, r3, #5
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	4413      	add	r3, r2
 800ec1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	68ba      	ldr	r2, [r7, #8]
 800ec22:	0151      	lsls	r1, r2, #5
 800ec24:	68fa      	ldr	r2, [r7, #12]
 800ec26:	440a      	add	r2, r1
 800ec28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ec30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ec32:	2300      	movs	r3, #0
}
 800ec34:	4618      	mov	r0, r3
 800ec36:	3714      	adds	r7, #20
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3e:	4770      	bx	lr

0800ec40 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ec40:	b480      	push	{r7}
 800ec42:	b085      	sub	sp, #20
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
 800ec48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	781b      	ldrb	r3, [r3, #0]
 800ec52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	785b      	ldrb	r3, [r3, #1]
 800ec58:	2b01      	cmp	r3, #1
 800ec5a:	d128      	bne.n	800ecae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ec5c:	68bb      	ldr	r3, [r7, #8]
 800ec5e:	015a      	lsls	r2, r3, #5
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	4413      	add	r3, r2
 800ec64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	68ba      	ldr	r2, [r7, #8]
 800ec6c:	0151      	lsls	r1, r2, #5
 800ec6e:	68fa      	ldr	r2, [r7, #12]
 800ec70:	440a      	add	r2, r1
 800ec72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ec7a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	791b      	ldrb	r3, [r3, #4]
 800ec80:	2b03      	cmp	r3, #3
 800ec82:	d003      	beq.n	800ec8c <USB_EPClearStall+0x4c>
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	791b      	ldrb	r3, [r3, #4]
 800ec88:	2b02      	cmp	r3, #2
 800ec8a:	d138      	bne.n	800ecfe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	015a      	lsls	r2, r3, #5
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	4413      	add	r3, r2
 800ec94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	68ba      	ldr	r2, [r7, #8]
 800ec9c:	0151      	lsls	r1, r2, #5
 800ec9e:	68fa      	ldr	r2, [r7, #12]
 800eca0:	440a      	add	r2, r1
 800eca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ecaa:	6013      	str	r3, [r2, #0]
 800ecac:	e027      	b.n	800ecfe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ecae:	68bb      	ldr	r3, [r7, #8]
 800ecb0:	015a      	lsls	r2, r3, #5
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	4413      	add	r3, r2
 800ecb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	68ba      	ldr	r2, [r7, #8]
 800ecbe:	0151      	lsls	r1, r2, #5
 800ecc0:	68fa      	ldr	r2, [r7, #12]
 800ecc2:	440a      	add	r2, r1
 800ecc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ecc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800eccc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	791b      	ldrb	r3, [r3, #4]
 800ecd2:	2b03      	cmp	r3, #3
 800ecd4:	d003      	beq.n	800ecde <USB_EPClearStall+0x9e>
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	791b      	ldrb	r3, [r3, #4]
 800ecda:	2b02      	cmp	r3, #2
 800ecdc:	d10f      	bne.n	800ecfe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	015a      	lsls	r2, r3, #5
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	4413      	add	r3, r2
 800ece6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	68ba      	ldr	r2, [r7, #8]
 800ecee:	0151      	lsls	r1, r2, #5
 800ecf0:	68fa      	ldr	r2, [r7, #12]
 800ecf2:	440a      	add	r2, r1
 800ecf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ecf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ecfc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ecfe:	2300      	movs	r3, #0
}
 800ed00:	4618      	mov	r0, r3
 800ed02:	3714      	adds	r7, #20
 800ed04:	46bd      	mov	sp, r7
 800ed06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0a:	4770      	bx	lr

0800ed0c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ed0c:	b480      	push	{r7}
 800ed0e:	b085      	sub	sp, #20
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
 800ed14:	460b      	mov	r3, r1
 800ed16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	68fa      	ldr	r2, [r7, #12]
 800ed26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ed2a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ed2e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed36:	681a      	ldr	r2, [r3, #0]
 800ed38:	78fb      	ldrb	r3, [r7, #3]
 800ed3a:	011b      	lsls	r3, r3, #4
 800ed3c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ed40:	68f9      	ldr	r1, [r7, #12]
 800ed42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ed46:	4313      	orrs	r3, r2
 800ed48:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ed4a:	2300      	movs	r3, #0
}
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	3714      	adds	r7, #20
 800ed50:	46bd      	mov	sp, r7
 800ed52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed56:	4770      	bx	lr

0800ed58 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ed58:	b480      	push	{r7}
 800ed5a:	b085      	sub	sp, #20
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	68fa      	ldr	r2, [r7, #12]
 800ed6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ed72:	f023 0303 	bic.w	r3, r3, #3
 800ed76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed7e:	685b      	ldr	r3, [r3, #4]
 800ed80:	68fa      	ldr	r2, [r7, #12]
 800ed82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ed86:	f023 0302 	bic.w	r3, r3, #2
 800ed8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ed8c:	2300      	movs	r3, #0
}
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3714      	adds	r7, #20
 800ed92:	46bd      	mov	sp, r7
 800ed94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed98:	4770      	bx	lr

0800ed9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ed9a:	b480      	push	{r7}
 800ed9c:	b085      	sub	sp, #20
 800ed9e:	af00      	add	r7, sp, #0
 800eda0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	68fa      	ldr	r2, [r7, #12]
 800edb0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800edb4:	f023 0303 	bic.w	r3, r3, #3
 800edb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800edc0:	685b      	ldr	r3, [r3, #4]
 800edc2:	68fa      	ldr	r2, [r7, #12]
 800edc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800edc8:	f043 0302 	orr.w	r3, r3, #2
 800edcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800edce:	2300      	movs	r3, #0
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	3714      	adds	r7, #20
 800edd4:	46bd      	mov	sp, r7
 800edd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edda:	4770      	bx	lr

0800eddc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800eddc:	b480      	push	{r7}
 800edde:	b085      	sub	sp, #20
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	695b      	ldr	r3, [r3, #20]
 800ede8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	699b      	ldr	r3, [r3, #24]
 800edee:	68fa      	ldr	r2, [r7, #12]
 800edf0:	4013      	ands	r3, r2
 800edf2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800edf4:	68fb      	ldr	r3, [r7, #12]
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3714      	adds	r7, #20
 800edfa:	46bd      	mov	sp, r7
 800edfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee00:	4770      	bx	lr

0800ee02 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ee02:	b480      	push	{r7}
 800ee04:	b085      	sub	sp, #20
 800ee06:	af00      	add	r7, sp, #0
 800ee08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee14:	699b      	ldr	r3, [r3, #24]
 800ee16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee1e:	69db      	ldr	r3, [r3, #28]
 800ee20:	68ba      	ldr	r2, [r7, #8]
 800ee22:	4013      	ands	r3, r2
 800ee24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ee26:	68bb      	ldr	r3, [r7, #8]
 800ee28:	0c1b      	lsrs	r3, r3, #16
}
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	3714      	adds	r7, #20
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee34:	4770      	bx	lr

0800ee36 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ee36:	b480      	push	{r7}
 800ee38:	b085      	sub	sp, #20
 800ee3a:	af00      	add	r7, sp, #0
 800ee3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee48:	699b      	ldr	r3, [r3, #24]
 800ee4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee52:	69db      	ldr	r3, [r3, #28]
 800ee54:	68ba      	ldr	r2, [r7, #8]
 800ee56:	4013      	ands	r3, r2
 800ee58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	b29b      	uxth	r3, r3
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	3714      	adds	r7, #20
 800ee62:	46bd      	mov	sp, r7
 800ee64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee68:	4770      	bx	lr

0800ee6a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ee6a:	b480      	push	{r7}
 800ee6c:	b085      	sub	sp, #20
 800ee6e:	af00      	add	r7, sp, #0
 800ee70:	6078      	str	r0, [r7, #4]
 800ee72:	460b      	mov	r3, r1
 800ee74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ee7a:	78fb      	ldrb	r3, [r7, #3]
 800ee7c:	015a      	lsls	r2, r3, #5
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	4413      	add	r3, r2
 800ee82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee86:	689b      	ldr	r3, [r3, #8]
 800ee88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee90:	695b      	ldr	r3, [r3, #20]
 800ee92:	68ba      	ldr	r2, [r7, #8]
 800ee94:	4013      	ands	r3, r2
 800ee96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ee98:	68bb      	ldr	r3, [r7, #8]
}
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	3714      	adds	r7, #20
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea4:	4770      	bx	lr

0800eea6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800eea6:	b480      	push	{r7}
 800eea8:	b087      	sub	sp, #28
 800eeaa:	af00      	add	r7, sp, #0
 800eeac:	6078      	str	r0, [r7, #4]
 800eeae:	460b      	mov	r3, r1
 800eeb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eebc:	691b      	ldr	r3, [r3, #16]
 800eebe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eec8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800eeca:	78fb      	ldrb	r3, [r7, #3]
 800eecc:	f003 030f 	and.w	r3, r3, #15
 800eed0:	68fa      	ldr	r2, [r7, #12]
 800eed2:	fa22 f303 	lsr.w	r3, r2, r3
 800eed6:	01db      	lsls	r3, r3, #7
 800eed8:	b2db      	uxtb	r3, r3
 800eeda:	693a      	ldr	r2, [r7, #16]
 800eedc:	4313      	orrs	r3, r2
 800eede:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800eee0:	78fb      	ldrb	r3, [r7, #3]
 800eee2:	015a      	lsls	r2, r3, #5
 800eee4:	697b      	ldr	r3, [r7, #20]
 800eee6:	4413      	add	r3, r2
 800eee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eeec:	689b      	ldr	r3, [r3, #8]
 800eeee:	693a      	ldr	r2, [r7, #16]
 800eef0:	4013      	ands	r3, r2
 800eef2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800eef4:	68bb      	ldr	r3, [r7, #8]
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	371c      	adds	r7, #28
 800eefa:	46bd      	mov	sp, r7
 800eefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef00:	4770      	bx	lr

0800ef02 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ef02:	b480      	push	{r7}
 800ef04:	b083      	sub	sp, #12
 800ef06:	af00      	add	r7, sp, #0
 800ef08:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	695b      	ldr	r3, [r3, #20]
 800ef0e:	f003 0301 	and.w	r3, r3, #1
}
 800ef12:	4618      	mov	r0, r3
 800ef14:	370c      	adds	r7, #12
 800ef16:	46bd      	mov	sp, r7
 800ef18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1c:	4770      	bx	lr

0800ef1e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ef1e:	b480      	push	{r7}
 800ef20:	b085      	sub	sp, #20
 800ef22:	af00      	add	r7, sp, #0
 800ef24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	68fa      	ldr	r2, [r7, #12]
 800ef34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef38:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ef3c:	f023 0307 	bic.w	r3, r3, #7
 800ef40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef48:	685b      	ldr	r3, [r3, #4]
 800ef4a:	68fa      	ldr	r2, [r7, #12]
 800ef4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ef50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ef54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ef56:	2300      	movs	r3, #0
}
 800ef58:	4618      	mov	r0, r3
 800ef5a:	3714      	adds	r7, #20
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef62:	4770      	bx	lr

0800ef64 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800ef64:	b480      	push	{r7}
 800ef66:	b085      	sub	sp, #20
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
 800ef6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	333c      	adds	r3, #60	; 0x3c
 800ef76:	3304      	adds	r3, #4
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	4a1c      	ldr	r2, [pc, #112]	; (800eff0 <USB_EP0_OutStart+0x8c>)
 800ef80:	4293      	cmp	r3, r2
 800ef82:	d90a      	bls.n	800ef9a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ef90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ef94:	d101      	bne.n	800ef9a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800ef96:	2300      	movs	r3, #0
 800ef98:	e024      	b.n	800efe4 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efa0:	461a      	mov	r2, r3
 800efa2:	2300      	movs	r3, #0
 800efa4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efac:	691b      	ldr	r3, [r3, #16]
 800efae:	68fa      	ldr	r2, [r7, #12]
 800efb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800efb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800efb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efc0:	691b      	ldr	r3, [r3, #16]
 800efc2:	68fa      	ldr	r2, [r7, #12]
 800efc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800efc8:	f043 0318 	orr.w	r3, r3, #24
 800efcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efd4:	691b      	ldr	r3, [r3, #16]
 800efd6:	68fa      	ldr	r2, [r7, #12]
 800efd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800efdc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800efe0:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800efe2:	2300      	movs	r3, #0
}
 800efe4:	4618      	mov	r0, r3
 800efe6:	3714      	adds	r7, #20
 800efe8:	46bd      	mov	sp, r7
 800efea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efee:	4770      	bx	lr
 800eff0:	4f54300a 	.word	0x4f54300a

0800eff4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800eff4:	b480      	push	{r7}
 800eff6:	b085      	sub	sp, #20
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800effc:	2300      	movs	r3, #0
 800effe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	3301      	adds	r3, #1
 800f004:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	4a13      	ldr	r2, [pc, #76]	; (800f058 <USB_CoreReset+0x64>)
 800f00a:	4293      	cmp	r3, r2
 800f00c:	d901      	bls.n	800f012 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f00e:	2303      	movs	r3, #3
 800f010:	e01b      	b.n	800f04a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	691b      	ldr	r3, [r3, #16]
 800f016:	2b00      	cmp	r3, #0
 800f018:	daf2      	bge.n	800f000 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f01a:	2300      	movs	r3, #0
 800f01c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	691b      	ldr	r3, [r3, #16]
 800f022:	f043 0201 	orr.w	r2, r3, #1
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	3301      	adds	r3, #1
 800f02e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	4a09      	ldr	r2, [pc, #36]	; (800f058 <USB_CoreReset+0x64>)
 800f034:	4293      	cmp	r3, r2
 800f036:	d901      	bls.n	800f03c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f038:	2303      	movs	r3, #3
 800f03a:	e006      	b.n	800f04a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	691b      	ldr	r3, [r3, #16]
 800f040:	f003 0301 	and.w	r3, r3, #1
 800f044:	2b01      	cmp	r3, #1
 800f046:	d0f0      	beq.n	800f02a <USB_CoreReset+0x36>

  return HAL_OK;
 800f048:	2300      	movs	r3, #0
}
 800f04a:	4618      	mov	r0, r3
 800f04c:	3714      	adds	r7, #20
 800f04e:	46bd      	mov	sp, r7
 800f050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f054:	4770      	bx	lr
 800f056:	bf00      	nop
 800f058:	00030d40 	.word	0x00030d40

0800f05c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f060:	4904      	ldr	r1, [pc, #16]	; (800f074 <MX_FATFS_Init+0x18>)
 800f062:	4805      	ldr	r0, [pc, #20]	; (800f078 <MX_FATFS_Init+0x1c>)
 800f064:	f004 fd46 	bl	8013af4 <FATFS_LinkDriver>
 800f068:	4603      	mov	r3, r0
 800f06a:	461a      	mov	r2, r3
 800f06c:	4b03      	ldr	r3, [pc, #12]	; (800f07c <MX_FATFS_Init+0x20>)
 800f06e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f070:	bf00      	nop
 800f072:	bd80      	pop	{r7, pc}
 800f074:	20000ec4 	.word	0x20000ec4
 800f078:	08017948 	.word	0x08017948
 800f07c:	20000ec0 	.word	0x20000ec0

0800f080 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800f080:	b480      	push	{r7}
 800f082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800f084:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800f086:	4618      	mov	r0, r3
 800f088:	46bd      	mov	sp, r7
 800f08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08e:	4770      	bx	lr

0800f090 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b082      	sub	sp, #8
 800f094:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f096:	2300      	movs	r3, #0
 800f098:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f09a:	f000 f879 	bl	800f190 <BSP_SD_IsDetected>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	2b01      	cmp	r3, #1
 800f0a2:	d001      	beq.n	800f0a8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800f0a4:	2302      	movs	r3, #2
 800f0a6:	e012      	b.n	800f0ce <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800f0a8:	480b      	ldr	r0, [pc, #44]	; (800f0d8 <BSP_SD_Init+0x48>)
 800f0aa:	f7fa f8d1 	bl	8009250 <HAL_SD_Init>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800f0b2:	79fb      	ldrb	r3, [r7, #7]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d109      	bne.n	800f0cc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800f0b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800f0bc:	4806      	ldr	r0, [pc, #24]	; (800f0d8 <BSP_SD_Init+0x48>)
 800f0be:	f7fa ff9d 	bl	8009ffc <HAL_SD_ConfigWideBusOperation>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d001      	beq.n	800f0cc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800f0c8:	2301      	movs	r3, #1
 800f0ca:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800f0cc:	79fb      	ldrb	r3, [r7, #7]
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3708      	adds	r7, #8
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}
 800f0d6:	bf00      	nop
 800f0d8:	2000061c 	.word	0x2000061c

0800f0dc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b088      	sub	sp, #32
 800f0e0:	af02      	add	r7, sp, #8
 800f0e2:	60f8      	str	r0, [r7, #12]
 800f0e4:	60b9      	str	r1, [r7, #8]
 800f0e6:	607a      	str	r2, [r7, #4]
 800f0e8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	9300      	str	r3, [sp, #0]
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	68ba      	ldr	r2, [r7, #8]
 800f0f6:	68f9      	ldr	r1, [r7, #12]
 800f0f8:	4806      	ldr	r0, [pc, #24]	; (800f114 <BSP_SD_ReadBlocks+0x38>)
 800f0fa:	f7fa f9d1 	bl	80094a0 <HAL_SD_ReadBlocks>
 800f0fe:	4603      	mov	r3, r0
 800f100:	2b00      	cmp	r3, #0
 800f102:	d001      	beq.n	800f108 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f104:	2301      	movs	r3, #1
 800f106:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f108:	7dfb      	ldrb	r3, [r7, #23]
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	3718      	adds	r7, #24
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}
 800f112:	bf00      	nop
 800f114:	2000061c 	.word	0x2000061c

0800f118 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b088      	sub	sp, #32
 800f11c:	af02      	add	r7, sp, #8
 800f11e:	60f8      	str	r0, [r7, #12]
 800f120:	60b9      	str	r1, [r7, #8]
 800f122:	607a      	str	r2, [r7, #4]
 800f124:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800f126:	2300      	movs	r3, #0
 800f128:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	9300      	str	r3, [sp, #0]
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	68ba      	ldr	r2, [r7, #8]
 800f132:	68f9      	ldr	r1, [r7, #12]
 800f134:	4806      	ldr	r0, [pc, #24]	; (800f150 <BSP_SD_WriteBlocks+0x38>)
 800f136:	f7fa fb45 	bl	80097c4 <HAL_SD_WriteBlocks>
 800f13a:	4603      	mov	r3, r0
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d001      	beq.n	800f144 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f140:	2301      	movs	r3, #1
 800f142:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f144:	7dfb      	ldrb	r3, [r7, #23]
}
 800f146:	4618      	mov	r0, r3
 800f148:	3718      	adds	r7, #24
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}
 800f14e:	bf00      	nop
 800f150:	2000061c 	.word	0x2000061c

0800f154 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f158:	4805      	ldr	r0, [pc, #20]	; (800f170 <BSP_SD_GetCardState+0x1c>)
 800f15a:	f7fb f863 	bl	800a224 <HAL_SD_GetCardState>
 800f15e:	4603      	mov	r3, r0
 800f160:	2b04      	cmp	r3, #4
 800f162:	bf14      	ite	ne
 800f164:	2301      	movne	r3, #1
 800f166:	2300      	moveq	r3, #0
 800f168:	b2db      	uxtb	r3, r3
}
 800f16a:	4618      	mov	r0, r3
 800f16c:	bd80      	pop	{r7, pc}
 800f16e:	bf00      	nop
 800f170:	2000061c 	.word	0x2000061c

0800f174 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b082      	sub	sp, #8
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800f17c:	6879      	ldr	r1, [r7, #4]
 800f17e:	4803      	ldr	r0, [pc, #12]	; (800f18c <BSP_SD_GetCardInfo+0x18>)
 800f180:	f7fa ff10 	bl	8009fa4 <HAL_SD_GetCardInfo>
}
 800f184:	bf00      	nop
 800f186:	3708      	adds	r7, #8
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}
 800f18c:	2000061c 	.word	0x2000061c

0800f190 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b082      	sub	sp, #8
 800f194:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f196:	2301      	movs	r3, #1
 800f198:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800f19a:	f000 f80b 	bl	800f1b4 <BSP_PlatformIsDetected>
 800f19e:	4603      	mov	r3, r0
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d101      	bne.n	800f1a8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f1a8:	79fb      	ldrb	r3, [r7, #7]
 800f1aa:	b2db      	uxtb	r3, r3
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	3708      	adds	r7, #8
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}

0800f1b4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b082      	sub	sp, #8
 800f1b8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f1ba:	2301      	movs	r3, #1
 800f1bc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f1be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f1c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f1c6:	f7f5 fa79 	bl	80046bc <HAL_GPIO_ReadPin>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d001      	beq.n	800f1d4 <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800f1d4:	79fb      	ldrb	r3, [r7, #7]
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	3708      	adds	r7, #8
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}
	...

0800f1e0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b082      	sub	sp, #8
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f1ea:	4b0b      	ldr	r3, [pc, #44]	; (800f218 <SD_CheckStatus+0x38>)
 800f1ec:	2201      	movs	r2, #1
 800f1ee:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800f1f0:	f7ff ffb0 	bl	800f154 <BSP_SD_GetCardState>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d107      	bne.n	800f20a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f1fa:	4b07      	ldr	r3, [pc, #28]	; (800f218 <SD_CheckStatus+0x38>)
 800f1fc:	781b      	ldrb	r3, [r3, #0]
 800f1fe:	b2db      	uxtb	r3, r3
 800f200:	f023 0301 	bic.w	r3, r3, #1
 800f204:	b2da      	uxtb	r2, r3
 800f206:	4b04      	ldr	r3, [pc, #16]	; (800f218 <SD_CheckStatus+0x38>)
 800f208:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f20a:	4b03      	ldr	r3, [pc, #12]	; (800f218 <SD_CheckStatus+0x38>)
 800f20c:	781b      	ldrb	r3, [r3, #0]
 800f20e:	b2db      	uxtb	r3, r3
}
 800f210:	4618      	mov	r0, r3
 800f212:	3708      	adds	r7, #8
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}
 800f218:	2000000d 	.word	0x2000000d

0800f21c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b082      	sub	sp, #8
 800f220:	af00      	add	r7, sp, #0
 800f222:	4603      	mov	r3, r0
 800f224:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800f226:	4b0b      	ldr	r3, [pc, #44]	; (800f254 <SD_initialize+0x38>)
 800f228:	2201      	movs	r2, #1
 800f22a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800f22c:	f7ff ff30 	bl	800f090 <BSP_SD_Init>
 800f230:	4603      	mov	r3, r0
 800f232:	2b00      	cmp	r3, #0
 800f234:	d107      	bne.n	800f246 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800f236:	79fb      	ldrb	r3, [r7, #7]
 800f238:	4618      	mov	r0, r3
 800f23a:	f7ff ffd1 	bl	800f1e0 <SD_CheckStatus>
 800f23e:	4603      	mov	r3, r0
 800f240:	461a      	mov	r2, r3
 800f242:	4b04      	ldr	r3, [pc, #16]	; (800f254 <SD_initialize+0x38>)
 800f244:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800f246:	4b03      	ldr	r3, [pc, #12]	; (800f254 <SD_initialize+0x38>)
 800f248:	781b      	ldrb	r3, [r3, #0]
 800f24a:	b2db      	uxtb	r3, r3
}
 800f24c:	4618      	mov	r0, r3
 800f24e:	3708      	adds	r7, #8
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}
 800f254:	2000000d 	.word	0x2000000d

0800f258 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b082      	sub	sp, #8
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	4603      	mov	r3, r0
 800f260:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f262:	79fb      	ldrb	r3, [r7, #7]
 800f264:	4618      	mov	r0, r3
 800f266:	f7ff ffbb 	bl	800f1e0 <SD_CheckStatus>
 800f26a:	4603      	mov	r3, r0
}
 800f26c:	4618      	mov	r0, r3
 800f26e:	3708      	adds	r7, #8
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}

0800f274 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b086      	sub	sp, #24
 800f278:	af00      	add	r7, sp, #0
 800f27a:	60b9      	str	r1, [r7, #8]
 800f27c:	607a      	str	r2, [r7, #4]
 800f27e:	603b      	str	r3, [r7, #0]
 800f280:	4603      	mov	r3, r0
 800f282:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f284:	2301      	movs	r3, #1
 800f286:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800f288:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f28c:	683a      	ldr	r2, [r7, #0]
 800f28e:	6879      	ldr	r1, [r7, #4]
 800f290:	68b8      	ldr	r0, [r7, #8]
 800f292:	f7ff ff23 	bl	800f0dc <BSP_SD_ReadBlocks>
 800f296:	4603      	mov	r3, r0
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d107      	bne.n	800f2ac <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800f29c:	bf00      	nop
 800f29e:	f7ff ff59 	bl	800f154 <BSP_SD_GetCardState>
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d1fa      	bne.n	800f29e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f2ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	3718      	adds	r7, #24
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}

0800f2b6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f2b6:	b580      	push	{r7, lr}
 800f2b8:	b086      	sub	sp, #24
 800f2ba:	af00      	add	r7, sp, #0
 800f2bc:	60b9      	str	r1, [r7, #8]
 800f2be:	607a      	str	r2, [r7, #4]
 800f2c0:	603b      	str	r3, [r7, #0]
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800f2ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f2ce:	683a      	ldr	r2, [r7, #0]
 800f2d0:	6879      	ldr	r1, [r7, #4]
 800f2d2:	68b8      	ldr	r0, [r7, #8]
 800f2d4:	f7ff ff20 	bl	800f118 <BSP_SD_WriteBlocks>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d107      	bne.n	800f2ee <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800f2de:	bf00      	nop
 800f2e0:	f7ff ff38 	bl	800f154 <BSP_SD_GetCardState>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d1fa      	bne.n	800f2e0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f2ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	3718      	adds	r7, #24
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}

0800f2f8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b08c      	sub	sp, #48	; 0x30
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	4603      	mov	r3, r0
 800f300:	603a      	str	r2, [r7, #0]
 800f302:	71fb      	strb	r3, [r7, #7]
 800f304:	460b      	mov	r3, r1
 800f306:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f308:	2301      	movs	r3, #1
 800f30a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f30e:	4b25      	ldr	r3, [pc, #148]	; (800f3a4 <SD_ioctl+0xac>)
 800f310:	781b      	ldrb	r3, [r3, #0]
 800f312:	b2db      	uxtb	r3, r3
 800f314:	f003 0301 	and.w	r3, r3, #1
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d001      	beq.n	800f320 <SD_ioctl+0x28>
 800f31c:	2303      	movs	r3, #3
 800f31e:	e03c      	b.n	800f39a <SD_ioctl+0xa2>

  switch (cmd)
 800f320:	79bb      	ldrb	r3, [r7, #6]
 800f322:	2b03      	cmp	r3, #3
 800f324:	d834      	bhi.n	800f390 <SD_ioctl+0x98>
 800f326:	a201      	add	r2, pc, #4	; (adr r2, 800f32c <SD_ioctl+0x34>)
 800f328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f32c:	0800f33d 	.word	0x0800f33d
 800f330:	0800f345 	.word	0x0800f345
 800f334:	0800f35d 	.word	0x0800f35d
 800f338:	0800f377 	.word	0x0800f377
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f33c:	2300      	movs	r3, #0
 800f33e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f342:	e028      	b.n	800f396 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f344:	f107 0308 	add.w	r3, r7, #8
 800f348:	4618      	mov	r0, r3
 800f34a:	f7ff ff13 	bl	800f174 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f34e:	6a3a      	ldr	r2, [r7, #32]
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f354:	2300      	movs	r3, #0
 800f356:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f35a:	e01c      	b.n	800f396 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f35c:	f107 0308 	add.w	r3, r7, #8
 800f360:	4618      	mov	r0, r3
 800f362:	f7ff ff07 	bl	800f174 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f368:	b29a      	uxth	r2, r3
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f36e:	2300      	movs	r3, #0
 800f370:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f374:	e00f      	b.n	800f396 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f376:	f107 0308 	add.w	r3, r7, #8
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7ff fefa 	bl	800f174 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f382:	0a5a      	lsrs	r2, r3, #9
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f388:	2300      	movs	r3, #0
 800f38a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f38e:	e002      	b.n	800f396 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f390:	2304      	movs	r3, #4
 800f392:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800f396:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f39a:	4618      	mov	r0, r3
 800f39c:	3730      	adds	r7, #48	; 0x30
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}
 800f3a2:	bf00      	nop
 800f3a4:	2000000d 	.word	0x2000000d

0800f3a8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b084      	sub	sp, #16
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
 800f3b0:	460b      	mov	r3, r1
 800f3b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f3b4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800f3b8:	f005 f978 	bl	80146ac <USBD_static_malloc>
 800f3bc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d105      	bne.n	800f3d0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800f3cc:	2302      	movs	r3, #2
 800f3ce:	e066      	b.n	800f49e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	68fa      	ldr	r2, [r7, #12]
 800f3d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	7c1b      	ldrb	r3, [r3, #16]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d119      	bne.n	800f414 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f3e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f3e4:	2202      	movs	r2, #2
 800f3e6:	2181      	movs	r1, #129	; 0x81
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f004 ff99 	bl	8014320 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2201      	movs	r2, #1
 800f3f2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f3f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f3f8:	2202      	movs	r2, #2
 800f3fa:	2101      	movs	r1, #1
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f004 ff8f 	bl	8014320 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	2201      	movs	r2, #1
 800f406:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	2210      	movs	r2, #16
 800f40e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800f412:	e016      	b.n	800f442 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f414:	2340      	movs	r3, #64	; 0x40
 800f416:	2202      	movs	r2, #2
 800f418:	2181      	movs	r1, #129	; 0x81
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f004 ff80 	bl	8014320 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2201      	movs	r2, #1
 800f424:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f426:	2340      	movs	r3, #64	; 0x40
 800f428:	2202      	movs	r2, #2
 800f42a:	2101      	movs	r1, #1
 800f42c:	6878      	ldr	r0, [r7, #4]
 800f42e:	f004 ff77 	bl	8014320 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2201      	movs	r2, #1
 800f436:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2210      	movs	r2, #16
 800f43e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f442:	2308      	movs	r3, #8
 800f444:	2203      	movs	r2, #3
 800f446:	2182      	movs	r1, #130	; 0x82
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f004 ff69 	bl	8014320 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2201      	movs	r2, #1
 800f452:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	2200      	movs	r2, #0
 800f464:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	2200      	movs	r2, #0
 800f46c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	7c1b      	ldrb	r3, [r3, #16]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d109      	bne.n	800f48c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f47e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f482:	2101      	movs	r1, #1
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f005 f8c5 	bl	8014614 <USBD_LL_PrepareReceive>
 800f48a:	e007      	b.n	800f49c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f492:	2340      	movs	r3, #64	; 0x40
 800f494:	2101      	movs	r1, #1
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f005 f8bc 	bl	8014614 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f49c:	2300      	movs	r3, #0
}
 800f49e:	4618      	mov	r0, r3
 800f4a0:	3710      	adds	r7, #16
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}

0800f4a6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f4a6:	b580      	push	{r7, lr}
 800f4a8:	b082      	sub	sp, #8
 800f4aa:	af00      	add	r7, sp, #0
 800f4ac:	6078      	str	r0, [r7, #4]
 800f4ae:	460b      	mov	r3, r1
 800f4b0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f4b2:	2181      	movs	r1, #129	; 0x81
 800f4b4:	6878      	ldr	r0, [r7, #4]
 800f4b6:	f004 ff71 	bl	801439c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2200      	movs	r2, #0
 800f4be:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f4c0:	2101      	movs	r1, #1
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f004 ff6a 	bl	801439c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f4d0:	2182      	movs	r1, #130	; 0x82
 800f4d2:	6878      	ldr	r0, [r7, #4]
 800f4d4:	f004 ff62 	bl	801439c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2200      	movs	r2, #0
 800f4dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d00e      	beq.n	800f510 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f4f8:	685b      	ldr	r3, [r3, #4]
 800f4fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f502:	4618      	mov	r0, r3
 800f504:	f005 f8e0 	bl	80146c8 <USBD_static_free>
    pdev->pClassData = NULL;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2200      	movs	r2, #0
 800f50c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f510:	2300      	movs	r3, #0
}
 800f512:	4618      	mov	r0, r3
 800f514:	3708      	adds	r7, #8
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
	...

0800f51c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b086      	sub	sp, #24
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
 800f524:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f52c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f52e:	2300      	movs	r3, #0
 800f530:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f532:	2300      	movs	r3, #0
 800f534:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f536:	2300      	movs	r3, #0
 800f538:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f53a:	693b      	ldr	r3, [r7, #16]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d101      	bne.n	800f544 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800f540:	2303      	movs	r3, #3
 800f542:	e0af      	b.n	800f6a4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	781b      	ldrb	r3, [r3, #0]
 800f548:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d03f      	beq.n	800f5d0 <USBD_CDC_Setup+0xb4>
 800f550:	2b20      	cmp	r3, #32
 800f552:	f040 809f 	bne.w	800f694 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	88db      	ldrh	r3, [r3, #6]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d02e      	beq.n	800f5bc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	781b      	ldrb	r3, [r3, #0]
 800f562:	b25b      	sxtb	r3, r3
 800f564:	2b00      	cmp	r3, #0
 800f566:	da16      	bge.n	800f596 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f56e:	689b      	ldr	r3, [r3, #8]
 800f570:	683a      	ldr	r2, [r7, #0]
 800f572:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800f574:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f576:	683a      	ldr	r2, [r7, #0]
 800f578:	88d2      	ldrh	r2, [r2, #6]
 800f57a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	88db      	ldrh	r3, [r3, #6]
 800f580:	2b07      	cmp	r3, #7
 800f582:	bf28      	it	cs
 800f584:	2307      	movcs	r3, #7
 800f586:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f588:	693b      	ldr	r3, [r7, #16]
 800f58a:	89fa      	ldrh	r2, [r7, #14]
 800f58c:	4619      	mov	r1, r3
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	f001 fb19 	bl	8010bc6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800f594:	e085      	b.n	800f6a2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	785a      	ldrb	r2, [r3, #1]
 800f59a:	693b      	ldr	r3, [r7, #16]
 800f59c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	88db      	ldrh	r3, [r3, #6]
 800f5a4:	b2da      	uxtb	r2, r3
 800f5a6:	693b      	ldr	r3, [r7, #16]
 800f5a8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800f5ac:	6939      	ldr	r1, [r7, #16]
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	88db      	ldrh	r3, [r3, #6]
 800f5b2:	461a      	mov	r2, r3
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f001 fb32 	bl	8010c1e <USBD_CtlPrepareRx>
      break;
 800f5ba:	e072      	b.n	800f6a2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f5c2:	689b      	ldr	r3, [r3, #8]
 800f5c4:	683a      	ldr	r2, [r7, #0]
 800f5c6:	7850      	ldrb	r0, [r2, #1]
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	6839      	ldr	r1, [r7, #0]
 800f5cc:	4798      	blx	r3
      break;
 800f5ce:	e068      	b.n	800f6a2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	785b      	ldrb	r3, [r3, #1]
 800f5d4:	2b0b      	cmp	r3, #11
 800f5d6:	d852      	bhi.n	800f67e <USBD_CDC_Setup+0x162>
 800f5d8:	a201      	add	r2, pc, #4	; (adr r2, 800f5e0 <USBD_CDC_Setup+0xc4>)
 800f5da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5de:	bf00      	nop
 800f5e0:	0800f611 	.word	0x0800f611
 800f5e4:	0800f68d 	.word	0x0800f68d
 800f5e8:	0800f67f 	.word	0x0800f67f
 800f5ec:	0800f67f 	.word	0x0800f67f
 800f5f0:	0800f67f 	.word	0x0800f67f
 800f5f4:	0800f67f 	.word	0x0800f67f
 800f5f8:	0800f67f 	.word	0x0800f67f
 800f5fc:	0800f67f 	.word	0x0800f67f
 800f600:	0800f67f 	.word	0x0800f67f
 800f604:	0800f67f 	.word	0x0800f67f
 800f608:	0800f63b 	.word	0x0800f63b
 800f60c:	0800f665 	.word	0x0800f665
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f616:	b2db      	uxtb	r3, r3
 800f618:	2b03      	cmp	r3, #3
 800f61a:	d107      	bne.n	800f62c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f61c:	f107 030a 	add.w	r3, r7, #10
 800f620:	2202      	movs	r2, #2
 800f622:	4619      	mov	r1, r3
 800f624:	6878      	ldr	r0, [r7, #4]
 800f626:	f001 face 	bl	8010bc6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f62a:	e032      	b.n	800f692 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f62c:	6839      	ldr	r1, [r7, #0]
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	f001 fa58 	bl	8010ae4 <USBD_CtlError>
            ret = USBD_FAIL;
 800f634:	2303      	movs	r3, #3
 800f636:	75fb      	strb	r3, [r7, #23]
          break;
 800f638:	e02b      	b.n	800f692 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f640:	b2db      	uxtb	r3, r3
 800f642:	2b03      	cmp	r3, #3
 800f644:	d107      	bne.n	800f656 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f646:	f107 030d 	add.w	r3, r7, #13
 800f64a:	2201      	movs	r2, #1
 800f64c:	4619      	mov	r1, r3
 800f64e:	6878      	ldr	r0, [r7, #4]
 800f650:	f001 fab9 	bl	8010bc6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f654:	e01d      	b.n	800f692 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f656:	6839      	ldr	r1, [r7, #0]
 800f658:	6878      	ldr	r0, [r7, #4]
 800f65a:	f001 fa43 	bl	8010ae4 <USBD_CtlError>
            ret = USBD_FAIL;
 800f65e:	2303      	movs	r3, #3
 800f660:	75fb      	strb	r3, [r7, #23]
          break;
 800f662:	e016      	b.n	800f692 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f66a:	b2db      	uxtb	r3, r3
 800f66c:	2b03      	cmp	r3, #3
 800f66e:	d00f      	beq.n	800f690 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800f670:	6839      	ldr	r1, [r7, #0]
 800f672:	6878      	ldr	r0, [r7, #4]
 800f674:	f001 fa36 	bl	8010ae4 <USBD_CtlError>
            ret = USBD_FAIL;
 800f678:	2303      	movs	r3, #3
 800f67a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f67c:	e008      	b.n	800f690 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f67e:	6839      	ldr	r1, [r7, #0]
 800f680:	6878      	ldr	r0, [r7, #4]
 800f682:	f001 fa2f 	bl	8010ae4 <USBD_CtlError>
          ret = USBD_FAIL;
 800f686:	2303      	movs	r3, #3
 800f688:	75fb      	strb	r3, [r7, #23]
          break;
 800f68a:	e002      	b.n	800f692 <USBD_CDC_Setup+0x176>
          break;
 800f68c:	bf00      	nop
 800f68e:	e008      	b.n	800f6a2 <USBD_CDC_Setup+0x186>
          break;
 800f690:	bf00      	nop
      }
      break;
 800f692:	e006      	b.n	800f6a2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800f694:	6839      	ldr	r1, [r7, #0]
 800f696:	6878      	ldr	r0, [r7, #4]
 800f698:	f001 fa24 	bl	8010ae4 <USBD_CtlError>
      ret = USBD_FAIL;
 800f69c:	2303      	movs	r3, #3
 800f69e:	75fb      	strb	r3, [r7, #23]
      break;
 800f6a0:	bf00      	nop
  }

  return (uint8_t)ret;
 800f6a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3718      	adds	r7, #24
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}

0800f6ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b084      	sub	sp, #16
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	460b      	mov	r3, r1
 800f6b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f6be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d101      	bne.n	800f6ce <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f6ca:	2303      	movs	r3, #3
 800f6cc:	e04f      	b.n	800f76e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f6d4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f6d6:	78fa      	ldrb	r2, [r7, #3]
 800f6d8:	6879      	ldr	r1, [r7, #4]
 800f6da:	4613      	mov	r3, r2
 800f6dc:	009b      	lsls	r3, r3, #2
 800f6de:	4413      	add	r3, r2
 800f6e0:	009b      	lsls	r3, r3, #2
 800f6e2:	440b      	add	r3, r1
 800f6e4:	3318      	adds	r3, #24
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d029      	beq.n	800f740 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f6ec:	78fa      	ldrb	r2, [r7, #3]
 800f6ee:	6879      	ldr	r1, [r7, #4]
 800f6f0:	4613      	mov	r3, r2
 800f6f2:	009b      	lsls	r3, r3, #2
 800f6f4:	4413      	add	r3, r2
 800f6f6:	009b      	lsls	r3, r3, #2
 800f6f8:	440b      	add	r3, r1
 800f6fa:	3318      	adds	r3, #24
 800f6fc:	681a      	ldr	r2, [r3, #0]
 800f6fe:	78f9      	ldrb	r1, [r7, #3]
 800f700:	68f8      	ldr	r0, [r7, #12]
 800f702:	460b      	mov	r3, r1
 800f704:	00db      	lsls	r3, r3, #3
 800f706:	440b      	add	r3, r1
 800f708:	009b      	lsls	r3, r3, #2
 800f70a:	4403      	add	r3, r0
 800f70c:	3348      	adds	r3, #72	; 0x48
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	fbb2 f1f3 	udiv	r1, r2, r3
 800f714:	fb01 f303 	mul.w	r3, r1, r3
 800f718:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d110      	bne.n	800f740 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800f71e:	78fa      	ldrb	r2, [r7, #3]
 800f720:	6879      	ldr	r1, [r7, #4]
 800f722:	4613      	mov	r3, r2
 800f724:	009b      	lsls	r3, r3, #2
 800f726:	4413      	add	r3, r2
 800f728:	009b      	lsls	r3, r3, #2
 800f72a:	440b      	add	r3, r1
 800f72c:	3318      	adds	r3, #24
 800f72e:	2200      	movs	r2, #0
 800f730:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f732:	78f9      	ldrb	r1, [r7, #3]
 800f734:	2300      	movs	r3, #0
 800f736:	2200      	movs	r2, #0
 800f738:	6878      	ldr	r0, [r7, #4]
 800f73a:	f004 ff33 	bl	80145a4 <USBD_LL_Transmit>
 800f73e:	e015      	b.n	800f76c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800f740:	68bb      	ldr	r3, [r7, #8]
 800f742:	2200      	movs	r2, #0
 800f744:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f74e:	691b      	ldr	r3, [r3, #16]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d00b      	beq.n	800f76c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f75a:	691b      	ldr	r3, [r3, #16]
 800f75c:	68ba      	ldr	r2, [r7, #8]
 800f75e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800f762:	68ba      	ldr	r2, [r7, #8]
 800f764:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800f768:	78fa      	ldrb	r2, [r7, #3]
 800f76a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f76c:	2300      	movs	r3, #0
}
 800f76e:	4618      	mov	r0, r3
 800f770:	3710      	adds	r7, #16
 800f772:	46bd      	mov	sp, r7
 800f774:	bd80      	pop	{r7, pc}

0800f776 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f776:	b580      	push	{r7, lr}
 800f778:	b084      	sub	sp, #16
 800f77a:	af00      	add	r7, sp, #0
 800f77c:	6078      	str	r0, [r7, #4]
 800f77e:	460b      	mov	r3, r1
 800f780:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f788:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f790:	2b00      	cmp	r3, #0
 800f792:	d101      	bne.n	800f798 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f794:	2303      	movs	r3, #3
 800f796:	e015      	b.n	800f7c4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f798:	78fb      	ldrb	r3, [r7, #3]
 800f79a:	4619      	mov	r1, r3
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	f004 ff71 	bl	8014684 <USBD_LL_GetRxDataSize>
 800f7a2:	4602      	mov	r2, r0
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f7b0:	68db      	ldr	r3, [r3, #12]
 800f7b2:	68fa      	ldr	r2, [r7, #12]
 800f7b4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f7b8:	68fa      	ldr	r2, [r7, #12]
 800f7ba:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f7be:	4611      	mov	r1, r2
 800f7c0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f7c2:	2300      	movs	r3, #0
}
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	3710      	adds	r7, #16
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	bd80      	pop	{r7, pc}

0800f7cc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b084      	sub	sp, #16
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f7da:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d101      	bne.n	800f7e6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800f7e2:	2303      	movs	r3, #3
 800f7e4:	e01b      	b.n	800f81e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d015      	beq.n	800f81c <USBD_CDC_EP0_RxReady+0x50>
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f7f6:	2bff      	cmp	r3, #255	; 0xff
 800f7f8:	d010      	beq.n	800f81c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f800:	689b      	ldr	r3, [r3, #8]
 800f802:	68fa      	ldr	r2, [r7, #12]
 800f804:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800f808:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f80a:	68fa      	ldr	r2, [r7, #12]
 800f80c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f810:	b292      	uxth	r2, r2
 800f812:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	22ff      	movs	r2, #255	; 0xff
 800f818:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800f81c:	2300      	movs	r3, #0
}
 800f81e:	4618      	mov	r0, r3
 800f820:	3710      	adds	r7, #16
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}
	...

0800f828 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f828:	b480      	push	{r7}
 800f82a:	b083      	sub	sp, #12
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2243      	movs	r2, #67	; 0x43
 800f834:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800f836:	4b03      	ldr	r3, [pc, #12]	; (800f844 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f838:	4618      	mov	r0, r3
 800f83a:	370c      	adds	r7, #12
 800f83c:	46bd      	mov	sp, r7
 800f83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f842:	4770      	bx	lr
 800f844:	20000098 	.word	0x20000098

0800f848 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f848:	b480      	push	{r7}
 800f84a:	b083      	sub	sp, #12
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2243      	movs	r2, #67	; 0x43
 800f854:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800f856:	4b03      	ldr	r3, [pc, #12]	; (800f864 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f858:	4618      	mov	r0, r3
 800f85a:	370c      	adds	r7, #12
 800f85c:	46bd      	mov	sp, r7
 800f85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f862:	4770      	bx	lr
 800f864:	20000054 	.word	0x20000054

0800f868 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f868:	b480      	push	{r7}
 800f86a:	b083      	sub	sp, #12
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2243      	movs	r2, #67	; 0x43
 800f874:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800f876:	4b03      	ldr	r3, [pc, #12]	; (800f884 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f878:	4618      	mov	r0, r3
 800f87a:	370c      	adds	r7, #12
 800f87c:	46bd      	mov	sp, r7
 800f87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f882:	4770      	bx	lr
 800f884:	200000dc 	.word	0x200000dc

0800f888 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f888:	b480      	push	{r7}
 800f88a:	b083      	sub	sp, #12
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	220a      	movs	r2, #10
 800f894:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f896:	4b03      	ldr	r3, [pc, #12]	; (800f8a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f898:	4618      	mov	r0, r3
 800f89a:	370c      	adds	r7, #12
 800f89c:	46bd      	mov	sp, r7
 800f89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a2:	4770      	bx	lr
 800f8a4:	20000010 	.word	0x20000010

0800f8a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f8a8:	b480      	push	{r7}
 800f8aa:	b083      	sub	sp, #12
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
 800f8b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f8b2:	683b      	ldr	r3, [r7, #0]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d101      	bne.n	800f8bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f8b8:	2303      	movs	r3, #3
 800f8ba:	e004      	b.n	800f8c6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	683a      	ldr	r2, [r7, #0]
 800f8c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800f8c4:	2300      	movs	r3, #0
}
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	370c      	adds	r7, #12
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d0:	4770      	bx	lr

0800f8d2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f8d2:	b480      	push	{r7}
 800f8d4:	b087      	sub	sp, #28
 800f8d6:	af00      	add	r7, sp, #0
 800f8d8:	60f8      	str	r0, [r7, #12]
 800f8da:	60b9      	str	r1, [r7, #8]
 800f8dc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f8e4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d101      	bne.n	800f8f0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f8ec:	2303      	movs	r3, #3
 800f8ee:	e008      	b.n	800f902 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800f8f0:	697b      	ldr	r3, [r7, #20]
 800f8f2:	68ba      	ldr	r2, [r7, #8]
 800f8f4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f8f8:	697b      	ldr	r3, [r7, #20]
 800f8fa:	687a      	ldr	r2, [r7, #4]
 800f8fc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800f900:	2300      	movs	r3, #0
}
 800f902:	4618      	mov	r0, r3
 800f904:	371c      	adds	r7, #28
 800f906:	46bd      	mov	sp, r7
 800f908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90c:	4770      	bx	lr

0800f90e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f90e:	b480      	push	{r7}
 800f910:	b085      	sub	sp, #20
 800f912:	af00      	add	r7, sp, #0
 800f914:	6078      	str	r0, [r7, #4]
 800f916:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f91e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d101      	bne.n	800f92a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800f926:	2303      	movs	r3, #3
 800f928:	e004      	b.n	800f934 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	683a      	ldr	r2, [r7, #0]
 800f92e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800f932:	2300      	movs	r3, #0
}
 800f934:	4618      	mov	r0, r3
 800f936:	3714      	adds	r7, #20
 800f938:	46bd      	mov	sp, r7
 800f93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93e:	4770      	bx	lr

0800f940 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b084      	sub	sp, #16
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f94e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800f950:	2301      	movs	r3, #1
 800f952:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d101      	bne.n	800f962 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f95e:	2303      	movs	r3, #3
 800f960:	e01a      	b.n	800f998 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800f962:	68bb      	ldr	r3, [r7, #8]
 800f964:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d114      	bne.n	800f996 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	2201      	movs	r2, #1
 800f970:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800f974:	68bb      	ldr	r3, [r7, #8]
 800f976:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f98a:	2181      	movs	r1, #129	; 0x81
 800f98c:	6878      	ldr	r0, [r7, #4]
 800f98e:	f004 fe09 	bl	80145a4 <USBD_LL_Transmit>

    ret = USBD_OK;
 800f992:	2300      	movs	r3, #0
 800f994:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f996:	7bfb      	ldrb	r3, [r7, #15]
}
 800f998:	4618      	mov	r0, r3
 800f99a:	3710      	adds	r7, #16
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}

0800f9a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b084      	sub	sp, #16
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f9ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d101      	bne.n	800f9be <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f9ba:	2303      	movs	r3, #3
 800f9bc:	e016      	b.n	800f9ec <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	7c1b      	ldrb	r3, [r3, #16]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d109      	bne.n	800f9da <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f9cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f9d0:	2101      	movs	r1, #1
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f004 fe1e 	bl	8014614 <USBD_LL_PrepareReceive>
 800f9d8:	e007      	b.n	800f9ea <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f9e0:	2340      	movs	r3, #64	; 0x40
 800f9e2:	2101      	movs	r1, #1
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f004 fe15 	bl	8014614 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f9ea:	2300      	movs	r3, #0
}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3710      	adds	r7, #16
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}

0800f9f4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b086      	sub	sp, #24
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	60f8      	str	r0, [r7, #12]
 800f9fc:	60b9      	str	r1, [r7, #8]
 800f9fe:	4613      	mov	r3, r2
 800fa00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d101      	bne.n	800fa0c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800fa08:	2303      	movs	r3, #3
 800fa0a:	e01f      	b.n	800fa4c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	2200      	movs	r2, #0
 800fa10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	2200      	movs	r2, #0
 800fa18:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	2200      	movs	r2, #0
 800fa20:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800fa24:	68bb      	ldr	r3, [r7, #8]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d003      	beq.n	800fa32 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	68ba      	ldr	r2, [r7, #8]
 800fa2e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	2201      	movs	r2, #1
 800fa36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	79fa      	ldrb	r2, [r7, #7]
 800fa3e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800fa40:	68f8      	ldr	r0, [r7, #12]
 800fa42:	f004 fbf1 	bl	8014228 <USBD_LL_Init>
 800fa46:	4603      	mov	r3, r0
 800fa48:	75fb      	strb	r3, [r7, #23]

  return ret;
 800fa4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	3718      	adds	r7, #24
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd80      	pop	{r7, pc}

0800fa54 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b084      	sub	sp, #16
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
 800fa5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800fa62:	683b      	ldr	r3, [r7, #0]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d101      	bne.n	800fa6c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800fa68:	2303      	movs	r3, #3
 800fa6a:	e016      	b.n	800fa9a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	683a      	ldr	r2, [r7, #0]
 800fa70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d00b      	beq.n	800fa98 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa88:	f107 020e 	add.w	r2, r7, #14
 800fa8c:	4610      	mov	r0, r2
 800fa8e:	4798      	blx	r3
 800fa90:	4602      	mov	r2, r0
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800fa98:	2300      	movs	r3, #0
}
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	3710      	adds	r7, #16
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd80      	pop	{r7, pc}

0800faa2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800faa2:	b580      	push	{r7, lr}
 800faa4:	b082      	sub	sp, #8
 800faa6:	af00      	add	r7, sp, #0
 800faa8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800faaa:	6878      	ldr	r0, [r7, #4]
 800faac:	f004 fc06 	bl	80142bc <USBD_LL_Start>
 800fab0:	4603      	mov	r3, r0
}
 800fab2:	4618      	mov	r0, r3
 800fab4:	3708      	adds	r7, #8
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bd80      	pop	{r7, pc}

0800faba <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800faba:	b480      	push	{r7}
 800fabc:	b083      	sub	sp, #12
 800fabe:	af00      	add	r7, sp, #0
 800fac0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fac2:	2300      	movs	r3, #0
}
 800fac4:	4618      	mov	r0, r3
 800fac6:	370c      	adds	r7, #12
 800fac8:	46bd      	mov	sp, r7
 800faca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800face:	4770      	bx	lr

0800fad0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b084      	sub	sp, #16
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
 800fad8:	460b      	mov	r3, r1
 800fada:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800fadc:	2303      	movs	r3, #3
 800fade:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d009      	beq.n	800fafe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	78fa      	ldrb	r2, [r7, #3]
 800faf4:	4611      	mov	r1, r2
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	4798      	blx	r3
 800fafa:	4603      	mov	r3, r0
 800fafc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800fafe:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb00:	4618      	mov	r0, r3
 800fb02:	3710      	adds	r7, #16
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}

0800fb08 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b082      	sub	sp, #8
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
 800fb10:	460b      	mov	r3, r1
 800fb12:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d007      	beq.n	800fb2e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb24:	685b      	ldr	r3, [r3, #4]
 800fb26:	78fa      	ldrb	r2, [r7, #3]
 800fb28:	4611      	mov	r1, r2
 800fb2a:	6878      	ldr	r0, [r7, #4]
 800fb2c:	4798      	blx	r3
  }

  return USBD_OK;
 800fb2e:	2300      	movs	r3, #0
}
 800fb30:	4618      	mov	r0, r3
 800fb32:	3708      	adds	r7, #8
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}

0800fb38 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b084      	sub	sp, #16
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
 800fb40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fb48:	6839      	ldr	r1, [r7, #0]
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f000 ff90 	bl	8010a70 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2201      	movs	r2, #1
 800fb54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800fb5e:	461a      	mov	r2, r3
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800fb6c:	f003 031f 	and.w	r3, r3, #31
 800fb70:	2b02      	cmp	r3, #2
 800fb72:	d01a      	beq.n	800fbaa <USBD_LL_SetupStage+0x72>
 800fb74:	2b02      	cmp	r3, #2
 800fb76:	d822      	bhi.n	800fbbe <USBD_LL_SetupStage+0x86>
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d002      	beq.n	800fb82 <USBD_LL_SetupStage+0x4a>
 800fb7c:	2b01      	cmp	r3, #1
 800fb7e:	d00a      	beq.n	800fb96 <USBD_LL_SetupStage+0x5e>
 800fb80:	e01d      	b.n	800fbbe <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fb88:	4619      	mov	r1, r3
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	f000 fa62 	bl	8010054 <USBD_StdDevReq>
 800fb90:	4603      	mov	r3, r0
 800fb92:	73fb      	strb	r3, [r7, #15]
      break;
 800fb94:	e020      	b.n	800fbd8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fb9c:	4619      	mov	r1, r3
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f000 fac6 	bl	8010130 <USBD_StdItfReq>
 800fba4:	4603      	mov	r3, r0
 800fba6:	73fb      	strb	r3, [r7, #15]
      break;
 800fba8:	e016      	b.n	800fbd8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fbb0:	4619      	mov	r1, r3
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f000 fb05 	bl	80101c2 <USBD_StdEPReq>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	73fb      	strb	r3, [r7, #15]
      break;
 800fbbc:	e00c      	b.n	800fbd8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800fbc4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fbc8:	b2db      	uxtb	r3, r3
 800fbca:	4619      	mov	r1, r3
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f004 fc1b 	bl	8014408 <USBD_LL_StallEP>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	73fb      	strb	r3, [r7, #15]
      break;
 800fbd6:	bf00      	nop
  }

  return ret;
 800fbd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	3710      	adds	r7, #16
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}

0800fbe2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800fbe2:	b580      	push	{r7, lr}
 800fbe4:	b086      	sub	sp, #24
 800fbe6:	af00      	add	r7, sp, #0
 800fbe8:	60f8      	str	r0, [r7, #12]
 800fbea:	460b      	mov	r3, r1
 800fbec:	607a      	str	r2, [r7, #4]
 800fbee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800fbf0:	7afb      	ldrb	r3, [r7, #11]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d138      	bne.n	800fc68 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800fbfc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fc04:	2b03      	cmp	r3, #3
 800fc06:	d14a      	bne.n	800fc9e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800fc08:	693b      	ldr	r3, [r7, #16]
 800fc0a:	689a      	ldr	r2, [r3, #8]
 800fc0c:	693b      	ldr	r3, [r7, #16]
 800fc0e:	68db      	ldr	r3, [r3, #12]
 800fc10:	429a      	cmp	r2, r3
 800fc12:	d913      	bls.n	800fc3c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fc14:	693b      	ldr	r3, [r7, #16]
 800fc16:	689a      	ldr	r2, [r3, #8]
 800fc18:	693b      	ldr	r3, [r7, #16]
 800fc1a:	68db      	ldr	r3, [r3, #12]
 800fc1c:	1ad2      	subs	r2, r2, r3
 800fc1e:	693b      	ldr	r3, [r7, #16]
 800fc20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800fc22:	693b      	ldr	r3, [r7, #16]
 800fc24:	68da      	ldr	r2, [r3, #12]
 800fc26:	693b      	ldr	r3, [r7, #16]
 800fc28:	689b      	ldr	r3, [r3, #8]
 800fc2a:	4293      	cmp	r3, r2
 800fc2c:	bf28      	it	cs
 800fc2e:	4613      	movcs	r3, r2
 800fc30:	461a      	mov	r2, r3
 800fc32:	6879      	ldr	r1, [r7, #4]
 800fc34:	68f8      	ldr	r0, [r7, #12]
 800fc36:	f001 f80f 	bl	8010c58 <USBD_CtlContinueRx>
 800fc3a:	e030      	b.n	800fc9e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc42:	b2db      	uxtb	r3, r3
 800fc44:	2b03      	cmp	r3, #3
 800fc46:	d10b      	bne.n	800fc60 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc4e:	691b      	ldr	r3, [r3, #16]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d005      	beq.n	800fc60 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc5a:	691b      	ldr	r3, [r3, #16]
 800fc5c:	68f8      	ldr	r0, [r7, #12]
 800fc5e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800fc60:	68f8      	ldr	r0, [r7, #12]
 800fc62:	f001 f80a 	bl	8010c7a <USBD_CtlSendStatus>
 800fc66:	e01a      	b.n	800fc9e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc6e:	b2db      	uxtb	r3, r3
 800fc70:	2b03      	cmp	r3, #3
 800fc72:	d114      	bne.n	800fc9e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc7a:	699b      	ldr	r3, [r3, #24]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d00e      	beq.n	800fc9e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc86:	699b      	ldr	r3, [r3, #24]
 800fc88:	7afa      	ldrb	r2, [r7, #11]
 800fc8a:	4611      	mov	r1, r2
 800fc8c:	68f8      	ldr	r0, [r7, #12]
 800fc8e:	4798      	blx	r3
 800fc90:	4603      	mov	r3, r0
 800fc92:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800fc94:	7dfb      	ldrb	r3, [r7, #23]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d001      	beq.n	800fc9e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800fc9a:	7dfb      	ldrb	r3, [r7, #23]
 800fc9c:	e000      	b.n	800fca0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800fc9e:	2300      	movs	r3, #0
}
 800fca0:	4618      	mov	r0, r3
 800fca2:	3718      	adds	r7, #24
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}

0800fca8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b086      	sub	sp, #24
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	60f8      	str	r0, [r7, #12]
 800fcb0:	460b      	mov	r3, r1
 800fcb2:	607a      	str	r2, [r7, #4]
 800fcb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800fcb6:	7afb      	ldrb	r3, [r7, #11]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d16b      	bne.n	800fd94 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	3314      	adds	r3, #20
 800fcc0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fcc8:	2b02      	cmp	r3, #2
 800fcca:	d156      	bne.n	800fd7a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800fccc:	693b      	ldr	r3, [r7, #16]
 800fcce:	689a      	ldr	r2, [r3, #8]
 800fcd0:	693b      	ldr	r3, [r7, #16]
 800fcd2:	68db      	ldr	r3, [r3, #12]
 800fcd4:	429a      	cmp	r2, r3
 800fcd6:	d914      	bls.n	800fd02 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fcd8:	693b      	ldr	r3, [r7, #16]
 800fcda:	689a      	ldr	r2, [r3, #8]
 800fcdc:	693b      	ldr	r3, [r7, #16]
 800fcde:	68db      	ldr	r3, [r3, #12]
 800fce0:	1ad2      	subs	r2, r2, r3
 800fce2:	693b      	ldr	r3, [r7, #16]
 800fce4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800fce6:	693b      	ldr	r3, [r7, #16]
 800fce8:	689b      	ldr	r3, [r3, #8]
 800fcea:	461a      	mov	r2, r3
 800fcec:	6879      	ldr	r1, [r7, #4]
 800fcee:	68f8      	ldr	r0, [r7, #12]
 800fcf0:	f000 ff84 	bl	8010bfc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	2100      	movs	r1, #0
 800fcfa:	68f8      	ldr	r0, [r7, #12]
 800fcfc:	f004 fc8a 	bl	8014614 <USBD_LL_PrepareReceive>
 800fd00:	e03b      	b.n	800fd7a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800fd02:	693b      	ldr	r3, [r7, #16]
 800fd04:	68da      	ldr	r2, [r3, #12]
 800fd06:	693b      	ldr	r3, [r7, #16]
 800fd08:	689b      	ldr	r3, [r3, #8]
 800fd0a:	429a      	cmp	r2, r3
 800fd0c:	d11c      	bne.n	800fd48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800fd0e:	693b      	ldr	r3, [r7, #16]
 800fd10:	685a      	ldr	r2, [r3, #4]
 800fd12:	693b      	ldr	r3, [r7, #16]
 800fd14:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800fd16:	429a      	cmp	r2, r3
 800fd18:	d316      	bcc.n	800fd48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800fd1a:	693b      	ldr	r3, [r7, #16]
 800fd1c:	685a      	ldr	r2, [r3, #4]
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800fd24:	429a      	cmp	r2, r3
 800fd26:	d20f      	bcs.n	800fd48 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fd28:	2200      	movs	r2, #0
 800fd2a:	2100      	movs	r1, #0
 800fd2c:	68f8      	ldr	r0, [r7, #12]
 800fd2e:	f000 ff65 	bl	8010bfc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	2200      	movs	r2, #0
 800fd36:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	2100      	movs	r1, #0
 800fd40:	68f8      	ldr	r0, [r7, #12]
 800fd42:	f004 fc67 	bl	8014614 <USBD_LL_PrepareReceive>
 800fd46:	e018      	b.n	800fd7a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd4e:	b2db      	uxtb	r3, r3
 800fd50:	2b03      	cmp	r3, #3
 800fd52:	d10b      	bne.n	800fd6c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd5a:	68db      	ldr	r3, [r3, #12]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d005      	beq.n	800fd6c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd66:	68db      	ldr	r3, [r3, #12]
 800fd68:	68f8      	ldr	r0, [r7, #12]
 800fd6a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fd6c:	2180      	movs	r1, #128	; 0x80
 800fd6e:	68f8      	ldr	r0, [r7, #12]
 800fd70:	f004 fb4a 	bl	8014408 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800fd74:	68f8      	ldr	r0, [r7, #12]
 800fd76:	f000 ff93 	bl	8010ca0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800fd80:	2b01      	cmp	r3, #1
 800fd82:	d122      	bne.n	800fdca <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800fd84:	68f8      	ldr	r0, [r7, #12]
 800fd86:	f7ff fe98 	bl	800faba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800fd92:	e01a      	b.n	800fdca <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd9a:	b2db      	uxtb	r3, r3
 800fd9c:	2b03      	cmp	r3, #3
 800fd9e:	d114      	bne.n	800fdca <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fda6:	695b      	ldr	r3, [r3, #20]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d00e      	beq.n	800fdca <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdb2:	695b      	ldr	r3, [r3, #20]
 800fdb4:	7afa      	ldrb	r2, [r7, #11]
 800fdb6:	4611      	mov	r1, r2
 800fdb8:	68f8      	ldr	r0, [r7, #12]
 800fdba:	4798      	blx	r3
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800fdc0:	7dfb      	ldrb	r3, [r7, #23]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d001      	beq.n	800fdca <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800fdc6:	7dfb      	ldrb	r3, [r7, #23]
 800fdc8:	e000      	b.n	800fdcc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800fdca:	2300      	movs	r3, #0
}
 800fdcc:	4618      	mov	r0, r3
 800fdce:	3718      	adds	r7, #24
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	bd80      	pop	{r7, pc}

0800fdd4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b082      	sub	sp, #8
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	2201      	movs	r2, #1
 800fde0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	2200      	movs	r2, #0
 800fde8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2200      	movs	r2, #0
 800fdf0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d101      	bne.n	800fe08 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800fe04:	2303      	movs	r3, #3
 800fe06:	e02f      	b.n	800fe68 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d00f      	beq.n	800fe32 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe18:	685b      	ldr	r3, [r3, #4]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d009      	beq.n	800fe32 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe24:	685b      	ldr	r3, [r3, #4]
 800fe26:	687a      	ldr	r2, [r7, #4]
 800fe28:	6852      	ldr	r2, [r2, #4]
 800fe2a:	b2d2      	uxtb	r2, r2
 800fe2c:	4611      	mov	r1, r2
 800fe2e:	6878      	ldr	r0, [r7, #4]
 800fe30:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fe32:	2340      	movs	r3, #64	; 0x40
 800fe34:	2200      	movs	r2, #0
 800fe36:	2100      	movs	r1, #0
 800fe38:	6878      	ldr	r0, [r7, #4]
 800fe3a:	f004 fa71 	bl	8014320 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	2201      	movs	r2, #1
 800fe42:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2240      	movs	r2, #64	; 0x40
 800fe4a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fe4e:	2340      	movs	r3, #64	; 0x40
 800fe50:	2200      	movs	r2, #0
 800fe52:	2180      	movs	r1, #128	; 0x80
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f004 fa63 	bl	8014320 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	2201      	movs	r2, #1
 800fe5e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2240      	movs	r2, #64	; 0x40
 800fe64:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800fe66:	2300      	movs	r3, #0
}
 800fe68:	4618      	mov	r0, r3
 800fe6a:	3708      	adds	r7, #8
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	bd80      	pop	{r7, pc}

0800fe70 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800fe70:	b480      	push	{r7}
 800fe72:	b083      	sub	sp, #12
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
 800fe78:	460b      	mov	r3, r1
 800fe7a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	78fa      	ldrb	r2, [r7, #3]
 800fe80:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800fe82:	2300      	movs	r3, #0
}
 800fe84:	4618      	mov	r0, r3
 800fe86:	370c      	adds	r7, #12
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8e:	4770      	bx	lr

0800fe90 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800fe90:	b480      	push	{r7}
 800fe92:	b083      	sub	sp, #12
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe9e:	b2da      	uxtb	r2, r3
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	2204      	movs	r2, #4
 800feaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800feae:	2300      	movs	r3, #0
}
 800feb0:	4618      	mov	r0, r3
 800feb2:	370c      	adds	r7, #12
 800feb4:	46bd      	mov	sp, r7
 800feb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feba:	4770      	bx	lr

0800febc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800febc:	b480      	push	{r7}
 800febe:	b083      	sub	sp, #12
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800feca:	b2db      	uxtb	r3, r3
 800fecc:	2b04      	cmp	r3, #4
 800fece:	d106      	bne.n	800fede <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800fed6:	b2da      	uxtb	r2, r3
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800fede:	2300      	movs	r3, #0
}
 800fee0:	4618      	mov	r0, r3
 800fee2:	370c      	adds	r7, #12
 800fee4:	46bd      	mov	sp, r7
 800fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feea:	4770      	bx	lr

0800feec <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b082      	sub	sp, #8
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d101      	bne.n	800ff02 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800fefe:	2303      	movs	r3, #3
 800ff00:	e012      	b.n	800ff28 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff08:	b2db      	uxtb	r3, r3
 800ff0a:	2b03      	cmp	r3, #3
 800ff0c:	d10b      	bne.n	800ff26 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff14:	69db      	ldr	r3, [r3, #28]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d005      	beq.n	800ff26 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff20:	69db      	ldr	r3, [r3, #28]
 800ff22:	6878      	ldr	r0, [r7, #4]
 800ff24:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ff26:	2300      	movs	r3, #0
}
 800ff28:	4618      	mov	r0, r3
 800ff2a:	3708      	adds	r7, #8
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	bd80      	pop	{r7, pc}

0800ff30 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b082      	sub	sp, #8
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
 800ff38:	460b      	mov	r3, r1
 800ff3a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d101      	bne.n	800ff4a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ff46:	2303      	movs	r3, #3
 800ff48:	e014      	b.n	800ff74 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff50:	b2db      	uxtb	r3, r3
 800ff52:	2b03      	cmp	r3, #3
 800ff54:	d10d      	bne.n	800ff72 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff5c:	6a1b      	ldr	r3, [r3, #32]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d007      	beq.n	800ff72 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff68:	6a1b      	ldr	r3, [r3, #32]
 800ff6a:	78fa      	ldrb	r2, [r7, #3]
 800ff6c:	4611      	mov	r1, r2
 800ff6e:	6878      	ldr	r0, [r7, #4]
 800ff70:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ff72:	2300      	movs	r3, #0
}
 800ff74:	4618      	mov	r0, r3
 800ff76:	3708      	adds	r7, #8
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	bd80      	pop	{r7, pc}

0800ff7c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b082      	sub	sp, #8
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
 800ff84:	460b      	mov	r3, r1
 800ff86:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d101      	bne.n	800ff96 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ff92:	2303      	movs	r3, #3
 800ff94:	e014      	b.n	800ffc0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff9c:	b2db      	uxtb	r3, r3
 800ff9e:	2b03      	cmp	r3, #3
 800ffa0:	d10d      	bne.n	800ffbe <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ffa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d007      	beq.n	800ffbe <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ffb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffb6:	78fa      	ldrb	r2, [r7, #3]
 800ffb8:	4611      	mov	r1, r2
 800ffba:	6878      	ldr	r0, [r7, #4]
 800ffbc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ffbe:	2300      	movs	r3, #0
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3708      	adds	r7, #8
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}

0800ffc8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ffc8:	b480      	push	{r7}
 800ffca:	b083      	sub	sp, #12
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ffd0:	2300      	movs	r3, #0
}
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	370c      	adds	r7, #12
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffdc:	4770      	bx	lr

0800ffde <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ffde:	b580      	push	{r7, lr}
 800ffe0:	b082      	sub	sp, #8
 800ffe2:	af00      	add	r7, sp, #0
 800ffe4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	2201      	movs	r2, #1
 800ffea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d009      	beq.n	801000c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fffe:	685b      	ldr	r3, [r3, #4]
 8010000:	687a      	ldr	r2, [r7, #4]
 8010002:	6852      	ldr	r2, [r2, #4]
 8010004:	b2d2      	uxtb	r2, r2
 8010006:	4611      	mov	r1, r2
 8010008:	6878      	ldr	r0, [r7, #4]
 801000a:	4798      	blx	r3
  }

  return USBD_OK;
 801000c:	2300      	movs	r3, #0
}
 801000e:	4618      	mov	r0, r3
 8010010:	3708      	adds	r7, #8
 8010012:	46bd      	mov	sp, r7
 8010014:	bd80      	pop	{r7, pc}

08010016 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010016:	b480      	push	{r7}
 8010018:	b087      	sub	sp, #28
 801001a:	af00      	add	r7, sp, #0
 801001c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010022:	697b      	ldr	r3, [r7, #20]
 8010024:	781b      	ldrb	r3, [r3, #0]
 8010026:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010028:	697b      	ldr	r3, [r7, #20]
 801002a:	3301      	adds	r3, #1
 801002c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801002e:	697b      	ldr	r3, [r7, #20]
 8010030:	781b      	ldrb	r3, [r3, #0]
 8010032:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010034:	8a3b      	ldrh	r3, [r7, #16]
 8010036:	021b      	lsls	r3, r3, #8
 8010038:	b21a      	sxth	r2, r3
 801003a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801003e:	4313      	orrs	r3, r2
 8010040:	b21b      	sxth	r3, r3
 8010042:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010044:	89fb      	ldrh	r3, [r7, #14]
}
 8010046:	4618      	mov	r0, r3
 8010048:	371c      	adds	r7, #28
 801004a:	46bd      	mov	sp, r7
 801004c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010050:	4770      	bx	lr
	...

08010054 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b084      	sub	sp, #16
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
 801005c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801005e:	2300      	movs	r3, #0
 8010060:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	781b      	ldrb	r3, [r3, #0]
 8010066:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801006a:	2b40      	cmp	r3, #64	; 0x40
 801006c:	d005      	beq.n	801007a <USBD_StdDevReq+0x26>
 801006e:	2b40      	cmp	r3, #64	; 0x40
 8010070:	d853      	bhi.n	801011a <USBD_StdDevReq+0xc6>
 8010072:	2b00      	cmp	r3, #0
 8010074:	d00b      	beq.n	801008e <USBD_StdDevReq+0x3a>
 8010076:	2b20      	cmp	r3, #32
 8010078:	d14f      	bne.n	801011a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010080:	689b      	ldr	r3, [r3, #8]
 8010082:	6839      	ldr	r1, [r7, #0]
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	4798      	blx	r3
 8010088:	4603      	mov	r3, r0
 801008a:	73fb      	strb	r3, [r7, #15]
      break;
 801008c:	e04a      	b.n	8010124 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	785b      	ldrb	r3, [r3, #1]
 8010092:	2b09      	cmp	r3, #9
 8010094:	d83b      	bhi.n	801010e <USBD_StdDevReq+0xba>
 8010096:	a201      	add	r2, pc, #4	; (adr r2, 801009c <USBD_StdDevReq+0x48>)
 8010098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801009c:	080100f1 	.word	0x080100f1
 80100a0:	08010105 	.word	0x08010105
 80100a4:	0801010f 	.word	0x0801010f
 80100a8:	080100fb 	.word	0x080100fb
 80100ac:	0801010f 	.word	0x0801010f
 80100b0:	080100cf 	.word	0x080100cf
 80100b4:	080100c5 	.word	0x080100c5
 80100b8:	0801010f 	.word	0x0801010f
 80100bc:	080100e7 	.word	0x080100e7
 80100c0:	080100d9 	.word	0x080100d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80100c4:	6839      	ldr	r1, [r7, #0]
 80100c6:	6878      	ldr	r0, [r7, #4]
 80100c8:	f000 f9de 	bl	8010488 <USBD_GetDescriptor>
          break;
 80100cc:	e024      	b.n	8010118 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80100ce:	6839      	ldr	r1, [r7, #0]
 80100d0:	6878      	ldr	r0, [r7, #4]
 80100d2:	f000 fb43 	bl	801075c <USBD_SetAddress>
          break;
 80100d6:	e01f      	b.n	8010118 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80100d8:	6839      	ldr	r1, [r7, #0]
 80100da:	6878      	ldr	r0, [r7, #4]
 80100dc:	f000 fb82 	bl	80107e4 <USBD_SetConfig>
 80100e0:	4603      	mov	r3, r0
 80100e2:	73fb      	strb	r3, [r7, #15]
          break;
 80100e4:	e018      	b.n	8010118 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80100e6:	6839      	ldr	r1, [r7, #0]
 80100e8:	6878      	ldr	r0, [r7, #4]
 80100ea:	f000 fc21 	bl	8010930 <USBD_GetConfig>
          break;
 80100ee:	e013      	b.n	8010118 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80100f0:	6839      	ldr	r1, [r7, #0]
 80100f2:	6878      	ldr	r0, [r7, #4]
 80100f4:	f000 fc52 	bl	801099c <USBD_GetStatus>
          break;
 80100f8:	e00e      	b.n	8010118 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80100fa:	6839      	ldr	r1, [r7, #0]
 80100fc:	6878      	ldr	r0, [r7, #4]
 80100fe:	f000 fc81 	bl	8010a04 <USBD_SetFeature>
          break;
 8010102:	e009      	b.n	8010118 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010104:	6839      	ldr	r1, [r7, #0]
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	f000 fc90 	bl	8010a2c <USBD_ClrFeature>
          break;
 801010c:	e004      	b.n	8010118 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801010e:	6839      	ldr	r1, [r7, #0]
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f000 fce7 	bl	8010ae4 <USBD_CtlError>
          break;
 8010116:	bf00      	nop
      }
      break;
 8010118:	e004      	b.n	8010124 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801011a:	6839      	ldr	r1, [r7, #0]
 801011c:	6878      	ldr	r0, [r7, #4]
 801011e:	f000 fce1 	bl	8010ae4 <USBD_CtlError>
      break;
 8010122:	bf00      	nop
  }

  return ret;
 8010124:	7bfb      	ldrb	r3, [r7, #15]
}
 8010126:	4618      	mov	r0, r3
 8010128:	3710      	adds	r7, #16
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}
 801012e:	bf00      	nop

08010130 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b084      	sub	sp, #16
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
 8010138:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801013a:	2300      	movs	r3, #0
 801013c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	781b      	ldrb	r3, [r3, #0]
 8010142:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010146:	2b40      	cmp	r3, #64	; 0x40
 8010148:	d005      	beq.n	8010156 <USBD_StdItfReq+0x26>
 801014a:	2b40      	cmp	r3, #64	; 0x40
 801014c:	d82f      	bhi.n	80101ae <USBD_StdItfReq+0x7e>
 801014e:	2b00      	cmp	r3, #0
 8010150:	d001      	beq.n	8010156 <USBD_StdItfReq+0x26>
 8010152:	2b20      	cmp	r3, #32
 8010154:	d12b      	bne.n	80101ae <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801015c:	b2db      	uxtb	r3, r3
 801015e:	3b01      	subs	r3, #1
 8010160:	2b02      	cmp	r3, #2
 8010162:	d81d      	bhi.n	80101a0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	889b      	ldrh	r3, [r3, #4]
 8010168:	b2db      	uxtb	r3, r3
 801016a:	2b01      	cmp	r3, #1
 801016c:	d813      	bhi.n	8010196 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010174:	689b      	ldr	r3, [r3, #8]
 8010176:	6839      	ldr	r1, [r7, #0]
 8010178:	6878      	ldr	r0, [r7, #4]
 801017a:	4798      	blx	r3
 801017c:	4603      	mov	r3, r0
 801017e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	88db      	ldrh	r3, [r3, #6]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d110      	bne.n	80101aa <USBD_StdItfReq+0x7a>
 8010188:	7bfb      	ldrb	r3, [r7, #15]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d10d      	bne.n	80101aa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	f000 fd73 	bl	8010c7a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010194:	e009      	b.n	80101aa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8010196:	6839      	ldr	r1, [r7, #0]
 8010198:	6878      	ldr	r0, [r7, #4]
 801019a:	f000 fca3 	bl	8010ae4 <USBD_CtlError>
          break;
 801019e:	e004      	b.n	80101aa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80101a0:	6839      	ldr	r1, [r7, #0]
 80101a2:	6878      	ldr	r0, [r7, #4]
 80101a4:	f000 fc9e 	bl	8010ae4 <USBD_CtlError>
          break;
 80101a8:	e000      	b.n	80101ac <USBD_StdItfReq+0x7c>
          break;
 80101aa:	bf00      	nop
      }
      break;
 80101ac:	e004      	b.n	80101b8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80101ae:	6839      	ldr	r1, [r7, #0]
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	f000 fc97 	bl	8010ae4 <USBD_CtlError>
      break;
 80101b6:	bf00      	nop
  }

  return ret;
 80101b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80101ba:	4618      	mov	r0, r3
 80101bc:	3710      	adds	r7, #16
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}

080101c2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101c2:	b580      	push	{r7, lr}
 80101c4:	b084      	sub	sp, #16
 80101c6:	af00      	add	r7, sp, #0
 80101c8:	6078      	str	r0, [r7, #4]
 80101ca:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80101cc:	2300      	movs	r3, #0
 80101ce:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	889b      	ldrh	r3, [r3, #4]
 80101d4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80101d6:	683b      	ldr	r3, [r7, #0]
 80101d8:	781b      	ldrb	r3, [r3, #0]
 80101da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80101de:	2b40      	cmp	r3, #64	; 0x40
 80101e0:	d007      	beq.n	80101f2 <USBD_StdEPReq+0x30>
 80101e2:	2b40      	cmp	r3, #64	; 0x40
 80101e4:	f200 8145 	bhi.w	8010472 <USBD_StdEPReq+0x2b0>
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d00c      	beq.n	8010206 <USBD_StdEPReq+0x44>
 80101ec:	2b20      	cmp	r3, #32
 80101ee:	f040 8140 	bne.w	8010472 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80101f8:	689b      	ldr	r3, [r3, #8]
 80101fa:	6839      	ldr	r1, [r7, #0]
 80101fc:	6878      	ldr	r0, [r7, #4]
 80101fe:	4798      	blx	r3
 8010200:	4603      	mov	r3, r0
 8010202:	73fb      	strb	r3, [r7, #15]
      break;
 8010204:	e13a      	b.n	801047c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	785b      	ldrb	r3, [r3, #1]
 801020a:	2b03      	cmp	r3, #3
 801020c:	d007      	beq.n	801021e <USBD_StdEPReq+0x5c>
 801020e:	2b03      	cmp	r3, #3
 8010210:	f300 8129 	bgt.w	8010466 <USBD_StdEPReq+0x2a4>
 8010214:	2b00      	cmp	r3, #0
 8010216:	d07f      	beq.n	8010318 <USBD_StdEPReq+0x156>
 8010218:	2b01      	cmp	r3, #1
 801021a:	d03c      	beq.n	8010296 <USBD_StdEPReq+0xd4>
 801021c:	e123      	b.n	8010466 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010224:	b2db      	uxtb	r3, r3
 8010226:	2b02      	cmp	r3, #2
 8010228:	d002      	beq.n	8010230 <USBD_StdEPReq+0x6e>
 801022a:	2b03      	cmp	r3, #3
 801022c:	d016      	beq.n	801025c <USBD_StdEPReq+0x9a>
 801022e:	e02c      	b.n	801028a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010230:	7bbb      	ldrb	r3, [r7, #14]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d00d      	beq.n	8010252 <USBD_StdEPReq+0x90>
 8010236:	7bbb      	ldrb	r3, [r7, #14]
 8010238:	2b80      	cmp	r3, #128	; 0x80
 801023a:	d00a      	beq.n	8010252 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801023c:	7bbb      	ldrb	r3, [r7, #14]
 801023e:	4619      	mov	r1, r3
 8010240:	6878      	ldr	r0, [r7, #4]
 8010242:	f004 f8e1 	bl	8014408 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010246:	2180      	movs	r1, #128	; 0x80
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	f004 f8dd 	bl	8014408 <USBD_LL_StallEP>
 801024e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010250:	e020      	b.n	8010294 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8010252:	6839      	ldr	r1, [r7, #0]
 8010254:	6878      	ldr	r0, [r7, #4]
 8010256:	f000 fc45 	bl	8010ae4 <USBD_CtlError>
              break;
 801025a:	e01b      	b.n	8010294 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	885b      	ldrh	r3, [r3, #2]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d10e      	bne.n	8010282 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010264:	7bbb      	ldrb	r3, [r7, #14]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d00b      	beq.n	8010282 <USBD_StdEPReq+0xc0>
 801026a:	7bbb      	ldrb	r3, [r7, #14]
 801026c:	2b80      	cmp	r3, #128	; 0x80
 801026e:	d008      	beq.n	8010282 <USBD_StdEPReq+0xc0>
 8010270:	683b      	ldr	r3, [r7, #0]
 8010272:	88db      	ldrh	r3, [r3, #6]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d104      	bne.n	8010282 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010278:	7bbb      	ldrb	r3, [r7, #14]
 801027a:	4619      	mov	r1, r3
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f004 f8c3 	bl	8014408 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010282:	6878      	ldr	r0, [r7, #4]
 8010284:	f000 fcf9 	bl	8010c7a <USBD_CtlSendStatus>

              break;
 8010288:	e004      	b.n	8010294 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801028a:	6839      	ldr	r1, [r7, #0]
 801028c:	6878      	ldr	r0, [r7, #4]
 801028e:	f000 fc29 	bl	8010ae4 <USBD_CtlError>
              break;
 8010292:	bf00      	nop
          }
          break;
 8010294:	e0ec      	b.n	8010470 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801029c:	b2db      	uxtb	r3, r3
 801029e:	2b02      	cmp	r3, #2
 80102a0:	d002      	beq.n	80102a8 <USBD_StdEPReq+0xe6>
 80102a2:	2b03      	cmp	r3, #3
 80102a4:	d016      	beq.n	80102d4 <USBD_StdEPReq+0x112>
 80102a6:	e030      	b.n	801030a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80102a8:	7bbb      	ldrb	r3, [r7, #14]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d00d      	beq.n	80102ca <USBD_StdEPReq+0x108>
 80102ae:	7bbb      	ldrb	r3, [r7, #14]
 80102b0:	2b80      	cmp	r3, #128	; 0x80
 80102b2:	d00a      	beq.n	80102ca <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80102b4:	7bbb      	ldrb	r3, [r7, #14]
 80102b6:	4619      	mov	r1, r3
 80102b8:	6878      	ldr	r0, [r7, #4]
 80102ba:	f004 f8a5 	bl	8014408 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80102be:	2180      	movs	r1, #128	; 0x80
 80102c0:	6878      	ldr	r0, [r7, #4]
 80102c2:	f004 f8a1 	bl	8014408 <USBD_LL_StallEP>
 80102c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80102c8:	e025      	b.n	8010316 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80102ca:	6839      	ldr	r1, [r7, #0]
 80102cc:	6878      	ldr	r0, [r7, #4]
 80102ce:	f000 fc09 	bl	8010ae4 <USBD_CtlError>
              break;
 80102d2:	e020      	b.n	8010316 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80102d4:	683b      	ldr	r3, [r7, #0]
 80102d6:	885b      	ldrh	r3, [r3, #2]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d11b      	bne.n	8010314 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80102dc:	7bbb      	ldrb	r3, [r7, #14]
 80102de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d004      	beq.n	80102f0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80102e6:	7bbb      	ldrb	r3, [r7, #14]
 80102e8:	4619      	mov	r1, r3
 80102ea:	6878      	ldr	r0, [r7, #4]
 80102ec:	f004 f8c2 	bl	8014474 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80102f0:	6878      	ldr	r0, [r7, #4]
 80102f2:	f000 fcc2 	bl	8010c7a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80102fc:	689b      	ldr	r3, [r3, #8]
 80102fe:	6839      	ldr	r1, [r7, #0]
 8010300:	6878      	ldr	r0, [r7, #4]
 8010302:	4798      	blx	r3
 8010304:	4603      	mov	r3, r0
 8010306:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8010308:	e004      	b.n	8010314 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801030a:	6839      	ldr	r1, [r7, #0]
 801030c:	6878      	ldr	r0, [r7, #4]
 801030e:	f000 fbe9 	bl	8010ae4 <USBD_CtlError>
              break;
 8010312:	e000      	b.n	8010316 <USBD_StdEPReq+0x154>
              break;
 8010314:	bf00      	nop
          }
          break;
 8010316:	e0ab      	b.n	8010470 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801031e:	b2db      	uxtb	r3, r3
 8010320:	2b02      	cmp	r3, #2
 8010322:	d002      	beq.n	801032a <USBD_StdEPReq+0x168>
 8010324:	2b03      	cmp	r3, #3
 8010326:	d032      	beq.n	801038e <USBD_StdEPReq+0x1cc>
 8010328:	e097      	b.n	801045a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801032a:	7bbb      	ldrb	r3, [r7, #14]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d007      	beq.n	8010340 <USBD_StdEPReq+0x17e>
 8010330:	7bbb      	ldrb	r3, [r7, #14]
 8010332:	2b80      	cmp	r3, #128	; 0x80
 8010334:	d004      	beq.n	8010340 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8010336:	6839      	ldr	r1, [r7, #0]
 8010338:	6878      	ldr	r0, [r7, #4]
 801033a:	f000 fbd3 	bl	8010ae4 <USBD_CtlError>
                break;
 801033e:	e091      	b.n	8010464 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010340:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010344:	2b00      	cmp	r3, #0
 8010346:	da0b      	bge.n	8010360 <USBD_StdEPReq+0x19e>
 8010348:	7bbb      	ldrb	r3, [r7, #14]
 801034a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801034e:	4613      	mov	r3, r2
 8010350:	009b      	lsls	r3, r3, #2
 8010352:	4413      	add	r3, r2
 8010354:	009b      	lsls	r3, r3, #2
 8010356:	3310      	adds	r3, #16
 8010358:	687a      	ldr	r2, [r7, #4]
 801035a:	4413      	add	r3, r2
 801035c:	3304      	adds	r3, #4
 801035e:	e00b      	b.n	8010378 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010360:	7bbb      	ldrb	r3, [r7, #14]
 8010362:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010366:	4613      	mov	r3, r2
 8010368:	009b      	lsls	r3, r3, #2
 801036a:	4413      	add	r3, r2
 801036c:	009b      	lsls	r3, r3, #2
 801036e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010372:	687a      	ldr	r2, [r7, #4]
 8010374:	4413      	add	r3, r2
 8010376:	3304      	adds	r3, #4
 8010378:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801037a:	68bb      	ldr	r3, [r7, #8]
 801037c:	2200      	movs	r2, #0
 801037e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	2202      	movs	r2, #2
 8010384:	4619      	mov	r1, r3
 8010386:	6878      	ldr	r0, [r7, #4]
 8010388:	f000 fc1d 	bl	8010bc6 <USBD_CtlSendData>
              break;
 801038c:	e06a      	b.n	8010464 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801038e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010392:	2b00      	cmp	r3, #0
 8010394:	da11      	bge.n	80103ba <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010396:	7bbb      	ldrb	r3, [r7, #14]
 8010398:	f003 020f 	and.w	r2, r3, #15
 801039c:	6879      	ldr	r1, [r7, #4]
 801039e:	4613      	mov	r3, r2
 80103a0:	009b      	lsls	r3, r3, #2
 80103a2:	4413      	add	r3, r2
 80103a4:	009b      	lsls	r3, r3, #2
 80103a6:	440b      	add	r3, r1
 80103a8:	3324      	adds	r3, #36	; 0x24
 80103aa:	881b      	ldrh	r3, [r3, #0]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d117      	bne.n	80103e0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80103b0:	6839      	ldr	r1, [r7, #0]
 80103b2:	6878      	ldr	r0, [r7, #4]
 80103b4:	f000 fb96 	bl	8010ae4 <USBD_CtlError>
                  break;
 80103b8:	e054      	b.n	8010464 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80103ba:	7bbb      	ldrb	r3, [r7, #14]
 80103bc:	f003 020f 	and.w	r2, r3, #15
 80103c0:	6879      	ldr	r1, [r7, #4]
 80103c2:	4613      	mov	r3, r2
 80103c4:	009b      	lsls	r3, r3, #2
 80103c6:	4413      	add	r3, r2
 80103c8:	009b      	lsls	r3, r3, #2
 80103ca:	440b      	add	r3, r1
 80103cc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80103d0:	881b      	ldrh	r3, [r3, #0]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d104      	bne.n	80103e0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80103d6:	6839      	ldr	r1, [r7, #0]
 80103d8:	6878      	ldr	r0, [r7, #4]
 80103da:	f000 fb83 	bl	8010ae4 <USBD_CtlError>
                  break;
 80103de:	e041      	b.n	8010464 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80103e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	da0b      	bge.n	8010400 <USBD_StdEPReq+0x23e>
 80103e8:	7bbb      	ldrb	r3, [r7, #14]
 80103ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80103ee:	4613      	mov	r3, r2
 80103f0:	009b      	lsls	r3, r3, #2
 80103f2:	4413      	add	r3, r2
 80103f4:	009b      	lsls	r3, r3, #2
 80103f6:	3310      	adds	r3, #16
 80103f8:	687a      	ldr	r2, [r7, #4]
 80103fa:	4413      	add	r3, r2
 80103fc:	3304      	adds	r3, #4
 80103fe:	e00b      	b.n	8010418 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010400:	7bbb      	ldrb	r3, [r7, #14]
 8010402:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010406:	4613      	mov	r3, r2
 8010408:	009b      	lsls	r3, r3, #2
 801040a:	4413      	add	r3, r2
 801040c:	009b      	lsls	r3, r3, #2
 801040e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010412:	687a      	ldr	r2, [r7, #4]
 8010414:	4413      	add	r3, r2
 8010416:	3304      	adds	r3, #4
 8010418:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801041a:	7bbb      	ldrb	r3, [r7, #14]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d002      	beq.n	8010426 <USBD_StdEPReq+0x264>
 8010420:	7bbb      	ldrb	r3, [r7, #14]
 8010422:	2b80      	cmp	r3, #128	; 0x80
 8010424:	d103      	bne.n	801042e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8010426:	68bb      	ldr	r3, [r7, #8]
 8010428:	2200      	movs	r2, #0
 801042a:	601a      	str	r2, [r3, #0]
 801042c:	e00e      	b.n	801044c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801042e:	7bbb      	ldrb	r3, [r7, #14]
 8010430:	4619      	mov	r1, r3
 8010432:	6878      	ldr	r0, [r7, #4]
 8010434:	f004 f854 	bl	80144e0 <USBD_LL_IsStallEP>
 8010438:	4603      	mov	r3, r0
 801043a:	2b00      	cmp	r3, #0
 801043c:	d003      	beq.n	8010446 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801043e:	68bb      	ldr	r3, [r7, #8]
 8010440:	2201      	movs	r2, #1
 8010442:	601a      	str	r2, [r3, #0]
 8010444:	e002      	b.n	801044c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8010446:	68bb      	ldr	r3, [r7, #8]
 8010448:	2200      	movs	r2, #0
 801044a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801044c:	68bb      	ldr	r3, [r7, #8]
 801044e:	2202      	movs	r2, #2
 8010450:	4619      	mov	r1, r3
 8010452:	6878      	ldr	r0, [r7, #4]
 8010454:	f000 fbb7 	bl	8010bc6 <USBD_CtlSendData>
              break;
 8010458:	e004      	b.n	8010464 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 801045a:	6839      	ldr	r1, [r7, #0]
 801045c:	6878      	ldr	r0, [r7, #4]
 801045e:	f000 fb41 	bl	8010ae4 <USBD_CtlError>
              break;
 8010462:	bf00      	nop
          }
          break;
 8010464:	e004      	b.n	8010470 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8010466:	6839      	ldr	r1, [r7, #0]
 8010468:	6878      	ldr	r0, [r7, #4]
 801046a:	f000 fb3b 	bl	8010ae4 <USBD_CtlError>
          break;
 801046e:	bf00      	nop
      }
      break;
 8010470:	e004      	b.n	801047c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8010472:	6839      	ldr	r1, [r7, #0]
 8010474:	6878      	ldr	r0, [r7, #4]
 8010476:	f000 fb35 	bl	8010ae4 <USBD_CtlError>
      break;
 801047a:	bf00      	nop
  }

  return ret;
 801047c:	7bfb      	ldrb	r3, [r7, #15]
}
 801047e:	4618      	mov	r0, r3
 8010480:	3710      	adds	r7, #16
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}
	...

08010488 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b084      	sub	sp, #16
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010492:	2300      	movs	r3, #0
 8010494:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010496:	2300      	movs	r3, #0
 8010498:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801049a:	2300      	movs	r3, #0
 801049c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	885b      	ldrh	r3, [r3, #2]
 80104a2:	0a1b      	lsrs	r3, r3, #8
 80104a4:	b29b      	uxth	r3, r3
 80104a6:	3b01      	subs	r3, #1
 80104a8:	2b06      	cmp	r3, #6
 80104aa:	f200 8128 	bhi.w	80106fe <USBD_GetDescriptor+0x276>
 80104ae:	a201      	add	r2, pc, #4	; (adr r2, 80104b4 <USBD_GetDescriptor+0x2c>)
 80104b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104b4:	080104d1 	.word	0x080104d1
 80104b8:	080104e9 	.word	0x080104e9
 80104bc:	08010529 	.word	0x08010529
 80104c0:	080106ff 	.word	0x080106ff
 80104c4:	080106ff 	.word	0x080106ff
 80104c8:	0801069f 	.word	0x0801069f
 80104cc:	080106cb 	.word	0x080106cb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	687a      	ldr	r2, [r7, #4]
 80104da:	7c12      	ldrb	r2, [r2, #16]
 80104dc:	f107 0108 	add.w	r1, r7, #8
 80104e0:	4610      	mov	r0, r2
 80104e2:	4798      	blx	r3
 80104e4:	60f8      	str	r0, [r7, #12]
      break;
 80104e6:	e112      	b.n	801070e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	7c1b      	ldrb	r3, [r3, #16]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d10d      	bne.n	801050c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80104f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104f8:	f107 0208 	add.w	r2, r7, #8
 80104fc:	4610      	mov	r0, r2
 80104fe:	4798      	blx	r3
 8010500:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	3301      	adds	r3, #1
 8010506:	2202      	movs	r2, #2
 8010508:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801050a:	e100      	b.n	801070e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010514:	f107 0208 	add.w	r2, r7, #8
 8010518:	4610      	mov	r0, r2
 801051a:	4798      	blx	r3
 801051c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	3301      	adds	r3, #1
 8010522:	2202      	movs	r2, #2
 8010524:	701a      	strb	r2, [r3, #0]
      break;
 8010526:	e0f2      	b.n	801070e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010528:	683b      	ldr	r3, [r7, #0]
 801052a:	885b      	ldrh	r3, [r3, #2]
 801052c:	b2db      	uxtb	r3, r3
 801052e:	2b05      	cmp	r3, #5
 8010530:	f200 80ac 	bhi.w	801068c <USBD_GetDescriptor+0x204>
 8010534:	a201      	add	r2, pc, #4	; (adr r2, 801053c <USBD_GetDescriptor+0xb4>)
 8010536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801053a:	bf00      	nop
 801053c:	08010555 	.word	0x08010555
 8010540:	08010589 	.word	0x08010589
 8010544:	080105bd 	.word	0x080105bd
 8010548:	080105f1 	.word	0x080105f1
 801054c:	08010625 	.word	0x08010625
 8010550:	08010659 	.word	0x08010659
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801055a:	685b      	ldr	r3, [r3, #4]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d00b      	beq.n	8010578 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010566:	685b      	ldr	r3, [r3, #4]
 8010568:	687a      	ldr	r2, [r7, #4]
 801056a:	7c12      	ldrb	r2, [r2, #16]
 801056c:	f107 0108 	add.w	r1, r7, #8
 8010570:	4610      	mov	r0, r2
 8010572:	4798      	blx	r3
 8010574:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010576:	e091      	b.n	801069c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010578:	6839      	ldr	r1, [r7, #0]
 801057a:	6878      	ldr	r0, [r7, #4]
 801057c:	f000 fab2 	bl	8010ae4 <USBD_CtlError>
            err++;
 8010580:	7afb      	ldrb	r3, [r7, #11]
 8010582:	3301      	adds	r3, #1
 8010584:	72fb      	strb	r3, [r7, #11]
          break;
 8010586:	e089      	b.n	801069c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801058e:	689b      	ldr	r3, [r3, #8]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d00b      	beq.n	80105ac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801059a:	689b      	ldr	r3, [r3, #8]
 801059c:	687a      	ldr	r2, [r7, #4]
 801059e:	7c12      	ldrb	r2, [r2, #16]
 80105a0:	f107 0108 	add.w	r1, r7, #8
 80105a4:	4610      	mov	r0, r2
 80105a6:	4798      	blx	r3
 80105a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80105aa:	e077      	b.n	801069c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80105ac:	6839      	ldr	r1, [r7, #0]
 80105ae:	6878      	ldr	r0, [r7, #4]
 80105b0:	f000 fa98 	bl	8010ae4 <USBD_CtlError>
            err++;
 80105b4:	7afb      	ldrb	r3, [r7, #11]
 80105b6:	3301      	adds	r3, #1
 80105b8:	72fb      	strb	r3, [r7, #11]
          break;
 80105ba:	e06f      	b.n	801069c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80105c2:	68db      	ldr	r3, [r3, #12]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d00b      	beq.n	80105e0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80105ce:	68db      	ldr	r3, [r3, #12]
 80105d0:	687a      	ldr	r2, [r7, #4]
 80105d2:	7c12      	ldrb	r2, [r2, #16]
 80105d4:	f107 0108 	add.w	r1, r7, #8
 80105d8:	4610      	mov	r0, r2
 80105da:	4798      	blx	r3
 80105dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80105de:	e05d      	b.n	801069c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80105e0:	6839      	ldr	r1, [r7, #0]
 80105e2:	6878      	ldr	r0, [r7, #4]
 80105e4:	f000 fa7e 	bl	8010ae4 <USBD_CtlError>
            err++;
 80105e8:	7afb      	ldrb	r3, [r7, #11]
 80105ea:	3301      	adds	r3, #1
 80105ec:	72fb      	strb	r3, [r7, #11]
          break;
 80105ee:	e055      	b.n	801069c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80105f6:	691b      	ldr	r3, [r3, #16]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d00b      	beq.n	8010614 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010602:	691b      	ldr	r3, [r3, #16]
 8010604:	687a      	ldr	r2, [r7, #4]
 8010606:	7c12      	ldrb	r2, [r2, #16]
 8010608:	f107 0108 	add.w	r1, r7, #8
 801060c:	4610      	mov	r0, r2
 801060e:	4798      	blx	r3
 8010610:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010612:	e043      	b.n	801069c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010614:	6839      	ldr	r1, [r7, #0]
 8010616:	6878      	ldr	r0, [r7, #4]
 8010618:	f000 fa64 	bl	8010ae4 <USBD_CtlError>
            err++;
 801061c:	7afb      	ldrb	r3, [r7, #11]
 801061e:	3301      	adds	r3, #1
 8010620:	72fb      	strb	r3, [r7, #11]
          break;
 8010622:	e03b      	b.n	801069c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801062a:	695b      	ldr	r3, [r3, #20]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d00b      	beq.n	8010648 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010636:	695b      	ldr	r3, [r3, #20]
 8010638:	687a      	ldr	r2, [r7, #4]
 801063a:	7c12      	ldrb	r2, [r2, #16]
 801063c:	f107 0108 	add.w	r1, r7, #8
 8010640:	4610      	mov	r0, r2
 8010642:	4798      	blx	r3
 8010644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010646:	e029      	b.n	801069c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010648:	6839      	ldr	r1, [r7, #0]
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f000 fa4a 	bl	8010ae4 <USBD_CtlError>
            err++;
 8010650:	7afb      	ldrb	r3, [r7, #11]
 8010652:	3301      	adds	r3, #1
 8010654:	72fb      	strb	r3, [r7, #11]
          break;
 8010656:	e021      	b.n	801069c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801065e:	699b      	ldr	r3, [r3, #24]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d00b      	beq.n	801067c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801066a:	699b      	ldr	r3, [r3, #24]
 801066c:	687a      	ldr	r2, [r7, #4]
 801066e:	7c12      	ldrb	r2, [r2, #16]
 8010670:	f107 0108 	add.w	r1, r7, #8
 8010674:	4610      	mov	r0, r2
 8010676:	4798      	blx	r3
 8010678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801067a:	e00f      	b.n	801069c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801067c:	6839      	ldr	r1, [r7, #0]
 801067e:	6878      	ldr	r0, [r7, #4]
 8010680:	f000 fa30 	bl	8010ae4 <USBD_CtlError>
            err++;
 8010684:	7afb      	ldrb	r3, [r7, #11]
 8010686:	3301      	adds	r3, #1
 8010688:	72fb      	strb	r3, [r7, #11]
          break;
 801068a:	e007      	b.n	801069c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801068c:	6839      	ldr	r1, [r7, #0]
 801068e:	6878      	ldr	r0, [r7, #4]
 8010690:	f000 fa28 	bl	8010ae4 <USBD_CtlError>
          err++;
 8010694:	7afb      	ldrb	r3, [r7, #11]
 8010696:	3301      	adds	r3, #1
 8010698:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801069a:	bf00      	nop
      }
      break;
 801069c:	e037      	b.n	801070e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	7c1b      	ldrb	r3, [r3, #16]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d109      	bne.n	80106ba <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80106ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106ae:	f107 0208 	add.w	r2, r7, #8
 80106b2:	4610      	mov	r0, r2
 80106b4:	4798      	blx	r3
 80106b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80106b8:	e029      	b.n	801070e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80106ba:	6839      	ldr	r1, [r7, #0]
 80106bc:	6878      	ldr	r0, [r7, #4]
 80106be:	f000 fa11 	bl	8010ae4 <USBD_CtlError>
        err++;
 80106c2:	7afb      	ldrb	r3, [r7, #11]
 80106c4:	3301      	adds	r3, #1
 80106c6:	72fb      	strb	r3, [r7, #11]
      break;
 80106c8:	e021      	b.n	801070e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	7c1b      	ldrb	r3, [r3, #16]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d10d      	bne.n	80106ee <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80106d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106da:	f107 0208 	add.w	r2, r7, #8
 80106de:	4610      	mov	r0, r2
 80106e0:	4798      	blx	r3
 80106e2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	3301      	adds	r3, #1
 80106e8:	2207      	movs	r2, #7
 80106ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80106ec:	e00f      	b.n	801070e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80106ee:	6839      	ldr	r1, [r7, #0]
 80106f0:	6878      	ldr	r0, [r7, #4]
 80106f2:	f000 f9f7 	bl	8010ae4 <USBD_CtlError>
        err++;
 80106f6:	7afb      	ldrb	r3, [r7, #11]
 80106f8:	3301      	adds	r3, #1
 80106fa:	72fb      	strb	r3, [r7, #11]
      break;
 80106fc:	e007      	b.n	801070e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80106fe:	6839      	ldr	r1, [r7, #0]
 8010700:	6878      	ldr	r0, [r7, #4]
 8010702:	f000 f9ef 	bl	8010ae4 <USBD_CtlError>
      err++;
 8010706:	7afb      	ldrb	r3, [r7, #11]
 8010708:	3301      	adds	r3, #1
 801070a:	72fb      	strb	r3, [r7, #11]
      break;
 801070c:	bf00      	nop
  }

  if (err != 0U)
 801070e:	7afb      	ldrb	r3, [r7, #11]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d11e      	bne.n	8010752 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	88db      	ldrh	r3, [r3, #6]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d016      	beq.n	801074a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801071c:	893b      	ldrh	r3, [r7, #8]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d00e      	beq.n	8010740 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8010722:	683b      	ldr	r3, [r7, #0]
 8010724:	88da      	ldrh	r2, [r3, #6]
 8010726:	893b      	ldrh	r3, [r7, #8]
 8010728:	4293      	cmp	r3, r2
 801072a:	bf28      	it	cs
 801072c:	4613      	movcs	r3, r2
 801072e:	b29b      	uxth	r3, r3
 8010730:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010732:	893b      	ldrh	r3, [r7, #8]
 8010734:	461a      	mov	r2, r3
 8010736:	68f9      	ldr	r1, [r7, #12]
 8010738:	6878      	ldr	r0, [r7, #4]
 801073a:	f000 fa44 	bl	8010bc6 <USBD_CtlSendData>
 801073e:	e009      	b.n	8010754 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010740:	6839      	ldr	r1, [r7, #0]
 8010742:	6878      	ldr	r0, [r7, #4]
 8010744:	f000 f9ce 	bl	8010ae4 <USBD_CtlError>
 8010748:	e004      	b.n	8010754 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801074a:	6878      	ldr	r0, [r7, #4]
 801074c:	f000 fa95 	bl	8010c7a <USBD_CtlSendStatus>
 8010750:	e000      	b.n	8010754 <USBD_GetDescriptor+0x2cc>
    return;
 8010752:	bf00      	nop
  }
}
 8010754:	3710      	adds	r7, #16
 8010756:	46bd      	mov	sp, r7
 8010758:	bd80      	pop	{r7, pc}
 801075a:	bf00      	nop

0801075c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b084      	sub	sp, #16
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
 8010764:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010766:	683b      	ldr	r3, [r7, #0]
 8010768:	889b      	ldrh	r3, [r3, #4]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d131      	bne.n	80107d2 <USBD_SetAddress+0x76>
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	88db      	ldrh	r3, [r3, #6]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d12d      	bne.n	80107d2 <USBD_SetAddress+0x76>
 8010776:	683b      	ldr	r3, [r7, #0]
 8010778:	885b      	ldrh	r3, [r3, #2]
 801077a:	2b7f      	cmp	r3, #127	; 0x7f
 801077c:	d829      	bhi.n	80107d2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	885b      	ldrh	r3, [r3, #2]
 8010782:	b2db      	uxtb	r3, r3
 8010784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010788:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010790:	b2db      	uxtb	r3, r3
 8010792:	2b03      	cmp	r3, #3
 8010794:	d104      	bne.n	80107a0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010796:	6839      	ldr	r1, [r7, #0]
 8010798:	6878      	ldr	r0, [r7, #4]
 801079a:	f000 f9a3 	bl	8010ae4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801079e:	e01d      	b.n	80107dc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	7bfa      	ldrb	r2, [r7, #15]
 80107a4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80107a8:	7bfb      	ldrb	r3, [r7, #15]
 80107aa:	4619      	mov	r1, r3
 80107ac:	6878      	ldr	r0, [r7, #4]
 80107ae:	f003 fec3 	bl	8014538 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	f000 fa61 	bl	8010c7a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80107b8:	7bfb      	ldrb	r3, [r7, #15]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d004      	beq.n	80107c8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	2202      	movs	r2, #2
 80107c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80107c6:	e009      	b.n	80107dc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	2201      	movs	r2, #1
 80107cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80107d0:	e004      	b.n	80107dc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80107d2:	6839      	ldr	r1, [r7, #0]
 80107d4:	6878      	ldr	r0, [r7, #4]
 80107d6:	f000 f985 	bl	8010ae4 <USBD_CtlError>
  }
}
 80107da:	bf00      	nop
 80107dc:	bf00      	nop
 80107de:	3710      	adds	r7, #16
 80107e0:	46bd      	mov	sp, r7
 80107e2:	bd80      	pop	{r7, pc}

080107e4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b084      	sub	sp, #16
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
 80107ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80107ee:	2300      	movs	r3, #0
 80107f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80107f2:	683b      	ldr	r3, [r7, #0]
 80107f4:	885b      	ldrh	r3, [r3, #2]
 80107f6:	b2da      	uxtb	r2, r3
 80107f8:	4b4c      	ldr	r3, [pc, #304]	; (801092c <USBD_SetConfig+0x148>)
 80107fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80107fc:	4b4b      	ldr	r3, [pc, #300]	; (801092c <USBD_SetConfig+0x148>)
 80107fe:	781b      	ldrb	r3, [r3, #0]
 8010800:	2b01      	cmp	r3, #1
 8010802:	d905      	bls.n	8010810 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010804:	6839      	ldr	r1, [r7, #0]
 8010806:	6878      	ldr	r0, [r7, #4]
 8010808:	f000 f96c 	bl	8010ae4 <USBD_CtlError>
    return USBD_FAIL;
 801080c:	2303      	movs	r3, #3
 801080e:	e088      	b.n	8010922 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010816:	b2db      	uxtb	r3, r3
 8010818:	2b02      	cmp	r3, #2
 801081a:	d002      	beq.n	8010822 <USBD_SetConfig+0x3e>
 801081c:	2b03      	cmp	r3, #3
 801081e:	d025      	beq.n	801086c <USBD_SetConfig+0x88>
 8010820:	e071      	b.n	8010906 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010822:	4b42      	ldr	r3, [pc, #264]	; (801092c <USBD_SetConfig+0x148>)
 8010824:	781b      	ldrb	r3, [r3, #0]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d01c      	beq.n	8010864 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801082a:	4b40      	ldr	r3, [pc, #256]	; (801092c <USBD_SetConfig+0x148>)
 801082c:	781b      	ldrb	r3, [r3, #0]
 801082e:	461a      	mov	r2, r3
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010834:	4b3d      	ldr	r3, [pc, #244]	; (801092c <USBD_SetConfig+0x148>)
 8010836:	781b      	ldrb	r3, [r3, #0]
 8010838:	4619      	mov	r1, r3
 801083a:	6878      	ldr	r0, [r7, #4]
 801083c:	f7ff f948 	bl	800fad0 <USBD_SetClassConfig>
 8010840:	4603      	mov	r3, r0
 8010842:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010844:	7bfb      	ldrb	r3, [r7, #15]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d004      	beq.n	8010854 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801084a:	6839      	ldr	r1, [r7, #0]
 801084c:	6878      	ldr	r0, [r7, #4]
 801084e:	f000 f949 	bl	8010ae4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010852:	e065      	b.n	8010920 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010854:	6878      	ldr	r0, [r7, #4]
 8010856:	f000 fa10 	bl	8010c7a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	2203      	movs	r2, #3
 801085e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010862:	e05d      	b.n	8010920 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010864:	6878      	ldr	r0, [r7, #4]
 8010866:	f000 fa08 	bl	8010c7a <USBD_CtlSendStatus>
      break;
 801086a:	e059      	b.n	8010920 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801086c:	4b2f      	ldr	r3, [pc, #188]	; (801092c <USBD_SetConfig+0x148>)
 801086e:	781b      	ldrb	r3, [r3, #0]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d112      	bne.n	801089a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	2202      	movs	r2, #2
 8010878:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801087c:	4b2b      	ldr	r3, [pc, #172]	; (801092c <USBD_SetConfig+0x148>)
 801087e:	781b      	ldrb	r3, [r3, #0]
 8010880:	461a      	mov	r2, r3
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010886:	4b29      	ldr	r3, [pc, #164]	; (801092c <USBD_SetConfig+0x148>)
 8010888:	781b      	ldrb	r3, [r3, #0]
 801088a:	4619      	mov	r1, r3
 801088c:	6878      	ldr	r0, [r7, #4]
 801088e:	f7ff f93b 	bl	800fb08 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010892:	6878      	ldr	r0, [r7, #4]
 8010894:	f000 f9f1 	bl	8010c7a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010898:	e042      	b.n	8010920 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801089a:	4b24      	ldr	r3, [pc, #144]	; (801092c <USBD_SetConfig+0x148>)
 801089c:	781b      	ldrb	r3, [r3, #0]
 801089e:	461a      	mov	r2, r3
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	685b      	ldr	r3, [r3, #4]
 80108a4:	429a      	cmp	r2, r3
 80108a6:	d02a      	beq.n	80108fe <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	685b      	ldr	r3, [r3, #4]
 80108ac:	b2db      	uxtb	r3, r3
 80108ae:	4619      	mov	r1, r3
 80108b0:	6878      	ldr	r0, [r7, #4]
 80108b2:	f7ff f929 	bl	800fb08 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80108b6:	4b1d      	ldr	r3, [pc, #116]	; (801092c <USBD_SetConfig+0x148>)
 80108b8:	781b      	ldrb	r3, [r3, #0]
 80108ba:	461a      	mov	r2, r3
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80108c0:	4b1a      	ldr	r3, [pc, #104]	; (801092c <USBD_SetConfig+0x148>)
 80108c2:	781b      	ldrb	r3, [r3, #0]
 80108c4:	4619      	mov	r1, r3
 80108c6:	6878      	ldr	r0, [r7, #4]
 80108c8:	f7ff f902 	bl	800fad0 <USBD_SetClassConfig>
 80108cc:	4603      	mov	r3, r0
 80108ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80108d0:	7bfb      	ldrb	r3, [r7, #15]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d00f      	beq.n	80108f6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80108d6:	6839      	ldr	r1, [r7, #0]
 80108d8:	6878      	ldr	r0, [r7, #4]
 80108da:	f000 f903 	bl	8010ae4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	685b      	ldr	r3, [r3, #4]
 80108e2:	b2db      	uxtb	r3, r3
 80108e4:	4619      	mov	r1, r3
 80108e6:	6878      	ldr	r0, [r7, #4]
 80108e8:	f7ff f90e 	bl	800fb08 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	2202      	movs	r2, #2
 80108f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80108f4:	e014      	b.n	8010920 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80108f6:	6878      	ldr	r0, [r7, #4]
 80108f8:	f000 f9bf 	bl	8010c7a <USBD_CtlSendStatus>
      break;
 80108fc:	e010      	b.n	8010920 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80108fe:	6878      	ldr	r0, [r7, #4]
 8010900:	f000 f9bb 	bl	8010c7a <USBD_CtlSendStatus>
      break;
 8010904:	e00c      	b.n	8010920 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8010906:	6839      	ldr	r1, [r7, #0]
 8010908:	6878      	ldr	r0, [r7, #4]
 801090a:	f000 f8eb 	bl	8010ae4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801090e:	4b07      	ldr	r3, [pc, #28]	; (801092c <USBD_SetConfig+0x148>)
 8010910:	781b      	ldrb	r3, [r3, #0]
 8010912:	4619      	mov	r1, r3
 8010914:	6878      	ldr	r0, [r7, #4]
 8010916:	f7ff f8f7 	bl	800fb08 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801091a:	2303      	movs	r3, #3
 801091c:	73fb      	strb	r3, [r7, #15]
      break;
 801091e:	bf00      	nop
  }

  return ret;
 8010920:	7bfb      	ldrb	r3, [r7, #15]
}
 8010922:	4618      	mov	r0, r3
 8010924:	3710      	adds	r7, #16
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}
 801092a:	bf00      	nop
 801092c:	20001328 	.word	0x20001328

08010930 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b082      	sub	sp, #8
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
 8010938:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	88db      	ldrh	r3, [r3, #6]
 801093e:	2b01      	cmp	r3, #1
 8010940:	d004      	beq.n	801094c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010942:	6839      	ldr	r1, [r7, #0]
 8010944:	6878      	ldr	r0, [r7, #4]
 8010946:	f000 f8cd 	bl	8010ae4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801094a:	e023      	b.n	8010994 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010952:	b2db      	uxtb	r3, r3
 8010954:	2b02      	cmp	r3, #2
 8010956:	dc02      	bgt.n	801095e <USBD_GetConfig+0x2e>
 8010958:	2b00      	cmp	r3, #0
 801095a:	dc03      	bgt.n	8010964 <USBD_GetConfig+0x34>
 801095c:	e015      	b.n	801098a <USBD_GetConfig+0x5a>
 801095e:	2b03      	cmp	r3, #3
 8010960:	d00b      	beq.n	801097a <USBD_GetConfig+0x4a>
 8010962:	e012      	b.n	801098a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	2200      	movs	r2, #0
 8010968:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	3308      	adds	r3, #8
 801096e:	2201      	movs	r2, #1
 8010970:	4619      	mov	r1, r3
 8010972:	6878      	ldr	r0, [r7, #4]
 8010974:	f000 f927 	bl	8010bc6 <USBD_CtlSendData>
        break;
 8010978:	e00c      	b.n	8010994 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	3304      	adds	r3, #4
 801097e:	2201      	movs	r2, #1
 8010980:	4619      	mov	r1, r3
 8010982:	6878      	ldr	r0, [r7, #4]
 8010984:	f000 f91f 	bl	8010bc6 <USBD_CtlSendData>
        break;
 8010988:	e004      	b.n	8010994 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801098a:	6839      	ldr	r1, [r7, #0]
 801098c:	6878      	ldr	r0, [r7, #4]
 801098e:	f000 f8a9 	bl	8010ae4 <USBD_CtlError>
        break;
 8010992:	bf00      	nop
}
 8010994:	bf00      	nop
 8010996:	3708      	adds	r7, #8
 8010998:	46bd      	mov	sp, r7
 801099a:	bd80      	pop	{r7, pc}

0801099c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b082      	sub	sp, #8
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
 80109a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80109ac:	b2db      	uxtb	r3, r3
 80109ae:	3b01      	subs	r3, #1
 80109b0:	2b02      	cmp	r3, #2
 80109b2:	d81e      	bhi.n	80109f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80109b4:	683b      	ldr	r3, [r7, #0]
 80109b6:	88db      	ldrh	r3, [r3, #6]
 80109b8:	2b02      	cmp	r3, #2
 80109ba:	d004      	beq.n	80109c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80109bc:	6839      	ldr	r1, [r7, #0]
 80109be:	6878      	ldr	r0, [r7, #4]
 80109c0:	f000 f890 	bl	8010ae4 <USBD_CtlError>
        break;
 80109c4:	e01a      	b.n	80109fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	2201      	movs	r2, #1
 80109ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d005      	beq.n	80109e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	68db      	ldr	r3, [r3, #12]
 80109da:	f043 0202 	orr.w	r2, r3, #2
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	330c      	adds	r3, #12
 80109e6:	2202      	movs	r2, #2
 80109e8:	4619      	mov	r1, r3
 80109ea:	6878      	ldr	r0, [r7, #4]
 80109ec:	f000 f8eb 	bl	8010bc6 <USBD_CtlSendData>
      break;
 80109f0:	e004      	b.n	80109fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80109f2:	6839      	ldr	r1, [r7, #0]
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f000 f875 	bl	8010ae4 <USBD_CtlError>
      break;
 80109fa:	bf00      	nop
  }
}
 80109fc:	bf00      	nop
 80109fe:	3708      	adds	r7, #8
 8010a00:	46bd      	mov	sp, r7
 8010a02:	bd80      	pop	{r7, pc}

08010a04 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b082      	sub	sp, #8
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
 8010a0c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010a0e:	683b      	ldr	r3, [r7, #0]
 8010a10:	885b      	ldrh	r3, [r3, #2]
 8010a12:	2b01      	cmp	r3, #1
 8010a14:	d106      	bne.n	8010a24 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	2201      	movs	r2, #1
 8010a1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f000 f92b 	bl	8010c7a <USBD_CtlSendStatus>
  }
}
 8010a24:	bf00      	nop
 8010a26:	3708      	adds	r7, #8
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bd80      	pop	{r7, pc}

08010a2c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b082      	sub	sp, #8
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
 8010a34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a3c:	b2db      	uxtb	r3, r3
 8010a3e:	3b01      	subs	r3, #1
 8010a40:	2b02      	cmp	r3, #2
 8010a42:	d80b      	bhi.n	8010a5c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010a44:	683b      	ldr	r3, [r7, #0]
 8010a46:	885b      	ldrh	r3, [r3, #2]
 8010a48:	2b01      	cmp	r3, #1
 8010a4a:	d10c      	bne.n	8010a66 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	2200      	movs	r2, #0
 8010a50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010a54:	6878      	ldr	r0, [r7, #4]
 8010a56:	f000 f910 	bl	8010c7a <USBD_CtlSendStatus>
      }
      break;
 8010a5a:	e004      	b.n	8010a66 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010a5c:	6839      	ldr	r1, [r7, #0]
 8010a5e:	6878      	ldr	r0, [r7, #4]
 8010a60:	f000 f840 	bl	8010ae4 <USBD_CtlError>
      break;
 8010a64:	e000      	b.n	8010a68 <USBD_ClrFeature+0x3c>
      break;
 8010a66:	bf00      	nop
  }
}
 8010a68:	bf00      	nop
 8010a6a:	3708      	adds	r7, #8
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bd80      	pop	{r7, pc}

08010a70 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b084      	sub	sp, #16
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
 8010a78:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	781a      	ldrb	r2, [r3, #0]
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	3301      	adds	r3, #1
 8010a8a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	781a      	ldrb	r2, [r3, #0]
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	3301      	adds	r3, #1
 8010a98:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010a9a:	68f8      	ldr	r0, [r7, #12]
 8010a9c:	f7ff fabb 	bl	8010016 <SWAPBYTE>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	461a      	mov	r2, r3
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	3301      	adds	r3, #1
 8010aac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	3301      	adds	r3, #1
 8010ab2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010ab4:	68f8      	ldr	r0, [r7, #12]
 8010ab6:	f7ff faae 	bl	8010016 <SWAPBYTE>
 8010aba:	4603      	mov	r3, r0
 8010abc:	461a      	mov	r2, r3
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	3301      	adds	r3, #1
 8010ac6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	3301      	adds	r3, #1
 8010acc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010ace:	68f8      	ldr	r0, [r7, #12]
 8010ad0:	f7ff faa1 	bl	8010016 <SWAPBYTE>
 8010ad4:	4603      	mov	r3, r0
 8010ad6:	461a      	mov	r2, r3
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	80da      	strh	r2, [r3, #6]
}
 8010adc:	bf00      	nop
 8010ade:	3710      	adds	r7, #16
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}

08010ae4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b082      	sub	sp, #8
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
 8010aec:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010aee:	2180      	movs	r1, #128	; 0x80
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f003 fc89 	bl	8014408 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010af6:	2100      	movs	r1, #0
 8010af8:	6878      	ldr	r0, [r7, #4]
 8010afa:	f003 fc85 	bl	8014408 <USBD_LL_StallEP>
}
 8010afe:	bf00      	nop
 8010b00:	3708      	adds	r7, #8
 8010b02:	46bd      	mov	sp, r7
 8010b04:	bd80      	pop	{r7, pc}

08010b06 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010b06:	b580      	push	{r7, lr}
 8010b08:	b086      	sub	sp, #24
 8010b0a:	af00      	add	r7, sp, #0
 8010b0c:	60f8      	str	r0, [r7, #12]
 8010b0e:	60b9      	str	r1, [r7, #8]
 8010b10:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010b12:	2300      	movs	r3, #0
 8010b14:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d036      	beq.n	8010b8a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010b20:	6938      	ldr	r0, [r7, #16]
 8010b22:	f000 f836 	bl	8010b92 <USBD_GetLen>
 8010b26:	4603      	mov	r3, r0
 8010b28:	3301      	adds	r3, #1
 8010b2a:	b29b      	uxth	r3, r3
 8010b2c:	005b      	lsls	r3, r3, #1
 8010b2e:	b29a      	uxth	r2, r3
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010b34:	7dfb      	ldrb	r3, [r7, #23]
 8010b36:	68ba      	ldr	r2, [r7, #8]
 8010b38:	4413      	add	r3, r2
 8010b3a:	687a      	ldr	r2, [r7, #4]
 8010b3c:	7812      	ldrb	r2, [r2, #0]
 8010b3e:	701a      	strb	r2, [r3, #0]
  idx++;
 8010b40:	7dfb      	ldrb	r3, [r7, #23]
 8010b42:	3301      	adds	r3, #1
 8010b44:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010b46:	7dfb      	ldrb	r3, [r7, #23]
 8010b48:	68ba      	ldr	r2, [r7, #8]
 8010b4a:	4413      	add	r3, r2
 8010b4c:	2203      	movs	r2, #3
 8010b4e:	701a      	strb	r2, [r3, #0]
  idx++;
 8010b50:	7dfb      	ldrb	r3, [r7, #23]
 8010b52:	3301      	adds	r3, #1
 8010b54:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010b56:	e013      	b.n	8010b80 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010b58:	7dfb      	ldrb	r3, [r7, #23]
 8010b5a:	68ba      	ldr	r2, [r7, #8]
 8010b5c:	4413      	add	r3, r2
 8010b5e:	693a      	ldr	r2, [r7, #16]
 8010b60:	7812      	ldrb	r2, [r2, #0]
 8010b62:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010b64:	693b      	ldr	r3, [r7, #16]
 8010b66:	3301      	adds	r3, #1
 8010b68:	613b      	str	r3, [r7, #16]
    idx++;
 8010b6a:	7dfb      	ldrb	r3, [r7, #23]
 8010b6c:	3301      	adds	r3, #1
 8010b6e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010b70:	7dfb      	ldrb	r3, [r7, #23]
 8010b72:	68ba      	ldr	r2, [r7, #8]
 8010b74:	4413      	add	r3, r2
 8010b76:	2200      	movs	r2, #0
 8010b78:	701a      	strb	r2, [r3, #0]
    idx++;
 8010b7a:	7dfb      	ldrb	r3, [r7, #23]
 8010b7c:	3301      	adds	r3, #1
 8010b7e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010b80:	693b      	ldr	r3, [r7, #16]
 8010b82:	781b      	ldrb	r3, [r3, #0]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d1e7      	bne.n	8010b58 <USBD_GetString+0x52>
 8010b88:	e000      	b.n	8010b8c <USBD_GetString+0x86>
    return;
 8010b8a:	bf00      	nop
  }
}
 8010b8c:	3718      	adds	r7, #24
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}

08010b92 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010b92:	b480      	push	{r7}
 8010b94:	b085      	sub	sp, #20
 8010b96:	af00      	add	r7, sp, #0
 8010b98:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010ba2:	e005      	b.n	8010bb0 <USBD_GetLen+0x1e>
  {
    len++;
 8010ba4:	7bfb      	ldrb	r3, [r7, #15]
 8010ba6:	3301      	adds	r3, #1
 8010ba8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010baa:	68bb      	ldr	r3, [r7, #8]
 8010bac:	3301      	adds	r3, #1
 8010bae:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010bb0:	68bb      	ldr	r3, [r7, #8]
 8010bb2:	781b      	ldrb	r3, [r3, #0]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d1f5      	bne.n	8010ba4 <USBD_GetLen+0x12>
  }

  return len;
 8010bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bba:	4618      	mov	r0, r3
 8010bbc:	3714      	adds	r7, #20
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc4:	4770      	bx	lr

08010bc6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010bc6:	b580      	push	{r7, lr}
 8010bc8:	b084      	sub	sp, #16
 8010bca:	af00      	add	r7, sp, #0
 8010bcc:	60f8      	str	r0, [r7, #12]
 8010bce:	60b9      	str	r1, [r7, #8]
 8010bd0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	2202      	movs	r2, #2
 8010bd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	687a      	ldr	r2, [r7, #4]
 8010bde:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	687a      	ldr	r2, [r7, #4]
 8010be4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	68ba      	ldr	r2, [r7, #8]
 8010bea:	2100      	movs	r1, #0
 8010bec:	68f8      	ldr	r0, [r7, #12]
 8010bee:	f003 fcd9 	bl	80145a4 <USBD_LL_Transmit>

  return USBD_OK;
 8010bf2:	2300      	movs	r3, #0
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3710      	adds	r7, #16
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}

08010bfc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b084      	sub	sp, #16
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	60f8      	str	r0, [r7, #12]
 8010c04:	60b9      	str	r1, [r7, #8]
 8010c06:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	68ba      	ldr	r2, [r7, #8]
 8010c0c:	2100      	movs	r1, #0
 8010c0e:	68f8      	ldr	r0, [r7, #12]
 8010c10:	f003 fcc8 	bl	80145a4 <USBD_LL_Transmit>

  return USBD_OK;
 8010c14:	2300      	movs	r3, #0
}
 8010c16:	4618      	mov	r0, r3
 8010c18:	3710      	adds	r7, #16
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	bd80      	pop	{r7, pc}

08010c1e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010c1e:	b580      	push	{r7, lr}
 8010c20:	b084      	sub	sp, #16
 8010c22:	af00      	add	r7, sp, #0
 8010c24:	60f8      	str	r0, [r7, #12]
 8010c26:	60b9      	str	r1, [r7, #8]
 8010c28:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	2203      	movs	r2, #3
 8010c2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	687a      	ldr	r2, [r7, #4]
 8010c36:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	687a      	ldr	r2, [r7, #4]
 8010c3e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	68ba      	ldr	r2, [r7, #8]
 8010c46:	2100      	movs	r1, #0
 8010c48:	68f8      	ldr	r0, [r7, #12]
 8010c4a:	f003 fce3 	bl	8014614 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010c4e:	2300      	movs	r3, #0
}
 8010c50:	4618      	mov	r0, r3
 8010c52:	3710      	adds	r7, #16
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}

08010c58 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b084      	sub	sp, #16
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	60f8      	str	r0, [r7, #12]
 8010c60:	60b9      	str	r1, [r7, #8]
 8010c62:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	68ba      	ldr	r2, [r7, #8]
 8010c68:	2100      	movs	r1, #0
 8010c6a:	68f8      	ldr	r0, [r7, #12]
 8010c6c:	f003 fcd2 	bl	8014614 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010c70:	2300      	movs	r3, #0
}
 8010c72:	4618      	mov	r0, r3
 8010c74:	3710      	adds	r7, #16
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd80      	pop	{r7, pc}

08010c7a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010c7a:	b580      	push	{r7, lr}
 8010c7c:	b082      	sub	sp, #8
 8010c7e:	af00      	add	r7, sp, #0
 8010c80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	2204      	movs	r2, #4
 8010c86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	2100      	movs	r1, #0
 8010c90:	6878      	ldr	r0, [r7, #4]
 8010c92:	f003 fc87 	bl	80145a4 <USBD_LL_Transmit>

  return USBD_OK;
 8010c96:	2300      	movs	r3, #0
}
 8010c98:	4618      	mov	r0, r3
 8010c9a:	3708      	adds	r7, #8
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}

08010ca0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b082      	sub	sp, #8
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	2205      	movs	r2, #5
 8010cac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	2100      	movs	r1, #0
 8010cb6:	6878      	ldr	r0, [r7, #4]
 8010cb8:	f003 fcac 	bl	8014614 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010cbc:	2300      	movs	r3, #0
}
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	3708      	adds	r7, #8
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	bd80      	pop	{r7, pc}
	...

08010cc8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b084      	sub	sp, #16
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	4603      	mov	r3, r0
 8010cd0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010cd2:	79fb      	ldrb	r3, [r7, #7]
 8010cd4:	4a08      	ldr	r2, [pc, #32]	; (8010cf8 <disk_status+0x30>)
 8010cd6:	009b      	lsls	r3, r3, #2
 8010cd8:	4413      	add	r3, r2
 8010cda:	685b      	ldr	r3, [r3, #4]
 8010cdc:	685b      	ldr	r3, [r3, #4]
 8010cde:	79fa      	ldrb	r2, [r7, #7]
 8010ce0:	4905      	ldr	r1, [pc, #20]	; (8010cf8 <disk_status+0x30>)
 8010ce2:	440a      	add	r2, r1
 8010ce4:	7a12      	ldrb	r2, [r2, #8]
 8010ce6:	4610      	mov	r0, r2
 8010ce8:	4798      	blx	r3
 8010cea:	4603      	mov	r3, r0
 8010cec:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	3710      	adds	r7, #16
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	bd80      	pop	{r7, pc}
 8010cf8:	20001354 	.word	0x20001354

08010cfc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b084      	sub	sp, #16
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	4603      	mov	r3, r0
 8010d04:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010d06:	2300      	movs	r3, #0
 8010d08:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010d0a:	79fb      	ldrb	r3, [r7, #7]
 8010d0c:	4a0d      	ldr	r2, [pc, #52]	; (8010d44 <disk_initialize+0x48>)
 8010d0e:	5cd3      	ldrb	r3, [r2, r3]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d111      	bne.n	8010d38 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010d14:	79fb      	ldrb	r3, [r7, #7]
 8010d16:	4a0b      	ldr	r2, [pc, #44]	; (8010d44 <disk_initialize+0x48>)
 8010d18:	2101      	movs	r1, #1
 8010d1a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010d1c:	79fb      	ldrb	r3, [r7, #7]
 8010d1e:	4a09      	ldr	r2, [pc, #36]	; (8010d44 <disk_initialize+0x48>)
 8010d20:	009b      	lsls	r3, r3, #2
 8010d22:	4413      	add	r3, r2
 8010d24:	685b      	ldr	r3, [r3, #4]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	79fa      	ldrb	r2, [r7, #7]
 8010d2a:	4906      	ldr	r1, [pc, #24]	; (8010d44 <disk_initialize+0x48>)
 8010d2c:	440a      	add	r2, r1
 8010d2e:	7a12      	ldrb	r2, [r2, #8]
 8010d30:	4610      	mov	r0, r2
 8010d32:	4798      	blx	r3
 8010d34:	4603      	mov	r3, r0
 8010d36:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	3710      	adds	r7, #16
 8010d3e:	46bd      	mov	sp, r7
 8010d40:	bd80      	pop	{r7, pc}
 8010d42:	bf00      	nop
 8010d44:	20001354 	.word	0x20001354

08010d48 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010d48:	b590      	push	{r4, r7, lr}
 8010d4a:	b087      	sub	sp, #28
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	60b9      	str	r1, [r7, #8]
 8010d50:	607a      	str	r2, [r7, #4]
 8010d52:	603b      	str	r3, [r7, #0]
 8010d54:	4603      	mov	r3, r0
 8010d56:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010d58:	7bfb      	ldrb	r3, [r7, #15]
 8010d5a:	4a0a      	ldr	r2, [pc, #40]	; (8010d84 <disk_read+0x3c>)
 8010d5c:	009b      	lsls	r3, r3, #2
 8010d5e:	4413      	add	r3, r2
 8010d60:	685b      	ldr	r3, [r3, #4]
 8010d62:	689c      	ldr	r4, [r3, #8]
 8010d64:	7bfb      	ldrb	r3, [r7, #15]
 8010d66:	4a07      	ldr	r2, [pc, #28]	; (8010d84 <disk_read+0x3c>)
 8010d68:	4413      	add	r3, r2
 8010d6a:	7a18      	ldrb	r0, [r3, #8]
 8010d6c:	683b      	ldr	r3, [r7, #0]
 8010d6e:	687a      	ldr	r2, [r7, #4]
 8010d70:	68b9      	ldr	r1, [r7, #8]
 8010d72:	47a0      	blx	r4
 8010d74:	4603      	mov	r3, r0
 8010d76:	75fb      	strb	r3, [r7, #23]
  return res;
 8010d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	371c      	adds	r7, #28
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	bd90      	pop	{r4, r7, pc}
 8010d82:	bf00      	nop
 8010d84:	20001354 	.word	0x20001354

08010d88 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010d88:	b590      	push	{r4, r7, lr}
 8010d8a:	b087      	sub	sp, #28
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	60b9      	str	r1, [r7, #8]
 8010d90:	607a      	str	r2, [r7, #4]
 8010d92:	603b      	str	r3, [r7, #0]
 8010d94:	4603      	mov	r3, r0
 8010d96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010d98:	7bfb      	ldrb	r3, [r7, #15]
 8010d9a:	4a0a      	ldr	r2, [pc, #40]	; (8010dc4 <disk_write+0x3c>)
 8010d9c:	009b      	lsls	r3, r3, #2
 8010d9e:	4413      	add	r3, r2
 8010da0:	685b      	ldr	r3, [r3, #4]
 8010da2:	68dc      	ldr	r4, [r3, #12]
 8010da4:	7bfb      	ldrb	r3, [r7, #15]
 8010da6:	4a07      	ldr	r2, [pc, #28]	; (8010dc4 <disk_write+0x3c>)
 8010da8:	4413      	add	r3, r2
 8010daa:	7a18      	ldrb	r0, [r3, #8]
 8010dac:	683b      	ldr	r3, [r7, #0]
 8010dae:	687a      	ldr	r2, [r7, #4]
 8010db0:	68b9      	ldr	r1, [r7, #8]
 8010db2:	47a0      	blx	r4
 8010db4:	4603      	mov	r3, r0
 8010db6:	75fb      	strb	r3, [r7, #23]
  return res;
 8010db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dba:	4618      	mov	r0, r3
 8010dbc:	371c      	adds	r7, #28
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	bd90      	pop	{r4, r7, pc}
 8010dc2:	bf00      	nop
 8010dc4:	20001354 	.word	0x20001354

08010dc8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b084      	sub	sp, #16
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	4603      	mov	r3, r0
 8010dd0:	603a      	str	r2, [r7, #0]
 8010dd2:	71fb      	strb	r3, [r7, #7]
 8010dd4:	460b      	mov	r3, r1
 8010dd6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010dd8:	79fb      	ldrb	r3, [r7, #7]
 8010dda:	4a09      	ldr	r2, [pc, #36]	; (8010e00 <disk_ioctl+0x38>)
 8010ddc:	009b      	lsls	r3, r3, #2
 8010dde:	4413      	add	r3, r2
 8010de0:	685b      	ldr	r3, [r3, #4]
 8010de2:	691b      	ldr	r3, [r3, #16]
 8010de4:	79fa      	ldrb	r2, [r7, #7]
 8010de6:	4906      	ldr	r1, [pc, #24]	; (8010e00 <disk_ioctl+0x38>)
 8010de8:	440a      	add	r2, r1
 8010dea:	7a10      	ldrb	r0, [r2, #8]
 8010dec:	79b9      	ldrb	r1, [r7, #6]
 8010dee:	683a      	ldr	r2, [r7, #0]
 8010df0:	4798      	blx	r3
 8010df2:	4603      	mov	r3, r0
 8010df4:	73fb      	strb	r3, [r7, #15]
  return res;
 8010df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010df8:	4618      	mov	r0, r3
 8010dfa:	3710      	adds	r7, #16
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	bd80      	pop	{r7, pc}
 8010e00:	20001354 	.word	0x20001354

08010e04 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010e04:	b480      	push	{r7}
 8010e06:	b085      	sub	sp, #20
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	3301      	adds	r3, #1
 8010e10:	781b      	ldrb	r3, [r3, #0]
 8010e12:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010e14:	89fb      	ldrh	r3, [r7, #14]
 8010e16:	021b      	lsls	r3, r3, #8
 8010e18:	b21a      	sxth	r2, r3
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	781b      	ldrb	r3, [r3, #0]
 8010e1e:	b21b      	sxth	r3, r3
 8010e20:	4313      	orrs	r3, r2
 8010e22:	b21b      	sxth	r3, r3
 8010e24:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010e26:	89fb      	ldrh	r3, [r7, #14]
}
 8010e28:	4618      	mov	r0, r3
 8010e2a:	3714      	adds	r7, #20
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e32:	4770      	bx	lr

08010e34 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010e34:	b480      	push	{r7}
 8010e36:	b085      	sub	sp, #20
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	3303      	adds	r3, #3
 8010e40:	781b      	ldrb	r3, [r3, #0]
 8010e42:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	021b      	lsls	r3, r3, #8
 8010e48:	687a      	ldr	r2, [r7, #4]
 8010e4a:	3202      	adds	r2, #2
 8010e4c:	7812      	ldrb	r2, [r2, #0]
 8010e4e:	4313      	orrs	r3, r2
 8010e50:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	021b      	lsls	r3, r3, #8
 8010e56:	687a      	ldr	r2, [r7, #4]
 8010e58:	3201      	adds	r2, #1
 8010e5a:	7812      	ldrb	r2, [r2, #0]
 8010e5c:	4313      	orrs	r3, r2
 8010e5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	021b      	lsls	r3, r3, #8
 8010e64:	687a      	ldr	r2, [r7, #4]
 8010e66:	7812      	ldrb	r2, [r2, #0]
 8010e68:	4313      	orrs	r3, r2
 8010e6a:	60fb      	str	r3, [r7, #12]
	return rv;
 8010e6c:	68fb      	ldr	r3, [r7, #12]
}
 8010e6e:	4618      	mov	r0, r3
 8010e70:	3714      	adds	r7, #20
 8010e72:	46bd      	mov	sp, r7
 8010e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e78:	4770      	bx	lr

08010e7a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010e7a:	b480      	push	{r7}
 8010e7c:	b083      	sub	sp, #12
 8010e7e:	af00      	add	r7, sp, #0
 8010e80:	6078      	str	r0, [r7, #4]
 8010e82:	460b      	mov	r3, r1
 8010e84:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	1c5a      	adds	r2, r3, #1
 8010e8a:	607a      	str	r2, [r7, #4]
 8010e8c:	887a      	ldrh	r2, [r7, #2]
 8010e8e:	b2d2      	uxtb	r2, r2
 8010e90:	701a      	strb	r2, [r3, #0]
 8010e92:	887b      	ldrh	r3, [r7, #2]
 8010e94:	0a1b      	lsrs	r3, r3, #8
 8010e96:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	1c5a      	adds	r2, r3, #1
 8010e9c:	607a      	str	r2, [r7, #4]
 8010e9e:	887a      	ldrh	r2, [r7, #2]
 8010ea0:	b2d2      	uxtb	r2, r2
 8010ea2:	701a      	strb	r2, [r3, #0]
}
 8010ea4:	bf00      	nop
 8010ea6:	370c      	adds	r7, #12
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eae:	4770      	bx	lr

08010eb0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010eb0:	b480      	push	{r7}
 8010eb2:	b083      	sub	sp, #12
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
 8010eb8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	1c5a      	adds	r2, r3, #1
 8010ebe:	607a      	str	r2, [r7, #4]
 8010ec0:	683a      	ldr	r2, [r7, #0]
 8010ec2:	b2d2      	uxtb	r2, r2
 8010ec4:	701a      	strb	r2, [r3, #0]
 8010ec6:	683b      	ldr	r3, [r7, #0]
 8010ec8:	0a1b      	lsrs	r3, r3, #8
 8010eca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	1c5a      	adds	r2, r3, #1
 8010ed0:	607a      	str	r2, [r7, #4]
 8010ed2:	683a      	ldr	r2, [r7, #0]
 8010ed4:	b2d2      	uxtb	r2, r2
 8010ed6:	701a      	strb	r2, [r3, #0]
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	0a1b      	lsrs	r3, r3, #8
 8010edc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	1c5a      	adds	r2, r3, #1
 8010ee2:	607a      	str	r2, [r7, #4]
 8010ee4:	683a      	ldr	r2, [r7, #0]
 8010ee6:	b2d2      	uxtb	r2, r2
 8010ee8:	701a      	strb	r2, [r3, #0]
 8010eea:	683b      	ldr	r3, [r7, #0]
 8010eec:	0a1b      	lsrs	r3, r3, #8
 8010eee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	1c5a      	adds	r2, r3, #1
 8010ef4:	607a      	str	r2, [r7, #4]
 8010ef6:	683a      	ldr	r2, [r7, #0]
 8010ef8:	b2d2      	uxtb	r2, r2
 8010efa:	701a      	strb	r2, [r3, #0]
}
 8010efc:	bf00      	nop
 8010efe:	370c      	adds	r7, #12
 8010f00:	46bd      	mov	sp, r7
 8010f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f06:	4770      	bx	lr

08010f08 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010f08:	b480      	push	{r7}
 8010f0a:	b087      	sub	sp, #28
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	60f8      	str	r0, [r7, #12]
 8010f10:	60b9      	str	r1, [r7, #8]
 8010f12:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010f18:	68bb      	ldr	r3, [r7, #8]
 8010f1a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d00d      	beq.n	8010f3e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010f22:	693a      	ldr	r2, [r7, #16]
 8010f24:	1c53      	adds	r3, r2, #1
 8010f26:	613b      	str	r3, [r7, #16]
 8010f28:	697b      	ldr	r3, [r7, #20]
 8010f2a:	1c59      	adds	r1, r3, #1
 8010f2c:	6179      	str	r1, [r7, #20]
 8010f2e:	7812      	ldrb	r2, [r2, #0]
 8010f30:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	3b01      	subs	r3, #1
 8010f36:	607b      	str	r3, [r7, #4]
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d1f1      	bne.n	8010f22 <mem_cpy+0x1a>
	}
}
 8010f3e:	bf00      	nop
 8010f40:	371c      	adds	r7, #28
 8010f42:	46bd      	mov	sp, r7
 8010f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f48:	4770      	bx	lr

08010f4a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010f4a:	b480      	push	{r7}
 8010f4c:	b087      	sub	sp, #28
 8010f4e:	af00      	add	r7, sp, #0
 8010f50:	60f8      	str	r0, [r7, #12]
 8010f52:	60b9      	str	r1, [r7, #8]
 8010f54:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010f5a:	697b      	ldr	r3, [r7, #20]
 8010f5c:	1c5a      	adds	r2, r3, #1
 8010f5e:	617a      	str	r2, [r7, #20]
 8010f60:	68ba      	ldr	r2, [r7, #8]
 8010f62:	b2d2      	uxtb	r2, r2
 8010f64:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	3b01      	subs	r3, #1
 8010f6a:	607b      	str	r3, [r7, #4]
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d1f3      	bne.n	8010f5a <mem_set+0x10>
}
 8010f72:	bf00      	nop
 8010f74:	bf00      	nop
 8010f76:	371c      	adds	r7, #28
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7e:	4770      	bx	lr

08010f80 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010f80:	b480      	push	{r7}
 8010f82:	b089      	sub	sp, #36	; 0x24
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	60f8      	str	r0, [r7, #12]
 8010f88:	60b9      	str	r1, [r7, #8]
 8010f8a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	61fb      	str	r3, [r7, #28]
 8010f90:	68bb      	ldr	r3, [r7, #8]
 8010f92:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010f94:	2300      	movs	r3, #0
 8010f96:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010f98:	69fb      	ldr	r3, [r7, #28]
 8010f9a:	1c5a      	adds	r2, r3, #1
 8010f9c:	61fa      	str	r2, [r7, #28]
 8010f9e:	781b      	ldrb	r3, [r3, #0]
 8010fa0:	4619      	mov	r1, r3
 8010fa2:	69bb      	ldr	r3, [r7, #24]
 8010fa4:	1c5a      	adds	r2, r3, #1
 8010fa6:	61ba      	str	r2, [r7, #24]
 8010fa8:	781b      	ldrb	r3, [r3, #0]
 8010faa:	1acb      	subs	r3, r1, r3
 8010fac:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	3b01      	subs	r3, #1
 8010fb2:	607b      	str	r3, [r7, #4]
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d002      	beq.n	8010fc0 <mem_cmp+0x40>
 8010fba:	697b      	ldr	r3, [r7, #20]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d0eb      	beq.n	8010f98 <mem_cmp+0x18>

	return r;
 8010fc0:	697b      	ldr	r3, [r7, #20]
}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	3724      	adds	r7, #36	; 0x24
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fcc:	4770      	bx	lr

08010fce <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010fce:	b480      	push	{r7}
 8010fd0:	b083      	sub	sp, #12
 8010fd2:	af00      	add	r7, sp, #0
 8010fd4:	6078      	str	r0, [r7, #4]
 8010fd6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010fd8:	e002      	b.n	8010fe0 <chk_chr+0x12>
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	3301      	adds	r3, #1
 8010fde:	607b      	str	r3, [r7, #4]
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	781b      	ldrb	r3, [r3, #0]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d005      	beq.n	8010ff4 <chk_chr+0x26>
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	781b      	ldrb	r3, [r3, #0]
 8010fec:	461a      	mov	r2, r3
 8010fee:	683b      	ldr	r3, [r7, #0]
 8010ff0:	4293      	cmp	r3, r2
 8010ff2:	d1f2      	bne.n	8010fda <chk_chr+0xc>
	return *str;
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	781b      	ldrb	r3, [r3, #0]
}
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	370c      	adds	r7, #12
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011002:	4770      	bx	lr

08011004 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011004:	b480      	push	{r7}
 8011006:	b085      	sub	sp, #20
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
 801100c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801100e:	2300      	movs	r3, #0
 8011010:	60bb      	str	r3, [r7, #8]
 8011012:	68bb      	ldr	r3, [r7, #8]
 8011014:	60fb      	str	r3, [r7, #12]
 8011016:	e029      	b.n	801106c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011018:	4a27      	ldr	r2, [pc, #156]	; (80110b8 <chk_lock+0xb4>)
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	011b      	lsls	r3, r3, #4
 801101e:	4413      	add	r3, r2
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d01d      	beq.n	8011062 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011026:	4a24      	ldr	r2, [pc, #144]	; (80110b8 <chk_lock+0xb4>)
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	011b      	lsls	r3, r3, #4
 801102c:	4413      	add	r3, r2
 801102e:	681a      	ldr	r2, [r3, #0]
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	429a      	cmp	r2, r3
 8011036:	d116      	bne.n	8011066 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011038:	4a1f      	ldr	r2, [pc, #124]	; (80110b8 <chk_lock+0xb4>)
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	011b      	lsls	r3, r3, #4
 801103e:	4413      	add	r3, r2
 8011040:	3304      	adds	r3, #4
 8011042:	681a      	ldr	r2, [r3, #0]
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011048:	429a      	cmp	r2, r3
 801104a:	d10c      	bne.n	8011066 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801104c:	4a1a      	ldr	r2, [pc, #104]	; (80110b8 <chk_lock+0xb4>)
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	011b      	lsls	r3, r3, #4
 8011052:	4413      	add	r3, r2
 8011054:	3308      	adds	r3, #8
 8011056:	681a      	ldr	r2, [r3, #0]
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801105c:	429a      	cmp	r2, r3
 801105e:	d102      	bne.n	8011066 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011060:	e007      	b.n	8011072 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011062:	2301      	movs	r3, #1
 8011064:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	3301      	adds	r3, #1
 801106a:	60fb      	str	r3, [r7, #12]
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	2b01      	cmp	r3, #1
 8011070:	d9d2      	bls.n	8011018 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	2b02      	cmp	r3, #2
 8011076:	d109      	bne.n	801108c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011078:	68bb      	ldr	r3, [r7, #8]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d102      	bne.n	8011084 <chk_lock+0x80>
 801107e:	683b      	ldr	r3, [r7, #0]
 8011080:	2b02      	cmp	r3, #2
 8011082:	d101      	bne.n	8011088 <chk_lock+0x84>
 8011084:	2300      	movs	r3, #0
 8011086:	e010      	b.n	80110aa <chk_lock+0xa6>
 8011088:	2312      	movs	r3, #18
 801108a:	e00e      	b.n	80110aa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801108c:	683b      	ldr	r3, [r7, #0]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d108      	bne.n	80110a4 <chk_lock+0xa0>
 8011092:	4a09      	ldr	r2, [pc, #36]	; (80110b8 <chk_lock+0xb4>)
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	011b      	lsls	r3, r3, #4
 8011098:	4413      	add	r3, r2
 801109a:	330c      	adds	r3, #12
 801109c:	881b      	ldrh	r3, [r3, #0]
 801109e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80110a2:	d101      	bne.n	80110a8 <chk_lock+0xa4>
 80110a4:	2310      	movs	r3, #16
 80110a6:	e000      	b.n	80110aa <chk_lock+0xa6>
 80110a8:	2300      	movs	r3, #0
}
 80110aa:	4618      	mov	r0, r3
 80110ac:	3714      	adds	r7, #20
 80110ae:	46bd      	mov	sp, r7
 80110b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b4:	4770      	bx	lr
 80110b6:	bf00      	nop
 80110b8:	20001334 	.word	0x20001334

080110bc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80110bc:	b480      	push	{r7}
 80110be:	b083      	sub	sp, #12
 80110c0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80110c2:	2300      	movs	r3, #0
 80110c4:	607b      	str	r3, [r7, #4]
 80110c6:	e002      	b.n	80110ce <enq_lock+0x12>
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	3301      	adds	r3, #1
 80110cc:	607b      	str	r3, [r7, #4]
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	2b01      	cmp	r3, #1
 80110d2:	d806      	bhi.n	80110e2 <enq_lock+0x26>
 80110d4:	4a09      	ldr	r2, [pc, #36]	; (80110fc <enq_lock+0x40>)
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	011b      	lsls	r3, r3, #4
 80110da:	4413      	add	r3, r2
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d1f2      	bne.n	80110c8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	2b02      	cmp	r3, #2
 80110e6:	bf14      	ite	ne
 80110e8:	2301      	movne	r3, #1
 80110ea:	2300      	moveq	r3, #0
 80110ec:	b2db      	uxtb	r3, r3
}
 80110ee:	4618      	mov	r0, r3
 80110f0:	370c      	adds	r7, #12
 80110f2:	46bd      	mov	sp, r7
 80110f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f8:	4770      	bx	lr
 80110fa:	bf00      	nop
 80110fc:	20001334 	.word	0x20001334

08011100 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011100:	b480      	push	{r7}
 8011102:	b085      	sub	sp, #20
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
 8011108:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801110a:	2300      	movs	r3, #0
 801110c:	60fb      	str	r3, [r7, #12]
 801110e:	e01f      	b.n	8011150 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011110:	4a41      	ldr	r2, [pc, #260]	; (8011218 <inc_lock+0x118>)
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	011b      	lsls	r3, r3, #4
 8011116:	4413      	add	r3, r2
 8011118:	681a      	ldr	r2, [r3, #0]
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	429a      	cmp	r2, r3
 8011120:	d113      	bne.n	801114a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011122:	4a3d      	ldr	r2, [pc, #244]	; (8011218 <inc_lock+0x118>)
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	011b      	lsls	r3, r3, #4
 8011128:	4413      	add	r3, r2
 801112a:	3304      	adds	r3, #4
 801112c:	681a      	ldr	r2, [r3, #0]
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011132:	429a      	cmp	r2, r3
 8011134:	d109      	bne.n	801114a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011136:	4a38      	ldr	r2, [pc, #224]	; (8011218 <inc_lock+0x118>)
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	011b      	lsls	r3, r3, #4
 801113c:	4413      	add	r3, r2
 801113e:	3308      	adds	r3, #8
 8011140:	681a      	ldr	r2, [r3, #0]
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011146:	429a      	cmp	r2, r3
 8011148:	d006      	beq.n	8011158 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	3301      	adds	r3, #1
 801114e:	60fb      	str	r3, [r7, #12]
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	2b01      	cmp	r3, #1
 8011154:	d9dc      	bls.n	8011110 <inc_lock+0x10>
 8011156:	e000      	b.n	801115a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011158:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	2b02      	cmp	r3, #2
 801115e:	d132      	bne.n	80111c6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011160:	2300      	movs	r3, #0
 8011162:	60fb      	str	r3, [r7, #12]
 8011164:	e002      	b.n	801116c <inc_lock+0x6c>
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	3301      	adds	r3, #1
 801116a:	60fb      	str	r3, [r7, #12]
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	2b01      	cmp	r3, #1
 8011170:	d806      	bhi.n	8011180 <inc_lock+0x80>
 8011172:	4a29      	ldr	r2, [pc, #164]	; (8011218 <inc_lock+0x118>)
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	011b      	lsls	r3, r3, #4
 8011178:	4413      	add	r3, r2
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d1f2      	bne.n	8011166 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	2b02      	cmp	r3, #2
 8011184:	d101      	bne.n	801118a <inc_lock+0x8a>
 8011186:	2300      	movs	r3, #0
 8011188:	e040      	b.n	801120c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	681a      	ldr	r2, [r3, #0]
 801118e:	4922      	ldr	r1, [pc, #136]	; (8011218 <inc_lock+0x118>)
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	011b      	lsls	r3, r3, #4
 8011194:	440b      	add	r3, r1
 8011196:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	689a      	ldr	r2, [r3, #8]
 801119c:	491e      	ldr	r1, [pc, #120]	; (8011218 <inc_lock+0x118>)
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	011b      	lsls	r3, r3, #4
 80111a2:	440b      	add	r3, r1
 80111a4:	3304      	adds	r3, #4
 80111a6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	695a      	ldr	r2, [r3, #20]
 80111ac:	491a      	ldr	r1, [pc, #104]	; (8011218 <inc_lock+0x118>)
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	011b      	lsls	r3, r3, #4
 80111b2:	440b      	add	r3, r1
 80111b4:	3308      	adds	r3, #8
 80111b6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80111b8:	4a17      	ldr	r2, [pc, #92]	; (8011218 <inc_lock+0x118>)
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	011b      	lsls	r3, r3, #4
 80111be:	4413      	add	r3, r2
 80111c0:	330c      	adds	r3, #12
 80111c2:	2200      	movs	r2, #0
 80111c4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d009      	beq.n	80111e0 <inc_lock+0xe0>
 80111cc:	4a12      	ldr	r2, [pc, #72]	; (8011218 <inc_lock+0x118>)
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	011b      	lsls	r3, r3, #4
 80111d2:	4413      	add	r3, r2
 80111d4:	330c      	adds	r3, #12
 80111d6:	881b      	ldrh	r3, [r3, #0]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d001      	beq.n	80111e0 <inc_lock+0xe0>
 80111dc:	2300      	movs	r3, #0
 80111de:	e015      	b.n	801120c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80111e0:	683b      	ldr	r3, [r7, #0]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d108      	bne.n	80111f8 <inc_lock+0xf8>
 80111e6:	4a0c      	ldr	r2, [pc, #48]	; (8011218 <inc_lock+0x118>)
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	011b      	lsls	r3, r3, #4
 80111ec:	4413      	add	r3, r2
 80111ee:	330c      	adds	r3, #12
 80111f0:	881b      	ldrh	r3, [r3, #0]
 80111f2:	3301      	adds	r3, #1
 80111f4:	b29a      	uxth	r2, r3
 80111f6:	e001      	b.n	80111fc <inc_lock+0xfc>
 80111f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80111fc:	4906      	ldr	r1, [pc, #24]	; (8011218 <inc_lock+0x118>)
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	011b      	lsls	r3, r3, #4
 8011202:	440b      	add	r3, r1
 8011204:	330c      	adds	r3, #12
 8011206:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	3301      	adds	r3, #1
}
 801120c:	4618      	mov	r0, r3
 801120e:	3714      	adds	r7, #20
 8011210:	46bd      	mov	sp, r7
 8011212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011216:	4770      	bx	lr
 8011218:	20001334 	.word	0x20001334

0801121c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801121c:	b480      	push	{r7}
 801121e:	b085      	sub	sp, #20
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	3b01      	subs	r3, #1
 8011228:	607b      	str	r3, [r7, #4]
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	2b01      	cmp	r3, #1
 801122e:	d825      	bhi.n	801127c <dec_lock+0x60>
		n = Files[i].ctr;
 8011230:	4a17      	ldr	r2, [pc, #92]	; (8011290 <dec_lock+0x74>)
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	011b      	lsls	r3, r3, #4
 8011236:	4413      	add	r3, r2
 8011238:	330c      	adds	r3, #12
 801123a:	881b      	ldrh	r3, [r3, #0]
 801123c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801123e:	89fb      	ldrh	r3, [r7, #14]
 8011240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011244:	d101      	bne.n	801124a <dec_lock+0x2e>
 8011246:	2300      	movs	r3, #0
 8011248:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801124a:	89fb      	ldrh	r3, [r7, #14]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d002      	beq.n	8011256 <dec_lock+0x3a>
 8011250:	89fb      	ldrh	r3, [r7, #14]
 8011252:	3b01      	subs	r3, #1
 8011254:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011256:	4a0e      	ldr	r2, [pc, #56]	; (8011290 <dec_lock+0x74>)
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	011b      	lsls	r3, r3, #4
 801125c:	4413      	add	r3, r2
 801125e:	330c      	adds	r3, #12
 8011260:	89fa      	ldrh	r2, [r7, #14]
 8011262:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011264:	89fb      	ldrh	r3, [r7, #14]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d105      	bne.n	8011276 <dec_lock+0x5a>
 801126a:	4a09      	ldr	r2, [pc, #36]	; (8011290 <dec_lock+0x74>)
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	011b      	lsls	r3, r3, #4
 8011270:	4413      	add	r3, r2
 8011272:	2200      	movs	r2, #0
 8011274:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011276:	2300      	movs	r3, #0
 8011278:	737b      	strb	r3, [r7, #13]
 801127a:	e001      	b.n	8011280 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801127c:	2302      	movs	r3, #2
 801127e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011280:	7b7b      	ldrb	r3, [r7, #13]
}
 8011282:	4618      	mov	r0, r3
 8011284:	3714      	adds	r7, #20
 8011286:	46bd      	mov	sp, r7
 8011288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128c:	4770      	bx	lr
 801128e:	bf00      	nop
 8011290:	20001334 	.word	0x20001334

08011294 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011294:	b480      	push	{r7}
 8011296:	b085      	sub	sp, #20
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801129c:	2300      	movs	r3, #0
 801129e:	60fb      	str	r3, [r7, #12]
 80112a0:	e010      	b.n	80112c4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80112a2:	4a0d      	ldr	r2, [pc, #52]	; (80112d8 <clear_lock+0x44>)
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	011b      	lsls	r3, r3, #4
 80112a8:	4413      	add	r3, r2
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	687a      	ldr	r2, [r7, #4]
 80112ae:	429a      	cmp	r2, r3
 80112b0:	d105      	bne.n	80112be <clear_lock+0x2a>
 80112b2:	4a09      	ldr	r2, [pc, #36]	; (80112d8 <clear_lock+0x44>)
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	011b      	lsls	r3, r3, #4
 80112b8:	4413      	add	r3, r2
 80112ba:	2200      	movs	r2, #0
 80112bc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	3301      	adds	r3, #1
 80112c2:	60fb      	str	r3, [r7, #12]
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	2b01      	cmp	r3, #1
 80112c8:	d9eb      	bls.n	80112a2 <clear_lock+0xe>
	}
}
 80112ca:	bf00      	nop
 80112cc:	bf00      	nop
 80112ce:	3714      	adds	r7, #20
 80112d0:	46bd      	mov	sp, r7
 80112d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d6:	4770      	bx	lr
 80112d8:	20001334 	.word	0x20001334

080112dc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80112dc:	b580      	push	{r7, lr}
 80112de:	b086      	sub	sp, #24
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80112e4:	2300      	movs	r3, #0
 80112e6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	78db      	ldrb	r3, [r3, #3]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d034      	beq.n	801135a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112f4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	7858      	ldrb	r0, [r3, #1]
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011300:	2301      	movs	r3, #1
 8011302:	697a      	ldr	r2, [r7, #20]
 8011304:	f7ff fd40 	bl	8010d88 <disk_write>
 8011308:	4603      	mov	r3, r0
 801130a:	2b00      	cmp	r3, #0
 801130c:	d002      	beq.n	8011314 <sync_window+0x38>
			res = FR_DISK_ERR;
 801130e:	2301      	movs	r3, #1
 8011310:	73fb      	strb	r3, [r7, #15]
 8011312:	e022      	b.n	801135a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	2200      	movs	r2, #0
 8011318:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	6a1b      	ldr	r3, [r3, #32]
 801131e:	697a      	ldr	r2, [r7, #20]
 8011320:	1ad2      	subs	r2, r2, r3
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	699b      	ldr	r3, [r3, #24]
 8011326:	429a      	cmp	r2, r3
 8011328:	d217      	bcs.n	801135a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	789b      	ldrb	r3, [r3, #2]
 801132e:	613b      	str	r3, [r7, #16]
 8011330:	e010      	b.n	8011354 <sync_window+0x78>
					wsect += fs->fsize;
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	699b      	ldr	r3, [r3, #24]
 8011336:	697a      	ldr	r2, [r7, #20]
 8011338:	4413      	add	r3, r2
 801133a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	7858      	ldrb	r0, [r3, #1]
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011346:	2301      	movs	r3, #1
 8011348:	697a      	ldr	r2, [r7, #20]
 801134a:	f7ff fd1d 	bl	8010d88 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801134e:	693b      	ldr	r3, [r7, #16]
 8011350:	3b01      	subs	r3, #1
 8011352:	613b      	str	r3, [r7, #16]
 8011354:	693b      	ldr	r3, [r7, #16]
 8011356:	2b01      	cmp	r3, #1
 8011358:	d8eb      	bhi.n	8011332 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801135a:	7bfb      	ldrb	r3, [r7, #15]
}
 801135c:	4618      	mov	r0, r3
 801135e:	3718      	adds	r7, #24
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}

08011364 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b084      	sub	sp, #16
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
 801136c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801136e:	2300      	movs	r3, #0
 8011370:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011376:	683a      	ldr	r2, [r7, #0]
 8011378:	429a      	cmp	r2, r3
 801137a:	d01b      	beq.n	80113b4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801137c:	6878      	ldr	r0, [r7, #4]
 801137e:	f7ff ffad 	bl	80112dc <sync_window>
 8011382:	4603      	mov	r3, r0
 8011384:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011386:	7bfb      	ldrb	r3, [r7, #15]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d113      	bne.n	80113b4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	7858      	ldrb	r0, [r3, #1]
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011396:	2301      	movs	r3, #1
 8011398:	683a      	ldr	r2, [r7, #0]
 801139a:	f7ff fcd5 	bl	8010d48 <disk_read>
 801139e:	4603      	mov	r3, r0
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d004      	beq.n	80113ae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80113a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80113a8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80113aa:	2301      	movs	r3, #1
 80113ac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	683a      	ldr	r2, [r7, #0]
 80113b2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80113b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80113b6:	4618      	mov	r0, r3
 80113b8:	3710      	adds	r7, #16
 80113ba:	46bd      	mov	sp, r7
 80113bc:	bd80      	pop	{r7, pc}
	...

080113c0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b084      	sub	sp, #16
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80113c8:	6878      	ldr	r0, [r7, #4]
 80113ca:	f7ff ff87 	bl	80112dc <sync_window>
 80113ce:	4603      	mov	r3, r0
 80113d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80113d2:	7bfb      	ldrb	r3, [r7, #15]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d158      	bne.n	801148a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	781b      	ldrb	r3, [r3, #0]
 80113dc:	2b03      	cmp	r3, #3
 80113de:	d148      	bne.n	8011472 <sync_fs+0xb2>
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	791b      	ldrb	r3, [r3, #4]
 80113e4:	2b01      	cmp	r3, #1
 80113e6:	d144      	bne.n	8011472 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	3330      	adds	r3, #48	; 0x30
 80113ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80113f0:	2100      	movs	r1, #0
 80113f2:	4618      	mov	r0, r3
 80113f4:	f7ff fda9 	bl	8010f4a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	3330      	adds	r3, #48	; 0x30
 80113fc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011400:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011404:	4618      	mov	r0, r3
 8011406:	f7ff fd38 	bl	8010e7a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	3330      	adds	r3, #48	; 0x30
 801140e:	4921      	ldr	r1, [pc, #132]	; (8011494 <sync_fs+0xd4>)
 8011410:	4618      	mov	r0, r3
 8011412:	f7ff fd4d 	bl	8010eb0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	3330      	adds	r3, #48	; 0x30
 801141a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801141e:	491e      	ldr	r1, [pc, #120]	; (8011498 <sync_fs+0xd8>)
 8011420:	4618      	mov	r0, r3
 8011422:	f7ff fd45 	bl	8010eb0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	3330      	adds	r3, #48	; 0x30
 801142a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	691b      	ldr	r3, [r3, #16]
 8011432:	4619      	mov	r1, r3
 8011434:	4610      	mov	r0, r2
 8011436:	f7ff fd3b 	bl	8010eb0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	3330      	adds	r3, #48	; 0x30
 801143e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	68db      	ldr	r3, [r3, #12]
 8011446:	4619      	mov	r1, r3
 8011448:	4610      	mov	r0, r2
 801144a:	f7ff fd31 	bl	8010eb0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	69db      	ldr	r3, [r3, #28]
 8011452:	1c5a      	adds	r2, r3, #1
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	7858      	ldrb	r0, [r3, #1]
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011466:	2301      	movs	r3, #1
 8011468:	f7ff fc8e 	bl	8010d88 <disk_write>
			fs->fsi_flag = 0;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	2200      	movs	r2, #0
 8011470:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	785b      	ldrb	r3, [r3, #1]
 8011476:	2200      	movs	r2, #0
 8011478:	2100      	movs	r1, #0
 801147a:	4618      	mov	r0, r3
 801147c:	f7ff fca4 	bl	8010dc8 <disk_ioctl>
 8011480:	4603      	mov	r3, r0
 8011482:	2b00      	cmp	r3, #0
 8011484:	d001      	beq.n	801148a <sync_fs+0xca>
 8011486:	2301      	movs	r3, #1
 8011488:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801148a:	7bfb      	ldrb	r3, [r7, #15]
}
 801148c:	4618      	mov	r0, r3
 801148e:	3710      	adds	r7, #16
 8011490:	46bd      	mov	sp, r7
 8011492:	bd80      	pop	{r7, pc}
 8011494:	41615252 	.word	0x41615252
 8011498:	61417272 	.word	0x61417272

0801149c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801149c:	b480      	push	{r7}
 801149e:	b083      	sub	sp, #12
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
 80114a4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	3b02      	subs	r3, #2
 80114aa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	695b      	ldr	r3, [r3, #20]
 80114b0:	3b02      	subs	r3, #2
 80114b2:	683a      	ldr	r2, [r7, #0]
 80114b4:	429a      	cmp	r2, r3
 80114b6:	d301      	bcc.n	80114bc <clust2sect+0x20>
 80114b8:	2300      	movs	r3, #0
 80114ba:	e008      	b.n	80114ce <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	895b      	ldrh	r3, [r3, #10]
 80114c0:	461a      	mov	r2, r3
 80114c2:	683b      	ldr	r3, [r7, #0]
 80114c4:	fb03 f202 	mul.w	r2, r3, r2
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114cc:	4413      	add	r3, r2
}
 80114ce:	4618      	mov	r0, r3
 80114d0:	370c      	adds	r7, #12
 80114d2:	46bd      	mov	sp, r7
 80114d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d8:	4770      	bx	lr

080114da <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80114da:	b580      	push	{r7, lr}
 80114dc:	b086      	sub	sp, #24
 80114de:	af00      	add	r7, sp, #0
 80114e0:	6078      	str	r0, [r7, #4]
 80114e2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80114ea:	683b      	ldr	r3, [r7, #0]
 80114ec:	2b01      	cmp	r3, #1
 80114ee:	d904      	bls.n	80114fa <get_fat+0x20>
 80114f0:	693b      	ldr	r3, [r7, #16]
 80114f2:	695b      	ldr	r3, [r3, #20]
 80114f4:	683a      	ldr	r2, [r7, #0]
 80114f6:	429a      	cmp	r2, r3
 80114f8:	d302      	bcc.n	8011500 <get_fat+0x26>
		val = 1;	/* Internal error */
 80114fa:	2301      	movs	r3, #1
 80114fc:	617b      	str	r3, [r7, #20]
 80114fe:	e08f      	b.n	8011620 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011504:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011506:	693b      	ldr	r3, [r7, #16]
 8011508:	781b      	ldrb	r3, [r3, #0]
 801150a:	2b03      	cmp	r3, #3
 801150c:	d062      	beq.n	80115d4 <get_fat+0xfa>
 801150e:	2b03      	cmp	r3, #3
 8011510:	dc7c      	bgt.n	801160c <get_fat+0x132>
 8011512:	2b01      	cmp	r3, #1
 8011514:	d002      	beq.n	801151c <get_fat+0x42>
 8011516:	2b02      	cmp	r3, #2
 8011518:	d042      	beq.n	80115a0 <get_fat+0xc6>
 801151a:	e077      	b.n	801160c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801151c:	683b      	ldr	r3, [r7, #0]
 801151e:	60fb      	str	r3, [r7, #12]
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	085b      	lsrs	r3, r3, #1
 8011524:	68fa      	ldr	r2, [r7, #12]
 8011526:	4413      	add	r3, r2
 8011528:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801152a:	693b      	ldr	r3, [r7, #16]
 801152c:	6a1a      	ldr	r2, [r3, #32]
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	0a5b      	lsrs	r3, r3, #9
 8011532:	4413      	add	r3, r2
 8011534:	4619      	mov	r1, r3
 8011536:	6938      	ldr	r0, [r7, #16]
 8011538:	f7ff ff14 	bl	8011364 <move_window>
 801153c:	4603      	mov	r3, r0
 801153e:	2b00      	cmp	r3, #0
 8011540:	d167      	bne.n	8011612 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	1c5a      	adds	r2, r3, #1
 8011546:	60fa      	str	r2, [r7, #12]
 8011548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801154c:	693a      	ldr	r2, [r7, #16]
 801154e:	4413      	add	r3, r2
 8011550:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011554:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011556:	693b      	ldr	r3, [r7, #16]
 8011558:	6a1a      	ldr	r2, [r3, #32]
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	0a5b      	lsrs	r3, r3, #9
 801155e:	4413      	add	r3, r2
 8011560:	4619      	mov	r1, r3
 8011562:	6938      	ldr	r0, [r7, #16]
 8011564:	f7ff fefe 	bl	8011364 <move_window>
 8011568:	4603      	mov	r3, r0
 801156a:	2b00      	cmp	r3, #0
 801156c:	d153      	bne.n	8011616 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011574:	693a      	ldr	r2, [r7, #16]
 8011576:	4413      	add	r3, r2
 8011578:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801157c:	021b      	lsls	r3, r3, #8
 801157e:	461a      	mov	r2, r3
 8011580:	68bb      	ldr	r3, [r7, #8]
 8011582:	4313      	orrs	r3, r2
 8011584:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011586:	683b      	ldr	r3, [r7, #0]
 8011588:	f003 0301 	and.w	r3, r3, #1
 801158c:	2b00      	cmp	r3, #0
 801158e:	d002      	beq.n	8011596 <get_fat+0xbc>
 8011590:	68bb      	ldr	r3, [r7, #8]
 8011592:	091b      	lsrs	r3, r3, #4
 8011594:	e002      	b.n	801159c <get_fat+0xc2>
 8011596:	68bb      	ldr	r3, [r7, #8]
 8011598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801159c:	617b      	str	r3, [r7, #20]
			break;
 801159e:	e03f      	b.n	8011620 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80115a0:	693b      	ldr	r3, [r7, #16]
 80115a2:	6a1a      	ldr	r2, [r3, #32]
 80115a4:	683b      	ldr	r3, [r7, #0]
 80115a6:	0a1b      	lsrs	r3, r3, #8
 80115a8:	4413      	add	r3, r2
 80115aa:	4619      	mov	r1, r3
 80115ac:	6938      	ldr	r0, [r7, #16]
 80115ae:	f7ff fed9 	bl	8011364 <move_window>
 80115b2:	4603      	mov	r3, r0
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d130      	bne.n	801161a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80115b8:	693b      	ldr	r3, [r7, #16]
 80115ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80115be:	683b      	ldr	r3, [r7, #0]
 80115c0:	005b      	lsls	r3, r3, #1
 80115c2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80115c6:	4413      	add	r3, r2
 80115c8:	4618      	mov	r0, r3
 80115ca:	f7ff fc1b 	bl	8010e04 <ld_word>
 80115ce:	4603      	mov	r3, r0
 80115d0:	617b      	str	r3, [r7, #20]
			break;
 80115d2:	e025      	b.n	8011620 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80115d4:	693b      	ldr	r3, [r7, #16]
 80115d6:	6a1a      	ldr	r2, [r3, #32]
 80115d8:	683b      	ldr	r3, [r7, #0]
 80115da:	09db      	lsrs	r3, r3, #7
 80115dc:	4413      	add	r3, r2
 80115de:	4619      	mov	r1, r3
 80115e0:	6938      	ldr	r0, [r7, #16]
 80115e2:	f7ff febf 	bl	8011364 <move_window>
 80115e6:	4603      	mov	r3, r0
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d118      	bne.n	801161e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80115ec:	693b      	ldr	r3, [r7, #16]
 80115ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80115f2:	683b      	ldr	r3, [r7, #0]
 80115f4:	009b      	lsls	r3, r3, #2
 80115f6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80115fa:	4413      	add	r3, r2
 80115fc:	4618      	mov	r0, r3
 80115fe:	f7ff fc19 	bl	8010e34 <ld_dword>
 8011602:	4603      	mov	r3, r0
 8011604:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011608:	617b      	str	r3, [r7, #20]
			break;
 801160a:	e009      	b.n	8011620 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801160c:	2301      	movs	r3, #1
 801160e:	617b      	str	r3, [r7, #20]
 8011610:	e006      	b.n	8011620 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011612:	bf00      	nop
 8011614:	e004      	b.n	8011620 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011616:	bf00      	nop
 8011618:	e002      	b.n	8011620 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801161a:	bf00      	nop
 801161c:	e000      	b.n	8011620 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801161e:	bf00      	nop
		}
	}

	return val;
 8011620:	697b      	ldr	r3, [r7, #20]
}
 8011622:	4618      	mov	r0, r3
 8011624:	3718      	adds	r7, #24
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}

0801162a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801162a:	b590      	push	{r4, r7, lr}
 801162c:	b089      	sub	sp, #36	; 0x24
 801162e:	af00      	add	r7, sp, #0
 8011630:	60f8      	str	r0, [r7, #12]
 8011632:	60b9      	str	r1, [r7, #8]
 8011634:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011636:	2302      	movs	r3, #2
 8011638:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801163a:	68bb      	ldr	r3, [r7, #8]
 801163c:	2b01      	cmp	r3, #1
 801163e:	f240 80d2 	bls.w	80117e6 <put_fat+0x1bc>
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	695b      	ldr	r3, [r3, #20]
 8011646:	68ba      	ldr	r2, [r7, #8]
 8011648:	429a      	cmp	r2, r3
 801164a:	f080 80cc 	bcs.w	80117e6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	781b      	ldrb	r3, [r3, #0]
 8011652:	2b03      	cmp	r3, #3
 8011654:	f000 8096 	beq.w	8011784 <put_fat+0x15a>
 8011658:	2b03      	cmp	r3, #3
 801165a:	f300 80cd 	bgt.w	80117f8 <put_fat+0x1ce>
 801165e:	2b01      	cmp	r3, #1
 8011660:	d002      	beq.n	8011668 <put_fat+0x3e>
 8011662:	2b02      	cmp	r3, #2
 8011664:	d06e      	beq.n	8011744 <put_fat+0x11a>
 8011666:	e0c7      	b.n	80117f8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011668:	68bb      	ldr	r3, [r7, #8]
 801166a:	61bb      	str	r3, [r7, #24]
 801166c:	69bb      	ldr	r3, [r7, #24]
 801166e:	085b      	lsrs	r3, r3, #1
 8011670:	69ba      	ldr	r2, [r7, #24]
 8011672:	4413      	add	r3, r2
 8011674:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	6a1a      	ldr	r2, [r3, #32]
 801167a:	69bb      	ldr	r3, [r7, #24]
 801167c:	0a5b      	lsrs	r3, r3, #9
 801167e:	4413      	add	r3, r2
 8011680:	4619      	mov	r1, r3
 8011682:	68f8      	ldr	r0, [r7, #12]
 8011684:	f7ff fe6e 	bl	8011364 <move_window>
 8011688:	4603      	mov	r3, r0
 801168a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801168c:	7ffb      	ldrb	r3, [r7, #31]
 801168e:	2b00      	cmp	r3, #0
 8011690:	f040 80ab 	bne.w	80117ea <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801169a:	69bb      	ldr	r3, [r7, #24]
 801169c:	1c59      	adds	r1, r3, #1
 801169e:	61b9      	str	r1, [r7, #24]
 80116a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80116a4:	4413      	add	r3, r2
 80116a6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80116a8:	68bb      	ldr	r3, [r7, #8]
 80116aa:	f003 0301 	and.w	r3, r3, #1
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d00d      	beq.n	80116ce <put_fat+0xa4>
 80116b2:	697b      	ldr	r3, [r7, #20]
 80116b4:	781b      	ldrb	r3, [r3, #0]
 80116b6:	b25b      	sxtb	r3, r3
 80116b8:	f003 030f 	and.w	r3, r3, #15
 80116bc:	b25a      	sxtb	r2, r3
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	b2db      	uxtb	r3, r3
 80116c2:	011b      	lsls	r3, r3, #4
 80116c4:	b25b      	sxtb	r3, r3
 80116c6:	4313      	orrs	r3, r2
 80116c8:	b25b      	sxtb	r3, r3
 80116ca:	b2db      	uxtb	r3, r3
 80116cc:	e001      	b.n	80116d2 <put_fat+0xa8>
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	b2db      	uxtb	r3, r3
 80116d2:	697a      	ldr	r2, [r7, #20]
 80116d4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	2201      	movs	r2, #1
 80116da:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	6a1a      	ldr	r2, [r3, #32]
 80116e0:	69bb      	ldr	r3, [r7, #24]
 80116e2:	0a5b      	lsrs	r3, r3, #9
 80116e4:	4413      	add	r3, r2
 80116e6:	4619      	mov	r1, r3
 80116e8:	68f8      	ldr	r0, [r7, #12]
 80116ea:	f7ff fe3b 	bl	8011364 <move_window>
 80116ee:	4603      	mov	r3, r0
 80116f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80116f2:	7ffb      	ldrb	r3, [r7, #31]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d17a      	bne.n	80117ee <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80116fe:	69bb      	ldr	r3, [r7, #24]
 8011700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011704:	4413      	add	r3, r2
 8011706:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011708:	68bb      	ldr	r3, [r7, #8]
 801170a:	f003 0301 	and.w	r3, r3, #1
 801170e:	2b00      	cmp	r3, #0
 8011710:	d003      	beq.n	801171a <put_fat+0xf0>
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	091b      	lsrs	r3, r3, #4
 8011716:	b2db      	uxtb	r3, r3
 8011718:	e00e      	b.n	8011738 <put_fat+0x10e>
 801171a:	697b      	ldr	r3, [r7, #20]
 801171c:	781b      	ldrb	r3, [r3, #0]
 801171e:	b25b      	sxtb	r3, r3
 8011720:	f023 030f 	bic.w	r3, r3, #15
 8011724:	b25a      	sxtb	r2, r3
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	0a1b      	lsrs	r3, r3, #8
 801172a:	b25b      	sxtb	r3, r3
 801172c:	f003 030f 	and.w	r3, r3, #15
 8011730:	b25b      	sxtb	r3, r3
 8011732:	4313      	orrs	r3, r2
 8011734:	b25b      	sxtb	r3, r3
 8011736:	b2db      	uxtb	r3, r3
 8011738:	697a      	ldr	r2, [r7, #20]
 801173a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	2201      	movs	r2, #1
 8011740:	70da      	strb	r2, [r3, #3]
			break;
 8011742:	e059      	b.n	80117f8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	6a1a      	ldr	r2, [r3, #32]
 8011748:	68bb      	ldr	r3, [r7, #8]
 801174a:	0a1b      	lsrs	r3, r3, #8
 801174c:	4413      	add	r3, r2
 801174e:	4619      	mov	r1, r3
 8011750:	68f8      	ldr	r0, [r7, #12]
 8011752:	f7ff fe07 	bl	8011364 <move_window>
 8011756:	4603      	mov	r3, r0
 8011758:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801175a:	7ffb      	ldrb	r3, [r7, #31]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d148      	bne.n	80117f2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011766:	68bb      	ldr	r3, [r7, #8]
 8011768:	005b      	lsls	r3, r3, #1
 801176a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801176e:	4413      	add	r3, r2
 8011770:	687a      	ldr	r2, [r7, #4]
 8011772:	b292      	uxth	r2, r2
 8011774:	4611      	mov	r1, r2
 8011776:	4618      	mov	r0, r3
 8011778:	f7ff fb7f 	bl	8010e7a <st_word>
			fs->wflag = 1;
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	2201      	movs	r2, #1
 8011780:	70da      	strb	r2, [r3, #3]
			break;
 8011782:	e039      	b.n	80117f8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	6a1a      	ldr	r2, [r3, #32]
 8011788:	68bb      	ldr	r3, [r7, #8]
 801178a:	09db      	lsrs	r3, r3, #7
 801178c:	4413      	add	r3, r2
 801178e:	4619      	mov	r1, r3
 8011790:	68f8      	ldr	r0, [r7, #12]
 8011792:	f7ff fde7 	bl	8011364 <move_window>
 8011796:	4603      	mov	r3, r0
 8011798:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801179a:	7ffb      	ldrb	r3, [r7, #31]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d12a      	bne.n	80117f6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80117ac:	68bb      	ldr	r3, [r7, #8]
 80117ae:	009b      	lsls	r3, r3, #2
 80117b0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80117b4:	4413      	add	r3, r2
 80117b6:	4618      	mov	r0, r3
 80117b8:	f7ff fb3c 	bl	8010e34 <ld_dword>
 80117bc:	4603      	mov	r3, r0
 80117be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80117c2:	4323      	orrs	r3, r4
 80117c4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80117cc:	68bb      	ldr	r3, [r7, #8]
 80117ce:	009b      	lsls	r3, r3, #2
 80117d0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80117d4:	4413      	add	r3, r2
 80117d6:	6879      	ldr	r1, [r7, #4]
 80117d8:	4618      	mov	r0, r3
 80117da:	f7ff fb69 	bl	8010eb0 <st_dword>
			fs->wflag = 1;
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	2201      	movs	r2, #1
 80117e2:	70da      	strb	r2, [r3, #3]
			break;
 80117e4:	e008      	b.n	80117f8 <put_fat+0x1ce>
		}
	}
 80117e6:	bf00      	nop
 80117e8:	e006      	b.n	80117f8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80117ea:	bf00      	nop
 80117ec:	e004      	b.n	80117f8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80117ee:	bf00      	nop
 80117f0:	e002      	b.n	80117f8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80117f2:	bf00      	nop
 80117f4:	e000      	b.n	80117f8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80117f6:	bf00      	nop
	return res;
 80117f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80117fa:	4618      	mov	r0, r3
 80117fc:	3724      	adds	r7, #36	; 0x24
 80117fe:	46bd      	mov	sp, r7
 8011800:	bd90      	pop	{r4, r7, pc}

08011802 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011802:	b580      	push	{r7, lr}
 8011804:	b088      	sub	sp, #32
 8011806:	af00      	add	r7, sp, #0
 8011808:	60f8      	str	r0, [r7, #12]
 801180a:	60b9      	str	r1, [r7, #8]
 801180c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801180e:	2300      	movs	r3, #0
 8011810:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011818:	68bb      	ldr	r3, [r7, #8]
 801181a:	2b01      	cmp	r3, #1
 801181c:	d904      	bls.n	8011828 <remove_chain+0x26>
 801181e:	69bb      	ldr	r3, [r7, #24]
 8011820:	695b      	ldr	r3, [r3, #20]
 8011822:	68ba      	ldr	r2, [r7, #8]
 8011824:	429a      	cmp	r2, r3
 8011826:	d301      	bcc.n	801182c <remove_chain+0x2a>
 8011828:	2302      	movs	r3, #2
 801182a:	e04b      	b.n	80118c4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d00c      	beq.n	801184c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011832:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011836:	6879      	ldr	r1, [r7, #4]
 8011838:	69b8      	ldr	r0, [r7, #24]
 801183a:	f7ff fef6 	bl	801162a <put_fat>
 801183e:	4603      	mov	r3, r0
 8011840:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011842:	7ffb      	ldrb	r3, [r7, #31]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d001      	beq.n	801184c <remove_chain+0x4a>
 8011848:	7ffb      	ldrb	r3, [r7, #31]
 801184a:	e03b      	b.n	80118c4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801184c:	68b9      	ldr	r1, [r7, #8]
 801184e:	68f8      	ldr	r0, [r7, #12]
 8011850:	f7ff fe43 	bl	80114da <get_fat>
 8011854:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011856:	697b      	ldr	r3, [r7, #20]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d031      	beq.n	80118c0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801185c:	697b      	ldr	r3, [r7, #20]
 801185e:	2b01      	cmp	r3, #1
 8011860:	d101      	bne.n	8011866 <remove_chain+0x64>
 8011862:	2302      	movs	r3, #2
 8011864:	e02e      	b.n	80118c4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011866:	697b      	ldr	r3, [r7, #20]
 8011868:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801186c:	d101      	bne.n	8011872 <remove_chain+0x70>
 801186e:	2301      	movs	r3, #1
 8011870:	e028      	b.n	80118c4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011872:	2200      	movs	r2, #0
 8011874:	68b9      	ldr	r1, [r7, #8]
 8011876:	69b8      	ldr	r0, [r7, #24]
 8011878:	f7ff fed7 	bl	801162a <put_fat>
 801187c:	4603      	mov	r3, r0
 801187e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011880:	7ffb      	ldrb	r3, [r7, #31]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d001      	beq.n	801188a <remove_chain+0x88>
 8011886:	7ffb      	ldrb	r3, [r7, #31]
 8011888:	e01c      	b.n	80118c4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801188a:	69bb      	ldr	r3, [r7, #24]
 801188c:	691a      	ldr	r2, [r3, #16]
 801188e:	69bb      	ldr	r3, [r7, #24]
 8011890:	695b      	ldr	r3, [r3, #20]
 8011892:	3b02      	subs	r3, #2
 8011894:	429a      	cmp	r2, r3
 8011896:	d20b      	bcs.n	80118b0 <remove_chain+0xae>
			fs->free_clst++;
 8011898:	69bb      	ldr	r3, [r7, #24]
 801189a:	691b      	ldr	r3, [r3, #16]
 801189c:	1c5a      	adds	r2, r3, #1
 801189e:	69bb      	ldr	r3, [r7, #24]
 80118a0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80118a2:	69bb      	ldr	r3, [r7, #24]
 80118a4:	791b      	ldrb	r3, [r3, #4]
 80118a6:	f043 0301 	orr.w	r3, r3, #1
 80118aa:	b2da      	uxtb	r2, r3
 80118ac:	69bb      	ldr	r3, [r7, #24]
 80118ae:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80118b0:	697b      	ldr	r3, [r7, #20]
 80118b2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80118b4:	69bb      	ldr	r3, [r7, #24]
 80118b6:	695b      	ldr	r3, [r3, #20]
 80118b8:	68ba      	ldr	r2, [r7, #8]
 80118ba:	429a      	cmp	r2, r3
 80118bc:	d3c6      	bcc.n	801184c <remove_chain+0x4a>
 80118be:	e000      	b.n	80118c2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80118c0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80118c2:	2300      	movs	r3, #0
}
 80118c4:	4618      	mov	r0, r3
 80118c6:	3720      	adds	r7, #32
 80118c8:	46bd      	mov	sp, r7
 80118ca:	bd80      	pop	{r7, pc}

080118cc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b088      	sub	sp, #32
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
 80118d4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d10d      	bne.n	80118fe <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80118e2:	693b      	ldr	r3, [r7, #16]
 80118e4:	68db      	ldr	r3, [r3, #12]
 80118e6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80118e8:	69bb      	ldr	r3, [r7, #24]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d004      	beq.n	80118f8 <create_chain+0x2c>
 80118ee:	693b      	ldr	r3, [r7, #16]
 80118f0:	695b      	ldr	r3, [r3, #20]
 80118f2:	69ba      	ldr	r2, [r7, #24]
 80118f4:	429a      	cmp	r2, r3
 80118f6:	d31b      	bcc.n	8011930 <create_chain+0x64>
 80118f8:	2301      	movs	r3, #1
 80118fa:	61bb      	str	r3, [r7, #24]
 80118fc:	e018      	b.n	8011930 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80118fe:	6839      	ldr	r1, [r7, #0]
 8011900:	6878      	ldr	r0, [r7, #4]
 8011902:	f7ff fdea 	bl	80114da <get_fat>
 8011906:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	2b01      	cmp	r3, #1
 801190c:	d801      	bhi.n	8011912 <create_chain+0x46>
 801190e:	2301      	movs	r3, #1
 8011910:	e070      	b.n	80119f4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011918:	d101      	bne.n	801191e <create_chain+0x52>
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	e06a      	b.n	80119f4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801191e:	693b      	ldr	r3, [r7, #16]
 8011920:	695b      	ldr	r3, [r3, #20]
 8011922:	68fa      	ldr	r2, [r7, #12]
 8011924:	429a      	cmp	r2, r3
 8011926:	d201      	bcs.n	801192c <create_chain+0x60>
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	e063      	b.n	80119f4 <create_chain+0x128>
		scl = clst;
 801192c:	683b      	ldr	r3, [r7, #0]
 801192e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011930:	69bb      	ldr	r3, [r7, #24]
 8011932:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011934:	69fb      	ldr	r3, [r7, #28]
 8011936:	3301      	adds	r3, #1
 8011938:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801193a:	693b      	ldr	r3, [r7, #16]
 801193c:	695b      	ldr	r3, [r3, #20]
 801193e:	69fa      	ldr	r2, [r7, #28]
 8011940:	429a      	cmp	r2, r3
 8011942:	d307      	bcc.n	8011954 <create_chain+0x88>
				ncl = 2;
 8011944:	2302      	movs	r3, #2
 8011946:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011948:	69fa      	ldr	r2, [r7, #28]
 801194a:	69bb      	ldr	r3, [r7, #24]
 801194c:	429a      	cmp	r2, r3
 801194e:	d901      	bls.n	8011954 <create_chain+0x88>
 8011950:	2300      	movs	r3, #0
 8011952:	e04f      	b.n	80119f4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011954:	69f9      	ldr	r1, [r7, #28]
 8011956:	6878      	ldr	r0, [r7, #4]
 8011958:	f7ff fdbf 	bl	80114da <get_fat>
 801195c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d00e      	beq.n	8011982 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	2b01      	cmp	r3, #1
 8011968:	d003      	beq.n	8011972 <create_chain+0xa6>
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011970:	d101      	bne.n	8011976 <create_chain+0xaa>
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	e03e      	b.n	80119f4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011976:	69fa      	ldr	r2, [r7, #28]
 8011978:	69bb      	ldr	r3, [r7, #24]
 801197a:	429a      	cmp	r2, r3
 801197c:	d1da      	bne.n	8011934 <create_chain+0x68>
 801197e:	2300      	movs	r3, #0
 8011980:	e038      	b.n	80119f4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011982:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011984:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011988:	69f9      	ldr	r1, [r7, #28]
 801198a:	6938      	ldr	r0, [r7, #16]
 801198c:	f7ff fe4d 	bl	801162a <put_fat>
 8011990:	4603      	mov	r3, r0
 8011992:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011994:	7dfb      	ldrb	r3, [r7, #23]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d109      	bne.n	80119ae <create_chain+0xe2>
 801199a:	683b      	ldr	r3, [r7, #0]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d006      	beq.n	80119ae <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80119a0:	69fa      	ldr	r2, [r7, #28]
 80119a2:	6839      	ldr	r1, [r7, #0]
 80119a4:	6938      	ldr	r0, [r7, #16]
 80119a6:	f7ff fe40 	bl	801162a <put_fat>
 80119aa:	4603      	mov	r3, r0
 80119ac:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80119ae:	7dfb      	ldrb	r3, [r7, #23]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d116      	bne.n	80119e2 <create_chain+0x116>
		fs->last_clst = ncl;
 80119b4:	693b      	ldr	r3, [r7, #16]
 80119b6:	69fa      	ldr	r2, [r7, #28]
 80119b8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80119ba:	693b      	ldr	r3, [r7, #16]
 80119bc:	691a      	ldr	r2, [r3, #16]
 80119be:	693b      	ldr	r3, [r7, #16]
 80119c0:	695b      	ldr	r3, [r3, #20]
 80119c2:	3b02      	subs	r3, #2
 80119c4:	429a      	cmp	r2, r3
 80119c6:	d804      	bhi.n	80119d2 <create_chain+0x106>
 80119c8:	693b      	ldr	r3, [r7, #16]
 80119ca:	691b      	ldr	r3, [r3, #16]
 80119cc:	1e5a      	subs	r2, r3, #1
 80119ce:	693b      	ldr	r3, [r7, #16]
 80119d0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80119d2:	693b      	ldr	r3, [r7, #16]
 80119d4:	791b      	ldrb	r3, [r3, #4]
 80119d6:	f043 0301 	orr.w	r3, r3, #1
 80119da:	b2da      	uxtb	r2, r3
 80119dc:	693b      	ldr	r3, [r7, #16]
 80119de:	711a      	strb	r2, [r3, #4]
 80119e0:	e007      	b.n	80119f2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80119e2:	7dfb      	ldrb	r3, [r7, #23]
 80119e4:	2b01      	cmp	r3, #1
 80119e6:	d102      	bne.n	80119ee <create_chain+0x122>
 80119e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80119ec:	e000      	b.n	80119f0 <create_chain+0x124>
 80119ee:	2301      	movs	r3, #1
 80119f0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80119f2:	69fb      	ldr	r3, [r7, #28]
}
 80119f4:	4618      	mov	r0, r3
 80119f6:	3720      	adds	r7, #32
 80119f8:	46bd      	mov	sp, r7
 80119fa:	bd80      	pop	{r7, pc}

080119fc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80119fc:	b480      	push	{r7}
 80119fe:	b087      	sub	sp, #28
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	6078      	str	r0, [r7, #4]
 8011a04:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a10:	3304      	adds	r3, #4
 8011a12:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	0a5b      	lsrs	r3, r3, #9
 8011a18:	68fa      	ldr	r2, [r7, #12]
 8011a1a:	8952      	ldrh	r2, [r2, #10]
 8011a1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011a20:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011a22:	693b      	ldr	r3, [r7, #16]
 8011a24:	1d1a      	adds	r2, r3, #4
 8011a26:	613a      	str	r2, [r7, #16]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011a2c:	68bb      	ldr	r3, [r7, #8]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d101      	bne.n	8011a36 <clmt_clust+0x3a>
 8011a32:	2300      	movs	r3, #0
 8011a34:	e010      	b.n	8011a58 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8011a36:	697a      	ldr	r2, [r7, #20]
 8011a38:	68bb      	ldr	r3, [r7, #8]
 8011a3a:	429a      	cmp	r2, r3
 8011a3c:	d307      	bcc.n	8011a4e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8011a3e:	697a      	ldr	r2, [r7, #20]
 8011a40:	68bb      	ldr	r3, [r7, #8]
 8011a42:	1ad3      	subs	r3, r2, r3
 8011a44:	617b      	str	r3, [r7, #20]
 8011a46:	693b      	ldr	r3, [r7, #16]
 8011a48:	3304      	adds	r3, #4
 8011a4a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011a4c:	e7e9      	b.n	8011a22 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8011a4e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011a50:	693b      	ldr	r3, [r7, #16]
 8011a52:	681a      	ldr	r2, [r3, #0]
 8011a54:	697b      	ldr	r3, [r7, #20]
 8011a56:	4413      	add	r3, r2
}
 8011a58:	4618      	mov	r0, r3
 8011a5a:	371c      	adds	r7, #28
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a62:	4770      	bx	lr

08011a64 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b086      	sub	sp, #24
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
 8011a6c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011a74:	683b      	ldr	r3, [r7, #0]
 8011a76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011a7a:	d204      	bcs.n	8011a86 <dir_sdi+0x22>
 8011a7c:	683b      	ldr	r3, [r7, #0]
 8011a7e:	f003 031f 	and.w	r3, r3, #31
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d001      	beq.n	8011a8a <dir_sdi+0x26>
		return FR_INT_ERR;
 8011a86:	2302      	movs	r3, #2
 8011a88:	e063      	b.n	8011b52 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	683a      	ldr	r2, [r7, #0]
 8011a8e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	689b      	ldr	r3, [r3, #8]
 8011a94:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011a96:	697b      	ldr	r3, [r7, #20]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d106      	bne.n	8011aaa <dir_sdi+0x46>
 8011a9c:	693b      	ldr	r3, [r7, #16]
 8011a9e:	781b      	ldrb	r3, [r3, #0]
 8011aa0:	2b02      	cmp	r3, #2
 8011aa2:	d902      	bls.n	8011aaa <dir_sdi+0x46>
		clst = fs->dirbase;
 8011aa4:	693b      	ldr	r3, [r7, #16]
 8011aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011aa8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011aaa:	697b      	ldr	r3, [r7, #20]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d10c      	bne.n	8011aca <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011ab0:	683b      	ldr	r3, [r7, #0]
 8011ab2:	095b      	lsrs	r3, r3, #5
 8011ab4:	693a      	ldr	r2, [r7, #16]
 8011ab6:	8912      	ldrh	r2, [r2, #8]
 8011ab8:	4293      	cmp	r3, r2
 8011aba:	d301      	bcc.n	8011ac0 <dir_sdi+0x5c>
 8011abc:	2302      	movs	r3, #2
 8011abe:	e048      	b.n	8011b52 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8011ac0:	693b      	ldr	r3, [r7, #16]
 8011ac2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	61da      	str	r2, [r3, #28]
 8011ac8:	e029      	b.n	8011b1e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011aca:	693b      	ldr	r3, [r7, #16]
 8011acc:	895b      	ldrh	r3, [r3, #10]
 8011ace:	025b      	lsls	r3, r3, #9
 8011ad0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011ad2:	e019      	b.n	8011b08 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	6979      	ldr	r1, [r7, #20]
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f7ff fcfe 	bl	80114da <get_fat>
 8011ade:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011ae0:	697b      	ldr	r3, [r7, #20]
 8011ae2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011ae6:	d101      	bne.n	8011aec <dir_sdi+0x88>
 8011ae8:	2301      	movs	r3, #1
 8011aea:	e032      	b.n	8011b52 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011aec:	697b      	ldr	r3, [r7, #20]
 8011aee:	2b01      	cmp	r3, #1
 8011af0:	d904      	bls.n	8011afc <dir_sdi+0x98>
 8011af2:	693b      	ldr	r3, [r7, #16]
 8011af4:	695b      	ldr	r3, [r3, #20]
 8011af6:	697a      	ldr	r2, [r7, #20]
 8011af8:	429a      	cmp	r2, r3
 8011afa:	d301      	bcc.n	8011b00 <dir_sdi+0x9c>
 8011afc:	2302      	movs	r3, #2
 8011afe:	e028      	b.n	8011b52 <dir_sdi+0xee>
			ofs -= csz;
 8011b00:	683a      	ldr	r2, [r7, #0]
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	1ad3      	subs	r3, r2, r3
 8011b06:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011b08:	683a      	ldr	r2, [r7, #0]
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	429a      	cmp	r2, r3
 8011b0e:	d2e1      	bcs.n	8011ad4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8011b10:	6979      	ldr	r1, [r7, #20]
 8011b12:	6938      	ldr	r0, [r7, #16]
 8011b14:	f7ff fcc2 	bl	801149c <clust2sect>
 8011b18:	4602      	mov	r2, r0
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	697a      	ldr	r2, [r7, #20]
 8011b22:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	69db      	ldr	r3, [r3, #28]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d101      	bne.n	8011b30 <dir_sdi+0xcc>
 8011b2c:	2302      	movs	r3, #2
 8011b2e:	e010      	b.n	8011b52 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	69da      	ldr	r2, [r3, #28]
 8011b34:	683b      	ldr	r3, [r7, #0]
 8011b36:	0a5b      	lsrs	r3, r3, #9
 8011b38:	441a      	add	r2, r3
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011b3e:	693b      	ldr	r3, [r7, #16]
 8011b40:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011b44:	683b      	ldr	r3, [r7, #0]
 8011b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b4a:	441a      	add	r2, r3
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011b50:	2300      	movs	r3, #0
}
 8011b52:	4618      	mov	r0, r3
 8011b54:	3718      	adds	r7, #24
 8011b56:	46bd      	mov	sp, r7
 8011b58:	bd80      	pop	{r7, pc}

08011b5a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011b5a:	b580      	push	{r7, lr}
 8011b5c:	b086      	sub	sp, #24
 8011b5e:	af00      	add	r7, sp, #0
 8011b60:	6078      	str	r0, [r7, #4]
 8011b62:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	695b      	ldr	r3, [r3, #20]
 8011b6e:	3320      	adds	r3, #32
 8011b70:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	69db      	ldr	r3, [r3, #28]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d003      	beq.n	8011b82 <dir_next+0x28>
 8011b7a:	68bb      	ldr	r3, [r7, #8]
 8011b7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011b80:	d301      	bcc.n	8011b86 <dir_next+0x2c>
 8011b82:	2304      	movs	r3, #4
 8011b84:	e0aa      	b.n	8011cdc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011b86:	68bb      	ldr	r3, [r7, #8]
 8011b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	f040 8098 	bne.w	8011cc2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	69db      	ldr	r3, [r3, #28]
 8011b96:	1c5a      	adds	r2, r3, #1
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	699b      	ldr	r3, [r3, #24]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d10b      	bne.n	8011bbc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011ba4:	68bb      	ldr	r3, [r7, #8]
 8011ba6:	095b      	lsrs	r3, r3, #5
 8011ba8:	68fa      	ldr	r2, [r7, #12]
 8011baa:	8912      	ldrh	r2, [r2, #8]
 8011bac:	4293      	cmp	r3, r2
 8011bae:	f0c0 8088 	bcc.w	8011cc2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	61da      	str	r2, [r3, #28]
 8011bb8:	2304      	movs	r3, #4
 8011bba:	e08f      	b.n	8011cdc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011bbc:	68bb      	ldr	r3, [r7, #8]
 8011bbe:	0a5b      	lsrs	r3, r3, #9
 8011bc0:	68fa      	ldr	r2, [r7, #12]
 8011bc2:	8952      	ldrh	r2, [r2, #10]
 8011bc4:	3a01      	subs	r2, #1
 8011bc6:	4013      	ands	r3, r2
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d17a      	bne.n	8011cc2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011bcc:	687a      	ldr	r2, [r7, #4]
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	699b      	ldr	r3, [r3, #24]
 8011bd2:	4619      	mov	r1, r3
 8011bd4:	4610      	mov	r0, r2
 8011bd6:	f7ff fc80 	bl	80114da <get_fat>
 8011bda:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011bdc:	697b      	ldr	r3, [r7, #20]
 8011bde:	2b01      	cmp	r3, #1
 8011be0:	d801      	bhi.n	8011be6 <dir_next+0x8c>
 8011be2:	2302      	movs	r3, #2
 8011be4:	e07a      	b.n	8011cdc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011be6:	697b      	ldr	r3, [r7, #20]
 8011be8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011bec:	d101      	bne.n	8011bf2 <dir_next+0x98>
 8011bee:	2301      	movs	r3, #1
 8011bf0:	e074      	b.n	8011cdc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	695b      	ldr	r3, [r3, #20]
 8011bf6:	697a      	ldr	r2, [r7, #20]
 8011bf8:	429a      	cmp	r2, r3
 8011bfa:	d358      	bcc.n	8011cae <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d104      	bne.n	8011c0c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	2200      	movs	r2, #0
 8011c06:	61da      	str	r2, [r3, #28]
 8011c08:	2304      	movs	r3, #4
 8011c0a:	e067      	b.n	8011cdc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011c0c:	687a      	ldr	r2, [r7, #4]
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	699b      	ldr	r3, [r3, #24]
 8011c12:	4619      	mov	r1, r3
 8011c14:	4610      	mov	r0, r2
 8011c16:	f7ff fe59 	bl	80118cc <create_chain>
 8011c1a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011c1c:	697b      	ldr	r3, [r7, #20]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d101      	bne.n	8011c26 <dir_next+0xcc>
 8011c22:	2307      	movs	r3, #7
 8011c24:	e05a      	b.n	8011cdc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011c26:	697b      	ldr	r3, [r7, #20]
 8011c28:	2b01      	cmp	r3, #1
 8011c2a:	d101      	bne.n	8011c30 <dir_next+0xd6>
 8011c2c:	2302      	movs	r3, #2
 8011c2e:	e055      	b.n	8011cdc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011c30:	697b      	ldr	r3, [r7, #20]
 8011c32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011c36:	d101      	bne.n	8011c3c <dir_next+0xe2>
 8011c38:	2301      	movs	r3, #1
 8011c3a:	e04f      	b.n	8011cdc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011c3c:	68f8      	ldr	r0, [r7, #12]
 8011c3e:	f7ff fb4d 	bl	80112dc <sync_window>
 8011c42:	4603      	mov	r3, r0
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d001      	beq.n	8011c4c <dir_next+0xf2>
 8011c48:	2301      	movs	r3, #1
 8011c4a:	e047      	b.n	8011cdc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	3330      	adds	r3, #48	; 0x30
 8011c50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011c54:	2100      	movs	r1, #0
 8011c56:	4618      	mov	r0, r3
 8011c58:	f7ff f977 	bl	8010f4a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	613b      	str	r3, [r7, #16]
 8011c60:	6979      	ldr	r1, [r7, #20]
 8011c62:	68f8      	ldr	r0, [r7, #12]
 8011c64:	f7ff fc1a 	bl	801149c <clust2sect>
 8011c68:	4602      	mov	r2, r0
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8011c6e:	e012      	b.n	8011c96 <dir_next+0x13c>
						fs->wflag = 1;
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	2201      	movs	r2, #1
 8011c74:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011c76:	68f8      	ldr	r0, [r7, #12]
 8011c78:	f7ff fb30 	bl	80112dc <sync_window>
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d001      	beq.n	8011c86 <dir_next+0x12c>
 8011c82:	2301      	movs	r3, #1
 8011c84:	e02a      	b.n	8011cdc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011c86:	693b      	ldr	r3, [r7, #16]
 8011c88:	3301      	adds	r3, #1
 8011c8a:	613b      	str	r3, [r7, #16]
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c90:	1c5a      	adds	r2, r3, #1
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	62da      	str	r2, [r3, #44]	; 0x2c
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	895b      	ldrh	r3, [r3, #10]
 8011c9a:	461a      	mov	r2, r3
 8011c9c:	693b      	ldr	r3, [r7, #16]
 8011c9e:	4293      	cmp	r3, r2
 8011ca0:	d3e6      	bcc.n	8011c70 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ca6:	693b      	ldr	r3, [r7, #16]
 8011ca8:	1ad2      	subs	r2, r2, r3
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	697a      	ldr	r2, [r7, #20]
 8011cb2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011cb4:	6979      	ldr	r1, [r7, #20]
 8011cb6:	68f8      	ldr	r0, [r7, #12]
 8011cb8:	f7ff fbf0 	bl	801149c <clust2sect>
 8011cbc:	4602      	mov	r2, r0
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	68ba      	ldr	r2, [r7, #8]
 8011cc6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011cce:	68bb      	ldr	r3, [r7, #8]
 8011cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011cd4:	441a      	add	r2, r3
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011cda:	2300      	movs	r3, #0
}
 8011cdc:	4618      	mov	r0, r3
 8011cde:	3718      	adds	r7, #24
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	bd80      	pop	{r7, pc}

08011ce4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b086      	sub	sp, #24
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]
 8011cec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011cf4:	2100      	movs	r1, #0
 8011cf6:	6878      	ldr	r0, [r7, #4]
 8011cf8:	f7ff feb4 	bl	8011a64 <dir_sdi>
 8011cfc:	4603      	mov	r3, r0
 8011cfe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011d00:	7dfb      	ldrb	r3, [r7, #23]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d12b      	bne.n	8011d5e <dir_alloc+0x7a>
		n = 0;
 8011d06:	2300      	movs	r3, #0
 8011d08:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	69db      	ldr	r3, [r3, #28]
 8011d0e:	4619      	mov	r1, r3
 8011d10:	68f8      	ldr	r0, [r7, #12]
 8011d12:	f7ff fb27 	bl	8011364 <move_window>
 8011d16:	4603      	mov	r3, r0
 8011d18:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011d1a:	7dfb      	ldrb	r3, [r7, #23]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d11d      	bne.n	8011d5c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	6a1b      	ldr	r3, [r3, #32]
 8011d24:	781b      	ldrb	r3, [r3, #0]
 8011d26:	2be5      	cmp	r3, #229	; 0xe5
 8011d28:	d004      	beq.n	8011d34 <dir_alloc+0x50>
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	6a1b      	ldr	r3, [r3, #32]
 8011d2e:	781b      	ldrb	r3, [r3, #0]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d107      	bne.n	8011d44 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011d34:	693b      	ldr	r3, [r7, #16]
 8011d36:	3301      	adds	r3, #1
 8011d38:	613b      	str	r3, [r7, #16]
 8011d3a:	693a      	ldr	r2, [r7, #16]
 8011d3c:	683b      	ldr	r3, [r7, #0]
 8011d3e:	429a      	cmp	r2, r3
 8011d40:	d102      	bne.n	8011d48 <dir_alloc+0x64>
 8011d42:	e00c      	b.n	8011d5e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011d44:	2300      	movs	r3, #0
 8011d46:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011d48:	2101      	movs	r1, #1
 8011d4a:	6878      	ldr	r0, [r7, #4]
 8011d4c:	f7ff ff05 	bl	8011b5a <dir_next>
 8011d50:	4603      	mov	r3, r0
 8011d52:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011d54:	7dfb      	ldrb	r3, [r7, #23]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d0d7      	beq.n	8011d0a <dir_alloc+0x26>
 8011d5a:	e000      	b.n	8011d5e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011d5c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011d5e:	7dfb      	ldrb	r3, [r7, #23]
 8011d60:	2b04      	cmp	r3, #4
 8011d62:	d101      	bne.n	8011d68 <dir_alloc+0x84>
 8011d64:	2307      	movs	r3, #7
 8011d66:	75fb      	strb	r3, [r7, #23]
	return res;
 8011d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	3718      	adds	r7, #24
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	bd80      	pop	{r7, pc}

08011d72 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011d72:	b580      	push	{r7, lr}
 8011d74:	b084      	sub	sp, #16
 8011d76:	af00      	add	r7, sp, #0
 8011d78:	6078      	str	r0, [r7, #4]
 8011d7a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011d7c:	683b      	ldr	r3, [r7, #0]
 8011d7e:	331a      	adds	r3, #26
 8011d80:	4618      	mov	r0, r3
 8011d82:	f7ff f83f 	bl	8010e04 <ld_word>
 8011d86:	4603      	mov	r3, r0
 8011d88:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	781b      	ldrb	r3, [r3, #0]
 8011d8e:	2b03      	cmp	r3, #3
 8011d90:	d109      	bne.n	8011da6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011d92:	683b      	ldr	r3, [r7, #0]
 8011d94:	3314      	adds	r3, #20
 8011d96:	4618      	mov	r0, r3
 8011d98:	f7ff f834 	bl	8010e04 <ld_word>
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	041b      	lsls	r3, r3, #16
 8011da0:	68fa      	ldr	r2, [r7, #12]
 8011da2:	4313      	orrs	r3, r2
 8011da4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011da6:	68fb      	ldr	r3, [r7, #12]
}
 8011da8:	4618      	mov	r0, r3
 8011daa:	3710      	adds	r7, #16
 8011dac:	46bd      	mov	sp, r7
 8011dae:	bd80      	pop	{r7, pc}

08011db0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b084      	sub	sp, #16
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	60f8      	str	r0, [r7, #12]
 8011db8:	60b9      	str	r1, [r7, #8]
 8011dba:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011dbc:	68bb      	ldr	r3, [r7, #8]
 8011dbe:	331a      	adds	r3, #26
 8011dc0:	687a      	ldr	r2, [r7, #4]
 8011dc2:	b292      	uxth	r2, r2
 8011dc4:	4611      	mov	r1, r2
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	f7ff f857 	bl	8010e7a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	781b      	ldrb	r3, [r3, #0]
 8011dd0:	2b03      	cmp	r3, #3
 8011dd2:	d109      	bne.n	8011de8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011dd4:	68bb      	ldr	r3, [r7, #8]
 8011dd6:	f103 0214 	add.w	r2, r3, #20
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	0c1b      	lsrs	r3, r3, #16
 8011dde:	b29b      	uxth	r3, r3
 8011de0:	4619      	mov	r1, r3
 8011de2:	4610      	mov	r0, r2
 8011de4:	f7ff f849 	bl	8010e7a <st_word>
	}
}
 8011de8:	bf00      	nop
 8011dea:	3710      	adds	r7, #16
 8011dec:	46bd      	mov	sp, r7
 8011dee:	bd80      	pop	{r7, pc}

08011df0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b086      	sub	sp, #24
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011dfe:	2100      	movs	r1, #0
 8011e00:	6878      	ldr	r0, [r7, #4]
 8011e02:	f7ff fe2f 	bl	8011a64 <dir_sdi>
 8011e06:	4603      	mov	r3, r0
 8011e08:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011e0a:	7dfb      	ldrb	r3, [r7, #23]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d001      	beq.n	8011e14 <dir_find+0x24>
 8011e10:	7dfb      	ldrb	r3, [r7, #23]
 8011e12:	e03e      	b.n	8011e92 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	69db      	ldr	r3, [r3, #28]
 8011e18:	4619      	mov	r1, r3
 8011e1a:	6938      	ldr	r0, [r7, #16]
 8011e1c:	f7ff faa2 	bl	8011364 <move_window>
 8011e20:	4603      	mov	r3, r0
 8011e22:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011e24:	7dfb      	ldrb	r3, [r7, #23]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d12f      	bne.n	8011e8a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	6a1b      	ldr	r3, [r3, #32]
 8011e2e:	781b      	ldrb	r3, [r3, #0]
 8011e30:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011e32:	7bfb      	ldrb	r3, [r7, #15]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d102      	bne.n	8011e3e <dir_find+0x4e>
 8011e38:	2304      	movs	r3, #4
 8011e3a:	75fb      	strb	r3, [r7, #23]
 8011e3c:	e028      	b.n	8011e90 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	6a1b      	ldr	r3, [r3, #32]
 8011e42:	330b      	adds	r3, #11
 8011e44:	781b      	ldrb	r3, [r3, #0]
 8011e46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011e4a:	b2da      	uxtb	r2, r3
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	6a1b      	ldr	r3, [r3, #32]
 8011e54:	330b      	adds	r3, #11
 8011e56:	781b      	ldrb	r3, [r3, #0]
 8011e58:	f003 0308 	and.w	r3, r3, #8
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d10a      	bne.n	8011e76 <dir_find+0x86>
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	6a18      	ldr	r0, [r3, #32]
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	3324      	adds	r3, #36	; 0x24
 8011e68:	220b      	movs	r2, #11
 8011e6a:	4619      	mov	r1, r3
 8011e6c:	f7ff f888 	bl	8010f80 <mem_cmp>
 8011e70:	4603      	mov	r3, r0
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d00b      	beq.n	8011e8e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011e76:	2100      	movs	r1, #0
 8011e78:	6878      	ldr	r0, [r7, #4]
 8011e7a:	f7ff fe6e 	bl	8011b5a <dir_next>
 8011e7e:	4603      	mov	r3, r0
 8011e80:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011e82:	7dfb      	ldrb	r3, [r7, #23]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d0c5      	beq.n	8011e14 <dir_find+0x24>
 8011e88:	e002      	b.n	8011e90 <dir_find+0xa0>
		if (res != FR_OK) break;
 8011e8a:	bf00      	nop
 8011e8c:	e000      	b.n	8011e90 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011e8e:	bf00      	nop

	return res;
 8011e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e92:	4618      	mov	r0, r3
 8011e94:	3718      	adds	r7, #24
 8011e96:	46bd      	mov	sp, r7
 8011e98:	bd80      	pop	{r7, pc}

08011e9a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011e9a:	b580      	push	{r7, lr}
 8011e9c:	b084      	sub	sp, #16
 8011e9e:	af00      	add	r7, sp, #0
 8011ea0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8011ea8:	2101      	movs	r1, #1
 8011eaa:	6878      	ldr	r0, [r7, #4]
 8011eac:	f7ff ff1a 	bl	8011ce4 <dir_alloc>
 8011eb0:	4603      	mov	r3, r0
 8011eb2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011eb4:	7bfb      	ldrb	r3, [r7, #15]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d11c      	bne.n	8011ef4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	69db      	ldr	r3, [r3, #28]
 8011ebe:	4619      	mov	r1, r3
 8011ec0:	68b8      	ldr	r0, [r7, #8]
 8011ec2:	f7ff fa4f 	bl	8011364 <move_window>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011eca:	7bfb      	ldrb	r3, [r7, #15]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d111      	bne.n	8011ef4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	6a1b      	ldr	r3, [r3, #32]
 8011ed4:	2220      	movs	r2, #32
 8011ed6:	2100      	movs	r1, #0
 8011ed8:	4618      	mov	r0, r3
 8011eda:	f7ff f836 	bl	8010f4a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	6a18      	ldr	r0, [r3, #32]
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	3324      	adds	r3, #36	; 0x24
 8011ee6:	220b      	movs	r2, #11
 8011ee8:	4619      	mov	r1, r3
 8011eea:	f7ff f80d 	bl	8010f08 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8011eee:	68bb      	ldr	r3, [r7, #8]
 8011ef0:	2201      	movs	r2, #1
 8011ef2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8011ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	3710      	adds	r7, #16
 8011efa:	46bd      	mov	sp, r7
 8011efc:	bd80      	pop	{r7, pc}
	...

08011f00 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b088      	sub	sp, #32
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
 8011f08:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8011f0a:	683b      	ldr	r3, [r7, #0]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	60fb      	str	r3, [r7, #12]
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	3324      	adds	r3, #36	; 0x24
 8011f14:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8011f16:	220b      	movs	r2, #11
 8011f18:	2120      	movs	r1, #32
 8011f1a:	68b8      	ldr	r0, [r7, #8]
 8011f1c:	f7ff f815 	bl	8010f4a <mem_set>
	si = i = 0; ni = 8;
 8011f20:	2300      	movs	r3, #0
 8011f22:	613b      	str	r3, [r7, #16]
 8011f24:	693b      	ldr	r3, [r7, #16]
 8011f26:	61fb      	str	r3, [r7, #28]
 8011f28:	2308      	movs	r3, #8
 8011f2a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8011f2c:	69fb      	ldr	r3, [r7, #28]
 8011f2e:	1c5a      	adds	r2, r3, #1
 8011f30:	61fa      	str	r2, [r7, #28]
 8011f32:	68fa      	ldr	r2, [r7, #12]
 8011f34:	4413      	add	r3, r2
 8011f36:	781b      	ldrb	r3, [r3, #0]
 8011f38:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011f3a:	7efb      	ldrb	r3, [r7, #27]
 8011f3c:	2b20      	cmp	r3, #32
 8011f3e:	d94e      	bls.n	8011fde <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8011f40:	7efb      	ldrb	r3, [r7, #27]
 8011f42:	2b2f      	cmp	r3, #47	; 0x2f
 8011f44:	d006      	beq.n	8011f54 <create_name+0x54>
 8011f46:	7efb      	ldrb	r3, [r7, #27]
 8011f48:	2b5c      	cmp	r3, #92	; 0x5c
 8011f4a:	d110      	bne.n	8011f6e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011f4c:	e002      	b.n	8011f54 <create_name+0x54>
 8011f4e:	69fb      	ldr	r3, [r7, #28]
 8011f50:	3301      	adds	r3, #1
 8011f52:	61fb      	str	r3, [r7, #28]
 8011f54:	68fa      	ldr	r2, [r7, #12]
 8011f56:	69fb      	ldr	r3, [r7, #28]
 8011f58:	4413      	add	r3, r2
 8011f5a:	781b      	ldrb	r3, [r3, #0]
 8011f5c:	2b2f      	cmp	r3, #47	; 0x2f
 8011f5e:	d0f6      	beq.n	8011f4e <create_name+0x4e>
 8011f60:	68fa      	ldr	r2, [r7, #12]
 8011f62:	69fb      	ldr	r3, [r7, #28]
 8011f64:	4413      	add	r3, r2
 8011f66:	781b      	ldrb	r3, [r3, #0]
 8011f68:	2b5c      	cmp	r3, #92	; 0x5c
 8011f6a:	d0f0      	beq.n	8011f4e <create_name+0x4e>
			break;
 8011f6c:	e038      	b.n	8011fe0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8011f6e:	7efb      	ldrb	r3, [r7, #27]
 8011f70:	2b2e      	cmp	r3, #46	; 0x2e
 8011f72:	d003      	beq.n	8011f7c <create_name+0x7c>
 8011f74:	693a      	ldr	r2, [r7, #16]
 8011f76:	697b      	ldr	r3, [r7, #20]
 8011f78:	429a      	cmp	r2, r3
 8011f7a:	d30c      	bcc.n	8011f96 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8011f7c:	697b      	ldr	r3, [r7, #20]
 8011f7e:	2b0b      	cmp	r3, #11
 8011f80:	d002      	beq.n	8011f88 <create_name+0x88>
 8011f82:	7efb      	ldrb	r3, [r7, #27]
 8011f84:	2b2e      	cmp	r3, #46	; 0x2e
 8011f86:	d001      	beq.n	8011f8c <create_name+0x8c>
 8011f88:	2306      	movs	r3, #6
 8011f8a:	e044      	b.n	8012016 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8011f8c:	2308      	movs	r3, #8
 8011f8e:	613b      	str	r3, [r7, #16]
 8011f90:	230b      	movs	r3, #11
 8011f92:	617b      	str	r3, [r7, #20]
			continue;
 8011f94:	e022      	b.n	8011fdc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8011f96:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	da04      	bge.n	8011fa8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8011f9e:	7efb      	ldrb	r3, [r7, #27]
 8011fa0:	3b80      	subs	r3, #128	; 0x80
 8011fa2:	4a1f      	ldr	r2, [pc, #124]	; (8012020 <create_name+0x120>)
 8011fa4:	5cd3      	ldrb	r3, [r2, r3]
 8011fa6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8011fa8:	7efb      	ldrb	r3, [r7, #27]
 8011faa:	4619      	mov	r1, r3
 8011fac:	481d      	ldr	r0, [pc, #116]	; (8012024 <create_name+0x124>)
 8011fae:	f7ff f80e 	bl	8010fce <chk_chr>
 8011fb2:	4603      	mov	r3, r0
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d001      	beq.n	8011fbc <create_name+0xbc>
 8011fb8:	2306      	movs	r3, #6
 8011fba:	e02c      	b.n	8012016 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8011fbc:	7efb      	ldrb	r3, [r7, #27]
 8011fbe:	2b60      	cmp	r3, #96	; 0x60
 8011fc0:	d905      	bls.n	8011fce <create_name+0xce>
 8011fc2:	7efb      	ldrb	r3, [r7, #27]
 8011fc4:	2b7a      	cmp	r3, #122	; 0x7a
 8011fc6:	d802      	bhi.n	8011fce <create_name+0xce>
 8011fc8:	7efb      	ldrb	r3, [r7, #27]
 8011fca:	3b20      	subs	r3, #32
 8011fcc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8011fce:	693b      	ldr	r3, [r7, #16]
 8011fd0:	1c5a      	adds	r2, r3, #1
 8011fd2:	613a      	str	r2, [r7, #16]
 8011fd4:	68ba      	ldr	r2, [r7, #8]
 8011fd6:	4413      	add	r3, r2
 8011fd8:	7efa      	ldrb	r2, [r7, #27]
 8011fda:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8011fdc:	e7a6      	b.n	8011f2c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011fde:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8011fe0:	68fa      	ldr	r2, [r7, #12]
 8011fe2:	69fb      	ldr	r3, [r7, #28]
 8011fe4:	441a      	add	r2, r3
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8011fea:	693b      	ldr	r3, [r7, #16]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d101      	bne.n	8011ff4 <create_name+0xf4>
 8011ff0:	2306      	movs	r3, #6
 8011ff2:	e010      	b.n	8012016 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011ff4:	68bb      	ldr	r3, [r7, #8]
 8011ff6:	781b      	ldrb	r3, [r3, #0]
 8011ff8:	2be5      	cmp	r3, #229	; 0xe5
 8011ffa:	d102      	bne.n	8012002 <create_name+0x102>
 8011ffc:	68bb      	ldr	r3, [r7, #8]
 8011ffe:	2205      	movs	r2, #5
 8012000:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012002:	7efb      	ldrb	r3, [r7, #27]
 8012004:	2b20      	cmp	r3, #32
 8012006:	d801      	bhi.n	801200c <create_name+0x10c>
 8012008:	2204      	movs	r2, #4
 801200a:	e000      	b.n	801200e <create_name+0x10e>
 801200c:	2200      	movs	r2, #0
 801200e:	68bb      	ldr	r3, [r7, #8]
 8012010:	330b      	adds	r3, #11
 8012012:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012014:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012016:	4618      	mov	r0, r3
 8012018:	3720      	adds	r7, #32
 801201a:	46bd      	mov	sp, r7
 801201c:	bd80      	pop	{r7, pc}
 801201e:	bf00      	nop
 8012020:	0801795c 	.word	0x0801795c
 8012024:	0801784c 	.word	0x0801784c

08012028 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012028:	b580      	push	{r7, lr}
 801202a:	b086      	sub	sp, #24
 801202c:	af00      	add	r7, sp, #0
 801202e:	6078      	str	r0, [r7, #4]
 8012030:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012036:	693b      	ldr	r3, [r7, #16]
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801203c:	e002      	b.n	8012044 <follow_path+0x1c>
 801203e:	683b      	ldr	r3, [r7, #0]
 8012040:	3301      	adds	r3, #1
 8012042:	603b      	str	r3, [r7, #0]
 8012044:	683b      	ldr	r3, [r7, #0]
 8012046:	781b      	ldrb	r3, [r3, #0]
 8012048:	2b2f      	cmp	r3, #47	; 0x2f
 801204a:	d0f8      	beq.n	801203e <follow_path+0x16>
 801204c:	683b      	ldr	r3, [r7, #0]
 801204e:	781b      	ldrb	r3, [r3, #0]
 8012050:	2b5c      	cmp	r3, #92	; 0x5c
 8012052:	d0f4      	beq.n	801203e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012054:	693b      	ldr	r3, [r7, #16]
 8012056:	2200      	movs	r2, #0
 8012058:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801205a:	683b      	ldr	r3, [r7, #0]
 801205c:	781b      	ldrb	r3, [r3, #0]
 801205e:	2b1f      	cmp	r3, #31
 8012060:	d80a      	bhi.n	8012078 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	2280      	movs	r2, #128	; 0x80
 8012066:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801206a:	2100      	movs	r1, #0
 801206c:	6878      	ldr	r0, [r7, #4]
 801206e:	f7ff fcf9 	bl	8011a64 <dir_sdi>
 8012072:	4603      	mov	r3, r0
 8012074:	75fb      	strb	r3, [r7, #23]
 8012076:	e043      	b.n	8012100 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012078:	463b      	mov	r3, r7
 801207a:	4619      	mov	r1, r3
 801207c:	6878      	ldr	r0, [r7, #4]
 801207e:	f7ff ff3f 	bl	8011f00 <create_name>
 8012082:	4603      	mov	r3, r0
 8012084:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012086:	7dfb      	ldrb	r3, [r7, #23]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d134      	bne.n	80120f6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801208c:	6878      	ldr	r0, [r7, #4]
 801208e:	f7ff feaf 	bl	8011df0 <dir_find>
 8012092:	4603      	mov	r3, r0
 8012094:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801209c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801209e:	7dfb      	ldrb	r3, [r7, #23]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d00a      	beq.n	80120ba <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80120a4:	7dfb      	ldrb	r3, [r7, #23]
 80120a6:	2b04      	cmp	r3, #4
 80120a8:	d127      	bne.n	80120fa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80120aa:	7afb      	ldrb	r3, [r7, #11]
 80120ac:	f003 0304 	and.w	r3, r3, #4
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d122      	bne.n	80120fa <follow_path+0xd2>
 80120b4:	2305      	movs	r3, #5
 80120b6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80120b8:	e01f      	b.n	80120fa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80120ba:	7afb      	ldrb	r3, [r7, #11]
 80120bc:	f003 0304 	and.w	r3, r3, #4
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d11c      	bne.n	80120fe <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80120c4:	693b      	ldr	r3, [r7, #16]
 80120c6:	799b      	ldrb	r3, [r3, #6]
 80120c8:	f003 0310 	and.w	r3, r3, #16
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d102      	bne.n	80120d6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80120d0:	2305      	movs	r3, #5
 80120d2:	75fb      	strb	r3, [r7, #23]
 80120d4:	e014      	b.n	8012100 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	695b      	ldr	r3, [r3, #20]
 80120e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80120e4:	4413      	add	r3, r2
 80120e6:	4619      	mov	r1, r3
 80120e8:	68f8      	ldr	r0, [r7, #12]
 80120ea:	f7ff fe42 	bl	8011d72 <ld_clust>
 80120ee:	4602      	mov	r2, r0
 80120f0:	693b      	ldr	r3, [r7, #16]
 80120f2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80120f4:	e7c0      	b.n	8012078 <follow_path+0x50>
			if (res != FR_OK) break;
 80120f6:	bf00      	nop
 80120f8:	e002      	b.n	8012100 <follow_path+0xd8>
				break;
 80120fa:	bf00      	nop
 80120fc:	e000      	b.n	8012100 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80120fe:	bf00      	nop
			}
		}
	}

	return res;
 8012100:	7dfb      	ldrb	r3, [r7, #23]
}
 8012102:	4618      	mov	r0, r3
 8012104:	3718      	adds	r7, #24
 8012106:	46bd      	mov	sp, r7
 8012108:	bd80      	pop	{r7, pc}

0801210a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801210a:	b480      	push	{r7}
 801210c:	b087      	sub	sp, #28
 801210e:	af00      	add	r7, sp, #0
 8012110:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012116:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	2b00      	cmp	r3, #0
 801211e:	d031      	beq.n	8012184 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	617b      	str	r3, [r7, #20]
 8012126:	e002      	b.n	801212e <get_ldnumber+0x24>
 8012128:	697b      	ldr	r3, [r7, #20]
 801212a:	3301      	adds	r3, #1
 801212c:	617b      	str	r3, [r7, #20]
 801212e:	697b      	ldr	r3, [r7, #20]
 8012130:	781b      	ldrb	r3, [r3, #0]
 8012132:	2b20      	cmp	r3, #32
 8012134:	d903      	bls.n	801213e <get_ldnumber+0x34>
 8012136:	697b      	ldr	r3, [r7, #20]
 8012138:	781b      	ldrb	r3, [r3, #0]
 801213a:	2b3a      	cmp	r3, #58	; 0x3a
 801213c:	d1f4      	bne.n	8012128 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801213e:	697b      	ldr	r3, [r7, #20]
 8012140:	781b      	ldrb	r3, [r3, #0]
 8012142:	2b3a      	cmp	r3, #58	; 0x3a
 8012144:	d11c      	bne.n	8012180 <get_ldnumber+0x76>
			tp = *path;
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	1c5a      	adds	r2, r3, #1
 8012150:	60fa      	str	r2, [r7, #12]
 8012152:	781b      	ldrb	r3, [r3, #0]
 8012154:	3b30      	subs	r3, #48	; 0x30
 8012156:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012158:	68bb      	ldr	r3, [r7, #8]
 801215a:	2b09      	cmp	r3, #9
 801215c:	d80e      	bhi.n	801217c <get_ldnumber+0x72>
 801215e:	68fa      	ldr	r2, [r7, #12]
 8012160:	697b      	ldr	r3, [r7, #20]
 8012162:	429a      	cmp	r2, r3
 8012164:	d10a      	bne.n	801217c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012166:	68bb      	ldr	r3, [r7, #8]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d107      	bne.n	801217c <get_ldnumber+0x72>
					vol = (int)i;
 801216c:	68bb      	ldr	r3, [r7, #8]
 801216e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012170:	697b      	ldr	r3, [r7, #20]
 8012172:	3301      	adds	r3, #1
 8012174:	617b      	str	r3, [r7, #20]
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	697a      	ldr	r2, [r7, #20]
 801217a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801217c:	693b      	ldr	r3, [r7, #16]
 801217e:	e002      	b.n	8012186 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012180:	2300      	movs	r3, #0
 8012182:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012184:	693b      	ldr	r3, [r7, #16]
}
 8012186:	4618      	mov	r0, r3
 8012188:	371c      	adds	r7, #28
 801218a:	46bd      	mov	sp, r7
 801218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012190:	4770      	bx	lr
	...

08012194 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012194:	b580      	push	{r7, lr}
 8012196:	b082      	sub	sp, #8
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
 801219c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	2200      	movs	r2, #0
 80121a2:	70da      	strb	r2, [r3, #3]
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80121aa:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80121ac:	6839      	ldr	r1, [r7, #0]
 80121ae:	6878      	ldr	r0, [r7, #4]
 80121b0:	f7ff f8d8 	bl	8011364 <move_window>
 80121b4:	4603      	mov	r3, r0
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d001      	beq.n	80121be <check_fs+0x2a>
 80121ba:	2304      	movs	r3, #4
 80121bc:	e038      	b.n	8012230 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	3330      	adds	r3, #48	; 0x30
 80121c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80121c6:	4618      	mov	r0, r3
 80121c8:	f7fe fe1c 	bl	8010e04 <ld_word>
 80121cc:	4603      	mov	r3, r0
 80121ce:	461a      	mov	r2, r3
 80121d0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80121d4:	429a      	cmp	r2, r3
 80121d6:	d001      	beq.n	80121dc <check_fs+0x48>
 80121d8:	2303      	movs	r3, #3
 80121da:	e029      	b.n	8012230 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80121e2:	2be9      	cmp	r3, #233	; 0xe9
 80121e4:	d009      	beq.n	80121fa <check_fs+0x66>
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80121ec:	2beb      	cmp	r3, #235	; 0xeb
 80121ee:	d11e      	bne.n	801222e <check_fs+0x9a>
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80121f6:	2b90      	cmp	r3, #144	; 0x90
 80121f8:	d119      	bne.n	801222e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	3330      	adds	r3, #48	; 0x30
 80121fe:	3336      	adds	r3, #54	; 0x36
 8012200:	4618      	mov	r0, r3
 8012202:	f7fe fe17 	bl	8010e34 <ld_dword>
 8012206:	4603      	mov	r3, r0
 8012208:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801220c:	4a0a      	ldr	r2, [pc, #40]	; (8012238 <check_fs+0xa4>)
 801220e:	4293      	cmp	r3, r2
 8012210:	d101      	bne.n	8012216 <check_fs+0x82>
 8012212:	2300      	movs	r3, #0
 8012214:	e00c      	b.n	8012230 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	3330      	adds	r3, #48	; 0x30
 801221a:	3352      	adds	r3, #82	; 0x52
 801221c:	4618      	mov	r0, r3
 801221e:	f7fe fe09 	bl	8010e34 <ld_dword>
 8012222:	4603      	mov	r3, r0
 8012224:	4a05      	ldr	r2, [pc, #20]	; (801223c <check_fs+0xa8>)
 8012226:	4293      	cmp	r3, r2
 8012228:	d101      	bne.n	801222e <check_fs+0x9a>
 801222a:	2300      	movs	r3, #0
 801222c:	e000      	b.n	8012230 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801222e:	2302      	movs	r3, #2
}
 8012230:	4618      	mov	r0, r3
 8012232:	3708      	adds	r7, #8
 8012234:	46bd      	mov	sp, r7
 8012236:	bd80      	pop	{r7, pc}
 8012238:	00544146 	.word	0x00544146
 801223c:	33544146 	.word	0x33544146

08012240 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b096      	sub	sp, #88	; 0x58
 8012244:	af00      	add	r7, sp, #0
 8012246:	60f8      	str	r0, [r7, #12]
 8012248:	60b9      	str	r1, [r7, #8]
 801224a:	4613      	mov	r3, r2
 801224c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801224e:	68bb      	ldr	r3, [r7, #8]
 8012250:	2200      	movs	r2, #0
 8012252:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012254:	68f8      	ldr	r0, [r7, #12]
 8012256:	f7ff ff58 	bl	801210a <get_ldnumber>
 801225a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801225c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801225e:	2b00      	cmp	r3, #0
 8012260:	da01      	bge.n	8012266 <find_volume+0x26>
 8012262:	230b      	movs	r3, #11
 8012264:	e22d      	b.n	80126c2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012266:	4aa1      	ldr	r2, [pc, #644]	; (80124ec <find_volume+0x2ac>)
 8012268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801226a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801226e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012272:	2b00      	cmp	r3, #0
 8012274:	d101      	bne.n	801227a <find_volume+0x3a>
 8012276:	230c      	movs	r3, #12
 8012278:	e223      	b.n	80126c2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801227a:	68bb      	ldr	r3, [r7, #8]
 801227c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801227e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012280:	79fb      	ldrb	r3, [r7, #7]
 8012282:	f023 0301 	bic.w	r3, r3, #1
 8012286:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801228a:	781b      	ldrb	r3, [r3, #0]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d01a      	beq.n	80122c6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012292:	785b      	ldrb	r3, [r3, #1]
 8012294:	4618      	mov	r0, r3
 8012296:	f7fe fd17 	bl	8010cc8 <disk_status>
 801229a:	4603      	mov	r3, r0
 801229c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80122a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80122a4:	f003 0301 	and.w	r3, r3, #1
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d10c      	bne.n	80122c6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80122ac:	79fb      	ldrb	r3, [r7, #7]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d007      	beq.n	80122c2 <find_volume+0x82>
 80122b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80122b6:	f003 0304 	and.w	r3, r3, #4
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d001      	beq.n	80122c2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80122be:	230a      	movs	r3, #10
 80122c0:	e1ff      	b.n	80126c2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80122c2:	2300      	movs	r3, #0
 80122c4:	e1fd      	b.n	80126c2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80122c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122c8:	2200      	movs	r2, #0
 80122ca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80122cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122ce:	b2da      	uxtb	r2, r3
 80122d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122d2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80122d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122d6:	785b      	ldrb	r3, [r3, #1]
 80122d8:	4618      	mov	r0, r3
 80122da:	f7fe fd0f 	bl	8010cfc <disk_initialize>
 80122de:	4603      	mov	r3, r0
 80122e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80122e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80122e8:	f003 0301 	and.w	r3, r3, #1
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d001      	beq.n	80122f4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80122f0:	2303      	movs	r3, #3
 80122f2:	e1e6      	b.n	80126c2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80122f4:	79fb      	ldrb	r3, [r7, #7]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d007      	beq.n	801230a <find_volume+0xca>
 80122fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80122fe:	f003 0304 	and.w	r3, r3, #4
 8012302:	2b00      	cmp	r3, #0
 8012304:	d001      	beq.n	801230a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012306:	230a      	movs	r3, #10
 8012308:	e1db      	b.n	80126c2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801230a:	2300      	movs	r3, #0
 801230c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801230e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012310:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012312:	f7ff ff3f 	bl	8012194 <check_fs>
 8012316:	4603      	mov	r3, r0
 8012318:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801231c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012320:	2b02      	cmp	r3, #2
 8012322:	d149      	bne.n	80123b8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012324:	2300      	movs	r3, #0
 8012326:	643b      	str	r3, [r7, #64]	; 0x40
 8012328:	e01e      	b.n	8012368 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801232a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801232c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012332:	011b      	lsls	r3, r3, #4
 8012334:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012338:	4413      	add	r3, r2
 801233a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801233c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801233e:	3304      	adds	r3, #4
 8012340:	781b      	ldrb	r3, [r3, #0]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d006      	beq.n	8012354 <find_volume+0x114>
 8012346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012348:	3308      	adds	r3, #8
 801234a:	4618      	mov	r0, r3
 801234c:	f7fe fd72 	bl	8010e34 <ld_dword>
 8012350:	4602      	mov	r2, r0
 8012352:	e000      	b.n	8012356 <find_volume+0x116>
 8012354:	2200      	movs	r2, #0
 8012356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012358:	009b      	lsls	r3, r3, #2
 801235a:	3358      	adds	r3, #88	; 0x58
 801235c:	443b      	add	r3, r7
 801235e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012364:	3301      	adds	r3, #1
 8012366:	643b      	str	r3, [r7, #64]	; 0x40
 8012368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801236a:	2b03      	cmp	r3, #3
 801236c:	d9dd      	bls.n	801232a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801236e:	2300      	movs	r3, #0
 8012370:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012374:	2b00      	cmp	r3, #0
 8012376:	d002      	beq.n	801237e <find_volume+0x13e>
 8012378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801237a:	3b01      	subs	r3, #1
 801237c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801237e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012380:	009b      	lsls	r3, r3, #2
 8012382:	3358      	adds	r3, #88	; 0x58
 8012384:	443b      	add	r3, r7
 8012386:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801238a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801238c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801238e:	2b00      	cmp	r3, #0
 8012390:	d005      	beq.n	801239e <find_volume+0x15e>
 8012392:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012394:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012396:	f7ff fefd 	bl	8012194 <check_fs>
 801239a:	4603      	mov	r3, r0
 801239c:	e000      	b.n	80123a0 <find_volume+0x160>
 801239e:	2303      	movs	r3, #3
 80123a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80123a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80123a8:	2b01      	cmp	r3, #1
 80123aa:	d905      	bls.n	80123b8 <find_volume+0x178>
 80123ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80123ae:	3301      	adds	r3, #1
 80123b0:	643b      	str	r3, [r7, #64]	; 0x40
 80123b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80123b4:	2b03      	cmp	r3, #3
 80123b6:	d9e2      	bls.n	801237e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80123b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80123bc:	2b04      	cmp	r3, #4
 80123be:	d101      	bne.n	80123c4 <find_volume+0x184>
 80123c0:	2301      	movs	r3, #1
 80123c2:	e17e      	b.n	80126c2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80123c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80123c8:	2b01      	cmp	r3, #1
 80123ca:	d901      	bls.n	80123d0 <find_volume+0x190>
 80123cc:	230d      	movs	r3, #13
 80123ce:	e178      	b.n	80126c2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80123d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123d2:	3330      	adds	r3, #48	; 0x30
 80123d4:	330b      	adds	r3, #11
 80123d6:	4618      	mov	r0, r3
 80123d8:	f7fe fd14 	bl	8010e04 <ld_word>
 80123dc:	4603      	mov	r3, r0
 80123de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80123e2:	d001      	beq.n	80123e8 <find_volume+0x1a8>
 80123e4:	230d      	movs	r3, #13
 80123e6:	e16c      	b.n	80126c2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80123e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ea:	3330      	adds	r3, #48	; 0x30
 80123ec:	3316      	adds	r3, #22
 80123ee:	4618      	mov	r0, r3
 80123f0:	f7fe fd08 	bl	8010e04 <ld_word>
 80123f4:	4603      	mov	r3, r0
 80123f6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80123f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d106      	bne.n	801240c <find_volume+0x1cc>
 80123fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012400:	3330      	adds	r3, #48	; 0x30
 8012402:	3324      	adds	r3, #36	; 0x24
 8012404:	4618      	mov	r0, r3
 8012406:	f7fe fd15 	bl	8010e34 <ld_dword>
 801240a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801240c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801240e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012410:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012414:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8012418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801241a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801241c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801241e:	789b      	ldrb	r3, [r3, #2]
 8012420:	2b01      	cmp	r3, #1
 8012422:	d005      	beq.n	8012430 <find_volume+0x1f0>
 8012424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012426:	789b      	ldrb	r3, [r3, #2]
 8012428:	2b02      	cmp	r3, #2
 801242a:	d001      	beq.n	8012430 <find_volume+0x1f0>
 801242c:	230d      	movs	r3, #13
 801242e:	e148      	b.n	80126c2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012432:	789b      	ldrb	r3, [r3, #2]
 8012434:	461a      	mov	r2, r3
 8012436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012438:	fb02 f303 	mul.w	r3, r2, r3
 801243c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801243e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012444:	b29a      	uxth	r2, r3
 8012446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012448:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801244a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801244c:	895b      	ldrh	r3, [r3, #10]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d008      	beq.n	8012464 <find_volume+0x224>
 8012452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012454:	895b      	ldrh	r3, [r3, #10]
 8012456:	461a      	mov	r2, r3
 8012458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801245a:	895b      	ldrh	r3, [r3, #10]
 801245c:	3b01      	subs	r3, #1
 801245e:	4013      	ands	r3, r2
 8012460:	2b00      	cmp	r3, #0
 8012462:	d001      	beq.n	8012468 <find_volume+0x228>
 8012464:	230d      	movs	r3, #13
 8012466:	e12c      	b.n	80126c2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801246a:	3330      	adds	r3, #48	; 0x30
 801246c:	3311      	adds	r3, #17
 801246e:	4618      	mov	r0, r3
 8012470:	f7fe fcc8 	bl	8010e04 <ld_word>
 8012474:	4603      	mov	r3, r0
 8012476:	461a      	mov	r2, r3
 8012478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801247a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801247c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801247e:	891b      	ldrh	r3, [r3, #8]
 8012480:	f003 030f 	and.w	r3, r3, #15
 8012484:	b29b      	uxth	r3, r3
 8012486:	2b00      	cmp	r3, #0
 8012488:	d001      	beq.n	801248e <find_volume+0x24e>
 801248a:	230d      	movs	r3, #13
 801248c:	e119      	b.n	80126c2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801248e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012490:	3330      	adds	r3, #48	; 0x30
 8012492:	3313      	adds	r3, #19
 8012494:	4618      	mov	r0, r3
 8012496:	f7fe fcb5 	bl	8010e04 <ld_word>
 801249a:	4603      	mov	r3, r0
 801249c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801249e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d106      	bne.n	80124b2 <find_volume+0x272>
 80124a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124a6:	3330      	adds	r3, #48	; 0x30
 80124a8:	3320      	adds	r3, #32
 80124aa:	4618      	mov	r0, r3
 80124ac:	f7fe fcc2 	bl	8010e34 <ld_dword>
 80124b0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80124b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124b4:	3330      	adds	r3, #48	; 0x30
 80124b6:	330e      	adds	r3, #14
 80124b8:	4618      	mov	r0, r3
 80124ba:	f7fe fca3 	bl	8010e04 <ld_word>
 80124be:	4603      	mov	r3, r0
 80124c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80124c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d101      	bne.n	80124cc <find_volume+0x28c>
 80124c8:	230d      	movs	r3, #13
 80124ca:	e0fa      	b.n	80126c2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80124cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80124ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124d0:	4413      	add	r3, r2
 80124d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80124d4:	8912      	ldrh	r2, [r2, #8]
 80124d6:	0912      	lsrs	r2, r2, #4
 80124d8:	b292      	uxth	r2, r2
 80124da:	4413      	add	r3, r2
 80124dc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80124de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80124e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124e2:	429a      	cmp	r2, r3
 80124e4:	d204      	bcs.n	80124f0 <find_volume+0x2b0>
 80124e6:	230d      	movs	r3, #13
 80124e8:	e0eb      	b.n	80126c2 <find_volume+0x482>
 80124ea:	bf00      	nop
 80124ec:	2000132c 	.word	0x2000132c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80124f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80124f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124f4:	1ad3      	subs	r3, r2, r3
 80124f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80124f8:	8952      	ldrh	r2, [r2, #10]
 80124fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80124fe:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012502:	2b00      	cmp	r3, #0
 8012504:	d101      	bne.n	801250a <find_volume+0x2ca>
 8012506:	230d      	movs	r3, #13
 8012508:	e0db      	b.n	80126c2 <find_volume+0x482>
		fmt = FS_FAT32;
 801250a:	2303      	movs	r3, #3
 801250c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012512:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012516:	4293      	cmp	r3, r2
 8012518:	d802      	bhi.n	8012520 <find_volume+0x2e0>
 801251a:	2302      	movs	r3, #2
 801251c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012522:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012526:	4293      	cmp	r3, r2
 8012528:	d802      	bhi.n	8012530 <find_volume+0x2f0>
 801252a:	2301      	movs	r3, #1
 801252c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012532:	1c9a      	adds	r2, r3, #2
 8012534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012536:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8012538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801253a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801253c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801253e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012542:	441a      	add	r2, r3
 8012544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012546:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8012548:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801254a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801254c:	441a      	add	r2, r3
 801254e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012550:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8012552:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012556:	2b03      	cmp	r3, #3
 8012558:	d11e      	bne.n	8012598 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801255a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801255c:	3330      	adds	r3, #48	; 0x30
 801255e:	332a      	adds	r3, #42	; 0x2a
 8012560:	4618      	mov	r0, r3
 8012562:	f7fe fc4f 	bl	8010e04 <ld_word>
 8012566:	4603      	mov	r3, r0
 8012568:	2b00      	cmp	r3, #0
 801256a:	d001      	beq.n	8012570 <find_volume+0x330>
 801256c:	230d      	movs	r3, #13
 801256e:	e0a8      	b.n	80126c2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012572:	891b      	ldrh	r3, [r3, #8]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d001      	beq.n	801257c <find_volume+0x33c>
 8012578:	230d      	movs	r3, #13
 801257a:	e0a2      	b.n	80126c2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801257c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801257e:	3330      	adds	r3, #48	; 0x30
 8012580:	332c      	adds	r3, #44	; 0x2c
 8012582:	4618      	mov	r0, r3
 8012584:	f7fe fc56 	bl	8010e34 <ld_dword>
 8012588:	4602      	mov	r2, r0
 801258a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801258c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801258e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012590:	695b      	ldr	r3, [r3, #20]
 8012592:	009b      	lsls	r3, r3, #2
 8012594:	647b      	str	r3, [r7, #68]	; 0x44
 8012596:	e01f      	b.n	80125d8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801259a:	891b      	ldrh	r3, [r3, #8]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d101      	bne.n	80125a4 <find_volume+0x364>
 80125a0:	230d      	movs	r3, #13
 80125a2:	e08e      	b.n	80126c2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80125a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125a6:	6a1a      	ldr	r2, [r3, #32]
 80125a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125aa:	441a      	add	r2, r3
 80125ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125ae:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80125b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80125b4:	2b02      	cmp	r3, #2
 80125b6:	d103      	bne.n	80125c0 <find_volume+0x380>
 80125b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125ba:	695b      	ldr	r3, [r3, #20]
 80125bc:	005b      	lsls	r3, r3, #1
 80125be:	e00a      	b.n	80125d6 <find_volume+0x396>
 80125c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125c2:	695a      	ldr	r2, [r3, #20]
 80125c4:	4613      	mov	r3, r2
 80125c6:	005b      	lsls	r3, r3, #1
 80125c8:	4413      	add	r3, r2
 80125ca:	085a      	lsrs	r2, r3, #1
 80125cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125ce:	695b      	ldr	r3, [r3, #20]
 80125d0:	f003 0301 	and.w	r3, r3, #1
 80125d4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80125d6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80125d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125da:	699a      	ldr	r2, [r3, #24]
 80125dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125de:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80125e2:	0a5b      	lsrs	r3, r3, #9
 80125e4:	429a      	cmp	r2, r3
 80125e6:	d201      	bcs.n	80125ec <find_volume+0x3ac>
 80125e8:	230d      	movs	r3, #13
 80125ea:	e06a      	b.n	80126c2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80125ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80125f2:	611a      	str	r2, [r3, #16]
 80125f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125f6:	691a      	ldr	r2, [r3, #16]
 80125f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125fa:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80125fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125fe:	2280      	movs	r2, #128	; 0x80
 8012600:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012602:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012606:	2b03      	cmp	r3, #3
 8012608:	d149      	bne.n	801269e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801260a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801260c:	3330      	adds	r3, #48	; 0x30
 801260e:	3330      	adds	r3, #48	; 0x30
 8012610:	4618      	mov	r0, r3
 8012612:	f7fe fbf7 	bl	8010e04 <ld_word>
 8012616:	4603      	mov	r3, r0
 8012618:	2b01      	cmp	r3, #1
 801261a:	d140      	bne.n	801269e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801261c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801261e:	3301      	adds	r3, #1
 8012620:	4619      	mov	r1, r3
 8012622:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012624:	f7fe fe9e 	bl	8011364 <move_window>
 8012628:	4603      	mov	r3, r0
 801262a:	2b00      	cmp	r3, #0
 801262c:	d137      	bne.n	801269e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801262e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012630:	2200      	movs	r2, #0
 8012632:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012636:	3330      	adds	r3, #48	; 0x30
 8012638:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801263c:	4618      	mov	r0, r3
 801263e:	f7fe fbe1 	bl	8010e04 <ld_word>
 8012642:	4603      	mov	r3, r0
 8012644:	461a      	mov	r2, r3
 8012646:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801264a:	429a      	cmp	r2, r3
 801264c:	d127      	bne.n	801269e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801264e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012650:	3330      	adds	r3, #48	; 0x30
 8012652:	4618      	mov	r0, r3
 8012654:	f7fe fbee 	bl	8010e34 <ld_dword>
 8012658:	4603      	mov	r3, r0
 801265a:	4a1c      	ldr	r2, [pc, #112]	; (80126cc <find_volume+0x48c>)
 801265c:	4293      	cmp	r3, r2
 801265e:	d11e      	bne.n	801269e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012662:	3330      	adds	r3, #48	; 0x30
 8012664:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012668:	4618      	mov	r0, r3
 801266a:	f7fe fbe3 	bl	8010e34 <ld_dword>
 801266e:	4603      	mov	r3, r0
 8012670:	4a17      	ldr	r2, [pc, #92]	; (80126d0 <find_volume+0x490>)
 8012672:	4293      	cmp	r3, r2
 8012674:	d113      	bne.n	801269e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012678:	3330      	adds	r3, #48	; 0x30
 801267a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801267e:	4618      	mov	r0, r3
 8012680:	f7fe fbd8 	bl	8010e34 <ld_dword>
 8012684:	4602      	mov	r2, r0
 8012686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012688:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801268a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801268c:	3330      	adds	r3, #48	; 0x30
 801268e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012692:	4618      	mov	r0, r3
 8012694:	f7fe fbce 	bl	8010e34 <ld_dword>
 8012698:	4602      	mov	r2, r0
 801269a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801269c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801269e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126a0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80126a4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80126a6:	4b0b      	ldr	r3, [pc, #44]	; (80126d4 <find_volume+0x494>)
 80126a8:	881b      	ldrh	r3, [r3, #0]
 80126aa:	3301      	adds	r3, #1
 80126ac:	b29a      	uxth	r2, r3
 80126ae:	4b09      	ldr	r3, [pc, #36]	; (80126d4 <find_volume+0x494>)
 80126b0:	801a      	strh	r2, [r3, #0]
 80126b2:	4b08      	ldr	r3, [pc, #32]	; (80126d4 <find_volume+0x494>)
 80126b4:	881a      	ldrh	r2, [r3, #0]
 80126b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126b8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80126ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80126bc:	f7fe fdea 	bl	8011294 <clear_lock>
#endif
	return FR_OK;
 80126c0:	2300      	movs	r3, #0
}
 80126c2:	4618      	mov	r0, r3
 80126c4:	3758      	adds	r7, #88	; 0x58
 80126c6:	46bd      	mov	sp, r7
 80126c8:	bd80      	pop	{r7, pc}
 80126ca:	bf00      	nop
 80126cc:	41615252 	.word	0x41615252
 80126d0:	61417272 	.word	0x61417272
 80126d4:	20001330 	.word	0x20001330

080126d8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80126d8:	b580      	push	{r7, lr}
 80126da:	b084      	sub	sp, #16
 80126dc:	af00      	add	r7, sp, #0
 80126de:	6078      	str	r0, [r7, #4]
 80126e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80126e2:	2309      	movs	r3, #9
 80126e4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d01c      	beq.n	8012726 <validate+0x4e>
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d018      	beq.n	8012726 <validate+0x4e>
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	781b      	ldrb	r3, [r3, #0]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d013      	beq.n	8012726 <validate+0x4e>
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	889a      	ldrh	r2, [r3, #4]
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	88db      	ldrh	r3, [r3, #6]
 8012708:	429a      	cmp	r2, r3
 801270a:	d10c      	bne.n	8012726 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	785b      	ldrb	r3, [r3, #1]
 8012712:	4618      	mov	r0, r3
 8012714:	f7fe fad8 	bl	8010cc8 <disk_status>
 8012718:	4603      	mov	r3, r0
 801271a:	f003 0301 	and.w	r3, r3, #1
 801271e:	2b00      	cmp	r3, #0
 8012720:	d101      	bne.n	8012726 <validate+0x4e>
			res = FR_OK;
 8012722:	2300      	movs	r3, #0
 8012724:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012726:	7bfb      	ldrb	r3, [r7, #15]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d102      	bne.n	8012732 <validate+0x5a>
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	e000      	b.n	8012734 <validate+0x5c>
 8012732:	2300      	movs	r3, #0
 8012734:	683a      	ldr	r2, [r7, #0]
 8012736:	6013      	str	r3, [r2, #0]
	return res;
 8012738:	7bfb      	ldrb	r3, [r7, #15]
}
 801273a:	4618      	mov	r0, r3
 801273c:	3710      	adds	r7, #16
 801273e:	46bd      	mov	sp, r7
 8012740:	bd80      	pop	{r7, pc}
	...

08012744 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012744:	b580      	push	{r7, lr}
 8012746:	b088      	sub	sp, #32
 8012748:	af00      	add	r7, sp, #0
 801274a:	60f8      	str	r0, [r7, #12]
 801274c:	60b9      	str	r1, [r7, #8]
 801274e:	4613      	mov	r3, r2
 8012750:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012752:	68bb      	ldr	r3, [r7, #8]
 8012754:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012756:	f107 0310 	add.w	r3, r7, #16
 801275a:	4618      	mov	r0, r3
 801275c:	f7ff fcd5 	bl	801210a <get_ldnumber>
 8012760:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012762:	69fb      	ldr	r3, [r7, #28]
 8012764:	2b00      	cmp	r3, #0
 8012766:	da01      	bge.n	801276c <f_mount+0x28>
 8012768:	230b      	movs	r3, #11
 801276a:	e02b      	b.n	80127c4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801276c:	4a17      	ldr	r2, [pc, #92]	; (80127cc <f_mount+0x88>)
 801276e:	69fb      	ldr	r3, [r7, #28]
 8012770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012774:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012776:	69bb      	ldr	r3, [r7, #24]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d005      	beq.n	8012788 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801277c:	69b8      	ldr	r0, [r7, #24]
 801277e:	f7fe fd89 	bl	8011294 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012782:	69bb      	ldr	r3, [r7, #24]
 8012784:	2200      	movs	r2, #0
 8012786:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	2b00      	cmp	r3, #0
 801278c:	d002      	beq.n	8012794 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	2200      	movs	r2, #0
 8012792:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012794:	68fa      	ldr	r2, [r7, #12]
 8012796:	490d      	ldr	r1, [pc, #52]	; (80127cc <f_mount+0x88>)
 8012798:	69fb      	ldr	r3, [r7, #28]
 801279a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d002      	beq.n	80127aa <f_mount+0x66>
 80127a4:	79fb      	ldrb	r3, [r7, #7]
 80127a6:	2b01      	cmp	r3, #1
 80127a8:	d001      	beq.n	80127ae <f_mount+0x6a>
 80127aa:	2300      	movs	r3, #0
 80127ac:	e00a      	b.n	80127c4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80127ae:	f107 010c 	add.w	r1, r7, #12
 80127b2:	f107 0308 	add.w	r3, r7, #8
 80127b6:	2200      	movs	r2, #0
 80127b8:	4618      	mov	r0, r3
 80127ba:	f7ff fd41 	bl	8012240 <find_volume>
 80127be:	4603      	mov	r3, r0
 80127c0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80127c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80127c4:	4618      	mov	r0, r3
 80127c6:	3720      	adds	r7, #32
 80127c8:	46bd      	mov	sp, r7
 80127ca:	bd80      	pop	{r7, pc}
 80127cc:	2000132c 	.word	0x2000132c

080127d0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b09a      	sub	sp, #104	; 0x68
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	60f8      	str	r0, [r7, #12]
 80127d8:	60b9      	str	r1, [r7, #8]
 80127da:	4613      	mov	r3, r2
 80127dc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d101      	bne.n	80127e8 <f_open+0x18>
 80127e4:	2309      	movs	r3, #9
 80127e6:	e1ad      	b.n	8012b44 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80127e8:	79fb      	ldrb	r3, [r7, #7]
 80127ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80127ee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80127f0:	79fa      	ldrb	r2, [r7, #7]
 80127f2:	f107 0114 	add.w	r1, r7, #20
 80127f6:	f107 0308 	add.w	r3, r7, #8
 80127fa:	4618      	mov	r0, r3
 80127fc:	f7ff fd20 	bl	8012240 <find_volume>
 8012800:	4603      	mov	r3, r0
 8012802:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8012806:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801280a:	2b00      	cmp	r3, #0
 801280c:	f040 8191 	bne.w	8012b32 <f_open+0x362>
		dj.obj.fs = fs;
 8012810:	697b      	ldr	r3, [r7, #20]
 8012812:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012814:	68ba      	ldr	r2, [r7, #8]
 8012816:	f107 0318 	add.w	r3, r7, #24
 801281a:	4611      	mov	r1, r2
 801281c:	4618      	mov	r0, r3
 801281e:	f7ff fc03 	bl	8012028 <follow_path>
 8012822:	4603      	mov	r3, r0
 8012824:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012828:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801282c:	2b00      	cmp	r3, #0
 801282e:	d11a      	bne.n	8012866 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012830:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012834:	b25b      	sxtb	r3, r3
 8012836:	2b00      	cmp	r3, #0
 8012838:	da03      	bge.n	8012842 <f_open+0x72>
				res = FR_INVALID_NAME;
 801283a:	2306      	movs	r3, #6
 801283c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012840:	e011      	b.n	8012866 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012842:	79fb      	ldrb	r3, [r7, #7]
 8012844:	f023 0301 	bic.w	r3, r3, #1
 8012848:	2b00      	cmp	r3, #0
 801284a:	bf14      	ite	ne
 801284c:	2301      	movne	r3, #1
 801284e:	2300      	moveq	r3, #0
 8012850:	b2db      	uxtb	r3, r3
 8012852:	461a      	mov	r2, r3
 8012854:	f107 0318 	add.w	r3, r7, #24
 8012858:	4611      	mov	r1, r2
 801285a:	4618      	mov	r0, r3
 801285c:	f7fe fbd2 	bl	8011004 <chk_lock>
 8012860:	4603      	mov	r3, r0
 8012862:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012866:	79fb      	ldrb	r3, [r7, #7]
 8012868:	f003 031c 	and.w	r3, r3, #28
 801286c:	2b00      	cmp	r3, #0
 801286e:	d07f      	beq.n	8012970 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8012870:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012874:	2b00      	cmp	r3, #0
 8012876:	d017      	beq.n	80128a8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012878:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801287c:	2b04      	cmp	r3, #4
 801287e:	d10e      	bne.n	801289e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012880:	f7fe fc1c 	bl	80110bc <enq_lock>
 8012884:	4603      	mov	r3, r0
 8012886:	2b00      	cmp	r3, #0
 8012888:	d006      	beq.n	8012898 <f_open+0xc8>
 801288a:	f107 0318 	add.w	r3, r7, #24
 801288e:	4618      	mov	r0, r3
 8012890:	f7ff fb03 	bl	8011e9a <dir_register>
 8012894:	4603      	mov	r3, r0
 8012896:	e000      	b.n	801289a <f_open+0xca>
 8012898:	2312      	movs	r3, #18
 801289a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801289e:	79fb      	ldrb	r3, [r7, #7]
 80128a0:	f043 0308 	orr.w	r3, r3, #8
 80128a4:	71fb      	strb	r3, [r7, #7]
 80128a6:	e010      	b.n	80128ca <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80128a8:	7fbb      	ldrb	r3, [r7, #30]
 80128aa:	f003 0311 	and.w	r3, r3, #17
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d003      	beq.n	80128ba <f_open+0xea>
					res = FR_DENIED;
 80128b2:	2307      	movs	r3, #7
 80128b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80128b8:	e007      	b.n	80128ca <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80128ba:	79fb      	ldrb	r3, [r7, #7]
 80128bc:	f003 0304 	and.w	r3, r3, #4
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d002      	beq.n	80128ca <f_open+0xfa>
 80128c4:	2308      	movs	r3, #8
 80128c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80128ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d168      	bne.n	80129a4 <f_open+0x1d4>
 80128d2:	79fb      	ldrb	r3, [r7, #7]
 80128d4:	f003 0308 	and.w	r3, r3, #8
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d063      	beq.n	80129a4 <f_open+0x1d4>
				dw = GET_FATTIME();
 80128dc:	f7fc fbd0 	bl	800f080 <get_fattime>
 80128e0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80128e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128e4:	330e      	adds	r3, #14
 80128e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80128e8:	4618      	mov	r0, r3
 80128ea:	f7fe fae1 	bl	8010eb0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80128ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128f0:	3316      	adds	r3, #22
 80128f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80128f4:	4618      	mov	r0, r3
 80128f6:	f7fe fadb 	bl	8010eb0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80128fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128fc:	330b      	adds	r3, #11
 80128fe:	2220      	movs	r2, #32
 8012900:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012902:	697b      	ldr	r3, [r7, #20]
 8012904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012906:	4611      	mov	r1, r2
 8012908:	4618      	mov	r0, r3
 801290a:	f7ff fa32 	bl	8011d72 <ld_clust>
 801290e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012910:	697b      	ldr	r3, [r7, #20]
 8012912:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012914:	2200      	movs	r2, #0
 8012916:	4618      	mov	r0, r3
 8012918:	f7ff fa4a 	bl	8011db0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801291c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801291e:	331c      	adds	r3, #28
 8012920:	2100      	movs	r1, #0
 8012922:	4618      	mov	r0, r3
 8012924:	f7fe fac4 	bl	8010eb0 <st_dword>
					fs->wflag = 1;
 8012928:	697b      	ldr	r3, [r7, #20]
 801292a:	2201      	movs	r2, #1
 801292c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801292e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012930:	2b00      	cmp	r3, #0
 8012932:	d037      	beq.n	80129a4 <f_open+0x1d4>
						dw = fs->winsect;
 8012934:	697b      	ldr	r3, [r7, #20]
 8012936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012938:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801293a:	f107 0318 	add.w	r3, r7, #24
 801293e:	2200      	movs	r2, #0
 8012940:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012942:	4618      	mov	r0, r3
 8012944:	f7fe ff5d 	bl	8011802 <remove_chain>
 8012948:	4603      	mov	r3, r0
 801294a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801294e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012952:	2b00      	cmp	r3, #0
 8012954:	d126      	bne.n	80129a4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8012956:	697b      	ldr	r3, [r7, #20]
 8012958:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801295a:	4618      	mov	r0, r3
 801295c:	f7fe fd02 	bl	8011364 <move_window>
 8012960:	4603      	mov	r3, r0
 8012962:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012966:	697b      	ldr	r3, [r7, #20]
 8012968:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801296a:	3a01      	subs	r2, #1
 801296c:	60da      	str	r2, [r3, #12]
 801296e:	e019      	b.n	80129a4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012970:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012974:	2b00      	cmp	r3, #0
 8012976:	d115      	bne.n	80129a4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012978:	7fbb      	ldrb	r3, [r7, #30]
 801297a:	f003 0310 	and.w	r3, r3, #16
 801297e:	2b00      	cmp	r3, #0
 8012980:	d003      	beq.n	801298a <f_open+0x1ba>
					res = FR_NO_FILE;
 8012982:	2304      	movs	r3, #4
 8012984:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012988:	e00c      	b.n	80129a4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801298a:	79fb      	ldrb	r3, [r7, #7]
 801298c:	f003 0302 	and.w	r3, r3, #2
 8012990:	2b00      	cmp	r3, #0
 8012992:	d007      	beq.n	80129a4 <f_open+0x1d4>
 8012994:	7fbb      	ldrb	r3, [r7, #30]
 8012996:	f003 0301 	and.w	r3, r3, #1
 801299a:	2b00      	cmp	r3, #0
 801299c:	d002      	beq.n	80129a4 <f_open+0x1d4>
						res = FR_DENIED;
 801299e:	2307      	movs	r3, #7
 80129a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80129a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d128      	bne.n	80129fe <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80129ac:	79fb      	ldrb	r3, [r7, #7]
 80129ae:	f003 0308 	and.w	r3, r3, #8
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d003      	beq.n	80129be <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80129b6:	79fb      	ldrb	r3, [r7, #7]
 80129b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80129bc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80129be:	697b      	ldr	r3, [r7, #20]
 80129c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80129c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80129cc:	79fb      	ldrb	r3, [r7, #7]
 80129ce:	f023 0301 	bic.w	r3, r3, #1
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	bf14      	ite	ne
 80129d6:	2301      	movne	r3, #1
 80129d8:	2300      	moveq	r3, #0
 80129da:	b2db      	uxtb	r3, r3
 80129dc:	461a      	mov	r2, r3
 80129de:	f107 0318 	add.w	r3, r7, #24
 80129e2:	4611      	mov	r1, r2
 80129e4:	4618      	mov	r0, r3
 80129e6:	f7fe fb8b 	bl	8011100 <inc_lock>
 80129ea:	4602      	mov	r2, r0
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	691b      	ldr	r3, [r3, #16]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d102      	bne.n	80129fe <f_open+0x22e>
 80129f8:	2302      	movs	r3, #2
 80129fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80129fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	f040 8095 	bne.w	8012b32 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012a08:	697b      	ldr	r3, [r7, #20]
 8012a0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a0c:	4611      	mov	r1, r2
 8012a0e:	4618      	mov	r0, r3
 8012a10:	f7ff f9af 	bl	8011d72 <ld_clust>
 8012a14:	4602      	mov	r2, r0
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a1c:	331c      	adds	r3, #28
 8012a1e:	4618      	mov	r0, r3
 8012a20:	f7fe fa08 	bl	8010e34 <ld_dword>
 8012a24:	4602      	mov	r2, r0
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012a30:	697a      	ldr	r2, [r7, #20]
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012a36:	697b      	ldr	r3, [r7, #20]
 8012a38:	88da      	ldrh	r2, [r3, #6]
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	79fa      	ldrb	r2, [r7, #7]
 8012a42:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	2200      	movs	r2, #0
 8012a48:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	2200      	movs	r2, #0
 8012a54:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	3330      	adds	r3, #48	; 0x30
 8012a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012a5e:	2100      	movs	r1, #0
 8012a60:	4618      	mov	r0, r3
 8012a62:	f7fe fa72 	bl	8010f4a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012a66:	79fb      	ldrb	r3, [r7, #7]
 8012a68:	f003 0320 	and.w	r3, r3, #32
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d060      	beq.n	8012b32 <f_open+0x362>
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	68db      	ldr	r3, [r3, #12]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d05c      	beq.n	8012b32 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	68da      	ldr	r2, [r3, #12]
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012a80:	697b      	ldr	r3, [r7, #20]
 8012a82:	895b      	ldrh	r3, [r3, #10]
 8012a84:	025b      	lsls	r3, r3, #9
 8012a86:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	689b      	ldr	r3, [r3, #8]
 8012a8c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	68db      	ldr	r3, [r3, #12]
 8012a92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012a94:	e016      	b.n	8012ac4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	f7fe fd1d 	bl	80114da <get_fat>
 8012aa0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8012aa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012aa4:	2b01      	cmp	r3, #1
 8012aa6:	d802      	bhi.n	8012aae <f_open+0x2de>
 8012aa8:	2302      	movs	r3, #2
 8012aaa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012aae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012ab4:	d102      	bne.n	8012abc <f_open+0x2ec>
 8012ab6:	2301      	movs	r3, #1
 8012ab8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012abc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ac0:	1ad3      	subs	r3, r2, r3
 8012ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012ac4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d103      	bne.n	8012ad4 <f_open+0x304>
 8012acc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ad0:	429a      	cmp	r2, r3
 8012ad2:	d8e0      	bhi.n	8012a96 <f_open+0x2c6>
				}
				fp->clust = clst;
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012ad8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012ada:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d127      	bne.n	8012b32 <f_open+0x362>
 8012ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d022      	beq.n	8012b32 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012aec:	697b      	ldr	r3, [r7, #20]
 8012aee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012af0:	4618      	mov	r0, r3
 8012af2:	f7fe fcd3 	bl	801149c <clust2sect>
 8012af6:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d103      	bne.n	8012b06 <f_open+0x336>
						res = FR_INT_ERR;
 8012afe:	2302      	movs	r3, #2
 8012b00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012b04:	e015      	b.n	8012b32 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012b08:	0a5a      	lsrs	r2, r3, #9
 8012b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b0c:	441a      	add	r2, r3
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012b12:	697b      	ldr	r3, [r7, #20]
 8012b14:	7858      	ldrb	r0, [r3, #1]
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	6a1a      	ldr	r2, [r3, #32]
 8012b20:	2301      	movs	r3, #1
 8012b22:	f7fe f911 	bl	8010d48 <disk_read>
 8012b26:	4603      	mov	r3, r0
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d002      	beq.n	8012b32 <f_open+0x362>
 8012b2c:	2301      	movs	r3, #1
 8012b2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012b32:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d002      	beq.n	8012b40 <f_open+0x370>
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012b40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8012b44:	4618      	mov	r0, r3
 8012b46:	3768      	adds	r7, #104	; 0x68
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	bd80      	pop	{r7, pc}

08012b4c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8012b4c:	b580      	push	{r7, lr}
 8012b4e:	b08e      	sub	sp, #56	; 0x38
 8012b50:	af00      	add	r7, sp, #0
 8012b52:	60f8      	str	r0, [r7, #12]
 8012b54:	60b9      	str	r1, [r7, #8]
 8012b56:	607a      	str	r2, [r7, #4]
 8012b58:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8012b5a:	68bb      	ldr	r3, [r7, #8]
 8012b5c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8012b5e:	683b      	ldr	r3, [r7, #0]
 8012b60:	2200      	movs	r2, #0
 8012b62:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	f107 0214 	add.w	r2, r7, #20
 8012b6a:	4611      	mov	r1, r2
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	f7ff fdb3 	bl	80126d8 <validate>
 8012b72:	4603      	mov	r3, r0
 8012b74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012b78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d107      	bne.n	8012b90 <f_read+0x44>
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	7d5b      	ldrb	r3, [r3, #21]
 8012b84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012b88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d002      	beq.n	8012b96 <f_read+0x4a>
 8012b90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012b94:	e115      	b.n	8012dc2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	7d1b      	ldrb	r3, [r3, #20]
 8012b9a:	f003 0301 	and.w	r3, r3, #1
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d101      	bne.n	8012ba6 <f_read+0x5a>
 8012ba2:	2307      	movs	r3, #7
 8012ba4:	e10d      	b.n	8012dc2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	68da      	ldr	r2, [r3, #12]
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	699b      	ldr	r3, [r3, #24]
 8012bae:	1ad3      	subs	r3, r2, r3
 8012bb0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8012bb2:	687a      	ldr	r2, [r7, #4]
 8012bb4:	6a3b      	ldr	r3, [r7, #32]
 8012bb6:	429a      	cmp	r2, r3
 8012bb8:	f240 80fe 	bls.w	8012db8 <f_read+0x26c>
 8012bbc:	6a3b      	ldr	r3, [r7, #32]
 8012bbe:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8012bc0:	e0fa      	b.n	8012db8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	699b      	ldr	r3, [r3, #24]
 8012bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	f040 80c6 	bne.w	8012d5c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	699b      	ldr	r3, [r3, #24]
 8012bd4:	0a5b      	lsrs	r3, r3, #9
 8012bd6:	697a      	ldr	r2, [r7, #20]
 8012bd8:	8952      	ldrh	r2, [r2, #10]
 8012bda:	3a01      	subs	r2, #1
 8012bdc:	4013      	ands	r3, r2
 8012bde:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8012be0:	69fb      	ldr	r3, [r7, #28]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d12f      	bne.n	8012c46 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	699b      	ldr	r3, [r3, #24]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d103      	bne.n	8012bf6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	689b      	ldr	r3, [r3, #8]
 8012bf2:	633b      	str	r3, [r7, #48]	; 0x30
 8012bf4:	e013      	b.n	8012c1e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d007      	beq.n	8012c0e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	699b      	ldr	r3, [r3, #24]
 8012c02:	4619      	mov	r1, r3
 8012c04:	68f8      	ldr	r0, [r7, #12]
 8012c06:	f7fe fef9 	bl	80119fc <clmt_clust>
 8012c0a:	6338      	str	r0, [r7, #48]	; 0x30
 8012c0c:	e007      	b.n	8012c1e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8012c0e:	68fa      	ldr	r2, [r7, #12]
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	69db      	ldr	r3, [r3, #28]
 8012c14:	4619      	mov	r1, r3
 8012c16:	4610      	mov	r0, r2
 8012c18:	f7fe fc5f 	bl	80114da <get_fat>
 8012c1c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8012c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c20:	2b01      	cmp	r3, #1
 8012c22:	d804      	bhi.n	8012c2e <f_read+0xe2>
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	2202      	movs	r2, #2
 8012c28:	755a      	strb	r2, [r3, #21]
 8012c2a:	2302      	movs	r3, #2
 8012c2c:	e0c9      	b.n	8012dc2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012c34:	d104      	bne.n	8012c40 <f_read+0xf4>
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	2201      	movs	r2, #1
 8012c3a:	755a      	strb	r2, [r3, #21]
 8012c3c:	2301      	movs	r3, #1
 8012c3e:	e0c0      	b.n	8012dc2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c44:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012c46:	697a      	ldr	r2, [r7, #20]
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	69db      	ldr	r3, [r3, #28]
 8012c4c:	4619      	mov	r1, r3
 8012c4e:	4610      	mov	r0, r2
 8012c50:	f7fe fc24 	bl	801149c <clust2sect>
 8012c54:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012c56:	69bb      	ldr	r3, [r7, #24]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d104      	bne.n	8012c66 <f_read+0x11a>
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	2202      	movs	r2, #2
 8012c60:	755a      	strb	r2, [r3, #21]
 8012c62:	2302      	movs	r3, #2
 8012c64:	e0ad      	b.n	8012dc2 <f_read+0x276>
			sect += csect;
 8012c66:	69ba      	ldr	r2, [r7, #24]
 8012c68:	69fb      	ldr	r3, [r7, #28]
 8012c6a:	4413      	add	r3, r2
 8012c6c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	0a5b      	lsrs	r3, r3, #9
 8012c72:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8012c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d039      	beq.n	8012cee <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012c7a:	69fa      	ldr	r2, [r7, #28]
 8012c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c7e:	4413      	add	r3, r2
 8012c80:	697a      	ldr	r2, [r7, #20]
 8012c82:	8952      	ldrh	r2, [r2, #10]
 8012c84:	4293      	cmp	r3, r2
 8012c86:	d905      	bls.n	8012c94 <f_read+0x148>
					cc = fs->csize - csect;
 8012c88:	697b      	ldr	r3, [r7, #20]
 8012c8a:	895b      	ldrh	r3, [r3, #10]
 8012c8c:	461a      	mov	r2, r3
 8012c8e:	69fb      	ldr	r3, [r7, #28]
 8012c90:	1ad3      	subs	r3, r2, r3
 8012c92:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012c94:	697b      	ldr	r3, [r7, #20]
 8012c96:	7858      	ldrb	r0, [r3, #1]
 8012c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c9a:	69ba      	ldr	r2, [r7, #24]
 8012c9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012c9e:	f7fe f853 	bl	8010d48 <disk_read>
 8012ca2:	4603      	mov	r3, r0
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d004      	beq.n	8012cb2 <f_read+0x166>
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	2201      	movs	r2, #1
 8012cac:	755a      	strb	r2, [r3, #21]
 8012cae:	2301      	movs	r3, #1
 8012cb0:	e087      	b.n	8012dc2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	7d1b      	ldrb	r3, [r3, #20]
 8012cb6:	b25b      	sxtb	r3, r3
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	da14      	bge.n	8012ce6 <f_read+0x19a>
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	6a1a      	ldr	r2, [r3, #32]
 8012cc0:	69bb      	ldr	r3, [r7, #24]
 8012cc2:	1ad3      	subs	r3, r2, r3
 8012cc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012cc6:	429a      	cmp	r2, r3
 8012cc8:	d90d      	bls.n	8012ce6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	6a1a      	ldr	r2, [r3, #32]
 8012cce:	69bb      	ldr	r3, [r7, #24]
 8012cd0:	1ad3      	subs	r3, r2, r3
 8012cd2:	025b      	lsls	r3, r3, #9
 8012cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012cd6:	18d0      	adds	r0, r2, r3
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	3330      	adds	r3, #48	; 0x30
 8012cdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012ce0:	4619      	mov	r1, r3
 8012ce2:	f7fe f911 	bl	8010f08 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8012ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ce8:	025b      	lsls	r3, r3, #9
 8012cea:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8012cec:	e050      	b.n	8012d90 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	6a1b      	ldr	r3, [r3, #32]
 8012cf2:	69ba      	ldr	r2, [r7, #24]
 8012cf4:	429a      	cmp	r2, r3
 8012cf6:	d02e      	beq.n	8012d56 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	7d1b      	ldrb	r3, [r3, #20]
 8012cfc:	b25b      	sxtb	r3, r3
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	da18      	bge.n	8012d34 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012d02:	697b      	ldr	r3, [r7, #20]
 8012d04:	7858      	ldrb	r0, [r3, #1]
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	6a1a      	ldr	r2, [r3, #32]
 8012d10:	2301      	movs	r3, #1
 8012d12:	f7fe f839 	bl	8010d88 <disk_write>
 8012d16:	4603      	mov	r3, r0
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d004      	beq.n	8012d26 <f_read+0x1da>
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	2201      	movs	r2, #1
 8012d20:	755a      	strb	r2, [r3, #21]
 8012d22:	2301      	movs	r3, #1
 8012d24:	e04d      	b.n	8012dc2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	7d1b      	ldrb	r3, [r3, #20]
 8012d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012d2e:	b2da      	uxtb	r2, r3
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012d34:	697b      	ldr	r3, [r7, #20]
 8012d36:	7858      	ldrb	r0, [r3, #1]
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012d3e:	2301      	movs	r3, #1
 8012d40:	69ba      	ldr	r2, [r7, #24]
 8012d42:	f7fe f801 	bl	8010d48 <disk_read>
 8012d46:	4603      	mov	r3, r0
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d004      	beq.n	8012d56 <f_read+0x20a>
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	2201      	movs	r2, #1
 8012d50:	755a      	strb	r2, [r3, #21]
 8012d52:	2301      	movs	r3, #1
 8012d54:	e035      	b.n	8012dc2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	69ba      	ldr	r2, [r7, #24]
 8012d5a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	699b      	ldr	r3, [r3, #24]
 8012d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012d64:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8012d68:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8012d6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	429a      	cmp	r2, r3
 8012d70:	d901      	bls.n	8012d76 <f_read+0x22a>
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	699b      	ldr	r3, [r3, #24]
 8012d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012d84:	4413      	add	r3, r2
 8012d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d88:	4619      	mov	r1, r3
 8012d8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d8c:	f7fe f8bc 	bl	8010f08 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8012d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d94:	4413      	add	r3, r2
 8012d96:	627b      	str	r3, [r7, #36]	; 0x24
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	699a      	ldr	r2, [r3, #24]
 8012d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d9e:	441a      	add	r2, r3
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	619a      	str	r2, [r3, #24]
 8012da4:	683b      	ldr	r3, [r7, #0]
 8012da6:	681a      	ldr	r2, [r3, #0]
 8012da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012daa:	441a      	add	r2, r3
 8012dac:	683b      	ldr	r3, [r7, #0]
 8012dae:	601a      	str	r2, [r3, #0]
 8012db0:	687a      	ldr	r2, [r7, #4]
 8012db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012db4:	1ad3      	subs	r3, r2, r3
 8012db6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	f47f af01 	bne.w	8012bc2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8012dc0:	2300      	movs	r3, #0
}
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	3738      	adds	r7, #56	; 0x38
 8012dc6:	46bd      	mov	sp, r7
 8012dc8:	bd80      	pop	{r7, pc}

08012dca <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012dca:	b580      	push	{r7, lr}
 8012dcc:	b08c      	sub	sp, #48	; 0x30
 8012dce:	af00      	add	r7, sp, #0
 8012dd0:	60f8      	str	r0, [r7, #12]
 8012dd2:	60b9      	str	r1, [r7, #8]
 8012dd4:	607a      	str	r2, [r7, #4]
 8012dd6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8012dd8:	68bb      	ldr	r3, [r7, #8]
 8012dda:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8012ddc:	683b      	ldr	r3, [r7, #0]
 8012dde:	2200      	movs	r2, #0
 8012de0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	f107 0210 	add.w	r2, r7, #16
 8012de8:	4611      	mov	r1, r2
 8012dea:	4618      	mov	r0, r3
 8012dec:	f7ff fc74 	bl	80126d8 <validate>
 8012df0:	4603      	mov	r3, r0
 8012df2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012df6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d107      	bne.n	8012e0e <f_write+0x44>
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	7d5b      	ldrb	r3, [r3, #21]
 8012e02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8012e06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d002      	beq.n	8012e14 <f_write+0x4a>
 8012e0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e12:	e14b      	b.n	80130ac <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	7d1b      	ldrb	r3, [r3, #20]
 8012e18:	f003 0302 	and.w	r3, r3, #2
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d101      	bne.n	8012e24 <f_write+0x5a>
 8012e20:	2307      	movs	r3, #7
 8012e22:	e143      	b.n	80130ac <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	699a      	ldr	r2, [r3, #24]
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	441a      	add	r2, r3
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	699b      	ldr	r3, [r3, #24]
 8012e30:	429a      	cmp	r2, r3
 8012e32:	f080 812d 	bcs.w	8013090 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	699b      	ldr	r3, [r3, #24]
 8012e3a:	43db      	mvns	r3, r3
 8012e3c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8012e3e:	e127      	b.n	8013090 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	699b      	ldr	r3, [r3, #24]
 8012e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	f040 80e3 	bne.w	8013014 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	699b      	ldr	r3, [r3, #24]
 8012e52:	0a5b      	lsrs	r3, r3, #9
 8012e54:	693a      	ldr	r2, [r7, #16]
 8012e56:	8952      	ldrh	r2, [r2, #10]
 8012e58:	3a01      	subs	r2, #1
 8012e5a:	4013      	ands	r3, r2
 8012e5c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8012e5e:	69bb      	ldr	r3, [r7, #24]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d143      	bne.n	8012eec <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	699b      	ldr	r3, [r3, #24]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d10c      	bne.n	8012e86 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	689b      	ldr	r3, [r3, #8]
 8012e70:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8012e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d11a      	bne.n	8012eae <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	2100      	movs	r1, #0
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f7fe fd25 	bl	80118cc <create_chain>
 8012e82:	62b8      	str	r0, [r7, #40]	; 0x28
 8012e84:	e013      	b.n	8012eae <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d007      	beq.n	8012e9e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	699b      	ldr	r3, [r3, #24]
 8012e92:	4619      	mov	r1, r3
 8012e94:	68f8      	ldr	r0, [r7, #12]
 8012e96:	f7fe fdb1 	bl	80119fc <clmt_clust>
 8012e9a:	62b8      	str	r0, [r7, #40]	; 0x28
 8012e9c:	e007      	b.n	8012eae <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8012e9e:	68fa      	ldr	r2, [r7, #12]
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	69db      	ldr	r3, [r3, #28]
 8012ea4:	4619      	mov	r1, r3
 8012ea6:	4610      	mov	r0, r2
 8012ea8:	f7fe fd10 	bl	80118cc <create_chain>
 8012eac:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	f000 80f2 	beq.w	801309a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eb8:	2b01      	cmp	r3, #1
 8012eba:	d104      	bne.n	8012ec6 <f_write+0xfc>
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	2202      	movs	r2, #2
 8012ec0:	755a      	strb	r2, [r3, #21]
 8012ec2:	2302      	movs	r3, #2
 8012ec4:	e0f2      	b.n	80130ac <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012ecc:	d104      	bne.n	8012ed8 <f_write+0x10e>
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	2201      	movs	r2, #1
 8012ed2:	755a      	strb	r2, [r3, #21]
 8012ed4:	2301      	movs	r3, #1
 8012ed6:	e0e9      	b.n	80130ac <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012edc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	689b      	ldr	r3, [r3, #8]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d102      	bne.n	8012eec <f_write+0x122>
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012eea:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	7d1b      	ldrb	r3, [r3, #20]
 8012ef0:	b25b      	sxtb	r3, r3
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	da18      	bge.n	8012f28 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012ef6:	693b      	ldr	r3, [r7, #16]
 8012ef8:	7858      	ldrb	r0, [r3, #1]
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	6a1a      	ldr	r2, [r3, #32]
 8012f04:	2301      	movs	r3, #1
 8012f06:	f7fd ff3f 	bl	8010d88 <disk_write>
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d004      	beq.n	8012f1a <f_write+0x150>
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	2201      	movs	r2, #1
 8012f14:	755a      	strb	r2, [r3, #21]
 8012f16:	2301      	movs	r3, #1
 8012f18:	e0c8      	b.n	80130ac <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	7d1b      	ldrb	r3, [r3, #20]
 8012f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012f22:	b2da      	uxtb	r2, r3
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012f28:	693a      	ldr	r2, [r7, #16]
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	69db      	ldr	r3, [r3, #28]
 8012f2e:	4619      	mov	r1, r3
 8012f30:	4610      	mov	r0, r2
 8012f32:	f7fe fab3 	bl	801149c <clust2sect>
 8012f36:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012f38:	697b      	ldr	r3, [r7, #20]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d104      	bne.n	8012f48 <f_write+0x17e>
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	2202      	movs	r2, #2
 8012f42:	755a      	strb	r2, [r3, #21]
 8012f44:	2302      	movs	r3, #2
 8012f46:	e0b1      	b.n	80130ac <f_write+0x2e2>
			sect += csect;
 8012f48:	697a      	ldr	r2, [r7, #20]
 8012f4a:	69bb      	ldr	r3, [r7, #24]
 8012f4c:	4413      	add	r3, r2
 8012f4e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	0a5b      	lsrs	r3, r3, #9
 8012f54:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012f56:	6a3b      	ldr	r3, [r7, #32]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d03c      	beq.n	8012fd6 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012f5c:	69ba      	ldr	r2, [r7, #24]
 8012f5e:	6a3b      	ldr	r3, [r7, #32]
 8012f60:	4413      	add	r3, r2
 8012f62:	693a      	ldr	r2, [r7, #16]
 8012f64:	8952      	ldrh	r2, [r2, #10]
 8012f66:	4293      	cmp	r3, r2
 8012f68:	d905      	bls.n	8012f76 <f_write+0x1ac>
					cc = fs->csize - csect;
 8012f6a:	693b      	ldr	r3, [r7, #16]
 8012f6c:	895b      	ldrh	r3, [r3, #10]
 8012f6e:	461a      	mov	r2, r3
 8012f70:	69bb      	ldr	r3, [r7, #24]
 8012f72:	1ad3      	subs	r3, r2, r3
 8012f74:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012f76:	693b      	ldr	r3, [r7, #16]
 8012f78:	7858      	ldrb	r0, [r3, #1]
 8012f7a:	6a3b      	ldr	r3, [r7, #32]
 8012f7c:	697a      	ldr	r2, [r7, #20]
 8012f7e:	69f9      	ldr	r1, [r7, #28]
 8012f80:	f7fd ff02 	bl	8010d88 <disk_write>
 8012f84:	4603      	mov	r3, r0
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d004      	beq.n	8012f94 <f_write+0x1ca>
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	2201      	movs	r2, #1
 8012f8e:	755a      	strb	r2, [r3, #21]
 8012f90:	2301      	movs	r3, #1
 8012f92:	e08b      	b.n	80130ac <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	6a1a      	ldr	r2, [r3, #32]
 8012f98:	697b      	ldr	r3, [r7, #20]
 8012f9a:	1ad3      	subs	r3, r2, r3
 8012f9c:	6a3a      	ldr	r2, [r7, #32]
 8012f9e:	429a      	cmp	r2, r3
 8012fa0:	d915      	bls.n	8012fce <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	6a1a      	ldr	r2, [r3, #32]
 8012fac:	697b      	ldr	r3, [r7, #20]
 8012fae:	1ad3      	subs	r3, r2, r3
 8012fb0:	025b      	lsls	r3, r3, #9
 8012fb2:	69fa      	ldr	r2, [r7, #28]
 8012fb4:	4413      	add	r3, r2
 8012fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012fba:	4619      	mov	r1, r3
 8012fbc:	f7fd ffa4 	bl	8010f08 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	7d1b      	ldrb	r3, [r3, #20]
 8012fc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012fc8:	b2da      	uxtb	r2, r3
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012fce:	6a3b      	ldr	r3, [r7, #32]
 8012fd0:	025b      	lsls	r3, r3, #9
 8012fd2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8012fd4:	e03f      	b.n	8013056 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	6a1b      	ldr	r3, [r3, #32]
 8012fda:	697a      	ldr	r2, [r7, #20]
 8012fdc:	429a      	cmp	r2, r3
 8012fde:	d016      	beq.n	801300e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	699a      	ldr	r2, [r3, #24]
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012fe8:	429a      	cmp	r2, r3
 8012fea:	d210      	bcs.n	801300e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8012fec:	693b      	ldr	r3, [r7, #16]
 8012fee:	7858      	ldrb	r0, [r3, #1]
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012ff6:	2301      	movs	r3, #1
 8012ff8:	697a      	ldr	r2, [r7, #20]
 8012ffa:	f7fd fea5 	bl	8010d48 <disk_read>
 8012ffe:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013000:	2b00      	cmp	r3, #0
 8013002:	d004      	beq.n	801300e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	2201      	movs	r2, #1
 8013008:	755a      	strb	r2, [r3, #21]
 801300a:	2301      	movs	r3, #1
 801300c:	e04e      	b.n	80130ac <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	697a      	ldr	r2, [r7, #20]
 8013012:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	699b      	ldr	r3, [r3, #24]
 8013018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801301c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8013020:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	429a      	cmp	r2, r3
 8013028:	d901      	bls.n	801302e <f_write+0x264>
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	699b      	ldr	r3, [r3, #24]
 8013038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801303c:	4413      	add	r3, r2
 801303e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013040:	69f9      	ldr	r1, [r7, #28]
 8013042:	4618      	mov	r0, r3
 8013044:	f7fd ff60 	bl	8010f08 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	7d1b      	ldrb	r3, [r3, #20]
 801304c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013050:	b2da      	uxtb	r2, r3
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013056:	69fa      	ldr	r2, [r7, #28]
 8013058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801305a:	4413      	add	r3, r2
 801305c:	61fb      	str	r3, [r7, #28]
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	699a      	ldr	r2, [r3, #24]
 8013062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013064:	441a      	add	r2, r3
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	619a      	str	r2, [r3, #24]
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	68da      	ldr	r2, [r3, #12]
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	699b      	ldr	r3, [r3, #24]
 8013072:	429a      	cmp	r2, r3
 8013074:	bf38      	it	cc
 8013076:	461a      	movcc	r2, r3
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	60da      	str	r2, [r3, #12]
 801307c:	683b      	ldr	r3, [r7, #0]
 801307e:	681a      	ldr	r2, [r3, #0]
 8013080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013082:	441a      	add	r2, r3
 8013084:	683b      	ldr	r3, [r7, #0]
 8013086:	601a      	str	r2, [r3, #0]
 8013088:	687a      	ldr	r2, [r7, #4]
 801308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801308c:	1ad3      	subs	r3, r2, r3
 801308e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	2b00      	cmp	r3, #0
 8013094:	f47f aed4 	bne.w	8012e40 <f_write+0x76>
 8013098:	e000      	b.n	801309c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801309a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	7d1b      	ldrb	r3, [r3, #20]
 80130a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80130a4:	b2da      	uxtb	r2, r3
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80130aa:	2300      	movs	r3, #0
}
 80130ac:	4618      	mov	r0, r3
 80130ae:	3730      	adds	r7, #48	; 0x30
 80130b0:	46bd      	mov	sp, r7
 80130b2:	bd80      	pop	{r7, pc}

080130b4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b086      	sub	sp, #24
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	f107 0208 	add.w	r2, r7, #8
 80130c2:	4611      	mov	r1, r2
 80130c4:	4618      	mov	r0, r3
 80130c6:	f7ff fb07 	bl	80126d8 <validate>
 80130ca:	4603      	mov	r3, r0
 80130cc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80130ce:	7dfb      	ldrb	r3, [r7, #23]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d168      	bne.n	80131a6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	7d1b      	ldrb	r3, [r3, #20]
 80130d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d062      	beq.n	80131a6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	7d1b      	ldrb	r3, [r3, #20]
 80130e4:	b25b      	sxtb	r3, r3
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	da15      	bge.n	8013116 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80130ea:	68bb      	ldr	r3, [r7, #8]
 80130ec:	7858      	ldrb	r0, [r3, #1]
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	6a1a      	ldr	r2, [r3, #32]
 80130f8:	2301      	movs	r3, #1
 80130fa:	f7fd fe45 	bl	8010d88 <disk_write>
 80130fe:	4603      	mov	r3, r0
 8013100:	2b00      	cmp	r3, #0
 8013102:	d001      	beq.n	8013108 <f_sync+0x54>
 8013104:	2301      	movs	r3, #1
 8013106:	e04f      	b.n	80131a8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	7d1b      	ldrb	r3, [r3, #20]
 801310c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013110:	b2da      	uxtb	r2, r3
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013116:	f7fb ffb3 	bl	800f080 <get_fattime>
 801311a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801311c:	68ba      	ldr	r2, [r7, #8]
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013122:	4619      	mov	r1, r3
 8013124:	4610      	mov	r0, r2
 8013126:	f7fe f91d 	bl	8011364 <move_window>
 801312a:	4603      	mov	r3, r0
 801312c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801312e:	7dfb      	ldrb	r3, [r7, #23]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d138      	bne.n	80131a6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013138:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	330b      	adds	r3, #11
 801313e:	781a      	ldrb	r2, [r3, #0]
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	330b      	adds	r3, #11
 8013144:	f042 0220 	orr.w	r2, r2, #32
 8013148:	b2d2      	uxtb	r2, r2
 801314a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	6818      	ldr	r0, [r3, #0]
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	689b      	ldr	r3, [r3, #8]
 8013154:	461a      	mov	r2, r3
 8013156:	68f9      	ldr	r1, [r7, #12]
 8013158:	f7fe fe2a 	bl	8011db0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	f103 021c 	add.w	r2, r3, #28
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	68db      	ldr	r3, [r3, #12]
 8013166:	4619      	mov	r1, r3
 8013168:	4610      	mov	r0, r2
 801316a:	f7fd fea1 	bl	8010eb0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	3316      	adds	r3, #22
 8013172:	6939      	ldr	r1, [r7, #16]
 8013174:	4618      	mov	r0, r3
 8013176:	f7fd fe9b 	bl	8010eb0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	3312      	adds	r3, #18
 801317e:	2100      	movs	r1, #0
 8013180:	4618      	mov	r0, r3
 8013182:	f7fd fe7a 	bl	8010e7a <st_word>
					fs->wflag = 1;
 8013186:	68bb      	ldr	r3, [r7, #8]
 8013188:	2201      	movs	r2, #1
 801318a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801318c:	68bb      	ldr	r3, [r7, #8]
 801318e:	4618      	mov	r0, r3
 8013190:	f7fe f916 	bl	80113c0 <sync_fs>
 8013194:	4603      	mov	r3, r0
 8013196:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	7d1b      	ldrb	r3, [r3, #20]
 801319c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80131a0:	b2da      	uxtb	r2, r3
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80131a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80131a8:	4618      	mov	r0, r3
 80131aa:	3718      	adds	r7, #24
 80131ac:	46bd      	mov	sp, r7
 80131ae:	bd80      	pop	{r7, pc}

080131b0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b084      	sub	sp, #16
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80131b8:	6878      	ldr	r0, [r7, #4]
 80131ba:	f7ff ff7b 	bl	80130b4 <f_sync>
 80131be:	4603      	mov	r3, r0
 80131c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80131c2:	7bfb      	ldrb	r3, [r7, #15]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d118      	bne.n	80131fa <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	f107 0208 	add.w	r2, r7, #8
 80131ce:	4611      	mov	r1, r2
 80131d0:	4618      	mov	r0, r3
 80131d2:	f7ff fa81 	bl	80126d8 <validate>
 80131d6:	4603      	mov	r3, r0
 80131d8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80131da:	7bfb      	ldrb	r3, [r7, #15]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d10c      	bne.n	80131fa <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	691b      	ldr	r3, [r3, #16]
 80131e4:	4618      	mov	r0, r3
 80131e6:	f7fe f819 	bl	801121c <dec_lock>
 80131ea:	4603      	mov	r3, r0
 80131ec:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80131ee:	7bfb      	ldrb	r3, [r7, #15]
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d102      	bne.n	80131fa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	2200      	movs	r2, #0
 80131f8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80131fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80131fc:	4618      	mov	r0, r3
 80131fe:	3710      	adds	r7, #16
 8013200:	46bd      	mov	sp, r7
 8013202:	bd80      	pop	{r7, pc}

08013204 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8013204:	b590      	push	{r4, r7, lr}
 8013206:	b09d      	sub	sp, #116	; 0x74
 8013208:	af00      	add	r7, sp, #0
 801320a:	60f8      	str	r0, [r7, #12]
 801320c:	607a      	str	r2, [r7, #4]
 801320e:	603b      	str	r3, [r7, #0]
 8013210:	460b      	mov	r3, r1
 8013212:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8013214:	2301      	movs	r3, #1
 8013216:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8013218:	f44f 7300 	mov.w	r3, #512	; 0x200
 801321c:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 801321e:	f107 030c 	add.w	r3, r7, #12
 8013222:	4618      	mov	r0, r3
 8013224:	f7fe ff71 	bl	801210a <get_ldnumber>
 8013228:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801322a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801322c:	2b00      	cmp	r3, #0
 801322e:	da02      	bge.n	8013236 <f_mkfs+0x32>
 8013230:	230b      	movs	r3, #11
 8013232:	f000 bc0d 	b.w	8013a50 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8013236:	4a94      	ldr	r2, [pc, #592]	; (8013488 <f_mkfs+0x284>)
 8013238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801323a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d005      	beq.n	801324e <f_mkfs+0x4a>
 8013242:	4a91      	ldr	r2, [pc, #580]	; (8013488 <f_mkfs+0x284>)
 8013244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801324a:	2200      	movs	r2, #0
 801324c:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 801324e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013250:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8013254:	2300      	movs	r3, #0
 8013256:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 801325a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801325e:	4618      	mov	r0, r3
 8013260:	f7fd fd4c 	bl	8010cfc <disk_initialize>
 8013264:	4603      	mov	r3, r0
 8013266:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 801326a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 801326e:	f003 0301 	and.w	r3, r3, #1
 8013272:	2b00      	cmp	r3, #0
 8013274:	d001      	beq.n	801327a <f_mkfs+0x76>
 8013276:	2303      	movs	r3, #3
 8013278:	e3ea      	b.n	8013a50 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 801327a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 801327e:	f003 0304 	and.w	r3, r3, #4
 8013282:	2b00      	cmp	r3, #0
 8013284:	d001      	beq.n	801328a <f_mkfs+0x86>
 8013286:	230a      	movs	r3, #10
 8013288:	e3e2      	b.n	8013a50 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 801328a:	f107 0214 	add.w	r2, r7, #20
 801328e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013292:	2103      	movs	r1, #3
 8013294:	4618      	mov	r0, r3
 8013296:	f7fd fd97 	bl	8010dc8 <disk_ioctl>
 801329a:	4603      	mov	r3, r0
 801329c:	2b00      	cmp	r3, #0
 801329e:	d10c      	bne.n	80132ba <f_mkfs+0xb6>
 80132a0:	697b      	ldr	r3, [r7, #20]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d009      	beq.n	80132ba <f_mkfs+0xb6>
 80132a6:	697b      	ldr	r3, [r7, #20]
 80132a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80132ac:	d805      	bhi.n	80132ba <f_mkfs+0xb6>
 80132ae:	697b      	ldr	r3, [r7, #20]
 80132b0:	1e5a      	subs	r2, r3, #1
 80132b2:	697b      	ldr	r3, [r7, #20]
 80132b4:	4013      	ands	r3, r2
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d001      	beq.n	80132be <f_mkfs+0xba>
 80132ba:	2301      	movs	r3, #1
 80132bc:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 80132be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80132c2:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d003      	beq.n	80132d2 <f_mkfs+0xce>
 80132ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80132cc:	687a      	ldr	r2, [r7, #4]
 80132ce:	429a      	cmp	r2, r3
 80132d0:	d309      	bcc.n	80132e6 <f_mkfs+0xe2>
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80132d8:	d805      	bhi.n	80132e6 <f_mkfs+0xe2>
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	1e5a      	subs	r2, r3, #1
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	4013      	ands	r3, r2
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d001      	beq.n	80132ea <f_mkfs+0xe6>
 80132e6:	2313      	movs	r3, #19
 80132e8:	e3b2      	b.n	8013a50 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 80132ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80132ec:	687a      	ldr	r2, [r7, #4]
 80132ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80132f2:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 80132f4:	683b      	ldr	r3, [r7, #0]
 80132f6:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 80132f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80132fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80132fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8013302:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8013304:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013308:	fb02 f303 	mul.w	r3, r2, r3
 801330c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 801330e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013310:	2b00      	cmp	r3, #0
 8013312:	d101      	bne.n	8013318 <f_mkfs+0x114>
 8013314:	230e      	movs	r3, #14
 8013316:	e39b      	b.n	8013a50 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8013318:	f107 0210 	add.w	r2, r7, #16
 801331c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013320:	2101      	movs	r1, #1
 8013322:	4618      	mov	r0, r3
 8013324:	f7fd fd50 	bl	8010dc8 <disk_ioctl>
 8013328:	4603      	mov	r3, r0
 801332a:	2b00      	cmp	r3, #0
 801332c:	d001      	beq.n	8013332 <f_mkfs+0x12e>
 801332e:	2301      	movs	r3, #1
 8013330:	e38e      	b.n	8013a50 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8013332:	7afb      	ldrb	r3, [r7, #11]
 8013334:	f003 0308 	and.w	r3, r3, #8
 8013338:	2b00      	cmp	r3, #0
 801333a:	d001      	beq.n	8013340 <f_mkfs+0x13c>
 801333c:	2300      	movs	r3, #0
 801333e:	e000      	b.n	8013342 <f_mkfs+0x13e>
 8013340:	233f      	movs	r3, #63	; 0x3f
 8013342:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8013344:	693b      	ldr	r3, [r7, #16]
 8013346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013348:	429a      	cmp	r2, r3
 801334a:	d901      	bls.n	8013350 <f_mkfs+0x14c>
 801334c:	230e      	movs	r3, #14
 801334e:	e37f      	b.n	8013a50 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8013350:	693a      	ldr	r2, [r7, #16]
 8013352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013354:	1ad3      	subs	r3, r2, r3
 8013356:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8013358:	693b      	ldr	r3, [r7, #16]
 801335a:	2b7f      	cmp	r3, #127	; 0x7f
 801335c:	d801      	bhi.n	8013362 <f_mkfs+0x15e>
 801335e:	230e      	movs	r3, #14
 8013360:	e376      	b.n	8013a50 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	2b80      	cmp	r3, #128	; 0x80
 8013366:	d901      	bls.n	801336c <f_mkfs+0x168>
 8013368:	2313      	movs	r3, #19
 801336a:	e371      	b.n	8013a50 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 801336c:	7afb      	ldrb	r3, [r7, #11]
 801336e:	f003 0302 	and.w	r3, r3, #2
 8013372:	2b00      	cmp	r3, #0
 8013374:	d00d      	beq.n	8013392 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8013376:	7afb      	ldrb	r3, [r7, #11]
 8013378:	f003 0307 	and.w	r3, r3, #7
 801337c:	2b02      	cmp	r3, #2
 801337e:	d004      	beq.n	801338a <f_mkfs+0x186>
 8013380:	7afb      	ldrb	r3, [r7, #11]
 8013382:	f003 0301 	and.w	r3, r3, #1
 8013386:	2b00      	cmp	r3, #0
 8013388:	d103      	bne.n	8013392 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 801338a:	2303      	movs	r3, #3
 801338c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8013390:	e009      	b.n	80133a6 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8013392:	7afb      	ldrb	r3, [r7, #11]
 8013394:	f003 0301 	and.w	r3, r3, #1
 8013398:	2b00      	cmp	r3, #0
 801339a:	d101      	bne.n	80133a0 <f_mkfs+0x19c>
 801339c:	2313      	movs	r3, #19
 801339e:	e357      	b.n	8013a50 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 80133a0:	2302      	movs	r3, #2
 80133a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 80133aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80133ae:	2b03      	cmp	r3, #3
 80133b0:	d13c      	bne.n	801342c <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 80133b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d11b      	bne.n	80133f0 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 80133b8:	693b      	ldr	r3, [r7, #16]
 80133ba:	0c5b      	lsrs	r3, r3, #17
 80133bc:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80133be:	2300      	movs	r3, #0
 80133c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80133c2:	2301      	movs	r3, #1
 80133c4:	653b      	str	r3, [r7, #80]	; 0x50
 80133c6:	e005      	b.n	80133d4 <f_mkfs+0x1d0>
 80133c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80133ca:	3301      	adds	r3, #1
 80133cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80133ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133d0:	005b      	lsls	r3, r3, #1
 80133d2:	653b      	str	r3, [r7, #80]	; 0x50
 80133d4:	4a2d      	ldr	r2, [pc, #180]	; (801348c <f_mkfs+0x288>)
 80133d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80133d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d007      	beq.n	80133f0 <f_mkfs+0x1ec>
 80133e0:	4a2a      	ldr	r2, [pc, #168]	; (801348c <f_mkfs+0x288>)
 80133e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80133e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80133e8:	461a      	mov	r2, r3
 80133ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80133ec:	4293      	cmp	r3, r2
 80133ee:	d2eb      	bcs.n	80133c8 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 80133f0:	693a      	ldr	r2, [r7, #16]
 80133f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80133f8:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 80133fa:	6a3b      	ldr	r3, [r7, #32]
 80133fc:	3302      	adds	r3, #2
 80133fe:	009a      	lsls	r2, r3, #2
 8013400:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013402:	4413      	add	r3, r2
 8013404:	1e5a      	subs	r2, r3, #1
 8013406:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013408:	fbb2 f3f3 	udiv	r3, r2, r3
 801340c:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 801340e:	2320      	movs	r3, #32
 8013410:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 8013412:	2300      	movs	r3, #0
 8013414:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8013416:	6a3b      	ldr	r3, [r7, #32]
 8013418:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801341c:	4293      	cmp	r3, r2
 801341e:	d903      	bls.n	8013428 <f_mkfs+0x224>
 8013420:	6a3b      	ldr	r3, [r7, #32]
 8013422:	4a1b      	ldr	r2, [pc, #108]	; (8013490 <f_mkfs+0x28c>)
 8013424:	4293      	cmp	r3, r2
 8013426:	d952      	bls.n	80134ce <f_mkfs+0x2ca>
 8013428:	230e      	movs	r3, #14
 801342a:	e311      	b.n	8013a50 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 801342c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801342e:	2b00      	cmp	r3, #0
 8013430:	d11b      	bne.n	801346a <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8013432:	693b      	ldr	r3, [r7, #16]
 8013434:	0b1b      	lsrs	r3, r3, #12
 8013436:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8013438:	2300      	movs	r3, #0
 801343a:	64bb      	str	r3, [r7, #72]	; 0x48
 801343c:	2301      	movs	r3, #1
 801343e:	653b      	str	r3, [r7, #80]	; 0x50
 8013440:	e005      	b.n	801344e <f_mkfs+0x24a>
 8013442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013444:	3301      	adds	r3, #1
 8013446:	64bb      	str	r3, [r7, #72]	; 0x48
 8013448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801344a:	005b      	lsls	r3, r3, #1
 801344c:	653b      	str	r3, [r7, #80]	; 0x50
 801344e:	4a11      	ldr	r2, [pc, #68]	; (8013494 <f_mkfs+0x290>)
 8013450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d007      	beq.n	801346a <f_mkfs+0x266>
 801345a:	4a0e      	ldr	r2, [pc, #56]	; (8013494 <f_mkfs+0x290>)
 801345c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801345e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013462:	461a      	mov	r2, r3
 8013464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013466:	4293      	cmp	r3, r2
 8013468:	d2eb      	bcs.n	8013442 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 801346a:	693a      	ldr	r2, [r7, #16]
 801346c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801346e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013472:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8013474:	6a3b      	ldr	r3, [r7, #32]
 8013476:	f640 72f5 	movw	r2, #4085	; 0xff5
 801347a:	4293      	cmp	r3, r2
 801347c:	d90c      	bls.n	8013498 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 801347e:	6a3b      	ldr	r3, [r7, #32]
 8013480:	3302      	adds	r3, #2
 8013482:	005b      	lsls	r3, r3, #1
 8013484:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013486:	e012      	b.n	80134ae <f_mkfs+0x2aa>
 8013488:	2000132c 	.word	0x2000132c
 801348c:	080179dc 	.word	0x080179dc
 8013490:	0ffffff5 	.word	0x0ffffff5
 8013494:	080179ec 	.word	0x080179ec
				} else {
					fmt = FS_FAT12;
 8013498:	2301      	movs	r3, #1
 801349a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 801349e:	6a3a      	ldr	r2, [r7, #32]
 80134a0:	4613      	mov	r3, r2
 80134a2:	005b      	lsls	r3, r3, #1
 80134a4:	4413      	add	r3, r2
 80134a6:	3301      	adds	r3, #1
 80134a8:	085b      	lsrs	r3, r3, #1
 80134aa:	3303      	adds	r3, #3
 80134ac:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 80134ae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80134b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80134b2:	4413      	add	r3, r2
 80134b4:	1e5a      	subs	r2, r3, #1
 80134b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80134b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80134bc:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 80134be:	2301      	movs	r3, #1
 80134c0:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 80134c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134c4:	015a      	lsls	r2, r3, #5
 80134c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80134c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80134cc:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 80134ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80134d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80134d2:	4413      	add	r3, r2
 80134d4:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 80134d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80134d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80134da:	fb03 f202 	mul.w	r2, r3, r2
 80134de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80134e0:	4413      	add	r3, r2
 80134e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80134e4:	4413      	add	r3, r2
 80134e6:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 80134e8:	697a      	ldr	r2, [r7, #20]
 80134ea:	69fb      	ldr	r3, [r7, #28]
 80134ec:	4413      	add	r3, r2
 80134ee:	1e5a      	subs	r2, r3, #1
 80134f0:	697b      	ldr	r3, [r7, #20]
 80134f2:	425b      	negs	r3, r3
 80134f4:	401a      	ands	r2, r3
 80134f6:	69fb      	ldr	r3, [r7, #28]
 80134f8:	1ad3      	subs	r3, r2, r3
 80134fa:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 80134fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013500:	2b03      	cmp	r3, #3
 8013502:	d108      	bne.n	8013516 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8013504:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013508:	4413      	add	r3, r2
 801350a:	657b      	str	r3, [r7, #84]	; 0x54
 801350c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801350e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013510:	4413      	add	r3, r2
 8013512:	65bb      	str	r3, [r7, #88]	; 0x58
 8013514:	e006      	b.n	8013524 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8013516:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801351a:	fbb2 f3f3 	udiv	r3, r2, r3
 801351e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013520:	4413      	add	r3, r2
 8013522:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8013524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013526:	011a      	lsls	r2, r3, #4
 8013528:	69fb      	ldr	r3, [r7, #28]
 801352a:	441a      	add	r2, r3
 801352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801352e:	1ad2      	subs	r2, r2, r3
 8013530:	693b      	ldr	r3, [r7, #16]
 8013532:	429a      	cmp	r2, r3
 8013534:	d901      	bls.n	801353a <f_mkfs+0x336>
 8013536:	230e      	movs	r3, #14
 8013538:	e28a      	b.n	8013a50 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 801353a:	693a      	ldr	r2, [r7, #16]
 801353c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801353e:	1ad2      	subs	r2, r2, r3
 8013540:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013542:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013544:	fb01 f303 	mul.w	r3, r1, r3
 8013548:	1ad2      	subs	r2, r2, r3
 801354a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801354c:	1ad2      	subs	r2, r2, r3
 801354e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013550:	fbb2 f3f3 	udiv	r3, r2, r3
 8013554:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8013556:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801355a:	2b03      	cmp	r3, #3
 801355c:	d10f      	bne.n	801357e <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 801355e:	6a3b      	ldr	r3, [r7, #32]
 8013560:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013564:	4293      	cmp	r3, r2
 8013566:	d80a      	bhi.n	801357e <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d105      	bne.n	801357a <f_mkfs+0x376>
 801356e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013570:	085b      	lsrs	r3, r3, #1
 8013572:	607b      	str	r3, [r7, #4]
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d144      	bne.n	8013604 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 801357a:	230e      	movs	r3, #14
 801357c:	e268      	b.n	8013a50 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 801357e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013582:	2b02      	cmp	r3, #2
 8013584:	d133      	bne.n	80135ee <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8013586:	6a3b      	ldr	r3, [r7, #32]
 8013588:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801358c:	4293      	cmp	r3, r2
 801358e:	d91e      	bls.n	80135ce <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	2b00      	cmp	r3, #0
 8013594:	d107      	bne.n	80135a6 <f_mkfs+0x3a2>
 8013596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013598:	005b      	lsls	r3, r3, #1
 801359a:	2b40      	cmp	r3, #64	; 0x40
 801359c:	d803      	bhi.n	80135a6 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 801359e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135a0:	005b      	lsls	r3, r3, #1
 80135a2:	607b      	str	r3, [r7, #4]
 80135a4:	e033      	b.n	801360e <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 80135a6:	7afb      	ldrb	r3, [r7, #11]
 80135a8:	f003 0302 	and.w	r3, r3, #2
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d003      	beq.n	80135b8 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 80135b0:	2303      	movs	r3, #3
 80135b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80135b6:	e02a      	b.n	801360e <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d105      	bne.n	80135ca <f_mkfs+0x3c6>
 80135be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135c0:	005b      	lsls	r3, r3, #1
 80135c2:	607b      	str	r3, [r7, #4]
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	2b80      	cmp	r3, #128	; 0x80
 80135c8:	d91e      	bls.n	8013608 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 80135ca:	230e      	movs	r3, #14
 80135cc:	e240      	b.n	8013a50 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 80135ce:	6a3b      	ldr	r3, [r7, #32]
 80135d0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80135d4:	4293      	cmp	r3, r2
 80135d6:	d80a      	bhi.n	80135ee <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d105      	bne.n	80135ea <f_mkfs+0x3e6>
 80135de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135e0:	005b      	lsls	r3, r3, #1
 80135e2:	607b      	str	r3, [r7, #4]
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	2b80      	cmp	r3, #128	; 0x80
 80135e8:	d910      	bls.n	801360c <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 80135ea:	230e      	movs	r3, #14
 80135ec:	e230      	b.n	8013a50 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 80135ee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80135f2:	2b01      	cmp	r3, #1
 80135f4:	d10c      	bne.n	8013610 <f_mkfs+0x40c>
 80135f6:	6a3b      	ldr	r3, [r7, #32]
 80135f8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80135fc:	4293      	cmp	r3, r2
 80135fe:	d907      	bls.n	8013610 <f_mkfs+0x40c>
 8013600:	230e      	movs	r3, #14
 8013602:	e225      	b.n	8013a50 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8013604:	bf00      	nop
 8013606:	e6ce      	b.n	80133a6 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8013608:	bf00      	nop
 801360a:	e6cc      	b.n	80133a6 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 801360c:	bf00      	nop
			pau = au;
 801360e:	e6ca      	b.n	80133a6 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8013610:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8013612:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013614:	461a      	mov	r2, r3
 8013616:	2100      	movs	r1, #0
 8013618:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801361a:	f7fd fc96 	bl	8010f4a <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 801361e:	220b      	movs	r2, #11
 8013620:	49b2      	ldr	r1, [pc, #712]	; (80138ec <f_mkfs+0x6e8>)
 8013622:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013624:	f7fd fc70 	bl	8010f08 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8013628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801362a:	330b      	adds	r3, #11
 801362c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801362e:	4611      	mov	r1, r2
 8013630:	4618      	mov	r0, r3
 8013632:	f7fd fc22 	bl	8010e7a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8013636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013638:	330d      	adds	r3, #13
 801363a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801363c:	b2d2      	uxtb	r2, r2
 801363e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8013640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013642:	330e      	adds	r3, #14
 8013644:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013646:	b292      	uxth	r2, r2
 8013648:	4611      	mov	r1, r2
 801364a:	4618      	mov	r0, r3
 801364c:	f7fd fc15 	bl	8010e7a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8013650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013652:	3310      	adds	r3, #16
 8013654:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013656:	b2d2      	uxtb	r2, r2
 8013658:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 801365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801365c:	f103 0211 	add.w	r2, r3, #17
 8013660:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013664:	2b03      	cmp	r3, #3
 8013666:	d002      	beq.n	801366e <f_mkfs+0x46a>
 8013668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801366a:	b29b      	uxth	r3, r3
 801366c:	e000      	b.n	8013670 <f_mkfs+0x46c>
 801366e:	2300      	movs	r3, #0
 8013670:	4619      	mov	r1, r3
 8013672:	4610      	mov	r0, r2
 8013674:	f7fd fc01 	bl	8010e7a <st_word>
		if (sz_vol < 0x10000) {
 8013678:	693b      	ldr	r3, [r7, #16]
 801367a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801367e:	d208      	bcs.n	8013692 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8013680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013682:	3313      	adds	r3, #19
 8013684:	693a      	ldr	r2, [r7, #16]
 8013686:	b292      	uxth	r2, r2
 8013688:	4611      	mov	r1, r2
 801368a:	4618      	mov	r0, r3
 801368c:	f7fd fbf5 	bl	8010e7a <st_word>
 8013690:	e006      	b.n	80136a0 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8013692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013694:	3320      	adds	r3, #32
 8013696:	693a      	ldr	r2, [r7, #16]
 8013698:	4611      	mov	r1, r2
 801369a:	4618      	mov	r0, r3
 801369c:	f7fd fc08 	bl	8010eb0 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 80136a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136a2:	3315      	adds	r3, #21
 80136a4:	22f8      	movs	r2, #248	; 0xf8
 80136a6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 80136a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136aa:	3318      	adds	r3, #24
 80136ac:	213f      	movs	r1, #63	; 0x3f
 80136ae:	4618      	mov	r0, r3
 80136b0:	f7fd fbe3 	bl	8010e7a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 80136b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136b6:	331a      	adds	r3, #26
 80136b8:	21ff      	movs	r1, #255	; 0xff
 80136ba:	4618      	mov	r0, r3
 80136bc:	f7fd fbdd 	bl	8010e7a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 80136c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136c2:	331c      	adds	r3, #28
 80136c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80136c6:	4618      	mov	r0, r3
 80136c8:	f7fd fbf2 	bl	8010eb0 <st_dword>
		if (fmt == FS_FAT32) {
 80136cc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80136d0:	2b03      	cmp	r3, #3
 80136d2:	d131      	bne.n	8013738 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 80136d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136d6:	f103 0443 	add.w	r4, r3, #67	; 0x43
 80136da:	f7fb fcd1 	bl	800f080 <get_fattime>
 80136de:	4603      	mov	r3, r0
 80136e0:	4619      	mov	r1, r3
 80136e2:	4620      	mov	r0, r4
 80136e4:	f7fd fbe4 	bl	8010eb0 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 80136e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136ea:	3324      	adds	r3, #36	; 0x24
 80136ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80136ee:	4618      	mov	r0, r3
 80136f0:	f7fd fbde 	bl	8010eb0 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 80136f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136f6:	332c      	adds	r3, #44	; 0x2c
 80136f8:	2102      	movs	r1, #2
 80136fa:	4618      	mov	r0, r3
 80136fc:	f7fd fbd8 	bl	8010eb0 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8013700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013702:	3330      	adds	r3, #48	; 0x30
 8013704:	2101      	movs	r1, #1
 8013706:	4618      	mov	r0, r3
 8013708:	f7fd fbb7 	bl	8010e7a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 801370c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801370e:	3332      	adds	r3, #50	; 0x32
 8013710:	2106      	movs	r1, #6
 8013712:	4618      	mov	r0, r3
 8013714:	f7fd fbb1 	bl	8010e7a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8013718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801371a:	3340      	adds	r3, #64	; 0x40
 801371c:	2280      	movs	r2, #128	; 0x80
 801371e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8013720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013722:	3342      	adds	r3, #66	; 0x42
 8013724:	2229      	movs	r2, #41	; 0x29
 8013726:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8013728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801372a:	3347      	adds	r3, #71	; 0x47
 801372c:	2213      	movs	r2, #19
 801372e:	4970      	ldr	r1, [pc, #448]	; (80138f0 <f_mkfs+0x6ec>)
 8013730:	4618      	mov	r0, r3
 8013732:	f7fd fbe9 	bl	8010f08 <mem_cpy>
 8013736:	e020      	b.n	801377a <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8013738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801373a:	f103 0427 	add.w	r4, r3, #39	; 0x27
 801373e:	f7fb fc9f 	bl	800f080 <get_fattime>
 8013742:	4603      	mov	r3, r0
 8013744:	4619      	mov	r1, r3
 8013746:	4620      	mov	r0, r4
 8013748:	f7fd fbb2 	bl	8010eb0 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 801374c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801374e:	3316      	adds	r3, #22
 8013750:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013752:	b292      	uxth	r2, r2
 8013754:	4611      	mov	r1, r2
 8013756:	4618      	mov	r0, r3
 8013758:	f7fd fb8f 	bl	8010e7a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 801375c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801375e:	3324      	adds	r3, #36	; 0x24
 8013760:	2280      	movs	r2, #128	; 0x80
 8013762:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8013764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013766:	3326      	adds	r3, #38	; 0x26
 8013768:	2229      	movs	r2, #41	; 0x29
 801376a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 801376c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801376e:	332b      	adds	r3, #43	; 0x2b
 8013770:	2213      	movs	r2, #19
 8013772:	4960      	ldr	r1, [pc, #384]	; (80138f4 <f_mkfs+0x6f0>)
 8013774:	4618      	mov	r0, r3
 8013776:	f7fd fbc7 	bl	8010f08 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 801377a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801377c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013780:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013784:	4618      	mov	r0, r3
 8013786:	f7fd fb78 	bl	8010e7a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 801378a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801378e:	2301      	movs	r3, #1
 8013790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013792:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013794:	f7fd faf8 	bl	8010d88 <disk_write>
 8013798:	4603      	mov	r3, r0
 801379a:	2b00      	cmp	r3, #0
 801379c:	d001      	beq.n	80137a2 <f_mkfs+0x59e>
 801379e:	2301      	movs	r3, #1
 80137a0:	e156      	b.n	8013a50 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 80137a2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80137a6:	2b03      	cmp	r3, #3
 80137a8:	d140      	bne.n	801382c <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 80137aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ac:	1d9a      	adds	r2, r3, #6
 80137ae:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80137b2:	2301      	movs	r3, #1
 80137b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80137b6:	f7fd fae7 	bl	8010d88 <disk_write>
			mem_set(buf, 0, ss);
 80137ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80137bc:	461a      	mov	r2, r3
 80137be:	2100      	movs	r1, #0
 80137c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80137c2:	f7fd fbc2 	bl	8010f4a <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 80137c6:	494c      	ldr	r1, [pc, #304]	; (80138f8 <f_mkfs+0x6f4>)
 80137c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80137ca:	f7fd fb71 	bl	8010eb0 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 80137ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137d0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80137d4:	4949      	ldr	r1, [pc, #292]	; (80138fc <f_mkfs+0x6f8>)
 80137d6:	4618      	mov	r0, r3
 80137d8:	f7fd fb6a 	bl	8010eb0 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 80137dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137de:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80137e2:	6a3b      	ldr	r3, [r7, #32]
 80137e4:	3b01      	subs	r3, #1
 80137e6:	4619      	mov	r1, r3
 80137e8:	4610      	mov	r0, r2
 80137ea:	f7fd fb61 	bl	8010eb0 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 80137ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137f0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80137f4:	2102      	movs	r1, #2
 80137f6:	4618      	mov	r0, r3
 80137f8:	f7fd fb5a 	bl	8010eb0 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 80137fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013802:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013806:	4618      	mov	r0, r3
 8013808:	f7fd fb37 	bl	8010e7a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 801380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801380e:	1dda      	adds	r2, r3, #7
 8013810:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8013814:	2301      	movs	r3, #1
 8013816:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013818:	f7fd fab6 	bl	8010d88 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 801381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801381e:	1c5a      	adds	r2, r3, #1
 8013820:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8013824:	2301      	movs	r3, #1
 8013826:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013828:	f7fd faae 	bl	8010d88 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 801382c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801382e:	2100      	movs	r1, #0
 8013830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013832:	f7fd fb8a 	bl	8010f4a <mem_set>
		sect = b_fat;		/* FAT start sector */
 8013836:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013838:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 801383a:	2300      	movs	r3, #0
 801383c:	64bb      	str	r3, [r7, #72]	; 0x48
 801383e:	e04b      	b.n	80138d8 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8013840:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013844:	2b03      	cmp	r3, #3
 8013846:	d113      	bne.n	8013870 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8013848:	f06f 0107 	mvn.w	r1, #7
 801384c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801384e:	f7fd fb2f 	bl	8010eb0 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8013852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013854:	3304      	adds	r3, #4
 8013856:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801385a:	4618      	mov	r0, r3
 801385c:	f7fd fb28 	bl	8010eb0 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8013860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013862:	3308      	adds	r3, #8
 8013864:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8013868:	4618      	mov	r0, r3
 801386a:	f7fd fb21 	bl	8010eb0 <st_dword>
 801386e:	e00b      	b.n	8013888 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8013870:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013874:	2b01      	cmp	r3, #1
 8013876:	d101      	bne.n	801387c <f_mkfs+0x678>
 8013878:	4b21      	ldr	r3, [pc, #132]	; (8013900 <f_mkfs+0x6fc>)
 801387a:	e001      	b.n	8013880 <f_mkfs+0x67c>
 801387c:	f06f 0307 	mvn.w	r3, #7
 8013880:	4619      	mov	r1, r3
 8013882:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013884:	f7fd fb14 	bl	8010eb0 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8013888:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801388a:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 801388c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801388e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013890:	4293      	cmp	r3, r2
 8013892:	bf28      	it	cs
 8013894:	4613      	movcs	r3, r2
 8013896:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8013898:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801389c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801389e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80138a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80138a2:	f7fd fa71 	bl	8010d88 <disk_write>
 80138a6:	4603      	mov	r3, r0
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d001      	beq.n	80138b0 <f_mkfs+0x6ac>
 80138ac:	2301      	movs	r3, #1
 80138ae:	e0cf      	b.n	8013a50 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 80138b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80138b2:	461a      	mov	r2, r3
 80138b4:	2100      	movs	r1, #0
 80138b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80138b8:	f7fd fb47 	bl	8010f4a <mem_set>
				sect += n; nsect -= n;
 80138bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80138be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80138c0:	4413      	add	r3, r2
 80138c2:	667b      	str	r3, [r7, #100]	; 0x64
 80138c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80138c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80138c8:	1ad3      	subs	r3, r2, r3
 80138ca:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 80138cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d1dc      	bne.n	801388c <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80138d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80138d4:	3301      	adds	r3, #1
 80138d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80138d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80138da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138dc:	429a      	cmp	r2, r3
 80138de:	d3af      	bcc.n	8013840 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 80138e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80138e4:	2b03      	cmp	r3, #3
 80138e6:	d10d      	bne.n	8013904 <f_mkfs+0x700>
 80138e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138ea:	e00c      	b.n	8013906 <f_mkfs+0x702>
 80138ec:	0801785c 	.word	0x0801785c
 80138f0:	08017868 	.word	0x08017868
 80138f4:	0801787c 	.word	0x0801787c
 80138f8:	41615252 	.word	0x41615252
 80138fc:	61417272 	.word	0x61417272
 8013900:	00fffff8 	.word	0x00fffff8
 8013904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013906:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8013908:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801390a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801390c:	4293      	cmp	r3, r2
 801390e:	bf28      	it	cs
 8013910:	4613      	movcs	r3, r2
 8013912:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8013914:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8013918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801391a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801391c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801391e:	f7fd fa33 	bl	8010d88 <disk_write>
 8013922:	4603      	mov	r3, r0
 8013924:	2b00      	cmp	r3, #0
 8013926:	d001      	beq.n	801392c <f_mkfs+0x728>
 8013928:	2301      	movs	r3, #1
 801392a:	e091      	b.n	8013a50 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 801392c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801392e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013930:	4413      	add	r3, r2
 8013932:	667b      	str	r3, [r7, #100]	; 0x64
 8013934:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013936:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013938:	1ad3      	subs	r3, r2, r3
 801393a:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 801393c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801393e:	2b00      	cmp	r3, #0
 8013940:	d1e2      	bne.n	8013908 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8013942:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013946:	2b03      	cmp	r3, #3
 8013948:	d103      	bne.n	8013952 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 801394a:	230c      	movs	r3, #12
 801394c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8013950:	e010      	b.n	8013974 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8013952:	693b      	ldr	r3, [r7, #16]
 8013954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013958:	d303      	bcc.n	8013962 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 801395a:	2306      	movs	r3, #6
 801395c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8013960:	e008      	b.n	8013974 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8013962:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013966:	2b02      	cmp	r3, #2
 8013968:	d101      	bne.n	801396e <f_mkfs+0x76a>
 801396a:	2304      	movs	r3, #4
 801396c:	e000      	b.n	8013970 <f_mkfs+0x76c>
 801396e:	2301      	movs	r3, #1
 8013970:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8013974:	7afb      	ldrb	r3, [r7, #11]
 8013976:	f003 0308 	and.w	r3, r3, #8
 801397a:	2b00      	cmp	r3, #0
 801397c:	d15b      	bne.n	8013a36 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 801397e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013980:	461a      	mov	r2, r3
 8013982:	2100      	movs	r1, #0
 8013984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013986:	f7fd fae0 	bl	8010f4a <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 801398a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801398c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013990:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013994:	4618      	mov	r0, r3
 8013996:	f7fd fa70 	bl	8010e7a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 801399a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801399c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80139a0:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 80139a2:	69bb      	ldr	r3, [r7, #24]
 80139a4:	2200      	movs	r2, #0
 80139a6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 80139a8:	69bb      	ldr	r3, [r7, #24]
 80139aa:	3301      	adds	r3, #1
 80139ac:	2201      	movs	r2, #1
 80139ae:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 80139b0:	69bb      	ldr	r3, [r7, #24]
 80139b2:	3302      	adds	r3, #2
 80139b4:	2201      	movs	r2, #1
 80139b6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 80139b8:	69bb      	ldr	r3, [r7, #24]
 80139ba:	3303      	adds	r3, #3
 80139bc:	2200      	movs	r2, #0
 80139be:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 80139c0:	69bb      	ldr	r3, [r7, #24]
 80139c2:	3304      	adds	r3, #4
 80139c4:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80139c8:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 80139ca:	693a      	ldr	r2, [r7, #16]
 80139cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139ce:	441a      	add	r2, r3
 80139d0:	4b21      	ldr	r3, [pc, #132]	; (8013a58 <f_mkfs+0x854>)
 80139d2:	fba3 1302 	umull	r1, r3, r3, r2
 80139d6:	1ad2      	subs	r2, r2, r3
 80139d8:	0852      	lsrs	r2, r2, #1
 80139da:	4413      	add	r3, r2
 80139dc:	0b5b      	lsrs	r3, r3, #13
 80139de:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 80139e0:	69bb      	ldr	r3, [r7, #24]
 80139e2:	3305      	adds	r3, #5
 80139e4:	22fe      	movs	r2, #254	; 0xfe
 80139e6:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 80139e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80139ea:	089b      	lsrs	r3, r3, #2
 80139ec:	b2da      	uxtb	r2, r3
 80139ee:	69bb      	ldr	r3, [r7, #24]
 80139f0:	3306      	adds	r3, #6
 80139f2:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 80139f6:	b2d2      	uxtb	r2, r2
 80139f8:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 80139fa:	69bb      	ldr	r3, [r7, #24]
 80139fc:	3307      	adds	r3, #7
 80139fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013a00:	b2d2      	uxtb	r2, r2
 8013a02:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8013a04:	69bb      	ldr	r3, [r7, #24]
 8013a06:	3308      	adds	r3, #8
 8013a08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	f7fd fa50 	bl	8010eb0 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8013a10:	69bb      	ldr	r3, [r7, #24]
 8013a12:	330c      	adds	r3, #12
 8013a14:	693a      	ldr	r2, [r7, #16]
 8013a16:	4611      	mov	r1, r2
 8013a18:	4618      	mov	r0, r3
 8013a1a:	f7fd fa49 	bl	8010eb0 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8013a1e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8013a22:	2301      	movs	r3, #1
 8013a24:	2200      	movs	r2, #0
 8013a26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013a28:	f7fd f9ae 	bl	8010d88 <disk_write>
 8013a2c:	4603      	mov	r3, r0
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d001      	beq.n	8013a36 <f_mkfs+0x832>
 8013a32:	2301      	movs	r3, #1
 8013a34:	e00c      	b.n	8013a50 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8013a36:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013a3a:	2200      	movs	r2, #0
 8013a3c:	2100      	movs	r1, #0
 8013a3e:	4618      	mov	r0, r3
 8013a40:	f7fd f9c2 	bl	8010dc8 <disk_ioctl>
 8013a44:	4603      	mov	r3, r0
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d001      	beq.n	8013a4e <f_mkfs+0x84a>
 8013a4a:	2301      	movs	r3, #1
 8013a4c:	e000      	b.n	8013a50 <f_mkfs+0x84c>

	return FR_OK;
 8013a4e:	2300      	movs	r3, #0
}
 8013a50:	4618      	mov	r0, r3
 8013a52:	3774      	adds	r7, #116	; 0x74
 8013a54:	46bd      	mov	sp, r7
 8013a56:	bd90      	pop	{r4, r7, pc}
 8013a58:	0515565b 	.word	0x0515565b

08013a5c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013a5c:	b480      	push	{r7}
 8013a5e:	b087      	sub	sp, #28
 8013a60:	af00      	add	r7, sp, #0
 8013a62:	60f8      	str	r0, [r7, #12]
 8013a64:	60b9      	str	r1, [r7, #8]
 8013a66:	4613      	mov	r3, r2
 8013a68:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013a6a:	2301      	movs	r3, #1
 8013a6c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013a6e:	2300      	movs	r3, #0
 8013a70:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013a72:	4b1f      	ldr	r3, [pc, #124]	; (8013af0 <FATFS_LinkDriverEx+0x94>)
 8013a74:	7a5b      	ldrb	r3, [r3, #9]
 8013a76:	b2db      	uxtb	r3, r3
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d131      	bne.n	8013ae0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013a7c:	4b1c      	ldr	r3, [pc, #112]	; (8013af0 <FATFS_LinkDriverEx+0x94>)
 8013a7e:	7a5b      	ldrb	r3, [r3, #9]
 8013a80:	b2db      	uxtb	r3, r3
 8013a82:	461a      	mov	r2, r3
 8013a84:	4b1a      	ldr	r3, [pc, #104]	; (8013af0 <FATFS_LinkDriverEx+0x94>)
 8013a86:	2100      	movs	r1, #0
 8013a88:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013a8a:	4b19      	ldr	r3, [pc, #100]	; (8013af0 <FATFS_LinkDriverEx+0x94>)
 8013a8c:	7a5b      	ldrb	r3, [r3, #9]
 8013a8e:	b2db      	uxtb	r3, r3
 8013a90:	4a17      	ldr	r2, [pc, #92]	; (8013af0 <FATFS_LinkDriverEx+0x94>)
 8013a92:	009b      	lsls	r3, r3, #2
 8013a94:	4413      	add	r3, r2
 8013a96:	68fa      	ldr	r2, [r7, #12]
 8013a98:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013a9a:	4b15      	ldr	r3, [pc, #84]	; (8013af0 <FATFS_LinkDriverEx+0x94>)
 8013a9c:	7a5b      	ldrb	r3, [r3, #9]
 8013a9e:	b2db      	uxtb	r3, r3
 8013aa0:	461a      	mov	r2, r3
 8013aa2:	4b13      	ldr	r3, [pc, #76]	; (8013af0 <FATFS_LinkDriverEx+0x94>)
 8013aa4:	4413      	add	r3, r2
 8013aa6:	79fa      	ldrb	r2, [r7, #7]
 8013aa8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013aaa:	4b11      	ldr	r3, [pc, #68]	; (8013af0 <FATFS_LinkDriverEx+0x94>)
 8013aac:	7a5b      	ldrb	r3, [r3, #9]
 8013aae:	b2db      	uxtb	r3, r3
 8013ab0:	1c5a      	adds	r2, r3, #1
 8013ab2:	b2d1      	uxtb	r1, r2
 8013ab4:	4a0e      	ldr	r2, [pc, #56]	; (8013af0 <FATFS_LinkDriverEx+0x94>)
 8013ab6:	7251      	strb	r1, [r2, #9]
 8013ab8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013aba:	7dbb      	ldrb	r3, [r7, #22]
 8013abc:	3330      	adds	r3, #48	; 0x30
 8013abe:	b2da      	uxtb	r2, r3
 8013ac0:	68bb      	ldr	r3, [r7, #8]
 8013ac2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013ac4:	68bb      	ldr	r3, [r7, #8]
 8013ac6:	3301      	adds	r3, #1
 8013ac8:	223a      	movs	r2, #58	; 0x3a
 8013aca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013acc:	68bb      	ldr	r3, [r7, #8]
 8013ace:	3302      	adds	r3, #2
 8013ad0:	222f      	movs	r2, #47	; 0x2f
 8013ad2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013ad4:	68bb      	ldr	r3, [r7, #8]
 8013ad6:	3303      	adds	r3, #3
 8013ad8:	2200      	movs	r2, #0
 8013ada:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013adc:	2300      	movs	r3, #0
 8013ade:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	371c      	adds	r7, #28
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aec:	4770      	bx	lr
 8013aee:	bf00      	nop
 8013af0:	20001354 	.word	0x20001354

08013af4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b082      	sub	sp, #8
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]
 8013afc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013afe:	2200      	movs	r2, #0
 8013b00:	6839      	ldr	r1, [r7, #0]
 8013b02:	6878      	ldr	r0, [r7, #4]
 8013b04:	f7ff ffaa 	bl	8013a5c <FATFS_LinkDriverEx>
 8013b08:	4603      	mov	r3, r0
}
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	3708      	adds	r7, #8
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	bd80      	pop	{r7, pc}
	...

08013b14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013b14:	b580      	push	{r7, lr}
 8013b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8013b18:	2200      	movs	r2, #0
 8013b1a:	4912      	ldr	r1, [pc, #72]	; (8013b64 <MX_USB_DEVICE_Init+0x50>)
 8013b1c:	4812      	ldr	r0, [pc, #72]	; (8013b68 <MX_USB_DEVICE_Init+0x54>)
 8013b1e:	f7fb ff69 	bl	800f9f4 <USBD_Init>
 8013b22:	4603      	mov	r3, r0
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d001      	beq.n	8013b2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013b28:	f7ef fe8c 	bl	8003844 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8013b2c:	490f      	ldr	r1, [pc, #60]	; (8013b6c <MX_USB_DEVICE_Init+0x58>)
 8013b2e:	480e      	ldr	r0, [pc, #56]	; (8013b68 <MX_USB_DEVICE_Init+0x54>)
 8013b30:	f7fb ff90 	bl	800fa54 <USBD_RegisterClass>
 8013b34:	4603      	mov	r3, r0
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d001      	beq.n	8013b3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8013b3a:	f7ef fe83 	bl	8003844 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8013b3e:	490c      	ldr	r1, [pc, #48]	; (8013b70 <MX_USB_DEVICE_Init+0x5c>)
 8013b40:	4809      	ldr	r0, [pc, #36]	; (8013b68 <MX_USB_DEVICE_Init+0x54>)
 8013b42:	f7fb feb1 	bl	800f8a8 <USBD_CDC_RegisterInterface>
 8013b46:	4603      	mov	r3, r0
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d001      	beq.n	8013b50 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8013b4c:	f7ef fe7a 	bl	8003844 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8013b50:	4805      	ldr	r0, [pc, #20]	; (8013b68 <MX_USB_DEVICE_Init+0x54>)
 8013b52:	f7fb ffa6 	bl	800faa2 <USBD_Start>
 8013b56:	4603      	mov	r3, r0
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d001      	beq.n	8013b60 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8013b5c:	f7ef fe72 	bl	8003844 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013b60:	bf00      	nop
 8013b62:	bd80      	pop	{r7, pc}
 8013b64:	20000134 	.word	0x20000134
 8013b68:	20001360 	.word	0x20001360
 8013b6c:	2000001c 	.word	0x2000001c
 8013b70:	20000120 	.word	0x20000120

08013b74 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8013b74:	b580      	push	{r7, lr}
 8013b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8013b78:	2200      	movs	r2, #0
 8013b7a:	4905      	ldr	r1, [pc, #20]	; (8013b90 <CDC_Init_FS+0x1c>)
 8013b7c:	4805      	ldr	r0, [pc, #20]	; (8013b94 <CDC_Init_FS+0x20>)
 8013b7e:	f7fb fea8 	bl	800f8d2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8013b82:	4905      	ldr	r1, [pc, #20]	; (8013b98 <CDC_Init_FS+0x24>)
 8013b84:	4803      	ldr	r0, [pc, #12]	; (8013b94 <CDC_Init_FS+0x20>)
 8013b86:	f7fb fec2 	bl	800f90e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8013b8a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	bd80      	pop	{r7, pc}
 8013b90:	20001e30 	.word	0x20001e30
 8013b94:	20001360 	.word	0x20001360
 8013b98:	20001630 	.word	0x20001630

08013b9c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8013b9c:	b480      	push	{r7}
 8013b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013ba0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013baa:	4770      	bx	lr

08013bac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013bac:	b480      	push	{r7}
 8013bae:	b083      	sub	sp, #12
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	4603      	mov	r3, r0
 8013bb4:	6039      	str	r1, [r7, #0]
 8013bb6:	71fb      	strb	r3, [r7, #7]
 8013bb8:	4613      	mov	r3, r2
 8013bba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8013bbc:	79fb      	ldrb	r3, [r7, #7]
 8013bbe:	2b23      	cmp	r3, #35	; 0x23
 8013bc0:	d84a      	bhi.n	8013c58 <CDC_Control_FS+0xac>
 8013bc2:	a201      	add	r2, pc, #4	; (adr r2, 8013bc8 <CDC_Control_FS+0x1c>)
 8013bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bc8:	08013c59 	.word	0x08013c59
 8013bcc:	08013c59 	.word	0x08013c59
 8013bd0:	08013c59 	.word	0x08013c59
 8013bd4:	08013c59 	.word	0x08013c59
 8013bd8:	08013c59 	.word	0x08013c59
 8013bdc:	08013c59 	.word	0x08013c59
 8013be0:	08013c59 	.word	0x08013c59
 8013be4:	08013c59 	.word	0x08013c59
 8013be8:	08013c59 	.word	0x08013c59
 8013bec:	08013c59 	.word	0x08013c59
 8013bf0:	08013c59 	.word	0x08013c59
 8013bf4:	08013c59 	.word	0x08013c59
 8013bf8:	08013c59 	.word	0x08013c59
 8013bfc:	08013c59 	.word	0x08013c59
 8013c00:	08013c59 	.word	0x08013c59
 8013c04:	08013c59 	.word	0x08013c59
 8013c08:	08013c59 	.word	0x08013c59
 8013c0c:	08013c59 	.word	0x08013c59
 8013c10:	08013c59 	.word	0x08013c59
 8013c14:	08013c59 	.word	0x08013c59
 8013c18:	08013c59 	.word	0x08013c59
 8013c1c:	08013c59 	.word	0x08013c59
 8013c20:	08013c59 	.word	0x08013c59
 8013c24:	08013c59 	.word	0x08013c59
 8013c28:	08013c59 	.word	0x08013c59
 8013c2c:	08013c59 	.word	0x08013c59
 8013c30:	08013c59 	.word	0x08013c59
 8013c34:	08013c59 	.word	0x08013c59
 8013c38:	08013c59 	.word	0x08013c59
 8013c3c:	08013c59 	.word	0x08013c59
 8013c40:	08013c59 	.word	0x08013c59
 8013c44:	08013c59 	.word	0x08013c59
 8013c48:	08013c59 	.word	0x08013c59
 8013c4c:	08013c59 	.word	0x08013c59
 8013c50:	08013c59 	.word	0x08013c59
 8013c54:	08013c59 	.word	0x08013c59
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8013c58:	bf00      	nop
  }

  return (USBD_OK);
 8013c5a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	370c      	adds	r7, #12
 8013c60:	46bd      	mov	sp, r7
 8013c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c66:	4770      	bx	lr

08013c68 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b082      	sub	sp, #8
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	6078      	str	r0, [r7, #4]
 8013c70:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8013c72:	6879      	ldr	r1, [r7, #4]
 8013c74:	4805      	ldr	r0, [pc, #20]	; (8013c8c <CDC_Receive_FS+0x24>)
 8013c76:	f7fb fe4a 	bl	800f90e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8013c7a:	4804      	ldr	r0, [pc, #16]	; (8013c8c <CDC_Receive_FS+0x24>)
 8013c7c:	f7fb fe90 	bl	800f9a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8013c80:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013c82:	4618      	mov	r0, r3
 8013c84:	3708      	adds	r7, #8
 8013c86:	46bd      	mov	sp, r7
 8013c88:	bd80      	pop	{r7, pc}
 8013c8a:	bf00      	nop
 8013c8c:	20001360 	.word	0x20001360

08013c90 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8013c90:	b580      	push	{r7, lr}
 8013c92:	b084      	sub	sp, #16
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	6078      	str	r0, [r7, #4]
 8013c98:	460b      	mov	r3, r1
 8013c9a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8013c9c:	2300      	movs	r3, #0
 8013c9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8013ca0:	4b0d      	ldr	r3, [pc, #52]	; (8013cd8 <CDC_Transmit_FS+0x48>)
 8013ca2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013ca6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8013ca8:	68bb      	ldr	r3, [r7, #8]
 8013caa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d001      	beq.n	8013cb6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8013cb2:	2301      	movs	r3, #1
 8013cb4:	e00b      	b.n	8013cce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8013cb6:	887b      	ldrh	r3, [r7, #2]
 8013cb8:	461a      	mov	r2, r3
 8013cba:	6879      	ldr	r1, [r7, #4]
 8013cbc:	4806      	ldr	r0, [pc, #24]	; (8013cd8 <CDC_Transmit_FS+0x48>)
 8013cbe:	f7fb fe08 	bl	800f8d2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8013cc2:	4805      	ldr	r0, [pc, #20]	; (8013cd8 <CDC_Transmit_FS+0x48>)
 8013cc4:	f7fb fe3c 	bl	800f940 <USBD_CDC_TransmitPacket>
 8013cc8:	4603      	mov	r3, r0
 8013cca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8013ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8013cce:	4618      	mov	r0, r3
 8013cd0:	3710      	adds	r7, #16
 8013cd2:	46bd      	mov	sp, r7
 8013cd4:	bd80      	pop	{r7, pc}
 8013cd6:	bf00      	nop
 8013cd8:	20001360 	.word	0x20001360

08013cdc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8013cdc:	b480      	push	{r7}
 8013cde:	b087      	sub	sp, #28
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	60f8      	str	r0, [r7, #12]
 8013ce4:	60b9      	str	r1, [r7, #8]
 8013ce6:	4613      	mov	r3, r2
 8013ce8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8013cea:	2300      	movs	r3, #0
 8013cec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8013cee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	371c      	adds	r7, #28
 8013cf6:	46bd      	mov	sp, r7
 8013cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cfc:	4770      	bx	lr
	...

08013d00 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013d00:	b480      	push	{r7}
 8013d02:	b083      	sub	sp, #12
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	4603      	mov	r3, r0
 8013d08:	6039      	str	r1, [r7, #0]
 8013d0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8013d0c:	683b      	ldr	r3, [r7, #0]
 8013d0e:	2212      	movs	r2, #18
 8013d10:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8013d12:	4b03      	ldr	r3, [pc, #12]	; (8013d20 <USBD_FS_DeviceDescriptor+0x20>)
}
 8013d14:	4618      	mov	r0, r3
 8013d16:	370c      	adds	r7, #12
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d1e:	4770      	bx	lr
 8013d20:	20000150 	.word	0x20000150

08013d24 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013d24:	b480      	push	{r7}
 8013d26:	b083      	sub	sp, #12
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	6039      	str	r1, [r7, #0]
 8013d2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8013d30:	683b      	ldr	r3, [r7, #0]
 8013d32:	2204      	movs	r2, #4
 8013d34:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8013d36:	4b03      	ldr	r3, [pc, #12]	; (8013d44 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8013d38:	4618      	mov	r0, r3
 8013d3a:	370c      	adds	r7, #12
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d42:	4770      	bx	lr
 8013d44:	20000164 	.word	0x20000164

08013d48 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	b082      	sub	sp, #8
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	4603      	mov	r3, r0
 8013d50:	6039      	str	r1, [r7, #0]
 8013d52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013d54:	79fb      	ldrb	r3, [r7, #7]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d105      	bne.n	8013d66 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013d5a:	683a      	ldr	r2, [r7, #0]
 8013d5c:	4907      	ldr	r1, [pc, #28]	; (8013d7c <USBD_FS_ProductStrDescriptor+0x34>)
 8013d5e:	4808      	ldr	r0, [pc, #32]	; (8013d80 <USBD_FS_ProductStrDescriptor+0x38>)
 8013d60:	f7fc fed1 	bl	8010b06 <USBD_GetString>
 8013d64:	e004      	b.n	8013d70 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013d66:	683a      	ldr	r2, [r7, #0]
 8013d68:	4904      	ldr	r1, [pc, #16]	; (8013d7c <USBD_FS_ProductStrDescriptor+0x34>)
 8013d6a:	4805      	ldr	r0, [pc, #20]	; (8013d80 <USBD_FS_ProductStrDescriptor+0x38>)
 8013d6c:	f7fc fecb 	bl	8010b06 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013d70:	4b02      	ldr	r3, [pc, #8]	; (8013d7c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8013d72:	4618      	mov	r0, r3
 8013d74:	3708      	adds	r7, #8
 8013d76:	46bd      	mov	sp, r7
 8013d78:	bd80      	pop	{r7, pc}
 8013d7a:	bf00      	nop
 8013d7c:	20002630 	.word	0x20002630
 8013d80:	08017890 	.word	0x08017890

08013d84 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013d84:	b580      	push	{r7, lr}
 8013d86:	b082      	sub	sp, #8
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	4603      	mov	r3, r0
 8013d8c:	6039      	str	r1, [r7, #0]
 8013d8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013d90:	683a      	ldr	r2, [r7, #0]
 8013d92:	4904      	ldr	r1, [pc, #16]	; (8013da4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8013d94:	4804      	ldr	r0, [pc, #16]	; (8013da8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8013d96:	f7fc feb6 	bl	8010b06 <USBD_GetString>
  return USBD_StrDesc;
 8013d9a:	4b02      	ldr	r3, [pc, #8]	; (8013da4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	3708      	adds	r7, #8
 8013da0:	46bd      	mov	sp, r7
 8013da2:	bd80      	pop	{r7, pc}
 8013da4:	20002630 	.word	0x20002630
 8013da8:	080178a8 	.word	0x080178a8

08013dac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b082      	sub	sp, #8
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	4603      	mov	r3, r0
 8013db4:	6039      	str	r1, [r7, #0]
 8013db6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013db8:	683b      	ldr	r3, [r7, #0]
 8013dba:	221a      	movs	r2, #26
 8013dbc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8013dbe:	f000 f843 	bl	8013e48 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8013dc2:	4b02      	ldr	r3, [pc, #8]	; (8013dcc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	3708      	adds	r7, #8
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	bd80      	pop	{r7, pc}
 8013dcc:	20000168 	.word	0x20000168

08013dd0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b082      	sub	sp, #8
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	4603      	mov	r3, r0
 8013dd8:	6039      	str	r1, [r7, #0]
 8013dda:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013ddc:	79fb      	ldrb	r3, [r7, #7]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d105      	bne.n	8013dee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013de2:	683a      	ldr	r2, [r7, #0]
 8013de4:	4907      	ldr	r1, [pc, #28]	; (8013e04 <USBD_FS_ConfigStrDescriptor+0x34>)
 8013de6:	4808      	ldr	r0, [pc, #32]	; (8013e08 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013de8:	f7fc fe8d 	bl	8010b06 <USBD_GetString>
 8013dec:	e004      	b.n	8013df8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013dee:	683a      	ldr	r2, [r7, #0]
 8013df0:	4904      	ldr	r1, [pc, #16]	; (8013e04 <USBD_FS_ConfigStrDescriptor+0x34>)
 8013df2:	4805      	ldr	r0, [pc, #20]	; (8013e08 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013df4:	f7fc fe87 	bl	8010b06 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013df8:	4b02      	ldr	r3, [pc, #8]	; (8013e04 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	3708      	adds	r7, #8
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	bd80      	pop	{r7, pc}
 8013e02:	bf00      	nop
 8013e04:	20002630 	.word	0x20002630
 8013e08:	080178bc 	.word	0x080178bc

08013e0c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013e0c:	b580      	push	{r7, lr}
 8013e0e:	b082      	sub	sp, #8
 8013e10:	af00      	add	r7, sp, #0
 8013e12:	4603      	mov	r3, r0
 8013e14:	6039      	str	r1, [r7, #0]
 8013e16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013e18:	79fb      	ldrb	r3, [r7, #7]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d105      	bne.n	8013e2a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013e1e:	683a      	ldr	r2, [r7, #0]
 8013e20:	4907      	ldr	r1, [pc, #28]	; (8013e40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013e22:	4808      	ldr	r0, [pc, #32]	; (8013e44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013e24:	f7fc fe6f 	bl	8010b06 <USBD_GetString>
 8013e28:	e004      	b.n	8013e34 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013e2a:	683a      	ldr	r2, [r7, #0]
 8013e2c:	4904      	ldr	r1, [pc, #16]	; (8013e40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013e2e:	4805      	ldr	r0, [pc, #20]	; (8013e44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013e30:	f7fc fe69 	bl	8010b06 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013e34:	4b02      	ldr	r3, [pc, #8]	; (8013e40 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8013e36:	4618      	mov	r0, r3
 8013e38:	3708      	adds	r7, #8
 8013e3a:	46bd      	mov	sp, r7
 8013e3c:	bd80      	pop	{r7, pc}
 8013e3e:	bf00      	nop
 8013e40:	20002630 	.word	0x20002630
 8013e44:	080178c8 	.word	0x080178c8

08013e48 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8013e48:	b580      	push	{r7, lr}
 8013e4a:	b084      	sub	sp, #16
 8013e4c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8013e4e:	4b0f      	ldr	r3, [pc, #60]	; (8013e8c <Get_SerialNum+0x44>)
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013e54:	4b0e      	ldr	r3, [pc, #56]	; (8013e90 <Get_SerialNum+0x48>)
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8013e5a:	4b0e      	ldr	r3, [pc, #56]	; (8013e94 <Get_SerialNum+0x4c>)
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013e60:	68fa      	ldr	r2, [r7, #12]
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	4413      	add	r3, r2
 8013e66:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d009      	beq.n	8013e82 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8013e6e:	2208      	movs	r2, #8
 8013e70:	4909      	ldr	r1, [pc, #36]	; (8013e98 <Get_SerialNum+0x50>)
 8013e72:	68f8      	ldr	r0, [r7, #12]
 8013e74:	f000 f814 	bl	8013ea0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013e78:	2204      	movs	r2, #4
 8013e7a:	4908      	ldr	r1, [pc, #32]	; (8013e9c <Get_SerialNum+0x54>)
 8013e7c:	68b8      	ldr	r0, [r7, #8]
 8013e7e:	f000 f80f 	bl	8013ea0 <IntToUnicode>
  }
}
 8013e82:	bf00      	nop
 8013e84:	3710      	adds	r7, #16
 8013e86:	46bd      	mov	sp, r7
 8013e88:	bd80      	pop	{r7, pc}
 8013e8a:	bf00      	nop
 8013e8c:	1fff7590 	.word	0x1fff7590
 8013e90:	1fff7594 	.word	0x1fff7594
 8013e94:	1fff7598 	.word	0x1fff7598
 8013e98:	2000016a 	.word	0x2000016a
 8013e9c:	2000017a 	.word	0x2000017a

08013ea0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013ea0:	b480      	push	{r7}
 8013ea2:	b087      	sub	sp, #28
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	60f8      	str	r0, [r7, #12]
 8013ea8:	60b9      	str	r1, [r7, #8]
 8013eaa:	4613      	mov	r3, r2
 8013eac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8013eae:	2300      	movs	r3, #0
 8013eb0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8013eb2:	2300      	movs	r3, #0
 8013eb4:	75fb      	strb	r3, [r7, #23]
 8013eb6:	e027      	b.n	8013f08 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	0f1b      	lsrs	r3, r3, #28
 8013ebc:	2b09      	cmp	r3, #9
 8013ebe:	d80b      	bhi.n	8013ed8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	0f1b      	lsrs	r3, r3, #28
 8013ec4:	b2da      	uxtb	r2, r3
 8013ec6:	7dfb      	ldrb	r3, [r7, #23]
 8013ec8:	005b      	lsls	r3, r3, #1
 8013eca:	4619      	mov	r1, r3
 8013ecc:	68bb      	ldr	r3, [r7, #8]
 8013ece:	440b      	add	r3, r1
 8013ed0:	3230      	adds	r2, #48	; 0x30
 8013ed2:	b2d2      	uxtb	r2, r2
 8013ed4:	701a      	strb	r2, [r3, #0]
 8013ed6:	e00a      	b.n	8013eee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	0f1b      	lsrs	r3, r3, #28
 8013edc:	b2da      	uxtb	r2, r3
 8013ede:	7dfb      	ldrb	r3, [r7, #23]
 8013ee0:	005b      	lsls	r3, r3, #1
 8013ee2:	4619      	mov	r1, r3
 8013ee4:	68bb      	ldr	r3, [r7, #8]
 8013ee6:	440b      	add	r3, r1
 8013ee8:	3237      	adds	r2, #55	; 0x37
 8013eea:	b2d2      	uxtb	r2, r2
 8013eec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	011b      	lsls	r3, r3, #4
 8013ef2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013ef4:	7dfb      	ldrb	r3, [r7, #23]
 8013ef6:	005b      	lsls	r3, r3, #1
 8013ef8:	3301      	adds	r3, #1
 8013efa:	68ba      	ldr	r2, [r7, #8]
 8013efc:	4413      	add	r3, r2
 8013efe:	2200      	movs	r2, #0
 8013f00:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8013f02:	7dfb      	ldrb	r3, [r7, #23]
 8013f04:	3301      	adds	r3, #1
 8013f06:	75fb      	strb	r3, [r7, #23]
 8013f08:	7dfa      	ldrb	r2, [r7, #23]
 8013f0a:	79fb      	ldrb	r3, [r7, #7]
 8013f0c:	429a      	cmp	r2, r3
 8013f0e:	d3d3      	bcc.n	8013eb8 <IntToUnicode+0x18>
  }
}
 8013f10:	bf00      	nop
 8013f12:	bf00      	nop
 8013f14:	371c      	adds	r7, #28
 8013f16:	46bd      	mov	sp, r7
 8013f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f1c:	4770      	bx	lr
	...

08013f20 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8013f20:	b580      	push	{r7, lr}
 8013f22:	b0b0      	sub	sp, #192	; 0xc0
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013f28:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013f2c:	2200      	movs	r2, #0
 8013f2e:	601a      	str	r2, [r3, #0]
 8013f30:	605a      	str	r2, [r3, #4]
 8013f32:	609a      	str	r2, [r3, #8]
 8013f34:	60da      	str	r2, [r3, #12]
 8013f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8013f38:	f107 0318 	add.w	r3, r7, #24
 8013f3c:	2294      	movs	r2, #148	; 0x94
 8013f3e:	2100      	movs	r1, #0
 8013f40:	4618      	mov	r0, r3
 8013f42:	f000 fc0b 	bl	801475c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013f4e:	d163      	bne.n	8014018 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8013f50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013f54:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8013f56:	2300      	movs	r3, #0
 8013f58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8013f5c:	f107 0318 	add.w	r3, r7, #24
 8013f60:	4618      	mov	r0, r3
 8013f62:	f7f3 fc29 	bl	80077b8 <HAL_RCCEx_PeriphCLKConfig>
 8013f66:	4603      	mov	r3, r0
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d001      	beq.n	8013f70 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8013f6c:	f7ef fc6a 	bl	8003844 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013f70:	4b2b      	ldr	r3, [pc, #172]	; (8014020 <HAL_PCD_MspInit+0x100>)
 8013f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f74:	4a2a      	ldr	r2, [pc, #168]	; (8014020 <HAL_PCD_MspInit+0x100>)
 8013f76:	f043 0301 	orr.w	r3, r3, #1
 8013f7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013f7c:	4b28      	ldr	r3, [pc, #160]	; (8014020 <HAL_PCD_MspInit+0x100>)
 8013f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f80:	f003 0301 	and.w	r3, r3, #1
 8013f84:	617b      	str	r3, [r7, #20]
 8013f86:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8013f88:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8013f8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013f90:	2302      	movs	r3, #2
 8013f92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013f96:	2300      	movs	r3, #0
 8013f98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013f9c:	2303      	movs	r3, #3
 8013f9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8013fa2:	230a      	movs	r3, #10
 8013fa4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013fa8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013fac:	4619      	mov	r1, r3
 8013fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8013fb2:	f7f0 f9f1 	bl	8004398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8013fb6:	4b1a      	ldr	r3, [pc, #104]	; (8014020 <HAL_PCD_MspInit+0x100>)
 8013fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013fba:	4a19      	ldr	r2, [pc, #100]	; (8014020 <HAL_PCD_MspInit+0x100>)
 8013fbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013fc2:	4b17      	ldr	r3, [pc, #92]	; (8014020 <HAL_PCD_MspInit+0x100>)
 8013fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013fc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013fca:	613b      	str	r3, [r7, #16]
 8013fcc:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8013fce:	4b14      	ldr	r3, [pc, #80]	; (8014020 <HAL_PCD_MspInit+0x100>)
 8013fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d114      	bne.n	8014004 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013fda:	4b11      	ldr	r3, [pc, #68]	; (8014020 <HAL_PCD_MspInit+0x100>)
 8013fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013fde:	4a10      	ldr	r2, [pc, #64]	; (8014020 <HAL_PCD_MspInit+0x100>)
 8013fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013fe4:	6593      	str	r3, [r2, #88]	; 0x58
 8013fe6:	4b0e      	ldr	r3, [pc, #56]	; (8014020 <HAL_PCD_MspInit+0x100>)
 8013fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013fee:	60fb      	str	r3, [r7, #12]
 8013ff0:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8013ff2:	f7f2 fccd 	bl	8006990 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8013ff6:	4b0a      	ldr	r3, [pc, #40]	; (8014020 <HAL_PCD_MspInit+0x100>)
 8013ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013ffa:	4a09      	ldr	r2, [pc, #36]	; (8014020 <HAL_PCD_MspInit+0x100>)
 8013ffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014000:	6593      	str	r3, [r2, #88]	; 0x58
 8014002:	e001      	b.n	8014008 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8014004:	f7f2 fcc4 	bl	8006990 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8014008:	2200      	movs	r2, #0
 801400a:	2100      	movs	r1, #0
 801400c:	2043      	movs	r0, #67	; 0x43
 801400e:	f7f0 f8d2 	bl	80041b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8014012:	2043      	movs	r0, #67	; 0x43
 8014014:	f7f0 f8eb 	bl	80041ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014018:	bf00      	nop
 801401a:	37c0      	adds	r7, #192	; 0xc0
 801401c:	46bd      	mov	sp, r7
 801401e:	bd80      	pop	{r7, pc}
 8014020:	40021000 	.word	0x40021000

08014024 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014024:	b580      	push	{r7, lr}
 8014026:	b082      	sub	sp, #8
 8014028:	af00      	add	r7, sp, #0
 801402a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8014038:	4619      	mov	r1, r3
 801403a:	4610      	mov	r0, r2
 801403c:	f7fb fd7c 	bl	800fb38 <USBD_LL_SetupStage>
}
 8014040:	bf00      	nop
 8014042:	3708      	adds	r7, #8
 8014044:	46bd      	mov	sp, r7
 8014046:	bd80      	pop	{r7, pc}

08014048 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014048:	b580      	push	{r7, lr}
 801404a:	b082      	sub	sp, #8
 801404c:	af00      	add	r7, sp, #0
 801404e:	6078      	str	r0, [r7, #4]
 8014050:	460b      	mov	r3, r1
 8014052:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801405a:	78fa      	ldrb	r2, [r7, #3]
 801405c:	6879      	ldr	r1, [r7, #4]
 801405e:	4613      	mov	r3, r2
 8014060:	00db      	lsls	r3, r3, #3
 8014062:	4413      	add	r3, r2
 8014064:	009b      	lsls	r3, r3, #2
 8014066:	440b      	add	r3, r1
 8014068:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801406c:	681a      	ldr	r2, [r3, #0]
 801406e:	78fb      	ldrb	r3, [r7, #3]
 8014070:	4619      	mov	r1, r3
 8014072:	f7fb fdb6 	bl	800fbe2 <USBD_LL_DataOutStage>
}
 8014076:	bf00      	nop
 8014078:	3708      	adds	r7, #8
 801407a:	46bd      	mov	sp, r7
 801407c:	bd80      	pop	{r7, pc}

0801407e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801407e:	b580      	push	{r7, lr}
 8014080:	b082      	sub	sp, #8
 8014082:	af00      	add	r7, sp, #0
 8014084:	6078      	str	r0, [r7, #4]
 8014086:	460b      	mov	r3, r1
 8014088:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8014090:	78fa      	ldrb	r2, [r7, #3]
 8014092:	6879      	ldr	r1, [r7, #4]
 8014094:	4613      	mov	r3, r2
 8014096:	00db      	lsls	r3, r3, #3
 8014098:	4413      	add	r3, r2
 801409a:	009b      	lsls	r3, r3, #2
 801409c:	440b      	add	r3, r1
 801409e:	334c      	adds	r3, #76	; 0x4c
 80140a0:	681a      	ldr	r2, [r3, #0]
 80140a2:	78fb      	ldrb	r3, [r7, #3]
 80140a4:	4619      	mov	r1, r3
 80140a6:	f7fb fdff 	bl	800fca8 <USBD_LL_DataInStage>
}
 80140aa:	bf00      	nop
 80140ac:	3708      	adds	r7, #8
 80140ae:	46bd      	mov	sp, r7
 80140b0:	bd80      	pop	{r7, pc}

080140b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80140b2:	b580      	push	{r7, lr}
 80140b4:	b082      	sub	sp, #8
 80140b6:	af00      	add	r7, sp, #0
 80140b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80140c0:	4618      	mov	r0, r3
 80140c2:	f7fb ff13 	bl	800feec <USBD_LL_SOF>
}
 80140c6:	bf00      	nop
 80140c8:	3708      	adds	r7, #8
 80140ca:	46bd      	mov	sp, r7
 80140cc:	bd80      	pop	{r7, pc}

080140ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80140ce:	b580      	push	{r7, lr}
 80140d0:	b084      	sub	sp, #16
 80140d2:	af00      	add	r7, sp, #0
 80140d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80140d6:	2301      	movs	r3, #1
 80140d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	68db      	ldr	r3, [r3, #12]
 80140de:	2b02      	cmp	r3, #2
 80140e0:	d001      	beq.n	80140e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80140e2:	f7ef fbaf 	bl	8003844 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80140ec:	7bfa      	ldrb	r2, [r7, #15]
 80140ee:	4611      	mov	r1, r2
 80140f0:	4618      	mov	r0, r3
 80140f2:	f7fb febd 	bl	800fe70 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80140fc:	4618      	mov	r0, r3
 80140fe:	f7fb fe69 	bl	800fdd4 <USBD_LL_Reset>
}
 8014102:	bf00      	nop
 8014104:	3710      	adds	r7, #16
 8014106:	46bd      	mov	sp, r7
 8014108:	bd80      	pop	{r7, pc}
	...

0801410c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801410c:	b580      	push	{r7, lr}
 801410e:	b082      	sub	sp, #8
 8014110:	af00      	add	r7, sp, #0
 8014112:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	687a      	ldr	r2, [r7, #4]
 8014120:	6812      	ldr	r2, [r2, #0]
 8014122:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014126:	f043 0301 	orr.w	r3, r3, #1
 801412a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014132:	4618      	mov	r0, r3
 8014134:	f7fb feac 	bl	800fe90 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	6a1b      	ldr	r3, [r3, #32]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d005      	beq.n	801414c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014140:	4b04      	ldr	r3, [pc, #16]	; (8014154 <HAL_PCD_SuspendCallback+0x48>)
 8014142:	691b      	ldr	r3, [r3, #16]
 8014144:	4a03      	ldr	r2, [pc, #12]	; (8014154 <HAL_PCD_SuspendCallback+0x48>)
 8014146:	f043 0306 	orr.w	r3, r3, #6
 801414a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801414c:	bf00      	nop
 801414e:	3708      	adds	r7, #8
 8014150:	46bd      	mov	sp, r7
 8014152:	bd80      	pop	{r7, pc}
 8014154:	e000ed00 	.word	0xe000ed00

08014158 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014158:	b580      	push	{r7, lr}
 801415a:	b082      	sub	sp, #8
 801415c:	af00      	add	r7, sp, #0
 801415e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	687a      	ldr	r2, [r7, #4]
 801416c:	6812      	ldr	r2, [r2, #0]
 801416e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014172:	f023 0301 	bic.w	r3, r3, #1
 8014176:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	6a1b      	ldr	r3, [r3, #32]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d007      	beq.n	8014190 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014180:	4b08      	ldr	r3, [pc, #32]	; (80141a4 <HAL_PCD_ResumeCallback+0x4c>)
 8014182:	691b      	ldr	r3, [r3, #16]
 8014184:	4a07      	ldr	r2, [pc, #28]	; (80141a4 <HAL_PCD_ResumeCallback+0x4c>)
 8014186:	f023 0306 	bic.w	r3, r3, #6
 801418a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801418c:	f000 faa6 	bl	80146dc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014196:	4618      	mov	r0, r3
 8014198:	f7fb fe90 	bl	800febc <USBD_LL_Resume>
}
 801419c:	bf00      	nop
 801419e:	3708      	adds	r7, #8
 80141a0:	46bd      	mov	sp, r7
 80141a2:	bd80      	pop	{r7, pc}
 80141a4:	e000ed00 	.word	0xe000ed00

080141a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80141a8:	b580      	push	{r7, lr}
 80141aa:	b082      	sub	sp, #8
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	6078      	str	r0, [r7, #4]
 80141b0:	460b      	mov	r3, r1
 80141b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80141ba:	78fa      	ldrb	r2, [r7, #3]
 80141bc:	4611      	mov	r1, r2
 80141be:	4618      	mov	r0, r3
 80141c0:	f7fb fedc 	bl	800ff7c <USBD_LL_IsoOUTIncomplete>
}
 80141c4:	bf00      	nop
 80141c6:	3708      	adds	r7, #8
 80141c8:	46bd      	mov	sp, r7
 80141ca:	bd80      	pop	{r7, pc}

080141cc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80141cc:	b580      	push	{r7, lr}
 80141ce:	b082      	sub	sp, #8
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	6078      	str	r0, [r7, #4]
 80141d4:	460b      	mov	r3, r1
 80141d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80141de:	78fa      	ldrb	r2, [r7, #3]
 80141e0:	4611      	mov	r1, r2
 80141e2:	4618      	mov	r0, r3
 80141e4:	f7fb fea4 	bl	800ff30 <USBD_LL_IsoINIncomplete>
}
 80141e8:	bf00      	nop
 80141ea:	3708      	adds	r7, #8
 80141ec:	46bd      	mov	sp, r7
 80141ee:	bd80      	pop	{r7, pc}

080141f0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b082      	sub	sp, #8
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80141fe:	4618      	mov	r0, r3
 8014200:	f7fb fee2 	bl	800ffc8 <USBD_LL_DevConnected>
}
 8014204:	bf00      	nop
 8014206:	3708      	adds	r7, #8
 8014208:	46bd      	mov	sp, r7
 801420a:	bd80      	pop	{r7, pc}

0801420c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801420c:	b580      	push	{r7, lr}
 801420e:	b082      	sub	sp, #8
 8014210:	af00      	add	r7, sp, #0
 8014212:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801421a:	4618      	mov	r0, r3
 801421c:	f7fb fedf 	bl	800ffde <USBD_LL_DevDisconnected>
}
 8014220:	bf00      	nop
 8014222:	3708      	adds	r7, #8
 8014224:	46bd      	mov	sp, r7
 8014226:	bd80      	pop	{r7, pc}

08014228 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014228:	b580      	push	{r7, lr}
 801422a:	b082      	sub	sp, #8
 801422c:	af00      	add	r7, sp, #0
 801422e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	781b      	ldrb	r3, [r3, #0]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d139      	bne.n	80142ac <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8014238:	4a1f      	ldr	r2, [pc, #124]	; (80142b8 <USBD_LL_Init+0x90>)
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	4a1d      	ldr	r2, [pc, #116]	; (80142b8 <USBD_LL_Init+0x90>)
 8014244:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8014248:	4b1b      	ldr	r3, [pc, #108]	; (80142b8 <USBD_LL_Init+0x90>)
 801424a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801424e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8014250:	4b19      	ldr	r3, [pc, #100]	; (80142b8 <USBD_LL_Init+0x90>)
 8014252:	2206      	movs	r2, #6
 8014254:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014256:	4b18      	ldr	r3, [pc, #96]	; (80142b8 <USBD_LL_Init+0x90>)
 8014258:	2202      	movs	r2, #2
 801425a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801425c:	4b16      	ldr	r3, [pc, #88]	; (80142b8 <USBD_LL_Init+0x90>)
 801425e:	2200      	movs	r2, #0
 8014260:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8014262:	4b15      	ldr	r3, [pc, #84]	; (80142b8 <USBD_LL_Init+0x90>)
 8014264:	2200      	movs	r2, #0
 8014266:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8014268:	4b13      	ldr	r3, [pc, #76]	; (80142b8 <USBD_LL_Init+0x90>)
 801426a:	2200      	movs	r2, #0
 801426c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801426e:	4b12      	ldr	r3, [pc, #72]	; (80142b8 <USBD_LL_Init+0x90>)
 8014270:	2200      	movs	r2, #0
 8014272:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8014274:	4b10      	ldr	r3, [pc, #64]	; (80142b8 <USBD_LL_Init+0x90>)
 8014276:	2200      	movs	r2, #0
 8014278:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801427a:	4b0f      	ldr	r3, [pc, #60]	; (80142b8 <USBD_LL_Init+0x90>)
 801427c:	2200      	movs	r2, #0
 801427e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8014280:	480d      	ldr	r0, [pc, #52]	; (80142b8 <USBD_LL_Init+0x90>)
 8014282:	f7f1 f8f6 	bl	8005472 <HAL_PCD_Init>
 8014286:	4603      	mov	r3, r0
 8014288:	2b00      	cmp	r3, #0
 801428a:	d001      	beq.n	8014290 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 801428c:	f7ef fada 	bl	8003844 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8014290:	2180      	movs	r1, #128	; 0x80
 8014292:	4809      	ldr	r0, [pc, #36]	; (80142b8 <USBD_LL_Init+0x90>)
 8014294:	f7f2 fa77 	bl	8006786 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8014298:	2240      	movs	r2, #64	; 0x40
 801429a:	2100      	movs	r1, #0
 801429c:	4806      	ldr	r0, [pc, #24]	; (80142b8 <USBD_LL_Init+0x90>)
 801429e:	f7f2 fa2b 	bl	80066f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80142a2:	2280      	movs	r2, #128	; 0x80
 80142a4:	2101      	movs	r1, #1
 80142a6:	4804      	ldr	r0, [pc, #16]	; (80142b8 <USBD_LL_Init+0x90>)
 80142a8:	f7f2 fa26 	bl	80066f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80142ac:	2300      	movs	r3, #0
}
 80142ae:	4618      	mov	r0, r3
 80142b0:	3708      	adds	r7, #8
 80142b2:	46bd      	mov	sp, r7
 80142b4:	bd80      	pop	{r7, pc}
 80142b6:	bf00      	nop
 80142b8:	20002830 	.word	0x20002830

080142bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80142bc:	b580      	push	{r7, lr}
 80142be:	b084      	sub	sp, #16
 80142c0:	af00      	add	r7, sp, #0
 80142c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80142c4:	2300      	movs	r3, #0
 80142c6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80142c8:	2300      	movs	r3, #0
 80142ca:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80142d2:	4618      	mov	r0, r3
 80142d4:	f7f1 f9f1 	bl	80056ba <HAL_PCD_Start>
 80142d8:	4603      	mov	r3, r0
 80142da:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80142dc:	7bbb      	ldrb	r3, [r7, #14]
 80142de:	2b03      	cmp	r3, #3
 80142e0:	d816      	bhi.n	8014310 <USBD_LL_Start+0x54>
 80142e2:	a201      	add	r2, pc, #4	; (adr r2, 80142e8 <USBD_LL_Start+0x2c>)
 80142e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142e8:	080142f9 	.word	0x080142f9
 80142ec:	080142ff 	.word	0x080142ff
 80142f0:	08014305 	.word	0x08014305
 80142f4:	0801430b 	.word	0x0801430b
    case HAL_OK :
      usb_status = USBD_OK;
 80142f8:	2300      	movs	r3, #0
 80142fa:	73fb      	strb	r3, [r7, #15]
    break;
 80142fc:	e00b      	b.n	8014316 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80142fe:	2303      	movs	r3, #3
 8014300:	73fb      	strb	r3, [r7, #15]
    break;
 8014302:	e008      	b.n	8014316 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014304:	2301      	movs	r3, #1
 8014306:	73fb      	strb	r3, [r7, #15]
    break;
 8014308:	e005      	b.n	8014316 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801430a:	2303      	movs	r3, #3
 801430c:	73fb      	strb	r3, [r7, #15]
    break;
 801430e:	e002      	b.n	8014316 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8014310:	2303      	movs	r3, #3
 8014312:	73fb      	strb	r3, [r7, #15]
    break;
 8014314:	bf00      	nop
  }
  return usb_status;
 8014316:	7bfb      	ldrb	r3, [r7, #15]
}
 8014318:	4618      	mov	r0, r3
 801431a:	3710      	adds	r7, #16
 801431c:	46bd      	mov	sp, r7
 801431e:	bd80      	pop	{r7, pc}

08014320 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014320:	b580      	push	{r7, lr}
 8014322:	b084      	sub	sp, #16
 8014324:	af00      	add	r7, sp, #0
 8014326:	6078      	str	r0, [r7, #4]
 8014328:	4608      	mov	r0, r1
 801432a:	4611      	mov	r1, r2
 801432c:	461a      	mov	r2, r3
 801432e:	4603      	mov	r3, r0
 8014330:	70fb      	strb	r3, [r7, #3]
 8014332:	460b      	mov	r3, r1
 8014334:	70bb      	strb	r3, [r7, #2]
 8014336:	4613      	mov	r3, r2
 8014338:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801433a:	2300      	movs	r3, #0
 801433c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801433e:	2300      	movs	r3, #0
 8014340:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014348:	78bb      	ldrb	r3, [r7, #2]
 801434a:	883a      	ldrh	r2, [r7, #0]
 801434c:	78f9      	ldrb	r1, [r7, #3]
 801434e:	f7f1 fe9b 	bl	8006088 <HAL_PCD_EP_Open>
 8014352:	4603      	mov	r3, r0
 8014354:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014356:	7bbb      	ldrb	r3, [r7, #14]
 8014358:	2b03      	cmp	r3, #3
 801435a:	d817      	bhi.n	801438c <USBD_LL_OpenEP+0x6c>
 801435c:	a201      	add	r2, pc, #4	; (adr r2, 8014364 <USBD_LL_OpenEP+0x44>)
 801435e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014362:	bf00      	nop
 8014364:	08014375 	.word	0x08014375
 8014368:	0801437b 	.word	0x0801437b
 801436c:	08014381 	.word	0x08014381
 8014370:	08014387 	.word	0x08014387
    case HAL_OK :
      usb_status = USBD_OK;
 8014374:	2300      	movs	r3, #0
 8014376:	73fb      	strb	r3, [r7, #15]
    break;
 8014378:	e00b      	b.n	8014392 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801437a:	2303      	movs	r3, #3
 801437c:	73fb      	strb	r3, [r7, #15]
    break;
 801437e:	e008      	b.n	8014392 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014380:	2301      	movs	r3, #1
 8014382:	73fb      	strb	r3, [r7, #15]
    break;
 8014384:	e005      	b.n	8014392 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014386:	2303      	movs	r3, #3
 8014388:	73fb      	strb	r3, [r7, #15]
    break;
 801438a:	e002      	b.n	8014392 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 801438c:	2303      	movs	r3, #3
 801438e:	73fb      	strb	r3, [r7, #15]
    break;
 8014390:	bf00      	nop
  }
  return usb_status;
 8014392:	7bfb      	ldrb	r3, [r7, #15]
}
 8014394:	4618      	mov	r0, r3
 8014396:	3710      	adds	r7, #16
 8014398:	46bd      	mov	sp, r7
 801439a:	bd80      	pop	{r7, pc}

0801439c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801439c:	b580      	push	{r7, lr}
 801439e:	b084      	sub	sp, #16
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	6078      	str	r0, [r7, #4]
 80143a4:	460b      	mov	r3, r1
 80143a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80143a8:	2300      	movs	r3, #0
 80143aa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80143ac:	2300      	movs	r3, #0
 80143ae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80143b6:	78fa      	ldrb	r2, [r7, #3]
 80143b8:	4611      	mov	r1, r2
 80143ba:	4618      	mov	r0, r3
 80143bc:	f7f1 fecc 	bl	8006158 <HAL_PCD_EP_Close>
 80143c0:	4603      	mov	r3, r0
 80143c2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80143c4:	7bbb      	ldrb	r3, [r7, #14]
 80143c6:	2b03      	cmp	r3, #3
 80143c8:	d816      	bhi.n	80143f8 <USBD_LL_CloseEP+0x5c>
 80143ca:	a201      	add	r2, pc, #4	; (adr r2, 80143d0 <USBD_LL_CloseEP+0x34>)
 80143cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143d0:	080143e1 	.word	0x080143e1
 80143d4:	080143e7 	.word	0x080143e7
 80143d8:	080143ed 	.word	0x080143ed
 80143dc:	080143f3 	.word	0x080143f3
    case HAL_OK :
      usb_status = USBD_OK;
 80143e0:	2300      	movs	r3, #0
 80143e2:	73fb      	strb	r3, [r7, #15]
    break;
 80143e4:	e00b      	b.n	80143fe <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80143e6:	2303      	movs	r3, #3
 80143e8:	73fb      	strb	r3, [r7, #15]
    break;
 80143ea:	e008      	b.n	80143fe <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80143ec:	2301      	movs	r3, #1
 80143ee:	73fb      	strb	r3, [r7, #15]
    break;
 80143f0:	e005      	b.n	80143fe <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80143f2:	2303      	movs	r3, #3
 80143f4:	73fb      	strb	r3, [r7, #15]
    break;
 80143f6:	e002      	b.n	80143fe <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80143f8:	2303      	movs	r3, #3
 80143fa:	73fb      	strb	r3, [r7, #15]
    break;
 80143fc:	bf00      	nop
  }
  return usb_status;
 80143fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8014400:	4618      	mov	r0, r3
 8014402:	3710      	adds	r7, #16
 8014404:	46bd      	mov	sp, r7
 8014406:	bd80      	pop	{r7, pc}

08014408 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014408:	b580      	push	{r7, lr}
 801440a:	b084      	sub	sp, #16
 801440c:	af00      	add	r7, sp, #0
 801440e:	6078      	str	r0, [r7, #4]
 8014410:	460b      	mov	r3, r1
 8014412:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014414:	2300      	movs	r3, #0
 8014416:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014418:	2300      	movs	r3, #0
 801441a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014422:	78fa      	ldrb	r2, [r7, #3]
 8014424:	4611      	mov	r1, r2
 8014426:	4618      	mov	r0, r3
 8014428:	f7f1 ff73 	bl	8006312 <HAL_PCD_EP_SetStall>
 801442c:	4603      	mov	r3, r0
 801442e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014430:	7bbb      	ldrb	r3, [r7, #14]
 8014432:	2b03      	cmp	r3, #3
 8014434:	d816      	bhi.n	8014464 <USBD_LL_StallEP+0x5c>
 8014436:	a201      	add	r2, pc, #4	; (adr r2, 801443c <USBD_LL_StallEP+0x34>)
 8014438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801443c:	0801444d 	.word	0x0801444d
 8014440:	08014453 	.word	0x08014453
 8014444:	08014459 	.word	0x08014459
 8014448:	0801445f 	.word	0x0801445f
    case HAL_OK :
      usb_status = USBD_OK;
 801444c:	2300      	movs	r3, #0
 801444e:	73fb      	strb	r3, [r7, #15]
    break;
 8014450:	e00b      	b.n	801446a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014452:	2303      	movs	r3, #3
 8014454:	73fb      	strb	r3, [r7, #15]
    break;
 8014456:	e008      	b.n	801446a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014458:	2301      	movs	r3, #1
 801445a:	73fb      	strb	r3, [r7, #15]
    break;
 801445c:	e005      	b.n	801446a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801445e:	2303      	movs	r3, #3
 8014460:	73fb      	strb	r3, [r7, #15]
    break;
 8014462:	e002      	b.n	801446a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8014464:	2303      	movs	r3, #3
 8014466:	73fb      	strb	r3, [r7, #15]
    break;
 8014468:	bf00      	nop
  }
  return usb_status;
 801446a:	7bfb      	ldrb	r3, [r7, #15]
}
 801446c:	4618      	mov	r0, r3
 801446e:	3710      	adds	r7, #16
 8014470:	46bd      	mov	sp, r7
 8014472:	bd80      	pop	{r7, pc}

08014474 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014474:	b580      	push	{r7, lr}
 8014476:	b084      	sub	sp, #16
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]
 801447c:	460b      	mov	r3, r1
 801447e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014480:	2300      	movs	r3, #0
 8014482:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014484:	2300      	movs	r3, #0
 8014486:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801448e:	78fa      	ldrb	r2, [r7, #3]
 8014490:	4611      	mov	r1, r2
 8014492:	4618      	mov	r0, r3
 8014494:	f7f1 ff9f 	bl	80063d6 <HAL_PCD_EP_ClrStall>
 8014498:	4603      	mov	r3, r0
 801449a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801449c:	7bbb      	ldrb	r3, [r7, #14]
 801449e:	2b03      	cmp	r3, #3
 80144a0:	d816      	bhi.n	80144d0 <USBD_LL_ClearStallEP+0x5c>
 80144a2:	a201      	add	r2, pc, #4	; (adr r2, 80144a8 <USBD_LL_ClearStallEP+0x34>)
 80144a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144a8:	080144b9 	.word	0x080144b9
 80144ac:	080144bf 	.word	0x080144bf
 80144b0:	080144c5 	.word	0x080144c5
 80144b4:	080144cb 	.word	0x080144cb
    case HAL_OK :
      usb_status = USBD_OK;
 80144b8:	2300      	movs	r3, #0
 80144ba:	73fb      	strb	r3, [r7, #15]
    break;
 80144bc:	e00b      	b.n	80144d6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80144be:	2303      	movs	r3, #3
 80144c0:	73fb      	strb	r3, [r7, #15]
    break;
 80144c2:	e008      	b.n	80144d6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80144c4:	2301      	movs	r3, #1
 80144c6:	73fb      	strb	r3, [r7, #15]
    break;
 80144c8:	e005      	b.n	80144d6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80144ca:	2303      	movs	r3, #3
 80144cc:	73fb      	strb	r3, [r7, #15]
    break;
 80144ce:	e002      	b.n	80144d6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80144d0:	2303      	movs	r3, #3
 80144d2:	73fb      	strb	r3, [r7, #15]
    break;
 80144d4:	bf00      	nop
  }
  return usb_status;
 80144d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80144d8:	4618      	mov	r0, r3
 80144da:	3710      	adds	r7, #16
 80144dc:	46bd      	mov	sp, r7
 80144de:	bd80      	pop	{r7, pc}

080144e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80144e0:	b480      	push	{r7}
 80144e2:	b085      	sub	sp, #20
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	6078      	str	r0, [r7, #4]
 80144e8:	460b      	mov	r3, r1
 80144ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80144f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80144f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	da0b      	bge.n	8014514 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80144fc:	78fb      	ldrb	r3, [r7, #3]
 80144fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014502:	68f9      	ldr	r1, [r7, #12]
 8014504:	4613      	mov	r3, r2
 8014506:	00db      	lsls	r3, r3, #3
 8014508:	4413      	add	r3, r2
 801450a:	009b      	lsls	r3, r3, #2
 801450c:	440b      	add	r3, r1
 801450e:	333e      	adds	r3, #62	; 0x3e
 8014510:	781b      	ldrb	r3, [r3, #0]
 8014512:	e00b      	b.n	801452c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014514:	78fb      	ldrb	r3, [r7, #3]
 8014516:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801451a:	68f9      	ldr	r1, [r7, #12]
 801451c:	4613      	mov	r3, r2
 801451e:	00db      	lsls	r3, r3, #3
 8014520:	4413      	add	r3, r2
 8014522:	009b      	lsls	r3, r3, #2
 8014524:	440b      	add	r3, r1
 8014526:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801452a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801452c:	4618      	mov	r0, r3
 801452e:	3714      	adds	r7, #20
 8014530:	46bd      	mov	sp, r7
 8014532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014536:	4770      	bx	lr

08014538 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014538:	b580      	push	{r7, lr}
 801453a:	b084      	sub	sp, #16
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
 8014540:	460b      	mov	r3, r1
 8014542:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014544:	2300      	movs	r3, #0
 8014546:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014548:	2300      	movs	r3, #0
 801454a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014552:	78fa      	ldrb	r2, [r7, #3]
 8014554:	4611      	mov	r1, r2
 8014556:	4618      	mov	r0, r3
 8014558:	f7f1 fd71 	bl	800603e <HAL_PCD_SetAddress>
 801455c:	4603      	mov	r3, r0
 801455e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014560:	7bbb      	ldrb	r3, [r7, #14]
 8014562:	2b03      	cmp	r3, #3
 8014564:	d816      	bhi.n	8014594 <USBD_LL_SetUSBAddress+0x5c>
 8014566:	a201      	add	r2, pc, #4	; (adr r2, 801456c <USBD_LL_SetUSBAddress+0x34>)
 8014568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801456c:	0801457d 	.word	0x0801457d
 8014570:	08014583 	.word	0x08014583
 8014574:	08014589 	.word	0x08014589
 8014578:	0801458f 	.word	0x0801458f
    case HAL_OK :
      usb_status = USBD_OK;
 801457c:	2300      	movs	r3, #0
 801457e:	73fb      	strb	r3, [r7, #15]
    break;
 8014580:	e00b      	b.n	801459a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014582:	2303      	movs	r3, #3
 8014584:	73fb      	strb	r3, [r7, #15]
    break;
 8014586:	e008      	b.n	801459a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014588:	2301      	movs	r3, #1
 801458a:	73fb      	strb	r3, [r7, #15]
    break;
 801458c:	e005      	b.n	801459a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801458e:	2303      	movs	r3, #3
 8014590:	73fb      	strb	r3, [r7, #15]
    break;
 8014592:	e002      	b.n	801459a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8014594:	2303      	movs	r3, #3
 8014596:	73fb      	strb	r3, [r7, #15]
    break;
 8014598:	bf00      	nop
  }
  return usb_status;
 801459a:	7bfb      	ldrb	r3, [r7, #15]
}
 801459c:	4618      	mov	r0, r3
 801459e:	3710      	adds	r7, #16
 80145a0:	46bd      	mov	sp, r7
 80145a2:	bd80      	pop	{r7, pc}

080145a4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b086      	sub	sp, #24
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	60f8      	str	r0, [r7, #12]
 80145ac:	607a      	str	r2, [r7, #4]
 80145ae:	603b      	str	r3, [r7, #0]
 80145b0:	460b      	mov	r3, r1
 80145b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80145b4:	2300      	movs	r3, #0
 80145b6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80145b8:	2300      	movs	r3, #0
 80145ba:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80145c2:	7af9      	ldrb	r1, [r7, #11]
 80145c4:	683b      	ldr	r3, [r7, #0]
 80145c6:	687a      	ldr	r2, [r7, #4]
 80145c8:	f7f1 fe66 	bl	8006298 <HAL_PCD_EP_Transmit>
 80145cc:	4603      	mov	r3, r0
 80145ce:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80145d0:	7dbb      	ldrb	r3, [r7, #22]
 80145d2:	2b03      	cmp	r3, #3
 80145d4:	d816      	bhi.n	8014604 <USBD_LL_Transmit+0x60>
 80145d6:	a201      	add	r2, pc, #4	; (adr r2, 80145dc <USBD_LL_Transmit+0x38>)
 80145d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145dc:	080145ed 	.word	0x080145ed
 80145e0:	080145f3 	.word	0x080145f3
 80145e4:	080145f9 	.word	0x080145f9
 80145e8:	080145ff 	.word	0x080145ff
    case HAL_OK :
      usb_status = USBD_OK;
 80145ec:	2300      	movs	r3, #0
 80145ee:	75fb      	strb	r3, [r7, #23]
    break;
 80145f0:	e00b      	b.n	801460a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80145f2:	2303      	movs	r3, #3
 80145f4:	75fb      	strb	r3, [r7, #23]
    break;
 80145f6:	e008      	b.n	801460a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80145f8:	2301      	movs	r3, #1
 80145fa:	75fb      	strb	r3, [r7, #23]
    break;
 80145fc:	e005      	b.n	801460a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80145fe:	2303      	movs	r3, #3
 8014600:	75fb      	strb	r3, [r7, #23]
    break;
 8014602:	e002      	b.n	801460a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8014604:	2303      	movs	r3, #3
 8014606:	75fb      	strb	r3, [r7, #23]
    break;
 8014608:	bf00      	nop
  }
  return usb_status;
 801460a:	7dfb      	ldrb	r3, [r7, #23]
}
 801460c:	4618      	mov	r0, r3
 801460e:	3718      	adds	r7, #24
 8014610:	46bd      	mov	sp, r7
 8014612:	bd80      	pop	{r7, pc}

08014614 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014614:	b580      	push	{r7, lr}
 8014616:	b086      	sub	sp, #24
 8014618:	af00      	add	r7, sp, #0
 801461a:	60f8      	str	r0, [r7, #12]
 801461c:	607a      	str	r2, [r7, #4]
 801461e:	603b      	str	r3, [r7, #0]
 8014620:	460b      	mov	r3, r1
 8014622:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014624:	2300      	movs	r3, #0
 8014626:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014628:	2300      	movs	r3, #0
 801462a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014632:	7af9      	ldrb	r1, [r7, #11]
 8014634:	683b      	ldr	r3, [r7, #0]
 8014636:	687a      	ldr	r2, [r7, #4]
 8014638:	f7f1 fdd8 	bl	80061ec <HAL_PCD_EP_Receive>
 801463c:	4603      	mov	r3, r0
 801463e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8014640:	7dbb      	ldrb	r3, [r7, #22]
 8014642:	2b03      	cmp	r3, #3
 8014644:	d816      	bhi.n	8014674 <USBD_LL_PrepareReceive+0x60>
 8014646:	a201      	add	r2, pc, #4	; (adr r2, 801464c <USBD_LL_PrepareReceive+0x38>)
 8014648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801464c:	0801465d 	.word	0x0801465d
 8014650:	08014663 	.word	0x08014663
 8014654:	08014669 	.word	0x08014669
 8014658:	0801466f 	.word	0x0801466f
    case HAL_OK :
      usb_status = USBD_OK;
 801465c:	2300      	movs	r3, #0
 801465e:	75fb      	strb	r3, [r7, #23]
    break;
 8014660:	e00b      	b.n	801467a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014662:	2303      	movs	r3, #3
 8014664:	75fb      	strb	r3, [r7, #23]
    break;
 8014666:	e008      	b.n	801467a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014668:	2301      	movs	r3, #1
 801466a:	75fb      	strb	r3, [r7, #23]
    break;
 801466c:	e005      	b.n	801467a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801466e:	2303      	movs	r3, #3
 8014670:	75fb      	strb	r3, [r7, #23]
    break;
 8014672:	e002      	b.n	801467a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8014674:	2303      	movs	r3, #3
 8014676:	75fb      	strb	r3, [r7, #23]
    break;
 8014678:	bf00      	nop
  }
  return usb_status;
 801467a:	7dfb      	ldrb	r3, [r7, #23]
}
 801467c:	4618      	mov	r0, r3
 801467e:	3718      	adds	r7, #24
 8014680:	46bd      	mov	sp, r7
 8014682:	bd80      	pop	{r7, pc}

08014684 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014684:	b580      	push	{r7, lr}
 8014686:	b082      	sub	sp, #8
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]
 801468c:	460b      	mov	r3, r1
 801468e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014696:	78fa      	ldrb	r2, [r7, #3]
 8014698:	4611      	mov	r1, r2
 801469a:	4618      	mov	r0, r3
 801469c:	f7f1 fde4 	bl	8006268 <HAL_PCD_EP_GetRxCount>
 80146a0:	4603      	mov	r3, r0
}
 80146a2:	4618      	mov	r0, r3
 80146a4:	3708      	adds	r7, #8
 80146a6:	46bd      	mov	sp, r7
 80146a8:	bd80      	pop	{r7, pc}
	...

080146ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80146ac:	b480      	push	{r7}
 80146ae:	b083      	sub	sp, #12
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80146b4:	4b03      	ldr	r3, [pc, #12]	; (80146c4 <USBD_static_malloc+0x18>)
}
 80146b6:	4618      	mov	r0, r3
 80146b8:	370c      	adds	r7, #12
 80146ba:	46bd      	mov	sp, r7
 80146bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146c0:	4770      	bx	lr
 80146c2:	bf00      	nop
 80146c4:	20002d3c 	.word	0x20002d3c

080146c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80146c8:	b480      	push	{r7}
 80146ca:	b083      	sub	sp, #12
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	6078      	str	r0, [r7, #4]

}
 80146d0:	bf00      	nop
 80146d2:	370c      	adds	r7, #12
 80146d4:	46bd      	mov	sp, r7
 80146d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146da:	4770      	bx	lr

080146dc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80146dc:	b580      	push	{r7, lr}
 80146de:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80146e0:	f7ee fd8a 	bl	80031f8 <SystemClock_Config>
}
 80146e4:	bf00      	nop
 80146e6:	bd80      	pop	{r7, pc}

080146e8 <__libc_init_array>:
 80146e8:	b570      	push	{r4, r5, r6, lr}
 80146ea:	4d0d      	ldr	r5, [pc, #52]	; (8014720 <__libc_init_array+0x38>)
 80146ec:	4c0d      	ldr	r4, [pc, #52]	; (8014724 <__libc_init_array+0x3c>)
 80146ee:	1b64      	subs	r4, r4, r5
 80146f0:	10a4      	asrs	r4, r4, #2
 80146f2:	2600      	movs	r6, #0
 80146f4:	42a6      	cmp	r6, r4
 80146f6:	d109      	bne.n	801470c <__libc_init_array+0x24>
 80146f8:	4d0b      	ldr	r5, [pc, #44]	; (8014728 <__libc_init_array+0x40>)
 80146fa:	4c0c      	ldr	r4, [pc, #48]	; (801472c <__libc_init_array+0x44>)
 80146fc:	f002 ff70 	bl	80175e0 <_init>
 8014700:	1b64      	subs	r4, r4, r5
 8014702:	10a4      	asrs	r4, r4, #2
 8014704:	2600      	movs	r6, #0
 8014706:	42a6      	cmp	r6, r4
 8014708:	d105      	bne.n	8014716 <__libc_init_array+0x2e>
 801470a:	bd70      	pop	{r4, r5, r6, pc}
 801470c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014710:	4798      	blx	r3
 8014712:	3601      	adds	r6, #1
 8014714:	e7ee      	b.n	80146f4 <__libc_init_array+0xc>
 8014716:	f855 3b04 	ldr.w	r3, [r5], #4
 801471a:	4798      	blx	r3
 801471c:	3601      	adds	r6, #1
 801471e:	e7f2      	b.n	8014706 <__libc_init_array+0x1e>
 8014720:	08017de8 	.word	0x08017de8
 8014724:	08017de8 	.word	0x08017de8
 8014728:	08017de8 	.word	0x08017de8
 801472c:	08017dec 	.word	0x08017dec

08014730 <malloc>:
 8014730:	4b02      	ldr	r3, [pc, #8]	; (801473c <malloc+0xc>)
 8014732:	4601      	mov	r1, r0
 8014734:	6818      	ldr	r0, [r3, #0]
 8014736:	f000 b885 	b.w	8014844 <_malloc_r>
 801473a:	bf00      	nop
 801473c:	20000184 	.word	0x20000184

08014740 <memcpy>:
 8014740:	440a      	add	r2, r1
 8014742:	4291      	cmp	r1, r2
 8014744:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014748:	d100      	bne.n	801474c <memcpy+0xc>
 801474a:	4770      	bx	lr
 801474c:	b510      	push	{r4, lr}
 801474e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014752:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014756:	4291      	cmp	r1, r2
 8014758:	d1f9      	bne.n	801474e <memcpy+0xe>
 801475a:	bd10      	pop	{r4, pc}

0801475c <memset>:
 801475c:	4402      	add	r2, r0
 801475e:	4603      	mov	r3, r0
 8014760:	4293      	cmp	r3, r2
 8014762:	d100      	bne.n	8014766 <memset+0xa>
 8014764:	4770      	bx	lr
 8014766:	f803 1b01 	strb.w	r1, [r3], #1
 801476a:	e7f9      	b.n	8014760 <memset+0x4>

0801476c <_free_r>:
 801476c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801476e:	2900      	cmp	r1, #0
 8014770:	d044      	beq.n	80147fc <_free_r+0x90>
 8014772:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014776:	9001      	str	r0, [sp, #4]
 8014778:	2b00      	cmp	r3, #0
 801477a:	f1a1 0404 	sub.w	r4, r1, #4
 801477e:	bfb8      	it	lt
 8014780:	18e4      	addlt	r4, r4, r3
 8014782:	f001 fd41 	bl	8016208 <__malloc_lock>
 8014786:	4a1e      	ldr	r2, [pc, #120]	; (8014800 <_free_r+0x94>)
 8014788:	9801      	ldr	r0, [sp, #4]
 801478a:	6813      	ldr	r3, [r2, #0]
 801478c:	b933      	cbnz	r3, 801479c <_free_r+0x30>
 801478e:	6063      	str	r3, [r4, #4]
 8014790:	6014      	str	r4, [r2, #0]
 8014792:	b003      	add	sp, #12
 8014794:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014798:	f001 bd3c 	b.w	8016214 <__malloc_unlock>
 801479c:	42a3      	cmp	r3, r4
 801479e:	d908      	bls.n	80147b2 <_free_r+0x46>
 80147a0:	6825      	ldr	r5, [r4, #0]
 80147a2:	1961      	adds	r1, r4, r5
 80147a4:	428b      	cmp	r3, r1
 80147a6:	bf01      	itttt	eq
 80147a8:	6819      	ldreq	r1, [r3, #0]
 80147aa:	685b      	ldreq	r3, [r3, #4]
 80147ac:	1949      	addeq	r1, r1, r5
 80147ae:	6021      	streq	r1, [r4, #0]
 80147b0:	e7ed      	b.n	801478e <_free_r+0x22>
 80147b2:	461a      	mov	r2, r3
 80147b4:	685b      	ldr	r3, [r3, #4]
 80147b6:	b10b      	cbz	r3, 80147bc <_free_r+0x50>
 80147b8:	42a3      	cmp	r3, r4
 80147ba:	d9fa      	bls.n	80147b2 <_free_r+0x46>
 80147bc:	6811      	ldr	r1, [r2, #0]
 80147be:	1855      	adds	r5, r2, r1
 80147c0:	42a5      	cmp	r5, r4
 80147c2:	d10b      	bne.n	80147dc <_free_r+0x70>
 80147c4:	6824      	ldr	r4, [r4, #0]
 80147c6:	4421      	add	r1, r4
 80147c8:	1854      	adds	r4, r2, r1
 80147ca:	42a3      	cmp	r3, r4
 80147cc:	6011      	str	r1, [r2, #0]
 80147ce:	d1e0      	bne.n	8014792 <_free_r+0x26>
 80147d0:	681c      	ldr	r4, [r3, #0]
 80147d2:	685b      	ldr	r3, [r3, #4]
 80147d4:	6053      	str	r3, [r2, #4]
 80147d6:	4421      	add	r1, r4
 80147d8:	6011      	str	r1, [r2, #0]
 80147da:	e7da      	b.n	8014792 <_free_r+0x26>
 80147dc:	d902      	bls.n	80147e4 <_free_r+0x78>
 80147de:	230c      	movs	r3, #12
 80147e0:	6003      	str	r3, [r0, #0]
 80147e2:	e7d6      	b.n	8014792 <_free_r+0x26>
 80147e4:	6825      	ldr	r5, [r4, #0]
 80147e6:	1961      	adds	r1, r4, r5
 80147e8:	428b      	cmp	r3, r1
 80147ea:	bf04      	itt	eq
 80147ec:	6819      	ldreq	r1, [r3, #0]
 80147ee:	685b      	ldreq	r3, [r3, #4]
 80147f0:	6063      	str	r3, [r4, #4]
 80147f2:	bf04      	itt	eq
 80147f4:	1949      	addeq	r1, r1, r5
 80147f6:	6021      	streq	r1, [r4, #0]
 80147f8:	6054      	str	r4, [r2, #4]
 80147fa:	e7ca      	b.n	8014792 <_free_r+0x26>
 80147fc:	b003      	add	sp, #12
 80147fe:	bd30      	pop	{r4, r5, pc}
 8014800:	20002f5c 	.word	0x20002f5c

08014804 <sbrk_aligned>:
 8014804:	b570      	push	{r4, r5, r6, lr}
 8014806:	4e0e      	ldr	r6, [pc, #56]	; (8014840 <sbrk_aligned+0x3c>)
 8014808:	460c      	mov	r4, r1
 801480a:	6831      	ldr	r1, [r6, #0]
 801480c:	4605      	mov	r5, r0
 801480e:	b911      	cbnz	r1, 8014816 <sbrk_aligned+0x12>
 8014810:	f000 fd0e 	bl	8015230 <_sbrk_r>
 8014814:	6030      	str	r0, [r6, #0]
 8014816:	4621      	mov	r1, r4
 8014818:	4628      	mov	r0, r5
 801481a:	f000 fd09 	bl	8015230 <_sbrk_r>
 801481e:	1c43      	adds	r3, r0, #1
 8014820:	d00a      	beq.n	8014838 <sbrk_aligned+0x34>
 8014822:	1cc4      	adds	r4, r0, #3
 8014824:	f024 0403 	bic.w	r4, r4, #3
 8014828:	42a0      	cmp	r0, r4
 801482a:	d007      	beq.n	801483c <sbrk_aligned+0x38>
 801482c:	1a21      	subs	r1, r4, r0
 801482e:	4628      	mov	r0, r5
 8014830:	f000 fcfe 	bl	8015230 <_sbrk_r>
 8014834:	3001      	adds	r0, #1
 8014836:	d101      	bne.n	801483c <sbrk_aligned+0x38>
 8014838:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801483c:	4620      	mov	r0, r4
 801483e:	bd70      	pop	{r4, r5, r6, pc}
 8014840:	20002f60 	.word	0x20002f60

08014844 <_malloc_r>:
 8014844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014848:	1ccd      	adds	r5, r1, #3
 801484a:	f025 0503 	bic.w	r5, r5, #3
 801484e:	3508      	adds	r5, #8
 8014850:	2d0c      	cmp	r5, #12
 8014852:	bf38      	it	cc
 8014854:	250c      	movcc	r5, #12
 8014856:	2d00      	cmp	r5, #0
 8014858:	4607      	mov	r7, r0
 801485a:	db01      	blt.n	8014860 <_malloc_r+0x1c>
 801485c:	42a9      	cmp	r1, r5
 801485e:	d905      	bls.n	801486c <_malloc_r+0x28>
 8014860:	230c      	movs	r3, #12
 8014862:	603b      	str	r3, [r7, #0]
 8014864:	2600      	movs	r6, #0
 8014866:	4630      	mov	r0, r6
 8014868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801486c:	4e2e      	ldr	r6, [pc, #184]	; (8014928 <_malloc_r+0xe4>)
 801486e:	f001 fccb 	bl	8016208 <__malloc_lock>
 8014872:	6833      	ldr	r3, [r6, #0]
 8014874:	461c      	mov	r4, r3
 8014876:	bb34      	cbnz	r4, 80148c6 <_malloc_r+0x82>
 8014878:	4629      	mov	r1, r5
 801487a:	4638      	mov	r0, r7
 801487c:	f7ff ffc2 	bl	8014804 <sbrk_aligned>
 8014880:	1c43      	adds	r3, r0, #1
 8014882:	4604      	mov	r4, r0
 8014884:	d14d      	bne.n	8014922 <_malloc_r+0xde>
 8014886:	6834      	ldr	r4, [r6, #0]
 8014888:	4626      	mov	r6, r4
 801488a:	2e00      	cmp	r6, #0
 801488c:	d140      	bne.n	8014910 <_malloc_r+0xcc>
 801488e:	6823      	ldr	r3, [r4, #0]
 8014890:	4631      	mov	r1, r6
 8014892:	4638      	mov	r0, r7
 8014894:	eb04 0803 	add.w	r8, r4, r3
 8014898:	f000 fcca 	bl	8015230 <_sbrk_r>
 801489c:	4580      	cmp	r8, r0
 801489e:	d13a      	bne.n	8014916 <_malloc_r+0xd2>
 80148a0:	6821      	ldr	r1, [r4, #0]
 80148a2:	3503      	adds	r5, #3
 80148a4:	1a6d      	subs	r5, r5, r1
 80148a6:	f025 0503 	bic.w	r5, r5, #3
 80148aa:	3508      	adds	r5, #8
 80148ac:	2d0c      	cmp	r5, #12
 80148ae:	bf38      	it	cc
 80148b0:	250c      	movcc	r5, #12
 80148b2:	4629      	mov	r1, r5
 80148b4:	4638      	mov	r0, r7
 80148b6:	f7ff ffa5 	bl	8014804 <sbrk_aligned>
 80148ba:	3001      	adds	r0, #1
 80148bc:	d02b      	beq.n	8014916 <_malloc_r+0xd2>
 80148be:	6823      	ldr	r3, [r4, #0]
 80148c0:	442b      	add	r3, r5
 80148c2:	6023      	str	r3, [r4, #0]
 80148c4:	e00e      	b.n	80148e4 <_malloc_r+0xa0>
 80148c6:	6822      	ldr	r2, [r4, #0]
 80148c8:	1b52      	subs	r2, r2, r5
 80148ca:	d41e      	bmi.n	801490a <_malloc_r+0xc6>
 80148cc:	2a0b      	cmp	r2, #11
 80148ce:	d916      	bls.n	80148fe <_malloc_r+0xba>
 80148d0:	1961      	adds	r1, r4, r5
 80148d2:	42a3      	cmp	r3, r4
 80148d4:	6025      	str	r5, [r4, #0]
 80148d6:	bf18      	it	ne
 80148d8:	6059      	strne	r1, [r3, #4]
 80148da:	6863      	ldr	r3, [r4, #4]
 80148dc:	bf08      	it	eq
 80148de:	6031      	streq	r1, [r6, #0]
 80148e0:	5162      	str	r2, [r4, r5]
 80148e2:	604b      	str	r3, [r1, #4]
 80148e4:	4638      	mov	r0, r7
 80148e6:	f104 060b 	add.w	r6, r4, #11
 80148ea:	f001 fc93 	bl	8016214 <__malloc_unlock>
 80148ee:	f026 0607 	bic.w	r6, r6, #7
 80148f2:	1d23      	adds	r3, r4, #4
 80148f4:	1af2      	subs	r2, r6, r3
 80148f6:	d0b6      	beq.n	8014866 <_malloc_r+0x22>
 80148f8:	1b9b      	subs	r3, r3, r6
 80148fa:	50a3      	str	r3, [r4, r2]
 80148fc:	e7b3      	b.n	8014866 <_malloc_r+0x22>
 80148fe:	6862      	ldr	r2, [r4, #4]
 8014900:	42a3      	cmp	r3, r4
 8014902:	bf0c      	ite	eq
 8014904:	6032      	streq	r2, [r6, #0]
 8014906:	605a      	strne	r2, [r3, #4]
 8014908:	e7ec      	b.n	80148e4 <_malloc_r+0xa0>
 801490a:	4623      	mov	r3, r4
 801490c:	6864      	ldr	r4, [r4, #4]
 801490e:	e7b2      	b.n	8014876 <_malloc_r+0x32>
 8014910:	4634      	mov	r4, r6
 8014912:	6876      	ldr	r6, [r6, #4]
 8014914:	e7b9      	b.n	801488a <_malloc_r+0x46>
 8014916:	230c      	movs	r3, #12
 8014918:	603b      	str	r3, [r7, #0]
 801491a:	4638      	mov	r0, r7
 801491c:	f001 fc7a 	bl	8016214 <__malloc_unlock>
 8014920:	e7a1      	b.n	8014866 <_malloc_r+0x22>
 8014922:	6025      	str	r5, [r4, #0]
 8014924:	e7de      	b.n	80148e4 <_malloc_r+0xa0>
 8014926:	bf00      	nop
 8014928:	20002f5c 	.word	0x20002f5c

0801492c <__cvt>:
 801492c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014930:	ec55 4b10 	vmov	r4, r5, d0
 8014934:	2d00      	cmp	r5, #0
 8014936:	460e      	mov	r6, r1
 8014938:	4619      	mov	r1, r3
 801493a:	462b      	mov	r3, r5
 801493c:	bfbb      	ittet	lt
 801493e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014942:	461d      	movlt	r5, r3
 8014944:	2300      	movge	r3, #0
 8014946:	232d      	movlt	r3, #45	; 0x2d
 8014948:	700b      	strb	r3, [r1, #0]
 801494a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801494c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014950:	4691      	mov	r9, r2
 8014952:	f023 0820 	bic.w	r8, r3, #32
 8014956:	bfbc      	itt	lt
 8014958:	4622      	movlt	r2, r4
 801495a:	4614      	movlt	r4, r2
 801495c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014960:	d005      	beq.n	801496e <__cvt+0x42>
 8014962:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8014966:	d100      	bne.n	801496a <__cvt+0x3e>
 8014968:	3601      	adds	r6, #1
 801496a:	2102      	movs	r1, #2
 801496c:	e000      	b.n	8014970 <__cvt+0x44>
 801496e:	2103      	movs	r1, #3
 8014970:	ab03      	add	r3, sp, #12
 8014972:	9301      	str	r3, [sp, #4]
 8014974:	ab02      	add	r3, sp, #8
 8014976:	9300      	str	r3, [sp, #0]
 8014978:	ec45 4b10 	vmov	d0, r4, r5
 801497c:	4653      	mov	r3, sl
 801497e:	4632      	mov	r2, r6
 8014980:	f000 fd32 	bl	80153e8 <_dtoa_r>
 8014984:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014988:	4607      	mov	r7, r0
 801498a:	d102      	bne.n	8014992 <__cvt+0x66>
 801498c:	f019 0f01 	tst.w	r9, #1
 8014990:	d022      	beq.n	80149d8 <__cvt+0xac>
 8014992:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014996:	eb07 0906 	add.w	r9, r7, r6
 801499a:	d110      	bne.n	80149be <__cvt+0x92>
 801499c:	783b      	ldrb	r3, [r7, #0]
 801499e:	2b30      	cmp	r3, #48	; 0x30
 80149a0:	d10a      	bne.n	80149b8 <__cvt+0x8c>
 80149a2:	2200      	movs	r2, #0
 80149a4:	2300      	movs	r3, #0
 80149a6:	4620      	mov	r0, r4
 80149a8:	4629      	mov	r1, r5
 80149aa:	f7ec f8a5 	bl	8000af8 <__aeabi_dcmpeq>
 80149ae:	b918      	cbnz	r0, 80149b8 <__cvt+0x8c>
 80149b0:	f1c6 0601 	rsb	r6, r6, #1
 80149b4:	f8ca 6000 	str.w	r6, [sl]
 80149b8:	f8da 3000 	ldr.w	r3, [sl]
 80149bc:	4499      	add	r9, r3
 80149be:	2200      	movs	r2, #0
 80149c0:	2300      	movs	r3, #0
 80149c2:	4620      	mov	r0, r4
 80149c4:	4629      	mov	r1, r5
 80149c6:	f7ec f897 	bl	8000af8 <__aeabi_dcmpeq>
 80149ca:	b108      	cbz	r0, 80149d0 <__cvt+0xa4>
 80149cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80149d0:	2230      	movs	r2, #48	; 0x30
 80149d2:	9b03      	ldr	r3, [sp, #12]
 80149d4:	454b      	cmp	r3, r9
 80149d6:	d307      	bcc.n	80149e8 <__cvt+0xbc>
 80149d8:	9b03      	ldr	r3, [sp, #12]
 80149da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80149dc:	1bdb      	subs	r3, r3, r7
 80149de:	4638      	mov	r0, r7
 80149e0:	6013      	str	r3, [r2, #0]
 80149e2:	b004      	add	sp, #16
 80149e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149e8:	1c59      	adds	r1, r3, #1
 80149ea:	9103      	str	r1, [sp, #12]
 80149ec:	701a      	strb	r2, [r3, #0]
 80149ee:	e7f0      	b.n	80149d2 <__cvt+0xa6>

080149f0 <__exponent>:
 80149f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80149f2:	4603      	mov	r3, r0
 80149f4:	2900      	cmp	r1, #0
 80149f6:	bfb8      	it	lt
 80149f8:	4249      	neglt	r1, r1
 80149fa:	f803 2b02 	strb.w	r2, [r3], #2
 80149fe:	bfb4      	ite	lt
 8014a00:	222d      	movlt	r2, #45	; 0x2d
 8014a02:	222b      	movge	r2, #43	; 0x2b
 8014a04:	2909      	cmp	r1, #9
 8014a06:	7042      	strb	r2, [r0, #1]
 8014a08:	dd2a      	ble.n	8014a60 <__exponent+0x70>
 8014a0a:	f10d 0407 	add.w	r4, sp, #7
 8014a0e:	46a4      	mov	ip, r4
 8014a10:	270a      	movs	r7, #10
 8014a12:	46a6      	mov	lr, r4
 8014a14:	460a      	mov	r2, r1
 8014a16:	fb91 f6f7 	sdiv	r6, r1, r7
 8014a1a:	fb07 1516 	mls	r5, r7, r6, r1
 8014a1e:	3530      	adds	r5, #48	; 0x30
 8014a20:	2a63      	cmp	r2, #99	; 0x63
 8014a22:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8014a26:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8014a2a:	4631      	mov	r1, r6
 8014a2c:	dcf1      	bgt.n	8014a12 <__exponent+0x22>
 8014a2e:	3130      	adds	r1, #48	; 0x30
 8014a30:	f1ae 0502 	sub.w	r5, lr, #2
 8014a34:	f804 1c01 	strb.w	r1, [r4, #-1]
 8014a38:	1c44      	adds	r4, r0, #1
 8014a3a:	4629      	mov	r1, r5
 8014a3c:	4561      	cmp	r1, ip
 8014a3e:	d30a      	bcc.n	8014a56 <__exponent+0x66>
 8014a40:	f10d 0209 	add.w	r2, sp, #9
 8014a44:	eba2 020e 	sub.w	r2, r2, lr
 8014a48:	4565      	cmp	r5, ip
 8014a4a:	bf88      	it	hi
 8014a4c:	2200      	movhi	r2, #0
 8014a4e:	4413      	add	r3, r2
 8014a50:	1a18      	subs	r0, r3, r0
 8014a52:	b003      	add	sp, #12
 8014a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014a5a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8014a5e:	e7ed      	b.n	8014a3c <__exponent+0x4c>
 8014a60:	2330      	movs	r3, #48	; 0x30
 8014a62:	3130      	adds	r1, #48	; 0x30
 8014a64:	7083      	strb	r3, [r0, #2]
 8014a66:	70c1      	strb	r1, [r0, #3]
 8014a68:	1d03      	adds	r3, r0, #4
 8014a6a:	e7f1      	b.n	8014a50 <__exponent+0x60>

08014a6c <_printf_float>:
 8014a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a70:	ed2d 8b02 	vpush	{d8}
 8014a74:	b08d      	sub	sp, #52	; 0x34
 8014a76:	460c      	mov	r4, r1
 8014a78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014a7c:	4616      	mov	r6, r2
 8014a7e:	461f      	mov	r7, r3
 8014a80:	4605      	mov	r5, r0
 8014a82:	f001 fba7 	bl	80161d4 <_localeconv_r>
 8014a86:	f8d0 a000 	ldr.w	sl, [r0]
 8014a8a:	4650      	mov	r0, sl
 8014a8c:	f7eb fbb8 	bl	8000200 <strlen>
 8014a90:	2300      	movs	r3, #0
 8014a92:	930a      	str	r3, [sp, #40]	; 0x28
 8014a94:	6823      	ldr	r3, [r4, #0]
 8014a96:	9305      	str	r3, [sp, #20]
 8014a98:	f8d8 3000 	ldr.w	r3, [r8]
 8014a9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8014aa0:	3307      	adds	r3, #7
 8014aa2:	f023 0307 	bic.w	r3, r3, #7
 8014aa6:	f103 0208 	add.w	r2, r3, #8
 8014aaa:	f8c8 2000 	str.w	r2, [r8]
 8014aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ab2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014ab6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014aba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014abe:	9307      	str	r3, [sp, #28]
 8014ac0:	f8cd 8018 	str.w	r8, [sp, #24]
 8014ac4:	ee08 0a10 	vmov	s16, r0
 8014ac8:	4b9f      	ldr	r3, [pc, #636]	; (8014d48 <_printf_float+0x2dc>)
 8014aca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014ace:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014ad2:	f7ec f843 	bl	8000b5c <__aeabi_dcmpun>
 8014ad6:	bb88      	cbnz	r0, 8014b3c <_printf_float+0xd0>
 8014ad8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014adc:	4b9a      	ldr	r3, [pc, #616]	; (8014d48 <_printf_float+0x2dc>)
 8014ade:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014ae2:	f7ec f81d 	bl	8000b20 <__aeabi_dcmple>
 8014ae6:	bb48      	cbnz	r0, 8014b3c <_printf_float+0xd0>
 8014ae8:	2200      	movs	r2, #0
 8014aea:	2300      	movs	r3, #0
 8014aec:	4640      	mov	r0, r8
 8014aee:	4649      	mov	r1, r9
 8014af0:	f7ec f80c 	bl	8000b0c <__aeabi_dcmplt>
 8014af4:	b110      	cbz	r0, 8014afc <_printf_float+0x90>
 8014af6:	232d      	movs	r3, #45	; 0x2d
 8014af8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014afc:	4b93      	ldr	r3, [pc, #588]	; (8014d4c <_printf_float+0x2e0>)
 8014afe:	4894      	ldr	r0, [pc, #592]	; (8014d50 <_printf_float+0x2e4>)
 8014b00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8014b04:	bf94      	ite	ls
 8014b06:	4698      	movls	r8, r3
 8014b08:	4680      	movhi	r8, r0
 8014b0a:	2303      	movs	r3, #3
 8014b0c:	6123      	str	r3, [r4, #16]
 8014b0e:	9b05      	ldr	r3, [sp, #20]
 8014b10:	f023 0204 	bic.w	r2, r3, #4
 8014b14:	6022      	str	r2, [r4, #0]
 8014b16:	f04f 0900 	mov.w	r9, #0
 8014b1a:	9700      	str	r7, [sp, #0]
 8014b1c:	4633      	mov	r3, r6
 8014b1e:	aa0b      	add	r2, sp, #44	; 0x2c
 8014b20:	4621      	mov	r1, r4
 8014b22:	4628      	mov	r0, r5
 8014b24:	f000 f9d8 	bl	8014ed8 <_printf_common>
 8014b28:	3001      	adds	r0, #1
 8014b2a:	f040 8090 	bne.w	8014c4e <_printf_float+0x1e2>
 8014b2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014b32:	b00d      	add	sp, #52	; 0x34
 8014b34:	ecbd 8b02 	vpop	{d8}
 8014b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b3c:	4642      	mov	r2, r8
 8014b3e:	464b      	mov	r3, r9
 8014b40:	4640      	mov	r0, r8
 8014b42:	4649      	mov	r1, r9
 8014b44:	f7ec f80a 	bl	8000b5c <__aeabi_dcmpun>
 8014b48:	b140      	cbz	r0, 8014b5c <_printf_float+0xf0>
 8014b4a:	464b      	mov	r3, r9
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	bfbc      	itt	lt
 8014b50:	232d      	movlt	r3, #45	; 0x2d
 8014b52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014b56:	487f      	ldr	r0, [pc, #508]	; (8014d54 <_printf_float+0x2e8>)
 8014b58:	4b7f      	ldr	r3, [pc, #508]	; (8014d58 <_printf_float+0x2ec>)
 8014b5a:	e7d1      	b.n	8014b00 <_printf_float+0x94>
 8014b5c:	6863      	ldr	r3, [r4, #4]
 8014b5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8014b62:	9206      	str	r2, [sp, #24]
 8014b64:	1c5a      	adds	r2, r3, #1
 8014b66:	d13f      	bne.n	8014be8 <_printf_float+0x17c>
 8014b68:	2306      	movs	r3, #6
 8014b6a:	6063      	str	r3, [r4, #4]
 8014b6c:	9b05      	ldr	r3, [sp, #20]
 8014b6e:	6861      	ldr	r1, [r4, #4]
 8014b70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8014b74:	2300      	movs	r3, #0
 8014b76:	9303      	str	r3, [sp, #12]
 8014b78:	ab0a      	add	r3, sp, #40	; 0x28
 8014b7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8014b7e:	ab09      	add	r3, sp, #36	; 0x24
 8014b80:	ec49 8b10 	vmov	d0, r8, r9
 8014b84:	9300      	str	r3, [sp, #0]
 8014b86:	6022      	str	r2, [r4, #0]
 8014b88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014b8c:	4628      	mov	r0, r5
 8014b8e:	f7ff fecd 	bl	801492c <__cvt>
 8014b92:	9b06      	ldr	r3, [sp, #24]
 8014b94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014b96:	2b47      	cmp	r3, #71	; 0x47
 8014b98:	4680      	mov	r8, r0
 8014b9a:	d108      	bne.n	8014bae <_printf_float+0x142>
 8014b9c:	1cc8      	adds	r0, r1, #3
 8014b9e:	db02      	blt.n	8014ba6 <_printf_float+0x13a>
 8014ba0:	6863      	ldr	r3, [r4, #4]
 8014ba2:	4299      	cmp	r1, r3
 8014ba4:	dd41      	ble.n	8014c2a <_printf_float+0x1be>
 8014ba6:	f1ab 0b02 	sub.w	fp, fp, #2
 8014baa:	fa5f fb8b 	uxtb.w	fp, fp
 8014bae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014bb2:	d820      	bhi.n	8014bf6 <_printf_float+0x18a>
 8014bb4:	3901      	subs	r1, #1
 8014bb6:	465a      	mov	r2, fp
 8014bb8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014bbc:	9109      	str	r1, [sp, #36]	; 0x24
 8014bbe:	f7ff ff17 	bl	80149f0 <__exponent>
 8014bc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014bc4:	1813      	adds	r3, r2, r0
 8014bc6:	2a01      	cmp	r2, #1
 8014bc8:	4681      	mov	r9, r0
 8014bca:	6123      	str	r3, [r4, #16]
 8014bcc:	dc02      	bgt.n	8014bd4 <_printf_float+0x168>
 8014bce:	6822      	ldr	r2, [r4, #0]
 8014bd0:	07d2      	lsls	r2, r2, #31
 8014bd2:	d501      	bpl.n	8014bd8 <_printf_float+0x16c>
 8014bd4:	3301      	adds	r3, #1
 8014bd6:	6123      	str	r3, [r4, #16]
 8014bd8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d09c      	beq.n	8014b1a <_printf_float+0xae>
 8014be0:	232d      	movs	r3, #45	; 0x2d
 8014be2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014be6:	e798      	b.n	8014b1a <_printf_float+0xae>
 8014be8:	9a06      	ldr	r2, [sp, #24]
 8014bea:	2a47      	cmp	r2, #71	; 0x47
 8014bec:	d1be      	bne.n	8014b6c <_printf_float+0x100>
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d1bc      	bne.n	8014b6c <_printf_float+0x100>
 8014bf2:	2301      	movs	r3, #1
 8014bf4:	e7b9      	b.n	8014b6a <_printf_float+0xfe>
 8014bf6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8014bfa:	d118      	bne.n	8014c2e <_printf_float+0x1c2>
 8014bfc:	2900      	cmp	r1, #0
 8014bfe:	6863      	ldr	r3, [r4, #4]
 8014c00:	dd0b      	ble.n	8014c1a <_printf_float+0x1ae>
 8014c02:	6121      	str	r1, [r4, #16]
 8014c04:	b913      	cbnz	r3, 8014c0c <_printf_float+0x1a0>
 8014c06:	6822      	ldr	r2, [r4, #0]
 8014c08:	07d0      	lsls	r0, r2, #31
 8014c0a:	d502      	bpl.n	8014c12 <_printf_float+0x1a6>
 8014c0c:	3301      	adds	r3, #1
 8014c0e:	440b      	add	r3, r1
 8014c10:	6123      	str	r3, [r4, #16]
 8014c12:	65a1      	str	r1, [r4, #88]	; 0x58
 8014c14:	f04f 0900 	mov.w	r9, #0
 8014c18:	e7de      	b.n	8014bd8 <_printf_float+0x16c>
 8014c1a:	b913      	cbnz	r3, 8014c22 <_printf_float+0x1b6>
 8014c1c:	6822      	ldr	r2, [r4, #0]
 8014c1e:	07d2      	lsls	r2, r2, #31
 8014c20:	d501      	bpl.n	8014c26 <_printf_float+0x1ba>
 8014c22:	3302      	adds	r3, #2
 8014c24:	e7f4      	b.n	8014c10 <_printf_float+0x1a4>
 8014c26:	2301      	movs	r3, #1
 8014c28:	e7f2      	b.n	8014c10 <_printf_float+0x1a4>
 8014c2a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8014c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c30:	4299      	cmp	r1, r3
 8014c32:	db05      	blt.n	8014c40 <_printf_float+0x1d4>
 8014c34:	6823      	ldr	r3, [r4, #0]
 8014c36:	6121      	str	r1, [r4, #16]
 8014c38:	07d8      	lsls	r0, r3, #31
 8014c3a:	d5ea      	bpl.n	8014c12 <_printf_float+0x1a6>
 8014c3c:	1c4b      	adds	r3, r1, #1
 8014c3e:	e7e7      	b.n	8014c10 <_printf_float+0x1a4>
 8014c40:	2900      	cmp	r1, #0
 8014c42:	bfd4      	ite	le
 8014c44:	f1c1 0202 	rsble	r2, r1, #2
 8014c48:	2201      	movgt	r2, #1
 8014c4a:	4413      	add	r3, r2
 8014c4c:	e7e0      	b.n	8014c10 <_printf_float+0x1a4>
 8014c4e:	6823      	ldr	r3, [r4, #0]
 8014c50:	055a      	lsls	r2, r3, #21
 8014c52:	d407      	bmi.n	8014c64 <_printf_float+0x1f8>
 8014c54:	6923      	ldr	r3, [r4, #16]
 8014c56:	4642      	mov	r2, r8
 8014c58:	4631      	mov	r1, r6
 8014c5a:	4628      	mov	r0, r5
 8014c5c:	47b8      	blx	r7
 8014c5e:	3001      	adds	r0, #1
 8014c60:	d12c      	bne.n	8014cbc <_printf_float+0x250>
 8014c62:	e764      	b.n	8014b2e <_printf_float+0xc2>
 8014c64:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014c68:	f240 80e0 	bls.w	8014e2c <_printf_float+0x3c0>
 8014c6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014c70:	2200      	movs	r2, #0
 8014c72:	2300      	movs	r3, #0
 8014c74:	f7eb ff40 	bl	8000af8 <__aeabi_dcmpeq>
 8014c78:	2800      	cmp	r0, #0
 8014c7a:	d034      	beq.n	8014ce6 <_printf_float+0x27a>
 8014c7c:	4a37      	ldr	r2, [pc, #220]	; (8014d5c <_printf_float+0x2f0>)
 8014c7e:	2301      	movs	r3, #1
 8014c80:	4631      	mov	r1, r6
 8014c82:	4628      	mov	r0, r5
 8014c84:	47b8      	blx	r7
 8014c86:	3001      	adds	r0, #1
 8014c88:	f43f af51 	beq.w	8014b2e <_printf_float+0xc2>
 8014c8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014c90:	429a      	cmp	r2, r3
 8014c92:	db02      	blt.n	8014c9a <_printf_float+0x22e>
 8014c94:	6823      	ldr	r3, [r4, #0]
 8014c96:	07d8      	lsls	r0, r3, #31
 8014c98:	d510      	bpl.n	8014cbc <_printf_float+0x250>
 8014c9a:	ee18 3a10 	vmov	r3, s16
 8014c9e:	4652      	mov	r2, sl
 8014ca0:	4631      	mov	r1, r6
 8014ca2:	4628      	mov	r0, r5
 8014ca4:	47b8      	blx	r7
 8014ca6:	3001      	adds	r0, #1
 8014ca8:	f43f af41 	beq.w	8014b2e <_printf_float+0xc2>
 8014cac:	f04f 0800 	mov.w	r8, #0
 8014cb0:	f104 091a 	add.w	r9, r4, #26
 8014cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cb6:	3b01      	subs	r3, #1
 8014cb8:	4543      	cmp	r3, r8
 8014cba:	dc09      	bgt.n	8014cd0 <_printf_float+0x264>
 8014cbc:	6823      	ldr	r3, [r4, #0]
 8014cbe:	079b      	lsls	r3, r3, #30
 8014cc0:	f100 8105 	bmi.w	8014ece <_printf_float+0x462>
 8014cc4:	68e0      	ldr	r0, [r4, #12]
 8014cc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014cc8:	4298      	cmp	r0, r3
 8014cca:	bfb8      	it	lt
 8014ccc:	4618      	movlt	r0, r3
 8014cce:	e730      	b.n	8014b32 <_printf_float+0xc6>
 8014cd0:	2301      	movs	r3, #1
 8014cd2:	464a      	mov	r2, r9
 8014cd4:	4631      	mov	r1, r6
 8014cd6:	4628      	mov	r0, r5
 8014cd8:	47b8      	blx	r7
 8014cda:	3001      	adds	r0, #1
 8014cdc:	f43f af27 	beq.w	8014b2e <_printf_float+0xc2>
 8014ce0:	f108 0801 	add.w	r8, r8, #1
 8014ce4:	e7e6      	b.n	8014cb4 <_printf_float+0x248>
 8014ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	dc39      	bgt.n	8014d60 <_printf_float+0x2f4>
 8014cec:	4a1b      	ldr	r2, [pc, #108]	; (8014d5c <_printf_float+0x2f0>)
 8014cee:	2301      	movs	r3, #1
 8014cf0:	4631      	mov	r1, r6
 8014cf2:	4628      	mov	r0, r5
 8014cf4:	47b8      	blx	r7
 8014cf6:	3001      	adds	r0, #1
 8014cf8:	f43f af19 	beq.w	8014b2e <_printf_float+0xc2>
 8014cfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014d00:	4313      	orrs	r3, r2
 8014d02:	d102      	bne.n	8014d0a <_printf_float+0x29e>
 8014d04:	6823      	ldr	r3, [r4, #0]
 8014d06:	07d9      	lsls	r1, r3, #31
 8014d08:	d5d8      	bpl.n	8014cbc <_printf_float+0x250>
 8014d0a:	ee18 3a10 	vmov	r3, s16
 8014d0e:	4652      	mov	r2, sl
 8014d10:	4631      	mov	r1, r6
 8014d12:	4628      	mov	r0, r5
 8014d14:	47b8      	blx	r7
 8014d16:	3001      	adds	r0, #1
 8014d18:	f43f af09 	beq.w	8014b2e <_printf_float+0xc2>
 8014d1c:	f04f 0900 	mov.w	r9, #0
 8014d20:	f104 0a1a 	add.w	sl, r4, #26
 8014d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d26:	425b      	negs	r3, r3
 8014d28:	454b      	cmp	r3, r9
 8014d2a:	dc01      	bgt.n	8014d30 <_printf_float+0x2c4>
 8014d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d2e:	e792      	b.n	8014c56 <_printf_float+0x1ea>
 8014d30:	2301      	movs	r3, #1
 8014d32:	4652      	mov	r2, sl
 8014d34:	4631      	mov	r1, r6
 8014d36:	4628      	mov	r0, r5
 8014d38:	47b8      	blx	r7
 8014d3a:	3001      	adds	r0, #1
 8014d3c:	f43f aef7 	beq.w	8014b2e <_printf_float+0xc2>
 8014d40:	f109 0901 	add.w	r9, r9, #1
 8014d44:	e7ee      	b.n	8014d24 <_printf_float+0x2b8>
 8014d46:	bf00      	nop
 8014d48:	7fefffff 	.word	0x7fefffff
 8014d4c:	08017a00 	.word	0x08017a00
 8014d50:	08017a04 	.word	0x08017a04
 8014d54:	08017a0c 	.word	0x08017a0c
 8014d58:	08017a08 	.word	0x08017a08
 8014d5c:	08017a10 	.word	0x08017a10
 8014d60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014d62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014d64:	429a      	cmp	r2, r3
 8014d66:	bfa8      	it	ge
 8014d68:	461a      	movge	r2, r3
 8014d6a:	2a00      	cmp	r2, #0
 8014d6c:	4691      	mov	r9, r2
 8014d6e:	dc37      	bgt.n	8014de0 <_printf_float+0x374>
 8014d70:	f04f 0b00 	mov.w	fp, #0
 8014d74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014d78:	f104 021a 	add.w	r2, r4, #26
 8014d7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014d7e:	9305      	str	r3, [sp, #20]
 8014d80:	eba3 0309 	sub.w	r3, r3, r9
 8014d84:	455b      	cmp	r3, fp
 8014d86:	dc33      	bgt.n	8014df0 <_printf_float+0x384>
 8014d88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014d8c:	429a      	cmp	r2, r3
 8014d8e:	db3b      	blt.n	8014e08 <_printf_float+0x39c>
 8014d90:	6823      	ldr	r3, [r4, #0]
 8014d92:	07da      	lsls	r2, r3, #31
 8014d94:	d438      	bmi.n	8014e08 <_printf_float+0x39c>
 8014d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d98:	9a05      	ldr	r2, [sp, #20]
 8014d9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014d9c:	1a9a      	subs	r2, r3, r2
 8014d9e:	eba3 0901 	sub.w	r9, r3, r1
 8014da2:	4591      	cmp	r9, r2
 8014da4:	bfa8      	it	ge
 8014da6:	4691      	movge	r9, r2
 8014da8:	f1b9 0f00 	cmp.w	r9, #0
 8014dac:	dc35      	bgt.n	8014e1a <_printf_float+0x3ae>
 8014dae:	f04f 0800 	mov.w	r8, #0
 8014db2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014db6:	f104 0a1a 	add.w	sl, r4, #26
 8014dba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014dbe:	1a9b      	subs	r3, r3, r2
 8014dc0:	eba3 0309 	sub.w	r3, r3, r9
 8014dc4:	4543      	cmp	r3, r8
 8014dc6:	f77f af79 	ble.w	8014cbc <_printf_float+0x250>
 8014dca:	2301      	movs	r3, #1
 8014dcc:	4652      	mov	r2, sl
 8014dce:	4631      	mov	r1, r6
 8014dd0:	4628      	mov	r0, r5
 8014dd2:	47b8      	blx	r7
 8014dd4:	3001      	adds	r0, #1
 8014dd6:	f43f aeaa 	beq.w	8014b2e <_printf_float+0xc2>
 8014dda:	f108 0801 	add.w	r8, r8, #1
 8014dde:	e7ec      	b.n	8014dba <_printf_float+0x34e>
 8014de0:	4613      	mov	r3, r2
 8014de2:	4631      	mov	r1, r6
 8014de4:	4642      	mov	r2, r8
 8014de6:	4628      	mov	r0, r5
 8014de8:	47b8      	blx	r7
 8014dea:	3001      	adds	r0, #1
 8014dec:	d1c0      	bne.n	8014d70 <_printf_float+0x304>
 8014dee:	e69e      	b.n	8014b2e <_printf_float+0xc2>
 8014df0:	2301      	movs	r3, #1
 8014df2:	4631      	mov	r1, r6
 8014df4:	4628      	mov	r0, r5
 8014df6:	9205      	str	r2, [sp, #20]
 8014df8:	47b8      	blx	r7
 8014dfa:	3001      	adds	r0, #1
 8014dfc:	f43f ae97 	beq.w	8014b2e <_printf_float+0xc2>
 8014e00:	9a05      	ldr	r2, [sp, #20]
 8014e02:	f10b 0b01 	add.w	fp, fp, #1
 8014e06:	e7b9      	b.n	8014d7c <_printf_float+0x310>
 8014e08:	ee18 3a10 	vmov	r3, s16
 8014e0c:	4652      	mov	r2, sl
 8014e0e:	4631      	mov	r1, r6
 8014e10:	4628      	mov	r0, r5
 8014e12:	47b8      	blx	r7
 8014e14:	3001      	adds	r0, #1
 8014e16:	d1be      	bne.n	8014d96 <_printf_float+0x32a>
 8014e18:	e689      	b.n	8014b2e <_printf_float+0xc2>
 8014e1a:	9a05      	ldr	r2, [sp, #20]
 8014e1c:	464b      	mov	r3, r9
 8014e1e:	4442      	add	r2, r8
 8014e20:	4631      	mov	r1, r6
 8014e22:	4628      	mov	r0, r5
 8014e24:	47b8      	blx	r7
 8014e26:	3001      	adds	r0, #1
 8014e28:	d1c1      	bne.n	8014dae <_printf_float+0x342>
 8014e2a:	e680      	b.n	8014b2e <_printf_float+0xc2>
 8014e2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014e2e:	2a01      	cmp	r2, #1
 8014e30:	dc01      	bgt.n	8014e36 <_printf_float+0x3ca>
 8014e32:	07db      	lsls	r3, r3, #31
 8014e34:	d538      	bpl.n	8014ea8 <_printf_float+0x43c>
 8014e36:	2301      	movs	r3, #1
 8014e38:	4642      	mov	r2, r8
 8014e3a:	4631      	mov	r1, r6
 8014e3c:	4628      	mov	r0, r5
 8014e3e:	47b8      	blx	r7
 8014e40:	3001      	adds	r0, #1
 8014e42:	f43f ae74 	beq.w	8014b2e <_printf_float+0xc2>
 8014e46:	ee18 3a10 	vmov	r3, s16
 8014e4a:	4652      	mov	r2, sl
 8014e4c:	4631      	mov	r1, r6
 8014e4e:	4628      	mov	r0, r5
 8014e50:	47b8      	blx	r7
 8014e52:	3001      	adds	r0, #1
 8014e54:	f43f ae6b 	beq.w	8014b2e <_printf_float+0xc2>
 8014e58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014e5c:	2200      	movs	r2, #0
 8014e5e:	2300      	movs	r3, #0
 8014e60:	f7eb fe4a 	bl	8000af8 <__aeabi_dcmpeq>
 8014e64:	b9d8      	cbnz	r0, 8014e9e <_printf_float+0x432>
 8014e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e68:	f108 0201 	add.w	r2, r8, #1
 8014e6c:	3b01      	subs	r3, #1
 8014e6e:	4631      	mov	r1, r6
 8014e70:	4628      	mov	r0, r5
 8014e72:	47b8      	blx	r7
 8014e74:	3001      	adds	r0, #1
 8014e76:	d10e      	bne.n	8014e96 <_printf_float+0x42a>
 8014e78:	e659      	b.n	8014b2e <_printf_float+0xc2>
 8014e7a:	2301      	movs	r3, #1
 8014e7c:	4652      	mov	r2, sl
 8014e7e:	4631      	mov	r1, r6
 8014e80:	4628      	mov	r0, r5
 8014e82:	47b8      	blx	r7
 8014e84:	3001      	adds	r0, #1
 8014e86:	f43f ae52 	beq.w	8014b2e <_printf_float+0xc2>
 8014e8a:	f108 0801 	add.w	r8, r8, #1
 8014e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e90:	3b01      	subs	r3, #1
 8014e92:	4543      	cmp	r3, r8
 8014e94:	dcf1      	bgt.n	8014e7a <_printf_float+0x40e>
 8014e96:	464b      	mov	r3, r9
 8014e98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014e9c:	e6dc      	b.n	8014c58 <_printf_float+0x1ec>
 8014e9e:	f04f 0800 	mov.w	r8, #0
 8014ea2:	f104 0a1a 	add.w	sl, r4, #26
 8014ea6:	e7f2      	b.n	8014e8e <_printf_float+0x422>
 8014ea8:	2301      	movs	r3, #1
 8014eaa:	4642      	mov	r2, r8
 8014eac:	e7df      	b.n	8014e6e <_printf_float+0x402>
 8014eae:	2301      	movs	r3, #1
 8014eb0:	464a      	mov	r2, r9
 8014eb2:	4631      	mov	r1, r6
 8014eb4:	4628      	mov	r0, r5
 8014eb6:	47b8      	blx	r7
 8014eb8:	3001      	adds	r0, #1
 8014eba:	f43f ae38 	beq.w	8014b2e <_printf_float+0xc2>
 8014ebe:	f108 0801 	add.w	r8, r8, #1
 8014ec2:	68e3      	ldr	r3, [r4, #12]
 8014ec4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014ec6:	1a5b      	subs	r3, r3, r1
 8014ec8:	4543      	cmp	r3, r8
 8014eca:	dcf0      	bgt.n	8014eae <_printf_float+0x442>
 8014ecc:	e6fa      	b.n	8014cc4 <_printf_float+0x258>
 8014ece:	f04f 0800 	mov.w	r8, #0
 8014ed2:	f104 0919 	add.w	r9, r4, #25
 8014ed6:	e7f4      	b.n	8014ec2 <_printf_float+0x456>

08014ed8 <_printf_common>:
 8014ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014edc:	4616      	mov	r6, r2
 8014ede:	4699      	mov	r9, r3
 8014ee0:	688a      	ldr	r2, [r1, #8]
 8014ee2:	690b      	ldr	r3, [r1, #16]
 8014ee4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014ee8:	4293      	cmp	r3, r2
 8014eea:	bfb8      	it	lt
 8014eec:	4613      	movlt	r3, r2
 8014eee:	6033      	str	r3, [r6, #0]
 8014ef0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014ef4:	4607      	mov	r7, r0
 8014ef6:	460c      	mov	r4, r1
 8014ef8:	b10a      	cbz	r2, 8014efe <_printf_common+0x26>
 8014efa:	3301      	adds	r3, #1
 8014efc:	6033      	str	r3, [r6, #0]
 8014efe:	6823      	ldr	r3, [r4, #0]
 8014f00:	0699      	lsls	r1, r3, #26
 8014f02:	bf42      	ittt	mi
 8014f04:	6833      	ldrmi	r3, [r6, #0]
 8014f06:	3302      	addmi	r3, #2
 8014f08:	6033      	strmi	r3, [r6, #0]
 8014f0a:	6825      	ldr	r5, [r4, #0]
 8014f0c:	f015 0506 	ands.w	r5, r5, #6
 8014f10:	d106      	bne.n	8014f20 <_printf_common+0x48>
 8014f12:	f104 0a19 	add.w	sl, r4, #25
 8014f16:	68e3      	ldr	r3, [r4, #12]
 8014f18:	6832      	ldr	r2, [r6, #0]
 8014f1a:	1a9b      	subs	r3, r3, r2
 8014f1c:	42ab      	cmp	r3, r5
 8014f1e:	dc26      	bgt.n	8014f6e <_printf_common+0x96>
 8014f20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014f24:	1e13      	subs	r3, r2, #0
 8014f26:	6822      	ldr	r2, [r4, #0]
 8014f28:	bf18      	it	ne
 8014f2a:	2301      	movne	r3, #1
 8014f2c:	0692      	lsls	r2, r2, #26
 8014f2e:	d42b      	bmi.n	8014f88 <_printf_common+0xb0>
 8014f30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014f34:	4649      	mov	r1, r9
 8014f36:	4638      	mov	r0, r7
 8014f38:	47c0      	blx	r8
 8014f3a:	3001      	adds	r0, #1
 8014f3c:	d01e      	beq.n	8014f7c <_printf_common+0xa4>
 8014f3e:	6823      	ldr	r3, [r4, #0]
 8014f40:	68e5      	ldr	r5, [r4, #12]
 8014f42:	6832      	ldr	r2, [r6, #0]
 8014f44:	f003 0306 	and.w	r3, r3, #6
 8014f48:	2b04      	cmp	r3, #4
 8014f4a:	bf08      	it	eq
 8014f4c:	1aad      	subeq	r5, r5, r2
 8014f4e:	68a3      	ldr	r3, [r4, #8]
 8014f50:	6922      	ldr	r2, [r4, #16]
 8014f52:	bf0c      	ite	eq
 8014f54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014f58:	2500      	movne	r5, #0
 8014f5a:	4293      	cmp	r3, r2
 8014f5c:	bfc4      	itt	gt
 8014f5e:	1a9b      	subgt	r3, r3, r2
 8014f60:	18ed      	addgt	r5, r5, r3
 8014f62:	2600      	movs	r6, #0
 8014f64:	341a      	adds	r4, #26
 8014f66:	42b5      	cmp	r5, r6
 8014f68:	d11a      	bne.n	8014fa0 <_printf_common+0xc8>
 8014f6a:	2000      	movs	r0, #0
 8014f6c:	e008      	b.n	8014f80 <_printf_common+0xa8>
 8014f6e:	2301      	movs	r3, #1
 8014f70:	4652      	mov	r2, sl
 8014f72:	4649      	mov	r1, r9
 8014f74:	4638      	mov	r0, r7
 8014f76:	47c0      	blx	r8
 8014f78:	3001      	adds	r0, #1
 8014f7a:	d103      	bne.n	8014f84 <_printf_common+0xac>
 8014f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f84:	3501      	adds	r5, #1
 8014f86:	e7c6      	b.n	8014f16 <_printf_common+0x3e>
 8014f88:	18e1      	adds	r1, r4, r3
 8014f8a:	1c5a      	adds	r2, r3, #1
 8014f8c:	2030      	movs	r0, #48	; 0x30
 8014f8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014f92:	4422      	add	r2, r4
 8014f94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014f98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014f9c:	3302      	adds	r3, #2
 8014f9e:	e7c7      	b.n	8014f30 <_printf_common+0x58>
 8014fa0:	2301      	movs	r3, #1
 8014fa2:	4622      	mov	r2, r4
 8014fa4:	4649      	mov	r1, r9
 8014fa6:	4638      	mov	r0, r7
 8014fa8:	47c0      	blx	r8
 8014faa:	3001      	adds	r0, #1
 8014fac:	d0e6      	beq.n	8014f7c <_printf_common+0xa4>
 8014fae:	3601      	adds	r6, #1
 8014fb0:	e7d9      	b.n	8014f66 <_printf_common+0x8e>
	...

08014fb4 <_printf_i>:
 8014fb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014fb8:	7e0f      	ldrb	r7, [r1, #24]
 8014fba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014fbc:	2f78      	cmp	r7, #120	; 0x78
 8014fbe:	4691      	mov	r9, r2
 8014fc0:	4680      	mov	r8, r0
 8014fc2:	460c      	mov	r4, r1
 8014fc4:	469a      	mov	sl, r3
 8014fc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014fca:	d807      	bhi.n	8014fdc <_printf_i+0x28>
 8014fcc:	2f62      	cmp	r7, #98	; 0x62
 8014fce:	d80a      	bhi.n	8014fe6 <_printf_i+0x32>
 8014fd0:	2f00      	cmp	r7, #0
 8014fd2:	f000 80d8 	beq.w	8015186 <_printf_i+0x1d2>
 8014fd6:	2f58      	cmp	r7, #88	; 0x58
 8014fd8:	f000 80a3 	beq.w	8015122 <_printf_i+0x16e>
 8014fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014fe0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014fe4:	e03a      	b.n	801505c <_printf_i+0xa8>
 8014fe6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014fea:	2b15      	cmp	r3, #21
 8014fec:	d8f6      	bhi.n	8014fdc <_printf_i+0x28>
 8014fee:	a101      	add	r1, pc, #4	; (adr r1, 8014ff4 <_printf_i+0x40>)
 8014ff0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014ff4:	0801504d 	.word	0x0801504d
 8014ff8:	08015061 	.word	0x08015061
 8014ffc:	08014fdd 	.word	0x08014fdd
 8015000:	08014fdd 	.word	0x08014fdd
 8015004:	08014fdd 	.word	0x08014fdd
 8015008:	08014fdd 	.word	0x08014fdd
 801500c:	08015061 	.word	0x08015061
 8015010:	08014fdd 	.word	0x08014fdd
 8015014:	08014fdd 	.word	0x08014fdd
 8015018:	08014fdd 	.word	0x08014fdd
 801501c:	08014fdd 	.word	0x08014fdd
 8015020:	0801516d 	.word	0x0801516d
 8015024:	08015091 	.word	0x08015091
 8015028:	0801514f 	.word	0x0801514f
 801502c:	08014fdd 	.word	0x08014fdd
 8015030:	08014fdd 	.word	0x08014fdd
 8015034:	0801518f 	.word	0x0801518f
 8015038:	08014fdd 	.word	0x08014fdd
 801503c:	08015091 	.word	0x08015091
 8015040:	08014fdd 	.word	0x08014fdd
 8015044:	08014fdd 	.word	0x08014fdd
 8015048:	08015157 	.word	0x08015157
 801504c:	682b      	ldr	r3, [r5, #0]
 801504e:	1d1a      	adds	r2, r3, #4
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	602a      	str	r2, [r5, #0]
 8015054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015058:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801505c:	2301      	movs	r3, #1
 801505e:	e0a3      	b.n	80151a8 <_printf_i+0x1f4>
 8015060:	6820      	ldr	r0, [r4, #0]
 8015062:	6829      	ldr	r1, [r5, #0]
 8015064:	0606      	lsls	r6, r0, #24
 8015066:	f101 0304 	add.w	r3, r1, #4
 801506a:	d50a      	bpl.n	8015082 <_printf_i+0xce>
 801506c:	680e      	ldr	r6, [r1, #0]
 801506e:	602b      	str	r3, [r5, #0]
 8015070:	2e00      	cmp	r6, #0
 8015072:	da03      	bge.n	801507c <_printf_i+0xc8>
 8015074:	232d      	movs	r3, #45	; 0x2d
 8015076:	4276      	negs	r6, r6
 8015078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801507c:	485e      	ldr	r0, [pc, #376]	; (80151f8 <_printf_i+0x244>)
 801507e:	230a      	movs	r3, #10
 8015080:	e019      	b.n	80150b6 <_printf_i+0x102>
 8015082:	680e      	ldr	r6, [r1, #0]
 8015084:	602b      	str	r3, [r5, #0]
 8015086:	f010 0f40 	tst.w	r0, #64	; 0x40
 801508a:	bf18      	it	ne
 801508c:	b236      	sxthne	r6, r6
 801508e:	e7ef      	b.n	8015070 <_printf_i+0xbc>
 8015090:	682b      	ldr	r3, [r5, #0]
 8015092:	6820      	ldr	r0, [r4, #0]
 8015094:	1d19      	adds	r1, r3, #4
 8015096:	6029      	str	r1, [r5, #0]
 8015098:	0601      	lsls	r1, r0, #24
 801509a:	d501      	bpl.n	80150a0 <_printf_i+0xec>
 801509c:	681e      	ldr	r6, [r3, #0]
 801509e:	e002      	b.n	80150a6 <_printf_i+0xf2>
 80150a0:	0646      	lsls	r6, r0, #25
 80150a2:	d5fb      	bpl.n	801509c <_printf_i+0xe8>
 80150a4:	881e      	ldrh	r6, [r3, #0]
 80150a6:	4854      	ldr	r0, [pc, #336]	; (80151f8 <_printf_i+0x244>)
 80150a8:	2f6f      	cmp	r7, #111	; 0x6f
 80150aa:	bf0c      	ite	eq
 80150ac:	2308      	moveq	r3, #8
 80150ae:	230a      	movne	r3, #10
 80150b0:	2100      	movs	r1, #0
 80150b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80150b6:	6865      	ldr	r5, [r4, #4]
 80150b8:	60a5      	str	r5, [r4, #8]
 80150ba:	2d00      	cmp	r5, #0
 80150bc:	bfa2      	ittt	ge
 80150be:	6821      	ldrge	r1, [r4, #0]
 80150c0:	f021 0104 	bicge.w	r1, r1, #4
 80150c4:	6021      	strge	r1, [r4, #0]
 80150c6:	b90e      	cbnz	r6, 80150cc <_printf_i+0x118>
 80150c8:	2d00      	cmp	r5, #0
 80150ca:	d04d      	beq.n	8015168 <_printf_i+0x1b4>
 80150cc:	4615      	mov	r5, r2
 80150ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80150d2:	fb03 6711 	mls	r7, r3, r1, r6
 80150d6:	5dc7      	ldrb	r7, [r0, r7]
 80150d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80150dc:	4637      	mov	r7, r6
 80150de:	42bb      	cmp	r3, r7
 80150e0:	460e      	mov	r6, r1
 80150e2:	d9f4      	bls.n	80150ce <_printf_i+0x11a>
 80150e4:	2b08      	cmp	r3, #8
 80150e6:	d10b      	bne.n	8015100 <_printf_i+0x14c>
 80150e8:	6823      	ldr	r3, [r4, #0]
 80150ea:	07de      	lsls	r6, r3, #31
 80150ec:	d508      	bpl.n	8015100 <_printf_i+0x14c>
 80150ee:	6923      	ldr	r3, [r4, #16]
 80150f0:	6861      	ldr	r1, [r4, #4]
 80150f2:	4299      	cmp	r1, r3
 80150f4:	bfde      	ittt	le
 80150f6:	2330      	movle	r3, #48	; 0x30
 80150f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80150fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8015100:	1b52      	subs	r2, r2, r5
 8015102:	6122      	str	r2, [r4, #16]
 8015104:	f8cd a000 	str.w	sl, [sp]
 8015108:	464b      	mov	r3, r9
 801510a:	aa03      	add	r2, sp, #12
 801510c:	4621      	mov	r1, r4
 801510e:	4640      	mov	r0, r8
 8015110:	f7ff fee2 	bl	8014ed8 <_printf_common>
 8015114:	3001      	adds	r0, #1
 8015116:	d14c      	bne.n	80151b2 <_printf_i+0x1fe>
 8015118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801511c:	b004      	add	sp, #16
 801511e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015122:	4835      	ldr	r0, [pc, #212]	; (80151f8 <_printf_i+0x244>)
 8015124:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015128:	6829      	ldr	r1, [r5, #0]
 801512a:	6823      	ldr	r3, [r4, #0]
 801512c:	f851 6b04 	ldr.w	r6, [r1], #4
 8015130:	6029      	str	r1, [r5, #0]
 8015132:	061d      	lsls	r5, r3, #24
 8015134:	d514      	bpl.n	8015160 <_printf_i+0x1ac>
 8015136:	07df      	lsls	r7, r3, #31
 8015138:	bf44      	itt	mi
 801513a:	f043 0320 	orrmi.w	r3, r3, #32
 801513e:	6023      	strmi	r3, [r4, #0]
 8015140:	b91e      	cbnz	r6, 801514a <_printf_i+0x196>
 8015142:	6823      	ldr	r3, [r4, #0]
 8015144:	f023 0320 	bic.w	r3, r3, #32
 8015148:	6023      	str	r3, [r4, #0]
 801514a:	2310      	movs	r3, #16
 801514c:	e7b0      	b.n	80150b0 <_printf_i+0xfc>
 801514e:	6823      	ldr	r3, [r4, #0]
 8015150:	f043 0320 	orr.w	r3, r3, #32
 8015154:	6023      	str	r3, [r4, #0]
 8015156:	2378      	movs	r3, #120	; 0x78
 8015158:	4828      	ldr	r0, [pc, #160]	; (80151fc <_printf_i+0x248>)
 801515a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801515e:	e7e3      	b.n	8015128 <_printf_i+0x174>
 8015160:	0659      	lsls	r1, r3, #25
 8015162:	bf48      	it	mi
 8015164:	b2b6      	uxthmi	r6, r6
 8015166:	e7e6      	b.n	8015136 <_printf_i+0x182>
 8015168:	4615      	mov	r5, r2
 801516a:	e7bb      	b.n	80150e4 <_printf_i+0x130>
 801516c:	682b      	ldr	r3, [r5, #0]
 801516e:	6826      	ldr	r6, [r4, #0]
 8015170:	6961      	ldr	r1, [r4, #20]
 8015172:	1d18      	adds	r0, r3, #4
 8015174:	6028      	str	r0, [r5, #0]
 8015176:	0635      	lsls	r5, r6, #24
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	d501      	bpl.n	8015180 <_printf_i+0x1cc>
 801517c:	6019      	str	r1, [r3, #0]
 801517e:	e002      	b.n	8015186 <_printf_i+0x1d2>
 8015180:	0670      	lsls	r0, r6, #25
 8015182:	d5fb      	bpl.n	801517c <_printf_i+0x1c8>
 8015184:	8019      	strh	r1, [r3, #0]
 8015186:	2300      	movs	r3, #0
 8015188:	6123      	str	r3, [r4, #16]
 801518a:	4615      	mov	r5, r2
 801518c:	e7ba      	b.n	8015104 <_printf_i+0x150>
 801518e:	682b      	ldr	r3, [r5, #0]
 8015190:	1d1a      	adds	r2, r3, #4
 8015192:	602a      	str	r2, [r5, #0]
 8015194:	681d      	ldr	r5, [r3, #0]
 8015196:	6862      	ldr	r2, [r4, #4]
 8015198:	2100      	movs	r1, #0
 801519a:	4628      	mov	r0, r5
 801519c:	f7eb f838 	bl	8000210 <memchr>
 80151a0:	b108      	cbz	r0, 80151a6 <_printf_i+0x1f2>
 80151a2:	1b40      	subs	r0, r0, r5
 80151a4:	6060      	str	r0, [r4, #4]
 80151a6:	6863      	ldr	r3, [r4, #4]
 80151a8:	6123      	str	r3, [r4, #16]
 80151aa:	2300      	movs	r3, #0
 80151ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80151b0:	e7a8      	b.n	8015104 <_printf_i+0x150>
 80151b2:	6923      	ldr	r3, [r4, #16]
 80151b4:	462a      	mov	r2, r5
 80151b6:	4649      	mov	r1, r9
 80151b8:	4640      	mov	r0, r8
 80151ba:	47d0      	blx	sl
 80151bc:	3001      	adds	r0, #1
 80151be:	d0ab      	beq.n	8015118 <_printf_i+0x164>
 80151c0:	6823      	ldr	r3, [r4, #0]
 80151c2:	079b      	lsls	r3, r3, #30
 80151c4:	d413      	bmi.n	80151ee <_printf_i+0x23a>
 80151c6:	68e0      	ldr	r0, [r4, #12]
 80151c8:	9b03      	ldr	r3, [sp, #12]
 80151ca:	4298      	cmp	r0, r3
 80151cc:	bfb8      	it	lt
 80151ce:	4618      	movlt	r0, r3
 80151d0:	e7a4      	b.n	801511c <_printf_i+0x168>
 80151d2:	2301      	movs	r3, #1
 80151d4:	4632      	mov	r2, r6
 80151d6:	4649      	mov	r1, r9
 80151d8:	4640      	mov	r0, r8
 80151da:	47d0      	blx	sl
 80151dc:	3001      	adds	r0, #1
 80151de:	d09b      	beq.n	8015118 <_printf_i+0x164>
 80151e0:	3501      	adds	r5, #1
 80151e2:	68e3      	ldr	r3, [r4, #12]
 80151e4:	9903      	ldr	r1, [sp, #12]
 80151e6:	1a5b      	subs	r3, r3, r1
 80151e8:	42ab      	cmp	r3, r5
 80151ea:	dcf2      	bgt.n	80151d2 <_printf_i+0x21e>
 80151ec:	e7eb      	b.n	80151c6 <_printf_i+0x212>
 80151ee:	2500      	movs	r5, #0
 80151f0:	f104 0619 	add.w	r6, r4, #25
 80151f4:	e7f5      	b.n	80151e2 <_printf_i+0x22e>
 80151f6:	bf00      	nop
 80151f8:	08017a12 	.word	0x08017a12
 80151fc:	08017a23 	.word	0x08017a23

08015200 <iprintf>:
 8015200:	b40f      	push	{r0, r1, r2, r3}
 8015202:	4b0a      	ldr	r3, [pc, #40]	; (801522c <iprintf+0x2c>)
 8015204:	b513      	push	{r0, r1, r4, lr}
 8015206:	681c      	ldr	r4, [r3, #0]
 8015208:	b124      	cbz	r4, 8015214 <iprintf+0x14>
 801520a:	69a3      	ldr	r3, [r4, #24]
 801520c:	b913      	cbnz	r3, 8015214 <iprintf+0x14>
 801520e:	4620      	mov	r0, r4
 8015210:	f000 ff30 	bl	8016074 <__sinit>
 8015214:	ab05      	add	r3, sp, #20
 8015216:	9a04      	ldr	r2, [sp, #16]
 8015218:	68a1      	ldr	r1, [r4, #8]
 801521a:	9301      	str	r3, [sp, #4]
 801521c:	4620      	mov	r0, r4
 801521e:	f001 fd1f 	bl	8016c60 <_vfiprintf_r>
 8015222:	b002      	add	sp, #8
 8015224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015228:	b004      	add	sp, #16
 801522a:	4770      	bx	lr
 801522c:	20000184 	.word	0x20000184

08015230 <_sbrk_r>:
 8015230:	b538      	push	{r3, r4, r5, lr}
 8015232:	4d06      	ldr	r5, [pc, #24]	; (801524c <_sbrk_r+0x1c>)
 8015234:	2300      	movs	r3, #0
 8015236:	4604      	mov	r4, r0
 8015238:	4608      	mov	r0, r1
 801523a:	602b      	str	r3, [r5, #0]
 801523c:	f002 f9b8 	bl	80175b0 <_sbrk>
 8015240:	1c43      	adds	r3, r0, #1
 8015242:	d102      	bne.n	801524a <_sbrk_r+0x1a>
 8015244:	682b      	ldr	r3, [r5, #0]
 8015246:	b103      	cbz	r3, 801524a <_sbrk_r+0x1a>
 8015248:	6023      	str	r3, [r4, #0]
 801524a:	bd38      	pop	{r3, r4, r5, pc}
 801524c:	20002f68 	.word	0x20002f68

08015250 <siprintf>:
 8015250:	b40e      	push	{r1, r2, r3}
 8015252:	b500      	push	{lr}
 8015254:	b09c      	sub	sp, #112	; 0x70
 8015256:	ab1d      	add	r3, sp, #116	; 0x74
 8015258:	9002      	str	r0, [sp, #8]
 801525a:	9006      	str	r0, [sp, #24]
 801525c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015260:	4809      	ldr	r0, [pc, #36]	; (8015288 <siprintf+0x38>)
 8015262:	9107      	str	r1, [sp, #28]
 8015264:	9104      	str	r1, [sp, #16]
 8015266:	4909      	ldr	r1, [pc, #36]	; (801528c <siprintf+0x3c>)
 8015268:	f853 2b04 	ldr.w	r2, [r3], #4
 801526c:	9105      	str	r1, [sp, #20]
 801526e:	6800      	ldr	r0, [r0, #0]
 8015270:	9301      	str	r3, [sp, #4]
 8015272:	a902      	add	r1, sp, #8
 8015274:	f001 fbca 	bl	8016a0c <_svfiprintf_r>
 8015278:	9b02      	ldr	r3, [sp, #8]
 801527a:	2200      	movs	r2, #0
 801527c:	701a      	strb	r2, [r3, #0]
 801527e:	b01c      	add	sp, #112	; 0x70
 8015280:	f85d eb04 	ldr.w	lr, [sp], #4
 8015284:	b003      	add	sp, #12
 8015286:	4770      	bx	lr
 8015288:	20000184 	.word	0x20000184
 801528c:	ffff0208 	.word	0xffff0208

08015290 <__assert_func>:
 8015290:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015292:	4614      	mov	r4, r2
 8015294:	461a      	mov	r2, r3
 8015296:	4b09      	ldr	r3, [pc, #36]	; (80152bc <__assert_func+0x2c>)
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	4605      	mov	r5, r0
 801529c:	68d8      	ldr	r0, [r3, #12]
 801529e:	b14c      	cbz	r4, 80152b4 <__assert_func+0x24>
 80152a0:	4b07      	ldr	r3, [pc, #28]	; (80152c0 <__assert_func+0x30>)
 80152a2:	9100      	str	r1, [sp, #0]
 80152a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80152a8:	4906      	ldr	r1, [pc, #24]	; (80152c4 <__assert_func+0x34>)
 80152aa:	462b      	mov	r3, r5
 80152ac:	f000 ff60 	bl	8016170 <fiprintf>
 80152b0:	f001 ff2a 	bl	8017108 <abort>
 80152b4:	4b04      	ldr	r3, [pc, #16]	; (80152c8 <__assert_func+0x38>)
 80152b6:	461c      	mov	r4, r3
 80152b8:	e7f3      	b.n	80152a2 <__assert_func+0x12>
 80152ba:	bf00      	nop
 80152bc:	20000184 	.word	0x20000184
 80152c0:	08017a34 	.word	0x08017a34
 80152c4:	08017a41 	.word	0x08017a41
 80152c8:	08017a6f 	.word	0x08017a6f

080152cc <quorem>:
 80152cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152d0:	6903      	ldr	r3, [r0, #16]
 80152d2:	690c      	ldr	r4, [r1, #16]
 80152d4:	42a3      	cmp	r3, r4
 80152d6:	4607      	mov	r7, r0
 80152d8:	f2c0 8081 	blt.w	80153de <quorem+0x112>
 80152dc:	3c01      	subs	r4, #1
 80152de:	f101 0814 	add.w	r8, r1, #20
 80152e2:	f100 0514 	add.w	r5, r0, #20
 80152e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80152ea:	9301      	str	r3, [sp, #4]
 80152ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80152f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80152f4:	3301      	adds	r3, #1
 80152f6:	429a      	cmp	r2, r3
 80152f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80152fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015300:	fbb2 f6f3 	udiv	r6, r2, r3
 8015304:	d331      	bcc.n	801536a <quorem+0x9e>
 8015306:	f04f 0e00 	mov.w	lr, #0
 801530a:	4640      	mov	r0, r8
 801530c:	46ac      	mov	ip, r5
 801530e:	46f2      	mov	sl, lr
 8015310:	f850 2b04 	ldr.w	r2, [r0], #4
 8015314:	b293      	uxth	r3, r2
 8015316:	fb06 e303 	mla	r3, r6, r3, lr
 801531a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801531e:	b29b      	uxth	r3, r3
 8015320:	ebaa 0303 	sub.w	r3, sl, r3
 8015324:	f8dc a000 	ldr.w	sl, [ip]
 8015328:	0c12      	lsrs	r2, r2, #16
 801532a:	fa13 f38a 	uxtah	r3, r3, sl
 801532e:	fb06 e202 	mla	r2, r6, r2, lr
 8015332:	9300      	str	r3, [sp, #0]
 8015334:	9b00      	ldr	r3, [sp, #0]
 8015336:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801533a:	b292      	uxth	r2, r2
 801533c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8015340:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015344:	f8bd 3000 	ldrh.w	r3, [sp]
 8015348:	4581      	cmp	r9, r0
 801534a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801534e:	f84c 3b04 	str.w	r3, [ip], #4
 8015352:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015356:	d2db      	bcs.n	8015310 <quorem+0x44>
 8015358:	f855 300b 	ldr.w	r3, [r5, fp]
 801535c:	b92b      	cbnz	r3, 801536a <quorem+0x9e>
 801535e:	9b01      	ldr	r3, [sp, #4]
 8015360:	3b04      	subs	r3, #4
 8015362:	429d      	cmp	r5, r3
 8015364:	461a      	mov	r2, r3
 8015366:	d32e      	bcc.n	80153c6 <quorem+0xfa>
 8015368:	613c      	str	r4, [r7, #16]
 801536a:	4638      	mov	r0, r7
 801536c:	f001 f9da 	bl	8016724 <__mcmp>
 8015370:	2800      	cmp	r0, #0
 8015372:	db24      	blt.n	80153be <quorem+0xf2>
 8015374:	3601      	adds	r6, #1
 8015376:	4628      	mov	r0, r5
 8015378:	f04f 0c00 	mov.w	ip, #0
 801537c:	f858 2b04 	ldr.w	r2, [r8], #4
 8015380:	f8d0 e000 	ldr.w	lr, [r0]
 8015384:	b293      	uxth	r3, r2
 8015386:	ebac 0303 	sub.w	r3, ip, r3
 801538a:	0c12      	lsrs	r2, r2, #16
 801538c:	fa13 f38e 	uxtah	r3, r3, lr
 8015390:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015394:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015398:	b29b      	uxth	r3, r3
 801539a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801539e:	45c1      	cmp	r9, r8
 80153a0:	f840 3b04 	str.w	r3, [r0], #4
 80153a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80153a8:	d2e8      	bcs.n	801537c <quorem+0xb0>
 80153aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80153ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80153b2:	b922      	cbnz	r2, 80153be <quorem+0xf2>
 80153b4:	3b04      	subs	r3, #4
 80153b6:	429d      	cmp	r5, r3
 80153b8:	461a      	mov	r2, r3
 80153ba:	d30a      	bcc.n	80153d2 <quorem+0x106>
 80153bc:	613c      	str	r4, [r7, #16]
 80153be:	4630      	mov	r0, r6
 80153c0:	b003      	add	sp, #12
 80153c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153c6:	6812      	ldr	r2, [r2, #0]
 80153c8:	3b04      	subs	r3, #4
 80153ca:	2a00      	cmp	r2, #0
 80153cc:	d1cc      	bne.n	8015368 <quorem+0x9c>
 80153ce:	3c01      	subs	r4, #1
 80153d0:	e7c7      	b.n	8015362 <quorem+0x96>
 80153d2:	6812      	ldr	r2, [r2, #0]
 80153d4:	3b04      	subs	r3, #4
 80153d6:	2a00      	cmp	r2, #0
 80153d8:	d1f0      	bne.n	80153bc <quorem+0xf0>
 80153da:	3c01      	subs	r4, #1
 80153dc:	e7eb      	b.n	80153b6 <quorem+0xea>
 80153de:	2000      	movs	r0, #0
 80153e0:	e7ee      	b.n	80153c0 <quorem+0xf4>
 80153e2:	0000      	movs	r0, r0
 80153e4:	0000      	movs	r0, r0
	...

080153e8 <_dtoa_r>:
 80153e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153ec:	ed2d 8b04 	vpush	{d8-d9}
 80153f0:	ec57 6b10 	vmov	r6, r7, d0
 80153f4:	b093      	sub	sp, #76	; 0x4c
 80153f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80153f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80153fc:	9106      	str	r1, [sp, #24]
 80153fe:	ee10 aa10 	vmov	sl, s0
 8015402:	4604      	mov	r4, r0
 8015404:	9209      	str	r2, [sp, #36]	; 0x24
 8015406:	930c      	str	r3, [sp, #48]	; 0x30
 8015408:	46bb      	mov	fp, r7
 801540a:	b975      	cbnz	r5, 801542a <_dtoa_r+0x42>
 801540c:	2010      	movs	r0, #16
 801540e:	f7ff f98f 	bl	8014730 <malloc>
 8015412:	4602      	mov	r2, r0
 8015414:	6260      	str	r0, [r4, #36]	; 0x24
 8015416:	b920      	cbnz	r0, 8015422 <_dtoa_r+0x3a>
 8015418:	4ba7      	ldr	r3, [pc, #668]	; (80156b8 <_dtoa_r+0x2d0>)
 801541a:	21ea      	movs	r1, #234	; 0xea
 801541c:	48a7      	ldr	r0, [pc, #668]	; (80156bc <_dtoa_r+0x2d4>)
 801541e:	f7ff ff37 	bl	8015290 <__assert_func>
 8015422:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015426:	6005      	str	r5, [r0, #0]
 8015428:	60c5      	str	r5, [r0, #12]
 801542a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801542c:	6819      	ldr	r1, [r3, #0]
 801542e:	b151      	cbz	r1, 8015446 <_dtoa_r+0x5e>
 8015430:	685a      	ldr	r2, [r3, #4]
 8015432:	604a      	str	r2, [r1, #4]
 8015434:	2301      	movs	r3, #1
 8015436:	4093      	lsls	r3, r2
 8015438:	608b      	str	r3, [r1, #8]
 801543a:	4620      	mov	r0, r4
 801543c:	f000 ff30 	bl	80162a0 <_Bfree>
 8015440:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015442:	2200      	movs	r2, #0
 8015444:	601a      	str	r2, [r3, #0]
 8015446:	1e3b      	subs	r3, r7, #0
 8015448:	bfaa      	itet	ge
 801544a:	2300      	movge	r3, #0
 801544c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8015450:	f8c8 3000 	strge.w	r3, [r8]
 8015454:	4b9a      	ldr	r3, [pc, #616]	; (80156c0 <_dtoa_r+0x2d8>)
 8015456:	bfbc      	itt	lt
 8015458:	2201      	movlt	r2, #1
 801545a:	f8c8 2000 	strlt.w	r2, [r8]
 801545e:	ea33 030b 	bics.w	r3, r3, fp
 8015462:	d11b      	bne.n	801549c <_dtoa_r+0xb4>
 8015464:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015466:	f242 730f 	movw	r3, #9999	; 0x270f
 801546a:	6013      	str	r3, [r2, #0]
 801546c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015470:	4333      	orrs	r3, r6
 8015472:	f000 8592 	beq.w	8015f9a <_dtoa_r+0xbb2>
 8015476:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015478:	b963      	cbnz	r3, 8015494 <_dtoa_r+0xac>
 801547a:	4b92      	ldr	r3, [pc, #584]	; (80156c4 <_dtoa_r+0x2dc>)
 801547c:	e022      	b.n	80154c4 <_dtoa_r+0xdc>
 801547e:	4b92      	ldr	r3, [pc, #584]	; (80156c8 <_dtoa_r+0x2e0>)
 8015480:	9301      	str	r3, [sp, #4]
 8015482:	3308      	adds	r3, #8
 8015484:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015486:	6013      	str	r3, [r2, #0]
 8015488:	9801      	ldr	r0, [sp, #4]
 801548a:	b013      	add	sp, #76	; 0x4c
 801548c:	ecbd 8b04 	vpop	{d8-d9}
 8015490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015494:	4b8b      	ldr	r3, [pc, #556]	; (80156c4 <_dtoa_r+0x2dc>)
 8015496:	9301      	str	r3, [sp, #4]
 8015498:	3303      	adds	r3, #3
 801549a:	e7f3      	b.n	8015484 <_dtoa_r+0x9c>
 801549c:	2200      	movs	r2, #0
 801549e:	2300      	movs	r3, #0
 80154a0:	4650      	mov	r0, sl
 80154a2:	4659      	mov	r1, fp
 80154a4:	f7eb fb28 	bl	8000af8 <__aeabi_dcmpeq>
 80154a8:	ec4b ab19 	vmov	d9, sl, fp
 80154ac:	4680      	mov	r8, r0
 80154ae:	b158      	cbz	r0, 80154c8 <_dtoa_r+0xe0>
 80154b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80154b2:	2301      	movs	r3, #1
 80154b4:	6013      	str	r3, [r2, #0]
 80154b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	f000 856b 	beq.w	8015f94 <_dtoa_r+0xbac>
 80154be:	4883      	ldr	r0, [pc, #524]	; (80156cc <_dtoa_r+0x2e4>)
 80154c0:	6018      	str	r0, [r3, #0]
 80154c2:	1e43      	subs	r3, r0, #1
 80154c4:	9301      	str	r3, [sp, #4]
 80154c6:	e7df      	b.n	8015488 <_dtoa_r+0xa0>
 80154c8:	ec4b ab10 	vmov	d0, sl, fp
 80154cc:	aa10      	add	r2, sp, #64	; 0x40
 80154ce:	a911      	add	r1, sp, #68	; 0x44
 80154d0:	4620      	mov	r0, r4
 80154d2:	f001 f9cd 	bl	8016870 <__d2b>
 80154d6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80154da:	ee08 0a10 	vmov	s16, r0
 80154de:	2d00      	cmp	r5, #0
 80154e0:	f000 8084 	beq.w	80155ec <_dtoa_r+0x204>
 80154e4:	ee19 3a90 	vmov	r3, s19
 80154e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80154ec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80154f0:	4656      	mov	r6, sl
 80154f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80154f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80154fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80154fe:	4b74      	ldr	r3, [pc, #464]	; (80156d0 <_dtoa_r+0x2e8>)
 8015500:	2200      	movs	r2, #0
 8015502:	4630      	mov	r0, r6
 8015504:	4639      	mov	r1, r7
 8015506:	f7ea fed7 	bl	80002b8 <__aeabi_dsub>
 801550a:	a365      	add	r3, pc, #404	; (adr r3, 80156a0 <_dtoa_r+0x2b8>)
 801550c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015510:	f7eb f88a 	bl	8000628 <__aeabi_dmul>
 8015514:	a364      	add	r3, pc, #400	; (adr r3, 80156a8 <_dtoa_r+0x2c0>)
 8015516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801551a:	f7ea fecf 	bl	80002bc <__adddf3>
 801551e:	4606      	mov	r6, r0
 8015520:	4628      	mov	r0, r5
 8015522:	460f      	mov	r7, r1
 8015524:	f7eb f816 	bl	8000554 <__aeabi_i2d>
 8015528:	a361      	add	r3, pc, #388	; (adr r3, 80156b0 <_dtoa_r+0x2c8>)
 801552a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801552e:	f7eb f87b 	bl	8000628 <__aeabi_dmul>
 8015532:	4602      	mov	r2, r0
 8015534:	460b      	mov	r3, r1
 8015536:	4630      	mov	r0, r6
 8015538:	4639      	mov	r1, r7
 801553a:	f7ea febf 	bl	80002bc <__adddf3>
 801553e:	4606      	mov	r6, r0
 8015540:	460f      	mov	r7, r1
 8015542:	f7eb fb21 	bl	8000b88 <__aeabi_d2iz>
 8015546:	2200      	movs	r2, #0
 8015548:	9000      	str	r0, [sp, #0]
 801554a:	2300      	movs	r3, #0
 801554c:	4630      	mov	r0, r6
 801554e:	4639      	mov	r1, r7
 8015550:	f7eb fadc 	bl	8000b0c <__aeabi_dcmplt>
 8015554:	b150      	cbz	r0, 801556c <_dtoa_r+0x184>
 8015556:	9800      	ldr	r0, [sp, #0]
 8015558:	f7ea fffc 	bl	8000554 <__aeabi_i2d>
 801555c:	4632      	mov	r2, r6
 801555e:	463b      	mov	r3, r7
 8015560:	f7eb faca 	bl	8000af8 <__aeabi_dcmpeq>
 8015564:	b910      	cbnz	r0, 801556c <_dtoa_r+0x184>
 8015566:	9b00      	ldr	r3, [sp, #0]
 8015568:	3b01      	subs	r3, #1
 801556a:	9300      	str	r3, [sp, #0]
 801556c:	9b00      	ldr	r3, [sp, #0]
 801556e:	2b16      	cmp	r3, #22
 8015570:	d85a      	bhi.n	8015628 <_dtoa_r+0x240>
 8015572:	9a00      	ldr	r2, [sp, #0]
 8015574:	4b57      	ldr	r3, [pc, #348]	; (80156d4 <_dtoa_r+0x2ec>)
 8015576:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801557a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801557e:	ec51 0b19 	vmov	r0, r1, d9
 8015582:	f7eb fac3 	bl	8000b0c <__aeabi_dcmplt>
 8015586:	2800      	cmp	r0, #0
 8015588:	d050      	beq.n	801562c <_dtoa_r+0x244>
 801558a:	9b00      	ldr	r3, [sp, #0]
 801558c:	3b01      	subs	r3, #1
 801558e:	9300      	str	r3, [sp, #0]
 8015590:	2300      	movs	r3, #0
 8015592:	930b      	str	r3, [sp, #44]	; 0x2c
 8015594:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015596:	1b5d      	subs	r5, r3, r5
 8015598:	1e6b      	subs	r3, r5, #1
 801559a:	9305      	str	r3, [sp, #20]
 801559c:	bf45      	ittet	mi
 801559e:	f1c5 0301 	rsbmi	r3, r5, #1
 80155a2:	9304      	strmi	r3, [sp, #16]
 80155a4:	2300      	movpl	r3, #0
 80155a6:	2300      	movmi	r3, #0
 80155a8:	bf4c      	ite	mi
 80155aa:	9305      	strmi	r3, [sp, #20]
 80155ac:	9304      	strpl	r3, [sp, #16]
 80155ae:	9b00      	ldr	r3, [sp, #0]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	db3d      	blt.n	8015630 <_dtoa_r+0x248>
 80155b4:	9b05      	ldr	r3, [sp, #20]
 80155b6:	9a00      	ldr	r2, [sp, #0]
 80155b8:	920a      	str	r2, [sp, #40]	; 0x28
 80155ba:	4413      	add	r3, r2
 80155bc:	9305      	str	r3, [sp, #20]
 80155be:	2300      	movs	r3, #0
 80155c0:	9307      	str	r3, [sp, #28]
 80155c2:	9b06      	ldr	r3, [sp, #24]
 80155c4:	2b09      	cmp	r3, #9
 80155c6:	f200 8089 	bhi.w	80156dc <_dtoa_r+0x2f4>
 80155ca:	2b05      	cmp	r3, #5
 80155cc:	bfc4      	itt	gt
 80155ce:	3b04      	subgt	r3, #4
 80155d0:	9306      	strgt	r3, [sp, #24]
 80155d2:	9b06      	ldr	r3, [sp, #24]
 80155d4:	f1a3 0302 	sub.w	r3, r3, #2
 80155d8:	bfcc      	ite	gt
 80155da:	2500      	movgt	r5, #0
 80155dc:	2501      	movle	r5, #1
 80155de:	2b03      	cmp	r3, #3
 80155e0:	f200 8087 	bhi.w	80156f2 <_dtoa_r+0x30a>
 80155e4:	e8df f003 	tbb	[pc, r3]
 80155e8:	59383a2d 	.word	0x59383a2d
 80155ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80155f0:	441d      	add	r5, r3
 80155f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80155f6:	2b20      	cmp	r3, #32
 80155f8:	bfc1      	itttt	gt
 80155fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80155fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8015602:	fa0b f303 	lslgt.w	r3, fp, r3
 8015606:	fa26 f000 	lsrgt.w	r0, r6, r0
 801560a:	bfda      	itte	le
 801560c:	f1c3 0320 	rsble	r3, r3, #32
 8015610:	fa06 f003 	lslle.w	r0, r6, r3
 8015614:	4318      	orrgt	r0, r3
 8015616:	f7ea ff8d 	bl	8000534 <__aeabi_ui2d>
 801561a:	2301      	movs	r3, #1
 801561c:	4606      	mov	r6, r0
 801561e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8015622:	3d01      	subs	r5, #1
 8015624:	930e      	str	r3, [sp, #56]	; 0x38
 8015626:	e76a      	b.n	80154fe <_dtoa_r+0x116>
 8015628:	2301      	movs	r3, #1
 801562a:	e7b2      	b.n	8015592 <_dtoa_r+0x1aa>
 801562c:	900b      	str	r0, [sp, #44]	; 0x2c
 801562e:	e7b1      	b.n	8015594 <_dtoa_r+0x1ac>
 8015630:	9b04      	ldr	r3, [sp, #16]
 8015632:	9a00      	ldr	r2, [sp, #0]
 8015634:	1a9b      	subs	r3, r3, r2
 8015636:	9304      	str	r3, [sp, #16]
 8015638:	4253      	negs	r3, r2
 801563a:	9307      	str	r3, [sp, #28]
 801563c:	2300      	movs	r3, #0
 801563e:	930a      	str	r3, [sp, #40]	; 0x28
 8015640:	e7bf      	b.n	80155c2 <_dtoa_r+0x1da>
 8015642:	2300      	movs	r3, #0
 8015644:	9308      	str	r3, [sp, #32]
 8015646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015648:	2b00      	cmp	r3, #0
 801564a:	dc55      	bgt.n	80156f8 <_dtoa_r+0x310>
 801564c:	2301      	movs	r3, #1
 801564e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015652:	461a      	mov	r2, r3
 8015654:	9209      	str	r2, [sp, #36]	; 0x24
 8015656:	e00c      	b.n	8015672 <_dtoa_r+0x28a>
 8015658:	2301      	movs	r3, #1
 801565a:	e7f3      	b.n	8015644 <_dtoa_r+0x25c>
 801565c:	2300      	movs	r3, #0
 801565e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015660:	9308      	str	r3, [sp, #32]
 8015662:	9b00      	ldr	r3, [sp, #0]
 8015664:	4413      	add	r3, r2
 8015666:	9302      	str	r3, [sp, #8]
 8015668:	3301      	adds	r3, #1
 801566a:	2b01      	cmp	r3, #1
 801566c:	9303      	str	r3, [sp, #12]
 801566e:	bfb8      	it	lt
 8015670:	2301      	movlt	r3, #1
 8015672:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015674:	2200      	movs	r2, #0
 8015676:	6042      	str	r2, [r0, #4]
 8015678:	2204      	movs	r2, #4
 801567a:	f102 0614 	add.w	r6, r2, #20
 801567e:	429e      	cmp	r6, r3
 8015680:	6841      	ldr	r1, [r0, #4]
 8015682:	d93d      	bls.n	8015700 <_dtoa_r+0x318>
 8015684:	4620      	mov	r0, r4
 8015686:	f000 fdcb 	bl	8016220 <_Balloc>
 801568a:	9001      	str	r0, [sp, #4]
 801568c:	2800      	cmp	r0, #0
 801568e:	d13b      	bne.n	8015708 <_dtoa_r+0x320>
 8015690:	4b11      	ldr	r3, [pc, #68]	; (80156d8 <_dtoa_r+0x2f0>)
 8015692:	4602      	mov	r2, r0
 8015694:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015698:	e6c0      	b.n	801541c <_dtoa_r+0x34>
 801569a:	2301      	movs	r3, #1
 801569c:	e7df      	b.n	801565e <_dtoa_r+0x276>
 801569e:	bf00      	nop
 80156a0:	636f4361 	.word	0x636f4361
 80156a4:	3fd287a7 	.word	0x3fd287a7
 80156a8:	8b60c8b3 	.word	0x8b60c8b3
 80156ac:	3fc68a28 	.word	0x3fc68a28
 80156b0:	509f79fb 	.word	0x509f79fb
 80156b4:	3fd34413 	.word	0x3fd34413
 80156b8:	08017b7e 	.word	0x08017b7e
 80156bc:	08017b95 	.word	0x08017b95
 80156c0:	7ff00000 	.word	0x7ff00000
 80156c4:	08017b7a 	.word	0x08017b7a
 80156c8:	08017b71 	.word	0x08017b71
 80156cc:	08017a11 	.word	0x08017a11
 80156d0:	3ff80000 	.word	0x3ff80000
 80156d4:	08017cf8 	.word	0x08017cf8
 80156d8:	08017bf0 	.word	0x08017bf0
 80156dc:	2501      	movs	r5, #1
 80156de:	2300      	movs	r3, #0
 80156e0:	9306      	str	r3, [sp, #24]
 80156e2:	9508      	str	r5, [sp, #32]
 80156e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80156e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80156ec:	2200      	movs	r2, #0
 80156ee:	2312      	movs	r3, #18
 80156f0:	e7b0      	b.n	8015654 <_dtoa_r+0x26c>
 80156f2:	2301      	movs	r3, #1
 80156f4:	9308      	str	r3, [sp, #32]
 80156f6:	e7f5      	b.n	80156e4 <_dtoa_r+0x2fc>
 80156f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80156fe:	e7b8      	b.n	8015672 <_dtoa_r+0x28a>
 8015700:	3101      	adds	r1, #1
 8015702:	6041      	str	r1, [r0, #4]
 8015704:	0052      	lsls	r2, r2, #1
 8015706:	e7b8      	b.n	801567a <_dtoa_r+0x292>
 8015708:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801570a:	9a01      	ldr	r2, [sp, #4]
 801570c:	601a      	str	r2, [r3, #0]
 801570e:	9b03      	ldr	r3, [sp, #12]
 8015710:	2b0e      	cmp	r3, #14
 8015712:	f200 809d 	bhi.w	8015850 <_dtoa_r+0x468>
 8015716:	2d00      	cmp	r5, #0
 8015718:	f000 809a 	beq.w	8015850 <_dtoa_r+0x468>
 801571c:	9b00      	ldr	r3, [sp, #0]
 801571e:	2b00      	cmp	r3, #0
 8015720:	dd32      	ble.n	8015788 <_dtoa_r+0x3a0>
 8015722:	4ab7      	ldr	r2, [pc, #732]	; (8015a00 <_dtoa_r+0x618>)
 8015724:	f003 030f 	and.w	r3, r3, #15
 8015728:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801572c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015730:	9b00      	ldr	r3, [sp, #0]
 8015732:	05d8      	lsls	r0, r3, #23
 8015734:	ea4f 1723 	mov.w	r7, r3, asr #4
 8015738:	d516      	bpl.n	8015768 <_dtoa_r+0x380>
 801573a:	4bb2      	ldr	r3, [pc, #712]	; (8015a04 <_dtoa_r+0x61c>)
 801573c:	ec51 0b19 	vmov	r0, r1, d9
 8015740:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015744:	f7eb f89a 	bl	800087c <__aeabi_ddiv>
 8015748:	f007 070f 	and.w	r7, r7, #15
 801574c:	4682      	mov	sl, r0
 801574e:	468b      	mov	fp, r1
 8015750:	2503      	movs	r5, #3
 8015752:	4eac      	ldr	r6, [pc, #688]	; (8015a04 <_dtoa_r+0x61c>)
 8015754:	b957      	cbnz	r7, 801576c <_dtoa_r+0x384>
 8015756:	4642      	mov	r2, r8
 8015758:	464b      	mov	r3, r9
 801575a:	4650      	mov	r0, sl
 801575c:	4659      	mov	r1, fp
 801575e:	f7eb f88d 	bl	800087c <__aeabi_ddiv>
 8015762:	4682      	mov	sl, r0
 8015764:	468b      	mov	fp, r1
 8015766:	e028      	b.n	80157ba <_dtoa_r+0x3d2>
 8015768:	2502      	movs	r5, #2
 801576a:	e7f2      	b.n	8015752 <_dtoa_r+0x36a>
 801576c:	07f9      	lsls	r1, r7, #31
 801576e:	d508      	bpl.n	8015782 <_dtoa_r+0x39a>
 8015770:	4640      	mov	r0, r8
 8015772:	4649      	mov	r1, r9
 8015774:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015778:	f7ea ff56 	bl	8000628 <__aeabi_dmul>
 801577c:	3501      	adds	r5, #1
 801577e:	4680      	mov	r8, r0
 8015780:	4689      	mov	r9, r1
 8015782:	107f      	asrs	r7, r7, #1
 8015784:	3608      	adds	r6, #8
 8015786:	e7e5      	b.n	8015754 <_dtoa_r+0x36c>
 8015788:	f000 809b 	beq.w	80158c2 <_dtoa_r+0x4da>
 801578c:	9b00      	ldr	r3, [sp, #0]
 801578e:	4f9d      	ldr	r7, [pc, #628]	; (8015a04 <_dtoa_r+0x61c>)
 8015790:	425e      	negs	r6, r3
 8015792:	4b9b      	ldr	r3, [pc, #620]	; (8015a00 <_dtoa_r+0x618>)
 8015794:	f006 020f 	and.w	r2, r6, #15
 8015798:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801579c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157a0:	ec51 0b19 	vmov	r0, r1, d9
 80157a4:	f7ea ff40 	bl	8000628 <__aeabi_dmul>
 80157a8:	1136      	asrs	r6, r6, #4
 80157aa:	4682      	mov	sl, r0
 80157ac:	468b      	mov	fp, r1
 80157ae:	2300      	movs	r3, #0
 80157b0:	2502      	movs	r5, #2
 80157b2:	2e00      	cmp	r6, #0
 80157b4:	d17a      	bne.n	80158ac <_dtoa_r+0x4c4>
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d1d3      	bne.n	8015762 <_dtoa_r+0x37a>
 80157ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80157bc:	2b00      	cmp	r3, #0
 80157be:	f000 8082 	beq.w	80158c6 <_dtoa_r+0x4de>
 80157c2:	4b91      	ldr	r3, [pc, #580]	; (8015a08 <_dtoa_r+0x620>)
 80157c4:	2200      	movs	r2, #0
 80157c6:	4650      	mov	r0, sl
 80157c8:	4659      	mov	r1, fp
 80157ca:	f7eb f99f 	bl	8000b0c <__aeabi_dcmplt>
 80157ce:	2800      	cmp	r0, #0
 80157d0:	d079      	beq.n	80158c6 <_dtoa_r+0x4de>
 80157d2:	9b03      	ldr	r3, [sp, #12]
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d076      	beq.n	80158c6 <_dtoa_r+0x4de>
 80157d8:	9b02      	ldr	r3, [sp, #8]
 80157da:	2b00      	cmp	r3, #0
 80157dc:	dd36      	ble.n	801584c <_dtoa_r+0x464>
 80157de:	9b00      	ldr	r3, [sp, #0]
 80157e0:	4650      	mov	r0, sl
 80157e2:	4659      	mov	r1, fp
 80157e4:	1e5f      	subs	r7, r3, #1
 80157e6:	2200      	movs	r2, #0
 80157e8:	4b88      	ldr	r3, [pc, #544]	; (8015a0c <_dtoa_r+0x624>)
 80157ea:	f7ea ff1d 	bl	8000628 <__aeabi_dmul>
 80157ee:	9e02      	ldr	r6, [sp, #8]
 80157f0:	4682      	mov	sl, r0
 80157f2:	468b      	mov	fp, r1
 80157f4:	3501      	adds	r5, #1
 80157f6:	4628      	mov	r0, r5
 80157f8:	f7ea feac 	bl	8000554 <__aeabi_i2d>
 80157fc:	4652      	mov	r2, sl
 80157fe:	465b      	mov	r3, fp
 8015800:	f7ea ff12 	bl	8000628 <__aeabi_dmul>
 8015804:	4b82      	ldr	r3, [pc, #520]	; (8015a10 <_dtoa_r+0x628>)
 8015806:	2200      	movs	r2, #0
 8015808:	f7ea fd58 	bl	80002bc <__adddf3>
 801580c:	46d0      	mov	r8, sl
 801580e:	46d9      	mov	r9, fp
 8015810:	4682      	mov	sl, r0
 8015812:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8015816:	2e00      	cmp	r6, #0
 8015818:	d158      	bne.n	80158cc <_dtoa_r+0x4e4>
 801581a:	4b7e      	ldr	r3, [pc, #504]	; (8015a14 <_dtoa_r+0x62c>)
 801581c:	2200      	movs	r2, #0
 801581e:	4640      	mov	r0, r8
 8015820:	4649      	mov	r1, r9
 8015822:	f7ea fd49 	bl	80002b8 <__aeabi_dsub>
 8015826:	4652      	mov	r2, sl
 8015828:	465b      	mov	r3, fp
 801582a:	4680      	mov	r8, r0
 801582c:	4689      	mov	r9, r1
 801582e:	f7eb f98b 	bl	8000b48 <__aeabi_dcmpgt>
 8015832:	2800      	cmp	r0, #0
 8015834:	f040 8295 	bne.w	8015d62 <_dtoa_r+0x97a>
 8015838:	4652      	mov	r2, sl
 801583a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801583e:	4640      	mov	r0, r8
 8015840:	4649      	mov	r1, r9
 8015842:	f7eb f963 	bl	8000b0c <__aeabi_dcmplt>
 8015846:	2800      	cmp	r0, #0
 8015848:	f040 8289 	bne.w	8015d5e <_dtoa_r+0x976>
 801584c:	ec5b ab19 	vmov	sl, fp, d9
 8015850:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015852:	2b00      	cmp	r3, #0
 8015854:	f2c0 8148 	blt.w	8015ae8 <_dtoa_r+0x700>
 8015858:	9a00      	ldr	r2, [sp, #0]
 801585a:	2a0e      	cmp	r2, #14
 801585c:	f300 8144 	bgt.w	8015ae8 <_dtoa_r+0x700>
 8015860:	4b67      	ldr	r3, [pc, #412]	; (8015a00 <_dtoa_r+0x618>)
 8015862:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015866:	e9d3 8900 	ldrd	r8, r9, [r3]
 801586a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801586c:	2b00      	cmp	r3, #0
 801586e:	f280 80d5 	bge.w	8015a1c <_dtoa_r+0x634>
 8015872:	9b03      	ldr	r3, [sp, #12]
 8015874:	2b00      	cmp	r3, #0
 8015876:	f300 80d1 	bgt.w	8015a1c <_dtoa_r+0x634>
 801587a:	f040 826f 	bne.w	8015d5c <_dtoa_r+0x974>
 801587e:	4b65      	ldr	r3, [pc, #404]	; (8015a14 <_dtoa_r+0x62c>)
 8015880:	2200      	movs	r2, #0
 8015882:	4640      	mov	r0, r8
 8015884:	4649      	mov	r1, r9
 8015886:	f7ea fecf 	bl	8000628 <__aeabi_dmul>
 801588a:	4652      	mov	r2, sl
 801588c:	465b      	mov	r3, fp
 801588e:	f7eb f951 	bl	8000b34 <__aeabi_dcmpge>
 8015892:	9e03      	ldr	r6, [sp, #12]
 8015894:	4637      	mov	r7, r6
 8015896:	2800      	cmp	r0, #0
 8015898:	f040 8245 	bne.w	8015d26 <_dtoa_r+0x93e>
 801589c:	9d01      	ldr	r5, [sp, #4]
 801589e:	2331      	movs	r3, #49	; 0x31
 80158a0:	f805 3b01 	strb.w	r3, [r5], #1
 80158a4:	9b00      	ldr	r3, [sp, #0]
 80158a6:	3301      	adds	r3, #1
 80158a8:	9300      	str	r3, [sp, #0]
 80158aa:	e240      	b.n	8015d2e <_dtoa_r+0x946>
 80158ac:	07f2      	lsls	r2, r6, #31
 80158ae:	d505      	bpl.n	80158bc <_dtoa_r+0x4d4>
 80158b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80158b4:	f7ea feb8 	bl	8000628 <__aeabi_dmul>
 80158b8:	3501      	adds	r5, #1
 80158ba:	2301      	movs	r3, #1
 80158bc:	1076      	asrs	r6, r6, #1
 80158be:	3708      	adds	r7, #8
 80158c0:	e777      	b.n	80157b2 <_dtoa_r+0x3ca>
 80158c2:	2502      	movs	r5, #2
 80158c4:	e779      	b.n	80157ba <_dtoa_r+0x3d2>
 80158c6:	9f00      	ldr	r7, [sp, #0]
 80158c8:	9e03      	ldr	r6, [sp, #12]
 80158ca:	e794      	b.n	80157f6 <_dtoa_r+0x40e>
 80158cc:	9901      	ldr	r1, [sp, #4]
 80158ce:	4b4c      	ldr	r3, [pc, #304]	; (8015a00 <_dtoa_r+0x618>)
 80158d0:	4431      	add	r1, r6
 80158d2:	910d      	str	r1, [sp, #52]	; 0x34
 80158d4:	9908      	ldr	r1, [sp, #32]
 80158d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80158da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80158de:	2900      	cmp	r1, #0
 80158e0:	d043      	beq.n	801596a <_dtoa_r+0x582>
 80158e2:	494d      	ldr	r1, [pc, #308]	; (8015a18 <_dtoa_r+0x630>)
 80158e4:	2000      	movs	r0, #0
 80158e6:	f7ea ffc9 	bl	800087c <__aeabi_ddiv>
 80158ea:	4652      	mov	r2, sl
 80158ec:	465b      	mov	r3, fp
 80158ee:	f7ea fce3 	bl	80002b8 <__aeabi_dsub>
 80158f2:	9d01      	ldr	r5, [sp, #4]
 80158f4:	4682      	mov	sl, r0
 80158f6:	468b      	mov	fp, r1
 80158f8:	4649      	mov	r1, r9
 80158fa:	4640      	mov	r0, r8
 80158fc:	f7eb f944 	bl	8000b88 <__aeabi_d2iz>
 8015900:	4606      	mov	r6, r0
 8015902:	f7ea fe27 	bl	8000554 <__aeabi_i2d>
 8015906:	4602      	mov	r2, r0
 8015908:	460b      	mov	r3, r1
 801590a:	4640      	mov	r0, r8
 801590c:	4649      	mov	r1, r9
 801590e:	f7ea fcd3 	bl	80002b8 <__aeabi_dsub>
 8015912:	3630      	adds	r6, #48	; 0x30
 8015914:	f805 6b01 	strb.w	r6, [r5], #1
 8015918:	4652      	mov	r2, sl
 801591a:	465b      	mov	r3, fp
 801591c:	4680      	mov	r8, r0
 801591e:	4689      	mov	r9, r1
 8015920:	f7eb f8f4 	bl	8000b0c <__aeabi_dcmplt>
 8015924:	2800      	cmp	r0, #0
 8015926:	d163      	bne.n	80159f0 <_dtoa_r+0x608>
 8015928:	4642      	mov	r2, r8
 801592a:	464b      	mov	r3, r9
 801592c:	4936      	ldr	r1, [pc, #216]	; (8015a08 <_dtoa_r+0x620>)
 801592e:	2000      	movs	r0, #0
 8015930:	f7ea fcc2 	bl	80002b8 <__aeabi_dsub>
 8015934:	4652      	mov	r2, sl
 8015936:	465b      	mov	r3, fp
 8015938:	f7eb f8e8 	bl	8000b0c <__aeabi_dcmplt>
 801593c:	2800      	cmp	r0, #0
 801593e:	f040 80b5 	bne.w	8015aac <_dtoa_r+0x6c4>
 8015942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015944:	429d      	cmp	r5, r3
 8015946:	d081      	beq.n	801584c <_dtoa_r+0x464>
 8015948:	4b30      	ldr	r3, [pc, #192]	; (8015a0c <_dtoa_r+0x624>)
 801594a:	2200      	movs	r2, #0
 801594c:	4650      	mov	r0, sl
 801594e:	4659      	mov	r1, fp
 8015950:	f7ea fe6a 	bl	8000628 <__aeabi_dmul>
 8015954:	4b2d      	ldr	r3, [pc, #180]	; (8015a0c <_dtoa_r+0x624>)
 8015956:	4682      	mov	sl, r0
 8015958:	468b      	mov	fp, r1
 801595a:	4640      	mov	r0, r8
 801595c:	4649      	mov	r1, r9
 801595e:	2200      	movs	r2, #0
 8015960:	f7ea fe62 	bl	8000628 <__aeabi_dmul>
 8015964:	4680      	mov	r8, r0
 8015966:	4689      	mov	r9, r1
 8015968:	e7c6      	b.n	80158f8 <_dtoa_r+0x510>
 801596a:	4650      	mov	r0, sl
 801596c:	4659      	mov	r1, fp
 801596e:	f7ea fe5b 	bl	8000628 <__aeabi_dmul>
 8015972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015974:	9d01      	ldr	r5, [sp, #4]
 8015976:	930f      	str	r3, [sp, #60]	; 0x3c
 8015978:	4682      	mov	sl, r0
 801597a:	468b      	mov	fp, r1
 801597c:	4649      	mov	r1, r9
 801597e:	4640      	mov	r0, r8
 8015980:	f7eb f902 	bl	8000b88 <__aeabi_d2iz>
 8015984:	4606      	mov	r6, r0
 8015986:	f7ea fde5 	bl	8000554 <__aeabi_i2d>
 801598a:	3630      	adds	r6, #48	; 0x30
 801598c:	4602      	mov	r2, r0
 801598e:	460b      	mov	r3, r1
 8015990:	4640      	mov	r0, r8
 8015992:	4649      	mov	r1, r9
 8015994:	f7ea fc90 	bl	80002b8 <__aeabi_dsub>
 8015998:	f805 6b01 	strb.w	r6, [r5], #1
 801599c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801599e:	429d      	cmp	r5, r3
 80159a0:	4680      	mov	r8, r0
 80159a2:	4689      	mov	r9, r1
 80159a4:	f04f 0200 	mov.w	r2, #0
 80159a8:	d124      	bne.n	80159f4 <_dtoa_r+0x60c>
 80159aa:	4b1b      	ldr	r3, [pc, #108]	; (8015a18 <_dtoa_r+0x630>)
 80159ac:	4650      	mov	r0, sl
 80159ae:	4659      	mov	r1, fp
 80159b0:	f7ea fc84 	bl	80002bc <__adddf3>
 80159b4:	4602      	mov	r2, r0
 80159b6:	460b      	mov	r3, r1
 80159b8:	4640      	mov	r0, r8
 80159ba:	4649      	mov	r1, r9
 80159bc:	f7eb f8c4 	bl	8000b48 <__aeabi_dcmpgt>
 80159c0:	2800      	cmp	r0, #0
 80159c2:	d173      	bne.n	8015aac <_dtoa_r+0x6c4>
 80159c4:	4652      	mov	r2, sl
 80159c6:	465b      	mov	r3, fp
 80159c8:	4913      	ldr	r1, [pc, #76]	; (8015a18 <_dtoa_r+0x630>)
 80159ca:	2000      	movs	r0, #0
 80159cc:	f7ea fc74 	bl	80002b8 <__aeabi_dsub>
 80159d0:	4602      	mov	r2, r0
 80159d2:	460b      	mov	r3, r1
 80159d4:	4640      	mov	r0, r8
 80159d6:	4649      	mov	r1, r9
 80159d8:	f7eb f898 	bl	8000b0c <__aeabi_dcmplt>
 80159dc:	2800      	cmp	r0, #0
 80159de:	f43f af35 	beq.w	801584c <_dtoa_r+0x464>
 80159e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80159e4:	1e6b      	subs	r3, r5, #1
 80159e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80159e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80159ec:	2b30      	cmp	r3, #48	; 0x30
 80159ee:	d0f8      	beq.n	80159e2 <_dtoa_r+0x5fa>
 80159f0:	9700      	str	r7, [sp, #0]
 80159f2:	e049      	b.n	8015a88 <_dtoa_r+0x6a0>
 80159f4:	4b05      	ldr	r3, [pc, #20]	; (8015a0c <_dtoa_r+0x624>)
 80159f6:	f7ea fe17 	bl	8000628 <__aeabi_dmul>
 80159fa:	4680      	mov	r8, r0
 80159fc:	4689      	mov	r9, r1
 80159fe:	e7bd      	b.n	801597c <_dtoa_r+0x594>
 8015a00:	08017cf8 	.word	0x08017cf8
 8015a04:	08017cd0 	.word	0x08017cd0
 8015a08:	3ff00000 	.word	0x3ff00000
 8015a0c:	40240000 	.word	0x40240000
 8015a10:	401c0000 	.word	0x401c0000
 8015a14:	40140000 	.word	0x40140000
 8015a18:	3fe00000 	.word	0x3fe00000
 8015a1c:	9d01      	ldr	r5, [sp, #4]
 8015a1e:	4656      	mov	r6, sl
 8015a20:	465f      	mov	r7, fp
 8015a22:	4642      	mov	r2, r8
 8015a24:	464b      	mov	r3, r9
 8015a26:	4630      	mov	r0, r6
 8015a28:	4639      	mov	r1, r7
 8015a2a:	f7ea ff27 	bl	800087c <__aeabi_ddiv>
 8015a2e:	f7eb f8ab 	bl	8000b88 <__aeabi_d2iz>
 8015a32:	4682      	mov	sl, r0
 8015a34:	f7ea fd8e 	bl	8000554 <__aeabi_i2d>
 8015a38:	4642      	mov	r2, r8
 8015a3a:	464b      	mov	r3, r9
 8015a3c:	f7ea fdf4 	bl	8000628 <__aeabi_dmul>
 8015a40:	4602      	mov	r2, r0
 8015a42:	460b      	mov	r3, r1
 8015a44:	4630      	mov	r0, r6
 8015a46:	4639      	mov	r1, r7
 8015a48:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8015a4c:	f7ea fc34 	bl	80002b8 <__aeabi_dsub>
 8015a50:	f805 6b01 	strb.w	r6, [r5], #1
 8015a54:	9e01      	ldr	r6, [sp, #4]
 8015a56:	9f03      	ldr	r7, [sp, #12]
 8015a58:	1bae      	subs	r6, r5, r6
 8015a5a:	42b7      	cmp	r7, r6
 8015a5c:	4602      	mov	r2, r0
 8015a5e:	460b      	mov	r3, r1
 8015a60:	d135      	bne.n	8015ace <_dtoa_r+0x6e6>
 8015a62:	f7ea fc2b 	bl	80002bc <__adddf3>
 8015a66:	4642      	mov	r2, r8
 8015a68:	464b      	mov	r3, r9
 8015a6a:	4606      	mov	r6, r0
 8015a6c:	460f      	mov	r7, r1
 8015a6e:	f7eb f86b 	bl	8000b48 <__aeabi_dcmpgt>
 8015a72:	b9d0      	cbnz	r0, 8015aaa <_dtoa_r+0x6c2>
 8015a74:	4642      	mov	r2, r8
 8015a76:	464b      	mov	r3, r9
 8015a78:	4630      	mov	r0, r6
 8015a7a:	4639      	mov	r1, r7
 8015a7c:	f7eb f83c 	bl	8000af8 <__aeabi_dcmpeq>
 8015a80:	b110      	cbz	r0, 8015a88 <_dtoa_r+0x6a0>
 8015a82:	f01a 0f01 	tst.w	sl, #1
 8015a86:	d110      	bne.n	8015aaa <_dtoa_r+0x6c2>
 8015a88:	4620      	mov	r0, r4
 8015a8a:	ee18 1a10 	vmov	r1, s16
 8015a8e:	f000 fc07 	bl	80162a0 <_Bfree>
 8015a92:	2300      	movs	r3, #0
 8015a94:	9800      	ldr	r0, [sp, #0]
 8015a96:	702b      	strb	r3, [r5, #0]
 8015a98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a9a:	3001      	adds	r0, #1
 8015a9c:	6018      	str	r0, [r3, #0]
 8015a9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	f43f acf1 	beq.w	8015488 <_dtoa_r+0xa0>
 8015aa6:	601d      	str	r5, [r3, #0]
 8015aa8:	e4ee      	b.n	8015488 <_dtoa_r+0xa0>
 8015aaa:	9f00      	ldr	r7, [sp, #0]
 8015aac:	462b      	mov	r3, r5
 8015aae:	461d      	mov	r5, r3
 8015ab0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015ab4:	2a39      	cmp	r2, #57	; 0x39
 8015ab6:	d106      	bne.n	8015ac6 <_dtoa_r+0x6de>
 8015ab8:	9a01      	ldr	r2, [sp, #4]
 8015aba:	429a      	cmp	r2, r3
 8015abc:	d1f7      	bne.n	8015aae <_dtoa_r+0x6c6>
 8015abe:	9901      	ldr	r1, [sp, #4]
 8015ac0:	2230      	movs	r2, #48	; 0x30
 8015ac2:	3701      	adds	r7, #1
 8015ac4:	700a      	strb	r2, [r1, #0]
 8015ac6:	781a      	ldrb	r2, [r3, #0]
 8015ac8:	3201      	adds	r2, #1
 8015aca:	701a      	strb	r2, [r3, #0]
 8015acc:	e790      	b.n	80159f0 <_dtoa_r+0x608>
 8015ace:	4ba6      	ldr	r3, [pc, #664]	; (8015d68 <_dtoa_r+0x980>)
 8015ad0:	2200      	movs	r2, #0
 8015ad2:	f7ea fda9 	bl	8000628 <__aeabi_dmul>
 8015ad6:	2200      	movs	r2, #0
 8015ad8:	2300      	movs	r3, #0
 8015ada:	4606      	mov	r6, r0
 8015adc:	460f      	mov	r7, r1
 8015ade:	f7eb f80b 	bl	8000af8 <__aeabi_dcmpeq>
 8015ae2:	2800      	cmp	r0, #0
 8015ae4:	d09d      	beq.n	8015a22 <_dtoa_r+0x63a>
 8015ae6:	e7cf      	b.n	8015a88 <_dtoa_r+0x6a0>
 8015ae8:	9a08      	ldr	r2, [sp, #32]
 8015aea:	2a00      	cmp	r2, #0
 8015aec:	f000 80d7 	beq.w	8015c9e <_dtoa_r+0x8b6>
 8015af0:	9a06      	ldr	r2, [sp, #24]
 8015af2:	2a01      	cmp	r2, #1
 8015af4:	f300 80ba 	bgt.w	8015c6c <_dtoa_r+0x884>
 8015af8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015afa:	2a00      	cmp	r2, #0
 8015afc:	f000 80b2 	beq.w	8015c64 <_dtoa_r+0x87c>
 8015b00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015b04:	9e07      	ldr	r6, [sp, #28]
 8015b06:	9d04      	ldr	r5, [sp, #16]
 8015b08:	9a04      	ldr	r2, [sp, #16]
 8015b0a:	441a      	add	r2, r3
 8015b0c:	9204      	str	r2, [sp, #16]
 8015b0e:	9a05      	ldr	r2, [sp, #20]
 8015b10:	2101      	movs	r1, #1
 8015b12:	441a      	add	r2, r3
 8015b14:	4620      	mov	r0, r4
 8015b16:	9205      	str	r2, [sp, #20]
 8015b18:	f000 fc7a 	bl	8016410 <__i2b>
 8015b1c:	4607      	mov	r7, r0
 8015b1e:	2d00      	cmp	r5, #0
 8015b20:	dd0c      	ble.n	8015b3c <_dtoa_r+0x754>
 8015b22:	9b05      	ldr	r3, [sp, #20]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	dd09      	ble.n	8015b3c <_dtoa_r+0x754>
 8015b28:	42ab      	cmp	r3, r5
 8015b2a:	9a04      	ldr	r2, [sp, #16]
 8015b2c:	bfa8      	it	ge
 8015b2e:	462b      	movge	r3, r5
 8015b30:	1ad2      	subs	r2, r2, r3
 8015b32:	9204      	str	r2, [sp, #16]
 8015b34:	9a05      	ldr	r2, [sp, #20]
 8015b36:	1aed      	subs	r5, r5, r3
 8015b38:	1ad3      	subs	r3, r2, r3
 8015b3a:	9305      	str	r3, [sp, #20]
 8015b3c:	9b07      	ldr	r3, [sp, #28]
 8015b3e:	b31b      	cbz	r3, 8015b88 <_dtoa_r+0x7a0>
 8015b40:	9b08      	ldr	r3, [sp, #32]
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	f000 80af 	beq.w	8015ca6 <_dtoa_r+0x8be>
 8015b48:	2e00      	cmp	r6, #0
 8015b4a:	dd13      	ble.n	8015b74 <_dtoa_r+0x78c>
 8015b4c:	4639      	mov	r1, r7
 8015b4e:	4632      	mov	r2, r6
 8015b50:	4620      	mov	r0, r4
 8015b52:	f000 fd1d 	bl	8016590 <__pow5mult>
 8015b56:	ee18 2a10 	vmov	r2, s16
 8015b5a:	4601      	mov	r1, r0
 8015b5c:	4607      	mov	r7, r0
 8015b5e:	4620      	mov	r0, r4
 8015b60:	f000 fc6c 	bl	801643c <__multiply>
 8015b64:	ee18 1a10 	vmov	r1, s16
 8015b68:	4680      	mov	r8, r0
 8015b6a:	4620      	mov	r0, r4
 8015b6c:	f000 fb98 	bl	80162a0 <_Bfree>
 8015b70:	ee08 8a10 	vmov	s16, r8
 8015b74:	9b07      	ldr	r3, [sp, #28]
 8015b76:	1b9a      	subs	r2, r3, r6
 8015b78:	d006      	beq.n	8015b88 <_dtoa_r+0x7a0>
 8015b7a:	ee18 1a10 	vmov	r1, s16
 8015b7e:	4620      	mov	r0, r4
 8015b80:	f000 fd06 	bl	8016590 <__pow5mult>
 8015b84:	ee08 0a10 	vmov	s16, r0
 8015b88:	2101      	movs	r1, #1
 8015b8a:	4620      	mov	r0, r4
 8015b8c:	f000 fc40 	bl	8016410 <__i2b>
 8015b90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	4606      	mov	r6, r0
 8015b96:	f340 8088 	ble.w	8015caa <_dtoa_r+0x8c2>
 8015b9a:	461a      	mov	r2, r3
 8015b9c:	4601      	mov	r1, r0
 8015b9e:	4620      	mov	r0, r4
 8015ba0:	f000 fcf6 	bl	8016590 <__pow5mult>
 8015ba4:	9b06      	ldr	r3, [sp, #24]
 8015ba6:	2b01      	cmp	r3, #1
 8015ba8:	4606      	mov	r6, r0
 8015baa:	f340 8081 	ble.w	8015cb0 <_dtoa_r+0x8c8>
 8015bae:	f04f 0800 	mov.w	r8, #0
 8015bb2:	6933      	ldr	r3, [r6, #16]
 8015bb4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015bb8:	6918      	ldr	r0, [r3, #16]
 8015bba:	f000 fbd9 	bl	8016370 <__hi0bits>
 8015bbe:	f1c0 0020 	rsb	r0, r0, #32
 8015bc2:	9b05      	ldr	r3, [sp, #20]
 8015bc4:	4418      	add	r0, r3
 8015bc6:	f010 001f 	ands.w	r0, r0, #31
 8015bca:	f000 8092 	beq.w	8015cf2 <_dtoa_r+0x90a>
 8015bce:	f1c0 0320 	rsb	r3, r0, #32
 8015bd2:	2b04      	cmp	r3, #4
 8015bd4:	f340 808a 	ble.w	8015cec <_dtoa_r+0x904>
 8015bd8:	f1c0 001c 	rsb	r0, r0, #28
 8015bdc:	9b04      	ldr	r3, [sp, #16]
 8015bde:	4403      	add	r3, r0
 8015be0:	9304      	str	r3, [sp, #16]
 8015be2:	9b05      	ldr	r3, [sp, #20]
 8015be4:	4403      	add	r3, r0
 8015be6:	4405      	add	r5, r0
 8015be8:	9305      	str	r3, [sp, #20]
 8015bea:	9b04      	ldr	r3, [sp, #16]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	dd07      	ble.n	8015c00 <_dtoa_r+0x818>
 8015bf0:	ee18 1a10 	vmov	r1, s16
 8015bf4:	461a      	mov	r2, r3
 8015bf6:	4620      	mov	r0, r4
 8015bf8:	f000 fd24 	bl	8016644 <__lshift>
 8015bfc:	ee08 0a10 	vmov	s16, r0
 8015c00:	9b05      	ldr	r3, [sp, #20]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	dd05      	ble.n	8015c12 <_dtoa_r+0x82a>
 8015c06:	4631      	mov	r1, r6
 8015c08:	461a      	mov	r2, r3
 8015c0a:	4620      	mov	r0, r4
 8015c0c:	f000 fd1a 	bl	8016644 <__lshift>
 8015c10:	4606      	mov	r6, r0
 8015c12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d06e      	beq.n	8015cf6 <_dtoa_r+0x90e>
 8015c18:	ee18 0a10 	vmov	r0, s16
 8015c1c:	4631      	mov	r1, r6
 8015c1e:	f000 fd81 	bl	8016724 <__mcmp>
 8015c22:	2800      	cmp	r0, #0
 8015c24:	da67      	bge.n	8015cf6 <_dtoa_r+0x90e>
 8015c26:	9b00      	ldr	r3, [sp, #0]
 8015c28:	3b01      	subs	r3, #1
 8015c2a:	ee18 1a10 	vmov	r1, s16
 8015c2e:	9300      	str	r3, [sp, #0]
 8015c30:	220a      	movs	r2, #10
 8015c32:	2300      	movs	r3, #0
 8015c34:	4620      	mov	r0, r4
 8015c36:	f000 fb55 	bl	80162e4 <__multadd>
 8015c3a:	9b08      	ldr	r3, [sp, #32]
 8015c3c:	ee08 0a10 	vmov	s16, r0
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	f000 81b1 	beq.w	8015fa8 <_dtoa_r+0xbc0>
 8015c46:	2300      	movs	r3, #0
 8015c48:	4639      	mov	r1, r7
 8015c4a:	220a      	movs	r2, #10
 8015c4c:	4620      	mov	r0, r4
 8015c4e:	f000 fb49 	bl	80162e4 <__multadd>
 8015c52:	9b02      	ldr	r3, [sp, #8]
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	4607      	mov	r7, r0
 8015c58:	f300 808e 	bgt.w	8015d78 <_dtoa_r+0x990>
 8015c5c:	9b06      	ldr	r3, [sp, #24]
 8015c5e:	2b02      	cmp	r3, #2
 8015c60:	dc51      	bgt.n	8015d06 <_dtoa_r+0x91e>
 8015c62:	e089      	b.n	8015d78 <_dtoa_r+0x990>
 8015c64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015c66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015c6a:	e74b      	b.n	8015b04 <_dtoa_r+0x71c>
 8015c6c:	9b03      	ldr	r3, [sp, #12]
 8015c6e:	1e5e      	subs	r6, r3, #1
 8015c70:	9b07      	ldr	r3, [sp, #28]
 8015c72:	42b3      	cmp	r3, r6
 8015c74:	bfbf      	itttt	lt
 8015c76:	9b07      	ldrlt	r3, [sp, #28]
 8015c78:	9607      	strlt	r6, [sp, #28]
 8015c7a:	1af2      	sublt	r2, r6, r3
 8015c7c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8015c7e:	bfb6      	itet	lt
 8015c80:	189b      	addlt	r3, r3, r2
 8015c82:	1b9e      	subge	r6, r3, r6
 8015c84:	930a      	strlt	r3, [sp, #40]	; 0x28
 8015c86:	9b03      	ldr	r3, [sp, #12]
 8015c88:	bfb8      	it	lt
 8015c8a:	2600      	movlt	r6, #0
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	bfb7      	itett	lt
 8015c90:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8015c94:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8015c98:	1a9d      	sublt	r5, r3, r2
 8015c9a:	2300      	movlt	r3, #0
 8015c9c:	e734      	b.n	8015b08 <_dtoa_r+0x720>
 8015c9e:	9e07      	ldr	r6, [sp, #28]
 8015ca0:	9d04      	ldr	r5, [sp, #16]
 8015ca2:	9f08      	ldr	r7, [sp, #32]
 8015ca4:	e73b      	b.n	8015b1e <_dtoa_r+0x736>
 8015ca6:	9a07      	ldr	r2, [sp, #28]
 8015ca8:	e767      	b.n	8015b7a <_dtoa_r+0x792>
 8015caa:	9b06      	ldr	r3, [sp, #24]
 8015cac:	2b01      	cmp	r3, #1
 8015cae:	dc18      	bgt.n	8015ce2 <_dtoa_r+0x8fa>
 8015cb0:	f1ba 0f00 	cmp.w	sl, #0
 8015cb4:	d115      	bne.n	8015ce2 <_dtoa_r+0x8fa>
 8015cb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015cba:	b993      	cbnz	r3, 8015ce2 <_dtoa_r+0x8fa>
 8015cbc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015cc0:	0d1b      	lsrs	r3, r3, #20
 8015cc2:	051b      	lsls	r3, r3, #20
 8015cc4:	b183      	cbz	r3, 8015ce8 <_dtoa_r+0x900>
 8015cc6:	9b04      	ldr	r3, [sp, #16]
 8015cc8:	3301      	adds	r3, #1
 8015cca:	9304      	str	r3, [sp, #16]
 8015ccc:	9b05      	ldr	r3, [sp, #20]
 8015cce:	3301      	adds	r3, #1
 8015cd0:	9305      	str	r3, [sp, #20]
 8015cd2:	f04f 0801 	mov.w	r8, #1
 8015cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	f47f af6a 	bne.w	8015bb2 <_dtoa_r+0x7ca>
 8015cde:	2001      	movs	r0, #1
 8015ce0:	e76f      	b.n	8015bc2 <_dtoa_r+0x7da>
 8015ce2:	f04f 0800 	mov.w	r8, #0
 8015ce6:	e7f6      	b.n	8015cd6 <_dtoa_r+0x8ee>
 8015ce8:	4698      	mov	r8, r3
 8015cea:	e7f4      	b.n	8015cd6 <_dtoa_r+0x8ee>
 8015cec:	f43f af7d 	beq.w	8015bea <_dtoa_r+0x802>
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	301c      	adds	r0, #28
 8015cf4:	e772      	b.n	8015bdc <_dtoa_r+0x7f4>
 8015cf6:	9b03      	ldr	r3, [sp, #12]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	dc37      	bgt.n	8015d6c <_dtoa_r+0x984>
 8015cfc:	9b06      	ldr	r3, [sp, #24]
 8015cfe:	2b02      	cmp	r3, #2
 8015d00:	dd34      	ble.n	8015d6c <_dtoa_r+0x984>
 8015d02:	9b03      	ldr	r3, [sp, #12]
 8015d04:	9302      	str	r3, [sp, #8]
 8015d06:	9b02      	ldr	r3, [sp, #8]
 8015d08:	b96b      	cbnz	r3, 8015d26 <_dtoa_r+0x93e>
 8015d0a:	4631      	mov	r1, r6
 8015d0c:	2205      	movs	r2, #5
 8015d0e:	4620      	mov	r0, r4
 8015d10:	f000 fae8 	bl	80162e4 <__multadd>
 8015d14:	4601      	mov	r1, r0
 8015d16:	4606      	mov	r6, r0
 8015d18:	ee18 0a10 	vmov	r0, s16
 8015d1c:	f000 fd02 	bl	8016724 <__mcmp>
 8015d20:	2800      	cmp	r0, #0
 8015d22:	f73f adbb 	bgt.w	801589c <_dtoa_r+0x4b4>
 8015d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d28:	9d01      	ldr	r5, [sp, #4]
 8015d2a:	43db      	mvns	r3, r3
 8015d2c:	9300      	str	r3, [sp, #0]
 8015d2e:	f04f 0800 	mov.w	r8, #0
 8015d32:	4631      	mov	r1, r6
 8015d34:	4620      	mov	r0, r4
 8015d36:	f000 fab3 	bl	80162a0 <_Bfree>
 8015d3a:	2f00      	cmp	r7, #0
 8015d3c:	f43f aea4 	beq.w	8015a88 <_dtoa_r+0x6a0>
 8015d40:	f1b8 0f00 	cmp.w	r8, #0
 8015d44:	d005      	beq.n	8015d52 <_dtoa_r+0x96a>
 8015d46:	45b8      	cmp	r8, r7
 8015d48:	d003      	beq.n	8015d52 <_dtoa_r+0x96a>
 8015d4a:	4641      	mov	r1, r8
 8015d4c:	4620      	mov	r0, r4
 8015d4e:	f000 faa7 	bl	80162a0 <_Bfree>
 8015d52:	4639      	mov	r1, r7
 8015d54:	4620      	mov	r0, r4
 8015d56:	f000 faa3 	bl	80162a0 <_Bfree>
 8015d5a:	e695      	b.n	8015a88 <_dtoa_r+0x6a0>
 8015d5c:	2600      	movs	r6, #0
 8015d5e:	4637      	mov	r7, r6
 8015d60:	e7e1      	b.n	8015d26 <_dtoa_r+0x93e>
 8015d62:	9700      	str	r7, [sp, #0]
 8015d64:	4637      	mov	r7, r6
 8015d66:	e599      	b.n	801589c <_dtoa_r+0x4b4>
 8015d68:	40240000 	.word	0x40240000
 8015d6c:	9b08      	ldr	r3, [sp, #32]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	f000 80ca 	beq.w	8015f08 <_dtoa_r+0xb20>
 8015d74:	9b03      	ldr	r3, [sp, #12]
 8015d76:	9302      	str	r3, [sp, #8]
 8015d78:	2d00      	cmp	r5, #0
 8015d7a:	dd05      	ble.n	8015d88 <_dtoa_r+0x9a0>
 8015d7c:	4639      	mov	r1, r7
 8015d7e:	462a      	mov	r2, r5
 8015d80:	4620      	mov	r0, r4
 8015d82:	f000 fc5f 	bl	8016644 <__lshift>
 8015d86:	4607      	mov	r7, r0
 8015d88:	f1b8 0f00 	cmp.w	r8, #0
 8015d8c:	d05b      	beq.n	8015e46 <_dtoa_r+0xa5e>
 8015d8e:	6879      	ldr	r1, [r7, #4]
 8015d90:	4620      	mov	r0, r4
 8015d92:	f000 fa45 	bl	8016220 <_Balloc>
 8015d96:	4605      	mov	r5, r0
 8015d98:	b928      	cbnz	r0, 8015da6 <_dtoa_r+0x9be>
 8015d9a:	4b87      	ldr	r3, [pc, #540]	; (8015fb8 <_dtoa_r+0xbd0>)
 8015d9c:	4602      	mov	r2, r0
 8015d9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015da2:	f7ff bb3b 	b.w	801541c <_dtoa_r+0x34>
 8015da6:	693a      	ldr	r2, [r7, #16]
 8015da8:	3202      	adds	r2, #2
 8015daa:	0092      	lsls	r2, r2, #2
 8015dac:	f107 010c 	add.w	r1, r7, #12
 8015db0:	300c      	adds	r0, #12
 8015db2:	f7fe fcc5 	bl	8014740 <memcpy>
 8015db6:	2201      	movs	r2, #1
 8015db8:	4629      	mov	r1, r5
 8015dba:	4620      	mov	r0, r4
 8015dbc:	f000 fc42 	bl	8016644 <__lshift>
 8015dc0:	9b01      	ldr	r3, [sp, #4]
 8015dc2:	f103 0901 	add.w	r9, r3, #1
 8015dc6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8015dca:	4413      	add	r3, r2
 8015dcc:	9305      	str	r3, [sp, #20]
 8015dce:	f00a 0301 	and.w	r3, sl, #1
 8015dd2:	46b8      	mov	r8, r7
 8015dd4:	9304      	str	r3, [sp, #16]
 8015dd6:	4607      	mov	r7, r0
 8015dd8:	4631      	mov	r1, r6
 8015dda:	ee18 0a10 	vmov	r0, s16
 8015dde:	f7ff fa75 	bl	80152cc <quorem>
 8015de2:	4641      	mov	r1, r8
 8015de4:	9002      	str	r0, [sp, #8]
 8015de6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8015dea:	ee18 0a10 	vmov	r0, s16
 8015dee:	f000 fc99 	bl	8016724 <__mcmp>
 8015df2:	463a      	mov	r2, r7
 8015df4:	9003      	str	r0, [sp, #12]
 8015df6:	4631      	mov	r1, r6
 8015df8:	4620      	mov	r0, r4
 8015dfa:	f000 fcaf 	bl	801675c <__mdiff>
 8015dfe:	68c2      	ldr	r2, [r0, #12]
 8015e00:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8015e04:	4605      	mov	r5, r0
 8015e06:	bb02      	cbnz	r2, 8015e4a <_dtoa_r+0xa62>
 8015e08:	4601      	mov	r1, r0
 8015e0a:	ee18 0a10 	vmov	r0, s16
 8015e0e:	f000 fc89 	bl	8016724 <__mcmp>
 8015e12:	4602      	mov	r2, r0
 8015e14:	4629      	mov	r1, r5
 8015e16:	4620      	mov	r0, r4
 8015e18:	9207      	str	r2, [sp, #28]
 8015e1a:	f000 fa41 	bl	80162a0 <_Bfree>
 8015e1e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8015e22:	ea43 0102 	orr.w	r1, r3, r2
 8015e26:	9b04      	ldr	r3, [sp, #16]
 8015e28:	430b      	orrs	r3, r1
 8015e2a:	464d      	mov	r5, r9
 8015e2c:	d10f      	bne.n	8015e4e <_dtoa_r+0xa66>
 8015e2e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015e32:	d02a      	beq.n	8015e8a <_dtoa_r+0xaa2>
 8015e34:	9b03      	ldr	r3, [sp, #12]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	dd02      	ble.n	8015e40 <_dtoa_r+0xa58>
 8015e3a:	9b02      	ldr	r3, [sp, #8]
 8015e3c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8015e40:	f88b a000 	strb.w	sl, [fp]
 8015e44:	e775      	b.n	8015d32 <_dtoa_r+0x94a>
 8015e46:	4638      	mov	r0, r7
 8015e48:	e7ba      	b.n	8015dc0 <_dtoa_r+0x9d8>
 8015e4a:	2201      	movs	r2, #1
 8015e4c:	e7e2      	b.n	8015e14 <_dtoa_r+0xa2c>
 8015e4e:	9b03      	ldr	r3, [sp, #12]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	db04      	blt.n	8015e5e <_dtoa_r+0xa76>
 8015e54:	9906      	ldr	r1, [sp, #24]
 8015e56:	430b      	orrs	r3, r1
 8015e58:	9904      	ldr	r1, [sp, #16]
 8015e5a:	430b      	orrs	r3, r1
 8015e5c:	d122      	bne.n	8015ea4 <_dtoa_r+0xabc>
 8015e5e:	2a00      	cmp	r2, #0
 8015e60:	ddee      	ble.n	8015e40 <_dtoa_r+0xa58>
 8015e62:	ee18 1a10 	vmov	r1, s16
 8015e66:	2201      	movs	r2, #1
 8015e68:	4620      	mov	r0, r4
 8015e6a:	f000 fbeb 	bl	8016644 <__lshift>
 8015e6e:	4631      	mov	r1, r6
 8015e70:	ee08 0a10 	vmov	s16, r0
 8015e74:	f000 fc56 	bl	8016724 <__mcmp>
 8015e78:	2800      	cmp	r0, #0
 8015e7a:	dc03      	bgt.n	8015e84 <_dtoa_r+0xa9c>
 8015e7c:	d1e0      	bne.n	8015e40 <_dtoa_r+0xa58>
 8015e7e:	f01a 0f01 	tst.w	sl, #1
 8015e82:	d0dd      	beq.n	8015e40 <_dtoa_r+0xa58>
 8015e84:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015e88:	d1d7      	bne.n	8015e3a <_dtoa_r+0xa52>
 8015e8a:	2339      	movs	r3, #57	; 0x39
 8015e8c:	f88b 3000 	strb.w	r3, [fp]
 8015e90:	462b      	mov	r3, r5
 8015e92:	461d      	mov	r5, r3
 8015e94:	3b01      	subs	r3, #1
 8015e96:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015e9a:	2a39      	cmp	r2, #57	; 0x39
 8015e9c:	d071      	beq.n	8015f82 <_dtoa_r+0xb9a>
 8015e9e:	3201      	adds	r2, #1
 8015ea0:	701a      	strb	r2, [r3, #0]
 8015ea2:	e746      	b.n	8015d32 <_dtoa_r+0x94a>
 8015ea4:	2a00      	cmp	r2, #0
 8015ea6:	dd07      	ble.n	8015eb8 <_dtoa_r+0xad0>
 8015ea8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015eac:	d0ed      	beq.n	8015e8a <_dtoa_r+0xaa2>
 8015eae:	f10a 0301 	add.w	r3, sl, #1
 8015eb2:	f88b 3000 	strb.w	r3, [fp]
 8015eb6:	e73c      	b.n	8015d32 <_dtoa_r+0x94a>
 8015eb8:	9b05      	ldr	r3, [sp, #20]
 8015eba:	f809 ac01 	strb.w	sl, [r9, #-1]
 8015ebe:	4599      	cmp	r9, r3
 8015ec0:	d047      	beq.n	8015f52 <_dtoa_r+0xb6a>
 8015ec2:	ee18 1a10 	vmov	r1, s16
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	220a      	movs	r2, #10
 8015eca:	4620      	mov	r0, r4
 8015ecc:	f000 fa0a 	bl	80162e4 <__multadd>
 8015ed0:	45b8      	cmp	r8, r7
 8015ed2:	ee08 0a10 	vmov	s16, r0
 8015ed6:	f04f 0300 	mov.w	r3, #0
 8015eda:	f04f 020a 	mov.w	r2, #10
 8015ede:	4641      	mov	r1, r8
 8015ee0:	4620      	mov	r0, r4
 8015ee2:	d106      	bne.n	8015ef2 <_dtoa_r+0xb0a>
 8015ee4:	f000 f9fe 	bl	80162e4 <__multadd>
 8015ee8:	4680      	mov	r8, r0
 8015eea:	4607      	mov	r7, r0
 8015eec:	f109 0901 	add.w	r9, r9, #1
 8015ef0:	e772      	b.n	8015dd8 <_dtoa_r+0x9f0>
 8015ef2:	f000 f9f7 	bl	80162e4 <__multadd>
 8015ef6:	4639      	mov	r1, r7
 8015ef8:	4680      	mov	r8, r0
 8015efa:	2300      	movs	r3, #0
 8015efc:	220a      	movs	r2, #10
 8015efe:	4620      	mov	r0, r4
 8015f00:	f000 f9f0 	bl	80162e4 <__multadd>
 8015f04:	4607      	mov	r7, r0
 8015f06:	e7f1      	b.n	8015eec <_dtoa_r+0xb04>
 8015f08:	9b03      	ldr	r3, [sp, #12]
 8015f0a:	9302      	str	r3, [sp, #8]
 8015f0c:	9d01      	ldr	r5, [sp, #4]
 8015f0e:	ee18 0a10 	vmov	r0, s16
 8015f12:	4631      	mov	r1, r6
 8015f14:	f7ff f9da 	bl	80152cc <quorem>
 8015f18:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8015f1c:	9b01      	ldr	r3, [sp, #4]
 8015f1e:	f805 ab01 	strb.w	sl, [r5], #1
 8015f22:	1aea      	subs	r2, r5, r3
 8015f24:	9b02      	ldr	r3, [sp, #8]
 8015f26:	4293      	cmp	r3, r2
 8015f28:	dd09      	ble.n	8015f3e <_dtoa_r+0xb56>
 8015f2a:	ee18 1a10 	vmov	r1, s16
 8015f2e:	2300      	movs	r3, #0
 8015f30:	220a      	movs	r2, #10
 8015f32:	4620      	mov	r0, r4
 8015f34:	f000 f9d6 	bl	80162e4 <__multadd>
 8015f38:	ee08 0a10 	vmov	s16, r0
 8015f3c:	e7e7      	b.n	8015f0e <_dtoa_r+0xb26>
 8015f3e:	9b02      	ldr	r3, [sp, #8]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	bfc8      	it	gt
 8015f44:	461d      	movgt	r5, r3
 8015f46:	9b01      	ldr	r3, [sp, #4]
 8015f48:	bfd8      	it	le
 8015f4a:	2501      	movle	r5, #1
 8015f4c:	441d      	add	r5, r3
 8015f4e:	f04f 0800 	mov.w	r8, #0
 8015f52:	ee18 1a10 	vmov	r1, s16
 8015f56:	2201      	movs	r2, #1
 8015f58:	4620      	mov	r0, r4
 8015f5a:	f000 fb73 	bl	8016644 <__lshift>
 8015f5e:	4631      	mov	r1, r6
 8015f60:	ee08 0a10 	vmov	s16, r0
 8015f64:	f000 fbde 	bl	8016724 <__mcmp>
 8015f68:	2800      	cmp	r0, #0
 8015f6a:	dc91      	bgt.n	8015e90 <_dtoa_r+0xaa8>
 8015f6c:	d102      	bne.n	8015f74 <_dtoa_r+0xb8c>
 8015f6e:	f01a 0f01 	tst.w	sl, #1
 8015f72:	d18d      	bne.n	8015e90 <_dtoa_r+0xaa8>
 8015f74:	462b      	mov	r3, r5
 8015f76:	461d      	mov	r5, r3
 8015f78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015f7c:	2a30      	cmp	r2, #48	; 0x30
 8015f7e:	d0fa      	beq.n	8015f76 <_dtoa_r+0xb8e>
 8015f80:	e6d7      	b.n	8015d32 <_dtoa_r+0x94a>
 8015f82:	9a01      	ldr	r2, [sp, #4]
 8015f84:	429a      	cmp	r2, r3
 8015f86:	d184      	bne.n	8015e92 <_dtoa_r+0xaaa>
 8015f88:	9b00      	ldr	r3, [sp, #0]
 8015f8a:	3301      	adds	r3, #1
 8015f8c:	9300      	str	r3, [sp, #0]
 8015f8e:	2331      	movs	r3, #49	; 0x31
 8015f90:	7013      	strb	r3, [r2, #0]
 8015f92:	e6ce      	b.n	8015d32 <_dtoa_r+0x94a>
 8015f94:	4b09      	ldr	r3, [pc, #36]	; (8015fbc <_dtoa_r+0xbd4>)
 8015f96:	f7ff ba95 	b.w	80154c4 <_dtoa_r+0xdc>
 8015f9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	f47f aa6e 	bne.w	801547e <_dtoa_r+0x96>
 8015fa2:	4b07      	ldr	r3, [pc, #28]	; (8015fc0 <_dtoa_r+0xbd8>)
 8015fa4:	f7ff ba8e 	b.w	80154c4 <_dtoa_r+0xdc>
 8015fa8:	9b02      	ldr	r3, [sp, #8]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	dcae      	bgt.n	8015f0c <_dtoa_r+0xb24>
 8015fae:	9b06      	ldr	r3, [sp, #24]
 8015fb0:	2b02      	cmp	r3, #2
 8015fb2:	f73f aea8 	bgt.w	8015d06 <_dtoa_r+0x91e>
 8015fb6:	e7a9      	b.n	8015f0c <_dtoa_r+0xb24>
 8015fb8:	08017bf0 	.word	0x08017bf0
 8015fbc:	08017a10 	.word	0x08017a10
 8015fc0:	08017b71 	.word	0x08017b71

08015fc4 <std>:
 8015fc4:	2300      	movs	r3, #0
 8015fc6:	b510      	push	{r4, lr}
 8015fc8:	4604      	mov	r4, r0
 8015fca:	e9c0 3300 	strd	r3, r3, [r0]
 8015fce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015fd2:	6083      	str	r3, [r0, #8]
 8015fd4:	8181      	strh	r1, [r0, #12]
 8015fd6:	6643      	str	r3, [r0, #100]	; 0x64
 8015fd8:	81c2      	strh	r2, [r0, #14]
 8015fda:	6183      	str	r3, [r0, #24]
 8015fdc:	4619      	mov	r1, r3
 8015fde:	2208      	movs	r2, #8
 8015fe0:	305c      	adds	r0, #92	; 0x5c
 8015fe2:	f7fe fbbb 	bl	801475c <memset>
 8015fe6:	4b05      	ldr	r3, [pc, #20]	; (8015ffc <std+0x38>)
 8015fe8:	6263      	str	r3, [r4, #36]	; 0x24
 8015fea:	4b05      	ldr	r3, [pc, #20]	; (8016000 <std+0x3c>)
 8015fec:	62a3      	str	r3, [r4, #40]	; 0x28
 8015fee:	4b05      	ldr	r3, [pc, #20]	; (8016004 <std+0x40>)
 8015ff0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015ff2:	4b05      	ldr	r3, [pc, #20]	; (8016008 <std+0x44>)
 8015ff4:	6224      	str	r4, [r4, #32]
 8015ff6:	6323      	str	r3, [r4, #48]	; 0x30
 8015ff8:	bd10      	pop	{r4, pc}
 8015ffa:	bf00      	nop
 8015ffc:	08016ec1 	.word	0x08016ec1
 8016000:	08016ee3 	.word	0x08016ee3
 8016004:	08016f1b 	.word	0x08016f1b
 8016008:	08016f3f 	.word	0x08016f3f

0801600c <_cleanup_r>:
 801600c:	4901      	ldr	r1, [pc, #4]	; (8016014 <_cleanup_r+0x8>)
 801600e:	f000 b8c1 	b.w	8016194 <_fwalk_reent>
 8016012:	bf00      	nop
 8016014:	08017245 	.word	0x08017245

08016018 <__sfmoreglue>:
 8016018:	b570      	push	{r4, r5, r6, lr}
 801601a:	2268      	movs	r2, #104	; 0x68
 801601c:	1e4d      	subs	r5, r1, #1
 801601e:	4355      	muls	r5, r2
 8016020:	460e      	mov	r6, r1
 8016022:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016026:	f7fe fc0d 	bl	8014844 <_malloc_r>
 801602a:	4604      	mov	r4, r0
 801602c:	b140      	cbz	r0, 8016040 <__sfmoreglue+0x28>
 801602e:	2100      	movs	r1, #0
 8016030:	e9c0 1600 	strd	r1, r6, [r0]
 8016034:	300c      	adds	r0, #12
 8016036:	60a0      	str	r0, [r4, #8]
 8016038:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801603c:	f7fe fb8e 	bl	801475c <memset>
 8016040:	4620      	mov	r0, r4
 8016042:	bd70      	pop	{r4, r5, r6, pc}

08016044 <__sfp_lock_acquire>:
 8016044:	4801      	ldr	r0, [pc, #4]	; (801604c <__sfp_lock_acquire+0x8>)
 8016046:	f000 b8ca 	b.w	80161de <__retarget_lock_acquire_recursive>
 801604a:	bf00      	nop
 801604c:	20002f65 	.word	0x20002f65

08016050 <__sfp_lock_release>:
 8016050:	4801      	ldr	r0, [pc, #4]	; (8016058 <__sfp_lock_release+0x8>)
 8016052:	f000 b8c5 	b.w	80161e0 <__retarget_lock_release_recursive>
 8016056:	bf00      	nop
 8016058:	20002f65 	.word	0x20002f65

0801605c <__sinit_lock_acquire>:
 801605c:	4801      	ldr	r0, [pc, #4]	; (8016064 <__sinit_lock_acquire+0x8>)
 801605e:	f000 b8be 	b.w	80161de <__retarget_lock_acquire_recursive>
 8016062:	bf00      	nop
 8016064:	20002f66 	.word	0x20002f66

08016068 <__sinit_lock_release>:
 8016068:	4801      	ldr	r0, [pc, #4]	; (8016070 <__sinit_lock_release+0x8>)
 801606a:	f000 b8b9 	b.w	80161e0 <__retarget_lock_release_recursive>
 801606e:	bf00      	nop
 8016070:	20002f66 	.word	0x20002f66

08016074 <__sinit>:
 8016074:	b510      	push	{r4, lr}
 8016076:	4604      	mov	r4, r0
 8016078:	f7ff fff0 	bl	801605c <__sinit_lock_acquire>
 801607c:	69a3      	ldr	r3, [r4, #24]
 801607e:	b11b      	cbz	r3, 8016088 <__sinit+0x14>
 8016080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016084:	f7ff bff0 	b.w	8016068 <__sinit_lock_release>
 8016088:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801608c:	6523      	str	r3, [r4, #80]	; 0x50
 801608e:	4b13      	ldr	r3, [pc, #76]	; (80160dc <__sinit+0x68>)
 8016090:	4a13      	ldr	r2, [pc, #76]	; (80160e0 <__sinit+0x6c>)
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	62a2      	str	r2, [r4, #40]	; 0x28
 8016096:	42a3      	cmp	r3, r4
 8016098:	bf04      	itt	eq
 801609a:	2301      	moveq	r3, #1
 801609c:	61a3      	streq	r3, [r4, #24]
 801609e:	4620      	mov	r0, r4
 80160a0:	f000 f820 	bl	80160e4 <__sfp>
 80160a4:	6060      	str	r0, [r4, #4]
 80160a6:	4620      	mov	r0, r4
 80160a8:	f000 f81c 	bl	80160e4 <__sfp>
 80160ac:	60a0      	str	r0, [r4, #8]
 80160ae:	4620      	mov	r0, r4
 80160b0:	f000 f818 	bl	80160e4 <__sfp>
 80160b4:	2200      	movs	r2, #0
 80160b6:	60e0      	str	r0, [r4, #12]
 80160b8:	2104      	movs	r1, #4
 80160ba:	6860      	ldr	r0, [r4, #4]
 80160bc:	f7ff ff82 	bl	8015fc4 <std>
 80160c0:	68a0      	ldr	r0, [r4, #8]
 80160c2:	2201      	movs	r2, #1
 80160c4:	2109      	movs	r1, #9
 80160c6:	f7ff ff7d 	bl	8015fc4 <std>
 80160ca:	68e0      	ldr	r0, [r4, #12]
 80160cc:	2202      	movs	r2, #2
 80160ce:	2112      	movs	r1, #18
 80160d0:	f7ff ff78 	bl	8015fc4 <std>
 80160d4:	2301      	movs	r3, #1
 80160d6:	61a3      	str	r3, [r4, #24]
 80160d8:	e7d2      	b.n	8016080 <__sinit+0xc>
 80160da:	bf00      	nop
 80160dc:	080179fc 	.word	0x080179fc
 80160e0:	0801600d 	.word	0x0801600d

080160e4 <__sfp>:
 80160e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160e6:	4607      	mov	r7, r0
 80160e8:	f7ff ffac 	bl	8016044 <__sfp_lock_acquire>
 80160ec:	4b1e      	ldr	r3, [pc, #120]	; (8016168 <__sfp+0x84>)
 80160ee:	681e      	ldr	r6, [r3, #0]
 80160f0:	69b3      	ldr	r3, [r6, #24]
 80160f2:	b913      	cbnz	r3, 80160fa <__sfp+0x16>
 80160f4:	4630      	mov	r0, r6
 80160f6:	f7ff ffbd 	bl	8016074 <__sinit>
 80160fa:	3648      	adds	r6, #72	; 0x48
 80160fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016100:	3b01      	subs	r3, #1
 8016102:	d503      	bpl.n	801610c <__sfp+0x28>
 8016104:	6833      	ldr	r3, [r6, #0]
 8016106:	b30b      	cbz	r3, 801614c <__sfp+0x68>
 8016108:	6836      	ldr	r6, [r6, #0]
 801610a:	e7f7      	b.n	80160fc <__sfp+0x18>
 801610c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016110:	b9d5      	cbnz	r5, 8016148 <__sfp+0x64>
 8016112:	4b16      	ldr	r3, [pc, #88]	; (801616c <__sfp+0x88>)
 8016114:	60e3      	str	r3, [r4, #12]
 8016116:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801611a:	6665      	str	r5, [r4, #100]	; 0x64
 801611c:	f000 f85e 	bl	80161dc <__retarget_lock_init_recursive>
 8016120:	f7ff ff96 	bl	8016050 <__sfp_lock_release>
 8016124:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016128:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801612c:	6025      	str	r5, [r4, #0]
 801612e:	61a5      	str	r5, [r4, #24]
 8016130:	2208      	movs	r2, #8
 8016132:	4629      	mov	r1, r5
 8016134:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016138:	f7fe fb10 	bl	801475c <memset>
 801613c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016140:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016144:	4620      	mov	r0, r4
 8016146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016148:	3468      	adds	r4, #104	; 0x68
 801614a:	e7d9      	b.n	8016100 <__sfp+0x1c>
 801614c:	2104      	movs	r1, #4
 801614e:	4638      	mov	r0, r7
 8016150:	f7ff ff62 	bl	8016018 <__sfmoreglue>
 8016154:	4604      	mov	r4, r0
 8016156:	6030      	str	r0, [r6, #0]
 8016158:	2800      	cmp	r0, #0
 801615a:	d1d5      	bne.n	8016108 <__sfp+0x24>
 801615c:	f7ff ff78 	bl	8016050 <__sfp_lock_release>
 8016160:	230c      	movs	r3, #12
 8016162:	603b      	str	r3, [r7, #0]
 8016164:	e7ee      	b.n	8016144 <__sfp+0x60>
 8016166:	bf00      	nop
 8016168:	080179fc 	.word	0x080179fc
 801616c:	ffff0001 	.word	0xffff0001

08016170 <fiprintf>:
 8016170:	b40e      	push	{r1, r2, r3}
 8016172:	b503      	push	{r0, r1, lr}
 8016174:	4601      	mov	r1, r0
 8016176:	ab03      	add	r3, sp, #12
 8016178:	4805      	ldr	r0, [pc, #20]	; (8016190 <fiprintf+0x20>)
 801617a:	f853 2b04 	ldr.w	r2, [r3], #4
 801617e:	6800      	ldr	r0, [r0, #0]
 8016180:	9301      	str	r3, [sp, #4]
 8016182:	f000 fd6d 	bl	8016c60 <_vfiprintf_r>
 8016186:	b002      	add	sp, #8
 8016188:	f85d eb04 	ldr.w	lr, [sp], #4
 801618c:	b003      	add	sp, #12
 801618e:	4770      	bx	lr
 8016190:	20000184 	.word	0x20000184

08016194 <_fwalk_reent>:
 8016194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016198:	4606      	mov	r6, r0
 801619a:	4688      	mov	r8, r1
 801619c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80161a0:	2700      	movs	r7, #0
 80161a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80161a6:	f1b9 0901 	subs.w	r9, r9, #1
 80161aa:	d505      	bpl.n	80161b8 <_fwalk_reent+0x24>
 80161ac:	6824      	ldr	r4, [r4, #0]
 80161ae:	2c00      	cmp	r4, #0
 80161b0:	d1f7      	bne.n	80161a2 <_fwalk_reent+0xe>
 80161b2:	4638      	mov	r0, r7
 80161b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80161b8:	89ab      	ldrh	r3, [r5, #12]
 80161ba:	2b01      	cmp	r3, #1
 80161bc:	d907      	bls.n	80161ce <_fwalk_reent+0x3a>
 80161be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80161c2:	3301      	adds	r3, #1
 80161c4:	d003      	beq.n	80161ce <_fwalk_reent+0x3a>
 80161c6:	4629      	mov	r1, r5
 80161c8:	4630      	mov	r0, r6
 80161ca:	47c0      	blx	r8
 80161cc:	4307      	orrs	r7, r0
 80161ce:	3568      	adds	r5, #104	; 0x68
 80161d0:	e7e9      	b.n	80161a6 <_fwalk_reent+0x12>
	...

080161d4 <_localeconv_r>:
 80161d4:	4800      	ldr	r0, [pc, #0]	; (80161d8 <_localeconv_r+0x4>)
 80161d6:	4770      	bx	lr
 80161d8:	200002d8 	.word	0x200002d8

080161dc <__retarget_lock_init_recursive>:
 80161dc:	4770      	bx	lr

080161de <__retarget_lock_acquire_recursive>:
 80161de:	4770      	bx	lr

080161e0 <__retarget_lock_release_recursive>:
 80161e0:	4770      	bx	lr

080161e2 <__ascii_mbtowc>:
 80161e2:	b082      	sub	sp, #8
 80161e4:	b901      	cbnz	r1, 80161e8 <__ascii_mbtowc+0x6>
 80161e6:	a901      	add	r1, sp, #4
 80161e8:	b142      	cbz	r2, 80161fc <__ascii_mbtowc+0x1a>
 80161ea:	b14b      	cbz	r3, 8016200 <__ascii_mbtowc+0x1e>
 80161ec:	7813      	ldrb	r3, [r2, #0]
 80161ee:	600b      	str	r3, [r1, #0]
 80161f0:	7812      	ldrb	r2, [r2, #0]
 80161f2:	1e10      	subs	r0, r2, #0
 80161f4:	bf18      	it	ne
 80161f6:	2001      	movne	r0, #1
 80161f8:	b002      	add	sp, #8
 80161fa:	4770      	bx	lr
 80161fc:	4610      	mov	r0, r2
 80161fe:	e7fb      	b.n	80161f8 <__ascii_mbtowc+0x16>
 8016200:	f06f 0001 	mvn.w	r0, #1
 8016204:	e7f8      	b.n	80161f8 <__ascii_mbtowc+0x16>
	...

08016208 <__malloc_lock>:
 8016208:	4801      	ldr	r0, [pc, #4]	; (8016210 <__malloc_lock+0x8>)
 801620a:	f7ff bfe8 	b.w	80161de <__retarget_lock_acquire_recursive>
 801620e:	bf00      	nop
 8016210:	20002f64 	.word	0x20002f64

08016214 <__malloc_unlock>:
 8016214:	4801      	ldr	r0, [pc, #4]	; (801621c <__malloc_unlock+0x8>)
 8016216:	f7ff bfe3 	b.w	80161e0 <__retarget_lock_release_recursive>
 801621a:	bf00      	nop
 801621c:	20002f64 	.word	0x20002f64

08016220 <_Balloc>:
 8016220:	b570      	push	{r4, r5, r6, lr}
 8016222:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016224:	4604      	mov	r4, r0
 8016226:	460d      	mov	r5, r1
 8016228:	b976      	cbnz	r6, 8016248 <_Balloc+0x28>
 801622a:	2010      	movs	r0, #16
 801622c:	f7fe fa80 	bl	8014730 <malloc>
 8016230:	4602      	mov	r2, r0
 8016232:	6260      	str	r0, [r4, #36]	; 0x24
 8016234:	b920      	cbnz	r0, 8016240 <_Balloc+0x20>
 8016236:	4b18      	ldr	r3, [pc, #96]	; (8016298 <_Balloc+0x78>)
 8016238:	4818      	ldr	r0, [pc, #96]	; (801629c <_Balloc+0x7c>)
 801623a:	2166      	movs	r1, #102	; 0x66
 801623c:	f7ff f828 	bl	8015290 <__assert_func>
 8016240:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016244:	6006      	str	r6, [r0, #0]
 8016246:	60c6      	str	r6, [r0, #12]
 8016248:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801624a:	68f3      	ldr	r3, [r6, #12]
 801624c:	b183      	cbz	r3, 8016270 <_Balloc+0x50>
 801624e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016250:	68db      	ldr	r3, [r3, #12]
 8016252:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016256:	b9b8      	cbnz	r0, 8016288 <_Balloc+0x68>
 8016258:	2101      	movs	r1, #1
 801625a:	fa01 f605 	lsl.w	r6, r1, r5
 801625e:	1d72      	adds	r2, r6, #5
 8016260:	0092      	lsls	r2, r2, #2
 8016262:	4620      	mov	r0, r4
 8016264:	f000 fb60 	bl	8016928 <_calloc_r>
 8016268:	b160      	cbz	r0, 8016284 <_Balloc+0x64>
 801626a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801626e:	e00e      	b.n	801628e <_Balloc+0x6e>
 8016270:	2221      	movs	r2, #33	; 0x21
 8016272:	2104      	movs	r1, #4
 8016274:	4620      	mov	r0, r4
 8016276:	f000 fb57 	bl	8016928 <_calloc_r>
 801627a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801627c:	60f0      	str	r0, [r6, #12]
 801627e:	68db      	ldr	r3, [r3, #12]
 8016280:	2b00      	cmp	r3, #0
 8016282:	d1e4      	bne.n	801624e <_Balloc+0x2e>
 8016284:	2000      	movs	r0, #0
 8016286:	bd70      	pop	{r4, r5, r6, pc}
 8016288:	6802      	ldr	r2, [r0, #0]
 801628a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801628e:	2300      	movs	r3, #0
 8016290:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016294:	e7f7      	b.n	8016286 <_Balloc+0x66>
 8016296:	bf00      	nop
 8016298:	08017b7e 	.word	0x08017b7e
 801629c:	08017c6e 	.word	0x08017c6e

080162a0 <_Bfree>:
 80162a0:	b570      	push	{r4, r5, r6, lr}
 80162a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80162a4:	4605      	mov	r5, r0
 80162a6:	460c      	mov	r4, r1
 80162a8:	b976      	cbnz	r6, 80162c8 <_Bfree+0x28>
 80162aa:	2010      	movs	r0, #16
 80162ac:	f7fe fa40 	bl	8014730 <malloc>
 80162b0:	4602      	mov	r2, r0
 80162b2:	6268      	str	r0, [r5, #36]	; 0x24
 80162b4:	b920      	cbnz	r0, 80162c0 <_Bfree+0x20>
 80162b6:	4b09      	ldr	r3, [pc, #36]	; (80162dc <_Bfree+0x3c>)
 80162b8:	4809      	ldr	r0, [pc, #36]	; (80162e0 <_Bfree+0x40>)
 80162ba:	218a      	movs	r1, #138	; 0x8a
 80162bc:	f7fe ffe8 	bl	8015290 <__assert_func>
 80162c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80162c4:	6006      	str	r6, [r0, #0]
 80162c6:	60c6      	str	r6, [r0, #12]
 80162c8:	b13c      	cbz	r4, 80162da <_Bfree+0x3a>
 80162ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80162cc:	6862      	ldr	r2, [r4, #4]
 80162ce:	68db      	ldr	r3, [r3, #12]
 80162d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80162d4:	6021      	str	r1, [r4, #0]
 80162d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80162da:	bd70      	pop	{r4, r5, r6, pc}
 80162dc:	08017b7e 	.word	0x08017b7e
 80162e0:	08017c6e 	.word	0x08017c6e

080162e4 <__multadd>:
 80162e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162e8:	690d      	ldr	r5, [r1, #16]
 80162ea:	4607      	mov	r7, r0
 80162ec:	460c      	mov	r4, r1
 80162ee:	461e      	mov	r6, r3
 80162f0:	f101 0c14 	add.w	ip, r1, #20
 80162f4:	2000      	movs	r0, #0
 80162f6:	f8dc 3000 	ldr.w	r3, [ip]
 80162fa:	b299      	uxth	r1, r3
 80162fc:	fb02 6101 	mla	r1, r2, r1, r6
 8016300:	0c1e      	lsrs	r6, r3, #16
 8016302:	0c0b      	lsrs	r3, r1, #16
 8016304:	fb02 3306 	mla	r3, r2, r6, r3
 8016308:	b289      	uxth	r1, r1
 801630a:	3001      	adds	r0, #1
 801630c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016310:	4285      	cmp	r5, r0
 8016312:	f84c 1b04 	str.w	r1, [ip], #4
 8016316:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801631a:	dcec      	bgt.n	80162f6 <__multadd+0x12>
 801631c:	b30e      	cbz	r6, 8016362 <__multadd+0x7e>
 801631e:	68a3      	ldr	r3, [r4, #8]
 8016320:	42ab      	cmp	r3, r5
 8016322:	dc19      	bgt.n	8016358 <__multadd+0x74>
 8016324:	6861      	ldr	r1, [r4, #4]
 8016326:	4638      	mov	r0, r7
 8016328:	3101      	adds	r1, #1
 801632a:	f7ff ff79 	bl	8016220 <_Balloc>
 801632e:	4680      	mov	r8, r0
 8016330:	b928      	cbnz	r0, 801633e <__multadd+0x5a>
 8016332:	4602      	mov	r2, r0
 8016334:	4b0c      	ldr	r3, [pc, #48]	; (8016368 <__multadd+0x84>)
 8016336:	480d      	ldr	r0, [pc, #52]	; (801636c <__multadd+0x88>)
 8016338:	21b5      	movs	r1, #181	; 0xb5
 801633a:	f7fe ffa9 	bl	8015290 <__assert_func>
 801633e:	6922      	ldr	r2, [r4, #16]
 8016340:	3202      	adds	r2, #2
 8016342:	f104 010c 	add.w	r1, r4, #12
 8016346:	0092      	lsls	r2, r2, #2
 8016348:	300c      	adds	r0, #12
 801634a:	f7fe f9f9 	bl	8014740 <memcpy>
 801634e:	4621      	mov	r1, r4
 8016350:	4638      	mov	r0, r7
 8016352:	f7ff ffa5 	bl	80162a0 <_Bfree>
 8016356:	4644      	mov	r4, r8
 8016358:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801635c:	3501      	adds	r5, #1
 801635e:	615e      	str	r6, [r3, #20]
 8016360:	6125      	str	r5, [r4, #16]
 8016362:	4620      	mov	r0, r4
 8016364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016368:	08017bf0 	.word	0x08017bf0
 801636c:	08017c6e 	.word	0x08017c6e

08016370 <__hi0bits>:
 8016370:	0c03      	lsrs	r3, r0, #16
 8016372:	041b      	lsls	r3, r3, #16
 8016374:	b9d3      	cbnz	r3, 80163ac <__hi0bits+0x3c>
 8016376:	0400      	lsls	r0, r0, #16
 8016378:	2310      	movs	r3, #16
 801637a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801637e:	bf04      	itt	eq
 8016380:	0200      	lsleq	r0, r0, #8
 8016382:	3308      	addeq	r3, #8
 8016384:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016388:	bf04      	itt	eq
 801638a:	0100      	lsleq	r0, r0, #4
 801638c:	3304      	addeq	r3, #4
 801638e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016392:	bf04      	itt	eq
 8016394:	0080      	lsleq	r0, r0, #2
 8016396:	3302      	addeq	r3, #2
 8016398:	2800      	cmp	r0, #0
 801639a:	db05      	blt.n	80163a8 <__hi0bits+0x38>
 801639c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80163a0:	f103 0301 	add.w	r3, r3, #1
 80163a4:	bf08      	it	eq
 80163a6:	2320      	moveq	r3, #32
 80163a8:	4618      	mov	r0, r3
 80163aa:	4770      	bx	lr
 80163ac:	2300      	movs	r3, #0
 80163ae:	e7e4      	b.n	801637a <__hi0bits+0xa>

080163b0 <__lo0bits>:
 80163b0:	6803      	ldr	r3, [r0, #0]
 80163b2:	f013 0207 	ands.w	r2, r3, #7
 80163b6:	4601      	mov	r1, r0
 80163b8:	d00b      	beq.n	80163d2 <__lo0bits+0x22>
 80163ba:	07da      	lsls	r2, r3, #31
 80163bc:	d423      	bmi.n	8016406 <__lo0bits+0x56>
 80163be:	0798      	lsls	r0, r3, #30
 80163c0:	bf49      	itett	mi
 80163c2:	085b      	lsrmi	r3, r3, #1
 80163c4:	089b      	lsrpl	r3, r3, #2
 80163c6:	2001      	movmi	r0, #1
 80163c8:	600b      	strmi	r3, [r1, #0]
 80163ca:	bf5c      	itt	pl
 80163cc:	600b      	strpl	r3, [r1, #0]
 80163ce:	2002      	movpl	r0, #2
 80163d0:	4770      	bx	lr
 80163d2:	b298      	uxth	r0, r3
 80163d4:	b9a8      	cbnz	r0, 8016402 <__lo0bits+0x52>
 80163d6:	0c1b      	lsrs	r3, r3, #16
 80163d8:	2010      	movs	r0, #16
 80163da:	b2da      	uxtb	r2, r3
 80163dc:	b90a      	cbnz	r2, 80163e2 <__lo0bits+0x32>
 80163de:	3008      	adds	r0, #8
 80163e0:	0a1b      	lsrs	r3, r3, #8
 80163e2:	071a      	lsls	r2, r3, #28
 80163e4:	bf04      	itt	eq
 80163e6:	091b      	lsreq	r3, r3, #4
 80163e8:	3004      	addeq	r0, #4
 80163ea:	079a      	lsls	r2, r3, #30
 80163ec:	bf04      	itt	eq
 80163ee:	089b      	lsreq	r3, r3, #2
 80163f0:	3002      	addeq	r0, #2
 80163f2:	07da      	lsls	r2, r3, #31
 80163f4:	d403      	bmi.n	80163fe <__lo0bits+0x4e>
 80163f6:	085b      	lsrs	r3, r3, #1
 80163f8:	f100 0001 	add.w	r0, r0, #1
 80163fc:	d005      	beq.n	801640a <__lo0bits+0x5a>
 80163fe:	600b      	str	r3, [r1, #0]
 8016400:	4770      	bx	lr
 8016402:	4610      	mov	r0, r2
 8016404:	e7e9      	b.n	80163da <__lo0bits+0x2a>
 8016406:	2000      	movs	r0, #0
 8016408:	4770      	bx	lr
 801640a:	2020      	movs	r0, #32
 801640c:	4770      	bx	lr
	...

08016410 <__i2b>:
 8016410:	b510      	push	{r4, lr}
 8016412:	460c      	mov	r4, r1
 8016414:	2101      	movs	r1, #1
 8016416:	f7ff ff03 	bl	8016220 <_Balloc>
 801641a:	4602      	mov	r2, r0
 801641c:	b928      	cbnz	r0, 801642a <__i2b+0x1a>
 801641e:	4b05      	ldr	r3, [pc, #20]	; (8016434 <__i2b+0x24>)
 8016420:	4805      	ldr	r0, [pc, #20]	; (8016438 <__i2b+0x28>)
 8016422:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8016426:	f7fe ff33 	bl	8015290 <__assert_func>
 801642a:	2301      	movs	r3, #1
 801642c:	6144      	str	r4, [r0, #20]
 801642e:	6103      	str	r3, [r0, #16]
 8016430:	bd10      	pop	{r4, pc}
 8016432:	bf00      	nop
 8016434:	08017bf0 	.word	0x08017bf0
 8016438:	08017c6e 	.word	0x08017c6e

0801643c <__multiply>:
 801643c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016440:	4691      	mov	r9, r2
 8016442:	690a      	ldr	r2, [r1, #16]
 8016444:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016448:	429a      	cmp	r2, r3
 801644a:	bfb8      	it	lt
 801644c:	460b      	movlt	r3, r1
 801644e:	460c      	mov	r4, r1
 8016450:	bfbc      	itt	lt
 8016452:	464c      	movlt	r4, r9
 8016454:	4699      	movlt	r9, r3
 8016456:	6927      	ldr	r7, [r4, #16]
 8016458:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801645c:	68a3      	ldr	r3, [r4, #8]
 801645e:	6861      	ldr	r1, [r4, #4]
 8016460:	eb07 060a 	add.w	r6, r7, sl
 8016464:	42b3      	cmp	r3, r6
 8016466:	b085      	sub	sp, #20
 8016468:	bfb8      	it	lt
 801646a:	3101      	addlt	r1, #1
 801646c:	f7ff fed8 	bl	8016220 <_Balloc>
 8016470:	b930      	cbnz	r0, 8016480 <__multiply+0x44>
 8016472:	4602      	mov	r2, r0
 8016474:	4b44      	ldr	r3, [pc, #272]	; (8016588 <__multiply+0x14c>)
 8016476:	4845      	ldr	r0, [pc, #276]	; (801658c <__multiply+0x150>)
 8016478:	f240 115d 	movw	r1, #349	; 0x15d
 801647c:	f7fe ff08 	bl	8015290 <__assert_func>
 8016480:	f100 0514 	add.w	r5, r0, #20
 8016484:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016488:	462b      	mov	r3, r5
 801648a:	2200      	movs	r2, #0
 801648c:	4543      	cmp	r3, r8
 801648e:	d321      	bcc.n	80164d4 <__multiply+0x98>
 8016490:	f104 0314 	add.w	r3, r4, #20
 8016494:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8016498:	f109 0314 	add.w	r3, r9, #20
 801649c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80164a0:	9202      	str	r2, [sp, #8]
 80164a2:	1b3a      	subs	r2, r7, r4
 80164a4:	3a15      	subs	r2, #21
 80164a6:	f022 0203 	bic.w	r2, r2, #3
 80164aa:	3204      	adds	r2, #4
 80164ac:	f104 0115 	add.w	r1, r4, #21
 80164b0:	428f      	cmp	r7, r1
 80164b2:	bf38      	it	cc
 80164b4:	2204      	movcc	r2, #4
 80164b6:	9201      	str	r2, [sp, #4]
 80164b8:	9a02      	ldr	r2, [sp, #8]
 80164ba:	9303      	str	r3, [sp, #12]
 80164bc:	429a      	cmp	r2, r3
 80164be:	d80c      	bhi.n	80164da <__multiply+0x9e>
 80164c0:	2e00      	cmp	r6, #0
 80164c2:	dd03      	ble.n	80164cc <__multiply+0x90>
 80164c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d05a      	beq.n	8016582 <__multiply+0x146>
 80164cc:	6106      	str	r6, [r0, #16]
 80164ce:	b005      	add	sp, #20
 80164d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164d4:	f843 2b04 	str.w	r2, [r3], #4
 80164d8:	e7d8      	b.n	801648c <__multiply+0x50>
 80164da:	f8b3 a000 	ldrh.w	sl, [r3]
 80164de:	f1ba 0f00 	cmp.w	sl, #0
 80164e2:	d024      	beq.n	801652e <__multiply+0xf2>
 80164e4:	f104 0e14 	add.w	lr, r4, #20
 80164e8:	46a9      	mov	r9, r5
 80164ea:	f04f 0c00 	mov.w	ip, #0
 80164ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80164f2:	f8d9 1000 	ldr.w	r1, [r9]
 80164f6:	fa1f fb82 	uxth.w	fp, r2
 80164fa:	b289      	uxth	r1, r1
 80164fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8016500:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8016504:	f8d9 2000 	ldr.w	r2, [r9]
 8016508:	4461      	add	r1, ip
 801650a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801650e:	fb0a c20b 	mla	r2, sl, fp, ip
 8016512:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016516:	b289      	uxth	r1, r1
 8016518:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801651c:	4577      	cmp	r7, lr
 801651e:	f849 1b04 	str.w	r1, [r9], #4
 8016522:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016526:	d8e2      	bhi.n	80164ee <__multiply+0xb2>
 8016528:	9a01      	ldr	r2, [sp, #4]
 801652a:	f845 c002 	str.w	ip, [r5, r2]
 801652e:	9a03      	ldr	r2, [sp, #12]
 8016530:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016534:	3304      	adds	r3, #4
 8016536:	f1b9 0f00 	cmp.w	r9, #0
 801653a:	d020      	beq.n	801657e <__multiply+0x142>
 801653c:	6829      	ldr	r1, [r5, #0]
 801653e:	f104 0c14 	add.w	ip, r4, #20
 8016542:	46ae      	mov	lr, r5
 8016544:	f04f 0a00 	mov.w	sl, #0
 8016548:	f8bc b000 	ldrh.w	fp, [ip]
 801654c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8016550:	fb09 220b 	mla	r2, r9, fp, r2
 8016554:	4492      	add	sl, r2
 8016556:	b289      	uxth	r1, r1
 8016558:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801655c:	f84e 1b04 	str.w	r1, [lr], #4
 8016560:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016564:	f8be 1000 	ldrh.w	r1, [lr]
 8016568:	0c12      	lsrs	r2, r2, #16
 801656a:	fb09 1102 	mla	r1, r9, r2, r1
 801656e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8016572:	4567      	cmp	r7, ip
 8016574:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016578:	d8e6      	bhi.n	8016548 <__multiply+0x10c>
 801657a:	9a01      	ldr	r2, [sp, #4]
 801657c:	50a9      	str	r1, [r5, r2]
 801657e:	3504      	adds	r5, #4
 8016580:	e79a      	b.n	80164b8 <__multiply+0x7c>
 8016582:	3e01      	subs	r6, #1
 8016584:	e79c      	b.n	80164c0 <__multiply+0x84>
 8016586:	bf00      	nop
 8016588:	08017bf0 	.word	0x08017bf0
 801658c:	08017c6e 	.word	0x08017c6e

08016590 <__pow5mult>:
 8016590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016594:	4615      	mov	r5, r2
 8016596:	f012 0203 	ands.w	r2, r2, #3
 801659a:	4606      	mov	r6, r0
 801659c:	460f      	mov	r7, r1
 801659e:	d007      	beq.n	80165b0 <__pow5mult+0x20>
 80165a0:	4c25      	ldr	r4, [pc, #148]	; (8016638 <__pow5mult+0xa8>)
 80165a2:	3a01      	subs	r2, #1
 80165a4:	2300      	movs	r3, #0
 80165a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80165aa:	f7ff fe9b 	bl	80162e4 <__multadd>
 80165ae:	4607      	mov	r7, r0
 80165b0:	10ad      	asrs	r5, r5, #2
 80165b2:	d03d      	beq.n	8016630 <__pow5mult+0xa0>
 80165b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80165b6:	b97c      	cbnz	r4, 80165d8 <__pow5mult+0x48>
 80165b8:	2010      	movs	r0, #16
 80165ba:	f7fe f8b9 	bl	8014730 <malloc>
 80165be:	4602      	mov	r2, r0
 80165c0:	6270      	str	r0, [r6, #36]	; 0x24
 80165c2:	b928      	cbnz	r0, 80165d0 <__pow5mult+0x40>
 80165c4:	4b1d      	ldr	r3, [pc, #116]	; (801663c <__pow5mult+0xac>)
 80165c6:	481e      	ldr	r0, [pc, #120]	; (8016640 <__pow5mult+0xb0>)
 80165c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80165cc:	f7fe fe60 	bl	8015290 <__assert_func>
 80165d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80165d4:	6004      	str	r4, [r0, #0]
 80165d6:	60c4      	str	r4, [r0, #12]
 80165d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80165dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80165e0:	b94c      	cbnz	r4, 80165f6 <__pow5mult+0x66>
 80165e2:	f240 2171 	movw	r1, #625	; 0x271
 80165e6:	4630      	mov	r0, r6
 80165e8:	f7ff ff12 	bl	8016410 <__i2b>
 80165ec:	2300      	movs	r3, #0
 80165ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80165f2:	4604      	mov	r4, r0
 80165f4:	6003      	str	r3, [r0, #0]
 80165f6:	f04f 0900 	mov.w	r9, #0
 80165fa:	07eb      	lsls	r3, r5, #31
 80165fc:	d50a      	bpl.n	8016614 <__pow5mult+0x84>
 80165fe:	4639      	mov	r1, r7
 8016600:	4622      	mov	r2, r4
 8016602:	4630      	mov	r0, r6
 8016604:	f7ff ff1a 	bl	801643c <__multiply>
 8016608:	4639      	mov	r1, r7
 801660a:	4680      	mov	r8, r0
 801660c:	4630      	mov	r0, r6
 801660e:	f7ff fe47 	bl	80162a0 <_Bfree>
 8016612:	4647      	mov	r7, r8
 8016614:	106d      	asrs	r5, r5, #1
 8016616:	d00b      	beq.n	8016630 <__pow5mult+0xa0>
 8016618:	6820      	ldr	r0, [r4, #0]
 801661a:	b938      	cbnz	r0, 801662c <__pow5mult+0x9c>
 801661c:	4622      	mov	r2, r4
 801661e:	4621      	mov	r1, r4
 8016620:	4630      	mov	r0, r6
 8016622:	f7ff ff0b 	bl	801643c <__multiply>
 8016626:	6020      	str	r0, [r4, #0]
 8016628:	f8c0 9000 	str.w	r9, [r0]
 801662c:	4604      	mov	r4, r0
 801662e:	e7e4      	b.n	80165fa <__pow5mult+0x6a>
 8016630:	4638      	mov	r0, r7
 8016632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016636:	bf00      	nop
 8016638:	08017dc0 	.word	0x08017dc0
 801663c:	08017b7e 	.word	0x08017b7e
 8016640:	08017c6e 	.word	0x08017c6e

08016644 <__lshift>:
 8016644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016648:	460c      	mov	r4, r1
 801664a:	6849      	ldr	r1, [r1, #4]
 801664c:	6923      	ldr	r3, [r4, #16]
 801664e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016652:	68a3      	ldr	r3, [r4, #8]
 8016654:	4607      	mov	r7, r0
 8016656:	4691      	mov	r9, r2
 8016658:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801665c:	f108 0601 	add.w	r6, r8, #1
 8016660:	42b3      	cmp	r3, r6
 8016662:	db0b      	blt.n	801667c <__lshift+0x38>
 8016664:	4638      	mov	r0, r7
 8016666:	f7ff fddb 	bl	8016220 <_Balloc>
 801666a:	4605      	mov	r5, r0
 801666c:	b948      	cbnz	r0, 8016682 <__lshift+0x3e>
 801666e:	4602      	mov	r2, r0
 8016670:	4b2a      	ldr	r3, [pc, #168]	; (801671c <__lshift+0xd8>)
 8016672:	482b      	ldr	r0, [pc, #172]	; (8016720 <__lshift+0xdc>)
 8016674:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016678:	f7fe fe0a 	bl	8015290 <__assert_func>
 801667c:	3101      	adds	r1, #1
 801667e:	005b      	lsls	r3, r3, #1
 8016680:	e7ee      	b.n	8016660 <__lshift+0x1c>
 8016682:	2300      	movs	r3, #0
 8016684:	f100 0114 	add.w	r1, r0, #20
 8016688:	f100 0210 	add.w	r2, r0, #16
 801668c:	4618      	mov	r0, r3
 801668e:	4553      	cmp	r3, sl
 8016690:	db37      	blt.n	8016702 <__lshift+0xbe>
 8016692:	6920      	ldr	r0, [r4, #16]
 8016694:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016698:	f104 0314 	add.w	r3, r4, #20
 801669c:	f019 091f 	ands.w	r9, r9, #31
 80166a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80166a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80166a8:	d02f      	beq.n	801670a <__lshift+0xc6>
 80166aa:	f1c9 0e20 	rsb	lr, r9, #32
 80166ae:	468a      	mov	sl, r1
 80166b0:	f04f 0c00 	mov.w	ip, #0
 80166b4:	681a      	ldr	r2, [r3, #0]
 80166b6:	fa02 f209 	lsl.w	r2, r2, r9
 80166ba:	ea42 020c 	orr.w	r2, r2, ip
 80166be:	f84a 2b04 	str.w	r2, [sl], #4
 80166c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80166c6:	4298      	cmp	r0, r3
 80166c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80166cc:	d8f2      	bhi.n	80166b4 <__lshift+0x70>
 80166ce:	1b03      	subs	r3, r0, r4
 80166d0:	3b15      	subs	r3, #21
 80166d2:	f023 0303 	bic.w	r3, r3, #3
 80166d6:	3304      	adds	r3, #4
 80166d8:	f104 0215 	add.w	r2, r4, #21
 80166dc:	4290      	cmp	r0, r2
 80166de:	bf38      	it	cc
 80166e0:	2304      	movcc	r3, #4
 80166e2:	f841 c003 	str.w	ip, [r1, r3]
 80166e6:	f1bc 0f00 	cmp.w	ip, #0
 80166ea:	d001      	beq.n	80166f0 <__lshift+0xac>
 80166ec:	f108 0602 	add.w	r6, r8, #2
 80166f0:	3e01      	subs	r6, #1
 80166f2:	4638      	mov	r0, r7
 80166f4:	612e      	str	r6, [r5, #16]
 80166f6:	4621      	mov	r1, r4
 80166f8:	f7ff fdd2 	bl	80162a0 <_Bfree>
 80166fc:	4628      	mov	r0, r5
 80166fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016702:	f842 0f04 	str.w	r0, [r2, #4]!
 8016706:	3301      	adds	r3, #1
 8016708:	e7c1      	b.n	801668e <__lshift+0x4a>
 801670a:	3904      	subs	r1, #4
 801670c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016710:	f841 2f04 	str.w	r2, [r1, #4]!
 8016714:	4298      	cmp	r0, r3
 8016716:	d8f9      	bhi.n	801670c <__lshift+0xc8>
 8016718:	e7ea      	b.n	80166f0 <__lshift+0xac>
 801671a:	bf00      	nop
 801671c:	08017bf0 	.word	0x08017bf0
 8016720:	08017c6e 	.word	0x08017c6e

08016724 <__mcmp>:
 8016724:	b530      	push	{r4, r5, lr}
 8016726:	6902      	ldr	r2, [r0, #16]
 8016728:	690c      	ldr	r4, [r1, #16]
 801672a:	1b12      	subs	r2, r2, r4
 801672c:	d10e      	bne.n	801674c <__mcmp+0x28>
 801672e:	f100 0314 	add.w	r3, r0, #20
 8016732:	3114      	adds	r1, #20
 8016734:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016738:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801673c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016740:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016744:	42a5      	cmp	r5, r4
 8016746:	d003      	beq.n	8016750 <__mcmp+0x2c>
 8016748:	d305      	bcc.n	8016756 <__mcmp+0x32>
 801674a:	2201      	movs	r2, #1
 801674c:	4610      	mov	r0, r2
 801674e:	bd30      	pop	{r4, r5, pc}
 8016750:	4283      	cmp	r3, r0
 8016752:	d3f3      	bcc.n	801673c <__mcmp+0x18>
 8016754:	e7fa      	b.n	801674c <__mcmp+0x28>
 8016756:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801675a:	e7f7      	b.n	801674c <__mcmp+0x28>

0801675c <__mdiff>:
 801675c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016760:	460c      	mov	r4, r1
 8016762:	4606      	mov	r6, r0
 8016764:	4611      	mov	r1, r2
 8016766:	4620      	mov	r0, r4
 8016768:	4690      	mov	r8, r2
 801676a:	f7ff ffdb 	bl	8016724 <__mcmp>
 801676e:	1e05      	subs	r5, r0, #0
 8016770:	d110      	bne.n	8016794 <__mdiff+0x38>
 8016772:	4629      	mov	r1, r5
 8016774:	4630      	mov	r0, r6
 8016776:	f7ff fd53 	bl	8016220 <_Balloc>
 801677a:	b930      	cbnz	r0, 801678a <__mdiff+0x2e>
 801677c:	4b3a      	ldr	r3, [pc, #232]	; (8016868 <__mdiff+0x10c>)
 801677e:	4602      	mov	r2, r0
 8016780:	f240 2132 	movw	r1, #562	; 0x232
 8016784:	4839      	ldr	r0, [pc, #228]	; (801686c <__mdiff+0x110>)
 8016786:	f7fe fd83 	bl	8015290 <__assert_func>
 801678a:	2301      	movs	r3, #1
 801678c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016790:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016794:	bfa4      	itt	ge
 8016796:	4643      	movge	r3, r8
 8016798:	46a0      	movge	r8, r4
 801679a:	4630      	mov	r0, r6
 801679c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80167a0:	bfa6      	itte	ge
 80167a2:	461c      	movge	r4, r3
 80167a4:	2500      	movge	r5, #0
 80167a6:	2501      	movlt	r5, #1
 80167a8:	f7ff fd3a 	bl	8016220 <_Balloc>
 80167ac:	b920      	cbnz	r0, 80167b8 <__mdiff+0x5c>
 80167ae:	4b2e      	ldr	r3, [pc, #184]	; (8016868 <__mdiff+0x10c>)
 80167b0:	4602      	mov	r2, r0
 80167b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80167b6:	e7e5      	b.n	8016784 <__mdiff+0x28>
 80167b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80167bc:	6926      	ldr	r6, [r4, #16]
 80167be:	60c5      	str	r5, [r0, #12]
 80167c0:	f104 0914 	add.w	r9, r4, #20
 80167c4:	f108 0514 	add.w	r5, r8, #20
 80167c8:	f100 0e14 	add.w	lr, r0, #20
 80167cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80167d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80167d4:	f108 0210 	add.w	r2, r8, #16
 80167d8:	46f2      	mov	sl, lr
 80167da:	2100      	movs	r1, #0
 80167dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80167e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80167e4:	fa1f f883 	uxth.w	r8, r3
 80167e8:	fa11 f18b 	uxtah	r1, r1, fp
 80167ec:	0c1b      	lsrs	r3, r3, #16
 80167ee:	eba1 0808 	sub.w	r8, r1, r8
 80167f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80167f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80167fa:	fa1f f888 	uxth.w	r8, r8
 80167fe:	1419      	asrs	r1, r3, #16
 8016800:	454e      	cmp	r6, r9
 8016802:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016806:	f84a 3b04 	str.w	r3, [sl], #4
 801680a:	d8e7      	bhi.n	80167dc <__mdiff+0x80>
 801680c:	1b33      	subs	r3, r6, r4
 801680e:	3b15      	subs	r3, #21
 8016810:	f023 0303 	bic.w	r3, r3, #3
 8016814:	3304      	adds	r3, #4
 8016816:	3415      	adds	r4, #21
 8016818:	42a6      	cmp	r6, r4
 801681a:	bf38      	it	cc
 801681c:	2304      	movcc	r3, #4
 801681e:	441d      	add	r5, r3
 8016820:	4473      	add	r3, lr
 8016822:	469e      	mov	lr, r3
 8016824:	462e      	mov	r6, r5
 8016826:	4566      	cmp	r6, ip
 8016828:	d30e      	bcc.n	8016848 <__mdiff+0xec>
 801682a:	f10c 0203 	add.w	r2, ip, #3
 801682e:	1b52      	subs	r2, r2, r5
 8016830:	f022 0203 	bic.w	r2, r2, #3
 8016834:	3d03      	subs	r5, #3
 8016836:	45ac      	cmp	ip, r5
 8016838:	bf38      	it	cc
 801683a:	2200      	movcc	r2, #0
 801683c:	441a      	add	r2, r3
 801683e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8016842:	b17b      	cbz	r3, 8016864 <__mdiff+0x108>
 8016844:	6107      	str	r7, [r0, #16]
 8016846:	e7a3      	b.n	8016790 <__mdiff+0x34>
 8016848:	f856 8b04 	ldr.w	r8, [r6], #4
 801684c:	fa11 f288 	uxtah	r2, r1, r8
 8016850:	1414      	asrs	r4, r2, #16
 8016852:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016856:	b292      	uxth	r2, r2
 8016858:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801685c:	f84e 2b04 	str.w	r2, [lr], #4
 8016860:	1421      	asrs	r1, r4, #16
 8016862:	e7e0      	b.n	8016826 <__mdiff+0xca>
 8016864:	3f01      	subs	r7, #1
 8016866:	e7ea      	b.n	801683e <__mdiff+0xe2>
 8016868:	08017bf0 	.word	0x08017bf0
 801686c:	08017c6e 	.word	0x08017c6e

08016870 <__d2b>:
 8016870:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016874:	4689      	mov	r9, r1
 8016876:	2101      	movs	r1, #1
 8016878:	ec57 6b10 	vmov	r6, r7, d0
 801687c:	4690      	mov	r8, r2
 801687e:	f7ff fccf 	bl	8016220 <_Balloc>
 8016882:	4604      	mov	r4, r0
 8016884:	b930      	cbnz	r0, 8016894 <__d2b+0x24>
 8016886:	4602      	mov	r2, r0
 8016888:	4b25      	ldr	r3, [pc, #148]	; (8016920 <__d2b+0xb0>)
 801688a:	4826      	ldr	r0, [pc, #152]	; (8016924 <__d2b+0xb4>)
 801688c:	f240 310a 	movw	r1, #778	; 0x30a
 8016890:	f7fe fcfe 	bl	8015290 <__assert_func>
 8016894:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016898:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801689c:	bb35      	cbnz	r5, 80168ec <__d2b+0x7c>
 801689e:	2e00      	cmp	r6, #0
 80168a0:	9301      	str	r3, [sp, #4]
 80168a2:	d028      	beq.n	80168f6 <__d2b+0x86>
 80168a4:	4668      	mov	r0, sp
 80168a6:	9600      	str	r6, [sp, #0]
 80168a8:	f7ff fd82 	bl	80163b0 <__lo0bits>
 80168ac:	9900      	ldr	r1, [sp, #0]
 80168ae:	b300      	cbz	r0, 80168f2 <__d2b+0x82>
 80168b0:	9a01      	ldr	r2, [sp, #4]
 80168b2:	f1c0 0320 	rsb	r3, r0, #32
 80168b6:	fa02 f303 	lsl.w	r3, r2, r3
 80168ba:	430b      	orrs	r3, r1
 80168bc:	40c2      	lsrs	r2, r0
 80168be:	6163      	str	r3, [r4, #20]
 80168c0:	9201      	str	r2, [sp, #4]
 80168c2:	9b01      	ldr	r3, [sp, #4]
 80168c4:	61a3      	str	r3, [r4, #24]
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	bf14      	ite	ne
 80168ca:	2202      	movne	r2, #2
 80168cc:	2201      	moveq	r2, #1
 80168ce:	6122      	str	r2, [r4, #16]
 80168d0:	b1d5      	cbz	r5, 8016908 <__d2b+0x98>
 80168d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80168d6:	4405      	add	r5, r0
 80168d8:	f8c9 5000 	str.w	r5, [r9]
 80168dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80168e0:	f8c8 0000 	str.w	r0, [r8]
 80168e4:	4620      	mov	r0, r4
 80168e6:	b003      	add	sp, #12
 80168e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80168ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80168f0:	e7d5      	b.n	801689e <__d2b+0x2e>
 80168f2:	6161      	str	r1, [r4, #20]
 80168f4:	e7e5      	b.n	80168c2 <__d2b+0x52>
 80168f6:	a801      	add	r0, sp, #4
 80168f8:	f7ff fd5a 	bl	80163b0 <__lo0bits>
 80168fc:	9b01      	ldr	r3, [sp, #4]
 80168fe:	6163      	str	r3, [r4, #20]
 8016900:	2201      	movs	r2, #1
 8016902:	6122      	str	r2, [r4, #16]
 8016904:	3020      	adds	r0, #32
 8016906:	e7e3      	b.n	80168d0 <__d2b+0x60>
 8016908:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801690c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016910:	f8c9 0000 	str.w	r0, [r9]
 8016914:	6918      	ldr	r0, [r3, #16]
 8016916:	f7ff fd2b 	bl	8016370 <__hi0bits>
 801691a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801691e:	e7df      	b.n	80168e0 <__d2b+0x70>
 8016920:	08017bf0 	.word	0x08017bf0
 8016924:	08017c6e 	.word	0x08017c6e

08016928 <_calloc_r>:
 8016928:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801692a:	fba1 2402 	umull	r2, r4, r1, r2
 801692e:	b94c      	cbnz	r4, 8016944 <_calloc_r+0x1c>
 8016930:	4611      	mov	r1, r2
 8016932:	9201      	str	r2, [sp, #4]
 8016934:	f7fd ff86 	bl	8014844 <_malloc_r>
 8016938:	9a01      	ldr	r2, [sp, #4]
 801693a:	4605      	mov	r5, r0
 801693c:	b930      	cbnz	r0, 801694c <_calloc_r+0x24>
 801693e:	4628      	mov	r0, r5
 8016940:	b003      	add	sp, #12
 8016942:	bd30      	pop	{r4, r5, pc}
 8016944:	220c      	movs	r2, #12
 8016946:	6002      	str	r2, [r0, #0]
 8016948:	2500      	movs	r5, #0
 801694a:	e7f8      	b.n	801693e <_calloc_r+0x16>
 801694c:	4621      	mov	r1, r4
 801694e:	f7fd ff05 	bl	801475c <memset>
 8016952:	e7f4      	b.n	801693e <_calloc_r+0x16>

08016954 <__ssputs_r>:
 8016954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016958:	688e      	ldr	r6, [r1, #8]
 801695a:	429e      	cmp	r6, r3
 801695c:	4682      	mov	sl, r0
 801695e:	460c      	mov	r4, r1
 8016960:	4690      	mov	r8, r2
 8016962:	461f      	mov	r7, r3
 8016964:	d838      	bhi.n	80169d8 <__ssputs_r+0x84>
 8016966:	898a      	ldrh	r2, [r1, #12]
 8016968:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801696c:	d032      	beq.n	80169d4 <__ssputs_r+0x80>
 801696e:	6825      	ldr	r5, [r4, #0]
 8016970:	6909      	ldr	r1, [r1, #16]
 8016972:	eba5 0901 	sub.w	r9, r5, r1
 8016976:	6965      	ldr	r5, [r4, #20]
 8016978:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801697c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016980:	3301      	adds	r3, #1
 8016982:	444b      	add	r3, r9
 8016984:	106d      	asrs	r5, r5, #1
 8016986:	429d      	cmp	r5, r3
 8016988:	bf38      	it	cc
 801698a:	461d      	movcc	r5, r3
 801698c:	0553      	lsls	r3, r2, #21
 801698e:	d531      	bpl.n	80169f4 <__ssputs_r+0xa0>
 8016990:	4629      	mov	r1, r5
 8016992:	f7fd ff57 	bl	8014844 <_malloc_r>
 8016996:	4606      	mov	r6, r0
 8016998:	b950      	cbnz	r0, 80169b0 <__ssputs_r+0x5c>
 801699a:	230c      	movs	r3, #12
 801699c:	f8ca 3000 	str.w	r3, [sl]
 80169a0:	89a3      	ldrh	r3, [r4, #12]
 80169a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80169a6:	81a3      	strh	r3, [r4, #12]
 80169a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80169ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169b0:	6921      	ldr	r1, [r4, #16]
 80169b2:	464a      	mov	r2, r9
 80169b4:	f7fd fec4 	bl	8014740 <memcpy>
 80169b8:	89a3      	ldrh	r3, [r4, #12]
 80169ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80169be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80169c2:	81a3      	strh	r3, [r4, #12]
 80169c4:	6126      	str	r6, [r4, #16]
 80169c6:	6165      	str	r5, [r4, #20]
 80169c8:	444e      	add	r6, r9
 80169ca:	eba5 0509 	sub.w	r5, r5, r9
 80169ce:	6026      	str	r6, [r4, #0]
 80169d0:	60a5      	str	r5, [r4, #8]
 80169d2:	463e      	mov	r6, r7
 80169d4:	42be      	cmp	r6, r7
 80169d6:	d900      	bls.n	80169da <__ssputs_r+0x86>
 80169d8:	463e      	mov	r6, r7
 80169da:	6820      	ldr	r0, [r4, #0]
 80169dc:	4632      	mov	r2, r6
 80169de:	4641      	mov	r1, r8
 80169e0:	f000 fce4 	bl	80173ac <memmove>
 80169e4:	68a3      	ldr	r3, [r4, #8]
 80169e6:	1b9b      	subs	r3, r3, r6
 80169e8:	60a3      	str	r3, [r4, #8]
 80169ea:	6823      	ldr	r3, [r4, #0]
 80169ec:	4433      	add	r3, r6
 80169ee:	6023      	str	r3, [r4, #0]
 80169f0:	2000      	movs	r0, #0
 80169f2:	e7db      	b.n	80169ac <__ssputs_r+0x58>
 80169f4:	462a      	mov	r2, r5
 80169f6:	f000 fcf3 	bl	80173e0 <_realloc_r>
 80169fa:	4606      	mov	r6, r0
 80169fc:	2800      	cmp	r0, #0
 80169fe:	d1e1      	bne.n	80169c4 <__ssputs_r+0x70>
 8016a00:	6921      	ldr	r1, [r4, #16]
 8016a02:	4650      	mov	r0, sl
 8016a04:	f7fd feb2 	bl	801476c <_free_r>
 8016a08:	e7c7      	b.n	801699a <__ssputs_r+0x46>
	...

08016a0c <_svfiprintf_r>:
 8016a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a10:	4698      	mov	r8, r3
 8016a12:	898b      	ldrh	r3, [r1, #12]
 8016a14:	061b      	lsls	r3, r3, #24
 8016a16:	b09d      	sub	sp, #116	; 0x74
 8016a18:	4607      	mov	r7, r0
 8016a1a:	460d      	mov	r5, r1
 8016a1c:	4614      	mov	r4, r2
 8016a1e:	d50e      	bpl.n	8016a3e <_svfiprintf_r+0x32>
 8016a20:	690b      	ldr	r3, [r1, #16]
 8016a22:	b963      	cbnz	r3, 8016a3e <_svfiprintf_r+0x32>
 8016a24:	2140      	movs	r1, #64	; 0x40
 8016a26:	f7fd ff0d 	bl	8014844 <_malloc_r>
 8016a2a:	6028      	str	r0, [r5, #0]
 8016a2c:	6128      	str	r0, [r5, #16]
 8016a2e:	b920      	cbnz	r0, 8016a3a <_svfiprintf_r+0x2e>
 8016a30:	230c      	movs	r3, #12
 8016a32:	603b      	str	r3, [r7, #0]
 8016a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016a38:	e0d1      	b.n	8016bde <_svfiprintf_r+0x1d2>
 8016a3a:	2340      	movs	r3, #64	; 0x40
 8016a3c:	616b      	str	r3, [r5, #20]
 8016a3e:	2300      	movs	r3, #0
 8016a40:	9309      	str	r3, [sp, #36]	; 0x24
 8016a42:	2320      	movs	r3, #32
 8016a44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016a48:	f8cd 800c 	str.w	r8, [sp, #12]
 8016a4c:	2330      	movs	r3, #48	; 0x30
 8016a4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016bf8 <_svfiprintf_r+0x1ec>
 8016a52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016a56:	f04f 0901 	mov.w	r9, #1
 8016a5a:	4623      	mov	r3, r4
 8016a5c:	469a      	mov	sl, r3
 8016a5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016a62:	b10a      	cbz	r2, 8016a68 <_svfiprintf_r+0x5c>
 8016a64:	2a25      	cmp	r2, #37	; 0x25
 8016a66:	d1f9      	bne.n	8016a5c <_svfiprintf_r+0x50>
 8016a68:	ebba 0b04 	subs.w	fp, sl, r4
 8016a6c:	d00b      	beq.n	8016a86 <_svfiprintf_r+0x7a>
 8016a6e:	465b      	mov	r3, fp
 8016a70:	4622      	mov	r2, r4
 8016a72:	4629      	mov	r1, r5
 8016a74:	4638      	mov	r0, r7
 8016a76:	f7ff ff6d 	bl	8016954 <__ssputs_r>
 8016a7a:	3001      	adds	r0, #1
 8016a7c:	f000 80aa 	beq.w	8016bd4 <_svfiprintf_r+0x1c8>
 8016a80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016a82:	445a      	add	r2, fp
 8016a84:	9209      	str	r2, [sp, #36]	; 0x24
 8016a86:	f89a 3000 	ldrb.w	r3, [sl]
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	f000 80a2 	beq.w	8016bd4 <_svfiprintf_r+0x1c8>
 8016a90:	2300      	movs	r3, #0
 8016a92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016a96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016a9a:	f10a 0a01 	add.w	sl, sl, #1
 8016a9e:	9304      	str	r3, [sp, #16]
 8016aa0:	9307      	str	r3, [sp, #28]
 8016aa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016aa6:	931a      	str	r3, [sp, #104]	; 0x68
 8016aa8:	4654      	mov	r4, sl
 8016aaa:	2205      	movs	r2, #5
 8016aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ab0:	4851      	ldr	r0, [pc, #324]	; (8016bf8 <_svfiprintf_r+0x1ec>)
 8016ab2:	f7e9 fbad 	bl	8000210 <memchr>
 8016ab6:	9a04      	ldr	r2, [sp, #16]
 8016ab8:	b9d8      	cbnz	r0, 8016af2 <_svfiprintf_r+0xe6>
 8016aba:	06d0      	lsls	r0, r2, #27
 8016abc:	bf44      	itt	mi
 8016abe:	2320      	movmi	r3, #32
 8016ac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016ac4:	0711      	lsls	r1, r2, #28
 8016ac6:	bf44      	itt	mi
 8016ac8:	232b      	movmi	r3, #43	; 0x2b
 8016aca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016ace:	f89a 3000 	ldrb.w	r3, [sl]
 8016ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8016ad4:	d015      	beq.n	8016b02 <_svfiprintf_r+0xf6>
 8016ad6:	9a07      	ldr	r2, [sp, #28]
 8016ad8:	4654      	mov	r4, sl
 8016ada:	2000      	movs	r0, #0
 8016adc:	f04f 0c0a 	mov.w	ip, #10
 8016ae0:	4621      	mov	r1, r4
 8016ae2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016ae6:	3b30      	subs	r3, #48	; 0x30
 8016ae8:	2b09      	cmp	r3, #9
 8016aea:	d94e      	bls.n	8016b8a <_svfiprintf_r+0x17e>
 8016aec:	b1b0      	cbz	r0, 8016b1c <_svfiprintf_r+0x110>
 8016aee:	9207      	str	r2, [sp, #28]
 8016af0:	e014      	b.n	8016b1c <_svfiprintf_r+0x110>
 8016af2:	eba0 0308 	sub.w	r3, r0, r8
 8016af6:	fa09 f303 	lsl.w	r3, r9, r3
 8016afa:	4313      	orrs	r3, r2
 8016afc:	9304      	str	r3, [sp, #16]
 8016afe:	46a2      	mov	sl, r4
 8016b00:	e7d2      	b.n	8016aa8 <_svfiprintf_r+0x9c>
 8016b02:	9b03      	ldr	r3, [sp, #12]
 8016b04:	1d19      	adds	r1, r3, #4
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	9103      	str	r1, [sp, #12]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	bfbb      	ittet	lt
 8016b0e:	425b      	neglt	r3, r3
 8016b10:	f042 0202 	orrlt.w	r2, r2, #2
 8016b14:	9307      	strge	r3, [sp, #28]
 8016b16:	9307      	strlt	r3, [sp, #28]
 8016b18:	bfb8      	it	lt
 8016b1a:	9204      	strlt	r2, [sp, #16]
 8016b1c:	7823      	ldrb	r3, [r4, #0]
 8016b1e:	2b2e      	cmp	r3, #46	; 0x2e
 8016b20:	d10c      	bne.n	8016b3c <_svfiprintf_r+0x130>
 8016b22:	7863      	ldrb	r3, [r4, #1]
 8016b24:	2b2a      	cmp	r3, #42	; 0x2a
 8016b26:	d135      	bne.n	8016b94 <_svfiprintf_r+0x188>
 8016b28:	9b03      	ldr	r3, [sp, #12]
 8016b2a:	1d1a      	adds	r2, r3, #4
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	9203      	str	r2, [sp, #12]
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	bfb8      	it	lt
 8016b34:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016b38:	3402      	adds	r4, #2
 8016b3a:	9305      	str	r3, [sp, #20]
 8016b3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016c08 <_svfiprintf_r+0x1fc>
 8016b40:	7821      	ldrb	r1, [r4, #0]
 8016b42:	2203      	movs	r2, #3
 8016b44:	4650      	mov	r0, sl
 8016b46:	f7e9 fb63 	bl	8000210 <memchr>
 8016b4a:	b140      	cbz	r0, 8016b5e <_svfiprintf_r+0x152>
 8016b4c:	2340      	movs	r3, #64	; 0x40
 8016b4e:	eba0 000a 	sub.w	r0, r0, sl
 8016b52:	fa03 f000 	lsl.w	r0, r3, r0
 8016b56:	9b04      	ldr	r3, [sp, #16]
 8016b58:	4303      	orrs	r3, r0
 8016b5a:	3401      	adds	r4, #1
 8016b5c:	9304      	str	r3, [sp, #16]
 8016b5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b62:	4826      	ldr	r0, [pc, #152]	; (8016bfc <_svfiprintf_r+0x1f0>)
 8016b64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016b68:	2206      	movs	r2, #6
 8016b6a:	f7e9 fb51 	bl	8000210 <memchr>
 8016b6e:	2800      	cmp	r0, #0
 8016b70:	d038      	beq.n	8016be4 <_svfiprintf_r+0x1d8>
 8016b72:	4b23      	ldr	r3, [pc, #140]	; (8016c00 <_svfiprintf_r+0x1f4>)
 8016b74:	bb1b      	cbnz	r3, 8016bbe <_svfiprintf_r+0x1b2>
 8016b76:	9b03      	ldr	r3, [sp, #12]
 8016b78:	3307      	adds	r3, #7
 8016b7a:	f023 0307 	bic.w	r3, r3, #7
 8016b7e:	3308      	adds	r3, #8
 8016b80:	9303      	str	r3, [sp, #12]
 8016b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b84:	4433      	add	r3, r6
 8016b86:	9309      	str	r3, [sp, #36]	; 0x24
 8016b88:	e767      	b.n	8016a5a <_svfiprintf_r+0x4e>
 8016b8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8016b8e:	460c      	mov	r4, r1
 8016b90:	2001      	movs	r0, #1
 8016b92:	e7a5      	b.n	8016ae0 <_svfiprintf_r+0xd4>
 8016b94:	2300      	movs	r3, #0
 8016b96:	3401      	adds	r4, #1
 8016b98:	9305      	str	r3, [sp, #20]
 8016b9a:	4619      	mov	r1, r3
 8016b9c:	f04f 0c0a 	mov.w	ip, #10
 8016ba0:	4620      	mov	r0, r4
 8016ba2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016ba6:	3a30      	subs	r2, #48	; 0x30
 8016ba8:	2a09      	cmp	r2, #9
 8016baa:	d903      	bls.n	8016bb4 <_svfiprintf_r+0x1a8>
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d0c5      	beq.n	8016b3c <_svfiprintf_r+0x130>
 8016bb0:	9105      	str	r1, [sp, #20]
 8016bb2:	e7c3      	b.n	8016b3c <_svfiprintf_r+0x130>
 8016bb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8016bb8:	4604      	mov	r4, r0
 8016bba:	2301      	movs	r3, #1
 8016bbc:	e7f0      	b.n	8016ba0 <_svfiprintf_r+0x194>
 8016bbe:	ab03      	add	r3, sp, #12
 8016bc0:	9300      	str	r3, [sp, #0]
 8016bc2:	462a      	mov	r2, r5
 8016bc4:	4b0f      	ldr	r3, [pc, #60]	; (8016c04 <_svfiprintf_r+0x1f8>)
 8016bc6:	a904      	add	r1, sp, #16
 8016bc8:	4638      	mov	r0, r7
 8016bca:	f7fd ff4f 	bl	8014a6c <_printf_float>
 8016bce:	1c42      	adds	r2, r0, #1
 8016bd0:	4606      	mov	r6, r0
 8016bd2:	d1d6      	bne.n	8016b82 <_svfiprintf_r+0x176>
 8016bd4:	89ab      	ldrh	r3, [r5, #12]
 8016bd6:	065b      	lsls	r3, r3, #25
 8016bd8:	f53f af2c 	bmi.w	8016a34 <_svfiprintf_r+0x28>
 8016bdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016bde:	b01d      	add	sp, #116	; 0x74
 8016be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016be4:	ab03      	add	r3, sp, #12
 8016be6:	9300      	str	r3, [sp, #0]
 8016be8:	462a      	mov	r2, r5
 8016bea:	4b06      	ldr	r3, [pc, #24]	; (8016c04 <_svfiprintf_r+0x1f8>)
 8016bec:	a904      	add	r1, sp, #16
 8016bee:	4638      	mov	r0, r7
 8016bf0:	f7fe f9e0 	bl	8014fb4 <_printf_i>
 8016bf4:	e7eb      	b.n	8016bce <_svfiprintf_r+0x1c2>
 8016bf6:	bf00      	nop
 8016bf8:	08017dcc 	.word	0x08017dcc
 8016bfc:	08017dd6 	.word	0x08017dd6
 8016c00:	08014a6d 	.word	0x08014a6d
 8016c04:	08016955 	.word	0x08016955
 8016c08:	08017dd2 	.word	0x08017dd2

08016c0c <__sfputc_r>:
 8016c0c:	6893      	ldr	r3, [r2, #8]
 8016c0e:	3b01      	subs	r3, #1
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	b410      	push	{r4}
 8016c14:	6093      	str	r3, [r2, #8]
 8016c16:	da08      	bge.n	8016c2a <__sfputc_r+0x1e>
 8016c18:	6994      	ldr	r4, [r2, #24]
 8016c1a:	42a3      	cmp	r3, r4
 8016c1c:	db01      	blt.n	8016c22 <__sfputc_r+0x16>
 8016c1e:	290a      	cmp	r1, #10
 8016c20:	d103      	bne.n	8016c2a <__sfputc_r+0x1e>
 8016c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016c26:	f000 b98f 	b.w	8016f48 <__swbuf_r>
 8016c2a:	6813      	ldr	r3, [r2, #0]
 8016c2c:	1c58      	adds	r0, r3, #1
 8016c2e:	6010      	str	r0, [r2, #0]
 8016c30:	7019      	strb	r1, [r3, #0]
 8016c32:	4608      	mov	r0, r1
 8016c34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016c38:	4770      	bx	lr

08016c3a <__sfputs_r>:
 8016c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c3c:	4606      	mov	r6, r0
 8016c3e:	460f      	mov	r7, r1
 8016c40:	4614      	mov	r4, r2
 8016c42:	18d5      	adds	r5, r2, r3
 8016c44:	42ac      	cmp	r4, r5
 8016c46:	d101      	bne.n	8016c4c <__sfputs_r+0x12>
 8016c48:	2000      	movs	r0, #0
 8016c4a:	e007      	b.n	8016c5c <__sfputs_r+0x22>
 8016c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c50:	463a      	mov	r2, r7
 8016c52:	4630      	mov	r0, r6
 8016c54:	f7ff ffda 	bl	8016c0c <__sfputc_r>
 8016c58:	1c43      	adds	r3, r0, #1
 8016c5a:	d1f3      	bne.n	8016c44 <__sfputs_r+0xa>
 8016c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016c60 <_vfiprintf_r>:
 8016c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c64:	460d      	mov	r5, r1
 8016c66:	b09d      	sub	sp, #116	; 0x74
 8016c68:	4614      	mov	r4, r2
 8016c6a:	4698      	mov	r8, r3
 8016c6c:	4606      	mov	r6, r0
 8016c6e:	b118      	cbz	r0, 8016c78 <_vfiprintf_r+0x18>
 8016c70:	6983      	ldr	r3, [r0, #24]
 8016c72:	b90b      	cbnz	r3, 8016c78 <_vfiprintf_r+0x18>
 8016c74:	f7ff f9fe 	bl	8016074 <__sinit>
 8016c78:	4b89      	ldr	r3, [pc, #548]	; (8016ea0 <_vfiprintf_r+0x240>)
 8016c7a:	429d      	cmp	r5, r3
 8016c7c:	d11b      	bne.n	8016cb6 <_vfiprintf_r+0x56>
 8016c7e:	6875      	ldr	r5, [r6, #4]
 8016c80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016c82:	07d9      	lsls	r1, r3, #31
 8016c84:	d405      	bmi.n	8016c92 <_vfiprintf_r+0x32>
 8016c86:	89ab      	ldrh	r3, [r5, #12]
 8016c88:	059a      	lsls	r2, r3, #22
 8016c8a:	d402      	bmi.n	8016c92 <_vfiprintf_r+0x32>
 8016c8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016c8e:	f7ff faa6 	bl	80161de <__retarget_lock_acquire_recursive>
 8016c92:	89ab      	ldrh	r3, [r5, #12]
 8016c94:	071b      	lsls	r3, r3, #28
 8016c96:	d501      	bpl.n	8016c9c <_vfiprintf_r+0x3c>
 8016c98:	692b      	ldr	r3, [r5, #16]
 8016c9a:	b9eb      	cbnz	r3, 8016cd8 <_vfiprintf_r+0x78>
 8016c9c:	4629      	mov	r1, r5
 8016c9e:	4630      	mov	r0, r6
 8016ca0:	f000 f9c4 	bl	801702c <__swsetup_r>
 8016ca4:	b1c0      	cbz	r0, 8016cd8 <_vfiprintf_r+0x78>
 8016ca6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016ca8:	07dc      	lsls	r4, r3, #31
 8016caa:	d50e      	bpl.n	8016cca <_vfiprintf_r+0x6a>
 8016cac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016cb0:	b01d      	add	sp, #116	; 0x74
 8016cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cb6:	4b7b      	ldr	r3, [pc, #492]	; (8016ea4 <_vfiprintf_r+0x244>)
 8016cb8:	429d      	cmp	r5, r3
 8016cba:	d101      	bne.n	8016cc0 <_vfiprintf_r+0x60>
 8016cbc:	68b5      	ldr	r5, [r6, #8]
 8016cbe:	e7df      	b.n	8016c80 <_vfiprintf_r+0x20>
 8016cc0:	4b79      	ldr	r3, [pc, #484]	; (8016ea8 <_vfiprintf_r+0x248>)
 8016cc2:	429d      	cmp	r5, r3
 8016cc4:	bf08      	it	eq
 8016cc6:	68f5      	ldreq	r5, [r6, #12]
 8016cc8:	e7da      	b.n	8016c80 <_vfiprintf_r+0x20>
 8016cca:	89ab      	ldrh	r3, [r5, #12]
 8016ccc:	0598      	lsls	r0, r3, #22
 8016cce:	d4ed      	bmi.n	8016cac <_vfiprintf_r+0x4c>
 8016cd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016cd2:	f7ff fa85 	bl	80161e0 <__retarget_lock_release_recursive>
 8016cd6:	e7e9      	b.n	8016cac <_vfiprintf_r+0x4c>
 8016cd8:	2300      	movs	r3, #0
 8016cda:	9309      	str	r3, [sp, #36]	; 0x24
 8016cdc:	2320      	movs	r3, #32
 8016cde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016ce2:	f8cd 800c 	str.w	r8, [sp, #12]
 8016ce6:	2330      	movs	r3, #48	; 0x30
 8016ce8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016eac <_vfiprintf_r+0x24c>
 8016cec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016cf0:	f04f 0901 	mov.w	r9, #1
 8016cf4:	4623      	mov	r3, r4
 8016cf6:	469a      	mov	sl, r3
 8016cf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016cfc:	b10a      	cbz	r2, 8016d02 <_vfiprintf_r+0xa2>
 8016cfe:	2a25      	cmp	r2, #37	; 0x25
 8016d00:	d1f9      	bne.n	8016cf6 <_vfiprintf_r+0x96>
 8016d02:	ebba 0b04 	subs.w	fp, sl, r4
 8016d06:	d00b      	beq.n	8016d20 <_vfiprintf_r+0xc0>
 8016d08:	465b      	mov	r3, fp
 8016d0a:	4622      	mov	r2, r4
 8016d0c:	4629      	mov	r1, r5
 8016d0e:	4630      	mov	r0, r6
 8016d10:	f7ff ff93 	bl	8016c3a <__sfputs_r>
 8016d14:	3001      	adds	r0, #1
 8016d16:	f000 80aa 	beq.w	8016e6e <_vfiprintf_r+0x20e>
 8016d1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016d1c:	445a      	add	r2, fp
 8016d1e:	9209      	str	r2, [sp, #36]	; 0x24
 8016d20:	f89a 3000 	ldrb.w	r3, [sl]
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	f000 80a2 	beq.w	8016e6e <_vfiprintf_r+0x20e>
 8016d2a:	2300      	movs	r3, #0
 8016d2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016d30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016d34:	f10a 0a01 	add.w	sl, sl, #1
 8016d38:	9304      	str	r3, [sp, #16]
 8016d3a:	9307      	str	r3, [sp, #28]
 8016d3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016d40:	931a      	str	r3, [sp, #104]	; 0x68
 8016d42:	4654      	mov	r4, sl
 8016d44:	2205      	movs	r2, #5
 8016d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d4a:	4858      	ldr	r0, [pc, #352]	; (8016eac <_vfiprintf_r+0x24c>)
 8016d4c:	f7e9 fa60 	bl	8000210 <memchr>
 8016d50:	9a04      	ldr	r2, [sp, #16]
 8016d52:	b9d8      	cbnz	r0, 8016d8c <_vfiprintf_r+0x12c>
 8016d54:	06d1      	lsls	r1, r2, #27
 8016d56:	bf44      	itt	mi
 8016d58:	2320      	movmi	r3, #32
 8016d5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016d5e:	0713      	lsls	r3, r2, #28
 8016d60:	bf44      	itt	mi
 8016d62:	232b      	movmi	r3, #43	; 0x2b
 8016d64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016d68:	f89a 3000 	ldrb.w	r3, [sl]
 8016d6c:	2b2a      	cmp	r3, #42	; 0x2a
 8016d6e:	d015      	beq.n	8016d9c <_vfiprintf_r+0x13c>
 8016d70:	9a07      	ldr	r2, [sp, #28]
 8016d72:	4654      	mov	r4, sl
 8016d74:	2000      	movs	r0, #0
 8016d76:	f04f 0c0a 	mov.w	ip, #10
 8016d7a:	4621      	mov	r1, r4
 8016d7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016d80:	3b30      	subs	r3, #48	; 0x30
 8016d82:	2b09      	cmp	r3, #9
 8016d84:	d94e      	bls.n	8016e24 <_vfiprintf_r+0x1c4>
 8016d86:	b1b0      	cbz	r0, 8016db6 <_vfiprintf_r+0x156>
 8016d88:	9207      	str	r2, [sp, #28]
 8016d8a:	e014      	b.n	8016db6 <_vfiprintf_r+0x156>
 8016d8c:	eba0 0308 	sub.w	r3, r0, r8
 8016d90:	fa09 f303 	lsl.w	r3, r9, r3
 8016d94:	4313      	orrs	r3, r2
 8016d96:	9304      	str	r3, [sp, #16]
 8016d98:	46a2      	mov	sl, r4
 8016d9a:	e7d2      	b.n	8016d42 <_vfiprintf_r+0xe2>
 8016d9c:	9b03      	ldr	r3, [sp, #12]
 8016d9e:	1d19      	adds	r1, r3, #4
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	9103      	str	r1, [sp, #12]
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	bfbb      	ittet	lt
 8016da8:	425b      	neglt	r3, r3
 8016daa:	f042 0202 	orrlt.w	r2, r2, #2
 8016dae:	9307      	strge	r3, [sp, #28]
 8016db0:	9307      	strlt	r3, [sp, #28]
 8016db2:	bfb8      	it	lt
 8016db4:	9204      	strlt	r2, [sp, #16]
 8016db6:	7823      	ldrb	r3, [r4, #0]
 8016db8:	2b2e      	cmp	r3, #46	; 0x2e
 8016dba:	d10c      	bne.n	8016dd6 <_vfiprintf_r+0x176>
 8016dbc:	7863      	ldrb	r3, [r4, #1]
 8016dbe:	2b2a      	cmp	r3, #42	; 0x2a
 8016dc0:	d135      	bne.n	8016e2e <_vfiprintf_r+0x1ce>
 8016dc2:	9b03      	ldr	r3, [sp, #12]
 8016dc4:	1d1a      	adds	r2, r3, #4
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	9203      	str	r2, [sp, #12]
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	bfb8      	it	lt
 8016dce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016dd2:	3402      	adds	r4, #2
 8016dd4:	9305      	str	r3, [sp, #20]
 8016dd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016ebc <_vfiprintf_r+0x25c>
 8016dda:	7821      	ldrb	r1, [r4, #0]
 8016ddc:	2203      	movs	r2, #3
 8016dde:	4650      	mov	r0, sl
 8016de0:	f7e9 fa16 	bl	8000210 <memchr>
 8016de4:	b140      	cbz	r0, 8016df8 <_vfiprintf_r+0x198>
 8016de6:	2340      	movs	r3, #64	; 0x40
 8016de8:	eba0 000a 	sub.w	r0, r0, sl
 8016dec:	fa03 f000 	lsl.w	r0, r3, r0
 8016df0:	9b04      	ldr	r3, [sp, #16]
 8016df2:	4303      	orrs	r3, r0
 8016df4:	3401      	adds	r4, #1
 8016df6:	9304      	str	r3, [sp, #16]
 8016df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016dfc:	482c      	ldr	r0, [pc, #176]	; (8016eb0 <_vfiprintf_r+0x250>)
 8016dfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016e02:	2206      	movs	r2, #6
 8016e04:	f7e9 fa04 	bl	8000210 <memchr>
 8016e08:	2800      	cmp	r0, #0
 8016e0a:	d03f      	beq.n	8016e8c <_vfiprintf_r+0x22c>
 8016e0c:	4b29      	ldr	r3, [pc, #164]	; (8016eb4 <_vfiprintf_r+0x254>)
 8016e0e:	bb1b      	cbnz	r3, 8016e58 <_vfiprintf_r+0x1f8>
 8016e10:	9b03      	ldr	r3, [sp, #12]
 8016e12:	3307      	adds	r3, #7
 8016e14:	f023 0307 	bic.w	r3, r3, #7
 8016e18:	3308      	adds	r3, #8
 8016e1a:	9303      	str	r3, [sp, #12]
 8016e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e1e:	443b      	add	r3, r7
 8016e20:	9309      	str	r3, [sp, #36]	; 0x24
 8016e22:	e767      	b.n	8016cf4 <_vfiprintf_r+0x94>
 8016e24:	fb0c 3202 	mla	r2, ip, r2, r3
 8016e28:	460c      	mov	r4, r1
 8016e2a:	2001      	movs	r0, #1
 8016e2c:	e7a5      	b.n	8016d7a <_vfiprintf_r+0x11a>
 8016e2e:	2300      	movs	r3, #0
 8016e30:	3401      	adds	r4, #1
 8016e32:	9305      	str	r3, [sp, #20]
 8016e34:	4619      	mov	r1, r3
 8016e36:	f04f 0c0a 	mov.w	ip, #10
 8016e3a:	4620      	mov	r0, r4
 8016e3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016e40:	3a30      	subs	r2, #48	; 0x30
 8016e42:	2a09      	cmp	r2, #9
 8016e44:	d903      	bls.n	8016e4e <_vfiprintf_r+0x1ee>
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d0c5      	beq.n	8016dd6 <_vfiprintf_r+0x176>
 8016e4a:	9105      	str	r1, [sp, #20]
 8016e4c:	e7c3      	b.n	8016dd6 <_vfiprintf_r+0x176>
 8016e4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8016e52:	4604      	mov	r4, r0
 8016e54:	2301      	movs	r3, #1
 8016e56:	e7f0      	b.n	8016e3a <_vfiprintf_r+0x1da>
 8016e58:	ab03      	add	r3, sp, #12
 8016e5a:	9300      	str	r3, [sp, #0]
 8016e5c:	462a      	mov	r2, r5
 8016e5e:	4b16      	ldr	r3, [pc, #88]	; (8016eb8 <_vfiprintf_r+0x258>)
 8016e60:	a904      	add	r1, sp, #16
 8016e62:	4630      	mov	r0, r6
 8016e64:	f7fd fe02 	bl	8014a6c <_printf_float>
 8016e68:	4607      	mov	r7, r0
 8016e6a:	1c78      	adds	r0, r7, #1
 8016e6c:	d1d6      	bne.n	8016e1c <_vfiprintf_r+0x1bc>
 8016e6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016e70:	07d9      	lsls	r1, r3, #31
 8016e72:	d405      	bmi.n	8016e80 <_vfiprintf_r+0x220>
 8016e74:	89ab      	ldrh	r3, [r5, #12]
 8016e76:	059a      	lsls	r2, r3, #22
 8016e78:	d402      	bmi.n	8016e80 <_vfiprintf_r+0x220>
 8016e7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016e7c:	f7ff f9b0 	bl	80161e0 <__retarget_lock_release_recursive>
 8016e80:	89ab      	ldrh	r3, [r5, #12]
 8016e82:	065b      	lsls	r3, r3, #25
 8016e84:	f53f af12 	bmi.w	8016cac <_vfiprintf_r+0x4c>
 8016e88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016e8a:	e711      	b.n	8016cb0 <_vfiprintf_r+0x50>
 8016e8c:	ab03      	add	r3, sp, #12
 8016e8e:	9300      	str	r3, [sp, #0]
 8016e90:	462a      	mov	r2, r5
 8016e92:	4b09      	ldr	r3, [pc, #36]	; (8016eb8 <_vfiprintf_r+0x258>)
 8016e94:	a904      	add	r1, sp, #16
 8016e96:	4630      	mov	r0, r6
 8016e98:	f7fe f88c 	bl	8014fb4 <_printf_i>
 8016e9c:	e7e4      	b.n	8016e68 <_vfiprintf_r+0x208>
 8016e9e:	bf00      	nop
 8016ea0:	08017c24 	.word	0x08017c24
 8016ea4:	08017c44 	.word	0x08017c44
 8016ea8:	08017c04 	.word	0x08017c04
 8016eac:	08017dcc 	.word	0x08017dcc
 8016eb0:	08017dd6 	.word	0x08017dd6
 8016eb4:	08014a6d 	.word	0x08014a6d
 8016eb8:	08016c3b 	.word	0x08016c3b
 8016ebc:	08017dd2 	.word	0x08017dd2

08016ec0 <__sread>:
 8016ec0:	b510      	push	{r4, lr}
 8016ec2:	460c      	mov	r4, r1
 8016ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ec8:	f000 faba 	bl	8017440 <_read_r>
 8016ecc:	2800      	cmp	r0, #0
 8016ece:	bfab      	itete	ge
 8016ed0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016ed2:	89a3      	ldrhlt	r3, [r4, #12]
 8016ed4:	181b      	addge	r3, r3, r0
 8016ed6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016eda:	bfac      	ite	ge
 8016edc:	6563      	strge	r3, [r4, #84]	; 0x54
 8016ede:	81a3      	strhlt	r3, [r4, #12]
 8016ee0:	bd10      	pop	{r4, pc}

08016ee2 <__swrite>:
 8016ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ee6:	461f      	mov	r7, r3
 8016ee8:	898b      	ldrh	r3, [r1, #12]
 8016eea:	05db      	lsls	r3, r3, #23
 8016eec:	4605      	mov	r5, r0
 8016eee:	460c      	mov	r4, r1
 8016ef0:	4616      	mov	r6, r2
 8016ef2:	d505      	bpl.n	8016f00 <__swrite+0x1e>
 8016ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ef8:	2302      	movs	r3, #2
 8016efa:	2200      	movs	r2, #0
 8016efc:	f000 f9de 	bl	80172bc <_lseek_r>
 8016f00:	89a3      	ldrh	r3, [r4, #12]
 8016f02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016f06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016f0a:	81a3      	strh	r3, [r4, #12]
 8016f0c:	4632      	mov	r2, r6
 8016f0e:	463b      	mov	r3, r7
 8016f10:	4628      	mov	r0, r5
 8016f12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f16:	f000 b877 	b.w	8017008 <_write_r>

08016f1a <__sseek>:
 8016f1a:	b510      	push	{r4, lr}
 8016f1c:	460c      	mov	r4, r1
 8016f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f22:	f000 f9cb 	bl	80172bc <_lseek_r>
 8016f26:	1c43      	adds	r3, r0, #1
 8016f28:	89a3      	ldrh	r3, [r4, #12]
 8016f2a:	bf15      	itete	ne
 8016f2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8016f2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016f32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016f36:	81a3      	strheq	r3, [r4, #12]
 8016f38:	bf18      	it	ne
 8016f3a:	81a3      	strhne	r3, [r4, #12]
 8016f3c:	bd10      	pop	{r4, pc}

08016f3e <__sclose>:
 8016f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f42:	f000 b8e9 	b.w	8017118 <_close_r>
	...

08016f48 <__swbuf_r>:
 8016f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f4a:	460e      	mov	r6, r1
 8016f4c:	4614      	mov	r4, r2
 8016f4e:	4605      	mov	r5, r0
 8016f50:	b118      	cbz	r0, 8016f5a <__swbuf_r+0x12>
 8016f52:	6983      	ldr	r3, [r0, #24]
 8016f54:	b90b      	cbnz	r3, 8016f5a <__swbuf_r+0x12>
 8016f56:	f7ff f88d 	bl	8016074 <__sinit>
 8016f5a:	4b21      	ldr	r3, [pc, #132]	; (8016fe0 <__swbuf_r+0x98>)
 8016f5c:	429c      	cmp	r4, r3
 8016f5e:	d12b      	bne.n	8016fb8 <__swbuf_r+0x70>
 8016f60:	686c      	ldr	r4, [r5, #4]
 8016f62:	69a3      	ldr	r3, [r4, #24]
 8016f64:	60a3      	str	r3, [r4, #8]
 8016f66:	89a3      	ldrh	r3, [r4, #12]
 8016f68:	071a      	lsls	r2, r3, #28
 8016f6a:	d52f      	bpl.n	8016fcc <__swbuf_r+0x84>
 8016f6c:	6923      	ldr	r3, [r4, #16]
 8016f6e:	b36b      	cbz	r3, 8016fcc <__swbuf_r+0x84>
 8016f70:	6923      	ldr	r3, [r4, #16]
 8016f72:	6820      	ldr	r0, [r4, #0]
 8016f74:	1ac0      	subs	r0, r0, r3
 8016f76:	6963      	ldr	r3, [r4, #20]
 8016f78:	b2f6      	uxtb	r6, r6
 8016f7a:	4283      	cmp	r3, r0
 8016f7c:	4637      	mov	r7, r6
 8016f7e:	dc04      	bgt.n	8016f8a <__swbuf_r+0x42>
 8016f80:	4621      	mov	r1, r4
 8016f82:	4628      	mov	r0, r5
 8016f84:	f000 f95e 	bl	8017244 <_fflush_r>
 8016f88:	bb30      	cbnz	r0, 8016fd8 <__swbuf_r+0x90>
 8016f8a:	68a3      	ldr	r3, [r4, #8]
 8016f8c:	3b01      	subs	r3, #1
 8016f8e:	60a3      	str	r3, [r4, #8]
 8016f90:	6823      	ldr	r3, [r4, #0]
 8016f92:	1c5a      	adds	r2, r3, #1
 8016f94:	6022      	str	r2, [r4, #0]
 8016f96:	701e      	strb	r6, [r3, #0]
 8016f98:	6963      	ldr	r3, [r4, #20]
 8016f9a:	3001      	adds	r0, #1
 8016f9c:	4283      	cmp	r3, r0
 8016f9e:	d004      	beq.n	8016faa <__swbuf_r+0x62>
 8016fa0:	89a3      	ldrh	r3, [r4, #12]
 8016fa2:	07db      	lsls	r3, r3, #31
 8016fa4:	d506      	bpl.n	8016fb4 <__swbuf_r+0x6c>
 8016fa6:	2e0a      	cmp	r6, #10
 8016fa8:	d104      	bne.n	8016fb4 <__swbuf_r+0x6c>
 8016faa:	4621      	mov	r1, r4
 8016fac:	4628      	mov	r0, r5
 8016fae:	f000 f949 	bl	8017244 <_fflush_r>
 8016fb2:	b988      	cbnz	r0, 8016fd8 <__swbuf_r+0x90>
 8016fb4:	4638      	mov	r0, r7
 8016fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fb8:	4b0a      	ldr	r3, [pc, #40]	; (8016fe4 <__swbuf_r+0x9c>)
 8016fba:	429c      	cmp	r4, r3
 8016fbc:	d101      	bne.n	8016fc2 <__swbuf_r+0x7a>
 8016fbe:	68ac      	ldr	r4, [r5, #8]
 8016fc0:	e7cf      	b.n	8016f62 <__swbuf_r+0x1a>
 8016fc2:	4b09      	ldr	r3, [pc, #36]	; (8016fe8 <__swbuf_r+0xa0>)
 8016fc4:	429c      	cmp	r4, r3
 8016fc6:	bf08      	it	eq
 8016fc8:	68ec      	ldreq	r4, [r5, #12]
 8016fca:	e7ca      	b.n	8016f62 <__swbuf_r+0x1a>
 8016fcc:	4621      	mov	r1, r4
 8016fce:	4628      	mov	r0, r5
 8016fd0:	f000 f82c 	bl	801702c <__swsetup_r>
 8016fd4:	2800      	cmp	r0, #0
 8016fd6:	d0cb      	beq.n	8016f70 <__swbuf_r+0x28>
 8016fd8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016fdc:	e7ea      	b.n	8016fb4 <__swbuf_r+0x6c>
 8016fde:	bf00      	nop
 8016fe0:	08017c24 	.word	0x08017c24
 8016fe4:	08017c44 	.word	0x08017c44
 8016fe8:	08017c04 	.word	0x08017c04

08016fec <__ascii_wctomb>:
 8016fec:	b149      	cbz	r1, 8017002 <__ascii_wctomb+0x16>
 8016fee:	2aff      	cmp	r2, #255	; 0xff
 8016ff0:	bf85      	ittet	hi
 8016ff2:	238a      	movhi	r3, #138	; 0x8a
 8016ff4:	6003      	strhi	r3, [r0, #0]
 8016ff6:	700a      	strbls	r2, [r1, #0]
 8016ff8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8016ffc:	bf98      	it	ls
 8016ffe:	2001      	movls	r0, #1
 8017000:	4770      	bx	lr
 8017002:	4608      	mov	r0, r1
 8017004:	4770      	bx	lr
	...

08017008 <_write_r>:
 8017008:	b538      	push	{r3, r4, r5, lr}
 801700a:	4d07      	ldr	r5, [pc, #28]	; (8017028 <_write_r+0x20>)
 801700c:	4604      	mov	r4, r0
 801700e:	4608      	mov	r0, r1
 8017010:	4611      	mov	r1, r2
 8017012:	2200      	movs	r2, #0
 8017014:	602a      	str	r2, [r5, #0]
 8017016:	461a      	mov	r2, r3
 8017018:	f000 fad8 	bl	80175cc <_write>
 801701c:	1c43      	adds	r3, r0, #1
 801701e:	d102      	bne.n	8017026 <_write_r+0x1e>
 8017020:	682b      	ldr	r3, [r5, #0]
 8017022:	b103      	cbz	r3, 8017026 <_write_r+0x1e>
 8017024:	6023      	str	r3, [r4, #0]
 8017026:	bd38      	pop	{r3, r4, r5, pc}
 8017028:	20002f68 	.word	0x20002f68

0801702c <__swsetup_r>:
 801702c:	4b32      	ldr	r3, [pc, #200]	; (80170f8 <__swsetup_r+0xcc>)
 801702e:	b570      	push	{r4, r5, r6, lr}
 8017030:	681d      	ldr	r5, [r3, #0]
 8017032:	4606      	mov	r6, r0
 8017034:	460c      	mov	r4, r1
 8017036:	b125      	cbz	r5, 8017042 <__swsetup_r+0x16>
 8017038:	69ab      	ldr	r3, [r5, #24]
 801703a:	b913      	cbnz	r3, 8017042 <__swsetup_r+0x16>
 801703c:	4628      	mov	r0, r5
 801703e:	f7ff f819 	bl	8016074 <__sinit>
 8017042:	4b2e      	ldr	r3, [pc, #184]	; (80170fc <__swsetup_r+0xd0>)
 8017044:	429c      	cmp	r4, r3
 8017046:	d10f      	bne.n	8017068 <__swsetup_r+0x3c>
 8017048:	686c      	ldr	r4, [r5, #4]
 801704a:	89a3      	ldrh	r3, [r4, #12]
 801704c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017050:	0719      	lsls	r1, r3, #28
 8017052:	d42c      	bmi.n	80170ae <__swsetup_r+0x82>
 8017054:	06dd      	lsls	r5, r3, #27
 8017056:	d411      	bmi.n	801707c <__swsetup_r+0x50>
 8017058:	2309      	movs	r3, #9
 801705a:	6033      	str	r3, [r6, #0]
 801705c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017060:	81a3      	strh	r3, [r4, #12]
 8017062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017066:	e03e      	b.n	80170e6 <__swsetup_r+0xba>
 8017068:	4b25      	ldr	r3, [pc, #148]	; (8017100 <__swsetup_r+0xd4>)
 801706a:	429c      	cmp	r4, r3
 801706c:	d101      	bne.n	8017072 <__swsetup_r+0x46>
 801706e:	68ac      	ldr	r4, [r5, #8]
 8017070:	e7eb      	b.n	801704a <__swsetup_r+0x1e>
 8017072:	4b24      	ldr	r3, [pc, #144]	; (8017104 <__swsetup_r+0xd8>)
 8017074:	429c      	cmp	r4, r3
 8017076:	bf08      	it	eq
 8017078:	68ec      	ldreq	r4, [r5, #12]
 801707a:	e7e6      	b.n	801704a <__swsetup_r+0x1e>
 801707c:	0758      	lsls	r0, r3, #29
 801707e:	d512      	bpl.n	80170a6 <__swsetup_r+0x7a>
 8017080:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017082:	b141      	cbz	r1, 8017096 <__swsetup_r+0x6a>
 8017084:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017088:	4299      	cmp	r1, r3
 801708a:	d002      	beq.n	8017092 <__swsetup_r+0x66>
 801708c:	4630      	mov	r0, r6
 801708e:	f7fd fb6d 	bl	801476c <_free_r>
 8017092:	2300      	movs	r3, #0
 8017094:	6363      	str	r3, [r4, #52]	; 0x34
 8017096:	89a3      	ldrh	r3, [r4, #12]
 8017098:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801709c:	81a3      	strh	r3, [r4, #12]
 801709e:	2300      	movs	r3, #0
 80170a0:	6063      	str	r3, [r4, #4]
 80170a2:	6923      	ldr	r3, [r4, #16]
 80170a4:	6023      	str	r3, [r4, #0]
 80170a6:	89a3      	ldrh	r3, [r4, #12]
 80170a8:	f043 0308 	orr.w	r3, r3, #8
 80170ac:	81a3      	strh	r3, [r4, #12]
 80170ae:	6923      	ldr	r3, [r4, #16]
 80170b0:	b94b      	cbnz	r3, 80170c6 <__swsetup_r+0x9a>
 80170b2:	89a3      	ldrh	r3, [r4, #12]
 80170b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80170b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80170bc:	d003      	beq.n	80170c6 <__swsetup_r+0x9a>
 80170be:	4621      	mov	r1, r4
 80170c0:	4630      	mov	r0, r6
 80170c2:	f000 f933 	bl	801732c <__smakebuf_r>
 80170c6:	89a0      	ldrh	r0, [r4, #12]
 80170c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80170cc:	f010 0301 	ands.w	r3, r0, #1
 80170d0:	d00a      	beq.n	80170e8 <__swsetup_r+0xbc>
 80170d2:	2300      	movs	r3, #0
 80170d4:	60a3      	str	r3, [r4, #8]
 80170d6:	6963      	ldr	r3, [r4, #20]
 80170d8:	425b      	negs	r3, r3
 80170da:	61a3      	str	r3, [r4, #24]
 80170dc:	6923      	ldr	r3, [r4, #16]
 80170de:	b943      	cbnz	r3, 80170f2 <__swsetup_r+0xc6>
 80170e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80170e4:	d1ba      	bne.n	801705c <__swsetup_r+0x30>
 80170e6:	bd70      	pop	{r4, r5, r6, pc}
 80170e8:	0781      	lsls	r1, r0, #30
 80170ea:	bf58      	it	pl
 80170ec:	6963      	ldrpl	r3, [r4, #20]
 80170ee:	60a3      	str	r3, [r4, #8]
 80170f0:	e7f4      	b.n	80170dc <__swsetup_r+0xb0>
 80170f2:	2000      	movs	r0, #0
 80170f4:	e7f7      	b.n	80170e6 <__swsetup_r+0xba>
 80170f6:	bf00      	nop
 80170f8:	20000184 	.word	0x20000184
 80170fc:	08017c24 	.word	0x08017c24
 8017100:	08017c44 	.word	0x08017c44
 8017104:	08017c04 	.word	0x08017c04

08017108 <abort>:
 8017108:	b508      	push	{r3, lr}
 801710a:	2006      	movs	r0, #6
 801710c:	f000 f9d2 	bl	80174b4 <raise>
 8017110:	2001      	movs	r0, #1
 8017112:	f000 fa63 	bl	80175dc <_exit>
	...

08017118 <_close_r>:
 8017118:	b538      	push	{r3, r4, r5, lr}
 801711a:	4d06      	ldr	r5, [pc, #24]	; (8017134 <_close_r+0x1c>)
 801711c:	2300      	movs	r3, #0
 801711e:	4604      	mov	r4, r0
 8017120:	4608      	mov	r0, r1
 8017122:	602b      	str	r3, [r5, #0]
 8017124:	f000 fa0c 	bl	8017540 <_close>
 8017128:	1c43      	adds	r3, r0, #1
 801712a:	d102      	bne.n	8017132 <_close_r+0x1a>
 801712c:	682b      	ldr	r3, [r5, #0]
 801712e:	b103      	cbz	r3, 8017132 <_close_r+0x1a>
 8017130:	6023      	str	r3, [r4, #0]
 8017132:	bd38      	pop	{r3, r4, r5, pc}
 8017134:	20002f68 	.word	0x20002f68

08017138 <__sflush_r>:
 8017138:	898a      	ldrh	r2, [r1, #12]
 801713a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801713e:	4605      	mov	r5, r0
 8017140:	0710      	lsls	r0, r2, #28
 8017142:	460c      	mov	r4, r1
 8017144:	d458      	bmi.n	80171f8 <__sflush_r+0xc0>
 8017146:	684b      	ldr	r3, [r1, #4]
 8017148:	2b00      	cmp	r3, #0
 801714a:	dc05      	bgt.n	8017158 <__sflush_r+0x20>
 801714c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801714e:	2b00      	cmp	r3, #0
 8017150:	dc02      	bgt.n	8017158 <__sflush_r+0x20>
 8017152:	2000      	movs	r0, #0
 8017154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017158:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801715a:	2e00      	cmp	r6, #0
 801715c:	d0f9      	beq.n	8017152 <__sflush_r+0x1a>
 801715e:	2300      	movs	r3, #0
 8017160:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017164:	682f      	ldr	r7, [r5, #0]
 8017166:	602b      	str	r3, [r5, #0]
 8017168:	d032      	beq.n	80171d0 <__sflush_r+0x98>
 801716a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801716c:	89a3      	ldrh	r3, [r4, #12]
 801716e:	075a      	lsls	r2, r3, #29
 8017170:	d505      	bpl.n	801717e <__sflush_r+0x46>
 8017172:	6863      	ldr	r3, [r4, #4]
 8017174:	1ac0      	subs	r0, r0, r3
 8017176:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017178:	b10b      	cbz	r3, 801717e <__sflush_r+0x46>
 801717a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801717c:	1ac0      	subs	r0, r0, r3
 801717e:	2300      	movs	r3, #0
 8017180:	4602      	mov	r2, r0
 8017182:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017184:	6a21      	ldr	r1, [r4, #32]
 8017186:	4628      	mov	r0, r5
 8017188:	47b0      	blx	r6
 801718a:	1c43      	adds	r3, r0, #1
 801718c:	89a3      	ldrh	r3, [r4, #12]
 801718e:	d106      	bne.n	801719e <__sflush_r+0x66>
 8017190:	6829      	ldr	r1, [r5, #0]
 8017192:	291d      	cmp	r1, #29
 8017194:	d82c      	bhi.n	80171f0 <__sflush_r+0xb8>
 8017196:	4a2a      	ldr	r2, [pc, #168]	; (8017240 <__sflush_r+0x108>)
 8017198:	40ca      	lsrs	r2, r1
 801719a:	07d6      	lsls	r6, r2, #31
 801719c:	d528      	bpl.n	80171f0 <__sflush_r+0xb8>
 801719e:	2200      	movs	r2, #0
 80171a0:	6062      	str	r2, [r4, #4]
 80171a2:	04d9      	lsls	r1, r3, #19
 80171a4:	6922      	ldr	r2, [r4, #16]
 80171a6:	6022      	str	r2, [r4, #0]
 80171a8:	d504      	bpl.n	80171b4 <__sflush_r+0x7c>
 80171aa:	1c42      	adds	r2, r0, #1
 80171ac:	d101      	bne.n	80171b2 <__sflush_r+0x7a>
 80171ae:	682b      	ldr	r3, [r5, #0]
 80171b0:	b903      	cbnz	r3, 80171b4 <__sflush_r+0x7c>
 80171b2:	6560      	str	r0, [r4, #84]	; 0x54
 80171b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80171b6:	602f      	str	r7, [r5, #0]
 80171b8:	2900      	cmp	r1, #0
 80171ba:	d0ca      	beq.n	8017152 <__sflush_r+0x1a>
 80171bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80171c0:	4299      	cmp	r1, r3
 80171c2:	d002      	beq.n	80171ca <__sflush_r+0x92>
 80171c4:	4628      	mov	r0, r5
 80171c6:	f7fd fad1 	bl	801476c <_free_r>
 80171ca:	2000      	movs	r0, #0
 80171cc:	6360      	str	r0, [r4, #52]	; 0x34
 80171ce:	e7c1      	b.n	8017154 <__sflush_r+0x1c>
 80171d0:	6a21      	ldr	r1, [r4, #32]
 80171d2:	2301      	movs	r3, #1
 80171d4:	4628      	mov	r0, r5
 80171d6:	47b0      	blx	r6
 80171d8:	1c41      	adds	r1, r0, #1
 80171da:	d1c7      	bne.n	801716c <__sflush_r+0x34>
 80171dc:	682b      	ldr	r3, [r5, #0]
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d0c4      	beq.n	801716c <__sflush_r+0x34>
 80171e2:	2b1d      	cmp	r3, #29
 80171e4:	d001      	beq.n	80171ea <__sflush_r+0xb2>
 80171e6:	2b16      	cmp	r3, #22
 80171e8:	d101      	bne.n	80171ee <__sflush_r+0xb6>
 80171ea:	602f      	str	r7, [r5, #0]
 80171ec:	e7b1      	b.n	8017152 <__sflush_r+0x1a>
 80171ee:	89a3      	ldrh	r3, [r4, #12]
 80171f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80171f4:	81a3      	strh	r3, [r4, #12]
 80171f6:	e7ad      	b.n	8017154 <__sflush_r+0x1c>
 80171f8:	690f      	ldr	r7, [r1, #16]
 80171fa:	2f00      	cmp	r7, #0
 80171fc:	d0a9      	beq.n	8017152 <__sflush_r+0x1a>
 80171fe:	0793      	lsls	r3, r2, #30
 8017200:	680e      	ldr	r6, [r1, #0]
 8017202:	bf08      	it	eq
 8017204:	694b      	ldreq	r3, [r1, #20]
 8017206:	600f      	str	r7, [r1, #0]
 8017208:	bf18      	it	ne
 801720a:	2300      	movne	r3, #0
 801720c:	eba6 0807 	sub.w	r8, r6, r7
 8017210:	608b      	str	r3, [r1, #8]
 8017212:	f1b8 0f00 	cmp.w	r8, #0
 8017216:	dd9c      	ble.n	8017152 <__sflush_r+0x1a>
 8017218:	6a21      	ldr	r1, [r4, #32]
 801721a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801721c:	4643      	mov	r3, r8
 801721e:	463a      	mov	r2, r7
 8017220:	4628      	mov	r0, r5
 8017222:	47b0      	blx	r6
 8017224:	2800      	cmp	r0, #0
 8017226:	dc06      	bgt.n	8017236 <__sflush_r+0xfe>
 8017228:	89a3      	ldrh	r3, [r4, #12]
 801722a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801722e:	81a3      	strh	r3, [r4, #12]
 8017230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017234:	e78e      	b.n	8017154 <__sflush_r+0x1c>
 8017236:	4407      	add	r7, r0
 8017238:	eba8 0800 	sub.w	r8, r8, r0
 801723c:	e7e9      	b.n	8017212 <__sflush_r+0xda>
 801723e:	bf00      	nop
 8017240:	20400001 	.word	0x20400001

08017244 <_fflush_r>:
 8017244:	b538      	push	{r3, r4, r5, lr}
 8017246:	690b      	ldr	r3, [r1, #16]
 8017248:	4605      	mov	r5, r0
 801724a:	460c      	mov	r4, r1
 801724c:	b913      	cbnz	r3, 8017254 <_fflush_r+0x10>
 801724e:	2500      	movs	r5, #0
 8017250:	4628      	mov	r0, r5
 8017252:	bd38      	pop	{r3, r4, r5, pc}
 8017254:	b118      	cbz	r0, 801725e <_fflush_r+0x1a>
 8017256:	6983      	ldr	r3, [r0, #24]
 8017258:	b90b      	cbnz	r3, 801725e <_fflush_r+0x1a>
 801725a:	f7fe ff0b 	bl	8016074 <__sinit>
 801725e:	4b14      	ldr	r3, [pc, #80]	; (80172b0 <_fflush_r+0x6c>)
 8017260:	429c      	cmp	r4, r3
 8017262:	d11b      	bne.n	801729c <_fflush_r+0x58>
 8017264:	686c      	ldr	r4, [r5, #4]
 8017266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801726a:	2b00      	cmp	r3, #0
 801726c:	d0ef      	beq.n	801724e <_fflush_r+0xa>
 801726e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017270:	07d0      	lsls	r0, r2, #31
 8017272:	d404      	bmi.n	801727e <_fflush_r+0x3a>
 8017274:	0599      	lsls	r1, r3, #22
 8017276:	d402      	bmi.n	801727e <_fflush_r+0x3a>
 8017278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801727a:	f7fe ffb0 	bl	80161de <__retarget_lock_acquire_recursive>
 801727e:	4628      	mov	r0, r5
 8017280:	4621      	mov	r1, r4
 8017282:	f7ff ff59 	bl	8017138 <__sflush_r>
 8017286:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017288:	07da      	lsls	r2, r3, #31
 801728a:	4605      	mov	r5, r0
 801728c:	d4e0      	bmi.n	8017250 <_fflush_r+0xc>
 801728e:	89a3      	ldrh	r3, [r4, #12]
 8017290:	059b      	lsls	r3, r3, #22
 8017292:	d4dd      	bmi.n	8017250 <_fflush_r+0xc>
 8017294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017296:	f7fe ffa3 	bl	80161e0 <__retarget_lock_release_recursive>
 801729a:	e7d9      	b.n	8017250 <_fflush_r+0xc>
 801729c:	4b05      	ldr	r3, [pc, #20]	; (80172b4 <_fflush_r+0x70>)
 801729e:	429c      	cmp	r4, r3
 80172a0:	d101      	bne.n	80172a6 <_fflush_r+0x62>
 80172a2:	68ac      	ldr	r4, [r5, #8]
 80172a4:	e7df      	b.n	8017266 <_fflush_r+0x22>
 80172a6:	4b04      	ldr	r3, [pc, #16]	; (80172b8 <_fflush_r+0x74>)
 80172a8:	429c      	cmp	r4, r3
 80172aa:	bf08      	it	eq
 80172ac:	68ec      	ldreq	r4, [r5, #12]
 80172ae:	e7da      	b.n	8017266 <_fflush_r+0x22>
 80172b0:	08017c24 	.word	0x08017c24
 80172b4:	08017c44 	.word	0x08017c44
 80172b8:	08017c04 	.word	0x08017c04

080172bc <_lseek_r>:
 80172bc:	b538      	push	{r3, r4, r5, lr}
 80172be:	4d07      	ldr	r5, [pc, #28]	; (80172dc <_lseek_r+0x20>)
 80172c0:	4604      	mov	r4, r0
 80172c2:	4608      	mov	r0, r1
 80172c4:	4611      	mov	r1, r2
 80172c6:	2200      	movs	r2, #0
 80172c8:	602a      	str	r2, [r5, #0]
 80172ca:	461a      	mov	r2, r3
 80172cc:	f000 f960 	bl	8017590 <_lseek>
 80172d0:	1c43      	adds	r3, r0, #1
 80172d2:	d102      	bne.n	80172da <_lseek_r+0x1e>
 80172d4:	682b      	ldr	r3, [r5, #0]
 80172d6:	b103      	cbz	r3, 80172da <_lseek_r+0x1e>
 80172d8:	6023      	str	r3, [r4, #0]
 80172da:	bd38      	pop	{r3, r4, r5, pc}
 80172dc:	20002f68 	.word	0x20002f68

080172e0 <__swhatbuf_r>:
 80172e0:	b570      	push	{r4, r5, r6, lr}
 80172e2:	460e      	mov	r6, r1
 80172e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172e8:	2900      	cmp	r1, #0
 80172ea:	b096      	sub	sp, #88	; 0x58
 80172ec:	4614      	mov	r4, r2
 80172ee:	461d      	mov	r5, r3
 80172f0:	da08      	bge.n	8017304 <__swhatbuf_r+0x24>
 80172f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80172f6:	2200      	movs	r2, #0
 80172f8:	602a      	str	r2, [r5, #0]
 80172fa:	061a      	lsls	r2, r3, #24
 80172fc:	d410      	bmi.n	8017320 <__swhatbuf_r+0x40>
 80172fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017302:	e00e      	b.n	8017322 <__swhatbuf_r+0x42>
 8017304:	466a      	mov	r2, sp
 8017306:	f000 f8f1 	bl	80174ec <_fstat_r>
 801730a:	2800      	cmp	r0, #0
 801730c:	dbf1      	blt.n	80172f2 <__swhatbuf_r+0x12>
 801730e:	9a01      	ldr	r2, [sp, #4]
 8017310:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017314:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017318:	425a      	negs	r2, r3
 801731a:	415a      	adcs	r2, r3
 801731c:	602a      	str	r2, [r5, #0]
 801731e:	e7ee      	b.n	80172fe <__swhatbuf_r+0x1e>
 8017320:	2340      	movs	r3, #64	; 0x40
 8017322:	2000      	movs	r0, #0
 8017324:	6023      	str	r3, [r4, #0]
 8017326:	b016      	add	sp, #88	; 0x58
 8017328:	bd70      	pop	{r4, r5, r6, pc}
	...

0801732c <__smakebuf_r>:
 801732c:	898b      	ldrh	r3, [r1, #12]
 801732e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017330:	079d      	lsls	r5, r3, #30
 8017332:	4606      	mov	r6, r0
 8017334:	460c      	mov	r4, r1
 8017336:	d507      	bpl.n	8017348 <__smakebuf_r+0x1c>
 8017338:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801733c:	6023      	str	r3, [r4, #0]
 801733e:	6123      	str	r3, [r4, #16]
 8017340:	2301      	movs	r3, #1
 8017342:	6163      	str	r3, [r4, #20]
 8017344:	b002      	add	sp, #8
 8017346:	bd70      	pop	{r4, r5, r6, pc}
 8017348:	ab01      	add	r3, sp, #4
 801734a:	466a      	mov	r2, sp
 801734c:	f7ff ffc8 	bl	80172e0 <__swhatbuf_r>
 8017350:	9900      	ldr	r1, [sp, #0]
 8017352:	4605      	mov	r5, r0
 8017354:	4630      	mov	r0, r6
 8017356:	f7fd fa75 	bl	8014844 <_malloc_r>
 801735a:	b948      	cbnz	r0, 8017370 <__smakebuf_r+0x44>
 801735c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017360:	059a      	lsls	r2, r3, #22
 8017362:	d4ef      	bmi.n	8017344 <__smakebuf_r+0x18>
 8017364:	f023 0303 	bic.w	r3, r3, #3
 8017368:	f043 0302 	orr.w	r3, r3, #2
 801736c:	81a3      	strh	r3, [r4, #12]
 801736e:	e7e3      	b.n	8017338 <__smakebuf_r+0xc>
 8017370:	4b0d      	ldr	r3, [pc, #52]	; (80173a8 <__smakebuf_r+0x7c>)
 8017372:	62b3      	str	r3, [r6, #40]	; 0x28
 8017374:	89a3      	ldrh	r3, [r4, #12]
 8017376:	6020      	str	r0, [r4, #0]
 8017378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801737c:	81a3      	strh	r3, [r4, #12]
 801737e:	9b00      	ldr	r3, [sp, #0]
 8017380:	6163      	str	r3, [r4, #20]
 8017382:	9b01      	ldr	r3, [sp, #4]
 8017384:	6120      	str	r0, [r4, #16]
 8017386:	b15b      	cbz	r3, 80173a0 <__smakebuf_r+0x74>
 8017388:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801738c:	4630      	mov	r0, r6
 801738e:	f000 f8bf 	bl	8017510 <_isatty_r>
 8017392:	b128      	cbz	r0, 80173a0 <__smakebuf_r+0x74>
 8017394:	89a3      	ldrh	r3, [r4, #12]
 8017396:	f023 0303 	bic.w	r3, r3, #3
 801739a:	f043 0301 	orr.w	r3, r3, #1
 801739e:	81a3      	strh	r3, [r4, #12]
 80173a0:	89a0      	ldrh	r0, [r4, #12]
 80173a2:	4305      	orrs	r5, r0
 80173a4:	81a5      	strh	r5, [r4, #12]
 80173a6:	e7cd      	b.n	8017344 <__smakebuf_r+0x18>
 80173a8:	0801600d 	.word	0x0801600d

080173ac <memmove>:
 80173ac:	4288      	cmp	r0, r1
 80173ae:	b510      	push	{r4, lr}
 80173b0:	eb01 0402 	add.w	r4, r1, r2
 80173b4:	d902      	bls.n	80173bc <memmove+0x10>
 80173b6:	4284      	cmp	r4, r0
 80173b8:	4623      	mov	r3, r4
 80173ba:	d807      	bhi.n	80173cc <memmove+0x20>
 80173bc:	1e43      	subs	r3, r0, #1
 80173be:	42a1      	cmp	r1, r4
 80173c0:	d008      	beq.n	80173d4 <memmove+0x28>
 80173c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80173c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80173ca:	e7f8      	b.n	80173be <memmove+0x12>
 80173cc:	4402      	add	r2, r0
 80173ce:	4601      	mov	r1, r0
 80173d0:	428a      	cmp	r2, r1
 80173d2:	d100      	bne.n	80173d6 <memmove+0x2a>
 80173d4:	bd10      	pop	{r4, pc}
 80173d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80173da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80173de:	e7f7      	b.n	80173d0 <memmove+0x24>

080173e0 <_realloc_r>:
 80173e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173e4:	4680      	mov	r8, r0
 80173e6:	4614      	mov	r4, r2
 80173e8:	460e      	mov	r6, r1
 80173ea:	b921      	cbnz	r1, 80173f6 <_realloc_r+0x16>
 80173ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80173f0:	4611      	mov	r1, r2
 80173f2:	f7fd ba27 	b.w	8014844 <_malloc_r>
 80173f6:	b92a      	cbnz	r2, 8017404 <_realloc_r+0x24>
 80173f8:	f7fd f9b8 	bl	801476c <_free_r>
 80173fc:	4625      	mov	r5, r4
 80173fe:	4628      	mov	r0, r5
 8017400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017404:	f000 f894 	bl	8017530 <_malloc_usable_size_r>
 8017408:	4284      	cmp	r4, r0
 801740a:	4607      	mov	r7, r0
 801740c:	d802      	bhi.n	8017414 <_realloc_r+0x34>
 801740e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017412:	d812      	bhi.n	801743a <_realloc_r+0x5a>
 8017414:	4621      	mov	r1, r4
 8017416:	4640      	mov	r0, r8
 8017418:	f7fd fa14 	bl	8014844 <_malloc_r>
 801741c:	4605      	mov	r5, r0
 801741e:	2800      	cmp	r0, #0
 8017420:	d0ed      	beq.n	80173fe <_realloc_r+0x1e>
 8017422:	42bc      	cmp	r4, r7
 8017424:	4622      	mov	r2, r4
 8017426:	4631      	mov	r1, r6
 8017428:	bf28      	it	cs
 801742a:	463a      	movcs	r2, r7
 801742c:	f7fd f988 	bl	8014740 <memcpy>
 8017430:	4631      	mov	r1, r6
 8017432:	4640      	mov	r0, r8
 8017434:	f7fd f99a 	bl	801476c <_free_r>
 8017438:	e7e1      	b.n	80173fe <_realloc_r+0x1e>
 801743a:	4635      	mov	r5, r6
 801743c:	e7df      	b.n	80173fe <_realloc_r+0x1e>
	...

08017440 <_read_r>:
 8017440:	b538      	push	{r3, r4, r5, lr}
 8017442:	4d07      	ldr	r5, [pc, #28]	; (8017460 <_read_r+0x20>)
 8017444:	4604      	mov	r4, r0
 8017446:	4608      	mov	r0, r1
 8017448:	4611      	mov	r1, r2
 801744a:	2200      	movs	r2, #0
 801744c:	602a      	str	r2, [r5, #0]
 801744e:	461a      	mov	r2, r3
 8017450:	f000 f8a6 	bl	80175a0 <_read>
 8017454:	1c43      	adds	r3, r0, #1
 8017456:	d102      	bne.n	801745e <_read_r+0x1e>
 8017458:	682b      	ldr	r3, [r5, #0]
 801745a:	b103      	cbz	r3, 801745e <_read_r+0x1e>
 801745c:	6023      	str	r3, [r4, #0]
 801745e:	bd38      	pop	{r3, r4, r5, pc}
 8017460:	20002f68 	.word	0x20002f68

08017464 <_raise_r>:
 8017464:	291f      	cmp	r1, #31
 8017466:	b538      	push	{r3, r4, r5, lr}
 8017468:	4604      	mov	r4, r0
 801746a:	460d      	mov	r5, r1
 801746c:	d904      	bls.n	8017478 <_raise_r+0x14>
 801746e:	2316      	movs	r3, #22
 8017470:	6003      	str	r3, [r0, #0]
 8017472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017476:	bd38      	pop	{r3, r4, r5, pc}
 8017478:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801747a:	b112      	cbz	r2, 8017482 <_raise_r+0x1e>
 801747c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017480:	b94b      	cbnz	r3, 8017496 <_raise_r+0x32>
 8017482:	4620      	mov	r0, r4
 8017484:	f000 f830 	bl	80174e8 <_getpid_r>
 8017488:	462a      	mov	r2, r5
 801748a:	4601      	mov	r1, r0
 801748c:	4620      	mov	r0, r4
 801748e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017492:	f000 b817 	b.w	80174c4 <_kill_r>
 8017496:	2b01      	cmp	r3, #1
 8017498:	d00a      	beq.n	80174b0 <_raise_r+0x4c>
 801749a:	1c59      	adds	r1, r3, #1
 801749c:	d103      	bne.n	80174a6 <_raise_r+0x42>
 801749e:	2316      	movs	r3, #22
 80174a0:	6003      	str	r3, [r0, #0]
 80174a2:	2001      	movs	r0, #1
 80174a4:	e7e7      	b.n	8017476 <_raise_r+0x12>
 80174a6:	2400      	movs	r4, #0
 80174a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80174ac:	4628      	mov	r0, r5
 80174ae:	4798      	blx	r3
 80174b0:	2000      	movs	r0, #0
 80174b2:	e7e0      	b.n	8017476 <_raise_r+0x12>

080174b4 <raise>:
 80174b4:	4b02      	ldr	r3, [pc, #8]	; (80174c0 <raise+0xc>)
 80174b6:	4601      	mov	r1, r0
 80174b8:	6818      	ldr	r0, [r3, #0]
 80174ba:	f7ff bfd3 	b.w	8017464 <_raise_r>
 80174be:	bf00      	nop
 80174c0:	20000184 	.word	0x20000184

080174c4 <_kill_r>:
 80174c4:	b538      	push	{r3, r4, r5, lr}
 80174c6:	4d07      	ldr	r5, [pc, #28]	; (80174e4 <_kill_r+0x20>)
 80174c8:	2300      	movs	r3, #0
 80174ca:	4604      	mov	r4, r0
 80174cc:	4608      	mov	r0, r1
 80174ce:	4611      	mov	r1, r2
 80174d0:	602b      	str	r3, [r5, #0]
 80174d2:	f000 f855 	bl	8017580 <_kill>
 80174d6:	1c43      	adds	r3, r0, #1
 80174d8:	d102      	bne.n	80174e0 <_kill_r+0x1c>
 80174da:	682b      	ldr	r3, [r5, #0]
 80174dc:	b103      	cbz	r3, 80174e0 <_kill_r+0x1c>
 80174de:	6023      	str	r3, [r4, #0]
 80174e0:	bd38      	pop	{r3, r4, r5, pc}
 80174e2:	bf00      	nop
 80174e4:	20002f68 	.word	0x20002f68

080174e8 <_getpid_r>:
 80174e8:	f000 b83a 	b.w	8017560 <_getpid>

080174ec <_fstat_r>:
 80174ec:	b538      	push	{r3, r4, r5, lr}
 80174ee:	4d07      	ldr	r5, [pc, #28]	; (801750c <_fstat_r+0x20>)
 80174f0:	2300      	movs	r3, #0
 80174f2:	4604      	mov	r4, r0
 80174f4:	4608      	mov	r0, r1
 80174f6:	4611      	mov	r1, r2
 80174f8:	602b      	str	r3, [r5, #0]
 80174fa:	f000 f829 	bl	8017550 <_fstat>
 80174fe:	1c43      	adds	r3, r0, #1
 8017500:	d102      	bne.n	8017508 <_fstat_r+0x1c>
 8017502:	682b      	ldr	r3, [r5, #0]
 8017504:	b103      	cbz	r3, 8017508 <_fstat_r+0x1c>
 8017506:	6023      	str	r3, [r4, #0]
 8017508:	bd38      	pop	{r3, r4, r5, pc}
 801750a:	bf00      	nop
 801750c:	20002f68 	.word	0x20002f68

08017510 <_isatty_r>:
 8017510:	b538      	push	{r3, r4, r5, lr}
 8017512:	4d06      	ldr	r5, [pc, #24]	; (801752c <_isatty_r+0x1c>)
 8017514:	2300      	movs	r3, #0
 8017516:	4604      	mov	r4, r0
 8017518:	4608      	mov	r0, r1
 801751a:	602b      	str	r3, [r5, #0]
 801751c:	f000 f828 	bl	8017570 <_isatty>
 8017520:	1c43      	adds	r3, r0, #1
 8017522:	d102      	bne.n	801752a <_isatty_r+0x1a>
 8017524:	682b      	ldr	r3, [r5, #0]
 8017526:	b103      	cbz	r3, 801752a <_isatty_r+0x1a>
 8017528:	6023      	str	r3, [r4, #0]
 801752a:	bd38      	pop	{r3, r4, r5, pc}
 801752c:	20002f68 	.word	0x20002f68

08017530 <_malloc_usable_size_r>:
 8017530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017534:	1f18      	subs	r0, r3, #4
 8017536:	2b00      	cmp	r3, #0
 8017538:	bfbc      	itt	lt
 801753a:	580b      	ldrlt	r3, [r1, r0]
 801753c:	18c0      	addlt	r0, r0, r3
 801753e:	4770      	bx	lr

08017540 <_close>:
 8017540:	4b02      	ldr	r3, [pc, #8]	; (801754c <_close+0xc>)
 8017542:	2258      	movs	r2, #88	; 0x58
 8017544:	601a      	str	r2, [r3, #0]
 8017546:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801754a:	4770      	bx	lr
 801754c:	20002f68 	.word	0x20002f68

08017550 <_fstat>:
 8017550:	4b02      	ldr	r3, [pc, #8]	; (801755c <_fstat+0xc>)
 8017552:	2258      	movs	r2, #88	; 0x58
 8017554:	601a      	str	r2, [r3, #0]
 8017556:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801755a:	4770      	bx	lr
 801755c:	20002f68 	.word	0x20002f68

08017560 <_getpid>:
 8017560:	4b02      	ldr	r3, [pc, #8]	; (801756c <_getpid+0xc>)
 8017562:	2258      	movs	r2, #88	; 0x58
 8017564:	601a      	str	r2, [r3, #0]
 8017566:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801756a:	4770      	bx	lr
 801756c:	20002f68 	.word	0x20002f68

08017570 <_isatty>:
 8017570:	4b02      	ldr	r3, [pc, #8]	; (801757c <_isatty+0xc>)
 8017572:	2258      	movs	r2, #88	; 0x58
 8017574:	601a      	str	r2, [r3, #0]
 8017576:	2000      	movs	r0, #0
 8017578:	4770      	bx	lr
 801757a:	bf00      	nop
 801757c:	20002f68 	.word	0x20002f68

08017580 <_kill>:
 8017580:	4b02      	ldr	r3, [pc, #8]	; (801758c <_kill+0xc>)
 8017582:	2258      	movs	r2, #88	; 0x58
 8017584:	601a      	str	r2, [r3, #0]
 8017586:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801758a:	4770      	bx	lr
 801758c:	20002f68 	.word	0x20002f68

08017590 <_lseek>:
 8017590:	4b02      	ldr	r3, [pc, #8]	; (801759c <_lseek+0xc>)
 8017592:	2258      	movs	r2, #88	; 0x58
 8017594:	601a      	str	r2, [r3, #0]
 8017596:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801759a:	4770      	bx	lr
 801759c:	20002f68 	.word	0x20002f68

080175a0 <_read>:
 80175a0:	4b02      	ldr	r3, [pc, #8]	; (80175ac <_read+0xc>)
 80175a2:	2258      	movs	r2, #88	; 0x58
 80175a4:	601a      	str	r2, [r3, #0]
 80175a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80175aa:	4770      	bx	lr
 80175ac:	20002f68 	.word	0x20002f68

080175b0 <_sbrk>:
 80175b0:	4a04      	ldr	r2, [pc, #16]	; (80175c4 <_sbrk+0x14>)
 80175b2:	6811      	ldr	r1, [r2, #0]
 80175b4:	4603      	mov	r3, r0
 80175b6:	b909      	cbnz	r1, 80175bc <_sbrk+0xc>
 80175b8:	4903      	ldr	r1, [pc, #12]	; (80175c8 <_sbrk+0x18>)
 80175ba:	6011      	str	r1, [r2, #0]
 80175bc:	6810      	ldr	r0, [r2, #0]
 80175be:	4403      	add	r3, r0
 80175c0:	6013      	str	r3, [r2, #0]
 80175c2:	4770      	bx	lr
 80175c4:	20002f6c 	.word	0x20002f6c
 80175c8:	20002f70 	.word	0x20002f70

080175cc <_write>:
 80175cc:	4b02      	ldr	r3, [pc, #8]	; (80175d8 <_write+0xc>)
 80175ce:	2258      	movs	r2, #88	; 0x58
 80175d0:	601a      	str	r2, [r3, #0]
 80175d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80175d6:	4770      	bx	lr
 80175d8:	20002f68 	.word	0x20002f68

080175dc <_exit>:
 80175dc:	e7fe      	b.n	80175dc <_exit>
	...

080175e0 <_init>:
 80175e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175e2:	bf00      	nop
 80175e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175e6:	bc08      	pop	{r3}
 80175e8:	469e      	mov	lr, r3
 80175ea:	4770      	bx	lr

080175ec <_fini>:
 80175ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175ee:	bf00      	nop
 80175f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175f2:	bc08      	pop	{r3}
 80175f4:	469e      	mov	lr, r3
 80175f6:	4770      	bx	lr
