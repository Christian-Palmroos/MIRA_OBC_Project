
miracode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6c8  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800d884  0800d884  0001d884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d96c  0800d96c  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  0800d96c  0800d96c  0001d96c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d974  0800d974  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d974  0800d974  0001d974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d978  0800d978  0001d978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800d97c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f30  20000190  0800db0c  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  200020c0  0800db0c  000220c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027f4e  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005010  00000000  00000000  0004810e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002080  00000000  00000000  0004d120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e68  00000000  00000000  0004f1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000318a5  00000000  00000000  00051008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029ec6  00000000  00000000  000828ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119eaa  00000000  00000000  000ac773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c661d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000089ac  00000000  00000000  001c6670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000190 	.word	0x20000190
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800d86c 	.word	0x0800d86c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000194 	.word	0x20000194
 80001f8:	0800d86c 	.word	0x0800d86c

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b5b0      	push	{r4, r5, r7, lr}
 8000502:	b0a0      	sub	sp, #128	; 0x80
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	UINT byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8000506:	4b1b      	ldr	r3, [pc, #108]	; (8000574 <main+0x74>)
 8000508:	f107 0464 	add.w	r4, r7, #100	; 0x64
 800050c:	461d      	mov	r5, r3
 800050e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000510:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000512:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000516:	c403      	stmia	r4!, {r0, r1}
 8000518:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fe3a 	bl	8001192 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f831 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 fa7b 	bl	8000a1c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000526:	f000 f88b 	bl	8000640 <MX_I2C1_Init>
  MX_I2C2_Init();
 800052a:	f000 f8c9 	bl	80006c0 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 800052e:	f000 f907 	bl	8000740 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8000532:	f000 f927 	bl	8000784 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000536:	f000 f9d9 	bl	80008ec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800053a:	f000 fa23 	bl	8000984 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800053e:	f00a fcc1 	bl	800aec4 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000542:	f00c fb43 	bl	800cbcc <MX_USB_DEVICE_Init>
  MX_TIM17_Init();
 8000546:	f000 f95b 	bl	8000800 <MX_TIM17_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800054a:	f000 f86d 	bl	8000628 <MX_NVIC_Init>
    			}
    		}
    	}
    	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);*/

  HAL_TIM_Base_Start_IT(&htim17);
 800054e:	480a      	ldr	r0, [pc, #40]	; (8000578 <main+0x78>)
 8000550:	f006 feea 	bl	8007328 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  tick = 0;
 8000554:	4b09      	ldr	r3, [pc, #36]	; (800057c <main+0x7c>)
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (tick == 0) {
 800055a:	4b08      	ldr	r3, [pc, #32]	; (800057c <main+0x7c>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	b2db      	uxtb	r3, r3
 8000560:	2b00      	cmp	r3, #0
 8000562:	d1fa      	bne.n	800055a <main+0x5a>
		  tick = 10;
 8000564:	4b05      	ldr	r3, [pc, #20]	; (800057c <main+0x7c>)
 8000566:	220a      	movs	r2, #10
 8000568:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 800056a:	2108      	movs	r1, #8
 800056c:	4804      	ldr	r0, [pc, #16]	; (8000580 <main+0x80>)
 800056e:	f001 f97d 	bl	800186c <HAL_GPIO_TogglePin>
	  if (tick == 0) {
 8000572:	e7f2      	b.n	800055a <main+0x5a>
 8000574:	0800d884 	.word	0x0800d884
 8000578:	20000338 	.word	0x20000338
 800057c:	200004a4 	.word	0x200004a4
 8000580:	48000c00 	.word	0x48000c00

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b096      	sub	sp, #88	; 0x58
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	2244      	movs	r2, #68	; 0x44
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f00d f962 	bl	800d85c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	463b      	mov	r3, r7
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80005a6:	2000      	movs	r0, #0
 80005a8:	f002 fc80 	bl	8002eac <HAL_PWREx_ControlVoltageScaling>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80005b2:	f000 fb11 	bl	8000bd8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80005b6:	2321      	movs	r3, #33	; 0x21
 80005b8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005be:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c4:	2302      	movs	r3, #2
 80005c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c8:	2303      	movs	r3, #3
 80005ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005cc:	2301      	movs	r3, #1
 80005ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80005d0:	231e      	movs	r3, #30
 80005d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV20;
 80005d4:	2314      	movs	r3, #20
 80005d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d8:	2302      	movs	r3, #2
 80005da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 fd15 	bl	8003014 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80005f0:	f000 faf2 	bl	8000bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f8:	2303      	movs	r3, #3
 80005fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000608:	463b      	mov	r3, r7
 800060a:	2105      	movs	r1, #5
 800060c:	4618      	mov	r0, r3
 800060e:	f003 f91b 	bl	8003848 <HAL_RCC_ClockConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000618:	f000 fade 	bl	8000bd8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800061c:	f003 fb12 	bl	8003c44 <HAL_RCC_EnableCSS>
}
 8000620:	bf00      	nop
 8000622:	3758      	adds	r7, #88	; 0x58
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800062c:	2200      	movs	r2, #0
 800062e:	2100      	movs	r1, #0
 8000630:	201a      	movs	r0, #26
 8000632:	f000 ff22 	bl	800147a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000636:	201a      	movs	r0, #26
 8000638:	f000 ff3b 	bl	80014b2 <HAL_NVIC_EnableIRQ>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}

08000640 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <MX_I2C1_Init+0x74>)
 8000646:	4a1c      	ldr	r2, [pc, #112]	; (80006b8 <MX_I2C1_Init+0x78>)
 8000648:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800064a:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <MX_I2C1_Init+0x74>)
 800064c:	4a1b      	ldr	r2, [pc, #108]	; (80006bc <MX_I2C1_Init+0x7c>)
 800064e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000650:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <MX_I2C1_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000656:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <MX_I2C1_Init+0x74>)
 8000658:	2201      	movs	r2, #1
 800065a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800065c:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <MX_I2C1_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000662:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_I2C1_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <MX_I2C1_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_I2C1_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_I2C1_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800067a:	480e      	ldr	r0, [pc, #56]	; (80006b4 <MX_I2C1_Init+0x74>)
 800067c:	f001 f910 	bl	80018a0 <HAL_I2C_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000686:	f000 faa7 	bl	8000bd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800068a:	2100      	movs	r1, #0
 800068c:	4809      	ldr	r0, [pc, #36]	; (80006b4 <MX_I2C1_Init+0x74>)
 800068e:	f001 f996 	bl	80019be <HAL_I2CEx_ConfigAnalogFilter>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000698:	f000 fa9e 	bl	8000bd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800069c:	2100      	movs	r1, #0
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_I2C1_Init+0x74>)
 80006a0:	f001 f9d8 	bl	8001a54 <HAL_I2CEx_ConfigDigitalFilter>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006aa:	f000 fa95 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200001ac 	.word	0x200001ac
 80006b8:	40005400 	.word	0x40005400
 80006bc:	307075b1 	.word	0x307075b1

080006c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006c4:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <MX_I2C2_Init+0x74>)
 80006c6:	4a1c      	ldr	r2, [pc, #112]	; (8000738 <MX_I2C2_Init+0x78>)
 80006c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80006ca:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <MX_I2C2_Init+0x74>)
 80006cc:	4a1b      	ldr	r2, [pc, #108]	; (800073c <MX_I2C2_Init+0x7c>)
 80006ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <MX_I2C2_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d6:	4b17      	ldr	r3, [pc, #92]	; (8000734 <MX_I2C2_Init+0x74>)
 80006d8:	2201      	movs	r2, #1
 80006da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <MX_I2C2_Init+0x74>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_I2C2_Init+0x74>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_I2C2_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_I2C2_Init+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_I2C2_Init+0x74>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006fa:	480e      	ldr	r0, [pc, #56]	; (8000734 <MX_I2C2_Init+0x74>)
 80006fc:	f001 f8d0 	bl	80018a0 <HAL_I2C_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000706:	f000 fa67 	bl	8000bd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800070a:	2100      	movs	r1, #0
 800070c:	4809      	ldr	r0, [pc, #36]	; (8000734 <MX_I2C2_Init+0x74>)
 800070e:	f001 f956 	bl	80019be <HAL_I2CEx_ConfigAnalogFilter>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000718:	f000 fa5e 	bl	8000bd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800071c:	2100      	movs	r1, #0
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_I2C2_Init+0x74>)
 8000720:	f001 f998 	bl	8001a54 <HAL_I2CEx_ConfigDigitalFilter>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800072a:	f000 fa55 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000200 	.word	0x20000200
 8000738:	40005800 	.word	0x40005800
 800073c:	307075b1 	.word	0x307075b1

08000740 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000744:	4b0d      	ldr	r3, [pc, #52]	; (800077c <MX_SDMMC1_SD_Init+0x3c>)
 8000746:	4a0e      	ldr	r2, [pc, #56]	; (8000780 <MX_SDMMC1_SD_Init+0x40>)
 8000748:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_SDMMC1_SD_Init+0x3c>)
 800074c:	2200      	movs	r2, #0
 800074e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <MX_SDMMC1_SD_Init+0x3c>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_SDMMC1_SD_Init+0x3c>)
 8000758:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800075c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800075e:	4b07      	ldr	r3, [pc, #28]	; (800077c <MX_SDMMC1_SD_Init+0x3c>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <MX_SDMMC1_SD_Init+0x3c>)
 8000766:	2200      	movs	r2, #0
 8000768:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 800076a:	4b04      	ldr	r3, [pc, #16]	; (800077c <MX_SDMMC1_SD_Init+0x3c>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	20000254 	.word	0x20000254
 8000780:	50062400 	.word	0x50062400

08000784 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000788:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <MX_SPI1_Init+0x74>)
 800078a:	4a1c      	ldr	r2, [pc, #112]	; (80007fc <MX_SPI1_Init+0x78>)
 800078c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800078e:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <MX_SPI1_Init+0x74>)
 8000790:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000794:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000796:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <MX_SPI1_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800079c:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <MX_SPI1_Init+0x74>)
 800079e:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_SPI1_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007aa:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_SPI1_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_SPI1_Init+0x74>)
 80007b2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_SPI1_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_SPI1_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_SPI1_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_SPI1_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_SPI1_Init+0x74>)
 80007d2:	2207      	movs	r2, #7
 80007d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_SPI1_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_SPI1_Init+0x74>)
 80007de:	2208      	movs	r2, #8
 80007e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_SPI1_Init+0x74>)
 80007e4:	f006 fca5 	bl	8007132 <HAL_SPI_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007ee:	f000 f9f3 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200002d4 	.word	0x200002d4
 80007fc:	40013000 	.word	0x40013000

08000800 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b092      	sub	sp, #72	; 0x48
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000806:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]
 8000816:	615a      	str	r2, [r3, #20]
 8000818:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800081a:	463b      	mov	r3, r7
 800081c:	222c      	movs	r2, #44	; 0x2c
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f00d f81b 	bl	800d85c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000826:	4b2f      	ldr	r3, [pc, #188]	; (80008e4 <MX_TIM17_Init+0xe4>)
 8000828:	4a2f      	ldr	r2, [pc, #188]	; (80008e8 <MX_TIM17_Init+0xe8>)
 800082a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 999;
 800082c:	4b2d      	ldr	r3, [pc, #180]	; (80008e4 <MX_TIM17_Init+0xe4>)
 800082e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000832:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000834:	4b2b      	ldr	r3, [pc, #172]	; (80008e4 <MX_TIM17_Init+0xe4>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 11999;
 800083a:	4b2a      	ldr	r3, [pc, #168]	; (80008e4 <MX_TIM17_Init+0xe4>)
 800083c:	f642 62df 	movw	r2, #11999	; 0x2edf
 8000840:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000842:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <MX_TIM17_Init+0xe4>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000848:	4b26      	ldr	r3, [pc, #152]	; (80008e4 <MX_TIM17_Init+0xe4>)
 800084a:	2200      	movs	r2, #0
 800084c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800084e:	4b25      	ldr	r3, [pc, #148]	; (80008e4 <MX_TIM17_Init+0xe4>)
 8000850:	2280      	movs	r2, #128	; 0x80
 8000852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000854:	4823      	ldr	r0, [pc, #140]	; (80008e4 <MX_TIM17_Init+0xe4>)
 8000856:	f006 fd0f 	bl	8007278 <HAL_TIM_Base_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8000860:	f000 f9ba 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8000864:	481f      	ldr	r0, [pc, #124]	; (80008e4 <MX_TIM17_Init+0xe4>)
 8000866:	f006 fdcf 	bl	8007408 <HAL_TIM_OC_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8000870:	f000 f9b2 	bl	8000bd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000874:	2300      	movs	r3, #0
 8000876:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800087c:	2300      	movs	r3, #0
 800087e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000880:	2300      	movs	r3, #0
 8000882:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000888:	2300      	movs	r3, #0
 800088a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800088c:	2300      	movs	r3, #0
 800088e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000890:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000894:	2200      	movs	r2, #0
 8000896:	4619      	mov	r1, r3
 8000898:	4812      	ldr	r0, [pc, #72]	; (80008e4 <MX_TIM17_Init+0xe4>)
 800089a:	f006 ff35 	bl	8007708 <HAL_TIM_OC_ConfigChannel>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 80008a4:	f000 f998 	bl	8000bd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80008c6:	463b      	mov	r3, r7
 80008c8:	4619      	mov	r1, r3
 80008ca:	4806      	ldr	r0, [pc, #24]	; (80008e4 <MX_TIM17_Init+0xe4>)
 80008cc:	f007 fb38 	bl	8007f40 <HAL_TIMEx_ConfigBreakDeadTime>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 80008d6:	f000 f97f 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	3748      	adds	r7, #72	; 0x48
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000338 	.word	0x20000338
 80008e8:	40014800 	.word	0x40014800

080008ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008f0:	4b22      	ldr	r3, [pc, #136]	; (800097c <MX_USART1_UART_Init+0x90>)
 80008f2:	4a23      	ldr	r2, [pc, #140]	; (8000980 <MX_USART1_UART_Init+0x94>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008f6:	4b21      	ldr	r3, [pc, #132]	; (800097c <MX_USART1_UART_Init+0x90>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b1f      	ldr	r3, [pc, #124]	; (800097c <MX_USART1_UART_Init+0x90>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b1d      	ldr	r3, [pc, #116]	; (800097c <MX_USART1_UART_Init+0x90>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800090a:	4b1c      	ldr	r3, [pc, #112]	; (800097c <MX_USART1_UART_Init+0x90>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b1a      	ldr	r3, [pc, #104]	; (800097c <MX_USART1_UART_Init+0x90>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <MX_USART1_UART_Init+0x90>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <MX_USART1_UART_Init+0x90>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <MX_USART1_UART_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_USART1_UART_Init+0x90>)
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <MX_USART1_UART_Init+0x90>)
 8000930:	2200      	movs	r2, #0
 8000932:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000934:	4811      	ldr	r0, [pc, #68]	; (800097c <MX_USART1_UART_Init+0x90>)
 8000936:	f007 fb9f 	bl	8008078 <HAL_UART_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000940:	f000 f94a 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000944:	2100      	movs	r1, #0
 8000946:	480d      	ldr	r0, [pc, #52]	; (800097c <MX_USART1_UART_Init+0x90>)
 8000948:	f008 f8d0 	bl	8008aec <HAL_UARTEx_SetTxFifoThreshold>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000952:	f000 f941 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000956:	2100      	movs	r1, #0
 8000958:	4808      	ldr	r0, [pc, #32]	; (800097c <MX_USART1_UART_Init+0x90>)
 800095a:	f008 f905 	bl	8008b68 <HAL_UARTEx_SetRxFifoThreshold>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000964:	f000 f938 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000968:	4804      	ldr	r0, [pc, #16]	; (800097c <MX_USART1_UART_Init+0x90>)
 800096a:	f008 f886 	bl	8008a7a <HAL_UARTEx_DisableFifoMode>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000974:	f000 f930 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000384 	.word	0x20000384
 8000980:	40013800 	.word	0x40013800

08000984 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000988:	4b22      	ldr	r3, [pc, #136]	; (8000a14 <MX_USART2_UART_Init+0x90>)
 800098a:	4a23      	ldr	r2, [pc, #140]	; (8000a18 <MX_USART2_UART_Init+0x94>)
 800098c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800098e:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <MX_USART2_UART_Init+0x90>)
 8000990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000994:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <MX_USART2_UART_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <MX_USART2_UART_Init+0x90>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <MX_USART2_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <MX_USART2_UART_Init+0x90>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <MX_USART2_UART_Init+0x90>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <MX_USART2_UART_Init+0x90>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ba:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <MX_USART2_UART_Init+0x90>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_USART2_UART_Init+0x90>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c6:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <MX_USART2_UART_Init+0x90>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009cc:	4811      	ldr	r0, [pc, #68]	; (8000a14 <MX_USART2_UART_Init+0x90>)
 80009ce:	f007 fb53 	bl	8008078 <HAL_UART_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009d8:	f000 f8fe 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009dc:	2100      	movs	r1, #0
 80009de:	480d      	ldr	r0, [pc, #52]	; (8000a14 <MX_USART2_UART_Init+0x90>)
 80009e0:	f008 f884 	bl	8008aec <HAL_UARTEx_SetTxFifoThreshold>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009ea:	f000 f8f5 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ee:	2100      	movs	r1, #0
 80009f0:	4808      	ldr	r0, [pc, #32]	; (8000a14 <MX_USART2_UART_Init+0x90>)
 80009f2:	f008 f8b9 	bl	8008b68 <HAL_UARTEx_SetRxFifoThreshold>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009fc:	f000 f8ec 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_USART2_UART_Init+0x90>)
 8000a02:	f008 f83a 	bl	8008a7a <HAL_UARTEx_DisableFifoMode>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a0c:	f000 f8e4 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000414 	.word	0x20000414
 8000a18:	40004400 	.word	0x40004400

08000a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08c      	sub	sp, #48	; 0x30
 8000a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a32:	4b64      	ldr	r3, [pc, #400]	; (8000bc4 <MX_GPIO_Init+0x1a8>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	4a63      	ldr	r2, [pc, #396]	; (8000bc4 <MX_GPIO_Init+0x1a8>)
 8000a38:	f043 0310 	orr.w	r3, r3, #16
 8000a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3e:	4b61      	ldr	r3, [pc, #388]	; (8000bc4 <MX_GPIO_Init+0x1a8>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	f003 0310 	and.w	r3, r3, #16
 8000a46:	61bb      	str	r3, [r7, #24]
 8000a48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	4b5e      	ldr	r3, [pc, #376]	; (8000bc4 <MX_GPIO_Init+0x1a8>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	4a5d      	ldr	r2, [pc, #372]	; (8000bc4 <MX_GPIO_Init+0x1a8>)
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a56:	4b5b      	ldr	r3, [pc, #364]	; (8000bc4 <MX_GPIO_Init+0x1a8>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a62:	4b58      	ldr	r3, [pc, #352]	; (8000bc4 <MX_GPIO_Init+0x1a8>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	4a57      	ldr	r2, [pc, #348]	; (8000bc4 <MX_GPIO_Init+0x1a8>)
 8000a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6e:	4b55      	ldr	r3, [pc, #340]	; (8000bc4 <MX_GPIO_Init+0x1a8>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b52      	ldr	r3, [pc, #328]	; (8000bc4 <MX_GPIO_Init+0x1a8>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	4a51      	ldr	r2, [pc, #324]	; (8000bc4 <MX_GPIO_Init+0x1a8>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a86:	4b4f      	ldr	r3, [pc, #316]	; (8000bc4 <MX_GPIO_Init+0x1a8>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	4b4c      	ldr	r3, [pc, #304]	; (8000bc4 <MX_GPIO_Init+0x1a8>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	4a4b      	ldr	r2, [pc, #300]	; (8000bc4 <MX_GPIO_Init+0x1a8>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9e:	4b49      	ldr	r3, [pc, #292]	; (8000bc4 <MX_GPIO_Init+0x1a8>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aaa:	4b46      	ldr	r3, [pc, #280]	; (8000bc4 <MX_GPIO_Init+0x1a8>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	4a45      	ldr	r2, [pc, #276]	; (8000bc4 <MX_GPIO_Init+0x1a8>)
 8000ab0:	f043 0308 	orr.w	r3, r3, #8
 8000ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab6:	4b43      	ldr	r3, [pc, #268]	; (8000bc4 <MX_GPIO_Init+0x1a8>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	f003 0308 	and.w	r3, r3, #8
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f641 013c 	movw	r1, #6204	; 0x183c
 8000ac8:	483f      	ldr	r0, [pc, #252]	; (8000bc8 <MX_GPIO_Init+0x1ac>)
 8000aca:	f000 feb7 	bl	800183c <HAL_GPIO_WritePin>
                          |MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2130      	movs	r1, #48	; 0x30
 8000ad2:	483e      	ldr	r0, [pc, #248]	; (8000bcc <MX_GPIO_Init+0x1b0>)
 8000ad4:	f000 feb2 	bl	800183c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2178      	movs	r1, #120	; 0x78
 8000adc:	483c      	ldr	r0, [pc, #240]	; (8000bd0 <MX_GPIO_Init+0x1b4>)
 8000ade:	f000 fead 	bl	800183c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
  GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8000ae2:	f641 033c 	movw	r3, #6204	; 0x183c
 8000ae6:	61fb      	str	r3, [r7, #28]
                          |MIRA_EN_PWR_Pin|OCPEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	4833      	ldr	r0, [pc, #204]	; (8000bc8 <MX_GPIO_Init+0x1ac>)
 8000afc:	f000 fcf4 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_INT_Pin */
  GPIO_InitStruct.Pin = CHG_INT_Pin;
 8000b00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	482d      	ldr	r0, [pc, #180]	; (8000bcc <MX_GPIO_Init+0x1b0>)
 8000b16:	f000 fce7 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIG0_Pin */
  GPIO_InitStruct.Pin = LORA_DIG0_Pin;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LORA_DIG0_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b30:	f000 fcda 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 8000b34:	2330      	movs	r3, #48	; 0x30
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4820      	ldr	r0, [pc, #128]	; (8000bcc <MX_GPIO_Init+0x1b0>)
 8000b4c:	f000 fccc 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCPFAULT_Pin */
  GPIO_InitStruct.Pin = OCPFAULT_Pin;
 8000b50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	4619      	mov	r1, r3
 8000b64:	4818      	ldr	r0, [pc, #96]	; (8000bc8 <MX_GPIO_Init+0x1ac>)
 8000b66:	f000 fcbf 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = CARD_DETECT_Pin;
 8000b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b82:	f000 fcb1 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8000b86:	2378      	movs	r3, #120	; 0x78
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <MX_GPIO_Init+0x1b4>)
 8000b9e:	f000 fca3 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWERGOOD_Pin */
  GPIO_InitStruct.Pin = POWERGOOD_Pin;
 8000ba2:	2320      	movs	r3, #32
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4807      	ldr	r0, [pc, #28]	; (8000bd4 <MX_GPIO_Init+0x1b8>)
 8000bb6:	f000 fc97 	bl	80014e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bba:	bf00      	nop
 8000bbc:	3730      	adds	r7, #48	; 0x30
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	48001000 	.word	0x48001000
 8000bcc:	48000800 	.word	0x48000800
 8000bd0:	48000c00 	.word	0x48000c00
 8000bd4:	48000400 	.word	0x48000400

08000bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bdc:	b672      	cpsid	i
}
 8000bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <Error_Handler+0x8>
	...

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_MspInit+0x44>)
 8000bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bee:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <HAL_MspInit+0x44>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6613      	str	r3, [r2, #96]	; 0x60
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <HAL_MspInit+0x44>)
 8000bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <HAL_MspInit+0x44>)
 8000c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c06:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <HAL_MspInit+0x44>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_MspInit+0x44>)
 8000c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000

08000c2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b0b0      	sub	sp, #192	; 0xc0
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c44:	f107 0318 	add.w	r3, r7, #24
 8000c48:	2294      	movs	r2, #148	; 0x94
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f00c fe05 	bl	800d85c <memset>
  if(hi2c->Instance==I2C1)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a42      	ldr	r2, [pc, #264]	; (8000d60 <HAL_I2C_MspInit+0x134>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d13b      	bne.n	8000cd4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c5c:	2340      	movs	r3, #64	; 0x40
 8000c5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c64:	f107 0318 	add.w	r3, r7, #24
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f003 f8d7 	bl	8003e1c <HAL_RCCEx_PeriphCLKConfig>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000c74:	f7ff ffb0 	bl	8000bd8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c78:	4b3a      	ldr	r3, [pc, #232]	; (8000d64 <HAL_I2C_MspInit+0x138>)
 8000c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7c:	4a39      	ldr	r2, [pc, #228]	; (8000d64 <HAL_I2C_MspInit+0x138>)
 8000c7e:	f043 0302 	orr.w	r3, r3, #2
 8000c82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c84:	4b37      	ldr	r3, [pc, #220]	; (8000d64 <HAL_I2C_MspInit+0x138>)
 8000c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c88:	f003 0302 	and.w	r3, r3, #2
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c90:	23c0      	movs	r3, #192	; 0xc0
 8000c92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c96:	2312      	movs	r3, #18
 8000c98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ca8:	2304      	movs	r3, #4
 8000caa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	482c      	ldr	r0, [pc, #176]	; (8000d68 <HAL_I2C_MspInit+0x13c>)
 8000cb6:	f000 fc17 	bl	80014e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cba:	4b2a      	ldr	r3, [pc, #168]	; (8000d64 <HAL_I2C_MspInit+0x138>)
 8000cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cbe:	4a29      	ldr	r2, [pc, #164]	; (8000d64 <HAL_I2C_MspInit+0x138>)
 8000cc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000cc6:	4b27      	ldr	r3, [pc, #156]	; (8000d64 <HAL_I2C_MspInit+0x138>)
 8000cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000cd2:	e040      	b.n	8000d56 <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a24      	ldr	r2, [pc, #144]	; (8000d6c <HAL_I2C_MspInit+0x140>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d13b      	bne.n	8000d56 <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000cde:	2380      	movs	r3, #128	; 0x80
 8000ce0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce6:	f107 0318 	add.w	r3, r7, #24
 8000cea:	4618      	mov	r0, r3
 8000cec:	f003 f896 	bl	8003e1c <HAL_RCCEx_PeriphCLKConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8000cf6:	f7ff ff6f 	bl	8000bd8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <HAL_I2C_MspInit+0x138>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	4a19      	ldr	r2, [pc, #100]	; (8000d64 <HAL_I2C_MspInit+0x138>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d06:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <HAL_I2C_MspInit+0x138>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d12:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d1a:	2312      	movs	r3, #18
 8000d1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d32:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d36:	4619      	mov	r1, r3
 8000d38:	480b      	ldr	r0, [pc, #44]	; (8000d68 <HAL_I2C_MspInit+0x13c>)
 8000d3a:	f000 fbd5 	bl	80014e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <HAL_I2C_MspInit+0x138>)
 8000d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d42:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <HAL_I2C_MspInit+0x138>)
 8000d44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d48:	6593      	str	r3, [r2, #88]	; 0x58
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_I2C_MspInit+0x138>)
 8000d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
}
 8000d56:	bf00      	nop
 8000d58:	37c0      	adds	r7, #192	; 0xc0
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40005400 	.word	0x40005400
 8000d64:	40021000 	.word	0x40021000
 8000d68:	48000400 	.word	0x48000400
 8000d6c:	40005800 	.word	0x40005800

08000d70 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b0b0      	sub	sp, #192	; 0xc0
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d88:	f107 0318 	add.w	r3, r7, #24
 8000d8c:	2294      	movs	r2, #148	; 0x94
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4618      	mov	r0, r3
 8000d92:	f00c fd63 	bl	800d85c <memset>
  if(hsd->Instance==SDMMC1)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a33      	ldr	r2, [pc, #204]	; (8000e68 <HAL_SD_MspInit+0xf8>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d15f      	bne.n	8000e60 <HAL_SD_MspInit+0xf0>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8000da0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000da4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8000da6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000daa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dae:	f107 0318 	add.w	r3, r7, #24
 8000db2:	4618      	mov	r0, r3
 8000db4:	f003 f832 	bl	8003e1c <HAL_RCCEx_PeriphCLKConfig>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8000dbe:	f7ff ff0b 	bl	8000bd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000dc2:	4b2a      	ldr	r3, [pc, #168]	; (8000e6c <HAL_SD_MspInit+0xfc>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	4a29      	ldr	r2, [pc, #164]	; (8000e6c <HAL_SD_MspInit+0xfc>)
 8000dc8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dce:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <HAL_SD_MspInit+0xfc>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dda:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <HAL_SD_MspInit+0xfc>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	4a23      	ldr	r2, [pc, #140]	; (8000e6c <HAL_SD_MspInit+0xfc>)
 8000de0:	f043 0304 	orr.w	r3, r3, #4
 8000de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de6:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <HAL_SD_MspInit+0xfc>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	f003 0304 	and.w	r3, r3, #4
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df2:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <HAL_SD_MspInit+0xfc>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	4a1d      	ldr	r2, [pc, #116]	; (8000e6c <HAL_SD_MspInit+0xfc>)
 8000df8:	f043 0308 	orr.w	r3, r3, #8
 8000dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfe:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <HAL_SD_MspInit+0xfc>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	f003 0308 	and.w	r3, r3, #8
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000e0a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000e0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e24:	230c      	movs	r3, #12
 8000e26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e2e:	4619      	mov	r1, r3
 8000e30:	480f      	ldr	r0, [pc, #60]	; (8000e70 <HAL_SD_MspInit+0x100>)
 8000e32:	f000 fb59 	bl	80014e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e36:	2304      	movs	r3, #4
 8000e38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e4e:	230c      	movs	r3, #12
 8000e50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e54:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4806      	ldr	r0, [pc, #24]	; (8000e74 <HAL_SD_MspInit+0x104>)
 8000e5c:	f000 fb44 	bl	80014e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000e60:	bf00      	nop
 8000e62:	37c0      	adds	r7, #192	; 0xc0
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	50062400 	.word	0x50062400
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	48000800 	.word	0x48000800
 8000e74:	48000c00 	.word	0x48000c00

08000e78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a17      	ldr	r2, [pc, #92]	; (8000ef4 <HAL_SPI_MspInit+0x7c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d128      	bne.n	8000eec <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e9a:	4b17      	ldr	r3, [pc, #92]	; (8000ef8 <HAL_SPI_MspInit+0x80>)
 8000e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e9e:	4a16      	ldr	r2, [pc, #88]	; (8000ef8 <HAL_SPI_MspInit+0x80>)
 8000ea0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ea4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ea6:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <HAL_SPI_MspInit+0x80>)
 8000ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <HAL_SPI_MspInit+0x80>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb6:	4a10      	ldr	r2, [pc, #64]	; (8000ef8 <HAL_SPI_MspInit+0x80>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_SPI_MspInit+0x80>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000eca:	23f0      	movs	r3, #240	; 0xf0
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eda:	2305      	movs	r3, #5
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee8:	f000 fafe 	bl	80014e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000eec:	bf00      	nop
 8000eee:	3728      	adds	r7, #40	; 0x28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40013000 	.word	0x40013000
 8000ef8:	40021000 	.word	0x40021000

08000efc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <HAL_TIM_Base_MspInit+0x38>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d10b      	bne.n	8000f26 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <HAL_TIM_Base_MspInit+0x3c>)
 8000f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f12:	4a09      	ldr	r2, [pc, #36]	; (8000f38 <HAL_TIM_Base_MspInit+0x3c>)
 8000f14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f18:	6613      	str	r3, [r2, #96]	; 0x60
 8000f1a:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <HAL_TIM_Base_MspInit+0x3c>)
 8000f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000f26:	bf00      	nop
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40014800 	.word	0x40014800
 8000f38:	40021000 	.word	0x40021000

08000f3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b0b0      	sub	sp, #192	; 0xc0
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f54:	f107 0318 	add.w	r3, r7, #24
 8000f58:	2294      	movs	r2, #148	; 0x94
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f00c fc7d 	bl	800d85c <memset>
  if(huart->Instance==USART1)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a43      	ldr	r2, [pc, #268]	; (8001074 <HAL_UART_MspInit+0x138>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d13d      	bne.n	8000fe8 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f70:	2300      	movs	r3, #0
 8000f72:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f74:	f107 0318 	add.w	r3, r7, #24
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f002 ff4f 	bl	8003e1c <HAL_RCCEx_PeriphCLKConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f84:	f7ff fe28 	bl	8000bd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f88:	4b3b      	ldr	r3, [pc, #236]	; (8001078 <HAL_UART_MspInit+0x13c>)
 8000f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f8c:	4a3a      	ldr	r2, [pc, #232]	; (8001078 <HAL_UART_MspInit+0x13c>)
 8000f8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f92:	6613      	str	r3, [r2, #96]	; 0x60
 8000f94:	4b38      	ldr	r3, [pc, #224]	; (8001078 <HAL_UART_MspInit+0x13c>)
 8000f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa0:	4b35      	ldr	r3, [pc, #212]	; (8001078 <HAL_UART_MspInit+0x13c>)
 8000fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa4:	4a34      	ldr	r2, [pc, #208]	; (8001078 <HAL_UART_MspInit+0x13c>)
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fac:	4b32      	ldr	r3, [pc, #200]	; (8001078 <HAL_UART_MspInit+0x13c>)
 8000fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8000fb8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fd2:	2307      	movs	r3, #7
 8000fd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe2:	f000 fa81 	bl	80014e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fe6:	e040      	b.n	800106a <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a23      	ldr	r2, [pc, #140]	; (800107c <HAL_UART_MspInit+0x140>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d13b      	bne.n	800106a <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffa:	f107 0318 	add.w	r3, r7, #24
 8000ffe:	4618      	mov	r0, r3
 8001000:	f002 ff0c 	bl	8003e1c <HAL_RCCEx_PeriphCLKConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800100a:	f7ff fde5 	bl	8000bd8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800100e:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <HAL_UART_MspInit+0x13c>)
 8001010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001012:	4a19      	ldr	r2, [pc, #100]	; (8001078 <HAL_UART_MspInit+0x13c>)
 8001014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001018:	6593      	str	r3, [r2, #88]	; 0x58
 800101a:	4b17      	ldr	r3, [pc, #92]	; (8001078 <HAL_UART_MspInit+0x13c>)
 800101c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	4b14      	ldr	r3, [pc, #80]	; (8001078 <HAL_UART_MspInit+0x13c>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	4a13      	ldr	r2, [pc, #76]	; (8001078 <HAL_UART_MspInit+0x13c>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <HAL_UART_MspInit+0x13c>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 800103e:	230c      	movs	r3, #12
 8001040:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001056:	2307      	movs	r3, #7
 8001058:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001060:	4619      	mov	r1, r3
 8001062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001066:	f000 fa3f 	bl	80014e8 <HAL_GPIO_Init>
}
 800106a:	bf00      	nop
 800106c:	37c0      	adds	r7, #192	; 0xc0
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40013800 	.word	0x40013800
 8001078:	40021000 	.word	0x40021000
 800107c:	40004400 	.word	0x40004400

08001080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001084:	f002 fdee 	bl	8003c64 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <NMI_Handler+0x8>

0800108a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108e:	e7fe      	b.n	800108e <HardFault_Handler+0x4>

08001090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <MemManage_Handler+0x4>

08001096 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109a:	e7fe      	b.n	800109a <BusFault_Handler+0x4>

0800109c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <UsageFault_Handler+0x4>

080010a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d0:	f000 f8b4 	bl	800123c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	if (tick) {tick--;}
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <TIM1_TRG_COM_TIM17_IRQHandler+0x28>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d006      	beq.n	80010f4 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <TIM1_TRG_COM_TIM17_IRQHandler+0x28>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	3b01      	subs	r3, #1
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	4b03      	ldr	r3, [pc, #12]	; (8001100 <TIM1_TRG_COM_TIM17_IRQHandler+0x28>)
 80010f2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80010f4:	4803      	ldr	r0, [pc, #12]	; (8001104 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c>)
 80010f6:	f006 f9e8 	bl	80074ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200004a4 	.word	0x200004a4
 8001104:	20000338 	.word	0x20000338

08001108 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800110c:	4802      	ldr	r0, [pc, #8]	; (8001118 <OTG_FS_IRQHandler+0x10>)
 800110e:	f000 fe40 	bl	8001d92 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20001994 	.word	0x20001994

0800111c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <SystemInit+0x20>)
 8001122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001126:	4a05      	ldr	r2, [pc, #20]	; (800113c <SystemInit+0x20>)
 8001128:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800112c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001140:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001178 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001144:	f7ff ffea 	bl	800111c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001148:	480c      	ldr	r0, [pc, #48]	; (800117c <LoopForever+0x6>)
  ldr r1, =_edata
 800114a:	490d      	ldr	r1, [pc, #52]	; (8001180 <LoopForever+0xa>)
  ldr r2, =_sidata
 800114c:	4a0d      	ldr	r2, [pc, #52]	; (8001184 <LoopForever+0xe>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001150:	e002      	b.n	8001158 <LoopCopyDataInit>

08001152 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001152:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001154:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001156:	3304      	adds	r3, #4

08001158 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001158:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800115c:	d3f9      	bcc.n	8001152 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115e:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001160:	4c0a      	ldr	r4, [pc, #40]	; (800118c <LoopForever+0x16>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001164:	e001      	b.n	800116a <LoopFillZerobss>

08001166 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001166:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001168:	3204      	adds	r2, #4

0800116a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800116c:	d3fb      	bcc.n	8001166 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800116e:	f00c fb51 	bl	800d814 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001172:	f7ff f9c5 	bl	8000500 <main>

08001176 <LoopForever>:

LoopForever:
    b LoopForever
 8001176:	e7fe      	b.n	8001176 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001178:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800117c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001180:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8001184:	0800d97c 	.word	0x0800d97c
  ldr r2, =_sbss
 8001188:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 800118c:	200020c0 	.word	0x200020c0

08001190 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001190:	e7fe      	b.n	8001190 <ADC1_IRQHandler>

08001192 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001198:	2300      	movs	r3, #0
 800119a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119c:	2003      	movs	r0, #3
 800119e:	f000 f961 	bl	8001464 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011a2:	200f      	movs	r0, #15
 80011a4:	f000 f80e 	bl	80011c4 <HAL_InitTick>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d002      	beq.n	80011b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	71fb      	strb	r3, [r7, #7]
 80011b2:	e001      	b.n	80011b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011b4:	f7ff fd16 	bl	8000be4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011b8:	79fb      	ldrb	r3, [r7, #7]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011cc:	2300      	movs	r3, #0
 80011ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011d0:	4b17      	ldr	r3, [pc, #92]	; (8001230 <HAL_InitTick+0x6c>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d023      	beq.n	8001220 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011d8:	4b16      	ldr	r3, [pc, #88]	; (8001234 <HAL_InitTick+0x70>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b14      	ldr	r3, [pc, #80]	; (8001230 <HAL_InitTick+0x6c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4619      	mov	r1, r3
 80011e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 f96d 	bl	80014ce <HAL_SYSTICK_Config>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10f      	bne.n	800121a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b0f      	cmp	r3, #15
 80011fe:	d809      	bhi.n	8001214 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001200:	2200      	movs	r2, #0
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001208:	f000 f937 	bl	800147a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800120c:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <HAL_InitTick+0x74>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e007      	b.n	8001224 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	73fb      	strb	r3, [r7, #15]
 8001218:	e004      	b.n	8001224 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	73fb      	strb	r3, [r7, #15]
 800121e:	e001      	b.n	8001224 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001224:	7bfb      	ldrb	r3, [r7, #15]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000008 	.word	0x20000008
 8001234:	20000000 	.word	0x20000000
 8001238:	20000004 	.word	0x20000004

0800123c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_IncTick+0x20>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <HAL_IncTick+0x24>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4413      	add	r3, r2
 800124c:	4a04      	ldr	r2, [pc, #16]	; (8001260 <HAL_IncTick+0x24>)
 800124e:	6013      	str	r3, [r2, #0]
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000008 	.word	0x20000008
 8001260:	200004a8 	.word	0x200004a8

08001264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return uwTick;
 8001268:	4b03      	ldr	r3, [pc, #12]	; (8001278 <HAL_GetTick+0x14>)
 800126a:	681b      	ldr	r3, [r3, #0]
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	200004a8 	.word	0x200004a8

0800127c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001284:	f7ff ffee 	bl	8001264 <HAL_GetTick>
 8001288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001294:	d005      	beq.n	80012a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <HAL_Delay+0x44>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4413      	add	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012a2:	bf00      	nop
 80012a4:	f7ff ffde 	bl	8001264 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d8f7      	bhi.n	80012a4 <HAL_Delay+0x28>
  {
  }
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000008 	.word	0x20000008

080012c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e0:	4013      	ands	r3, r2
 80012e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f6:	4a04      	ldr	r2, [pc, #16]	; (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	60d3      	str	r3, [r2, #12]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001310:	4b04      	ldr	r3, [pc, #16]	; (8001324 <__NVIC_GetPriorityGrouping+0x18>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	0a1b      	lsrs	r3, r3, #8
 8001316:	f003 0307 	and.w	r3, r3, #7
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	2b00      	cmp	r3, #0
 8001338:	db0b      	blt.n	8001352 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	f003 021f 	and.w	r2, r3, #31
 8001340:	4907      	ldr	r1, [pc, #28]	; (8001360 <__NVIC_EnableIRQ+0x38>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	095b      	lsrs	r3, r3, #5
 8001348:	2001      	movs	r0, #1
 800134a:	fa00 f202 	lsl.w	r2, r0, r2
 800134e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000e100 	.word	0xe000e100

08001364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	6039      	str	r1, [r7, #0]
 800136e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	2b00      	cmp	r3, #0
 8001376:	db0a      	blt.n	800138e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	b2da      	uxtb	r2, r3
 800137c:	490c      	ldr	r1, [pc, #48]	; (80013b0 <__NVIC_SetPriority+0x4c>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	0112      	lsls	r2, r2, #4
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	440b      	add	r3, r1
 8001388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800138c:	e00a      	b.n	80013a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4908      	ldr	r1, [pc, #32]	; (80013b4 <__NVIC_SetPriority+0x50>)
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	3b04      	subs	r3, #4
 800139c:	0112      	lsls	r2, r2, #4
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	440b      	add	r3, r1
 80013a2:	761a      	strb	r2, [r3, #24]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000e100 	.word	0xe000e100
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	; 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f1c3 0307 	rsb	r3, r3, #7
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	bf28      	it	cs
 80013d6:	2304      	movcs	r3, #4
 80013d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3304      	adds	r3, #4
 80013de:	2b06      	cmp	r3, #6
 80013e0:	d902      	bls.n	80013e8 <NVIC_EncodePriority+0x30>
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3b03      	subs	r3, #3
 80013e6:	e000      	b.n	80013ea <NVIC_EncodePriority+0x32>
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43da      	mvns	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	401a      	ands	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001400:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	43d9      	mvns	r1, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	4313      	orrs	r3, r2
         );
}
 8001412:	4618      	mov	r0, r3
 8001414:	3724      	adds	r7, #36	; 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001430:	d301      	bcc.n	8001436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001432:	2301      	movs	r3, #1
 8001434:	e00f      	b.n	8001456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <SysTick_Config+0x40>)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143e:	210f      	movs	r1, #15
 8001440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001444:	f7ff ff8e 	bl	8001364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <SysTick_Config+0x40>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144e:	4b04      	ldr	r3, [pc, #16]	; (8001460 <SysTick_Config+0x40>)
 8001450:	2207      	movs	r2, #7
 8001452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	e000e010 	.word	0xe000e010

08001464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ff29 	bl	80012c4 <__NVIC_SetPriorityGrouping>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b086      	sub	sp, #24
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800148c:	f7ff ff3e 	bl	800130c <__NVIC_GetPriorityGrouping>
 8001490:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	6978      	ldr	r0, [r7, #20]
 8001498:	f7ff ff8e 	bl	80013b8 <NVIC_EncodePriority>
 800149c:	4602      	mov	r2, r0
 800149e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff5d 	bl	8001364 <__NVIC_SetPriority>
}
 80014aa:	bf00      	nop
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff31 	bl	8001328 <__NVIC_EnableIRQ>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ffa2 	bl	8001420 <SysTick_Config>
 80014dc:	4603      	mov	r3, r0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b087      	sub	sp, #28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f6:	e166      	b.n	80017c6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	2101      	movs	r1, #1
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	fa01 f303 	lsl.w	r3, r1, r3
 8001504:	4013      	ands	r3, r2
 8001506:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 8158 	beq.w	80017c0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	2b01      	cmp	r3, #1
 800151a:	d005      	beq.n	8001528 <HAL_GPIO_Init+0x40>
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 0303 	and.w	r3, r3, #3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d130      	bne.n	800158a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	2203      	movs	r2, #3
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	68da      	ldr	r2, [r3, #12]
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800155e:	2201      	movs	r2, #1
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4013      	ands	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	091b      	lsrs	r3, r3, #4
 8001574:	f003 0201 	and.w	r2, r3, #1
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	2b03      	cmp	r3, #3
 8001594:	d017      	beq.n	80015c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	2203      	movs	r2, #3
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d123      	bne.n	800161a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	08da      	lsrs	r2, r3, #3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3208      	adds	r2, #8
 80015da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	220f      	movs	r2, #15
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	691a      	ldr	r2, [r3, #16]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f003 0307 	and.w	r3, r3, #7
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	08da      	lsrs	r2, r3, #3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3208      	adds	r2, #8
 8001614:	6939      	ldr	r1, [r7, #16]
 8001616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	2203      	movs	r2, #3
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f003 0203 	and.w	r2, r3, #3
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 80b2 	beq.w	80017c0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165c:	4b61      	ldr	r3, [pc, #388]	; (80017e4 <HAL_GPIO_Init+0x2fc>)
 800165e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001660:	4a60      	ldr	r2, [pc, #384]	; (80017e4 <HAL_GPIO_Init+0x2fc>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	6613      	str	r3, [r2, #96]	; 0x60
 8001668:	4b5e      	ldr	r3, [pc, #376]	; (80017e4 <HAL_GPIO_Init+0x2fc>)
 800166a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001674:	4a5c      	ldr	r2, [pc, #368]	; (80017e8 <HAL_GPIO_Init+0x300>)
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	089b      	lsrs	r3, r3, #2
 800167a:	3302      	adds	r3, #2
 800167c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001680:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	220f      	movs	r2, #15
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4013      	ands	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800169e:	d02b      	beq.n	80016f8 <HAL_GPIO_Init+0x210>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a52      	ldr	r2, [pc, #328]	; (80017ec <HAL_GPIO_Init+0x304>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d025      	beq.n	80016f4 <HAL_GPIO_Init+0x20c>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a51      	ldr	r2, [pc, #324]	; (80017f0 <HAL_GPIO_Init+0x308>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d01f      	beq.n	80016f0 <HAL_GPIO_Init+0x208>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a50      	ldr	r2, [pc, #320]	; (80017f4 <HAL_GPIO_Init+0x30c>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d019      	beq.n	80016ec <HAL_GPIO_Init+0x204>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a4f      	ldr	r2, [pc, #316]	; (80017f8 <HAL_GPIO_Init+0x310>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d013      	beq.n	80016e8 <HAL_GPIO_Init+0x200>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a4e      	ldr	r2, [pc, #312]	; (80017fc <HAL_GPIO_Init+0x314>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d00d      	beq.n	80016e4 <HAL_GPIO_Init+0x1fc>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a4d      	ldr	r2, [pc, #308]	; (8001800 <HAL_GPIO_Init+0x318>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d007      	beq.n	80016e0 <HAL_GPIO_Init+0x1f8>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a4c      	ldr	r2, [pc, #304]	; (8001804 <HAL_GPIO_Init+0x31c>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d101      	bne.n	80016dc <HAL_GPIO_Init+0x1f4>
 80016d8:	2307      	movs	r3, #7
 80016da:	e00e      	b.n	80016fa <HAL_GPIO_Init+0x212>
 80016dc:	2308      	movs	r3, #8
 80016de:	e00c      	b.n	80016fa <HAL_GPIO_Init+0x212>
 80016e0:	2306      	movs	r3, #6
 80016e2:	e00a      	b.n	80016fa <HAL_GPIO_Init+0x212>
 80016e4:	2305      	movs	r3, #5
 80016e6:	e008      	b.n	80016fa <HAL_GPIO_Init+0x212>
 80016e8:	2304      	movs	r3, #4
 80016ea:	e006      	b.n	80016fa <HAL_GPIO_Init+0x212>
 80016ec:	2303      	movs	r3, #3
 80016ee:	e004      	b.n	80016fa <HAL_GPIO_Init+0x212>
 80016f0:	2302      	movs	r3, #2
 80016f2:	e002      	b.n	80016fa <HAL_GPIO_Init+0x212>
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <HAL_GPIO_Init+0x212>
 80016f8:	2300      	movs	r3, #0
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	f002 0203 	and.w	r2, r2, #3
 8001700:	0092      	lsls	r2, r2, #2
 8001702:	4093      	lsls	r3, r2
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	4313      	orrs	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800170a:	4937      	ldr	r1, [pc, #220]	; (80017e8 <HAL_GPIO_Init+0x300>)
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	089b      	lsrs	r3, r3, #2
 8001710:	3302      	adds	r3, #2
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001718:	4b3b      	ldr	r3, [pc, #236]	; (8001808 <HAL_GPIO_Init+0x320>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	43db      	mvns	r3, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4013      	ands	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800173c:	4a32      	ldr	r2, [pc, #200]	; (8001808 <HAL_GPIO_Init+0x320>)
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001742:	4b31      	ldr	r3, [pc, #196]	; (8001808 <HAL_GPIO_Init+0x320>)
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	43db      	mvns	r3, r3
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4013      	ands	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4313      	orrs	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001766:	4a28      	ldr	r2, [pc, #160]	; (8001808 <HAL_GPIO_Init+0x320>)
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800176c:	4b26      	ldr	r3, [pc, #152]	; (8001808 <HAL_GPIO_Init+0x320>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	43db      	mvns	r3, r3
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4013      	ands	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001790:	4a1d      	ldr	r2, [pc, #116]	; (8001808 <HAL_GPIO_Init+0x320>)
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001796:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <HAL_GPIO_Init+0x320>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	43db      	mvns	r3, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017ba:	4a13      	ldr	r2, [pc, #76]	; (8001808 <HAL_GPIO_Init+0x320>)
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	3301      	adds	r3, #1
 80017c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	fa22 f303 	lsr.w	r3, r2, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f47f ae91 	bne.w	80014f8 <HAL_GPIO_Init+0x10>
  }
}
 80017d6:	bf00      	nop
 80017d8:	bf00      	nop
 80017da:	371c      	adds	r7, #28
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40010000 	.word	0x40010000
 80017ec:	48000400 	.word	0x48000400
 80017f0:	48000800 	.word	0x48000800
 80017f4:	48000c00 	.word	0x48000c00
 80017f8:	48001000 	.word	0x48001000
 80017fc:	48001400 	.word	0x48001400
 8001800:	48001800 	.word	0x48001800
 8001804:	48001c00 	.word	0x48001c00
 8001808:	40010400 	.word	0x40010400

0800180c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691a      	ldr	r2, [r3, #16]
 800181c:	887b      	ldrh	r3, [r7, #2]
 800181e:	4013      	ands	r3, r2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d002      	beq.n	800182a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001824:	2301      	movs	r3, #1
 8001826:	73fb      	strb	r3, [r7, #15]
 8001828:	e001      	b.n	800182e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800182a:	2300      	movs	r3, #0
 800182c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800182e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	807b      	strh	r3, [r7, #2]
 8001848:	4613      	mov	r3, r2
 800184a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800184c:	787b      	ldrb	r3, [r7, #1]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001852:	887a      	ldrh	r2, [r7, #2]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001858:	e002      	b.n	8001860 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800185a:	887a      	ldrh	r2, [r7, #2]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800187e:	887a      	ldrh	r2, [r7, #2]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4013      	ands	r3, r2
 8001884:	041a      	lsls	r2, r3, #16
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	43d9      	mvns	r1, r3
 800188a:	887b      	ldrh	r3, [r7, #2]
 800188c:	400b      	ands	r3, r1
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	619a      	str	r2, [r3, #24]
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e081      	b.n	80019b6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d106      	bne.n	80018cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff f9b0 	bl	8000c2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2224      	movs	r2, #36	; 0x24
 80018d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0201 	bic.w	r2, r2, #1
 80018e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001900:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d107      	bne.n	800191a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	e006      	b.n	8001928 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001926:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	2b02      	cmp	r3, #2
 800192e:	d104      	bne.n	800193a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001938:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800194c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800195c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691a      	ldr	r2, [r3, #16]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	430a      	orrs	r2, r1
 8001976:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69d9      	ldr	r1, [r3, #28]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a1a      	ldr	r2, [r3, #32]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 0201 	orr.w	r2, r2, #1
 8001996:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2220      	movs	r2, #32
 80019a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b20      	cmp	r3, #32
 80019d2:	d138      	bne.n	8001a46 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d101      	bne.n	80019e2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019de:	2302      	movs	r3, #2
 80019e0:	e032      	b.n	8001a48 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2224      	movs	r2, #36	; 0x24
 80019ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 0201 	bic.w	r2, r2, #1
 8001a00:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a10:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6819      	ldr	r1, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f042 0201 	orr.w	r2, r2, #1
 8001a30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2220      	movs	r2, #32
 8001a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e000      	b.n	8001a48 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a46:	2302      	movs	r3, #2
  }
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b20      	cmp	r3, #32
 8001a68:	d139      	bne.n	8001ade <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a74:	2302      	movs	r3, #2
 8001a76:	e033      	b.n	8001ae0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2224      	movs	r2, #36	; 0x24
 8001a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0201 	bic.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001aa6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	021b      	lsls	r3, r3, #8
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f042 0201 	orr.w	r2, r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2220      	movs	r2, #32
 8001ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ada:	2300      	movs	r3, #0
 8001adc:	e000      	b.n	8001ae0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ade:	2302      	movs	r3, #2
  }
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aee:	b08f      	sub	sp, #60	; 0x3c
 8001af0:	af0a      	add	r7, sp, #40	; 0x28
 8001af2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e116      	b.n	8001d2c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d106      	bne.n	8001b1e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f00b fa49 	bl	800cfb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2203      	movs	r2, #3
 8001b22:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d102      	bne.n	8001b38 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f007 ff5e 	bl	80099fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	603b      	str	r3, [r7, #0]
 8001b48:	687e      	ldr	r6, [r7, #4]
 8001b4a:	466d      	mov	r5, sp
 8001b4c:	f106 0410 	add.w	r4, r6, #16
 8001b50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b60:	1d33      	adds	r3, r6, #4
 8001b62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b64:	6838      	ldr	r0, [r7, #0]
 8001b66:	f007 fe71 	bl	800984c <USB_CoreInit>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2202      	movs	r2, #2
 8001b74:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e0d7      	b.n	8001d2c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2100      	movs	r1, #0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f007 ff4c 	bl	8009a20 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	73fb      	strb	r3, [r7, #15]
 8001b8c:	e04a      	b.n	8001c24 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b8e:	7bfa      	ldrb	r2, [r7, #15]
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	4413      	add	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	333d      	adds	r3, #61	; 0x3d
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ba2:	7bfa      	ldrb	r2, [r7, #15]
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	4413      	add	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	440b      	add	r3, r1
 8001bb0:	333c      	adds	r3, #60	; 0x3c
 8001bb2:	7bfa      	ldrb	r2, [r7, #15]
 8001bb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bb6:	7bfa      	ldrb	r2, [r7, #15]
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	b298      	uxth	r0, r3
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	3344      	adds	r3, #68	; 0x44
 8001bca:	4602      	mov	r2, r0
 8001bcc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bce:	7bfa      	ldrb	r2, [r7, #15]
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	440b      	add	r3, r1
 8001bdc:	3340      	adds	r3, #64	; 0x40
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001be2:	7bfa      	ldrb	r2, [r7, #15]
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	4413      	add	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	440b      	add	r3, r1
 8001bf0:	3348      	adds	r3, #72	; 0x48
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bf6:	7bfa      	ldrb	r2, [r7, #15]
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	4413      	add	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	440b      	add	r3, r1
 8001c04:	334c      	adds	r3, #76	; 0x4c
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c0a:	7bfa      	ldrb	r2, [r7, #15]
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	4413      	add	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	440b      	add	r3, r1
 8001c18:	3354      	adds	r3, #84	; 0x54
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	3301      	adds	r3, #1
 8001c22:	73fb      	strb	r3, [r7, #15]
 8001c24:	7bfa      	ldrb	r2, [r7, #15]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d3af      	bcc.n	8001b8e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	73fb      	strb	r3, [r7, #15]
 8001c32:	e044      	b.n	8001cbe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c34:	7bfa      	ldrb	r2, [r7, #15]
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	440b      	add	r3, r1
 8001c42:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001c46:	2200      	movs	r2, #0
 8001c48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c4a:	7bfa      	ldrb	r2, [r7, #15]
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4413      	add	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	440b      	add	r3, r1
 8001c58:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001c5c:	7bfa      	ldrb	r2, [r7, #15]
 8001c5e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c60:	7bfa      	ldrb	r2, [r7, #15]
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	4613      	mov	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4413      	add	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001c72:	2200      	movs	r2, #0
 8001c74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c76:	7bfa      	ldrb	r2, [r7, #15]
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	4413      	add	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	440b      	add	r3, r1
 8001c84:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c8c:	7bfa      	ldrb	r2, [r7, #15]
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4413      	add	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ca2:	7bfa      	ldrb	r2, [r7, #15]
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4413      	add	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	440b      	add	r3, r1
 8001cb0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	73fb      	strb	r3, [r7, #15]
 8001cbe:	7bfa      	ldrb	r2, [r7, #15]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d3b5      	bcc.n	8001c34 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	603b      	str	r3, [r7, #0]
 8001cce:	687e      	ldr	r6, [r7, #4]
 8001cd0:	466d      	mov	r5, sp
 8001cd2:	f106 0410 	add.w	r4, r6, #16
 8001cd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ce2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ce6:	1d33      	adds	r3, r6, #4
 8001ce8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cea:	6838      	ldr	r0, [r7, #0]
 8001cec:	f007 fee4 	bl	8009ab8 <USB_DevInit>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d005      	beq.n	8001d02 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e014      	b.n	8001d2c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d102      	bne.n	8001d20 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f001 f882 	bl	8002e24 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f008 ff6c 	bl	800ac02 <USB_DevDisconnect>

  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d34 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d101      	bne.n	8001d50 <HAL_PCD_Start+0x1c>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e01c      	b.n	8001d8a <HAL_PCD_Start+0x56>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d105      	bne.n	8001d6c <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d64:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f007 fe33 	bl	80099dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f008 ff20 	bl	800abc0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d92:	b590      	push	{r4, r7, lr}
 8001d94:	b08d      	sub	sp, #52	; 0x34
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001da0:	6a3b      	ldr	r3, [r7, #32]
 8001da2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f008 ffde 	bl	800ad6a <USB_GetMode>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f040 847e 	bne.w	80026b2 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f008 ff42 	bl	800ac44 <USB_ReadInterrupts>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 8474 	beq.w	80026b0 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	0a1b      	lsrs	r3, r3, #8
 8001dd2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f008 ff2f 	bl	800ac44 <USB_ReadInterrupts>
 8001de6:	4603      	mov	r3, r0
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d107      	bne.n	8001e00 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	695a      	ldr	r2, [r3, #20]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f002 0202 	and.w	r2, r2, #2
 8001dfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f008 ff1d 	bl	800ac44 <USB_ReadInterrupts>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	f003 0310 	and.w	r3, r3, #16
 8001e10:	2b10      	cmp	r3, #16
 8001e12:	d161      	bne.n	8001ed8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699a      	ldr	r2, [r3, #24]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0210 	bic.w	r2, r2, #16
 8001e22:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	f003 020f 	and.w	r2, r3, #15
 8001e30:	4613      	mov	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4413      	add	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	4413      	add	r3, r2
 8001e40:	3304      	adds	r3, #4
 8001e42:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	0c5b      	lsrs	r3, r3, #17
 8001e48:	f003 030f 	and.w	r3, r3, #15
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d124      	bne.n	8001e9a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d035      	beq.n	8001ec8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	091b      	lsrs	r3, r3, #4
 8001e64:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	6a38      	ldr	r0, [r7, #32]
 8001e70:	f008 fd54 	bl	800a91c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	091b      	lsrs	r3, r3, #4
 8001e7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e80:	441a      	add	r2, r3
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	6a1a      	ldr	r2, [r3, #32]
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e92:	441a      	add	r2, r3
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	621a      	str	r2, [r3, #32]
 8001e98:	e016      	b.n	8001ec8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	0c5b      	lsrs	r3, r3, #17
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	2b06      	cmp	r3, #6
 8001ea4:	d110      	bne.n	8001ec8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001eac:	2208      	movs	r2, #8
 8001eae:	4619      	mov	r1, r3
 8001eb0:	6a38      	ldr	r0, [r7, #32]
 8001eb2:	f008 fd33 	bl	800a91c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	6a1a      	ldr	r2, [r3, #32]
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ec2:	441a      	add	r2, r3
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	699a      	ldr	r2, [r3, #24]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0210 	orr.w	r2, r2, #16
 8001ed6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f008 feb1 	bl	800ac44 <USB_ReadInterrupts>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ee8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001eec:	f040 80a7 	bne.w	800203e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f008 feb6 	bl	800ac6a <USB_ReadDevAllOutEpInterrupt>
 8001efe:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001f00:	e099      	b.n	8002036 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 808e 	beq.w	800202a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	4611      	mov	r1, r2
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f008 feda 	bl	800acd2 <USB_ReadDevOutEPInterrupt>
 8001f1e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00c      	beq.n	8001f44 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	015a      	lsls	r2, r3, #5
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	4413      	add	r3, r2
 8001f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f36:	461a      	mov	r2, r3
 8001f38:	2301      	movs	r3, #1
 8001f3a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 fe96 	bl	8002c70 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00c      	beq.n	8001f68 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	015a      	lsls	r2, r3, #5
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	2308      	movs	r3, #8
 8001f5e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 fed2 	bl	8002d0c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d008      	beq.n	8001f84 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	015a      	lsls	r2, r3, #5
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	4413      	add	r3, r2
 8001f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f7e:	461a      	mov	r2, r3
 8001f80:	2310      	movs	r3, #16
 8001f82:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d030      	beq.n	8001ff0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f96:	2b80      	cmp	r3, #128	; 0x80
 8001f98:	d109      	bne.n	8001fae <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	69fa      	ldr	r2, [r7, #28]
 8001fa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fa8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fac:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	78db      	ldrb	r3, [r3, #3]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d108      	bne.n	8001fde <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f00b f92d 	bl	800d238 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	015a      	lsls	r2, r3, #5
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fea:	461a      	mov	r2, r3
 8001fec:	2302      	movs	r3, #2
 8001fee:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	f003 0320 	and.w	r3, r3, #32
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d008      	beq.n	800200c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	015a      	lsls	r2, r3, #5
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	4413      	add	r3, r2
 8002002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002006:	461a      	mov	r2, r3
 8002008:	2320      	movs	r3, #32
 800200a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d009      	beq.n	800202a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	015a      	lsls	r2, r3, #5
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	4413      	add	r3, r2
 800201e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002022:	461a      	mov	r2, r3
 8002024:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002028:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	3301      	adds	r3, #1
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002032:	085b      	lsrs	r3, r3, #1
 8002034:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002038:	2b00      	cmp	r3, #0
 800203a:	f47f af62 	bne.w	8001f02 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f008 fdfe 	bl	800ac44 <USB_ReadInterrupts>
 8002048:	4603      	mov	r3, r0
 800204a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800204e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002052:	f040 80a4 	bne.w	800219e <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f008 fe1f 	bl	800ac9e <USB_ReadDevAllInEpInterrupt>
 8002060:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002066:	e096      	b.n	8002196 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 808b 	beq.w	800218a <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	4611      	mov	r1, r2
 800207e:	4618      	mov	r0, r3
 8002080:	f008 fe45 	bl	800ad0e <USB_ReadDevInEPInterrupt>
 8002084:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b00      	cmp	r3, #0
 800208e:	d020      	beq.n	80020d2 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	2201      	movs	r2, #1
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69f9      	ldr	r1, [r7, #28]
 80020ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020b0:	4013      	ands	r3, r2
 80020b2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	015a      	lsls	r2, r3, #5
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	4413      	add	r3, r2
 80020bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020c0:	461a      	mov	r2, r3
 80020c2:	2301      	movs	r3, #1
 80020c4:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	4619      	mov	r1, r3
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f00b f81e 	bl	800d10e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	015a      	lsls	r2, r3, #5
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	4413      	add	r3, r2
 80020e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020e8:	461a      	mov	r2, r3
 80020ea:	2308      	movs	r3, #8
 80020ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d008      	beq.n	800210a <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	015a      	lsls	r2, r3, #5
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	4413      	add	r3, r2
 8002100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002104:	461a      	mov	r2, r3
 8002106:	2310      	movs	r3, #16
 8002108:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002110:	2b00      	cmp	r3, #0
 8002112:	d008      	beq.n	8002126 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	015a      	lsls	r2, r3, #5
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	4413      	add	r3, r2
 800211c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002120:	461a      	mov	r2, r3
 8002122:	2340      	movs	r3, #64	; 0x40
 8002124:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d023      	beq.n	8002178 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002130:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002132:	6a38      	ldr	r0, [r7, #32]
 8002134:	f007 fe0c 	bl	8009d50 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213a:	4613      	mov	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4413      	add	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	3338      	adds	r3, #56	; 0x38
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	4413      	add	r3, r2
 8002148:	3304      	adds	r3, #4
 800214a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	78db      	ldrb	r3, [r3, #3]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d108      	bne.n	8002166 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	2200      	movs	r2, #0
 8002158:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	b2db      	uxtb	r3, r3
 800215e:	4619      	mov	r1, r3
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f00b f87b 	bl	800d25c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	015a      	lsls	r2, r3, #5
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	4413      	add	r3, r2
 800216e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002172:	461a      	mov	r2, r3
 8002174:	2302      	movs	r3, #2
 8002176:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002182:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 fcea 	bl	8002b5e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	3301      	adds	r3, #1
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002192:	085b      	lsrs	r3, r3, #1
 8002194:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002198:	2b00      	cmp	r3, #0
 800219a:	f47f af65 	bne.w	8002068 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f008 fd4e 	bl	800ac44 <USB_ReadInterrupts>
 80021a8:	4603      	mov	r3, r0
 80021aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80021ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021b2:	d122      	bne.n	80021fa <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	69fa      	ldr	r2, [r7, #28]
 80021be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021c2:	f023 0301 	bic.w	r3, r3, #1
 80021c6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d108      	bne.n	80021e4 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80021da:	2100      	movs	r1, #0
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f00b faad 	bl	800d73c <HAL_PCDEx_LPM_Callback>
 80021e2:	e002      	b.n	80021ea <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f00a ffff 	bl	800d1e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	695a      	ldr	r2, [r3, #20]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80021f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f008 fd20 	bl	800ac44 <USB_ReadInterrupts>
 8002204:	4603      	mov	r3, r0
 8002206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800220a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800220e:	d112      	bne.n	8002236 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b01      	cmp	r3, #1
 800221e:	d102      	bne.n	8002226 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f00a ffbb 	bl	800d19c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	695a      	ldr	r2, [r3, #20]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002234:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f008 fd02 	bl	800ac44 <USB_ReadInterrupts>
 8002240:	4603      	mov	r3, r0
 8002242:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002246:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800224a:	d121      	bne.n	8002290 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	695a      	ldr	r2, [r3, #20]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800225a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002262:	2b00      	cmp	r3, #0
 8002264:	d111      	bne.n	800228a <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002274:	089b      	lsrs	r3, r3, #2
 8002276:	f003 020f 	and.w	r2, r3, #15
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002280:	2101      	movs	r1, #1
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f00b fa5a 	bl	800d73c <HAL_PCDEx_LPM_Callback>
 8002288:	e002      	b.n	8002290 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f00a ff86 	bl	800d19c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f008 fcd5 	bl	800ac44 <USB_ReadInterrupts>
 800229a:	4603      	mov	r3, r0
 800229c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022a4:	f040 80b5 	bne.w	8002412 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	69fa      	ldr	r2, [r7, #28]
 80022b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022b6:	f023 0301 	bic.w	r3, r3, #1
 80022ba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2110      	movs	r1, #16
 80022c2:	4618      	mov	r0, r3
 80022c4:	f007 fd44 	bl	8009d50 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022c8:	2300      	movs	r3, #0
 80022ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022cc:	e046      	b.n	800235c <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80022ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022da:	461a      	mov	r2, r3
 80022dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80022e0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80022e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022f2:	0151      	lsls	r1, r2, #5
 80022f4:	69fa      	ldr	r2, [r7, #28]
 80022f6:	440a      	add	r2, r1
 80022f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80022fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002300:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002304:	015a      	lsls	r2, r3, #5
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	4413      	add	r3, r2
 800230a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800230e:	461a      	mov	r2, r3
 8002310:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002314:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	4413      	add	r3, r2
 800231e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002326:	0151      	lsls	r1, r2, #5
 8002328:	69fa      	ldr	r2, [r7, #28]
 800232a:	440a      	add	r2, r1
 800232c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002330:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002334:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002338:	015a      	lsls	r2, r3, #5
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	4413      	add	r3, r2
 800233e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002346:	0151      	lsls	r1, r2, #5
 8002348:	69fa      	ldr	r2, [r7, #28]
 800234a:	440a      	add	r2, r1
 800234c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002350:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002354:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002358:	3301      	adds	r3, #1
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002362:	429a      	cmp	r2, r3
 8002364:	d3b3      	bcc.n	80022ce <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	69fa      	ldr	r2, [r7, #28]
 8002370:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002374:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002378:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	2b00      	cmp	r3, #0
 8002380:	d016      	beq.n	80023b0 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800238c:	69fa      	ldr	r2, [r7, #28]
 800238e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002392:	f043 030b 	orr.w	r3, r3, #11
 8002396:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	69fa      	ldr	r2, [r7, #28]
 80023a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023a8:	f043 030b 	orr.w	r3, r3, #11
 80023ac:	6453      	str	r3, [r2, #68]	; 0x44
 80023ae:	e015      	b.n	80023dc <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	69fa      	ldr	r2, [r7, #28]
 80023ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023c2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80023c6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	69fa      	ldr	r2, [r7, #28]
 80023d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023d6:	f043 030b 	orr.w	r3, r3, #11
 80023da:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023ea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80023ee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023fa:	4619      	mov	r1, r3
 80023fc:	4610      	mov	r0, r2
 80023fe:	f008 fce5 	bl	800adcc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695a      	ldr	r2, [r3, #20]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002410:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f008 fc14 	bl	800ac44 <USB_ReadInterrupts>
 800241c:	4603      	mov	r3, r0
 800241e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002426:	d124      	bne.n	8002472 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f008 fcaa 	bl	800ad86 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f007 fd07 	bl	8009e4a <USB_GetDevSpeed>
 800243c:	4603      	mov	r3, r0
 800243e:	461a      	mov	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681c      	ldr	r4, [r3, #0]
 8002448:	f001 fbc4 	bl	8003bd4 <HAL_RCC_GetHCLKFreq>
 800244c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002452:	b2db      	uxtb	r3, r3
 8002454:	461a      	mov	r2, r3
 8002456:	4620      	mov	r0, r4
 8002458:	f007 fa24 	bl	80098a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f00a fe7e 	bl	800d15e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695a      	ldr	r2, [r3, #20]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002470:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f008 fbe4 	bl	800ac44 <USB_ReadInterrupts>
 800247c:	4603      	mov	r3, r0
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b08      	cmp	r3, #8
 8002484:	d10a      	bne.n	800249c <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f00a fe5b 	bl	800d142 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	695a      	ldr	r2, [r3, #20]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f002 0208 	and.w	r2, r2, #8
 800249a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f008 fbcf 	bl	800ac44 <USB_ReadInterrupts>
 80024a6:	4603      	mov	r3, r0
 80024a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ac:	2b80      	cmp	r3, #128	; 0x80
 80024ae:	d122      	bne.n	80024f6 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024bc:	2301      	movs	r3, #1
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
 80024c0:	e014      	b.n	80024ec <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c6:	4613      	mov	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4413      	add	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d105      	bne.n	80024e6 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	4619      	mov	r1, r3
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 fb0b 	bl	8002afc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	3301      	adds	r3, #1
 80024ea:	627b      	str	r3, [r7, #36]	; 0x24
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d3e5      	bcc.n	80024c2 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f008 fba2 	bl	800ac44 <USB_ReadInterrupts>
 8002500:	4603      	mov	r3, r0
 8002502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002506:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800250a:	d13b      	bne.n	8002584 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800250c:	2301      	movs	r3, #1
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
 8002510:	e02b      	b.n	800256a <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	015a      	lsls	r2, r3, #5
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	4413      	add	r3, r2
 800251a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002526:	4613      	mov	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	4413      	add	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	440b      	add	r3, r1
 8002530:	3340      	adds	r3, #64	; 0x40
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d115      	bne.n	8002564 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002538:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800253a:	2b00      	cmp	r3, #0
 800253c:	da12      	bge.n	8002564 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002542:	4613      	mov	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	333f      	adds	r3, #63	; 0x3f
 800254e:	2201      	movs	r2, #1
 8002550:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	b2db      	uxtb	r3, r3
 8002556:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800255a:	b2db      	uxtb	r3, r3
 800255c:	4619      	mov	r1, r3
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 facc 	bl	8002afc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	3301      	adds	r3, #1
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002570:	429a      	cmp	r2, r3
 8002572:	d3ce      	bcc.n	8002512 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	695a      	ldr	r2, [r3, #20]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002582:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f008 fb5b 	bl	800ac44 <USB_ReadInterrupts>
 800258e:	4603      	mov	r3, r0
 8002590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002594:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002598:	d155      	bne.n	8002646 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800259a:	2301      	movs	r3, #1
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
 800259e:	e045      	b.n	800262c <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b4:	4613      	mov	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	4413      	add	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d12e      	bne.n	8002626 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80025c8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	da2b      	bge.n	8002626 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80025da:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80025de:	429a      	cmp	r2, r3
 80025e0:	d121      	bne.n	8002626 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025e6:	4613      	mov	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4413      	add	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	440b      	add	r3, r1
 80025f0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80025f4:	2201      	movs	r2, #1
 80025f6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10a      	bne.n	8002626 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	69fa      	ldr	r2, [r7, #28]
 800261a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800261e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002622:	6053      	str	r3, [r2, #4]
            break;
 8002624:	e007      	b.n	8002636 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	3301      	adds	r3, #1
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002632:	429a      	cmp	r2, r3
 8002634:	d3b4      	bcc.n	80025a0 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	695a      	ldr	r2, [r3, #20]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002644:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f008 fafa 	bl	800ac44 <USB_ReadInterrupts>
 8002650:	4603      	mov	r3, r0
 8002652:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800265a:	d10a      	bne.n	8002672 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f00a fe0f 	bl	800d280 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695a      	ldr	r2, [r3, #20]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002670:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f008 fae4 	bl	800ac44 <USB_ReadInterrupts>
 800267c:	4603      	mov	r3, r0
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	2b04      	cmp	r3, #4
 8002684:	d115      	bne.n	80026b2 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f00a fdff 	bl	800d29c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6859      	ldr	r1, [r3, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	e000      	b.n	80026b2 <HAL_PCD_IRQHandler+0x920>
      return;
 80026b0:	bf00      	nop
    }
  }
}
 80026b2:	3734      	adds	r7, #52	; 0x34
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd90      	pop	{r4, r7, pc}

080026b8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d101      	bne.n	80026d2 <HAL_PCD_SetAddress+0x1a>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e013      	b.n	80026fa <HAL_PCD_SetAddress+0x42>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	78fa      	ldrb	r2, [r7, #3]
 80026de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	78fa      	ldrb	r2, [r7, #3]
 80026e8:	4611      	mov	r1, r2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f008 fa42 	bl	800ab74 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b084      	sub	sp, #16
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	4608      	mov	r0, r1
 800270c:	4611      	mov	r1, r2
 800270e:	461a      	mov	r2, r3
 8002710:	4603      	mov	r3, r0
 8002712:	70fb      	strb	r3, [r7, #3]
 8002714:	460b      	mov	r3, r1
 8002716:	803b      	strh	r3, [r7, #0]
 8002718:	4613      	mov	r3, r2
 800271a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800271c:	2300      	movs	r3, #0
 800271e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002720:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002724:	2b00      	cmp	r3, #0
 8002726:	da0f      	bge.n	8002748 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	f003 020f 	and.w	r2, r3, #15
 800272e:	4613      	mov	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4413      	add	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	3338      	adds	r3, #56	; 0x38
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	4413      	add	r3, r2
 800273c:	3304      	adds	r3, #4
 800273e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2201      	movs	r2, #1
 8002744:	705a      	strb	r2, [r3, #1]
 8002746:	e00f      	b.n	8002768 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002748:	78fb      	ldrb	r3, [r7, #3]
 800274a:	f003 020f 	and.w	r2, r3, #15
 800274e:	4613      	mov	r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4413      	add	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	4413      	add	r3, r2
 800275e:	3304      	adds	r3, #4
 8002760:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002768:	78fb      	ldrb	r3, [r7, #3]
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	b2da      	uxtb	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002774:	883a      	ldrh	r2, [r7, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	78ba      	ldrb	r2, [r7, #2]
 800277e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	785b      	ldrb	r3, [r3, #1]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d004      	beq.n	8002792 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002792:	78bb      	ldrb	r3, [r7, #2]
 8002794:	2b02      	cmp	r3, #2
 8002796:	d102      	bne.n	800279e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d101      	bne.n	80027ac <HAL_PCD_EP_Open+0xaa>
 80027a8:	2302      	movs	r3, #2
 80027aa:	e00e      	b.n	80027ca <HAL_PCD_EP_Open+0xc8>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68f9      	ldr	r1, [r7, #12]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f007 fb64 	bl	8009e88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80027c8:	7afb      	ldrb	r3, [r7, #11]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b084      	sub	sp, #16
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	460b      	mov	r3, r1
 80027dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	da0f      	bge.n	8002806 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027e6:	78fb      	ldrb	r3, [r7, #3]
 80027e8:	f003 020f 	and.w	r2, r3, #15
 80027ec:	4613      	mov	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	3338      	adds	r3, #56	; 0x38
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	4413      	add	r3, r2
 80027fa:	3304      	adds	r3, #4
 80027fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2201      	movs	r2, #1
 8002802:	705a      	strb	r2, [r3, #1]
 8002804:	e00f      	b.n	8002826 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002806:	78fb      	ldrb	r3, [r7, #3]
 8002808:	f003 020f 	and.w	r2, r3, #15
 800280c:	4613      	mov	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	4413      	add	r3, r2
 800281c:	3304      	adds	r3, #4
 800281e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002826:	78fb      	ldrb	r3, [r7, #3]
 8002828:	f003 030f 	and.w	r3, r3, #15
 800282c:	b2da      	uxtb	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_PCD_EP_Close+0x6e>
 800283c:	2302      	movs	r3, #2
 800283e:	e00e      	b.n	800285e <HAL_PCD_EP_Close+0x8c>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68f9      	ldr	r1, [r7, #12]
 800284e:	4618      	mov	r0, r3
 8002850:	f007 fba2 	bl	8009f98 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b086      	sub	sp, #24
 800286a:	af00      	add	r7, sp, #0
 800286c:	60f8      	str	r0, [r7, #12]
 800286e:	607a      	str	r2, [r7, #4]
 8002870:	603b      	str	r3, [r7, #0]
 8002872:	460b      	mov	r3, r1
 8002874:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002876:	7afb      	ldrb	r3, [r7, #11]
 8002878:	f003 020f 	and.w	r2, r3, #15
 800287c:	4613      	mov	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4413      	add	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	4413      	add	r3, r2
 800288c:	3304      	adds	r3, #4
 800288e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2200      	movs	r2, #0
 80028a0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2200      	movs	r2, #0
 80028a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028a8:	7afb      	ldrb	r3, [r7, #11]
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028b4:	7afb      	ldrb	r3, [r7, #11]
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d106      	bne.n	80028cc <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6979      	ldr	r1, [r7, #20]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f007 fe23 	bl	800a510 <USB_EP0StartXfer>
 80028ca:	e005      	b.n	80028d8 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6979      	ldr	r1, [r7, #20]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f007 fc3c 	bl	800a150 <USB_EPStartXfer>
  }

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	460b      	mov	r3, r1
 80028ec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80028ee:	78fb      	ldrb	r3, [r7, #3]
 80028f0:	f003 020f 	and.w	r2, r3, #15
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	4413      	add	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002904:	681b      	ldr	r3, [r3, #0]
}
 8002906:	4618      	mov	r0, r3
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b086      	sub	sp, #24
 8002916:	af00      	add	r7, sp, #0
 8002918:	60f8      	str	r0, [r7, #12]
 800291a:	607a      	str	r2, [r7, #4]
 800291c:	603b      	str	r3, [r7, #0]
 800291e:	460b      	mov	r3, r1
 8002920:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002922:	7afb      	ldrb	r3, [r7, #11]
 8002924:	f003 020f 	and.w	r2, r3, #15
 8002928:	4613      	mov	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	4413      	add	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	3338      	adds	r3, #56	; 0x38
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	4413      	add	r3, r2
 8002936:	3304      	adds	r3, #4
 8002938:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2200      	movs	r2, #0
 800294a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	2201      	movs	r2, #1
 8002950:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002952:	7afb      	ldrb	r3, [r7, #11]
 8002954:	f003 030f 	and.w	r3, r3, #15
 8002958:	b2da      	uxtb	r2, r3
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800295e:	7afb      	ldrb	r3, [r7, #11]
 8002960:	f003 030f 	and.w	r3, r3, #15
 8002964:	2b00      	cmp	r3, #0
 8002966:	d106      	bne.n	8002976 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6979      	ldr	r1, [r7, #20]
 800296e:	4618      	mov	r0, r3
 8002970:	f007 fdce 	bl	800a510 <USB_EP0StartXfer>
 8002974:	e005      	b.n	8002982 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6979      	ldr	r1, [r7, #20]
 800297c:	4618      	mov	r0, r3
 800297e:	f007 fbe7 	bl	800a150 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002998:	78fb      	ldrb	r3, [r7, #3]
 800299a:	f003 020f 	and.w	r2, r3, #15
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d901      	bls.n	80029aa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e04e      	b.n	8002a48 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	da0f      	bge.n	80029d2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029b2:	78fb      	ldrb	r3, [r7, #3]
 80029b4:	f003 020f 	and.w	r2, r3, #15
 80029b8:	4613      	mov	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4413      	add	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	3338      	adds	r3, #56	; 0x38
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	4413      	add	r3, r2
 80029c6:	3304      	adds	r3, #4
 80029c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	705a      	strb	r2, [r3, #1]
 80029d0:	e00d      	b.n	80029ee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029d2:	78fa      	ldrb	r2, [r7, #3]
 80029d4:	4613      	mov	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	4413      	add	r3, r2
 80029e4:	3304      	adds	r3, #4
 80029e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2201      	movs	r2, #1
 80029f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029f4:	78fb      	ldrb	r3, [r7, #3]
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d101      	bne.n	8002a0e <HAL_PCD_EP_SetStall+0x82>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e01c      	b.n	8002a48 <HAL_PCD_EP_SetStall+0xbc>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68f9      	ldr	r1, [r7, #12]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f007 ffd5 	bl	800a9cc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a22:	78fb      	ldrb	r3, [r7, #3]
 8002a24:	f003 030f 	and.w	r3, r3, #15
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d108      	bne.n	8002a3e <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a36:	4619      	mov	r1, r3
 8002a38:	4610      	mov	r0, r2
 8002a3a:	f008 f9c7 	bl	800adcc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a5c:	78fb      	ldrb	r3, [r7, #3]
 8002a5e:	f003 020f 	and.w	r2, r3, #15
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d901      	bls.n	8002a6e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e042      	b.n	8002af4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	da0f      	bge.n	8002a96 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a76:	78fb      	ldrb	r3, [r7, #3]
 8002a78:	f003 020f 	and.w	r2, r3, #15
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	4413      	add	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	3338      	adds	r3, #56	; 0x38
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	4413      	add	r3, r2
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	705a      	strb	r2, [r3, #1]
 8002a94:	e00f      	b.n	8002ab6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a96:	78fb      	ldrb	r3, [r7, #3]
 8002a98:	f003 020f 	and.w	r2, r3, #15
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	4413      	add	r3, r2
 8002aac:	3304      	adds	r3, #4
 8002aae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002abc:	78fb      	ldrb	r3, [r7, #3]
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <HAL_PCD_EP_ClrStall+0x86>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e00e      	b.n	8002af4 <HAL_PCD_EP_ClrStall+0xa4>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68f9      	ldr	r1, [r7, #12]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f007 ffdf 	bl	800aaa8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	460b      	mov	r3, r1
 8002b06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002b08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	da0c      	bge.n	8002b2a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b10:	78fb      	ldrb	r3, [r7, #3]
 8002b12:	f003 020f 	and.w	r2, r3, #15
 8002b16:	4613      	mov	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	3338      	adds	r3, #56	; 0x38
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	4413      	add	r3, r2
 8002b24:	3304      	adds	r3, #4
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	e00c      	b.n	8002b44 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b2a:	78fb      	ldrb	r3, [r7, #3]
 8002b2c:	f003 020f 	and.w	r2, r3, #15
 8002b30:	4613      	mov	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4413      	add	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	4413      	add	r3, r2
 8002b40:	3304      	adds	r3, #4
 8002b42:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68f9      	ldr	r1, [r7, #12]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f007 fe02 	bl	800a754 <USB_EPStopXfer>
 8002b50:	4603      	mov	r3, r0
 8002b52:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002b54:	7afb      	ldrb	r3, [r7, #11]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b088      	sub	sp, #32
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	4613      	mov	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	4413      	add	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	3338      	adds	r3, #56	; 0x38
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	4413      	add	r3, r2
 8002b82:	3304      	adds	r3, #4
 8002b84:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6a1a      	ldr	r2, [r3, #32]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d901      	bls.n	8002b96 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e067      	b.n	8002c66 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	699a      	ldr	r2, [r3, #24]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	69fa      	ldr	r2, [r7, #28]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d902      	bls.n	8002bb2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	3303      	adds	r3, #3
 8002bb6:	089b      	lsrs	r3, r3, #2
 8002bb8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bba:	e026      	b.n	8002c0a <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	699a      	ldr	r2, [r3, #24]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	69fa      	ldr	r2, [r7, #28]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d902      	bls.n	8002bd8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	3303      	adds	r3, #3
 8002bdc:	089b      	lsrs	r3, r3, #2
 8002bde:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6919      	ldr	r1, [r3, #16]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	6978      	ldr	r0, [r7, #20]
 8002bee:	f007 fe5b 	bl	800a8a8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	691a      	ldr	r2, [r3, #16]
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	441a      	add	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a1a      	ldr	r2, [r3, #32]
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	441a      	add	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	015a      	lsls	r2, r3, #5
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d809      	bhi.n	8002c34 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a1a      	ldr	r2, [r3, #32]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d203      	bcs.n	8002c34 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1c3      	bne.n	8002bbc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	699a      	ldr	r2, [r3, #24]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d811      	bhi.n	8002c64 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	2201      	movs	r2, #1
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	6939      	ldr	r1, [r7, #16]
 8002c5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c60:	4013      	ands	r3, r2
 8002c62:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3720      	adds	r7, #32
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
	...

08002c70 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	333c      	adds	r3, #60	; 0x3c
 8002c88:	3304      	adds	r3, #4
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	015a      	lsls	r2, r3, #5
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4413      	add	r3, r2
 8002c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	4a19      	ldr	r2, [pc, #100]	; (8002d08 <PCD_EP_OutXfrComplete_int+0x98>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d124      	bne.n	8002cf0 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00a      	beq.n	8002cc6 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cc2:	6093      	str	r3, [r2, #8]
 8002cc4:	e01a      	b.n	8002cfc <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f003 0320 	and.w	r3, r3, #32
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d008      	beq.n	8002ce2 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2320      	movs	r3, #32
 8002ce0:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f00a f9f5 	bl	800d0d8 <HAL_PCD_DataOutStageCallback>
 8002cee:	e005      	b.n	8002cfc <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f00a f9ee 	bl	800d0d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	4f54310a 	.word	0x4f54310a

08002d0c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	333c      	adds	r3, #60	; 0x3c
 8002d24:	3304      	adds	r3, #4
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	015a      	lsls	r2, r3, #5
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4a0c      	ldr	r2, [pc, #48]	; (8002d70 <PCD_EP_OutSetupPacket_int+0x64>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d90e      	bls.n	8002d60 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d009      	beq.n	8002d60 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d58:	461a      	mov	r2, r3
 8002d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d5e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f00a f9a7 	bl	800d0b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	4f54300a 	.word	0x4f54300a

08002d74 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	70fb      	strb	r3, [r7, #3]
 8002d80:	4613      	mov	r3, r2
 8002d82:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d107      	bne.n	8002da2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002d92:	883b      	ldrh	r3, [r7, #0]
 8002d94:	0419      	lsls	r1, r3, #16
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	629a      	str	r2, [r3, #40]	; 0x28
 8002da0:	e028      	b.n	8002df4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da8:	0c1b      	lsrs	r3, r3, #16
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	4413      	add	r3, r2
 8002dae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002db0:	2300      	movs	r3, #0
 8002db2:	73fb      	strb	r3, [r7, #15]
 8002db4:	e00d      	b.n	8002dd2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	3340      	adds	r3, #64	; 0x40
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	0c1b      	lsrs	r3, r3, #16
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	4413      	add	r3, r2
 8002dca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	73fb      	strb	r3, [r7, #15]
 8002dd2:	7bfa      	ldrb	r2, [r7, #15]
 8002dd4:	78fb      	ldrb	r3, [r7, #3]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d3ec      	bcc.n	8002db6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002ddc:	883b      	ldrh	r3, [r7, #0]
 8002dde:	0418      	lsls	r0, r3, #16
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6819      	ldr	r1, [r3, #0]
 8002de4:	78fb      	ldrb	r3, [r7, #3]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	4302      	orrs	r2, r0
 8002dec:	3340      	adds	r3, #64	; 0x40
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	887a      	ldrh	r2, [r7, #2]
 8002e14:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e56:	f043 0303 	orr.w	r3, r3, #3
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e70:	4b0d      	ldr	r3, [pc, #52]	; (8002ea8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e7c:	d102      	bne.n	8002e84 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e82:	e00b      	b.n	8002e9c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002e84:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e92:	d102      	bne.n	8002e9a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002e94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e98:	e000      	b.n	8002e9c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002e9a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40007000 	.word	0x40007000

08002eac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d141      	bne.n	8002f3e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002eba:	4b4b      	ldr	r3, [pc, #300]	; (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec6:	d131      	bne.n	8002f2c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ec8:	4b47      	ldr	r3, [pc, #284]	; (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ece:	4a46      	ldr	r2, [pc, #280]	; (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ed4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ed8:	4b43      	ldr	r3, [pc, #268]	; (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ee0:	4a41      	ldr	r2, [pc, #260]	; (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ee6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002ee8:	4b40      	ldr	r3, [pc, #256]	; (8002fec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2232      	movs	r2, #50	; 0x32
 8002eee:	fb02 f303 	mul.w	r3, r2, r3
 8002ef2:	4a3f      	ldr	r2, [pc, #252]	; (8002ff0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef8:	0c9b      	lsrs	r3, r3, #18
 8002efa:	3301      	adds	r3, #1
 8002efc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002efe:	e002      	b.n	8002f06 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f06:	4b38      	ldr	r3, [pc, #224]	; (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f12:	d102      	bne.n	8002f1a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f2      	bne.n	8002f00 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f1a:	4b33      	ldr	r3, [pc, #204]	; (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f26:	d158      	bne.n	8002fda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e057      	b.n	8002fdc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f2c:	4b2e      	ldr	r3, [pc, #184]	; (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f32:	4a2d      	ldr	r2, [pc, #180]	; (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f3c:	e04d      	b.n	8002fda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f44:	d141      	bne.n	8002fca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f46:	4b28      	ldr	r3, [pc, #160]	; (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f52:	d131      	bne.n	8002fb8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f54:	4b24      	ldr	r3, [pc, #144]	; (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f5a:	4a23      	ldr	r2, [pc, #140]	; (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f64:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f6c:	4a1e      	ldr	r2, [pc, #120]	; (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002f74:	4b1d      	ldr	r3, [pc, #116]	; (8002fec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2232      	movs	r2, #50	; 0x32
 8002f7a:	fb02 f303 	mul.w	r3, r2, r3
 8002f7e:	4a1c      	ldr	r2, [pc, #112]	; (8002ff0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f80:	fba2 2303 	umull	r2, r3, r2, r3
 8002f84:	0c9b      	lsrs	r3, r3, #18
 8002f86:	3301      	adds	r3, #1
 8002f88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f8a:	e002      	b.n	8002f92 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f92:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f9e:	d102      	bne.n	8002fa6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f2      	bne.n	8002f8c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fa6:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb2:	d112      	bne.n	8002fda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e011      	b.n	8002fdc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fbe:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002fc8:	e007      	b.n	8002fda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fca:	4b07      	ldr	r3, [pc, #28]	; (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fd2:	4a05      	ldr	r2, [pc, #20]	; (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fd8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	40007000 	.word	0x40007000
 8002fec:	20000000 	.word	0x20000000
 8002ff0:	431bde83 	.word	0x431bde83

08002ff4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002ff8:	4b05      	ldr	r3, [pc, #20]	; (8003010 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	4a04      	ldr	r2, [pc, #16]	; (8003010 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003002:	6053      	str	r3, [r2, #4]
}
 8003004:	bf00      	nop
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40007000 	.word	0x40007000

08003014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b088      	sub	sp, #32
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d102      	bne.n	8003028 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	f000 bc08 	b.w	8003838 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003028:	4b96      	ldr	r3, [pc, #600]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 030c 	and.w	r3, r3, #12
 8003030:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003032:	4b94      	ldr	r3, [pc, #592]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80e4 	beq.w	8003212 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d007      	beq.n	8003060 <HAL_RCC_OscConfig+0x4c>
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	2b0c      	cmp	r3, #12
 8003054:	f040 808b 	bne.w	800316e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	2b01      	cmp	r3, #1
 800305c:	f040 8087 	bne.w	800316e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003060:	4b88      	ldr	r3, [pc, #544]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <HAL_RCC_OscConfig+0x64>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e3df      	b.n	8003838 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1a      	ldr	r2, [r3, #32]
 800307c:	4b81      	ldr	r3, [pc, #516]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b00      	cmp	r3, #0
 8003086:	d004      	beq.n	8003092 <HAL_RCC_OscConfig+0x7e>
 8003088:	4b7e      	ldr	r3, [pc, #504]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003090:	e005      	b.n	800309e <HAL_RCC_OscConfig+0x8a>
 8003092:	4b7c      	ldr	r3, [pc, #496]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 8003094:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003098:	091b      	lsrs	r3, r3, #4
 800309a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800309e:	4293      	cmp	r3, r2
 80030a0:	d223      	bcs.n	80030ea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 fdf8 	bl	8003c9c <RCC_SetFlashLatencyFromMSIRange>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e3c0      	b.n	8003838 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030b6:	4b73      	ldr	r3, [pc, #460]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a72      	ldr	r2, [pc, #456]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 80030bc:	f043 0308 	orr.w	r3, r3, #8
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	4b70      	ldr	r3, [pc, #448]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	496d      	ldr	r1, [pc, #436]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030d4:	4b6b      	ldr	r3, [pc, #428]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	021b      	lsls	r3, r3, #8
 80030e2:	4968      	ldr	r1, [pc, #416]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	604b      	str	r3, [r1, #4]
 80030e8:	e025      	b.n	8003136 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030ea:	4b66      	ldr	r3, [pc, #408]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a65      	ldr	r2, [pc, #404]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 80030f0:	f043 0308 	orr.w	r3, r3, #8
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	4b63      	ldr	r3, [pc, #396]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	4960      	ldr	r1, [pc, #384]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 8003104:	4313      	orrs	r3, r2
 8003106:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003108:	4b5e      	ldr	r3, [pc, #376]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	021b      	lsls	r3, r3, #8
 8003116:	495b      	ldr	r1, [pc, #364]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 8003118:	4313      	orrs	r3, r2
 800311a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d109      	bne.n	8003136 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fdb8 	bl	8003c9c <RCC_SetFlashLatencyFromMSIRange>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e380      	b.n	8003838 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003136:	f000 fcc1 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 800313a:	4602      	mov	r2, r0
 800313c:	4b51      	ldr	r3, [pc, #324]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	091b      	lsrs	r3, r3, #4
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	4950      	ldr	r1, [pc, #320]	; (8003288 <HAL_RCC_OscConfig+0x274>)
 8003148:	5ccb      	ldrb	r3, [r1, r3]
 800314a:	f003 031f 	and.w	r3, r3, #31
 800314e:	fa22 f303 	lsr.w	r3, r2, r3
 8003152:	4a4e      	ldr	r2, [pc, #312]	; (800328c <HAL_RCC_OscConfig+0x278>)
 8003154:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003156:	4b4e      	ldr	r3, [pc, #312]	; (8003290 <HAL_RCC_OscConfig+0x27c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7fe f832 	bl	80011c4 <HAL_InitTick>
 8003160:	4603      	mov	r3, r0
 8003162:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003164:	7bfb      	ldrb	r3, [r7, #15]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d052      	beq.n	8003210 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800316a:	7bfb      	ldrb	r3, [r7, #15]
 800316c:	e364      	b.n	8003838 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d032      	beq.n	80031dc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003176:	4b43      	ldr	r3, [pc, #268]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a42      	ldr	r2, [pc, #264]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003182:	f7fe f86f 	bl	8001264 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800318a:	f7fe f86b 	bl	8001264 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e34d      	b.n	8003838 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800319c:	4b39      	ldr	r3, [pc, #228]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031a8:	4b36      	ldr	r3, [pc, #216]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a35      	ldr	r2, [pc, #212]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 80031ae:	f043 0308 	orr.w	r3, r3, #8
 80031b2:	6013      	str	r3, [r2, #0]
 80031b4:	4b33      	ldr	r3, [pc, #204]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	4930      	ldr	r1, [pc, #192]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031c6:	4b2f      	ldr	r3, [pc, #188]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	021b      	lsls	r3, r3, #8
 80031d4:	492b      	ldr	r1, [pc, #172]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	604b      	str	r3, [r1, #4]
 80031da:	e01a      	b.n	8003212 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031dc:	4b29      	ldr	r3, [pc, #164]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a28      	ldr	r2, [pc, #160]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 80031e2:	f023 0301 	bic.w	r3, r3, #1
 80031e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031e8:	f7fe f83c 	bl	8001264 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031f0:	f7fe f838 	bl	8001264 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e31a      	b.n	8003838 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003202:	4b20      	ldr	r3, [pc, #128]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x1dc>
 800320e:	e000      	b.n	8003212 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003210:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d073      	beq.n	8003306 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	2b08      	cmp	r3, #8
 8003222:	d005      	beq.n	8003230 <HAL_RCC_OscConfig+0x21c>
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	2b0c      	cmp	r3, #12
 8003228:	d10e      	bne.n	8003248 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2b03      	cmp	r3, #3
 800322e:	d10b      	bne.n	8003248 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003230:	4b14      	ldr	r3, [pc, #80]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d063      	beq.n	8003304 <HAL_RCC_OscConfig+0x2f0>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d15f      	bne.n	8003304 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e2f7      	b.n	8003838 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003250:	d106      	bne.n	8003260 <HAL_RCC_OscConfig+0x24c>
 8003252:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a0b      	ldr	r2, [pc, #44]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 8003258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	e025      	b.n	80032ac <HAL_RCC_OscConfig+0x298>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003268:	d114      	bne.n	8003294 <HAL_RCC_OscConfig+0x280>
 800326a:	4b06      	ldr	r3, [pc, #24]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a05      	ldr	r2, [pc, #20]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 8003270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	4b03      	ldr	r3, [pc, #12]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a02      	ldr	r2, [pc, #8]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 800327c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	e013      	b.n	80032ac <HAL_RCC_OscConfig+0x298>
 8003284:	40021000 	.word	0x40021000
 8003288:	0800d8e8 	.word	0x0800d8e8
 800328c:	20000000 	.word	0x20000000
 8003290:	20000004 	.word	0x20000004
 8003294:	4ba0      	ldr	r3, [pc, #640]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a9f      	ldr	r2, [pc, #636]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 800329a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	4b9d      	ldr	r3, [pc, #628]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a9c      	ldr	r2, [pc, #624]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 80032a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d013      	beq.n	80032dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b4:	f7fd ffd6 	bl	8001264 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032bc:	f7fd ffd2 	bl	8001264 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b64      	cmp	r3, #100	; 0x64
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e2b4      	b.n	8003838 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ce:	4b92      	ldr	r3, [pc, #584]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0f0      	beq.n	80032bc <HAL_RCC_OscConfig+0x2a8>
 80032da:	e014      	b.n	8003306 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032dc:	f7fd ffc2 	bl	8001264 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e4:	f7fd ffbe 	bl	8001264 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b64      	cmp	r3, #100	; 0x64
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e2a0      	b.n	8003838 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032f6:	4b88      	ldr	r3, [pc, #544]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f0      	bne.n	80032e4 <HAL_RCC_OscConfig+0x2d0>
 8003302:	e000      	b.n	8003306 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d060      	beq.n	80033d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	2b04      	cmp	r3, #4
 8003316:	d005      	beq.n	8003324 <HAL_RCC_OscConfig+0x310>
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	2b0c      	cmp	r3, #12
 800331c:	d119      	bne.n	8003352 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	2b02      	cmp	r3, #2
 8003322:	d116      	bne.n	8003352 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003324:	4b7c      	ldr	r3, [pc, #496]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332c:	2b00      	cmp	r3, #0
 800332e:	d005      	beq.n	800333c <HAL_RCC_OscConfig+0x328>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e27d      	b.n	8003838 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800333c:	4b76      	ldr	r3, [pc, #472]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	061b      	lsls	r3, r3, #24
 800334a:	4973      	ldr	r1, [pc, #460]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 800334c:	4313      	orrs	r3, r2
 800334e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003350:	e040      	b.n	80033d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d023      	beq.n	80033a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800335a:	4b6f      	ldr	r3, [pc, #444]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a6e      	ldr	r2, [pc, #440]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 8003360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003364:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003366:	f7fd ff7d 	bl	8001264 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800336e:	f7fd ff79 	bl	8001264 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e25b      	b.n	8003838 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003380:	4b65      	ldr	r3, [pc, #404]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f0      	beq.n	800336e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800338c:	4b62      	ldr	r3, [pc, #392]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	061b      	lsls	r3, r3, #24
 800339a:	495f      	ldr	r1, [pc, #380]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 800339c:	4313      	orrs	r3, r2
 800339e:	604b      	str	r3, [r1, #4]
 80033a0:	e018      	b.n	80033d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033a2:	4b5d      	ldr	r3, [pc, #372]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a5c      	ldr	r2, [pc, #368]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 80033a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ae:	f7fd ff59 	bl	8001264 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b6:	f7fd ff55 	bl	8001264 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e237      	b.n	8003838 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033c8:	4b53      	ldr	r3, [pc, #332]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1f0      	bne.n	80033b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0308 	and.w	r3, r3, #8
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d03c      	beq.n	800345a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d01c      	beq.n	8003422 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033e8:	4b4b      	ldr	r3, [pc, #300]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 80033ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ee:	4a4a      	ldr	r2, [pc, #296]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 80033f0:	f043 0301 	orr.w	r3, r3, #1
 80033f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f8:	f7fd ff34 	bl	8001264 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003400:	f7fd ff30 	bl	8001264 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e212      	b.n	8003838 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003412:	4b41      	ldr	r3, [pc, #260]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 8003414:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0ef      	beq.n	8003400 <HAL_RCC_OscConfig+0x3ec>
 8003420:	e01b      	b.n	800345a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003422:	4b3d      	ldr	r3, [pc, #244]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 8003424:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003428:	4a3b      	ldr	r2, [pc, #236]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 800342a:	f023 0301 	bic.w	r3, r3, #1
 800342e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003432:	f7fd ff17 	bl	8001264 <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003438:	e008      	b.n	800344c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800343a:	f7fd ff13 	bl	8001264 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e1f5      	b.n	8003838 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800344c:	4b32      	ldr	r3, [pc, #200]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 800344e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1ef      	bne.n	800343a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 80a6 	beq.w	80035b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003468:	2300      	movs	r3, #0
 800346a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800346c:	4b2a      	ldr	r3, [pc, #168]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 800346e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10d      	bne.n	8003494 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003478:	4b27      	ldr	r3, [pc, #156]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 800347a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347c:	4a26      	ldr	r2, [pc, #152]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 800347e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003482:	6593      	str	r3, [r2, #88]	; 0x58
 8003484:	4b24      	ldr	r3, [pc, #144]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 8003486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003490:	2301      	movs	r3, #1
 8003492:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003494:	4b21      	ldr	r3, [pc, #132]	; (800351c <HAL_RCC_OscConfig+0x508>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349c:	2b00      	cmp	r3, #0
 800349e:	d118      	bne.n	80034d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034a0:	4b1e      	ldr	r3, [pc, #120]	; (800351c <HAL_RCC_OscConfig+0x508>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a1d      	ldr	r2, [pc, #116]	; (800351c <HAL_RCC_OscConfig+0x508>)
 80034a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ac:	f7fd feda 	bl	8001264 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b4:	f7fd fed6 	bl	8001264 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e1b8      	b.n	8003838 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034c6:	4b15      	ldr	r3, [pc, #84]	; (800351c <HAL_RCC_OscConfig+0x508>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d108      	bne.n	80034ec <HAL_RCC_OscConfig+0x4d8>
 80034da:	4b0f      	ldr	r3, [pc, #60]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 80034dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e0:	4a0d      	ldr	r2, [pc, #52]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 80034e2:	f043 0301 	orr.w	r3, r3, #1
 80034e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034ea:	e029      	b.n	8003540 <HAL_RCC_OscConfig+0x52c>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2b05      	cmp	r3, #5
 80034f2:	d115      	bne.n	8003520 <HAL_RCC_OscConfig+0x50c>
 80034f4:	4b08      	ldr	r3, [pc, #32]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 80034f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fa:	4a07      	ldr	r2, [pc, #28]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 80034fc:	f043 0304 	orr.w	r3, r3, #4
 8003500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003504:	4b04      	ldr	r3, [pc, #16]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 8003506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350a:	4a03      	ldr	r2, [pc, #12]	; (8003518 <HAL_RCC_OscConfig+0x504>)
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003514:	e014      	b.n	8003540 <HAL_RCC_OscConfig+0x52c>
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000
 800351c:	40007000 	.word	0x40007000
 8003520:	4b9d      	ldr	r3, [pc, #628]	; (8003798 <HAL_RCC_OscConfig+0x784>)
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003526:	4a9c      	ldr	r2, [pc, #624]	; (8003798 <HAL_RCC_OscConfig+0x784>)
 8003528:	f023 0301 	bic.w	r3, r3, #1
 800352c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003530:	4b99      	ldr	r3, [pc, #612]	; (8003798 <HAL_RCC_OscConfig+0x784>)
 8003532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003536:	4a98      	ldr	r2, [pc, #608]	; (8003798 <HAL_RCC_OscConfig+0x784>)
 8003538:	f023 0304 	bic.w	r3, r3, #4
 800353c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d016      	beq.n	8003576 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003548:	f7fd fe8c 	bl	8001264 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800354e:	e00a      	b.n	8003566 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003550:	f7fd fe88 	bl	8001264 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	f241 3288 	movw	r2, #5000	; 0x1388
 800355e:	4293      	cmp	r3, r2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e168      	b.n	8003838 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003566:	4b8c      	ldr	r3, [pc, #560]	; (8003798 <HAL_RCC_OscConfig+0x784>)
 8003568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0ed      	beq.n	8003550 <HAL_RCC_OscConfig+0x53c>
 8003574:	e015      	b.n	80035a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003576:	f7fd fe75 	bl	8001264 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800357c:	e00a      	b.n	8003594 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800357e:	f7fd fe71 	bl	8001264 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	f241 3288 	movw	r2, #5000	; 0x1388
 800358c:	4293      	cmp	r3, r2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e151      	b.n	8003838 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003594:	4b80      	ldr	r3, [pc, #512]	; (8003798 <HAL_RCC_OscConfig+0x784>)
 8003596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1ed      	bne.n	800357e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035a2:	7ffb      	ldrb	r3, [r7, #31]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d105      	bne.n	80035b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035a8:	4b7b      	ldr	r3, [pc, #492]	; (8003798 <HAL_RCC_OscConfig+0x784>)
 80035aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ac:	4a7a      	ldr	r2, [pc, #488]	; (8003798 <HAL_RCC_OscConfig+0x784>)
 80035ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d03c      	beq.n	800363a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d01c      	beq.n	8003602 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035c8:	4b73      	ldr	r3, [pc, #460]	; (8003798 <HAL_RCC_OscConfig+0x784>)
 80035ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035ce:	4a72      	ldr	r2, [pc, #456]	; (8003798 <HAL_RCC_OscConfig+0x784>)
 80035d0:	f043 0301 	orr.w	r3, r3, #1
 80035d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d8:	f7fd fe44 	bl	8001264 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035e0:	f7fd fe40 	bl	8001264 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e122      	b.n	8003838 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035f2:	4b69      	ldr	r3, [pc, #420]	; (8003798 <HAL_RCC_OscConfig+0x784>)
 80035f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0ef      	beq.n	80035e0 <HAL_RCC_OscConfig+0x5cc>
 8003600:	e01b      	b.n	800363a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003602:	4b65      	ldr	r3, [pc, #404]	; (8003798 <HAL_RCC_OscConfig+0x784>)
 8003604:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003608:	4a63      	ldr	r2, [pc, #396]	; (8003798 <HAL_RCC_OscConfig+0x784>)
 800360a:	f023 0301 	bic.w	r3, r3, #1
 800360e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003612:	f7fd fe27 	bl	8001264 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800361a:	f7fd fe23 	bl	8001264 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e105      	b.n	8003838 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800362c:	4b5a      	ldr	r3, [pc, #360]	; (8003798 <HAL_RCC_OscConfig+0x784>)
 800362e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1ef      	bne.n	800361a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 80f9 	beq.w	8003836 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003648:	2b02      	cmp	r3, #2
 800364a:	f040 80cf 	bne.w	80037ec <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800364e:	4b52      	ldr	r3, [pc, #328]	; (8003798 <HAL_RCC_OscConfig+0x784>)
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f003 0203 	and.w	r2, r3, #3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	429a      	cmp	r2, r3
 8003660:	d12c      	bne.n	80036bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366c:	3b01      	subs	r3, #1
 800366e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003670:	429a      	cmp	r2, r3
 8003672:	d123      	bne.n	80036bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800367e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003680:	429a      	cmp	r2, r3
 8003682:	d11b      	bne.n	80036bc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003690:	429a      	cmp	r2, r3
 8003692:	d113      	bne.n	80036bc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369e:	085b      	lsrs	r3, r3, #1
 80036a0:	3b01      	subs	r3, #1
 80036a2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d109      	bne.n	80036bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	085b      	lsrs	r3, r3, #1
 80036b4:	3b01      	subs	r3, #1
 80036b6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d071      	beq.n	80037a0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	2b0c      	cmp	r3, #12
 80036c0:	d068      	beq.n	8003794 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036c2:	4b35      	ldr	r3, [pc, #212]	; (8003798 <HAL_RCC_OscConfig+0x784>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d105      	bne.n	80036da <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80036ce:	4b32      	ldr	r3, [pc, #200]	; (8003798 <HAL_RCC_OscConfig+0x784>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e0ac      	b.n	8003838 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036de:	4b2e      	ldr	r3, [pc, #184]	; (8003798 <HAL_RCC_OscConfig+0x784>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a2d      	ldr	r2, [pc, #180]	; (8003798 <HAL_RCC_OscConfig+0x784>)
 80036e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036e8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036ea:	f7fd fdbb 	bl	8001264 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f2:	f7fd fdb7 	bl	8001264 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e099      	b.n	8003838 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003704:	4b24      	ldr	r3, [pc, #144]	; (8003798 <HAL_RCC_OscConfig+0x784>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1f0      	bne.n	80036f2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003710:	4b21      	ldr	r3, [pc, #132]	; (8003798 <HAL_RCC_OscConfig+0x784>)
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	4b21      	ldr	r3, [pc, #132]	; (800379c <HAL_RCC_OscConfig+0x788>)
 8003716:	4013      	ands	r3, r2
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003720:	3a01      	subs	r2, #1
 8003722:	0112      	lsls	r2, r2, #4
 8003724:	4311      	orrs	r1, r2
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800372a:	0212      	lsls	r2, r2, #8
 800372c:	4311      	orrs	r1, r2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003732:	0852      	lsrs	r2, r2, #1
 8003734:	3a01      	subs	r2, #1
 8003736:	0552      	lsls	r2, r2, #21
 8003738:	4311      	orrs	r1, r2
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800373e:	0852      	lsrs	r2, r2, #1
 8003740:	3a01      	subs	r2, #1
 8003742:	0652      	lsls	r2, r2, #25
 8003744:	4311      	orrs	r1, r2
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800374a:	06d2      	lsls	r2, r2, #27
 800374c:	430a      	orrs	r2, r1
 800374e:	4912      	ldr	r1, [pc, #72]	; (8003798 <HAL_RCC_OscConfig+0x784>)
 8003750:	4313      	orrs	r3, r2
 8003752:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003754:	4b10      	ldr	r3, [pc, #64]	; (8003798 <HAL_RCC_OscConfig+0x784>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a0f      	ldr	r2, [pc, #60]	; (8003798 <HAL_RCC_OscConfig+0x784>)
 800375a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800375e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003760:	4b0d      	ldr	r3, [pc, #52]	; (8003798 <HAL_RCC_OscConfig+0x784>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	4a0c      	ldr	r2, [pc, #48]	; (8003798 <HAL_RCC_OscConfig+0x784>)
 8003766:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800376a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800376c:	f7fd fd7a 	bl	8001264 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003774:	f7fd fd76 	bl	8001264 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e058      	b.n	8003838 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003786:	4b04      	ldr	r3, [pc, #16]	; (8003798 <HAL_RCC_OscConfig+0x784>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0f0      	beq.n	8003774 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003792:	e050      	b.n	8003836 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e04f      	b.n	8003838 <HAL_RCC_OscConfig+0x824>
 8003798:	40021000 	.word	0x40021000
 800379c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037a0:	4b27      	ldr	r3, [pc, #156]	; (8003840 <HAL_RCC_OscConfig+0x82c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d144      	bne.n	8003836 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037ac:	4b24      	ldr	r3, [pc, #144]	; (8003840 <HAL_RCC_OscConfig+0x82c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a23      	ldr	r2, [pc, #140]	; (8003840 <HAL_RCC_OscConfig+0x82c>)
 80037b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037b8:	4b21      	ldr	r3, [pc, #132]	; (8003840 <HAL_RCC_OscConfig+0x82c>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	4a20      	ldr	r2, [pc, #128]	; (8003840 <HAL_RCC_OscConfig+0x82c>)
 80037be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037c4:	f7fd fd4e 	bl	8001264 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037cc:	f7fd fd4a 	bl	8001264 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e02c      	b.n	8003838 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037de:	4b18      	ldr	r3, [pc, #96]	; (8003840 <HAL_RCC_OscConfig+0x82c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0x7b8>
 80037ea:	e024      	b.n	8003836 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	2b0c      	cmp	r3, #12
 80037f0:	d01f      	beq.n	8003832 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f2:	4b13      	ldr	r3, [pc, #76]	; (8003840 <HAL_RCC_OscConfig+0x82c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a12      	ldr	r2, [pc, #72]	; (8003840 <HAL_RCC_OscConfig+0x82c>)
 80037f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fe:	f7fd fd31 	bl	8001264 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003806:	f7fd fd2d 	bl	8001264 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e00f      	b.n	8003838 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003818:	4b09      	ldr	r3, [pc, #36]	; (8003840 <HAL_RCC_OscConfig+0x82c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1f0      	bne.n	8003806 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003824:	4b06      	ldr	r3, [pc, #24]	; (8003840 <HAL_RCC_OscConfig+0x82c>)
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	4905      	ldr	r1, [pc, #20]	; (8003840 <HAL_RCC_OscConfig+0x82c>)
 800382a:	4b06      	ldr	r3, [pc, #24]	; (8003844 <HAL_RCC_OscConfig+0x830>)
 800382c:	4013      	ands	r3, r2
 800382e:	60cb      	str	r3, [r1, #12]
 8003830:	e001      	b.n	8003836 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3720      	adds	r7, #32
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40021000 	.word	0x40021000
 8003844:	feeefffc 	.word	0xfeeefffc

08003848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e11d      	b.n	8003a9c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003860:	4b90      	ldr	r3, [pc, #576]	; (8003aa4 <HAL_RCC_ClockConfig+0x25c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 030f 	and.w	r3, r3, #15
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	429a      	cmp	r2, r3
 800386c:	d910      	bls.n	8003890 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386e:	4b8d      	ldr	r3, [pc, #564]	; (8003aa4 <HAL_RCC_ClockConfig+0x25c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f023 020f 	bic.w	r2, r3, #15
 8003876:	498b      	ldr	r1, [pc, #556]	; (8003aa4 <HAL_RCC_ClockConfig+0x25c>)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	4313      	orrs	r3, r2
 800387c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800387e:	4b89      	ldr	r3, [pc, #548]	; (8003aa4 <HAL_RCC_ClockConfig+0x25c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d001      	beq.n	8003890 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e105      	b.n	8003a9c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d010      	beq.n	80038be <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	4b81      	ldr	r3, [pc, #516]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d908      	bls.n	80038be <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ac:	4b7e      	ldr	r3, [pc, #504]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	497b      	ldr	r1, [pc, #492]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d079      	beq.n	80039be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b03      	cmp	r3, #3
 80038d0:	d11e      	bne.n	8003910 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038d2:	4b75      	ldr	r3, [pc, #468]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e0dc      	b.n	8003a9c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80038e2:	f000 fa35 	bl	8003d50 <RCC_GetSysClockFreqFromPLLSource>
 80038e6:	4603      	mov	r3, r0
 80038e8:	4a70      	ldr	r2, [pc, #448]	; (8003aac <HAL_RCC_ClockConfig+0x264>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d946      	bls.n	800397c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80038ee:	4b6e      	ldr	r3, [pc, #440]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d140      	bne.n	800397c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038fa:	4b6b      	ldr	r3, [pc, #428]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003902:	4a69      	ldr	r2, [pc, #420]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 8003904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003908:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800390a:	2380      	movs	r3, #128	; 0x80
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	e035      	b.n	800397c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	2b02      	cmp	r3, #2
 8003916:	d107      	bne.n	8003928 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003918:	4b63      	ldr	r3, [pc, #396]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d115      	bne.n	8003950 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e0b9      	b.n	8003a9c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d107      	bne.n	8003940 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003930:	4b5d      	ldr	r3, [pc, #372]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d109      	bne.n	8003950 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e0ad      	b.n	8003a9c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003940:	4b59      	ldr	r3, [pc, #356]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0a5      	b.n	8003a9c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003950:	f000 f8b4 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8003954:	4603      	mov	r3, r0
 8003956:	4a55      	ldr	r2, [pc, #340]	; (8003aac <HAL_RCC_ClockConfig+0x264>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d90f      	bls.n	800397c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800395c:	4b52      	ldr	r3, [pc, #328]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d109      	bne.n	800397c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003968:	4b4f      	ldr	r3, [pc, #316]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003970:	4a4d      	ldr	r2, [pc, #308]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 8003972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003976:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003978:	2380      	movs	r3, #128	; 0x80
 800397a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800397c:	4b4a      	ldr	r3, [pc, #296]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f023 0203 	bic.w	r2, r3, #3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	4947      	ldr	r1, [pc, #284]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 800398a:	4313      	orrs	r3, r2
 800398c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800398e:	f7fd fc69 	bl	8001264 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003994:	e00a      	b.n	80039ac <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003996:	f7fd fc65 	bl	8001264 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e077      	b.n	8003a9c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ac:	4b3e      	ldr	r3, [pc, #248]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 020c 	and.w	r2, r3, #12
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d1eb      	bne.n	8003996 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	2b80      	cmp	r3, #128	; 0x80
 80039c2:	d105      	bne.n	80039d0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80039c4:	4b38      	ldr	r3, [pc, #224]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	4a37      	ldr	r2, [pc, #220]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 80039ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039ce:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d010      	beq.n	80039fe <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	4b31      	ldr	r3, [pc, #196]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d208      	bcs.n	80039fe <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039ec:	4b2e      	ldr	r3, [pc, #184]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	492b      	ldr	r1, [pc, #172]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039fe:	4b29      	ldr	r3, [pc, #164]	; (8003aa4 <HAL_RCC_ClockConfig+0x25c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d210      	bcs.n	8003a2e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0c:	4b25      	ldr	r3, [pc, #148]	; (8003aa4 <HAL_RCC_ClockConfig+0x25c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f023 020f 	bic.w	r2, r3, #15
 8003a14:	4923      	ldr	r1, [pc, #140]	; (8003aa4 <HAL_RCC_ClockConfig+0x25c>)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1c:	4b21      	ldr	r3, [pc, #132]	; (8003aa4 <HAL_RCC_ClockConfig+0x25c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d001      	beq.n	8003a2e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e036      	b.n	8003a9c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0304 	and.w	r3, r3, #4
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d008      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a3a:	4b1b      	ldr	r3, [pc, #108]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	4918      	ldr	r1, [pc, #96]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0308 	and.w	r3, r3, #8
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d009      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a58:	4b13      	ldr	r3, [pc, #76]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	4910      	ldr	r1, [pc, #64]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a6c:	f000 f826 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8003a70:	4602      	mov	r2, r0
 8003a72:	4b0d      	ldr	r3, [pc, #52]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	091b      	lsrs	r3, r3, #4
 8003a78:	f003 030f 	and.w	r3, r3, #15
 8003a7c:	490c      	ldr	r1, [pc, #48]	; (8003ab0 <HAL_RCC_ClockConfig+0x268>)
 8003a7e:	5ccb      	ldrb	r3, [r1, r3]
 8003a80:	f003 031f 	and.w	r3, r3, #31
 8003a84:	fa22 f303 	lsr.w	r3, r2, r3
 8003a88:	4a0a      	ldr	r2, [pc, #40]	; (8003ab4 <HAL_RCC_ClockConfig+0x26c>)
 8003a8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a8c:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <HAL_RCC_ClockConfig+0x270>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fd fb97 	bl	80011c4 <HAL_InitTick>
 8003a96:	4603      	mov	r3, r0
 8003a98:	73fb      	strb	r3, [r7, #15]

  return status;
 8003a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3718      	adds	r7, #24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40022000 	.word	0x40022000
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	04c4b400 	.word	0x04c4b400
 8003ab0:	0800d8e8 	.word	0x0800d8e8
 8003ab4:	20000000 	.word	0x20000000
 8003ab8:	20000004 	.word	0x20000004

08003abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b089      	sub	sp, #36	; 0x24
 8003ac0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aca:	4b3e      	ldr	r3, [pc, #248]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 030c 	and.w	r3, r3, #12
 8003ad2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ad4:	4b3b      	ldr	r3, [pc, #236]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f003 0303 	and.w	r3, r3, #3
 8003adc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_RCC_GetSysClockFreq+0x34>
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	2b0c      	cmp	r3, #12
 8003ae8:	d121      	bne.n	8003b2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d11e      	bne.n	8003b2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003af0:	4b34      	ldr	r3, [pc, #208]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d107      	bne.n	8003b0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003afc:	4b31      	ldr	r3, [pc, #196]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b02:	0a1b      	lsrs	r3, r3, #8
 8003b04:	f003 030f 	and.w	r3, r3, #15
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	e005      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b0c:	4b2d      	ldr	r3, [pc, #180]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	091b      	lsrs	r3, r3, #4
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b18:	4a2b      	ldr	r2, [pc, #172]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10d      	bne.n	8003b44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b2c:	e00a      	b.n	8003b44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d102      	bne.n	8003b3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b34:	4b25      	ldr	r3, [pc, #148]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x110>)
 8003b36:	61bb      	str	r3, [r7, #24]
 8003b38:	e004      	b.n	8003b44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d101      	bne.n	8003b44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b40:	4b23      	ldr	r3, [pc, #140]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	2b0c      	cmp	r3, #12
 8003b48:	d134      	bne.n	8003bb4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b4a:	4b1e      	ldr	r3, [pc, #120]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d003      	beq.n	8003b62 <HAL_RCC_GetSysClockFreq+0xa6>
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d003      	beq.n	8003b68 <HAL_RCC_GetSysClockFreq+0xac>
 8003b60:	e005      	b.n	8003b6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b62:	4b1a      	ldr	r3, [pc, #104]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x110>)
 8003b64:	617b      	str	r3, [r7, #20]
      break;
 8003b66:	e005      	b.n	8003b74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b68:	4b19      	ldr	r3, [pc, #100]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b6a:	617b      	str	r3, [r7, #20]
      break;
 8003b6c:	e002      	b.n	8003b74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	617b      	str	r3, [r7, #20]
      break;
 8003b72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b74:	4b13      	ldr	r3, [pc, #76]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	3301      	adds	r3, #1
 8003b80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b82:	4b10      	ldr	r3, [pc, #64]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	0a1b      	lsrs	r3, r3, #8
 8003b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	fb03 f202 	mul.w	r2, r3, r2
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	0e5b      	lsrs	r3, r3, #25
 8003ba0:	f003 0303 	and.w	r3, r3, #3
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003bb4:	69bb      	ldr	r3, [r7, #24]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3724      	adds	r7, #36	; 0x24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	0800d900 	.word	0x0800d900
 8003bcc:	00f42400 	.word	0x00f42400
 8003bd0:	007a1200 	.word	0x007a1200

08003bd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bd8:	4b03      	ldr	r3, [pc, #12]	; (8003be8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bda:	681b      	ldr	r3, [r3, #0]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	20000000 	.word	0x20000000

08003bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003bf0:	f7ff fff0 	bl	8003bd4 <HAL_RCC_GetHCLKFreq>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	0a1b      	lsrs	r3, r3, #8
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	4904      	ldr	r1, [pc, #16]	; (8003c14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c02:	5ccb      	ldrb	r3, [r1, r3]
 8003c04:	f003 031f 	and.w	r3, r3, #31
 8003c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40021000 	.word	0x40021000
 8003c14:	0800d8f8 	.word	0x0800d8f8

08003c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c1c:	f7ff ffda 	bl	8003bd4 <HAL_RCC_GetHCLKFreq>
 8003c20:	4602      	mov	r2, r0
 8003c22:	4b06      	ldr	r3, [pc, #24]	; (8003c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	0adb      	lsrs	r3, r3, #11
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	4904      	ldr	r1, [pc, #16]	; (8003c40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c2e:	5ccb      	ldrb	r3, [r1, r3]
 8003c30:	f003 031f 	and.w	r3, r3, #31
 8003c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	0800d8f8 	.word	0x0800d8f8

08003c44 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8003c48:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <HAL_RCC_EnableCSS+0x1c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a04      	ldr	r2, [pc, #16]	; (8003c60 <HAL_RCC_EnableCSS+0x1c>)
 8003c4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c52:	6013      	str	r3, [r2, #0]
}
 8003c54:	bf00      	nop
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	40021000 	.word	0x40021000

08003c64 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003c68:	4b07      	ldr	r3, [pc, #28]	; (8003c88 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c74:	d105      	bne.n	8003c82 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003c76:	f000 f809 	bl	8003c8c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003c7a:	4b03      	ldr	r3, [pc, #12]	; (8003c88 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003c7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c80:	621a      	str	r2, [r3, #32]
  }
}
 8003c82:	bf00      	nop
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40021000 	.word	0x40021000

08003c8c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8003c90:	bf00      	nop
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
	...

08003c9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ca8:	4b27      	ldr	r3, [pc, #156]	; (8003d48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003cb4:	f7ff f8da 	bl	8002e6c <HAL_PWREx_GetVoltageRange>
 8003cb8:	6178      	str	r0, [r7, #20]
 8003cba:	e014      	b.n	8003ce6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cbc:	4b22      	ldr	r3, [pc, #136]	; (8003d48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc0:	4a21      	ldr	r2, [pc, #132]	; (8003d48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc6:	6593      	str	r3, [r2, #88]	; 0x58
 8003cc8:	4b1f      	ldr	r3, [pc, #124]	; (8003d48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003cd4:	f7ff f8ca 	bl	8002e6c <HAL_PWREx_GetVoltageRange>
 8003cd8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003cda:	4b1b      	ldr	r3, [pc, #108]	; (8003d48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cde:	4a1a      	ldr	r2, [pc, #104]	; (8003d48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cec:	d10b      	bne.n	8003d06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b80      	cmp	r3, #128	; 0x80
 8003cf2:	d913      	bls.n	8003d1c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2ba0      	cmp	r3, #160	; 0xa0
 8003cf8:	d902      	bls.n	8003d00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	613b      	str	r3, [r7, #16]
 8003cfe:	e00d      	b.n	8003d1c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d00:	2301      	movs	r3, #1
 8003d02:	613b      	str	r3, [r7, #16]
 8003d04:	e00a      	b.n	8003d1c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b7f      	cmp	r3, #127	; 0x7f
 8003d0a:	d902      	bls.n	8003d12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	613b      	str	r3, [r7, #16]
 8003d10:	e004      	b.n	8003d1c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b70      	cmp	r3, #112	; 0x70
 8003d16:	d101      	bne.n	8003d1c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d18:	2301      	movs	r3, #1
 8003d1a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d1c:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f023 020f 	bic.w	r2, r3, #15
 8003d24:	4909      	ldr	r1, [pc, #36]	; (8003d4c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d2c:	4b07      	ldr	r3, [pc, #28]	; (8003d4c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 030f 	and.w	r3, r3, #15
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d001      	beq.n	8003d3e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e000      	b.n	8003d40 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	40022000 	.word	0x40022000

08003d50 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b087      	sub	sp, #28
 8003d54:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d56:	4b2d      	ldr	r3, [pc, #180]	; (8003e0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	d00b      	beq.n	8003d7e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d825      	bhi.n	8003db8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d008      	beq.n	8003d84 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d11f      	bne.n	8003db8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003d78:	4b25      	ldr	r3, [pc, #148]	; (8003e10 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d7a:	613b      	str	r3, [r7, #16]
    break;
 8003d7c:	e01f      	b.n	8003dbe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003d7e:	4b25      	ldr	r3, [pc, #148]	; (8003e14 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003d80:	613b      	str	r3, [r7, #16]
    break;
 8003d82:	e01c      	b.n	8003dbe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d84:	4b21      	ldr	r3, [pc, #132]	; (8003e0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0308 	and.w	r3, r3, #8
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d107      	bne.n	8003da0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d90:	4b1e      	ldr	r3, [pc, #120]	; (8003e0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d96:	0a1b      	lsrs	r3, r3, #8
 8003d98:	f003 030f 	and.w	r3, r3, #15
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	e005      	b.n	8003dac <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003da0:	4b1a      	ldr	r3, [pc, #104]	; (8003e0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	091b      	lsrs	r3, r3, #4
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003dac:	4a1a      	ldr	r2, [pc, #104]	; (8003e18 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db4:	613b      	str	r3, [r7, #16]
    break;
 8003db6:	e002      	b.n	8003dbe <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003db8:	2300      	movs	r3, #0
 8003dba:	613b      	str	r3, [r7, #16]
    break;
 8003dbc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dbe:	4b13      	ldr	r3, [pc, #76]	; (8003e0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	091b      	lsrs	r3, r3, #4
 8003dc4:	f003 030f 	and.w	r3, r3, #15
 8003dc8:	3301      	adds	r3, #1
 8003dca:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003dcc:	4b0f      	ldr	r3, [pc, #60]	; (8003e0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	0a1b      	lsrs	r3, r3, #8
 8003dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	fb03 f202 	mul.w	r2, r3, r2
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003de4:	4b09      	ldr	r3, [pc, #36]	; (8003e0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	0e5b      	lsrs	r3, r3, #25
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	3301      	adds	r3, #1
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003dfe:	683b      	ldr	r3, [r7, #0]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	371c      	adds	r7, #28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	00f42400 	.word	0x00f42400
 8003e14:	007a1200 	.word	0x007a1200
 8003e18:	0800d900 	.word	0x0800d900

08003e1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e24:	2300      	movs	r3, #0
 8003e26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e28:	2300      	movs	r3, #0
 8003e2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d040      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e3c:	2b80      	cmp	r3, #128	; 0x80
 8003e3e:	d02a      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e40:	2b80      	cmp	r3, #128	; 0x80
 8003e42:	d825      	bhi.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e44:	2b60      	cmp	r3, #96	; 0x60
 8003e46:	d026      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e48:	2b60      	cmp	r3, #96	; 0x60
 8003e4a:	d821      	bhi.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e4c:	2b40      	cmp	r3, #64	; 0x40
 8003e4e:	d006      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003e50:	2b40      	cmp	r3, #64	; 0x40
 8003e52:	d81d      	bhi.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d009      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003e58:	2b20      	cmp	r3, #32
 8003e5a:	d010      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003e5c:	e018      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e5e:	4b89      	ldr	r3, [pc, #548]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	4a88      	ldr	r2, [pc, #544]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e68:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e6a:	e015      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3304      	adds	r3, #4
 8003e70:	2100      	movs	r1, #0
 8003e72:	4618      	mov	r0, r3
 8003e74:	f001 fa24 	bl	80052c0 <RCCEx_PLLSAI1_Config>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e7c:	e00c      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3320      	adds	r3, #32
 8003e82:	2100      	movs	r1, #0
 8003e84:	4618      	mov	r0, r3
 8003e86:	f001 fb0f 	bl	80054a8 <RCCEx_PLLSAI2_Config>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e8e:	e003      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	74fb      	strb	r3, [r7, #19]
      break;
 8003e94:	e000      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003e96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e98:	7cfb      	ldrb	r3, [r7, #19]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10b      	bne.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e9e:	4b79      	ldr	r3, [pc, #484]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ea0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ea4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eac:	4975      	ldr	r1, [pc, #468]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003eb4:	e001      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb6:	7cfb      	ldrb	r3, [r7, #19]
 8003eb8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d047      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ece:	d030      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed4:	d82a      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003ed6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eda:	d02a      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003edc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ee0:	d824      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003ee2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ee6:	d008      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eec:	d81e      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003ef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ef6:	d010      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003ef8:	e018      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003efa:	4b62      	ldr	r3, [pc, #392]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	4a61      	ldr	r2, [pc, #388]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f04:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f06:	e015      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f001 f9d6 	bl	80052c0 <RCCEx_PLLSAI1_Config>
 8003f14:	4603      	mov	r3, r0
 8003f16:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f18:	e00c      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	3320      	adds	r3, #32
 8003f1e:	2100      	movs	r1, #0
 8003f20:	4618      	mov	r0, r3
 8003f22:	f001 fac1 	bl	80054a8 <RCCEx_PLLSAI2_Config>
 8003f26:	4603      	mov	r3, r0
 8003f28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f2a:	e003      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	74fb      	strb	r3, [r7, #19]
      break;
 8003f30:	e000      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003f32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f34:	7cfb      	ldrb	r3, [r7, #19]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10b      	bne.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f3a:	4b52      	ldr	r3, [pc, #328]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f48:	494e      	ldr	r1, [pc, #312]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003f50:	e001      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f52:	7cfb      	ldrb	r3, [r7, #19]
 8003f54:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 809f 	beq.w	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f64:	2300      	movs	r3, #0
 8003f66:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f68:	4b46      	ldr	r3, [pc, #280]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003f74:	2301      	movs	r3, #1
 8003f76:	e000      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00d      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f7e:	4b41      	ldr	r3, [pc, #260]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f82:	4a40      	ldr	r2, [pc, #256]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f88:	6593      	str	r3, [r2, #88]	; 0x58
 8003f8a:	4b3e      	ldr	r3, [pc, #248]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f92:	60bb      	str	r3, [r7, #8]
 8003f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f96:	2301      	movs	r3, #1
 8003f98:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f9a:	4b3b      	ldr	r3, [pc, #236]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a3a      	ldr	r2, [pc, #232]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fa6:	f7fd f95d 	bl	8001264 <HAL_GetTick>
 8003faa:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fac:	e009      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fae:	f7fd f959 	bl	8001264 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d902      	bls.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	74fb      	strb	r3, [r7, #19]
        break;
 8003fc0:	e005      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fc2:	4b31      	ldr	r3, [pc, #196]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0ef      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003fce:	7cfb      	ldrb	r3, [r7, #19]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d15b      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fd4:	4b2b      	ldr	r3, [pc, #172]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fde:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d01f      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d019      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ff2:	4b24      	ldr	r3, [pc, #144]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ffc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ffe:	4b21      	ldr	r3, [pc, #132]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004004:	4a1f      	ldr	r2, [pc, #124]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800400a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800400e:	4b1d      	ldr	r3, [pc, #116]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004014:	4a1b      	ldr	r2, [pc, #108]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800401a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800401e:	4a19      	ldr	r2, [pc, #100]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d016      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004030:	f7fd f918 	bl	8001264 <HAL_GetTick>
 8004034:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004036:	e00b      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004038:	f7fd f914 	bl	8001264 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	f241 3288 	movw	r2, #5000	; 0x1388
 8004046:	4293      	cmp	r3, r2
 8004048:	d902      	bls.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	74fb      	strb	r3, [r7, #19]
            break;
 800404e:	e006      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004050:	4b0c      	ldr	r3, [pc, #48]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0ec      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800405e:	7cfb      	ldrb	r3, [r7, #19]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10c      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004064:	4b07      	ldr	r3, [pc, #28]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004074:	4903      	ldr	r1, [pc, #12]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800407c:	e008      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800407e:	7cfb      	ldrb	r3, [r7, #19]
 8004080:	74bb      	strb	r3, [r7, #18]
 8004082:	e005      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004084:	40021000 	.word	0x40021000
 8004088:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408c:	7cfb      	ldrb	r3, [r7, #19]
 800408e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004090:	7c7b      	ldrb	r3, [r7, #17]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d105      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004096:	4ba0      	ldr	r3, [pc, #640]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409a:	4a9f      	ldr	r2, [pc, #636]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800409c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040ae:	4b9a      	ldr	r3, [pc, #616]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b4:	f023 0203 	bic.w	r2, r3, #3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040bc:	4996      	ldr	r1, [pc, #600]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00a      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040d0:	4b91      	ldr	r3, [pc, #580]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d6:	f023 020c 	bic.w	r2, r3, #12
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	498e      	ldr	r1, [pc, #568]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00a      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040f2:	4b89      	ldr	r3, [pc, #548]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004100:	4985      	ldr	r1, [pc, #532]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00a      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004114:	4b80      	ldr	r3, [pc, #512]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004122:	497d      	ldr	r1, [pc, #500]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004124:	4313      	orrs	r3, r2
 8004126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0310 	and.w	r3, r3, #16
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004136:	4b78      	ldr	r3, [pc, #480]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004144:	4974      	ldr	r1, [pc, #464]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00a      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004158:	4b6f      	ldr	r3, [pc, #444]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800415a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004166:	496c      	ldr	r1, [pc, #432]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800417a:	4b67      	ldr	r3, [pc, #412]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800417c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004180:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004188:	4963      	ldr	r1, [pc, #396]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00a      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800419c:	4b5e      	ldr	r3, [pc, #376]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800419e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041aa:	495b      	ldr	r1, [pc, #364]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041be:	4b56      	ldr	r3, [pc, #344]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041cc:	4952      	ldr	r1, [pc, #328]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00a      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041e0:	4b4d      	ldr	r3, [pc, #308]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ee:	494a      	ldr	r1, [pc, #296]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00a      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004202:	4b45      	ldr	r3, [pc, #276]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004208:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004210:	4941      	ldr	r1, [pc, #260]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004212:	4313      	orrs	r3, r2
 8004214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004224:	4b3c      	ldr	r3, [pc, #240]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004226:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800422a:	f023 0203 	bic.w	r2, r3, #3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004232:	4939      	ldr	r1, [pc, #228]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d028      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004246:	4b34      	ldr	r3, [pc, #208]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004254:	4930      	ldr	r1, [pc, #192]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004256:	4313      	orrs	r3, r2
 8004258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004260:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004264:	d106      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004266:	4b2c      	ldr	r3, [pc, #176]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	4a2b      	ldr	r2, [pc, #172]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800426c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004270:	60d3      	str	r3, [r2, #12]
 8004272:	e011      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004278:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800427c:	d10c      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3304      	adds	r3, #4
 8004282:	2101      	movs	r1, #1
 8004284:	4618      	mov	r0, r3
 8004286:	f001 f81b 	bl	80052c0 <RCCEx_PLLSAI1_Config>
 800428a:	4603      	mov	r3, r0
 800428c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800428e:	7cfb      	ldrb	r3, [r7, #19]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004294:	7cfb      	ldrb	r3, [r7, #19]
 8004296:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d04d      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042ac:	d108      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80042ae:	4b1a      	ldr	r3, [pc, #104]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042b4:	4a18      	ldr	r2, [pc, #96]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042ba:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80042be:	e012      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80042c0:	4b15      	ldr	r3, [pc, #84]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042c6:	4a14      	ldr	r2, [pc, #80]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042cc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80042d0:	4b11      	ldr	r3, [pc, #68]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042de:	490e      	ldr	r1, [pc, #56]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042ee:	d106      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042f0:	4b09      	ldr	r3, [pc, #36]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	4a08      	ldr	r2, [pc, #32]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042fa:	60d3      	str	r3, [r2, #12]
 80042fc:	e020      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004302:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004306:	d109      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004308:	4b03      	ldr	r3, [pc, #12]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	4a02      	ldr	r2, [pc, #8]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800430e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004312:	60d3      	str	r3, [r2, #12]
 8004314:	e014      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004316:	bf00      	nop
 8004318:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004320:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004324:	d10c      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3304      	adds	r3, #4
 800432a:	2101      	movs	r1, #1
 800432c:	4618      	mov	r0, r3
 800432e:	f000 ffc7 	bl	80052c0 <RCCEx_PLLSAI1_Config>
 8004332:	4603      	mov	r3, r0
 8004334:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004336:	7cfb      	ldrb	r3, [r7, #19]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800433c:	7cfb      	ldrb	r3, [r7, #19]
 800433e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d028      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800434c:	4b4a      	ldr	r3, [pc, #296]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800434e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004352:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800435a:	4947      	ldr	r1, [pc, #284]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800435c:	4313      	orrs	r3, r2
 800435e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004366:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800436a:	d106      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800436c:	4b42      	ldr	r3, [pc, #264]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	4a41      	ldr	r2, [pc, #260]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004372:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004376:	60d3      	str	r3, [r2, #12]
 8004378:	e011      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800437e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004382:	d10c      	bne.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3304      	adds	r3, #4
 8004388:	2101      	movs	r1, #1
 800438a:	4618      	mov	r0, r3
 800438c:	f000 ff98 	bl	80052c0 <RCCEx_PLLSAI1_Config>
 8004390:	4603      	mov	r3, r0
 8004392:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004394:	7cfb      	ldrb	r3, [r7, #19]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800439a:	7cfb      	ldrb	r3, [r7, #19]
 800439c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d01e      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043aa:	4b33      	ldr	r3, [pc, #204]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043ba:	492f      	ldr	r1, [pc, #188]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043cc:	d10c      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	3304      	adds	r3, #4
 80043d2:	2102      	movs	r1, #2
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 ff73 	bl	80052c0 <RCCEx_PLLSAI1_Config>
 80043da:	4603      	mov	r3, r0
 80043dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043de:	7cfb      	ldrb	r3, [r7, #19]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80043e4:	7cfb      	ldrb	r3, [r7, #19]
 80043e6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00b      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043f4:	4b20      	ldr	r3, [pc, #128]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043fa:	f023 0204 	bic.w	r2, r3, #4
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004404:	491c      	ldr	r1, [pc, #112]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004406:	4313      	orrs	r3, r2
 8004408:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00b      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004418:	4b17      	ldr	r3, [pc, #92]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800441a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800441e:	f023 0218 	bic.w	r2, r3, #24
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004428:	4913      	ldr	r1, [pc, #76]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800442a:	4313      	orrs	r3, r2
 800442c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d017      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800443c:	4b0e      	ldr	r3, [pc, #56]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800443e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004442:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800444c:	490a      	ldr	r1, [pc, #40]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800444e:	4313      	orrs	r3, r2
 8004450:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800445a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800445e:	d105      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004460:	4b05      	ldr	r3, [pc, #20]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	4a04      	ldr	r2, [pc, #16]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004466:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800446a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800446c:	7cbb      	ldrb	r3, [r7, #18]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	40021000 	.word	0x40021000

0800447c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800448e:	d13e      	bne.n	800450e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004490:	4bb6      	ldr	r3, [pc, #728]	; (800476c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800449a:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044a2:	d028      	beq.n	80044f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044aa:	f200 86f4 	bhi.w	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044b4:	d005      	beq.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044bc:	d00e      	beq.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80044be:	f000 beea 	b.w	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80044c2:	4baa      	ldr	r3, [pc, #680]	; (800476c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80044c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	f040 86e4 	bne.w	800529a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 80044d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044d6:	61fb      	str	r3, [r7, #28]
      break;
 80044d8:	f000 bedf 	b.w	800529a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80044dc:	4ba3      	ldr	r3, [pc, #652]	; (800476c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80044de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	f040 86d9 	bne.w	800529e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 80044ec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80044f0:	61fb      	str	r3, [r7, #28]
      break;
 80044f2:	f000 bed4 	b.w	800529e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80044f6:	4b9d      	ldr	r3, [pc, #628]	; (800476c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004502:	f040 86ce 	bne.w	80052a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8004506:	4b9a      	ldr	r3, [pc, #616]	; (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004508:	61fb      	str	r3, [r7, #28]
      break;
 800450a:	f000 beca 	b.w	80052a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800450e:	4b97      	ldr	r3, [pc, #604]	; (800476c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f003 0303 	and.w	r3, r3, #3
 8004516:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	2b03      	cmp	r3, #3
 800451c:	d036      	beq.n	800458c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	2b03      	cmp	r3, #3
 8004522:	d840      	bhi.n	80045a6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d003      	beq.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	2b02      	cmp	r3, #2
 800452e:	d020      	beq.n	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004530:	e039      	b.n	80045a6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004532:	4b8e      	ldr	r3, [pc, #568]	; (800476c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b02      	cmp	r3, #2
 800453c:	d116      	bne.n	800456c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800453e:	4b8b      	ldr	r3, [pc, #556]	; (800476c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0308 	and.w	r3, r3, #8
 8004546:	2b00      	cmp	r3, #0
 8004548:	d005      	beq.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800454a:	4b88      	ldr	r3, [pc, #544]	; (800476c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	091b      	lsrs	r3, r3, #4
 8004550:	f003 030f 	and.w	r3, r3, #15
 8004554:	e005      	b.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8004556:	4b85      	ldr	r3, [pc, #532]	; (800476c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800455c:	0a1b      	lsrs	r3, r3, #8
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	4a84      	ldr	r2, [pc, #528]	; (8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004568:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800456a:	e01f      	b.n	80045ac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	61bb      	str	r3, [r7, #24]
      break;
 8004570:	e01c      	b.n	80045ac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004572:	4b7e      	ldr	r3, [pc, #504]	; (800476c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800457a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800457e:	d102      	bne.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8004580:	4b7d      	ldr	r3, [pc, #500]	; (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004582:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004584:	e012      	b.n	80045ac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004586:	2300      	movs	r3, #0
 8004588:	61bb      	str	r3, [r7, #24]
      break;
 800458a:	e00f      	b.n	80045ac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800458c:	4b77      	ldr	r3, [pc, #476]	; (800476c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004594:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004598:	d102      	bne.n	80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800459a:	4b78      	ldr	r3, [pc, #480]	; (800477c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800459c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800459e:	e005      	b.n	80045ac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	61bb      	str	r3, [r7, #24]
      break;
 80045a4:	e002      	b.n	80045ac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	61bb      	str	r3, [r7, #24]
      break;
 80045aa:	bf00      	nop
    }

    switch(PeriphClk)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045b2:	f000 8606 	beq.w	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045bc:	f200 8673 	bhi.w	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045c6:	f000 8469 	beq.w	8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045d0:	f200 8669 	bhi.w	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045da:	f000 8531 	beq.w	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045e4:	f200 865f 	bhi.w	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80045ee:	f000 8187 	beq.w	8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80045f8:	f200 8655 	bhi.w	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004602:	f000 80cd 	beq.w	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800460c:	f200 864b 	bhi.w	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004616:	f000 8430 	beq.w	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004620:	f200 8641 	bhi.w	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800462a:	f000 83e4 	beq.w	8004df6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004634:	f200 8637 	bhi.w	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800463e:	f000 80af 	beq.w	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004648:	f200 862d 	bhi.w	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004652:	f000 809d 	beq.w	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465c:	f200 8623 	bhi.w	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004666:	f000 808b 	beq.w	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004670:	f200 8619 	bhi.w	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800467a:	f000 8554 	beq.w	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004684:	f200 860f 	bhi.w	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800468e:	f000 8500 	beq.w	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004698:	f200 8605 	bhi.w	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046a2:	f000 84a1 	beq.w	8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ac:	f200 85fb 	bhi.w	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b80      	cmp	r3, #128	; 0x80
 80046b4:	f000 846c 	beq.w	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b80      	cmp	r3, #128	; 0x80
 80046bc:	f200 85f3 	bhi.w	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b20      	cmp	r3, #32
 80046c4:	d84c      	bhi.n	8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 85ec 	beq.w	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	3b01      	subs	r3, #1
 80046d2:	2b1f      	cmp	r3, #31
 80046d4:	f200 85e7 	bhi.w	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80046d8:	a201      	add	r2, pc, #4	; (adr r2, 80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80046da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046de:	bf00      	nop
 80046e0:	08004af5 	.word	0x08004af5
 80046e4:	08004b63 	.word	0x08004b63
 80046e8:	080052a7 	.word	0x080052a7
 80046ec:	08004bf7 	.word	0x08004bf7
 80046f0:	080052a7 	.word	0x080052a7
 80046f4:	080052a7 	.word	0x080052a7
 80046f8:	080052a7 	.word	0x080052a7
 80046fc:	08004c6f 	.word	0x08004c6f
 8004700:	080052a7 	.word	0x080052a7
 8004704:	080052a7 	.word	0x080052a7
 8004708:	080052a7 	.word	0x080052a7
 800470c:	080052a7 	.word	0x080052a7
 8004710:	080052a7 	.word	0x080052a7
 8004714:	080052a7 	.word	0x080052a7
 8004718:	080052a7 	.word	0x080052a7
 800471c:	08004cf3 	.word	0x08004cf3
 8004720:	080052a7 	.word	0x080052a7
 8004724:	080052a7 	.word	0x080052a7
 8004728:	080052a7 	.word	0x080052a7
 800472c:	080052a7 	.word	0x080052a7
 8004730:	080052a7 	.word	0x080052a7
 8004734:	080052a7 	.word	0x080052a7
 8004738:	080052a7 	.word	0x080052a7
 800473c:	080052a7 	.word	0x080052a7
 8004740:	080052a7 	.word	0x080052a7
 8004744:	080052a7 	.word	0x080052a7
 8004748:	080052a7 	.word	0x080052a7
 800474c:	080052a7 	.word	0x080052a7
 8004750:	080052a7 	.word	0x080052a7
 8004754:	080052a7 	.word	0x080052a7
 8004758:	080052a7 	.word	0x080052a7
 800475c:	08004d75 	.word	0x08004d75
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b40      	cmp	r3, #64	; 0x40
 8004764:	f000 83e8 	beq.w	8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004768:	f000 bd9d 	b.w	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800476c:	40021000 	.word	0x40021000
 8004770:	0003d090 	.word	0x0003d090
 8004774:	0800d900 	.word	0x0800d900
 8004778:	00f42400 	.word	0x00f42400
 800477c:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004780:	69b9      	ldr	r1, [r7, #24]
 8004782:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004786:	f000 ff83 	bl	8005690 <RCCEx_GetSAIxPeriphCLKFreq>
 800478a:	61f8      	str	r0, [r7, #28]
      break;
 800478c:	f000 bd8e 	b.w	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8004790:	69b9      	ldr	r1, [r7, #24]
 8004792:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004796:	f000 ff7b 	bl	8005690 <RCCEx_GetSAIxPeriphCLKFreq>
 800479a:	61f8      	str	r0, [r7, #28]
      break;
 800479c:	f000 bd86 	b.w	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80047a0:	4b9a      	ldr	r3, [pc, #616]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80047a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80047b2:	d015      	beq.n	80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80047ba:	f200 8092 	bhi.w	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047c4:	d029      	beq.n	800481a <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047cc:	f200 8089 	bhi.w	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d07b      	beq.n	80048ce <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047dc:	d04a      	beq.n	8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 80047de:	e080      	b.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80047e0:	4b8a      	ldr	r3, [pc, #552]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d17d      	bne.n	80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80047ec:	4b87      	ldr	r3, [pc, #540]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0308 	and.w	r3, r3, #8
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 80047f8:	4b84      	ldr	r3, [pc, #528]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	091b      	lsrs	r3, r3, #4
 80047fe:	f003 030f 	and.w	r3, r3, #15
 8004802:	e005      	b.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8004804:	4b81      	ldr	r3, [pc, #516]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004806:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800480a:	0a1b      	lsrs	r3, r3, #8
 800480c:	f003 030f 	and.w	r3, r3, #15
 8004810:	4a7f      	ldr	r2, [pc, #508]	; (8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004816:	61fb      	str	r3, [r7, #28]
          break;
 8004818:	e066      	b.n	80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800481a:	4b7c      	ldr	r3, [pc, #496]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004822:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004826:	d162      	bne.n	80048ee <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004828:	4b78      	ldr	r3, [pc, #480]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004830:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004834:	d15b      	bne.n	80048ee <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004836:	4b75      	ldr	r3, [pc, #468]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	0a1b      	lsrs	r3, r3, #8
 800483c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004840:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	fb03 f202 	mul.w	r2, r3, r2
 800484a:	4b70      	ldr	r3, [pc, #448]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	091b      	lsrs	r3, r3, #4
 8004850:	f003 030f 	and.w	r3, r3, #15
 8004854:	3301      	adds	r3, #1
 8004856:	fbb2 f3f3 	udiv	r3, r2, r3
 800485a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800485c:	4b6b      	ldr	r3, [pc, #428]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	0d5b      	lsrs	r3, r3, #21
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	3301      	adds	r3, #1
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004870:	61fb      	str	r3, [r7, #28]
          break;
 8004872:	e03c      	b.n	80048ee <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004874:	4b65      	ldr	r3, [pc, #404]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800487c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004880:	d138      	bne.n	80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004882:	4b62      	ldr	r3, [pc, #392]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800488a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800488e:	d131      	bne.n	80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004890:	4b5e      	ldr	r3, [pc, #376]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	0a1b      	lsrs	r3, r3, #8
 8004896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800489a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	fb03 f202 	mul.w	r2, r3, r2
 80048a4:	4b59      	ldr	r3, [pc, #356]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	091b      	lsrs	r3, r3, #4
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	3301      	adds	r3, #1
 80048b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80048b6:	4b55      	ldr	r3, [pc, #340]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	0d5b      	lsrs	r3, r3, #21
 80048bc:	f003 0303 	and.w	r3, r3, #3
 80048c0:	3301      	adds	r3, #1
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ca:	61fb      	str	r3, [r7, #28]
          break;
 80048cc:	e012      	b.n	80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80048ce:	4b4f      	ldr	r3, [pc, #316]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80048d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d10e      	bne.n	80048fa <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 80048dc:	4b4d      	ldr	r3, [pc, #308]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80048de:	61fb      	str	r3, [r7, #28]
          break;
 80048e0:	e00b      	b.n	80048fa <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 80048e2:	bf00      	nop
 80048e4:	f000 bce2 	b.w	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80048e8:	bf00      	nop
 80048ea:	f000 bcdf 	b.w	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80048ee:	bf00      	nop
 80048f0:	f000 bcdc 	b.w	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80048f4:	bf00      	nop
 80048f6:	f000 bcd9 	b.w	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80048fa:	bf00      	nop
        break;
 80048fc:	f000 bcd6 	b.w	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8004900:	4b42      	ldr	r3, [pc, #264]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004902:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800490a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800490e:	d13d      	bne.n	800498c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004910:	4b3e      	ldr	r3, [pc, #248]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004918:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800491c:	f040 84c5 	bne.w	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8004920:	4b3a      	ldr	r3, [pc, #232]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800492c:	f040 84bd 	bne.w	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004930:	4b36      	ldr	r3, [pc, #216]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	0a1b      	lsrs	r3, r3, #8
 8004936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800493a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	fb03 f202 	mul.w	r2, r3, r2
 8004944:	4b31      	ldr	r3, [pc, #196]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	091b      	lsrs	r3, r3, #4
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	3301      	adds	r3, #1
 8004950:	fbb2 f3f3 	udiv	r3, r2, r3
 8004954:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004956:	4b2d      	ldr	r3, [pc, #180]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	0edb      	lsrs	r3, r3, #27
 800495c:	f003 031f 	and.w	r3, r3, #31
 8004960:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10a      	bne.n	800497e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004968:	4b28      	ldr	r3, [pc, #160]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8004974:	2311      	movs	r3, #17
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	e001      	b.n	800497e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 800497a:	2307      	movs	r3, #7
 800497c:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	fbb2 f3f3 	udiv	r3, r2, r3
 8004986:	61fb      	str	r3, [r7, #28]
      break;
 8004988:	f000 bc8f 	b.w	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800498c:	4b1f      	ldr	r3, [pc, #124]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800498e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004992:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800499e:	d016      	beq.n	80049ce <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80049a6:	f200 809b 	bhi.w	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049b0:	d032      	beq.n	8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049b8:	f200 8092 	bhi.w	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 8084 	beq.w	8004acc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049ca:	d052      	beq.n	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 80049cc:	e088      	b.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80049ce:	4b0f      	ldr	r3, [pc, #60]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	f040 8084 	bne.w	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80049dc:	4b0b      	ldr	r3, [pc, #44]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d005      	beq.n	80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80049e8:	4b08      	ldr	r3, [pc, #32]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	091b      	lsrs	r3, r3, #4
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	e005      	b.n	8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 80049f4:	4b05      	ldr	r3, [pc, #20]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80049f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049fa:	0a1b      	lsrs	r3, r3, #8
 80049fc:	f003 030f 	and.w	r3, r3, #15
 8004a00:	4a03      	ldr	r2, [pc, #12]	; (8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a06:	61fb      	str	r3, [r7, #28]
          break;
 8004a08:	e06c      	b.n	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8004a0a:	bf00      	nop
 8004a0c:	40021000 	.word	0x40021000
 8004a10:	0800d900 	.word	0x0800d900
 8004a14:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004a18:	4ba5      	ldr	r3, [pc, #660]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a24:	d160      	bne.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004a26:	4ba2      	ldr	r3, [pc, #648]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a32:	d159      	bne.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004a34:	4b9e      	ldr	r3, [pc, #632]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	0a1b      	lsrs	r3, r3, #8
 8004a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a3e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	fb03 f202 	mul.w	r2, r3, r2
 8004a48:	4b99      	ldr	r3, [pc, #612]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	091b      	lsrs	r3, r3, #4
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	3301      	adds	r3, #1
 8004a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a58:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004a5a:	4b95      	ldr	r3, [pc, #596]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	0d5b      	lsrs	r3, r3, #21
 8004a60:	f003 0303 	and.w	r3, r3, #3
 8004a64:	3301      	adds	r3, #1
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6e:	61fb      	str	r3, [r7, #28]
          break;
 8004a70:	e03a      	b.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004a72:	4b8f      	ldr	r3, [pc, #572]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a7e:	d135      	bne.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004a80:	4b8b      	ldr	r3, [pc, #556]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a8c:	d12e      	bne.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004a8e:	4b88      	ldr	r3, [pc, #544]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	0a1b      	lsrs	r3, r3, #8
 8004a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a98:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	fb03 f202 	mul.w	r2, r3, r2
 8004aa2:	4b83      	ldr	r3, [pc, #524]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	091b      	lsrs	r3, r3, #4
 8004aa8:	f003 030f 	and.w	r3, r3, #15
 8004aac:	3301      	adds	r3, #1
 8004aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab2:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004ab4:	4b7e      	ldr	r3, [pc, #504]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	0d5b      	lsrs	r3, r3, #21
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	3301      	adds	r3, #1
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac8:	61fb      	str	r3, [r7, #28]
          break;
 8004aca:	e00f      	b.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8004acc:	4b78      	ldr	r3, [pc, #480]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004ace:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d10a      	bne.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8004ada:	4b76      	ldr	r3, [pc, #472]	; (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004adc:	61fb      	str	r3, [r7, #28]
          break;
 8004ade:	e007      	b.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8004ae0:	bf00      	nop
 8004ae2:	e3e2      	b.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004ae4:	bf00      	nop
 8004ae6:	e3e0      	b.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004ae8:	bf00      	nop
 8004aea:	e3de      	b.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004aec:	bf00      	nop
 8004aee:	e3dc      	b.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004af0:	bf00      	nop
      break;
 8004af2:	e3da      	b.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004af4:	4b6e      	ldr	r3, [pc, #440]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	60fb      	str	r3, [r7, #12]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	d827      	bhi.n	8004b56 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8004b06:	a201      	add	r2, pc, #4	; (adr r2, 8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8004b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0c:	08004b1d 	.word	0x08004b1d
 8004b10:	08004b25 	.word	0x08004b25
 8004b14:	08004b2d 	.word	0x08004b2d
 8004b18:	08004b41 	.word	0x08004b41
          frequency = HAL_RCC_GetPCLK2Freq();
 8004b1c:	f7ff f87c 	bl	8003c18 <HAL_RCC_GetPCLK2Freq>
 8004b20:	61f8      	str	r0, [r7, #28]
          break;
 8004b22:	e01d      	b.n	8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b24:	f7fe ffca 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8004b28:	61f8      	str	r0, [r7, #28]
          break;
 8004b2a:	e019      	b.n	8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b2c:	4b60      	ldr	r3, [pc, #384]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b38:	d10f      	bne.n	8004b5a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8004b3a:	4b5f      	ldr	r3, [pc, #380]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b3c:	61fb      	str	r3, [r7, #28]
          break;
 8004b3e:	e00c      	b.n	8004b5a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004b40:	4b5b      	ldr	r3, [pc, #364]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d107      	bne.n	8004b5e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8004b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b52:	61fb      	str	r3, [r7, #28]
          break;
 8004b54:	e003      	b.n	8004b5e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8004b56:	bf00      	nop
 8004b58:	e3a8      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004b5a:	bf00      	nop
 8004b5c:	e3a6      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004b5e:	bf00      	nop
        break;
 8004b60:	e3a4      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004b62:	4b53      	ldr	r3, [pc, #332]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b68:	f003 030c 	and.w	r3, r3, #12
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b0c      	cmp	r3, #12
 8004b72:	d83a      	bhi.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8004b74:	a201      	add	r2, pc, #4	; (adr r2, 8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8004b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7a:	bf00      	nop
 8004b7c:	08004bb1 	.word	0x08004bb1
 8004b80:	08004beb 	.word	0x08004beb
 8004b84:	08004beb 	.word	0x08004beb
 8004b88:	08004beb 	.word	0x08004beb
 8004b8c:	08004bb9 	.word	0x08004bb9
 8004b90:	08004beb 	.word	0x08004beb
 8004b94:	08004beb 	.word	0x08004beb
 8004b98:	08004beb 	.word	0x08004beb
 8004b9c:	08004bc1 	.word	0x08004bc1
 8004ba0:	08004beb 	.word	0x08004beb
 8004ba4:	08004beb 	.word	0x08004beb
 8004ba8:	08004beb 	.word	0x08004beb
 8004bac:	08004bd5 	.word	0x08004bd5
          frequency = HAL_RCC_GetPCLK1Freq();
 8004bb0:	f7ff f81c 	bl	8003bec <HAL_RCC_GetPCLK1Freq>
 8004bb4:	61f8      	str	r0, [r7, #28]
          break;
 8004bb6:	e01d      	b.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8004bb8:	f7fe ff80 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8004bbc:	61f8      	str	r0, [r7, #28]
          break;
 8004bbe:	e019      	b.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004bc0:	4b3b      	ldr	r3, [pc, #236]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bcc:	d10f      	bne.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8004bce:	4b3a      	ldr	r3, [pc, #232]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004bd0:	61fb      	str	r3, [r7, #28]
          break;
 8004bd2:	e00c      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004bd4:	4b36      	ldr	r3, [pc, #216]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d107      	bne.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8004be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004be6:	61fb      	str	r3, [r7, #28]
          break;
 8004be8:	e003      	b.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8004bea:	bf00      	nop
 8004bec:	e35e      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004bee:	bf00      	nop
 8004bf0:	e35c      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004bf2:	bf00      	nop
        break;
 8004bf4:	e35a      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004bf6:	4b2e      	ldr	r3, [pc, #184]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b30      	cmp	r3, #48	; 0x30
 8004c06:	d021      	beq.n	8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2b30      	cmp	r3, #48	; 0x30
 8004c0c:	d829      	bhi.n	8004c62 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2b20      	cmp	r3, #32
 8004c12:	d011      	beq.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b20      	cmp	r3, #32
 8004c18:	d823      	bhi.n	8004c62 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2b10      	cmp	r3, #16
 8004c24:	d004      	beq.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8004c26:	e01c      	b.n	8004c62 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c28:	f7fe ffe0 	bl	8003bec <HAL_RCC_GetPCLK1Freq>
 8004c2c:	61f8      	str	r0, [r7, #28]
          break;
 8004c2e:	e01d      	b.n	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c30:	f7fe ff44 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8004c34:	61f8      	str	r0, [r7, #28]
          break;
 8004c36:	e019      	b.n	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c38:	4b1d      	ldr	r3, [pc, #116]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c44:	d10f      	bne.n	8004c66 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8004c46:	4b1c      	ldr	r3, [pc, #112]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c48:	61fb      	str	r3, [r7, #28]
          break;
 8004c4a:	e00c      	b.n	8004c66 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004c4c:	4b18      	ldr	r3, [pc, #96]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d107      	bne.n	8004c6a <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8004c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c5e:	61fb      	str	r3, [r7, #28]
          break;
 8004c60:	e003      	b.n	8004c6a <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8004c62:	bf00      	nop
 8004c64:	e322      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004c66:	bf00      	nop
 8004c68:	e320      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004c6a:	bf00      	nop
        break;
 8004c6c:	e31e      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004c6e:	4b10      	ldr	r3, [pc, #64]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c74:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2bc0      	cmp	r3, #192	; 0xc0
 8004c7e:	d027      	beq.n	8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2bc0      	cmp	r3, #192	; 0xc0
 8004c84:	d82f      	bhi.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2b80      	cmp	r3, #128	; 0x80
 8004c8a:	d017      	beq.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2b80      	cmp	r3, #128	; 0x80
 8004c90:	d829      	bhi.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d003      	beq.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2b40      	cmp	r3, #64	; 0x40
 8004c9c:	d004      	beq.n	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8004c9e:	e022      	b.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004ca0:	f7fe ffa4 	bl	8003bec <HAL_RCC_GetPCLK1Freq>
 8004ca4:	61f8      	str	r0, [r7, #28]
          break;
 8004ca6:	e023      	b.n	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8004ca8:	f7fe ff08 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8004cac:	61f8      	str	r0, [r7, #28]
          break;
 8004cae:	e01f      	b.n	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	02dc6c00 	.word	0x02dc6c00
 8004cb8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004cbc:	4b9b      	ldr	r3, [pc, #620]	; (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cc8:	d10f      	bne.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8004cca:	4b99      	ldr	r3, [pc, #612]	; (8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004ccc:	61fb      	str	r3, [r7, #28]
          break;
 8004cce:	e00c      	b.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004cd0:	4b96      	ldr	r3, [pc, #600]	; (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d107      	bne.n	8004cee <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8004cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ce2:	61fb      	str	r3, [r7, #28]
          break;
 8004ce4:	e003      	b.n	8004cee <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8004ce6:	bf00      	nop
 8004ce8:	e2e0      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004cea:	bf00      	nop
 8004cec:	e2de      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004cee:	bf00      	nop
        break;
 8004cf0:	e2dc      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004cf2:	4b8e      	ldr	r3, [pc, #568]	; (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cfc:	60fb      	str	r3, [r7, #12]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d04:	d025      	beq.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d0c:	d82c      	bhi.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d14:	d013      	beq.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d1c:	d824      	bhi.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d004      	beq.n	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d2a:	d004      	beq.n	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8004d2c:	e01c      	b.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004d2e:	f7fe ff5d 	bl	8003bec <HAL_RCC_GetPCLK1Freq>
 8004d32:	61f8      	str	r0, [r7, #28]
          break;
 8004d34:	e01d      	b.n	8004d72 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8004d36:	f7fe fec1 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8004d3a:	61f8      	str	r0, [r7, #28]
          break;
 8004d3c:	e019      	b.n	8004d72 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d3e:	4b7b      	ldr	r3, [pc, #492]	; (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d4a:	d10f      	bne.n	8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8004d4c:	4b78      	ldr	r3, [pc, #480]	; (8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004d4e:	61fb      	str	r3, [r7, #28]
          break;
 8004d50:	e00c      	b.n	8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004d52:	4b76      	ldr	r3, [pc, #472]	; (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d107      	bne.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8004d60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d64:	61fb      	str	r3, [r7, #28]
          break;
 8004d66:	e003      	b.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8004d68:	bf00      	nop
 8004d6a:	e29f      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004d6c:	bf00      	nop
 8004d6e:	e29d      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004d70:	bf00      	nop
        break;
 8004d72:	e29b      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004d74:	4b6d      	ldr	r3, [pc, #436]	; (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d86:	d025      	beq.n	8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d8e:	d82c      	bhi.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d96:	d013      	beq.n	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d9e:	d824      	bhi.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d004      	beq.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dac:	d004      	beq.n	8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8004dae:	e01c      	b.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004db0:	f7fe ff1c 	bl	8003bec <HAL_RCC_GetPCLK1Freq>
 8004db4:	61f8      	str	r0, [r7, #28]
          break;
 8004db6:	e01d      	b.n	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8004db8:	f7fe fe80 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8004dbc:	61f8      	str	r0, [r7, #28]
          break;
 8004dbe:	e019      	b.n	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004dc0:	4b5a      	ldr	r3, [pc, #360]	; (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dcc:	d10f      	bne.n	8004dee <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8004dce:	4b58      	ldr	r3, [pc, #352]	; (8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004dd0:	61fb      	str	r3, [r7, #28]
          break;
 8004dd2:	e00c      	b.n	8004dee <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004dd4:	4b55      	ldr	r3, [pc, #340]	; (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d107      	bne.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8004de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004de6:	61fb      	str	r3, [r7, #28]
          break;
 8004de8:	e003      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8004dea:	bf00      	nop
 8004dec:	e25e      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004dee:	bf00      	nop
 8004df0:	e25c      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004df2:	bf00      	nop
        break;
 8004df4:	e25a      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004df6:	4b4d      	ldr	r3, [pc, #308]	; (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e00:	60fb      	str	r3, [r7, #12]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e08:	d007      	beq.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e10:	d12f      	bne.n	8004e72 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8004e12:	f7fe fe53 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8004e16:	61f8      	str	r0, [r7, #28]
          break;
 8004e18:	e02e      	b.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8004e1a:	4b44      	ldr	r3, [pc, #272]	; (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e26:	d126      	bne.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8004e28:	4b40      	ldr	r3, [pc, #256]	; (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d020      	beq.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004e34:	4b3d      	ldr	r3, [pc, #244]	; (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	0a1b      	lsrs	r3, r3, #8
 8004e3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e3e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	fb03 f202 	mul.w	r2, r3, r2
 8004e48:	4b38      	ldr	r3, [pc, #224]	; (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	091b      	lsrs	r3, r3, #4
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	3301      	adds	r3, #1
 8004e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e58:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004e5a:	4b34      	ldr	r3, [pc, #208]	; (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	0e5b      	lsrs	r3, r3, #25
 8004e60:	f003 0303 	and.w	r3, r3, #3
 8004e64:	3301      	adds	r3, #1
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6e:	61fb      	str	r3, [r7, #28]
          break;
 8004e70:	e001      	b.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8004e72:	bf00      	nop
 8004e74:	e21a      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004e76:	bf00      	nop
        break;
 8004e78:	e218      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004e7a:	4b2c      	ldr	r3, [pc, #176]	; (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004e7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d103      	bne.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004e8c:	f7fe fec4 	bl	8003c18 <HAL_RCC_GetPCLK2Freq>
 8004e90:	61f8      	str	r0, [r7, #28]
        break;
 8004e92:	e20b      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8004e94:	f7fe fe12 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8004e98:	61f8      	str	r0, [r7, #28]
        break;
 8004e9a:	e207      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8004e9c:	4b23      	ldr	r3, [pc, #140]	; (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004e9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ea2:	f003 0318 	and.w	r3, r3, #24
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2b10      	cmp	r3, #16
 8004eac:	d010      	beq.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2b10      	cmp	r3, #16
 8004eb2:	d834      	bhi.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2b08      	cmp	r3, #8
 8004ebe:	d024      	beq.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8004ec0:	e02d      	b.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004ec2:	69b9      	ldr	r1, [r7, #24]
 8004ec4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004ec8:	f000 fbe2 	bl	8005690 <RCCEx_GetSAIxPeriphCLKFreq>
 8004ecc:	61f8      	str	r0, [r7, #28]
          break;
 8004ece:	e02b      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004ed0:	4b16      	ldr	r3, [pc, #88]	; (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d122      	bne.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004edc:	4b13      	ldr	r3, [pc, #76]	; (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0308 	and.w	r3, r3, #8
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d005      	beq.n	8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8004ee8:	4b10      	ldr	r3, [pc, #64]	; (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	091b      	lsrs	r3, r3, #4
 8004eee:	f003 030f 	and.w	r3, r3, #15
 8004ef2:	e005      	b.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8004ef4:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004efa:	0a1b      	lsrs	r3, r3, #8
 8004efc:	f003 030f 	and.w	r3, r3, #15
 8004f00:	4a0c      	ldr	r2, [pc, #48]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f06:	61fb      	str	r3, [r7, #28]
          break;
 8004f08:	e00b      	b.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f0a:	4b08      	ldr	r3, [pc, #32]	; (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f16:	d106      	bne.n	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8004f18:	4b05      	ldr	r3, [pc, #20]	; (8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004f1a:	61fb      	str	r3, [r7, #28]
          break;
 8004f1c:	e003      	b.n	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8004f1e:	bf00      	nop
 8004f20:	e1c4      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004f22:	bf00      	nop
 8004f24:	e1c2      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004f26:	bf00      	nop
        break;
 8004f28:	e1c0      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8004f2a:	bf00      	nop
 8004f2c:	40021000 	.word	0x40021000
 8004f30:	00f42400 	.word	0x00f42400
 8004f34:	0800d900 	.word	0x0800d900
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004f38:	4b96      	ldr	r3, [pc, #600]	; (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f4a:	d013      	beq.n	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f52:	d819      	bhi.n	8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d004      	beq.n	8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f60:	d004      	beq.n	8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8004f62:	e011      	b.n	8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004f64:	f7fe fe42 	bl	8003bec <HAL_RCC_GetPCLK1Freq>
 8004f68:	61f8      	str	r0, [r7, #28]
          break;
 8004f6a:	e010      	b.n	8004f8e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8004f6c:	f7fe fda6 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8004f70:	61f8      	str	r0, [r7, #28]
          break;
 8004f72:	e00c      	b.n	8004f8e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f74:	4b87      	ldr	r3, [pc, #540]	; (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f80:	d104      	bne.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8004f82:	4b85      	ldr	r3, [pc, #532]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8004f84:	61fb      	str	r3, [r7, #28]
          break;
 8004f86:	e001      	b.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8004f88:	bf00      	nop
 8004f8a:	e18f      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004f8c:	bf00      	nop
        break;
 8004f8e:	e18d      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004f90:	4b80      	ldr	r3, [pc, #512]	; (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fa2:	d013      	beq.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004faa:	d819      	bhi.n	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d004      	beq.n	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fb8:	d004      	beq.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8004fba:	e011      	b.n	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004fbc:	f7fe fe16 	bl	8003bec <HAL_RCC_GetPCLK1Freq>
 8004fc0:	61f8      	str	r0, [r7, #28]
          break;
 8004fc2:	e010      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004fc4:	f7fe fd7a 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8004fc8:	61f8      	str	r0, [r7, #28]
          break;
 8004fca:	e00c      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004fcc:	4b71      	ldr	r3, [pc, #452]	; (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd8:	d104      	bne.n	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8004fda:	4b6f      	ldr	r3, [pc, #444]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8004fdc:	61fb      	str	r3, [r7, #28]
          break;
 8004fde:	e001      	b.n	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8004fe0:	bf00      	nop
 8004fe2:	e163      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004fe4:	bf00      	nop
        break;
 8004fe6:	e161      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004fe8:	4b6a      	ldr	r3, [pc, #424]	; (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ffa:	d013      	beq.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005002:	d819      	bhi.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d004      	beq.n	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005010:	d004      	beq.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8005012:	e011      	b.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005014:	f7fe fdea 	bl	8003bec <HAL_RCC_GetPCLK1Freq>
 8005018:	61f8      	str	r0, [r7, #28]
          break;
 800501a:	e010      	b.n	800503e <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 800501c:	f7fe fd4e 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8005020:	61f8      	str	r0, [r7, #28]
          break;
 8005022:	e00c      	b.n	800503e <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005024:	4b5b      	ldr	r3, [pc, #364]	; (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800502c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005030:	d104      	bne.n	800503c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8005032:	4b59      	ldr	r3, [pc, #356]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005034:	61fb      	str	r3, [r7, #28]
          break;
 8005036:	e001      	b.n	800503c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8005038:	bf00      	nop
 800503a:	e137      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800503c:	bf00      	nop
        break;
 800503e:	e135      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005040:	4b54      	ldr	r3, [pc, #336]	; (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005042:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005046:	f003 0303 	and.w	r3, r3, #3
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b02      	cmp	r3, #2
 8005050:	d011      	beq.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2b02      	cmp	r3, #2
 8005056:	d818      	bhi.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d004      	beq.n	800506e <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8005064:	e011      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005066:	f7fe fdc1 	bl	8003bec <HAL_RCC_GetPCLK1Freq>
 800506a:	61f8      	str	r0, [r7, #28]
          break;
 800506c:	e010      	b.n	8005090 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 800506e:	f7fe fd25 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8005072:	61f8      	str	r0, [r7, #28]
          break;
 8005074:	e00c      	b.n	8005090 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005076:	4b47      	ldr	r3, [pc, #284]	; (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800507e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005082:	d104      	bne.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8005084:	4b44      	ldr	r3, [pc, #272]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005086:	61fb      	str	r3, [r7, #28]
          break;
 8005088:	e001      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 800508a:	bf00      	nop
 800508c:	e10e      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800508e:	bf00      	nop
        break;
 8005090:	e10c      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005092:	4b40      	ldr	r3, [pc, #256]	; (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005098:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80050a4:	d02c      	beq.n	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80050ac:	d833      	bhi.n	8005116 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80050b4:	d01a      	beq.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80050bc:	d82b      	bhi.n	8005116 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d004      	beq.n	80050ce <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050ca:	d004      	beq.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 80050cc:	e023      	b.n	8005116 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80050ce:	f7fe fd8d 	bl	8003bec <HAL_RCC_GetPCLK1Freq>
 80050d2:	61f8      	str	r0, [r7, #28]
          break;
 80050d4:	e026      	b.n	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80050d6:	4b2f      	ldr	r3, [pc, #188]	; (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80050d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d11a      	bne.n	800511a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 80050e4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80050e8:	61fb      	str	r3, [r7, #28]
          break;
 80050ea:	e016      	b.n	800511a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80050ec:	4b29      	ldr	r3, [pc, #164]	; (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f8:	d111      	bne.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 80050fa:	4b27      	ldr	r3, [pc, #156]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80050fc:	61fb      	str	r3, [r7, #28]
          break;
 80050fe:	e00e      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005100:	4b24      	ldr	r3, [pc, #144]	; (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b02      	cmp	r3, #2
 800510c:	d109      	bne.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 800510e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005112:	61fb      	str	r3, [r7, #28]
          break;
 8005114:	e005      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8005116:	bf00      	nop
 8005118:	e0c8      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800511a:	bf00      	nop
 800511c:	e0c6      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800511e:	bf00      	nop
 8005120:	e0c4      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005122:	bf00      	nop
        break;
 8005124:	e0c2      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005126:	4b1b      	ldr	r3, [pc, #108]	; (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005138:	d030      	beq.n	800519c <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005140:	d837      	bhi.n	80051b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005148:	d01a      	beq.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005150:	d82f      	bhi.n	80051b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d004      	beq.n	8005162 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800515e:	d004      	beq.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8005160:	e027      	b.n	80051b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005162:	f7fe fd43 	bl	8003bec <HAL_RCC_GetPCLK1Freq>
 8005166:	61f8      	str	r0, [r7, #28]
          break;
 8005168:	e02a      	b.n	80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800516a:	4b0a      	ldr	r3, [pc, #40]	; (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800516c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b02      	cmp	r3, #2
 8005176:	d11e      	bne.n	80051b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8005178:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800517c:	61fb      	str	r3, [r7, #28]
          break;
 800517e:	e01a      	b.n	80051b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005180:	4b04      	ldr	r3, [pc, #16]	; (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800518c:	d115      	bne.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 800518e:	4b02      	ldr	r3, [pc, #8]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005190:	61fb      	str	r3, [r7, #28]
          break;
 8005192:	e012      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8005194:	40021000 	.word	0x40021000
 8005198:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800519c:	4b46      	ldr	r3, [pc, #280]	; (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800519e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d109      	bne.n	80051be <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 80051aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ae:	61fb      	str	r3, [r7, #28]
          break;
 80051b0:	e005      	b.n	80051be <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 80051b2:	bf00      	nop
 80051b4:	e07a      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80051b6:	bf00      	nop
 80051b8:	e078      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80051ba:	bf00      	nop
 80051bc:	e076      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80051be:	bf00      	nop
        break;
 80051c0:	e074      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80051c2:	4b3d      	ldr	r3, [pc, #244]	; (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80051c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051c8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80051cc:	60fb      	str	r3, [r7, #12]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051d4:	d02c      	beq.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051dc:	d855      	bhi.n	800528a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d004      	beq.n	80051ee <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051ea:	d004      	beq.n	80051f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 80051ec:	e04d      	b.n	800528a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 80051ee:	f7fe fc65 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 80051f2:	61f8      	str	r0, [r7, #28]
          break;
 80051f4:	e04e      	b.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80051f6:	4b30      	ldr	r3, [pc, #192]	; (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d145      	bne.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005202:	4b2d      	ldr	r3, [pc, #180]	; (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0308 	and.w	r3, r3, #8
 800520a:	2b00      	cmp	r3, #0
 800520c:	d005      	beq.n	800521a <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800520e:	4b2a      	ldr	r3, [pc, #168]	; (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	091b      	lsrs	r3, r3, #4
 8005214:	f003 030f 	and.w	r3, r3, #15
 8005218:	e005      	b.n	8005226 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800521a:	4b27      	ldr	r3, [pc, #156]	; (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800521c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005220:	0a1b      	lsrs	r3, r3, #8
 8005222:	f003 030f 	and.w	r3, r3, #15
 8005226:	4a25      	ldr	r2, [pc, #148]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8005228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800522c:	61fb      	str	r3, [r7, #28]
          break;
 800522e:	e02e      	b.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005230:	4b21      	ldr	r3, [pc, #132]	; (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005238:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800523c:	d129      	bne.n	8005292 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800523e:	4b1e      	ldr	r3, [pc, #120]	; (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005246:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800524a:	d122      	bne.n	8005292 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800524c:	4b1a      	ldr	r3, [pc, #104]	; (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	0a1b      	lsrs	r3, r3, #8
 8005252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005256:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	fb03 f202 	mul.w	r2, r3, r2
 8005260:	4b15      	ldr	r3, [pc, #84]	; (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	091b      	lsrs	r3, r3, #4
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	3301      	adds	r3, #1
 800526c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005270:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005272:	4b11      	ldr	r3, [pc, #68]	; (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	0d5b      	lsrs	r3, r3, #21
 8005278:	f003 0303 	and.w	r3, r3, #3
 800527c:	3301      	adds	r3, #1
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	fbb2 f3f3 	udiv	r3, r2, r3
 8005286:	61fb      	str	r3, [r7, #28]
          break;
 8005288:	e003      	b.n	8005292 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 800528a:	bf00      	nop
 800528c:	e00e      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800528e:	bf00      	nop
 8005290:	e00c      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005292:	bf00      	nop
        break;
 8005294:	e00a      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005296:	bf00      	nop
 8005298:	e008      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800529a:	bf00      	nop
 800529c:	e006      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800529e:	bf00      	nop
 80052a0:	e004      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80052a2:	bf00      	nop
 80052a4:	e002      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80052a6:	bf00      	nop
 80052a8:	e000      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80052aa:	bf00      	nop
    }
  }

  return(frequency);
 80052ac:	69fb      	ldr	r3, [r7, #28]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3720      	adds	r7, #32
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	40021000 	.word	0x40021000
 80052bc:	0800d900 	.word	0x0800d900

080052c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052ca:	2300      	movs	r3, #0
 80052cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052ce:	4b72      	ldr	r3, [pc, #456]	; (8005498 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f003 0303 	and.w	r3, r3, #3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00e      	beq.n	80052f8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80052da:	4b6f      	ldr	r3, [pc, #444]	; (8005498 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f003 0203 	and.w	r2, r3, #3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d103      	bne.n	80052f2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
       ||
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d142      	bne.n	8005378 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	73fb      	strb	r3, [r7, #15]
 80052f6:	e03f      	b.n	8005378 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b03      	cmp	r3, #3
 80052fe:	d018      	beq.n	8005332 <RCCEx_PLLSAI1_Config+0x72>
 8005300:	2b03      	cmp	r3, #3
 8005302:	d825      	bhi.n	8005350 <RCCEx_PLLSAI1_Config+0x90>
 8005304:	2b01      	cmp	r3, #1
 8005306:	d002      	beq.n	800530e <RCCEx_PLLSAI1_Config+0x4e>
 8005308:	2b02      	cmp	r3, #2
 800530a:	d009      	beq.n	8005320 <RCCEx_PLLSAI1_Config+0x60>
 800530c:	e020      	b.n	8005350 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800530e:	4b62      	ldr	r3, [pc, #392]	; (8005498 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d11d      	bne.n	8005356 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800531e:	e01a      	b.n	8005356 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005320:	4b5d      	ldr	r3, [pc, #372]	; (8005498 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005328:	2b00      	cmp	r3, #0
 800532a:	d116      	bne.n	800535a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005330:	e013      	b.n	800535a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005332:	4b59      	ldr	r3, [pc, #356]	; (8005498 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10f      	bne.n	800535e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800533e:	4b56      	ldr	r3, [pc, #344]	; (8005498 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d109      	bne.n	800535e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800534e:	e006      	b.n	800535e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	73fb      	strb	r3, [r7, #15]
      break;
 8005354:	e004      	b.n	8005360 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005356:	bf00      	nop
 8005358:	e002      	b.n	8005360 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800535a:	bf00      	nop
 800535c:	e000      	b.n	8005360 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800535e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005360:	7bfb      	ldrb	r3, [r7, #15]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d108      	bne.n	8005378 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005366:	4b4c      	ldr	r3, [pc, #304]	; (8005498 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	f023 0203 	bic.w	r2, r3, #3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4949      	ldr	r1, [pc, #292]	; (8005498 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005374:	4313      	orrs	r3, r2
 8005376:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005378:	7bfb      	ldrb	r3, [r7, #15]
 800537a:	2b00      	cmp	r3, #0
 800537c:	f040 8086 	bne.w	800548c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005380:	4b45      	ldr	r3, [pc, #276]	; (8005498 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a44      	ldr	r2, [pc, #272]	; (8005498 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005386:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800538a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800538c:	f7fb ff6a 	bl	8001264 <HAL_GetTick>
 8005390:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005392:	e009      	b.n	80053a8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005394:	f7fb ff66 	bl	8001264 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d902      	bls.n	80053a8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	73fb      	strb	r3, [r7, #15]
        break;
 80053a6:	e005      	b.n	80053b4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053a8:	4b3b      	ldr	r3, [pc, #236]	; (8005498 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1ef      	bne.n	8005394 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80053b4:	7bfb      	ldrb	r3, [r7, #15]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d168      	bne.n	800548c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d113      	bne.n	80053e8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053c0:	4b35      	ldr	r3, [pc, #212]	; (8005498 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053c2:	691a      	ldr	r2, [r3, #16]
 80053c4:	4b35      	ldr	r3, [pc, #212]	; (800549c <RCCEx_PLLSAI1_Config+0x1dc>)
 80053c6:	4013      	ands	r3, r2
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	6892      	ldr	r2, [r2, #8]
 80053cc:	0211      	lsls	r1, r2, #8
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	68d2      	ldr	r2, [r2, #12]
 80053d2:	06d2      	lsls	r2, r2, #27
 80053d4:	4311      	orrs	r1, r2
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	6852      	ldr	r2, [r2, #4]
 80053da:	3a01      	subs	r2, #1
 80053dc:	0112      	lsls	r2, r2, #4
 80053de:	430a      	orrs	r2, r1
 80053e0:	492d      	ldr	r1, [pc, #180]	; (8005498 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	610b      	str	r3, [r1, #16]
 80053e6:	e02d      	b.n	8005444 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d115      	bne.n	800541a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053ee:	4b2a      	ldr	r3, [pc, #168]	; (8005498 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053f0:	691a      	ldr	r2, [r3, #16]
 80053f2:	4b2b      	ldr	r3, [pc, #172]	; (80054a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053f4:	4013      	ands	r3, r2
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6892      	ldr	r2, [r2, #8]
 80053fa:	0211      	lsls	r1, r2, #8
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6912      	ldr	r2, [r2, #16]
 8005400:	0852      	lsrs	r2, r2, #1
 8005402:	3a01      	subs	r2, #1
 8005404:	0552      	lsls	r2, r2, #21
 8005406:	4311      	orrs	r1, r2
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6852      	ldr	r2, [r2, #4]
 800540c:	3a01      	subs	r2, #1
 800540e:	0112      	lsls	r2, r2, #4
 8005410:	430a      	orrs	r2, r1
 8005412:	4921      	ldr	r1, [pc, #132]	; (8005498 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005414:	4313      	orrs	r3, r2
 8005416:	610b      	str	r3, [r1, #16]
 8005418:	e014      	b.n	8005444 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800541a:	4b1f      	ldr	r3, [pc, #124]	; (8005498 <RCCEx_PLLSAI1_Config+0x1d8>)
 800541c:	691a      	ldr	r2, [r3, #16]
 800541e:	4b21      	ldr	r3, [pc, #132]	; (80054a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005420:	4013      	ands	r3, r2
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	6892      	ldr	r2, [r2, #8]
 8005426:	0211      	lsls	r1, r2, #8
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	6952      	ldr	r2, [r2, #20]
 800542c:	0852      	lsrs	r2, r2, #1
 800542e:	3a01      	subs	r2, #1
 8005430:	0652      	lsls	r2, r2, #25
 8005432:	4311      	orrs	r1, r2
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6852      	ldr	r2, [r2, #4]
 8005438:	3a01      	subs	r2, #1
 800543a:	0112      	lsls	r2, r2, #4
 800543c:	430a      	orrs	r2, r1
 800543e:	4916      	ldr	r1, [pc, #88]	; (8005498 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005440:	4313      	orrs	r3, r2
 8005442:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005444:	4b14      	ldr	r3, [pc, #80]	; (8005498 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a13      	ldr	r2, [pc, #76]	; (8005498 <RCCEx_PLLSAI1_Config+0x1d8>)
 800544a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800544e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005450:	f7fb ff08 	bl	8001264 <HAL_GetTick>
 8005454:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005456:	e009      	b.n	800546c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005458:	f7fb ff04 	bl	8001264 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d902      	bls.n	800546c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	73fb      	strb	r3, [r7, #15]
          break;
 800546a:	e005      	b.n	8005478 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800546c:	4b0a      	ldr	r3, [pc, #40]	; (8005498 <RCCEx_PLLSAI1_Config+0x1d8>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0ef      	beq.n	8005458 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005478:	7bfb      	ldrb	r3, [r7, #15]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d106      	bne.n	800548c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800547e:	4b06      	ldr	r3, [pc, #24]	; (8005498 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005480:	691a      	ldr	r2, [r3, #16]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	4904      	ldr	r1, [pc, #16]	; (8005498 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005488:	4313      	orrs	r3, r2
 800548a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800548c:	7bfb      	ldrb	r3, [r7, #15]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	40021000 	.word	0x40021000
 800549c:	07ff800f 	.word	0x07ff800f
 80054a0:	ff9f800f 	.word	0xff9f800f
 80054a4:	f9ff800f 	.word	0xf9ff800f

080054a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054b6:	4b72      	ldr	r3, [pc, #456]	; (8005680 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00e      	beq.n	80054e0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80054c2:	4b6f      	ldr	r3, [pc, #444]	; (8005680 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f003 0203 	and.w	r2, r3, #3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d103      	bne.n	80054da <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
       ||
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d142      	bne.n	8005560 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	73fb      	strb	r3, [r7, #15]
 80054de:	e03f      	b.n	8005560 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b03      	cmp	r3, #3
 80054e6:	d018      	beq.n	800551a <RCCEx_PLLSAI2_Config+0x72>
 80054e8:	2b03      	cmp	r3, #3
 80054ea:	d825      	bhi.n	8005538 <RCCEx_PLLSAI2_Config+0x90>
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d002      	beq.n	80054f6 <RCCEx_PLLSAI2_Config+0x4e>
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d009      	beq.n	8005508 <RCCEx_PLLSAI2_Config+0x60>
 80054f4:	e020      	b.n	8005538 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054f6:	4b62      	ldr	r3, [pc, #392]	; (8005680 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d11d      	bne.n	800553e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005506:	e01a      	b.n	800553e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005508:	4b5d      	ldr	r3, [pc, #372]	; (8005680 <RCCEx_PLLSAI2_Config+0x1d8>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005510:	2b00      	cmp	r3, #0
 8005512:	d116      	bne.n	8005542 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005518:	e013      	b.n	8005542 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800551a:	4b59      	ldr	r3, [pc, #356]	; (8005680 <RCCEx_PLLSAI2_Config+0x1d8>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10f      	bne.n	8005546 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005526:	4b56      	ldr	r3, [pc, #344]	; (8005680 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d109      	bne.n	8005546 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005536:	e006      	b.n	8005546 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	73fb      	strb	r3, [r7, #15]
      break;
 800553c:	e004      	b.n	8005548 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800553e:	bf00      	nop
 8005540:	e002      	b.n	8005548 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005542:	bf00      	nop
 8005544:	e000      	b.n	8005548 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005546:	bf00      	nop
    }

    if(status == HAL_OK)
 8005548:	7bfb      	ldrb	r3, [r7, #15]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d108      	bne.n	8005560 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800554e:	4b4c      	ldr	r3, [pc, #304]	; (8005680 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f023 0203 	bic.w	r2, r3, #3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4949      	ldr	r1, [pc, #292]	; (8005680 <RCCEx_PLLSAI2_Config+0x1d8>)
 800555c:	4313      	orrs	r3, r2
 800555e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005560:	7bfb      	ldrb	r3, [r7, #15]
 8005562:	2b00      	cmp	r3, #0
 8005564:	f040 8086 	bne.w	8005674 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005568:	4b45      	ldr	r3, [pc, #276]	; (8005680 <RCCEx_PLLSAI2_Config+0x1d8>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a44      	ldr	r2, [pc, #272]	; (8005680 <RCCEx_PLLSAI2_Config+0x1d8>)
 800556e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005572:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005574:	f7fb fe76 	bl	8001264 <HAL_GetTick>
 8005578:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800557a:	e009      	b.n	8005590 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800557c:	f7fb fe72 	bl	8001264 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d902      	bls.n	8005590 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	73fb      	strb	r3, [r7, #15]
        break;
 800558e:	e005      	b.n	800559c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005590:	4b3b      	ldr	r3, [pc, #236]	; (8005680 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1ef      	bne.n	800557c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d168      	bne.n	8005674 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d113      	bne.n	80055d0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055a8:	4b35      	ldr	r3, [pc, #212]	; (8005680 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055aa:	695a      	ldr	r2, [r3, #20]
 80055ac:	4b35      	ldr	r3, [pc, #212]	; (8005684 <RCCEx_PLLSAI2_Config+0x1dc>)
 80055ae:	4013      	ands	r3, r2
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6892      	ldr	r2, [r2, #8]
 80055b4:	0211      	lsls	r1, r2, #8
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	68d2      	ldr	r2, [r2, #12]
 80055ba:	06d2      	lsls	r2, r2, #27
 80055bc:	4311      	orrs	r1, r2
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	6852      	ldr	r2, [r2, #4]
 80055c2:	3a01      	subs	r2, #1
 80055c4:	0112      	lsls	r2, r2, #4
 80055c6:	430a      	orrs	r2, r1
 80055c8:	492d      	ldr	r1, [pc, #180]	; (8005680 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	614b      	str	r3, [r1, #20]
 80055ce:	e02d      	b.n	800562c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d115      	bne.n	8005602 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055d6:	4b2a      	ldr	r3, [pc, #168]	; (8005680 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055d8:	695a      	ldr	r2, [r3, #20]
 80055da:	4b2b      	ldr	r3, [pc, #172]	; (8005688 <RCCEx_PLLSAI2_Config+0x1e0>)
 80055dc:	4013      	ands	r3, r2
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6892      	ldr	r2, [r2, #8]
 80055e2:	0211      	lsls	r1, r2, #8
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6912      	ldr	r2, [r2, #16]
 80055e8:	0852      	lsrs	r2, r2, #1
 80055ea:	3a01      	subs	r2, #1
 80055ec:	0552      	lsls	r2, r2, #21
 80055ee:	4311      	orrs	r1, r2
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	6852      	ldr	r2, [r2, #4]
 80055f4:	3a01      	subs	r2, #1
 80055f6:	0112      	lsls	r2, r2, #4
 80055f8:	430a      	orrs	r2, r1
 80055fa:	4921      	ldr	r1, [pc, #132]	; (8005680 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	614b      	str	r3, [r1, #20]
 8005600:	e014      	b.n	800562c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005602:	4b1f      	ldr	r3, [pc, #124]	; (8005680 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005604:	695a      	ldr	r2, [r3, #20]
 8005606:	4b21      	ldr	r3, [pc, #132]	; (800568c <RCCEx_PLLSAI2_Config+0x1e4>)
 8005608:	4013      	ands	r3, r2
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	6892      	ldr	r2, [r2, #8]
 800560e:	0211      	lsls	r1, r2, #8
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	6952      	ldr	r2, [r2, #20]
 8005614:	0852      	lsrs	r2, r2, #1
 8005616:	3a01      	subs	r2, #1
 8005618:	0652      	lsls	r2, r2, #25
 800561a:	4311      	orrs	r1, r2
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6852      	ldr	r2, [r2, #4]
 8005620:	3a01      	subs	r2, #1
 8005622:	0112      	lsls	r2, r2, #4
 8005624:	430a      	orrs	r2, r1
 8005626:	4916      	ldr	r1, [pc, #88]	; (8005680 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005628:	4313      	orrs	r3, r2
 800562a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800562c:	4b14      	ldr	r3, [pc, #80]	; (8005680 <RCCEx_PLLSAI2_Config+0x1d8>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a13      	ldr	r2, [pc, #76]	; (8005680 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005636:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005638:	f7fb fe14 	bl	8001264 <HAL_GetTick>
 800563c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800563e:	e009      	b.n	8005654 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005640:	f7fb fe10 	bl	8001264 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	2b02      	cmp	r3, #2
 800564c:	d902      	bls.n	8005654 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	73fb      	strb	r3, [r7, #15]
          break;
 8005652:	e005      	b.n	8005660 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005654:	4b0a      	ldr	r3, [pc, #40]	; (8005680 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0ef      	beq.n	8005640 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005660:	7bfb      	ldrb	r3, [r7, #15]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d106      	bne.n	8005674 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005666:	4b06      	ldr	r3, [pc, #24]	; (8005680 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005668:	695a      	ldr	r2, [r3, #20]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	4904      	ldr	r1, [pc, #16]	; (8005680 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005670:	4313      	orrs	r3, r2
 8005672:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005674:	7bfb      	ldrb	r3, [r7, #15]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	40021000 	.word	0x40021000
 8005684:	07ff800f 	.word	0x07ff800f
 8005688:	ff9f800f 	.word	0xff9f800f
 800568c:	f9ff800f 	.word	0xf9ff800f

08005690 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005690:	b480      	push	{r7}
 8005692:	b089      	sub	sp, #36	; 0x24
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800569a:	2300      	movs	r3, #0
 800569c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ac:	d10b      	bne.n	80056c6 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80056ae:	4b7e      	ldr	r3, [pc, #504]	; (80058a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80056b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056b4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80056b8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	2b60      	cmp	r3, #96	; 0x60
 80056be:	d112      	bne.n	80056e6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80056c0:	4b7a      	ldr	r3, [pc, #488]	; (80058ac <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80056c2:	61fb      	str	r3, [r7, #28]
 80056c4:	e00f      	b.n	80056e6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056cc:	d10b      	bne.n	80056e6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80056ce:	4b76      	ldr	r3, [pc, #472]	; (80058a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80056d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056d8:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056e0:	d101      	bne.n	80056e6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80056e2:	4b72      	ldr	r3, [pc, #456]	; (80058ac <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80056e4:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f040 80d6 	bne.w	800589a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	2b40      	cmp	r3, #64	; 0x40
 80056f6:	d003      	beq.n	8005700 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056fe:	d13b      	bne.n	8005778 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005700:	4b69      	ldr	r3, [pc, #420]	; (80058a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005708:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800570c:	f040 80c4 	bne.w	8005898 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8005710:	4b65      	ldr	r3, [pc, #404]	; (80058a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 80bd 	beq.w	8005898 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800571e:	4b62      	ldr	r3, [pc, #392]	; (80058a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	091b      	lsrs	r3, r3, #4
 8005724:	f003 030f 	and.w	r3, r3, #15
 8005728:	3301      	adds	r3, #1
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005730:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005732:	4b5d      	ldr	r3, [pc, #372]	; (80058a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	0a1b      	lsrs	r3, r3, #8
 8005738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800573c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800573e:	4b5a      	ldr	r3, [pc, #360]	; (80058a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	0edb      	lsrs	r3, r3, #27
 8005744:	f003 031f 	and.w	r3, r3, #31
 8005748:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10a      	bne.n	8005766 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005750:	4b55      	ldr	r3, [pc, #340]	; (80058a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800575c:	2311      	movs	r3, #17
 800575e:	617b      	str	r3, [r7, #20]
 8005760:	e001      	b.n	8005766 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8005762:	2307      	movs	r3, #7
 8005764:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	fb03 f202 	mul.w	r2, r3, r2
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	fbb2 f3f3 	udiv	r3, r2, r3
 8005774:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005776:	e08f      	b.n	8005898 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d13a      	bne.n	80057f4 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800577e:	4b4a      	ldr	r3, [pc, #296]	; (80058a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800578a:	f040 8086 	bne.w	800589a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800578e:	4b46      	ldr	r3, [pc, #280]	; (80058a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d07f      	beq.n	800589a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800579a:	4b43      	ldr	r3, [pc, #268]	; (80058a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	091b      	lsrs	r3, r3, #4
 80057a0:	f003 030f 	and.w	r3, r3, #15
 80057a4:	3301      	adds	r3, #1
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ac:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80057ae:	4b3e      	ldr	r3, [pc, #248]	; (80058a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	0a1b      	lsrs	r3, r3, #8
 80057b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057b8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80057ba:	4b3b      	ldr	r3, [pc, #236]	; (80058a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	0edb      	lsrs	r3, r3, #27
 80057c0:	f003 031f 	and.w	r3, r3, #31
 80057c4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10a      	bne.n	80057e2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80057cc:	4b36      	ldr	r3, [pc, #216]	; (80058a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d002      	beq.n	80057de <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 80057d8:	2311      	movs	r3, #17
 80057da:	617b      	str	r3, [r7, #20]
 80057dc:	e001      	b.n	80057e2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 80057de:	2307      	movs	r3, #7
 80057e0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	fb03 f202 	mul.w	r2, r3, r2
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f0:	61fb      	str	r3, [r7, #28]
 80057f2:	e052      	b.n	800589a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	2b80      	cmp	r3, #128	; 0x80
 80057f8:	d003      	beq.n	8005802 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005800:	d109      	bne.n	8005816 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005802:	4b29      	ldr	r3, [pc, #164]	; (80058a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800580a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800580e:	d144      	bne.n	800589a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8005810:	4b27      	ldr	r3, [pc, #156]	; (80058b0 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8005812:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005814:	e041      	b.n	800589a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	2b20      	cmp	r3, #32
 800581a:	d003      	beq.n	8005824 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005822:	d13a      	bne.n	800589a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8005824:	4b20      	ldr	r3, [pc, #128]	; (80058a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800582c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005830:	d133      	bne.n	800589a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8005832:	4b1d      	ldr	r3, [pc, #116]	; (80058a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d02d      	beq.n	800589a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800583e:	4b1a      	ldr	r3, [pc, #104]	; (80058a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	091b      	lsrs	r3, r3, #4
 8005844:	f003 030f 	and.w	r3, r3, #15
 8005848:	3301      	adds	r3, #1
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005850:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005852:	4b15      	ldr	r3, [pc, #84]	; (80058a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	0a1b      	lsrs	r3, r3, #8
 8005858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800585c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800585e:	4b12      	ldr	r3, [pc, #72]	; (80058a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	0edb      	lsrs	r3, r3, #27
 8005864:	f003 031f 	and.w	r3, r3, #31
 8005868:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10a      	bne.n	8005886 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005870:	4b0d      	ldr	r3, [pc, #52]	; (80058a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d002      	beq.n	8005882 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 800587c:	2311      	movs	r3, #17
 800587e:	617b      	str	r3, [r7, #20]
 8005880:	e001      	b.n	8005886 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8005882:	2307      	movs	r3, #7
 8005884:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	fb03 f202 	mul.w	r2, r3, r2
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	fbb2 f3f3 	udiv	r3, r2, r3
 8005894:	61fb      	str	r3, [r7, #28]
 8005896:	e000      	b.n	800589a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005898:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800589a:	69fb      	ldr	r3, [r7, #28]
}
 800589c:	4618      	mov	r0, r3
 800589e:	3724      	adds	r7, #36	; 0x24
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr
 80058a8:	40021000 	.word	0x40021000
 80058ac:	001fff68 	.word	0x001fff68
 80058b0:	00f42400 	.word	0x00f42400

080058b4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b08a      	sub	sp, #40	; 0x28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e078      	b.n	80059b8 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d105      	bne.n	80058de <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7fb fa49 	bl	8000d70 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2203      	movs	r2, #3
 80058e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f86a 	bl	80059c0 <HAL_SD_InitCard>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e060      	b.n	80059b8 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80058f6:	f107 0308 	add.w	r3, r7, #8
 80058fa:	4619      	mov	r1, r3
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fdcd 	bl	800649c <HAL_SD_GetCardStatus>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e055      	b.n	80059b8 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800590c:	7e3b      	ldrb	r3, [r7, #24]
 800590e:	b2db      	uxtb	r3, r3
 8005910:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005912:	7e7b      	ldrb	r3, [r7, #25]
 8005914:	b2db      	uxtb	r3, r3
 8005916:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591c:	2b01      	cmp	r3, #1
 800591e:	d10a      	bne.n	8005936 <HAL_SD_Init+0x82>
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	2b00      	cmp	r3, #0
 8005924:	d102      	bne.n	800592c <HAL_SD_Init+0x78>
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d004      	beq.n	8005936 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005932:	65da      	str	r2, [r3, #92]	; 0x5c
 8005934:	e00b      	b.n	800594e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593a:	2b01      	cmp	r3, #1
 800593c:	d104      	bne.n	8005948 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005944:	65da      	str	r2, [r3, #92]	; 0x5c
 8005946:	e002      	b.n	800594e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	4619      	mov	r1, r3
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 fe83 	bl	8006660 <HAL_SD_ConfigWideBusOperation>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e029      	b.n	80059b8 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005964:	f7fb fc7e 	bl	8001264 <HAL_GetTick>
 8005968:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800596a:	e014      	b.n	8005996 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800596c:	f7fb fc7a 	bl	8001264 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800597a:	d10c      	bne.n	8005996 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005982:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e010      	b.n	80059b8 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 ff76 	bl	8006888 <HAL_SD_GetCardState>
 800599c:	4603      	mov	r3, r0
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d1e4      	bne.n	800596c <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3728      	adds	r7, #40	; 0x28
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80059c0:	b5b0      	push	{r4, r5, r7, lr}
 80059c2:	b08e      	sub	sp, #56	; 0x38
 80059c4:	af04      	add	r7, sp, #16
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80059c8:	2300      	movs	r3, #0
 80059ca:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80059cc:	2300      	movs	r3, #0
 80059ce:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80059d0:	2300      	movs	r3, #0
 80059d2:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80059d4:	2300      	movs	r3, #0
 80059d6:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80059d8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80059dc:	f7fe fd4e 	bl	800447c <HAL_RCCEx_GetPeriphCLKFreq>
 80059e0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d109      	bne.n	80059fc <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80059f6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e079      	b.n	8005af0 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	0a1b      	lsrs	r3, r3, #8
 8005a00:	4a3d      	ldr	r2, [pc, #244]	; (8005af8 <HAL_SD_InitCard+0x138>)
 8005a02:	fba2 2303 	umull	r2, r3, r2, r3
 8005a06:	091b      	lsrs	r3, r3, #4
 8005a08:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d107      	bne.n	8005a28 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0210 	orr.w	r2, r2, #16
 8005a26:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681d      	ldr	r5, [r3, #0]
 8005a2c:	466c      	mov	r4, sp
 8005a2e:	f107 0314 	add.w	r3, r7, #20
 8005a32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005a3a:	f107 0308 	add.w	r3, r7, #8
 8005a3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a40:	4628      	mov	r0, r5
 8005a42:	f003 f91d 	bl	8008c80 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f003 f960 	bl	8008d10 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5a:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8005a5c:	4a27      	ldr	r2, [pc, #156]	; (8005afc <HAL_SD_InitCard+0x13c>)
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a64:	3301      	adds	r3, #1
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fb fc08 	bl	800127c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 ffeb 	bl	8006a48 <SD_PowerON>
 8005a72:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00b      	beq.n	8005a92 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e02e      	b.n	8005af0 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 ff18 	bl	80068c8 <SD_InitCard>
 8005a98:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a9a:	6a3b      	ldr	r3, [r7, #32]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00b      	beq.n	8005ab8 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aac:	6a3b      	ldr	r3, [r7, #32]
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e01b      	b.n	8005af0 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f003 f9bb 	bl	8008e3c <SDMMC_CmdBlockLength>
 8005ac6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00f      	beq.n	8005aee <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a0b      	ldr	r2, [pc, #44]	; (8005b00 <HAL_SD_InitCard+0x140>)
 8005ad4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	431a      	orrs	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e000      	b.n	8005af0 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3728      	adds	r7, #40	; 0x28
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bdb0      	pop	{r4, r5, r7, pc}
 8005af8:	014f8b59 	.word	0x014f8b59
 8005afc:	00012110 	.word	0x00012110
 8005b00:	1fe00fff 	.word	0x1fe00fff

08005b04 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b092      	sub	sp, #72	; 0x48
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
 8005b10:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005b12:	f7fb fba7 	bl	8001264 <HAL_GetTick>
 8005b16:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d107      	bne.n	8005b36 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e170      	b.n	8005e18 <HAL_SD_ReadBlocks+0x314>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	f040 8163 	bne.w	8005e0a <HAL_SD_ReadBlocks+0x306>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005b4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	441a      	add	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d907      	bls.n	8005b68 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e157      	b.n	8005e18 <HAL_SD_ReadBlocks+0x314>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2203      	movs	r2, #3
 8005b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2200      	movs	r2, #0
 8005b76:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d002      	beq.n	8005b86 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b82:	025b      	lsls	r3, r3, #9
 8005b84:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005b86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b8a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	025b      	lsls	r3, r3, #9
 8005b90:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005b92:	2390      	movs	r3, #144	; 0x90
 8005b94:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005b96:	2302      	movs	r3, #2
 8005b98:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	62bb      	str	r3, [r7, #40]	; 0x28
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f107 0214 	add.w	r2, r7, #20
 8005baa:	4611      	mov	r1, r2
 8005bac:	4618      	mov	r0, r3
 8005bae:	f003 f919 	bl	8008de4 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bc0:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d90a      	bls.n	8005bde <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f003 f977 	bl	8008ec8 <SDMMC_CmdReadMultiBlock>
 8005bda:	6478      	str	r0, [r7, #68]	; 0x44
 8005bdc:	e009      	b.n	8005bf2 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2201      	movs	r2, #1
 8005be2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005bea:	4618      	mov	r0, r3
 8005bec:	f003 f949 	bl	8008e82 <SDMMC_CmdReadSingleBlock>
 8005bf0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d012      	beq.n	8005c1e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a88      	ldr	r2, [pc, #544]	; (8005e20 <HAL_SD_ReadBlocks+0x31c>)
 8005bfe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c06:	431a      	orrs	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e0fc      	b.n	8005e18 <HAL_SD_ReadBlocks+0x314>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005c22:	e061      	b.n	8005ce8 <HAL_SD_ReadBlocks+0x1e4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d03c      	beq.n	8005cac <HAL_SD_ReadBlocks+0x1a8>
 8005c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d039      	beq.n	8005cac <HAL_SD_ReadBlocks+0x1a8>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005c38:	2300      	movs	r3, #0
 8005c3a:	643b      	str	r3, [r7, #64]	; 0x40
 8005c3c:	e033      	b.n	8005ca6 <HAL_SD_ReadBlocks+0x1a2>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f003 f846 	bl	8008cd4 <SDMMC_ReadFIFO>
 8005c48:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c50:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c54:	3301      	adds	r3, #1
 8005c56:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c60:	0a1b      	lsrs	r3, r3, #8
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c66:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c70:	3b01      	subs	r3, #1
 8005c72:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c76:	0c1b      	lsrs	r3, r3, #16
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c80:	3301      	adds	r3, #1
 8005c82:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c86:	3b01      	subs	r3, #1
 8005c88:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8c:	0e1b      	lsrs	r3, r3, #24
 8005c8e:	b2da      	uxtb	r2, r3
 8005c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c92:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c96:	3301      	adds	r3, #1
 8005c98:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8005ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	643b      	str	r3, [r7, #64]	; 0x40
 8005ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ca8:	2b07      	cmp	r3, #7
 8005caa:	d9c8      	bls.n	8005c3e <HAL_SD_ReadBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005cac:	f7fb fada 	bl	8001264 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d902      	bls.n	8005cc2 <HAL_SD_ReadBlocks+0x1be>
 8005cbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d112      	bne.n	8005ce8 <HAL_SD_ReadBlocks+0x1e4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a56      	ldr	r2, [pc, #344]	; (8005e20 <HAL_SD_ReadBlocks+0x31c>)
 8005cc8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e097      	b.n	8005e18 <HAL_SD_ReadBlocks+0x314>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cee:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d096      	beq.n	8005c24 <HAL_SD_ReadBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68da      	ldr	r2, [r3, #12]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d04:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d022      	beq.n	8005d5a <HAL_SD_ReadBlocks+0x256>
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d91f      	bls.n	8005d5a <HAL_SD_ReadBlocks+0x256>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1e:	2b03      	cmp	r3, #3
 8005d20:	d01b      	beq.n	8005d5a <HAL_SD_ReadBlocks+0x256>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f003 f938 	bl	8008f9c <SDMMC_CmdStopTransfer>
 8005d2c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005d2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d012      	beq.n	8005d5a <HAL_SD_ReadBlocks+0x256>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a39      	ldr	r2, [pc, #228]	; (8005e20 <HAL_SD_ReadBlocks+0x31c>)
 8005d3a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d42:	431a      	orrs	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e05e      	b.n	8005e18 <HAL_SD_ReadBlocks+0x314>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d60:	f003 0308 	and.w	r3, r3, #8
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d012      	beq.n	8005d8e <HAL_SD_ReadBlocks+0x28a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a2c      	ldr	r2, [pc, #176]	; (8005e20 <HAL_SD_ReadBlocks+0x31c>)
 8005d6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d74:	f043 0208 	orr.w	r2, r3, #8
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e044      	b.n	8005e18 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d012      	beq.n	8005dc2 <HAL_SD_ReadBlocks+0x2be>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a1f      	ldr	r2, [pc, #124]	; (8005e20 <HAL_SD_ReadBlocks+0x31c>)
 8005da2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	f043 0202 	orr.w	r2, r3, #2
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e02a      	b.n	8005e18 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc8:	f003 0320 	and.w	r3, r3, #32
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d012      	beq.n	8005df6 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a12      	ldr	r2, [pc, #72]	; (8005e20 <HAL_SD_ReadBlocks+0x31c>)
 8005dd6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ddc:	f043 0220 	orr.w	r2, r3, #32
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e010      	b.n	8005e18 <HAL_SD_ReadBlocks+0x314>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a0a      	ldr	r2, [pc, #40]	; (8005e24 <HAL_SD_ReadBlocks+0x320>)
 8005dfc:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005e06:	2300      	movs	r3, #0
 8005e08:	e006      	b.n	8005e18 <HAL_SD_ReadBlocks+0x314>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
  }
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3748      	adds	r7, #72	; 0x48
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	1fe00fff 	.word	0x1fe00fff
 8005e24:	18000f3a 	.word	0x18000f3a

08005e28 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b092      	sub	sp, #72	; 0x48
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
 8005e34:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005e36:	f7fb fa15 	bl	8001264 <HAL_GetTick>
 8005e3a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d107      	bne.n	8005e5a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e174      	b.n	8006144 <HAL_SD_WriteBlocks+0x31c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	f040 8167 	bne.w	8006136 <HAL_SD_WriteBlocks+0x30e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005e6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	441a      	add	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d907      	bls.n	8005e8c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e80:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e15b      	b.n	8006144 <HAL_SD_WriteBlocks+0x31c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2203      	movs	r2, #3
 8005e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d002      	beq.n	8005eaa <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea6:	025b      	lsls	r3, r3, #9
 8005ea8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005eae:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	025b      	lsls	r3, r3, #9
 8005eb4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005eb6:	2390      	movs	r3, #144	; 0x90
 8005eb8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f107 0218 	add.w	r2, r7, #24
 8005ece:	4611      	mov	r1, r2
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f002 ff87 	bl	8008de4 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ee4:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d90a      	bls.n	8005f02 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f003 f82b 	bl	8008f54 <SDMMC_CmdWriteMultiBlock>
 8005efe:	6478      	str	r0, [r7, #68]	; 0x44
 8005f00:	e009      	b.n	8005f16 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2210      	movs	r2, #16
 8005f06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f002 fffd 	bl	8008f0e <SDMMC_CmdWriteSingleBlock>
 8005f14:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d012      	beq.n	8005f42 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a8a      	ldr	r2, [pc, #552]	; (800614c <HAL_SD_WriteBlocks+0x324>)
 8005f22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e100      	b.n	8006144 <HAL_SD_WriteBlocks+0x31c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005f46:	e065      	b.n	8006014 <HAL_SD_WriteBlocks+0x1ec>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d040      	beq.n	8005fd8 <HAL_SD_WriteBlocks+0x1b0>
 8005f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d03d      	beq.n	8005fd8 <HAL_SD_WriteBlocks+0x1b0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	643b      	str	r3, [r7, #64]	; 0x40
 8005f60:	e037      	b.n	8005fd2 <HAL_SD_WriteBlocks+0x1aa>
        {
          data = (uint32_t)(*tempbuff);
 8005f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f70:	3b01      	subs	r3, #1
 8005f72:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	021a      	lsls	r2, r3, #8
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f82:	3301      	adds	r3, #1
 8005f84:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	041a      	lsls	r2, r3, #16
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	061a      	lsls	r2, r3, #24
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f107 0214 	add.w	r2, r7, #20
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f002 fe91 	bl	8008cee <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fce:	3301      	adds	r3, #1
 8005fd0:	643b      	str	r3, [r7, #64]	; 0x40
 8005fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fd4:	2b07      	cmp	r3, #7
 8005fd6:	d9c4      	bls.n	8005f62 <HAL_SD_WriteBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005fd8:	f7fb f944 	bl	8001264 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d902      	bls.n	8005fee <HAL_SD_WriteBlocks+0x1c6>
 8005fe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d112      	bne.n	8006014 <HAL_SD_WriteBlocks+0x1ec>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a56      	ldr	r2, [pc, #344]	; (800614c <HAL_SD_WriteBlocks+0x324>)
 8005ff4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e097      	b.n	8006144 <HAL_SD_WriteBlocks+0x31c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800601a:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800601e:	2b00      	cmp	r3, #0
 8006020:	d092      	beq.n	8005f48 <HAL_SD_WriteBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68da      	ldr	r2, [r3, #12]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006030:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800603c:	2b00      	cmp	r3, #0
 800603e:	d022      	beq.n	8006086 <HAL_SD_WriteBlocks+0x25e>
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d91f      	bls.n	8006086 <HAL_SD_WriteBlocks+0x25e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800604a:	2b03      	cmp	r3, #3
 800604c:	d01b      	beq.n	8006086 <HAL_SD_WriteBlocks+0x25e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4618      	mov	r0, r3
 8006054:	f002 ffa2 	bl	8008f9c <SDMMC_CmdStopTransfer>
 8006058:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800605a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800605c:	2b00      	cmp	r3, #0
 800605e:	d012      	beq.n	8006086 <HAL_SD_WriteBlocks+0x25e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a39      	ldr	r2, [pc, #228]	; (800614c <HAL_SD_WriteBlocks+0x324>)
 8006066:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800606c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800606e:	431a      	orrs	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e05e      	b.n	8006144 <HAL_SD_WriteBlocks+0x31c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800608c:	f003 0308 	and.w	r3, r3, #8
 8006090:	2b00      	cmp	r3, #0
 8006092:	d012      	beq.n	80060ba <HAL_SD_WriteBlocks+0x292>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a2c      	ldr	r2, [pc, #176]	; (800614c <HAL_SD_WriteBlocks+0x324>)
 800609a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a0:	f043 0208 	orr.w	r2, r3, #8
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e044      	b.n	8006144 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c0:	f003 0302 	and.w	r3, r3, #2
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d012      	beq.n	80060ee <HAL_SD_WriteBlocks+0x2c6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a1f      	ldr	r2, [pc, #124]	; (800614c <HAL_SD_WriteBlocks+0x324>)
 80060ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d4:	f043 0202 	orr.w	r2, r3, #2
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e02a      	b.n	8006144 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f4:	f003 0310 	and.w	r3, r3, #16
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d012      	beq.n	8006122 <HAL_SD_WriteBlocks+0x2fa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a12      	ldr	r2, [pc, #72]	; (800614c <HAL_SD_WriteBlocks+0x324>)
 8006102:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006108:	f043 0210 	orr.w	r2, r3, #16
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e010      	b.n	8006144 <HAL_SD_WriteBlocks+0x31c>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a0a      	ldr	r2, [pc, #40]	; (8006150 <HAL_SD_WriteBlocks+0x328>)
 8006128:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	e006      	b.n	8006144 <HAL_SD_WriteBlocks+0x31c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
  }
}
 8006144:	4618      	mov	r0, r3
 8006146:	3748      	adds	r7, #72	; 0x48
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	1fe00fff 	.word	0x1fe00fff
 8006150:	18000f3a 	.word	0x18000f3a

08006154 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006162:	0f9b      	lsrs	r3, r3, #30
 8006164:	b2da      	uxtb	r2, r3
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800616e:	0e9b      	lsrs	r3, r3, #26
 8006170:	b2db      	uxtb	r3, r3
 8006172:	f003 030f 	and.w	r3, r3, #15
 8006176:	b2da      	uxtb	r2, r3
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006180:	0e1b      	lsrs	r3, r3, #24
 8006182:	b2db      	uxtb	r3, r3
 8006184:	f003 0303 	and.w	r3, r3, #3
 8006188:	b2da      	uxtb	r2, r3
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006192:	0c1b      	lsrs	r3, r3, #16
 8006194:	b2da      	uxtb	r2, r3
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800619e:	0a1b      	lsrs	r3, r3, #8
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061b4:	0d1b      	lsrs	r3, r3, #20
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061c0:	0c1b      	lsrs	r3, r3, #16
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	f003 030f 	and.w	r3, r3, #15
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061d2:	0bdb      	lsrs	r3, r3, #15
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061e4:	0b9b      	lsrs	r3, r3, #14
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	b2da      	uxtb	r2, r3
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061f6:	0b5b      	lsrs	r3, r3, #13
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006208:	0b1b      	lsrs	r3, r3, #12
 800620a:	b2db      	uxtb	r3, r3
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	b2da      	uxtb	r2, r3
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2200      	movs	r2, #0
 800621a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006220:	2b00      	cmp	r3, #0
 8006222:	d163      	bne.n	80062ec <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006228:	009a      	lsls	r2, r3, #2
 800622a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800622e:	4013      	ands	r3, r2
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006234:	0f92      	lsrs	r2, r2, #30
 8006236:	431a      	orrs	r2, r3
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006240:	0edb      	lsrs	r3, r3, #27
 8006242:	b2db      	uxtb	r3, r3
 8006244:	f003 0307 	and.w	r3, r3, #7
 8006248:	b2da      	uxtb	r2, r3
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006252:	0e1b      	lsrs	r3, r3, #24
 8006254:	b2db      	uxtb	r3, r3
 8006256:	f003 0307 	and.w	r3, r3, #7
 800625a:	b2da      	uxtb	r2, r3
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006264:	0d5b      	lsrs	r3, r3, #21
 8006266:	b2db      	uxtb	r3, r3
 8006268:	f003 0307 	and.w	r3, r3, #7
 800626c:	b2da      	uxtb	r2, r3
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006276:	0c9b      	lsrs	r3, r3, #18
 8006278:	b2db      	uxtb	r3, r3
 800627a:	f003 0307 	and.w	r3, r3, #7
 800627e:	b2da      	uxtb	r2, r3
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006288:	0bdb      	lsrs	r3, r3, #15
 800628a:	b2db      	uxtb	r3, r3
 800628c:	f003 0307 	and.w	r3, r3, #7
 8006290:	b2da      	uxtb	r2, r3
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	1c5a      	adds	r2, r3, #1
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	7e1b      	ldrb	r3, [r3, #24]
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	f003 0307 	and.w	r3, r3, #7
 80062aa:	3302      	adds	r3, #2
 80062ac:	2201      	movs	r2, #1
 80062ae:	fa02 f303 	lsl.w	r3, r2, r3
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80062b6:	fb03 f202 	mul.w	r2, r3, r2
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	7a1b      	ldrb	r3, [r3, #8]
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	f003 030f 	and.w	r3, r3, #15
 80062c8:	2201      	movs	r2, #1
 80062ca:	409a      	lsls	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80062d8:	0a52      	lsrs	r2, r2, #9
 80062da:	fb03 f202 	mul.w	r2, r3, r2
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062e8:	659a      	str	r2, [r3, #88]	; 0x58
 80062ea:	e031      	b.n	8006350 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d11d      	bne.n	8006330 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062f8:	041b      	lsls	r3, r3, #16
 80062fa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006302:	0c1b      	lsrs	r3, r3, #16
 8006304:	431a      	orrs	r2, r3
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	3301      	adds	r3, #1
 8006310:	029a      	lsls	r2, r3, #10
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006324:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	659a      	str	r2, [r3, #88]	; 0x58
 800632e:	e00f      	b.n	8006350 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a58      	ldr	r2, [pc, #352]	; (8006498 <HAL_SD_GetCardCSD+0x344>)
 8006336:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e09d      	b.n	800648c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006354:	0b9b      	lsrs	r3, r3, #14
 8006356:	b2db      	uxtb	r3, r3
 8006358:	f003 0301 	and.w	r3, r3, #1
 800635c:	b2da      	uxtb	r2, r3
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006366:	09db      	lsrs	r3, r3, #7
 8006368:	b2db      	uxtb	r3, r3
 800636a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800636e:	b2da      	uxtb	r2, r3
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006378:	b2db      	uxtb	r3, r3
 800637a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800637e:	b2da      	uxtb	r2, r3
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006388:	0fdb      	lsrs	r3, r3, #31
 800638a:	b2da      	uxtb	r2, r3
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006394:	0f5b      	lsrs	r3, r3, #29
 8006396:	b2db      	uxtb	r3, r3
 8006398:	f003 0303 	and.w	r3, r3, #3
 800639c:	b2da      	uxtb	r2, r3
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063a6:	0e9b      	lsrs	r3, r3, #26
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	f003 0307 	and.w	r3, r3, #7
 80063ae:	b2da      	uxtb	r2, r3
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063b8:	0d9b      	lsrs	r3, r3, #22
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	f003 030f 	and.w	r3, r3, #15
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063ca:	0d5b      	lsrs	r3, r3, #21
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063e6:	0c1b      	lsrs	r3, r3, #16
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063fa:	0bdb      	lsrs	r3, r3, #15
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	b2da      	uxtb	r2, r3
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800640e:	0b9b      	lsrs	r3, r3, #14
 8006410:	b2db      	uxtb	r3, r3
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	b2da      	uxtb	r2, r3
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006422:	0b5b      	lsrs	r3, r3, #13
 8006424:	b2db      	uxtb	r3, r3
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	b2da      	uxtb	r2, r3
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006436:	0b1b      	lsrs	r3, r3, #12
 8006438:	b2db      	uxtb	r3, r3
 800643a:	f003 0301 	and.w	r3, r3, #1
 800643e:	b2da      	uxtb	r2, r3
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800644a:	0a9b      	lsrs	r3, r3, #10
 800644c:	b2db      	uxtb	r3, r3
 800644e:	f003 0303 	and.w	r3, r3, #3
 8006452:	b2da      	uxtb	r2, r3
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800645e:	0a1b      	lsrs	r3, r3, #8
 8006460:	b2db      	uxtb	r3, r3
 8006462:	f003 0303 	and.w	r3, r3, #3
 8006466:	b2da      	uxtb	r2, r3
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006472:	085b      	lsrs	r3, r3, #1
 8006474:	b2db      	uxtb	r3, r3
 8006476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800647a:	b2da      	uxtb	r2, r3
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	1fe00fff 	.word	0x1fe00fff

0800649c <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b094      	sub	sp, #80	; 0x50
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80064a6:	2300      	movs	r3, #0
 80064a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80064ac:	f107 0308 	add.w	r3, r7, #8
 80064b0:	4619      	mov	r1, r3
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fbd4 	bl	8006c60 <SD_SendSDStatus>
 80064b8:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80064ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d011      	beq.n	80064e4 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a4f      	ldr	r2, [pc, #316]	; (8006604 <HAL_SD_GetCardStatus+0x168>)
 80064c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ce:	431a      	orrs	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80064e2:	e070      	b.n	80065c6 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	099b      	lsrs	r3, r3, #6
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	f003 0303 	and.w	r3, r3, #3
 80064ee:	b2da      	uxtb	r2, r3
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	095b      	lsrs	r3, r3, #5
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	0a1b      	lsrs	r3, r3, #8
 8006508:	b29b      	uxth	r3, r3
 800650a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800650e:	b29a      	uxth	r2, r3
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	0e1b      	lsrs	r3, r3, #24
 8006514:	b29b      	uxth	r3, r3
 8006516:	4313      	orrs	r3, r2
 8006518:	b29a      	uxth	r2, r3
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	061a      	lsls	r2, r3, #24
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	021b      	lsls	r3, r3, #8
 8006526:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800652a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	0a1b      	lsrs	r3, r3, #8
 8006530:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006534:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	0e1b      	lsrs	r3, r3, #24
 800653a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	b2da      	uxtb	r2, r3
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	0a1b      	lsrs	r3, r3, #8
 800654c:	b2da      	uxtb	r2, r3
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	0d1b      	lsrs	r3, r3, #20
 8006556:	b2db      	uxtb	r3, r3
 8006558:	f003 030f 	and.w	r3, r3, #15
 800655c:	b2da      	uxtb	r2, r3
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	0c1b      	lsrs	r3, r3, #16
 8006566:	b29b      	uxth	r3, r3
 8006568:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800656c:	b29a      	uxth	r2, r3
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	b29b      	uxth	r3, r3
 8006572:	b2db      	uxtb	r3, r3
 8006574:	b29b      	uxth	r3, r3
 8006576:	4313      	orrs	r3, r2
 8006578:	b29a      	uxth	r2, r3
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	0a9b      	lsrs	r3, r3, #10
 8006582:	b2db      	uxtb	r3, r3
 8006584:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006588:	b2da      	uxtb	r2, r3
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	0a1b      	lsrs	r3, r3, #8
 8006592:	b2db      	uxtb	r3, r3
 8006594:	f003 0303 	and.w	r3, r3, #3
 8006598:	b2da      	uxtb	r2, r3
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	091b      	lsrs	r3, r3, #4
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	f003 030f 	and.w	r3, r3, #15
 80065a8:	b2da      	uxtb	r2, r3
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	f003 030f 	and.w	r3, r3, #15
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	0e1b      	lsrs	r3, r3, #24
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065ce:	4618      	mov	r0, r3
 80065d0:	f002 fc34 	bl	8008e3c <SDMMC_CmdBlockLength>
 80065d4:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80065d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00d      	beq.n	80065f8 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a08      	ldr	r2, [pc, #32]	; (8006604 <HAL_SD_GetCardStatus+0x168>)
 80065e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065e8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 80065f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3750      	adds	r7, #80	; 0x50
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	1fe00fff 	.word	0x1fe00fff

08006608 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006660:	b5b0      	push	{r4, r5, r7, lr}
 8006662:	b090      	sub	sp, #64	; 0x40
 8006664:	af04      	add	r7, sp, #16
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800666a:	2300      	movs	r3, #0
 800666c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2203      	movs	r2, #3
 8006674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800667c:	2b03      	cmp	r3, #3
 800667e:	d02e      	beq.n	80066de <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006686:	d106      	bne.n	8006696 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	639a      	str	r2, [r3, #56]	; 0x38
 8006694:	e029      	b.n	80066ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800669c:	d10a      	bne.n	80066b4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fbd6 	bl	8006e50 <SD_WideBus_Enable>
 80066a4:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ac:	431a      	orrs	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	639a      	str	r2, [r3, #56]	; 0x38
 80066b2:	e01a      	b.n	80066ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10a      	bne.n	80066d0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 fc13 	bl	8006ee6 <SD_WideBus_Disable>
 80066c0:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c8:	431a      	orrs	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	639a      	str	r2, [r3, #56]	; 0x38
 80066ce:	e00c      	b.n	80066ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	639a      	str	r2, [r3, #56]	; 0x38
 80066dc:	e005      	b.n	80066ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d007      	beq.n	8006702 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a60      	ldr	r2, [pc, #384]	; (8006878 <HAL_SD_ConfigWideBusOperation+0x218>)
 80066f8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006700:	e097      	b.n	8006832 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8006702:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006706:	f7fd feb9 	bl	800447c <HAL_RCCEx_GetPeriphCLKFreq>
 800670a:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800670c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670e:	2b00      	cmp	r3, #0
 8006710:	f000 8086 	beq.w	8006820 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	695a      	ldr	r2, [r3, #20]
 800672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006730:	4952      	ldr	r1, [pc, #328]	; (800687c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006732:	fba1 1303 	umull	r1, r3, r1, r3
 8006736:	0e1b      	lsrs	r3, r3, #24
 8006738:	429a      	cmp	r2, r3
 800673a:	d303      	bcc.n	8006744 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	61fb      	str	r3, [r7, #28]
 8006742:	e05a      	b.n	80067fa <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800674c:	d103      	bne.n	8006756 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	61fb      	str	r3, [r7, #28]
 8006754:	e051      	b.n	80067fa <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800675a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800675e:	d126      	bne.n	80067ae <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10e      	bne.n	8006786 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	4a45      	ldr	r2, [pc, #276]	; (8006880 <HAL_SD_ConfigWideBusOperation+0x220>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d906      	bls.n	800677e <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	4a42      	ldr	r2, [pc, #264]	; (800687c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006774:	fba2 2303 	umull	r2, r3, r2, r3
 8006778:	0e5b      	lsrs	r3, r3, #25
 800677a:	61fb      	str	r3, [r7, #28]
 800677c:	e03d      	b.n	80067fa <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	61fb      	str	r3, [r7, #28]
 8006784:	e039      	b.n	80067fa <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	005b      	lsls	r3, r3, #1
 800678c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800678e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006792:	4a3b      	ldr	r2, [pc, #236]	; (8006880 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d906      	bls.n	80067a6 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679a:	4a38      	ldr	r2, [pc, #224]	; (800687c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800679c:	fba2 2303 	umull	r2, r3, r2, r3
 80067a0:	0e5b      	lsrs	r3, r3, #25
 80067a2:	61fb      	str	r3, [r7, #28]
 80067a4:	e029      	b.n	80067fa <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	61fb      	str	r3, [r7, #28]
 80067ac:	e025      	b.n	80067fa <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10e      	bne.n	80067d4 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	4a32      	ldr	r2, [pc, #200]	; (8006884 <HAL_SD_ConfigWideBusOperation+0x224>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d906      	bls.n	80067cc <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	4a2e      	ldr	r2, [pc, #184]	; (800687c <HAL_SD_ConfigWideBusOperation+0x21c>)
 80067c2:	fba2 2303 	umull	r2, r3, r2, r3
 80067c6:	0e1b      	lsrs	r3, r3, #24
 80067c8:	61fb      	str	r3, [r7, #28]
 80067ca:	e016      	b.n	80067fa <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	695b      	ldr	r3, [r3, #20]
 80067d0:	61fb      	str	r3, [r7, #28]
 80067d2:	e012      	b.n	80067fa <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	005b      	lsls	r3, r3, #1
 80067da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e0:	4a28      	ldr	r2, [pc, #160]	; (8006884 <HAL_SD_ConfigWideBusOperation+0x224>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d906      	bls.n	80067f4 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	4a24      	ldr	r2, [pc, #144]	; (800687c <HAL_SD_ConfigWideBusOperation+0x21c>)
 80067ea:	fba2 2303 	umull	r2, r3, r2, r3
 80067ee:	0e1b      	lsrs	r3, r3, #24
 80067f0:	61fb      	str	r3, [r7, #28]
 80067f2:	e002      	b.n	80067fa <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681d      	ldr	r5, [r3, #0]
 8006804:	466c      	mov	r4, sp
 8006806:	f107 0318 	add.w	r3, r7, #24
 800680a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800680e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006812:	f107 030c 	add.w	r3, r7, #12
 8006816:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006818:	4628      	mov	r0, r5
 800681a:	f002 fa31 	bl	8008c80 <SDMMC_Init>
 800681e:	e008      	b.n	8006832 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006824:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f44f 7100 	mov.w	r1, #512	; 0x200
 800683a:	4618      	mov	r0, r3
 800683c:	f002 fafe 	bl	8008e3c <SDMMC_CmdBlockLength>
 8006840:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00c      	beq.n	8006862 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a0a      	ldr	r2, [pc, #40]	; (8006878 <HAL_SD_ConfigWideBusOperation+0x218>)
 800684e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006856:	431a      	orrs	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800686a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800686e:	4618      	mov	r0, r3
 8006870:	3730      	adds	r7, #48	; 0x30
 8006872:	46bd      	mov	sp, r7
 8006874:	bdb0      	pop	{r4, r5, r7, pc}
 8006876:	bf00      	nop
 8006878:	1fe00fff 	.word	0x1fe00fff
 800687c:	55e63b89 	.word	0x55e63b89
 8006880:	02faf080 	.word	0x02faf080
 8006884:	017d7840 	.word	0x017d7840

08006888 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006890:	2300      	movs	r3, #0
 8006892:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006894:	f107 030c 	add.w	r3, r7, #12
 8006898:	4619      	mov	r1, r3
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fab0 	bl	8006e00 <SD_SendStatus>
 80068a0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d005      	beq.n	80068b4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	431a      	orrs	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	0a5b      	lsrs	r3, r3, #9
 80068b8:	f003 030f 	and.w	r3, r3, #15
 80068bc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80068be:	693b      	ldr	r3, [r7, #16]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3718      	adds	r7, #24
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80068c8:	b5b0      	push	{r4, r5, r7, lr}
 80068ca:	b090      	sub	sp, #64	; 0x40
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80068d0:	2301      	movs	r3, #1
 80068d2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4618      	mov	r0, r3
 80068da:	f002 fa2b 	bl	8008d34 <SDMMC_GetPowerState>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d102      	bne.n	80068ea <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80068e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80068e8:	e0a9      	b.n	8006a3e <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ee:	2b03      	cmp	r3, #3
 80068f0:	d02e      	beq.n	8006950 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4618      	mov	r0, r3
 80068f8:	f002 fc70 	bl	80091dc <SDMMC_CmdSendCID>
 80068fc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80068fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006900:	2b00      	cmp	r3, #0
 8006902:	d001      	beq.n	8006908 <SD_InitCard+0x40>
    {
      return errorstate;
 8006904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006906:	e09a      	b.n	8006a3e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2100      	movs	r1, #0
 800690e:	4618      	mov	r0, r3
 8006910:	f002 fa55 	bl	8008dbe <SDMMC_GetResponse>
 8006914:	4602      	mov	r2, r0
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2104      	movs	r1, #4
 8006920:	4618      	mov	r0, r3
 8006922:	f002 fa4c 	bl	8008dbe <SDMMC_GetResponse>
 8006926:	4602      	mov	r2, r0
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2108      	movs	r1, #8
 8006932:	4618      	mov	r0, r3
 8006934:	f002 fa43 	bl	8008dbe <SDMMC_GetResponse>
 8006938:	4602      	mov	r2, r0
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	210c      	movs	r1, #12
 8006944:	4618      	mov	r0, r3
 8006946:	f002 fa3a 	bl	8008dbe <SDMMC_GetResponse>
 800694a:	4602      	mov	r2, r0
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006954:	2b03      	cmp	r3, #3
 8006956:	d00d      	beq.n	8006974 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f107 020e 	add.w	r2, r7, #14
 8006960:	4611      	mov	r1, r2
 8006962:	4618      	mov	r0, r3
 8006964:	f002 fc79 	bl	800925a <SDMMC_CmdSetRelAdd>
 8006968:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800696a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800696c:	2b00      	cmp	r3, #0
 800696e:	d001      	beq.n	8006974 <SD_InitCard+0xac>
    {
      return errorstate;
 8006970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006972:	e064      	b.n	8006a3e <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006978:	2b03      	cmp	r3, #3
 800697a:	d036      	beq.n	80069ea <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800697c:	89fb      	ldrh	r3, [r7, #14]
 800697e:	461a      	mov	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800698c:	041b      	lsls	r3, r3, #16
 800698e:	4619      	mov	r1, r3
 8006990:	4610      	mov	r0, r2
 8006992:	f002 fc42 	bl	800921a <SDMMC_CmdSendCSD>
 8006996:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800699a:	2b00      	cmp	r3, #0
 800699c:	d001      	beq.n	80069a2 <SD_InitCard+0xda>
    {
      return errorstate;
 800699e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a0:	e04d      	b.n	8006a3e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2100      	movs	r1, #0
 80069a8:	4618      	mov	r0, r3
 80069aa:	f002 fa08 	bl	8008dbe <SDMMC_GetResponse>
 80069ae:	4602      	mov	r2, r0
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2104      	movs	r1, #4
 80069ba:	4618      	mov	r0, r3
 80069bc:	f002 f9ff 	bl	8008dbe <SDMMC_GetResponse>
 80069c0:	4602      	mov	r2, r0
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2108      	movs	r1, #8
 80069cc:	4618      	mov	r0, r3
 80069ce:	f002 f9f6 	bl	8008dbe <SDMMC_GetResponse>
 80069d2:	4602      	mov	r2, r0
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	210c      	movs	r1, #12
 80069de:	4618      	mov	r0, r3
 80069e0:	f002 f9ed 	bl	8008dbe <SDMMC_GetResponse>
 80069e4:	4602      	mov	r2, r0
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2104      	movs	r1, #4
 80069f0:	4618      	mov	r0, r3
 80069f2:	f002 f9e4 	bl	8008dbe <SDMMC_GetResponse>
 80069f6:	4603      	mov	r3, r0
 80069f8:	0d1a      	lsrs	r2, r3, #20
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80069fe:	f107 0310 	add.w	r3, r7, #16
 8006a02:	4619      	mov	r1, r3
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f7ff fba5 	bl	8006154 <HAL_SD_GetCardCSD>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d002      	beq.n	8006a16 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006a14:	e013      	b.n	8006a3e <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6819      	ldr	r1, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a1e:	041b      	lsls	r3, r3, #16
 8006a20:	2200      	movs	r2, #0
 8006a22:	461c      	mov	r4, r3
 8006a24:	4615      	mov	r5, r2
 8006a26:	4622      	mov	r2, r4
 8006a28:	462b      	mov	r3, r5
 8006a2a:	4608      	mov	r0, r1
 8006a2c:	f002 faec 	bl	8009008 <SDMMC_CmdSelDesel>
 8006a30:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d001      	beq.n	8006a3c <SD_InitCard+0x174>
  {
    return errorstate;
 8006a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a3a:	e000      	b.n	8006a3e <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3740      	adds	r7, #64	; 0x40
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006a48 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b088      	sub	sp, #32
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a50:	2300      	movs	r3, #0
 8006a52:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8006a54:	2300      	movs	r3, #0
 8006a56:	61fb      	str	r3, [r7, #28]
 8006a58:	2300      	movs	r3, #0
 8006a5a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8006a5c:	f7fa fc02 	bl	8001264 <HAL_GetTick>
 8006a60:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f002 faf2 	bl	8009050 <SDMMC_CmdGoIdleState>
 8006a6c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <SD_PowerON+0x30>
  {
    return errorstate;
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	e0ed      	b.n	8006c54 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f002 fb05 	bl	800908c <SDMMC_CmdOperCond>
 8006a82:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00d      	beq.n	8006aa6 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4618      	mov	r0, r3
 8006a96:	f002 fadb 	bl	8009050 <SDMMC_CmdGoIdleState>
 8006a9a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d004      	beq.n	8006aac <SD_PowerON+0x64>
    {
      return errorstate;
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	e0d6      	b.n	8006c54 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d137      	bne.n	8006b24 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2100      	movs	r1, #0
 8006aba:	4618      	mov	r0, r3
 8006abc:	f002 fb06 	bl	80090cc <SDMMC_CmdAppCommand>
 8006ac0:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d02d      	beq.n	8006b24 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ac8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006acc:	e0c2      	b.n	8006c54 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2100      	movs	r1, #0
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f002 faf9 	bl	80090cc <SDMMC_CmdAppCommand>
 8006ada:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d001      	beq.n	8006ae6 <SD_PowerON+0x9e>
    {
      return errorstate;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	e0b6      	b.n	8006c54 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	495c      	ldr	r1, [pc, #368]	; (8006c5c <SD_PowerON+0x214>)
 8006aec:	4618      	mov	r0, r3
 8006aee:	f002 fb10 	bl	8009112 <SDMMC_CmdAppOperCommand>
 8006af2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d002      	beq.n	8006b00 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006afa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006afe:	e0a9      	b.n	8006c54 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2100      	movs	r1, #0
 8006b06:	4618      	mov	r0, r3
 8006b08:	f002 f959 	bl	8008dbe <SDMMC_GetResponse>
 8006b0c:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	0fdb      	lsrs	r3, r3, #31
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d101      	bne.n	8006b1a <SD_PowerON+0xd2>
 8006b16:	2301      	movs	r3, #1
 8006b18:	e000      	b.n	8006b1c <SD_PowerON+0xd4>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	61bb      	str	r3, [r7, #24]

    count++;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	3301      	adds	r3, #1
 8006b22:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d802      	bhi.n	8006b34 <SD_PowerON+0xec>
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d0cc      	beq.n	8006ace <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d902      	bls.n	8006b44 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006b3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b42:	e087      	b.n	8006c54 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d07e      	beq.n	8006c4c <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d17a      	bne.n	8006c52 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d075      	beq.n	8006c52 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b6c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f042 0208 	orr.w	r2, r2, #8
 8006b7c:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f002 fbd0 	bl	8009328 <SDMMC_CmdVoltageSwitch>
 8006b88:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00c      	beq.n	8006baa <SD_PowerON+0x162>
        {
          return errorstate;
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	e05f      	b.n	8006c54 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006b94:	f7fa fb66 	bl	8001264 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ba2:	d102      	bne.n	8006baa <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8006ba4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ba8:	e054      	b.n	8006c54 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006bb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bb8:	d1ec      	bne.n	8006b94 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006bc2:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bd2:	d002      	beq.n	8006bda <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8006bd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006bd8:	e03c      	b.n	8006c54 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8006bda:	2001      	movs	r0, #1
 8006bdc:	f000 fa9e 	bl	800711c <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0204 	orr.w	r2, r2, #4
 8006bee:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006bf0:	e00a      	b.n	8006c08 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006bf2:	f7fa fb37 	bl	8001264 <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c00:	d102      	bne.n	8006c08 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8006c02:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c06:	e025      	b.n	8006c54 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c16:	d1ec      	bne.n	8006bf2 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c20:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c30:	d102      	bne.n	8006c38 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006c32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c36:	e00d      	b.n	8006c54 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2213      	movs	r2, #19
 8006c3e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c48:	639a      	str	r2, [r3, #56]	; 0x38
 8006c4a:	e002      	b.n	8006c52 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3720      	adds	r7, #32
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	c1100000 	.word	0xc1100000

08006c60 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b08c      	sub	sp, #48	; 0x30
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006c6a:	f7fa fafb 	bl	8001264 <HAL_GetTick>
 8006c6e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2100      	movs	r1, #0
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f002 f89f 	bl	8008dbe <SDMMC_GetResponse>
 8006c80:	4603      	mov	r3, r0
 8006c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c8a:	d102      	bne.n	8006c92 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006c8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c90:	e0b0      	b.n	8006df4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2140      	movs	r1, #64	; 0x40
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f002 f8cf 	bl	8008e3c <SDMMC_CmdBlockLength>
 8006c9e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ca0:	6a3b      	ldr	r3, [r7, #32]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d005      	beq.n	8006cb2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	e0a0      	b.n	8006df4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cba:	041b      	lsls	r3, r3, #16
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	4610      	mov	r0, r2
 8006cc0:	f002 fa04 	bl	80090cc <SDMMC_CmdAppCommand>
 8006cc4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006cc6:	6a3b      	ldr	r3, [r7, #32]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d005      	beq.n	8006cd8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	e08d      	b.n	8006df4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006cd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cdc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8006cde:	2340      	movs	r3, #64	; 0x40
 8006ce0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006ce2:	2360      	movs	r3, #96	; 0x60
 8006ce4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006cea:	2300      	movs	r3, #0
 8006cec:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f107 0208 	add.w	r2, r7, #8
 8006cfa:	4611      	mov	r1, r2
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f002 f871 	bl	8008de4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f002 faec 	bl	80092e4 <SDMMC_CmdStatusRegister>
 8006d0c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d0e:	6a3b      	ldr	r3, [r7, #32]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d02b      	beq.n	8006d6c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006d1c:	6a3b      	ldr	r3, [r7, #32]
 8006d1e:	e069      	b.n	8006df4 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d013      	beq.n	8006d56 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8006d2e:	2300      	movs	r3, #0
 8006d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d32:	e00d      	b.n	8006d50 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f001 ffcb 	bl	8008cd4 <SDMMC_ReadFIFO>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d42:	601a      	str	r2, [r3, #0]
        pData++;
 8006d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d46:	3304      	adds	r3, #4
 8006d48:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8006d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d52:	2b07      	cmp	r3, #7
 8006d54:	d9ee      	bls.n	8006d34 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006d56:	f7fa fa85 	bl	8001264 <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d64:	d102      	bne.n	8006d6c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006d66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d6a:	e043      	b.n	8006df4 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d72:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d0d2      	beq.n	8006d20 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d80:	f003 0308 	and.w	r3, r3, #8
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d001      	beq.n	8006d8c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006d88:	2308      	movs	r3, #8
 8006d8a:	e033      	b.n	8006df4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d92:	f003 0302 	and.w	r3, r3, #2
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	e02a      	b.n	8006df4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006da4:	f003 0320 	and.w	r3, r3, #32
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d017      	beq.n	8006ddc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8006dac:	2320      	movs	r3, #32
 8006dae:	e021      	b.n	8006df4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4618      	mov	r0, r3
 8006db6:	f001 ff8d 	bl	8008cd4 <SDMMC_ReadFIFO>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dbe:	601a      	str	r2, [r3, #0]
    pData++;
 8006dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006dc6:	f7fa fa4d 	bl	8001264 <HAL_GetTick>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dd4:	d102      	bne.n	8006ddc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006dd6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006dda:	e00b      	b.n	8006df4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1e2      	bne.n	8006db0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a03      	ldr	r2, [pc, #12]	; (8006dfc <SD_SendSDStatus+0x19c>)
 8006df0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3730      	adds	r7, #48	; 0x30
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	18000f3a 	.word	0x18000f3a

08006e00 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d102      	bne.n	8006e16 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006e10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e14:	e018      	b.n	8006e48 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e1e:	041b      	lsls	r3, r3, #16
 8006e20:	4619      	mov	r1, r3
 8006e22:	4610      	mov	r0, r2
 8006e24:	f002 fa3b 	bl	800929e <SDMMC_CmdSendStatus>
 8006e28:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d001      	beq.n	8006e34 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	e009      	b.n	8006e48 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2100      	movs	r1, #0
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f001 ffbf 	bl	8008dbe <SDMMC_GetResponse>
 8006e40:	4602      	mov	r2, r0
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006e58:	2300      	movs	r3, #0
 8006e5a:	60fb      	str	r3, [r7, #12]
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2100      	movs	r1, #0
 8006e66:	4618      	mov	r0, r3
 8006e68:	f001 ffa9 	bl	8008dbe <SDMMC_GetResponse>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e76:	d102      	bne.n	8006e7e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006e78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e7c:	e02f      	b.n	8006ede <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006e7e:	f107 030c 	add.w	r3, r7, #12
 8006e82:	4619      	mov	r1, r3
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 f879 	bl	8006f7c <SD_FindSCR>
 8006e8a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	e023      	b.n	8006ede <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d01c      	beq.n	8006eda <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea8:	041b      	lsls	r3, r3, #16
 8006eaa:	4619      	mov	r1, r3
 8006eac:	4610      	mov	r0, r2
 8006eae:	f002 f90d 	bl	80090cc <SDMMC_CmdAppCommand>
 8006eb2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d001      	beq.n	8006ebe <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	e00f      	b.n	8006ede <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2102      	movs	r1, #2
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f002 f944 	bl	8009152 <SDMMC_CmdBusWidth>
 8006eca:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d001      	beq.n	8006ed6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	e003      	b.n	8006ede <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	e001      	b.n	8006ede <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006eda:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3718      	adds	r7, #24
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b086      	sub	sp, #24
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006eee:	2300      	movs	r3, #0
 8006ef0:	60fb      	str	r3, [r7, #12]
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2100      	movs	r1, #0
 8006efc:	4618      	mov	r0, r3
 8006efe:	f001 ff5e 	bl	8008dbe <SDMMC_GetResponse>
 8006f02:	4603      	mov	r3, r0
 8006f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f0c:	d102      	bne.n	8006f14 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006f0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f12:	e02f      	b.n	8006f74 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006f14:	f107 030c 	add.w	r3, r7, #12
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 f82e 	bl	8006f7c <SD_FindSCR>
 8006f20:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d001      	beq.n	8006f2c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	e023      	b.n	8006f74 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d01c      	beq.n	8006f70 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f3e:	041b      	lsls	r3, r3, #16
 8006f40:	4619      	mov	r1, r3
 8006f42:	4610      	mov	r0, r2
 8006f44:	f002 f8c2 	bl	80090cc <SDMMC_CmdAppCommand>
 8006f48:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d001      	beq.n	8006f54 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	e00f      	b.n	8006f74 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2100      	movs	r1, #0
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f002 f8f9 	bl	8009152 <SDMMC_CmdBusWidth>
 8006f60:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d001      	beq.n	8006f6c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	e003      	b.n	8006f74 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	e001      	b.n	8006f74 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f70:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3718      	adds	r7, #24
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b08e      	sub	sp, #56	; 0x38
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006f86:	f7fa f96d 	bl	8001264 <HAL_GetTick>
 8006f8a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006f90:	2300      	movs	r3, #0
 8006f92:	60bb      	str	r3, [r7, #8]
 8006f94:	2300      	movs	r3, #0
 8006f96:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2108      	movs	r1, #8
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f001 ff4a 	bl	8008e3c <SDMMC_CmdBlockLength>
 8006fa8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb2:	e0ad      	b.n	8007110 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fbc:	041b      	lsls	r3, r3, #16
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	4610      	mov	r0, r2
 8006fc2:	f002 f883 	bl	80090cc <SDMMC_CmdAppCommand>
 8006fc6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd0:	e09e      	b.n	8007110 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006fd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fd6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006fd8:	2308      	movs	r3, #8
 8006fda:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006fdc:	2330      	movs	r3, #48	; 0x30
 8006fde:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f107 0210 	add.w	r2, r7, #16
 8006ff4:	4611      	mov	r1, r2
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f001 fef4 	bl	8008de4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4618      	mov	r0, r3
 8007002:	f002 f8c9 	bl	8009198 <SDMMC_CmdSendSCR>
 8007006:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700a:	2b00      	cmp	r3, #0
 800700c:	d027      	beq.n	800705e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800700e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007010:	e07e      	b.n	8007110 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007018:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d113      	bne.n	8007048 <SD_FindSCR+0xcc>
 8007020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007022:	2b00      	cmp	r3, #0
 8007024:	d110      	bne.n	8007048 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4618      	mov	r0, r3
 800702c:	f001 fe52 	bl	8008cd4 <SDMMC_ReadFIFO>
 8007030:	4603      	mov	r3, r0
 8007032:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4618      	mov	r0, r3
 800703a:	f001 fe4b 	bl	8008cd4 <SDMMC_ReadFIFO>
 800703e:	4603      	mov	r3, r0
 8007040:	60fb      	str	r3, [r7, #12]
      index++;
 8007042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007044:	3301      	adds	r3, #1
 8007046:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007048:	f7fa f90c 	bl	8001264 <HAL_GetTick>
 800704c:	4602      	mov	r2, r0
 800704e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007056:	d102      	bne.n	800705e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007058:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800705c:	e058      	b.n	8007110 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007064:	f240 532a 	movw	r3, #1322	; 0x52a
 8007068:	4013      	ands	r3, r2
 800706a:	2b00      	cmp	r3, #0
 800706c:	d0d1      	beq.n	8007012 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007074:	f003 0308 	and.w	r3, r3, #8
 8007078:	2b00      	cmp	r3, #0
 800707a:	d005      	beq.n	8007088 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2208      	movs	r2, #8
 8007082:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007084:	2308      	movs	r3, #8
 8007086:	e043      	b.n	8007110 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800708e:	f003 0302 	and.w	r3, r3, #2
 8007092:	2b00      	cmp	r3, #0
 8007094:	d005      	beq.n	80070a2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2202      	movs	r2, #2
 800709c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800709e:	2302      	movs	r3, #2
 80070a0:	e036      	b.n	8007110 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a8:	f003 0320 	and.w	r3, r3, #32
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d005      	beq.n	80070bc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2220      	movs	r2, #32
 80070b6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80070b8:	2320      	movs	r3, #32
 80070ba:	e029      	b.n	8007110 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a15      	ldr	r2, [pc, #84]	; (8007118 <SD_FindSCR+0x19c>)
 80070c2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	061a      	lsls	r2, r3, #24
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	021b      	lsls	r3, r3, #8
 80070cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070d0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	0a1b      	lsrs	r3, r3, #8
 80070d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80070da:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	0e1b      	lsrs	r3, r3, #24
 80070e0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80070e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e4:	601a      	str	r2, [r3, #0]
    scr++;
 80070e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e8:	3304      	adds	r3, #4
 80070ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	061a      	lsls	r2, r3, #24
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	021b      	lsls	r3, r3, #8
 80070f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070f8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	0a1b      	lsrs	r3, r3, #8
 80070fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007102:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	0e1b      	lsrs	r3, r3, #24
 8007108:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800710a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3738      	adds	r7, #56	; 0x38
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	18000f3a 	.word	0x18000f3a

0800711c <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	4603      	mov	r3, r0
 8007124:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8007126:	bf00      	nop
 8007128:	370c      	adds	r7, #12
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr

08007132 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b084      	sub	sp, #16
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d101      	bne.n	8007144 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e095      	b.n	8007270 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007148:	2b00      	cmp	r3, #0
 800714a:	d108      	bne.n	800715e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007154:	d009      	beq.n	800716a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	61da      	str	r2, [r3, #28]
 800715c:	e005      	b.n	800716a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b00      	cmp	r3, #0
 800717a:	d106      	bne.n	800718a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f7f9 fe77 	bl	8000e78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2202      	movs	r2, #2
 800718e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071a0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80071aa:	d902      	bls.n	80071b2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80071ac:	2300      	movs	r3, #0
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	e002      	b.n	80071b8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80071b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071b6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80071c0:	d007      	beq.n	80071d2 <HAL_SPI_Init+0xa0>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80071ca:	d002      	beq.n	80071d2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80071e2:	431a      	orrs	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	f003 0302 	and.w	r3, r3, #2
 80071ec:	431a      	orrs	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	f003 0301 	and.w	r3, r3, #1
 80071f6:	431a      	orrs	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007200:	431a      	orrs	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800720a:	431a      	orrs	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a1b      	ldr	r3, [r3, #32]
 8007210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007214:	ea42 0103 	orr.w	r1, r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	430a      	orrs	r2, r1
 8007226:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	0c1b      	lsrs	r3, r3, #16
 800722e:	f003 0204 	and.w	r2, r3, #4
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007236:	f003 0310 	and.w	r3, r3, #16
 800723a:	431a      	orrs	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007240:	f003 0308 	and.w	r3, r3, #8
 8007244:	431a      	orrs	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800724e:	ea42 0103 	orr.w	r1, r2, r3
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	430a      	orrs	r2, r1
 800725e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d101      	bne.n	800728a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e049      	b.n	800731e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	d106      	bne.n	80072a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7f9 fe2c 	bl	8000efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2202      	movs	r2, #2
 80072a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	3304      	adds	r3, #4
 80072b4:	4619      	mov	r1, r3
 80072b6:	4610      	mov	r0, r2
 80072b8:	f000 fad2 	bl	8007860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
	...

08007328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007336:	b2db      	uxtb	r3, r3
 8007338:	2b01      	cmp	r3, #1
 800733a:	d001      	beq.n	8007340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e04f      	b.n	80073e0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2202      	movs	r2, #2
 8007344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68da      	ldr	r2, [r3, #12]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f042 0201 	orr.w	r2, r2, #1
 8007356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a23      	ldr	r2, [pc, #140]	; (80073ec <HAL_TIM_Base_Start_IT+0xc4>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d01d      	beq.n	800739e <HAL_TIM_Base_Start_IT+0x76>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800736a:	d018      	beq.n	800739e <HAL_TIM_Base_Start_IT+0x76>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a1f      	ldr	r2, [pc, #124]	; (80073f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d013      	beq.n	800739e <HAL_TIM_Base_Start_IT+0x76>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a1e      	ldr	r2, [pc, #120]	; (80073f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d00e      	beq.n	800739e <HAL_TIM_Base_Start_IT+0x76>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a1c      	ldr	r2, [pc, #112]	; (80073f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d009      	beq.n	800739e <HAL_TIM_Base_Start_IT+0x76>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a1b      	ldr	r2, [pc, #108]	; (80073fc <HAL_TIM_Base_Start_IT+0xd4>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d004      	beq.n	800739e <HAL_TIM_Base_Start_IT+0x76>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a19      	ldr	r2, [pc, #100]	; (8007400 <HAL_TIM_Base_Start_IT+0xd8>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d115      	bne.n	80073ca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	689a      	ldr	r2, [r3, #8]
 80073a4:	4b17      	ldr	r3, [pc, #92]	; (8007404 <HAL_TIM_Base_Start_IT+0xdc>)
 80073a6:	4013      	ands	r3, r2
 80073a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2b06      	cmp	r3, #6
 80073ae:	d015      	beq.n	80073dc <HAL_TIM_Base_Start_IT+0xb4>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073b6:	d011      	beq.n	80073dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f042 0201 	orr.w	r2, r2, #1
 80073c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073c8:	e008      	b.n	80073dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f042 0201 	orr.w	r2, r2, #1
 80073d8:	601a      	str	r2, [r3, #0]
 80073da:	e000      	b.n	80073de <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr
 80073ec:	40012c00 	.word	0x40012c00
 80073f0:	40000400 	.word	0x40000400
 80073f4:	40000800 	.word	0x40000800
 80073f8:	40000c00 	.word	0x40000c00
 80073fc:	40013400 	.word	0x40013400
 8007400:	40014000 	.word	0x40014000
 8007404:	00010007 	.word	0x00010007

08007408 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d101      	bne.n	800741a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e049      	b.n	80074ae <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d106      	bne.n	8007434 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f841 	bl	80074b6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2202      	movs	r2, #2
 8007438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	3304      	adds	r3, #4
 8007444:	4619      	mov	r1, r3
 8007446:	4610      	mov	r0, r2
 8007448:	f000 fa0a 	bl	8007860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3708      	adds	r7, #8
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b083      	sub	sp, #12
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80074be:	bf00      	nop
 80074c0:	370c      	adds	r7, #12
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b082      	sub	sp, #8
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	f003 0302 	and.w	r3, r3, #2
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d122      	bne.n	8007526 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	f003 0302 	and.w	r3, r3, #2
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d11b      	bne.n	8007526 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f06f 0202 	mvn.w	r2, #2
 80074f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	f003 0303 	and.w	r3, r3, #3
 8007508:	2b00      	cmp	r3, #0
 800750a:	d003      	beq.n	8007514 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f989 	bl	8007824 <HAL_TIM_IC_CaptureCallback>
 8007512:	e005      	b.n	8007520 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 f97b 	bl	8007810 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f98c 	bl	8007838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	f003 0304 	and.w	r3, r3, #4
 8007530:	2b04      	cmp	r3, #4
 8007532:	d122      	bne.n	800757a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	f003 0304 	and.w	r3, r3, #4
 800753e:	2b04      	cmp	r3, #4
 8007540:	d11b      	bne.n	800757a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f06f 0204 	mvn.w	r2, #4
 800754a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2202      	movs	r2, #2
 8007550:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	699b      	ldr	r3, [r3, #24]
 8007558:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800755c:	2b00      	cmp	r3, #0
 800755e:	d003      	beq.n	8007568 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f95f 	bl	8007824 <HAL_TIM_IC_CaptureCallback>
 8007566:	e005      	b.n	8007574 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f951 	bl	8007810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f962 	bl	8007838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	f003 0308 	and.w	r3, r3, #8
 8007584:	2b08      	cmp	r3, #8
 8007586:	d122      	bne.n	80075ce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	f003 0308 	and.w	r3, r3, #8
 8007592:	2b08      	cmp	r3, #8
 8007594:	d11b      	bne.n	80075ce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f06f 0208 	mvn.w	r2, #8
 800759e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2204      	movs	r2, #4
 80075a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	69db      	ldr	r3, [r3, #28]
 80075ac:	f003 0303 	and.w	r3, r3, #3
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d003      	beq.n	80075bc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f935 	bl	8007824 <HAL_TIM_IC_CaptureCallback>
 80075ba:	e005      	b.n	80075c8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 f927 	bl	8007810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f938 	bl	8007838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	f003 0310 	and.w	r3, r3, #16
 80075d8:	2b10      	cmp	r3, #16
 80075da:	d122      	bne.n	8007622 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	f003 0310 	and.w	r3, r3, #16
 80075e6:	2b10      	cmp	r3, #16
 80075e8:	d11b      	bne.n	8007622 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f06f 0210 	mvn.w	r2, #16
 80075f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2208      	movs	r2, #8
 80075f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	69db      	ldr	r3, [r3, #28]
 8007600:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007604:	2b00      	cmp	r3, #0
 8007606:	d003      	beq.n	8007610 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f90b 	bl	8007824 <HAL_TIM_IC_CaptureCallback>
 800760e:	e005      	b.n	800761c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 f8fd 	bl	8007810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f90e 	bl	8007838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	f003 0301 	and.w	r3, r3, #1
 800762c:	2b01      	cmp	r3, #1
 800762e:	d10e      	bne.n	800764e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	2b01      	cmp	r3, #1
 800763c:	d107      	bne.n	800764e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f06f 0201 	mvn.w	r2, #1
 8007646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 f8d7 	bl	80077fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007658:	2b80      	cmp	r3, #128	; 0x80
 800765a:	d10e      	bne.n	800767a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007666:	2b80      	cmp	r3, #128	; 0x80
 8007668:	d107      	bne.n	800767a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fceb 	bl	8008050 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007688:	d10e      	bne.n	80076a8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007694:	2b80      	cmp	r3, #128	; 0x80
 8007696:	d107      	bne.n	80076a8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80076a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fcde 	bl	8008064 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b2:	2b40      	cmp	r3, #64	; 0x40
 80076b4:	d10e      	bne.n	80076d4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c0:	2b40      	cmp	r3, #64	; 0x40
 80076c2:	d107      	bne.n	80076d4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f8bc 	bl	800784c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	f003 0320 	and.w	r3, r3, #32
 80076de:	2b20      	cmp	r3, #32
 80076e0:	d10e      	bne.n	8007700 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	f003 0320 	and.w	r3, r3, #32
 80076ec:	2b20      	cmp	r3, #32
 80076ee:	d107      	bne.n	8007700 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f06f 0220 	mvn.w	r2, #32
 80076f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 fc9e 	bl	800803c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007700:	bf00      	nop
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007714:	2300      	movs	r3, #0
 8007716:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800771e:	2b01      	cmp	r3, #1
 8007720:	d101      	bne.n	8007726 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007722:	2302      	movs	r3, #2
 8007724:	e066      	b.n	80077f4 <HAL_TIM_OC_ConfigChannel+0xec>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2b14      	cmp	r3, #20
 8007732:	d857      	bhi.n	80077e4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007734:	a201      	add	r2, pc, #4	; (adr r2, 800773c <HAL_TIM_OC_ConfigChannel+0x34>)
 8007736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773a:	bf00      	nop
 800773c:	08007791 	.word	0x08007791
 8007740:	080077e5 	.word	0x080077e5
 8007744:	080077e5 	.word	0x080077e5
 8007748:	080077e5 	.word	0x080077e5
 800774c:	0800779f 	.word	0x0800779f
 8007750:	080077e5 	.word	0x080077e5
 8007754:	080077e5 	.word	0x080077e5
 8007758:	080077e5 	.word	0x080077e5
 800775c:	080077ad 	.word	0x080077ad
 8007760:	080077e5 	.word	0x080077e5
 8007764:	080077e5 	.word	0x080077e5
 8007768:	080077e5 	.word	0x080077e5
 800776c:	080077bb 	.word	0x080077bb
 8007770:	080077e5 	.word	0x080077e5
 8007774:	080077e5 	.word	0x080077e5
 8007778:	080077e5 	.word	0x080077e5
 800777c:	080077c9 	.word	0x080077c9
 8007780:	080077e5 	.word	0x080077e5
 8007784:	080077e5 	.word	0x080077e5
 8007788:	080077e5 	.word	0x080077e5
 800778c:	080077d7 	.word	0x080077d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68b9      	ldr	r1, [r7, #8]
 8007796:	4618      	mov	r0, r3
 8007798:	f000 f8fc 	bl	8007994 <TIM_OC1_SetConfig>
      break;
 800779c:	e025      	b.n	80077ea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68b9      	ldr	r1, [r7, #8]
 80077a4:	4618      	mov	r0, r3
 80077a6:	f000 f985 	bl	8007ab4 <TIM_OC2_SetConfig>
      break;
 80077aa:	e01e      	b.n	80077ea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68b9      	ldr	r1, [r7, #8]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f000 fa08 	bl	8007bc8 <TIM_OC3_SetConfig>
      break;
 80077b8:	e017      	b.n	80077ea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68b9      	ldr	r1, [r7, #8]
 80077c0:	4618      	mov	r0, r3
 80077c2:	f000 fa89 	bl	8007cd8 <TIM_OC4_SetConfig>
      break;
 80077c6:	e010      	b.n	80077ea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68b9      	ldr	r1, [r7, #8]
 80077ce:	4618      	mov	r0, r3
 80077d0:	f000 faec 	bl	8007dac <TIM_OC5_SetConfig>
      break;
 80077d4:	e009      	b.n	80077ea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68b9      	ldr	r1, [r7, #8]
 80077dc:	4618      	mov	r0, r3
 80077de:	f000 fb49 	bl	8007e74 <TIM_OC6_SetConfig>
      break;
 80077e2:	e002      	b.n	80077ea <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	75fb      	strb	r3, [r7, #23]
      break;
 80077e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3718      	adds	r7, #24
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007804:	bf00      	nop
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007818:	bf00      	nop
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800782c:	bf00      	nop
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007840:	bf00      	nop
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a40      	ldr	r2, [pc, #256]	; (8007974 <TIM_Base_SetConfig+0x114>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d013      	beq.n	80078a0 <TIM_Base_SetConfig+0x40>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800787e:	d00f      	beq.n	80078a0 <TIM_Base_SetConfig+0x40>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a3d      	ldr	r2, [pc, #244]	; (8007978 <TIM_Base_SetConfig+0x118>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d00b      	beq.n	80078a0 <TIM_Base_SetConfig+0x40>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a3c      	ldr	r2, [pc, #240]	; (800797c <TIM_Base_SetConfig+0x11c>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d007      	beq.n	80078a0 <TIM_Base_SetConfig+0x40>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a3b      	ldr	r2, [pc, #236]	; (8007980 <TIM_Base_SetConfig+0x120>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d003      	beq.n	80078a0 <TIM_Base_SetConfig+0x40>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a3a      	ldr	r2, [pc, #232]	; (8007984 <TIM_Base_SetConfig+0x124>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d108      	bne.n	80078b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a2f      	ldr	r2, [pc, #188]	; (8007974 <TIM_Base_SetConfig+0x114>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d01f      	beq.n	80078fa <TIM_Base_SetConfig+0x9a>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078c0:	d01b      	beq.n	80078fa <TIM_Base_SetConfig+0x9a>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a2c      	ldr	r2, [pc, #176]	; (8007978 <TIM_Base_SetConfig+0x118>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d017      	beq.n	80078fa <TIM_Base_SetConfig+0x9a>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a2b      	ldr	r2, [pc, #172]	; (800797c <TIM_Base_SetConfig+0x11c>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d013      	beq.n	80078fa <TIM_Base_SetConfig+0x9a>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a2a      	ldr	r2, [pc, #168]	; (8007980 <TIM_Base_SetConfig+0x120>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d00f      	beq.n	80078fa <TIM_Base_SetConfig+0x9a>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a29      	ldr	r2, [pc, #164]	; (8007984 <TIM_Base_SetConfig+0x124>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d00b      	beq.n	80078fa <TIM_Base_SetConfig+0x9a>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a28      	ldr	r2, [pc, #160]	; (8007988 <TIM_Base_SetConfig+0x128>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d007      	beq.n	80078fa <TIM_Base_SetConfig+0x9a>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a27      	ldr	r2, [pc, #156]	; (800798c <TIM_Base_SetConfig+0x12c>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d003      	beq.n	80078fa <TIM_Base_SetConfig+0x9a>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a26      	ldr	r2, [pc, #152]	; (8007990 <TIM_Base_SetConfig+0x130>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d108      	bne.n	800790c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	4313      	orrs	r3, r2
 800790a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	4313      	orrs	r3, r2
 8007918:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	689a      	ldr	r2, [r3, #8]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a10      	ldr	r2, [pc, #64]	; (8007974 <TIM_Base_SetConfig+0x114>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d00f      	beq.n	8007958 <TIM_Base_SetConfig+0xf8>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a12      	ldr	r2, [pc, #72]	; (8007984 <TIM_Base_SetConfig+0x124>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d00b      	beq.n	8007958 <TIM_Base_SetConfig+0xf8>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a11      	ldr	r2, [pc, #68]	; (8007988 <TIM_Base_SetConfig+0x128>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d007      	beq.n	8007958 <TIM_Base_SetConfig+0xf8>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a10      	ldr	r2, [pc, #64]	; (800798c <TIM_Base_SetConfig+0x12c>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d003      	beq.n	8007958 <TIM_Base_SetConfig+0xf8>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a0f      	ldr	r2, [pc, #60]	; (8007990 <TIM_Base_SetConfig+0x130>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d103      	bne.n	8007960 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	691a      	ldr	r2, [r3, #16]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	615a      	str	r2, [r3, #20]
}
 8007966:	bf00      	nop
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	40012c00 	.word	0x40012c00
 8007978:	40000400 	.word	0x40000400
 800797c:	40000800 	.word	0x40000800
 8007980:	40000c00 	.word	0x40000c00
 8007984:	40013400 	.word	0x40013400
 8007988:	40014000 	.word	0x40014000
 800798c:	40014400 	.word	0x40014400
 8007990:	40014800 	.word	0x40014800

08007994 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007994:	b480      	push	{r7}
 8007996:	b087      	sub	sp, #28
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a1b      	ldr	r3, [r3, #32]
 80079a2:	f023 0201 	bic.w	r2, r3, #1
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f023 0303 	bic.w	r3, r3, #3
 80079ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f023 0302 	bic.w	r3, r3, #2
 80079e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a2c      	ldr	r2, [pc, #176]	; (8007aa0 <TIM_OC1_SetConfig+0x10c>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d00f      	beq.n	8007a14 <TIM_OC1_SetConfig+0x80>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4a2b      	ldr	r2, [pc, #172]	; (8007aa4 <TIM_OC1_SetConfig+0x110>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d00b      	beq.n	8007a14 <TIM_OC1_SetConfig+0x80>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a2a      	ldr	r2, [pc, #168]	; (8007aa8 <TIM_OC1_SetConfig+0x114>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d007      	beq.n	8007a14 <TIM_OC1_SetConfig+0x80>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a29      	ldr	r2, [pc, #164]	; (8007aac <TIM_OC1_SetConfig+0x118>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d003      	beq.n	8007a14 <TIM_OC1_SetConfig+0x80>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a28      	ldr	r2, [pc, #160]	; (8007ab0 <TIM_OC1_SetConfig+0x11c>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d10c      	bne.n	8007a2e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	f023 0308 	bic.w	r3, r3, #8
 8007a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	697a      	ldr	r2, [r7, #20]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f023 0304 	bic.w	r3, r3, #4
 8007a2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a1b      	ldr	r2, [pc, #108]	; (8007aa0 <TIM_OC1_SetConfig+0x10c>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d00f      	beq.n	8007a56 <TIM_OC1_SetConfig+0xc2>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a1a      	ldr	r2, [pc, #104]	; (8007aa4 <TIM_OC1_SetConfig+0x110>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d00b      	beq.n	8007a56 <TIM_OC1_SetConfig+0xc2>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a19      	ldr	r2, [pc, #100]	; (8007aa8 <TIM_OC1_SetConfig+0x114>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d007      	beq.n	8007a56 <TIM_OC1_SetConfig+0xc2>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a18      	ldr	r2, [pc, #96]	; (8007aac <TIM_OC1_SetConfig+0x118>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d003      	beq.n	8007a56 <TIM_OC1_SetConfig+0xc2>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a17      	ldr	r2, [pc, #92]	; (8007ab0 <TIM_OC1_SetConfig+0x11c>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d111      	bne.n	8007a7a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	693a      	ldr	r2, [r7, #16]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	699b      	ldr	r3, [r3, #24]
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	693a      	ldr	r2, [r7, #16]
 8007a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	685a      	ldr	r2, [r3, #4]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	697a      	ldr	r2, [r7, #20]
 8007a92:	621a      	str	r2, [r3, #32]
}
 8007a94:	bf00      	nop
 8007a96:	371c      	adds	r7, #28
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr
 8007aa0:	40012c00 	.word	0x40012c00
 8007aa4:	40013400 	.word	0x40013400
 8007aa8:	40014000 	.word	0x40014000
 8007aac:	40014400 	.word	0x40014400
 8007ab0:	40014800 	.word	0x40014800

08007ab4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b087      	sub	sp, #28
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	f023 0210 	bic.w	r2, r3, #16
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a1b      	ldr	r3, [r3, #32]
 8007ace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	021b      	lsls	r3, r3, #8
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	f023 0320 	bic.w	r3, r3, #32
 8007b02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	011b      	lsls	r3, r3, #4
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a28      	ldr	r2, [pc, #160]	; (8007bb4 <TIM_OC2_SetConfig+0x100>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d003      	beq.n	8007b20 <TIM_OC2_SetConfig+0x6c>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a27      	ldr	r2, [pc, #156]	; (8007bb8 <TIM_OC2_SetConfig+0x104>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d10d      	bne.n	8007b3c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	011b      	lsls	r3, r3, #4
 8007b2e:	697a      	ldr	r2, [r7, #20]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a1d      	ldr	r2, [pc, #116]	; (8007bb4 <TIM_OC2_SetConfig+0x100>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d00f      	beq.n	8007b64 <TIM_OC2_SetConfig+0xb0>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a1c      	ldr	r2, [pc, #112]	; (8007bb8 <TIM_OC2_SetConfig+0x104>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d00b      	beq.n	8007b64 <TIM_OC2_SetConfig+0xb0>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a1b      	ldr	r2, [pc, #108]	; (8007bbc <TIM_OC2_SetConfig+0x108>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d007      	beq.n	8007b64 <TIM_OC2_SetConfig+0xb0>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a1a      	ldr	r2, [pc, #104]	; (8007bc0 <TIM_OC2_SetConfig+0x10c>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d003      	beq.n	8007b64 <TIM_OC2_SetConfig+0xb0>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a19      	ldr	r2, [pc, #100]	; (8007bc4 <TIM_OC2_SetConfig+0x110>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d113      	bne.n	8007b8c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	695b      	ldr	r3, [r3, #20]
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	693a      	ldr	r2, [r7, #16]
 8007b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	685a      	ldr	r2, [r3, #4]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	621a      	str	r2, [r3, #32]
}
 8007ba6:	bf00      	nop
 8007ba8:	371c      	adds	r7, #28
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	40012c00 	.word	0x40012c00
 8007bb8:	40013400 	.word	0x40013400
 8007bbc:	40014000 	.word	0x40014000
 8007bc0:	40014400 	.word	0x40014400
 8007bc4:	40014800 	.word	0x40014800

08007bc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b087      	sub	sp, #28
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a1b      	ldr	r3, [r3, #32]
 8007bd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	69db      	ldr	r3, [r3, #28]
 8007bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f023 0303 	bic.w	r3, r3, #3
 8007c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	021b      	lsls	r3, r3, #8
 8007c1c:	697a      	ldr	r2, [r7, #20]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a27      	ldr	r2, [pc, #156]	; (8007cc4 <TIM_OC3_SetConfig+0xfc>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d003      	beq.n	8007c32 <TIM_OC3_SetConfig+0x6a>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a26      	ldr	r2, [pc, #152]	; (8007cc8 <TIM_OC3_SetConfig+0x100>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d10d      	bne.n	8007c4e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	021b      	lsls	r3, r3, #8
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a1c      	ldr	r2, [pc, #112]	; (8007cc4 <TIM_OC3_SetConfig+0xfc>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d00f      	beq.n	8007c76 <TIM_OC3_SetConfig+0xae>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a1b      	ldr	r2, [pc, #108]	; (8007cc8 <TIM_OC3_SetConfig+0x100>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d00b      	beq.n	8007c76 <TIM_OC3_SetConfig+0xae>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a1a      	ldr	r2, [pc, #104]	; (8007ccc <TIM_OC3_SetConfig+0x104>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d007      	beq.n	8007c76 <TIM_OC3_SetConfig+0xae>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a19      	ldr	r2, [pc, #100]	; (8007cd0 <TIM_OC3_SetConfig+0x108>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d003      	beq.n	8007c76 <TIM_OC3_SetConfig+0xae>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a18      	ldr	r2, [pc, #96]	; (8007cd4 <TIM_OC3_SetConfig+0x10c>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d113      	bne.n	8007c9e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	011b      	lsls	r3, r3, #4
 8007c8c:	693a      	ldr	r2, [r7, #16]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	011b      	lsls	r3, r3, #4
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	685a      	ldr	r2, [r3, #4]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	621a      	str	r2, [r3, #32]
}
 8007cb8:	bf00      	nop
 8007cba:	371c      	adds	r7, #28
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr
 8007cc4:	40012c00 	.word	0x40012c00
 8007cc8:	40013400 	.word	0x40013400
 8007ccc:	40014000 	.word	0x40014000
 8007cd0:	40014400 	.word	0x40014400
 8007cd4:	40014800 	.word	0x40014800

08007cd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b087      	sub	sp, #28
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a1b      	ldr	r3, [r3, #32]
 8007cf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	69db      	ldr	r3, [r3, #28]
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	021b      	lsls	r3, r3, #8
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	031b      	lsls	r3, r3, #12
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a18      	ldr	r2, [pc, #96]	; (8007d98 <TIM_OC4_SetConfig+0xc0>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d00f      	beq.n	8007d5c <TIM_OC4_SetConfig+0x84>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a17      	ldr	r2, [pc, #92]	; (8007d9c <TIM_OC4_SetConfig+0xc4>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d00b      	beq.n	8007d5c <TIM_OC4_SetConfig+0x84>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a16      	ldr	r2, [pc, #88]	; (8007da0 <TIM_OC4_SetConfig+0xc8>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d007      	beq.n	8007d5c <TIM_OC4_SetConfig+0x84>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a15      	ldr	r2, [pc, #84]	; (8007da4 <TIM_OC4_SetConfig+0xcc>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d003      	beq.n	8007d5c <TIM_OC4_SetConfig+0x84>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a14      	ldr	r2, [pc, #80]	; (8007da8 <TIM_OC4_SetConfig+0xd0>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d109      	bne.n	8007d70 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	695b      	ldr	r3, [r3, #20]
 8007d68:	019b      	lsls	r3, r3, #6
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	621a      	str	r2, [r3, #32]
}
 8007d8a:	bf00      	nop
 8007d8c:	371c      	adds	r7, #28
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	40012c00 	.word	0x40012c00
 8007d9c:	40013400 	.word	0x40013400
 8007da0:	40014000 	.word	0x40014000
 8007da4:	40014400 	.word	0x40014400
 8007da8:	40014800 	.word	0x40014800

08007dac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b087      	sub	sp, #28
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007df0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	041b      	lsls	r3, r3, #16
 8007df8:	693a      	ldr	r2, [r7, #16]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a17      	ldr	r2, [pc, #92]	; (8007e60 <TIM_OC5_SetConfig+0xb4>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d00f      	beq.n	8007e26 <TIM_OC5_SetConfig+0x7a>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a16      	ldr	r2, [pc, #88]	; (8007e64 <TIM_OC5_SetConfig+0xb8>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d00b      	beq.n	8007e26 <TIM_OC5_SetConfig+0x7a>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a15      	ldr	r2, [pc, #84]	; (8007e68 <TIM_OC5_SetConfig+0xbc>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d007      	beq.n	8007e26 <TIM_OC5_SetConfig+0x7a>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a14      	ldr	r2, [pc, #80]	; (8007e6c <TIM_OC5_SetConfig+0xc0>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d003      	beq.n	8007e26 <TIM_OC5_SetConfig+0x7a>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a13      	ldr	r2, [pc, #76]	; (8007e70 <TIM_OC5_SetConfig+0xc4>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d109      	bne.n	8007e3a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	021b      	lsls	r3, r3, #8
 8007e34:	697a      	ldr	r2, [r7, #20]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	697a      	ldr	r2, [r7, #20]
 8007e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	685a      	ldr	r2, [r3, #4]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	693a      	ldr	r2, [r7, #16]
 8007e52:	621a      	str	r2, [r3, #32]
}
 8007e54:	bf00      	nop
 8007e56:	371c      	adds	r7, #28
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr
 8007e60:	40012c00 	.word	0x40012c00
 8007e64:	40013400 	.word	0x40013400
 8007e68:	40014000 	.word	0x40014000
 8007e6c:	40014400 	.word	0x40014400
 8007e70:	40014800 	.word	0x40014800

08007e74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b087      	sub	sp, #28
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a1b      	ldr	r3, [r3, #32]
 8007e82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
 8007e8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	021b      	lsls	r3, r3, #8
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007eba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	051b      	lsls	r3, r3, #20
 8007ec2:	693a      	ldr	r2, [r7, #16]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4a18      	ldr	r2, [pc, #96]	; (8007f2c <TIM_OC6_SetConfig+0xb8>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d00f      	beq.n	8007ef0 <TIM_OC6_SetConfig+0x7c>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a17      	ldr	r2, [pc, #92]	; (8007f30 <TIM_OC6_SetConfig+0xbc>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d00b      	beq.n	8007ef0 <TIM_OC6_SetConfig+0x7c>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a16      	ldr	r2, [pc, #88]	; (8007f34 <TIM_OC6_SetConfig+0xc0>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d007      	beq.n	8007ef0 <TIM_OC6_SetConfig+0x7c>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a15      	ldr	r2, [pc, #84]	; (8007f38 <TIM_OC6_SetConfig+0xc4>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d003      	beq.n	8007ef0 <TIM_OC6_SetConfig+0x7c>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a14      	ldr	r2, [pc, #80]	; (8007f3c <TIM_OC6_SetConfig+0xc8>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d109      	bne.n	8007f04 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	695b      	ldr	r3, [r3, #20]
 8007efc:	029b      	lsls	r3, r3, #10
 8007efe:	697a      	ldr	r2, [r7, #20]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	697a      	ldr	r2, [r7, #20]
 8007f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	685a      	ldr	r2, [r3, #4]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	693a      	ldr	r2, [r7, #16]
 8007f1c:	621a      	str	r2, [r3, #32]
}
 8007f1e:	bf00      	nop
 8007f20:	371c      	adds	r7, #28
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	40012c00 	.word	0x40012c00
 8007f30:	40013400 	.word	0x40013400
 8007f34:	40014000 	.word	0x40014000
 8007f38:	40014400 	.word	0x40014400
 8007f3c:	40014800 	.word	0x40014800

08007f40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d101      	bne.n	8007f5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007f58:	2302      	movs	r3, #2
 8007f5a:	e065      	b.n	8008028 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	695b      	ldr	r3, [r3, #20]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	699b      	ldr	r3, [r3, #24]
 8007fd0:	041b      	lsls	r3, r3, #16
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a16      	ldr	r2, [pc, #88]	; (8008034 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d004      	beq.n	8007fea <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a14      	ldr	r2, [pc, #80]	; (8008038 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d115      	bne.n	8008016 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff4:	051b      	lsls	r3, r3, #20
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	69db      	ldr	r3, [r3, #28]
 8008004:	4313      	orrs	r3, r2
 8008006:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	6a1b      	ldr	r3, [r3, #32]
 8008012:	4313      	orrs	r3, r2
 8008014:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3714      	adds	r7, #20
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr
 8008034:	40012c00 	.word	0x40012c00
 8008038:	40013400 	.word	0x40013400

0800803c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008044:	bf00      	nop
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d101      	bne.n	800808a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e042      	b.n	8008110 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008090:	2b00      	cmp	r3, #0
 8008092:	d106      	bne.n	80080a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f7f8 ff4d 	bl	8000f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2224      	movs	r2, #36	; 0x24
 80080a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f022 0201 	bic.w	r2, r2, #1
 80080b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f82c 	bl	8008118 <UART_SetConfig>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d101      	bne.n	80080ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e022      	b.n	8008110 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d002      	beq.n	80080d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 fb1c 	bl	8008710 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	685a      	ldr	r2, [r3, #4]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	689a      	ldr	r2, [r3, #8]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f042 0201 	orr.w	r2, r2, #1
 8008106:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fba3 	bl	8008854 <UART_CheckIdleState>
 800810e:	4603      	mov	r3, r0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800811c:	b08c      	sub	sp, #48	; 0x30
 800811e:	af00      	add	r7, sp, #0
 8008120:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008122:	2300      	movs	r3, #0
 8008124:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	689a      	ldr	r2, [r3, #8]
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	431a      	orrs	r2, r3
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	431a      	orrs	r2, r3
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	69db      	ldr	r3, [r3, #28]
 800813c:	4313      	orrs	r3, r2
 800813e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	4baa      	ldr	r3, [pc, #680]	; (80083f0 <UART_SetConfig+0x2d8>)
 8008148:	4013      	ands	r3, r2
 800814a:	697a      	ldr	r2, [r7, #20]
 800814c:	6812      	ldr	r2, [r2, #0]
 800814e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008150:	430b      	orrs	r3, r1
 8008152:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	68da      	ldr	r2, [r3, #12]
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	430a      	orrs	r2, r1
 8008168:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a9f      	ldr	r2, [pc, #636]	; (80083f4 <UART_SetConfig+0x2dc>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d004      	beq.n	8008184 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	6a1b      	ldr	r3, [r3, #32]
 800817e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008180:	4313      	orrs	r3, r2
 8008182:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800818e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008192:	697a      	ldr	r2, [r7, #20]
 8008194:	6812      	ldr	r2, [r2, #0]
 8008196:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008198:	430b      	orrs	r3, r1
 800819a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a2:	f023 010f 	bic.w	r1, r3, #15
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	430a      	orrs	r2, r1
 80081b0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a90      	ldr	r2, [pc, #576]	; (80083f8 <UART_SetConfig+0x2e0>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d125      	bne.n	8008208 <UART_SetConfig+0xf0>
 80081bc:	4b8f      	ldr	r3, [pc, #572]	; (80083fc <UART_SetConfig+0x2e4>)
 80081be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081c2:	f003 0303 	and.w	r3, r3, #3
 80081c6:	2b03      	cmp	r3, #3
 80081c8:	d81a      	bhi.n	8008200 <UART_SetConfig+0xe8>
 80081ca:	a201      	add	r2, pc, #4	; (adr r2, 80081d0 <UART_SetConfig+0xb8>)
 80081cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d0:	080081e1 	.word	0x080081e1
 80081d4:	080081f1 	.word	0x080081f1
 80081d8:	080081e9 	.word	0x080081e9
 80081dc:	080081f9 	.word	0x080081f9
 80081e0:	2301      	movs	r3, #1
 80081e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081e6:	e116      	b.n	8008416 <UART_SetConfig+0x2fe>
 80081e8:	2302      	movs	r3, #2
 80081ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ee:	e112      	b.n	8008416 <UART_SetConfig+0x2fe>
 80081f0:	2304      	movs	r3, #4
 80081f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081f6:	e10e      	b.n	8008416 <UART_SetConfig+0x2fe>
 80081f8:	2308      	movs	r3, #8
 80081fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081fe:	e10a      	b.n	8008416 <UART_SetConfig+0x2fe>
 8008200:	2310      	movs	r3, #16
 8008202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008206:	e106      	b.n	8008416 <UART_SetConfig+0x2fe>
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a7c      	ldr	r2, [pc, #496]	; (8008400 <UART_SetConfig+0x2e8>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d138      	bne.n	8008284 <UART_SetConfig+0x16c>
 8008212:	4b7a      	ldr	r3, [pc, #488]	; (80083fc <UART_SetConfig+0x2e4>)
 8008214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008218:	f003 030c 	and.w	r3, r3, #12
 800821c:	2b0c      	cmp	r3, #12
 800821e:	d82d      	bhi.n	800827c <UART_SetConfig+0x164>
 8008220:	a201      	add	r2, pc, #4	; (adr r2, 8008228 <UART_SetConfig+0x110>)
 8008222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008226:	bf00      	nop
 8008228:	0800825d 	.word	0x0800825d
 800822c:	0800827d 	.word	0x0800827d
 8008230:	0800827d 	.word	0x0800827d
 8008234:	0800827d 	.word	0x0800827d
 8008238:	0800826d 	.word	0x0800826d
 800823c:	0800827d 	.word	0x0800827d
 8008240:	0800827d 	.word	0x0800827d
 8008244:	0800827d 	.word	0x0800827d
 8008248:	08008265 	.word	0x08008265
 800824c:	0800827d 	.word	0x0800827d
 8008250:	0800827d 	.word	0x0800827d
 8008254:	0800827d 	.word	0x0800827d
 8008258:	08008275 	.word	0x08008275
 800825c:	2300      	movs	r3, #0
 800825e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008262:	e0d8      	b.n	8008416 <UART_SetConfig+0x2fe>
 8008264:	2302      	movs	r3, #2
 8008266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800826a:	e0d4      	b.n	8008416 <UART_SetConfig+0x2fe>
 800826c:	2304      	movs	r3, #4
 800826e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008272:	e0d0      	b.n	8008416 <UART_SetConfig+0x2fe>
 8008274:	2308      	movs	r3, #8
 8008276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800827a:	e0cc      	b.n	8008416 <UART_SetConfig+0x2fe>
 800827c:	2310      	movs	r3, #16
 800827e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008282:	e0c8      	b.n	8008416 <UART_SetConfig+0x2fe>
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a5e      	ldr	r2, [pc, #376]	; (8008404 <UART_SetConfig+0x2ec>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d125      	bne.n	80082da <UART_SetConfig+0x1c2>
 800828e:	4b5b      	ldr	r3, [pc, #364]	; (80083fc <UART_SetConfig+0x2e4>)
 8008290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008294:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008298:	2b30      	cmp	r3, #48	; 0x30
 800829a:	d016      	beq.n	80082ca <UART_SetConfig+0x1b2>
 800829c:	2b30      	cmp	r3, #48	; 0x30
 800829e:	d818      	bhi.n	80082d2 <UART_SetConfig+0x1ba>
 80082a0:	2b20      	cmp	r3, #32
 80082a2:	d00a      	beq.n	80082ba <UART_SetConfig+0x1a2>
 80082a4:	2b20      	cmp	r3, #32
 80082a6:	d814      	bhi.n	80082d2 <UART_SetConfig+0x1ba>
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d002      	beq.n	80082b2 <UART_SetConfig+0x19a>
 80082ac:	2b10      	cmp	r3, #16
 80082ae:	d008      	beq.n	80082c2 <UART_SetConfig+0x1aa>
 80082b0:	e00f      	b.n	80082d2 <UART_SetConfig+0x1ba>
 80082b2:	2300      	movs	r3, #0
 80082b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082b8:	e0ad      	b.n	8008416 <UART_SetConfig+0x2fe>
 80082ba:	2302      	movs	r3, #2
 80082bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082c0:	e0a9      	b.n	8008416 <UART_SetConfig+0x2fe>
 80082c2:	2304      	movs	r3, #4
 80082c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082c8:	e0a5      	b.n	8008416 <UART_SetConfig+0x2fe>
 80082ca:	2308      	movs	r3, #8
 80082cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082d0:	e0a1      	b.n	8008416 <UART_SetConfig+0x2fe>
 80082d2:	2310      	movs	r3, #16
 80082d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082d8:	e09d      	b.n	8008416 <UART_SetConfig+0x2fe>
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a4a      	ldr	r2, [pc, #296]	; (8008408 <UART_SetConfig+0x2f0>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d125      	bne.n	8008330 <UART_SetConfig+0x218>
 80082e4:	4b45      	ldr	r3, [pc, #276]	; (80083fc <UART_SetConfig+0x2e4>)
 80082e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80082ee:	2bc0      	cmp	r3, #192	; 0xc0
 80082f0:	d016      	beq.n	8008320 <UART_SetConfig+0x208>
 80082f2:	2bc0      	cmp	r3, #192	; 0xc0
 80082f4:	d818      	bhi.n	8008328 <UART_SetConfig+0x210>
 80082f6:	2b80      	cmp	r3, #128	; 0x80
 80082f8:	d00a      	beq.n	8008310 <UART_SetConfig+0x1f8>
 80082fa:	2b80      	cmp	r3, #128	; 0x80
 80082fc:	d814      	bhi.n	8008328 <UART_SetConfig+0x210>
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d002      	beq.n	8008308 <UART_SetConfig+0x1f0>
 8008302:	2b40      	cmp	r3, #64	; 0x40
 8008304:	d008      	beq.n	8008318 <UART_SetConfig+0x200>
 8008306:	e00f      	b.n	8008328 <UART_SetConfig+0x210>
 8008308:	2300      	movs	r3, #0
 800830a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800830e:	e082      	b.n	8008416 <UART_SetConfig+0x2fe>
 8008310:	2302      	movs	r3, #2
 8008312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008316:	e07e      	b.n	8008416 <UART_SetConfig+0x2fe>
 8008318:	2304      	movs	r3, #4
 800831a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800831e:	e07a      	b.n	8008416 <UART_SetConfig+0x2fe>
 8008320:	2308      	movs	r3, #8
 8008322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008326:	e076      	b.n	8008416 <UART_SetConfig+0x2fe>
 8008328:	2310      	movs	r3, #16
 800832a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800832e:	e072      	b.n	8008416 <UART_SetConfig+0x2fe>
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a35      	ldr	r2, [pc, #212]	; (800840c <UART_SetConfig+0x2f4>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d12a      	bne.n	8008390 <UART_SetConfig+0x278>
 800833a:	4b30      	ldr	r3, [pc, #192]	; (80083fc <UART_SetConfig+0x2e4>)
 800833c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008340:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008344:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008348:	d01a      	beq.n	8008380 <UART_SetConfig+0x268>
 800834a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800834e:	d81b      	bhi.n	8008388 <UART_SetConfig+0x270>
 8008350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008354:	d00c      	beq.n	8008370 <UART_SetConfig+0x258>
 8008356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800835a:	d815      	bhi.n	8008388 <UART_SetConfig+0x270>
 800835c:	2b00      	cmp	r3, #0
 800835e:	d003      	beq.n	8008368 <UART_SetConfig+0x250>
 8008360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008364:	d008      	beq.n	8008378 <UART_SetConfig+0x260>
 8008366:	e00f      	b.n	8008388 <UART_SetConfig+0x270>
 8008368:	2300      	movs	r3, #0
 800836a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800836e:	e052      	b.n	8008416 <UART_SetConfig+0x2fe>
 8008370:	2302      	movs	r3, #2
 8008372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008376:	e04e      	b.n	8008416 <UART_SetConfig+0x2fe>
 8008378:	2304      	movs	r3, #4
 800837a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800837e:	e04a      	b.n	8008416 <UART_SetConfig+0x2fe>
 8008380:	2308      	movs	r3, #8
 8008382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008386:	e046      	b.n	8008416 <UART_SetConfig+0x2fe>
 8008388:	2310      	movs	r3, #16
 800838a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800838e:	e042      	b.n	8008416 <UART_SetConfig+0x2fe>
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a17      	ldr	r2, [pc, #92]	; (80083f4 <UART_SetConfig+0x2dc>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d13a      	bne.n	8008410 <UART_SetConfig+0x2f8>
 800839a:	4b18      	ldr	r3, [pc, #96]	; (80083fc <UART_SetConfig+0x2e4>)
 800839c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80083a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083a8:	d01a      	beq.n	80083e0 <UART_SetConfig+0x2c8>
 80083aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083ae:	d81b      	bhi.n	80083e8 <UART_SetConfig+0x2d0>
 80083b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083b4:	d00c      	beq.n	80083d0 <UART_SetConfig+0x2b8>
 80083b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083ba:	d815      	bhi.n	80083e8 <UART_SetConfig+0x2d0>
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d003      	beq.n	80083c8 <UART_SetConfig+0x2b0>
 80083c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083c4:	d008      	beq.n	80083d8 <UART_SetConfig+0x2c0>
 80083c6:	e00f      	b.n	80083e8 <UART_SetConfig+0x2d0>
 80083c8:	2300      	movs	r3, #0
 80083ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ce:	e022      	b.n	8008416 <UART_SetConfig+0x2fe>
 80083d0:	2302      	movs	r3, #2
 80083d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083d6:	e01e      	b.n	8008416 <UART_SetConfig+0x2fe>
 80083d8:	2304      	movs	r3, #4
 80083da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083de:	e01a      	b.n	8008416 <UART_SetConfig+0x2fe>
 80083e0:	2308      	movs	r3, #8
 80083e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083e6:	e016      	b.n	8008416 <UART_SetConfig+0x2fe>
 80083e8:	2310      	movs	r3, #16
 80083ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ee:	e012      	b.n	8008416 <UART_SetConfig+0x2fe>
 80083f0:	cfff69f3 	.word	0xcfff69f3
 80083f4:	40008000 	.word	0x40008000
 80083f8:	40013800 	.word	0x40013800
 80083fc:	40021000 	.word	0x40021000
 8008400:	40004400 	.word	0x40004400
 8008404:	40004800 	.word	0x40004800
 8008408:	40004c00 	.word	0x40004c00
 800840c:	40005000 	.word	0x40005000
 8008410:	2310      	movs	r3, #16
 8008412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4aae      	ldr	r2, [pc, #696]	; (80086d4 <UART_SetConfig+0x5bc>)
 800841c:	4293      	cmp	r3, r2
 800841e:	f040 8097 	bne.w	8008550 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008422:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008426:	2b08      	cmp	r3, #8
 8008428:	d823      	bhi.n	8008472 <UART_SetConfig+0x35a>
 800842a:	a201      	add	r2, pc, #4	; (adr r2, 8008430 <UART_SetConfig+0x318>)
 800842c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008430:	08008455 	.word	0x08008455
 8008434:	08008473 	.word	0x08008473
 8008438:	0800845d 	.word	0x0800845d
 800843c:	08008473 	.word	0x08008473
 8008440:	08008463 	.word	0x08008463
 8008444:	08008473 	.word	0x08008473
 8008448:	08008473 	.word	0x08008473
 800844c:	08008473 	.word	0x08008473
 8008450:	0800846b 	.word	0x0800846b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008454:	f7fb fbca 	bl	8003bec <HAL_RCC_GetPCLK1Freq>
 8008458:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800845a:	e010      	b.n	800847e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800845c:	4b9e      	ldr	r3, [pc, #632]	; (80086d8 <UART_SetConfig+0x5c0>)
 800845e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008460:	e00d      	b.n	800847e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008462:	f7fb fb2b 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8008466:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008468:	e009      	b.n	800847e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800846a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800846e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008470:	e005      	b.n	800847e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008472:	2300      	movs	r3, #0
 8008474:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800847c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800847e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008480:	2b00      	cmp	r3, #0
 8008482:	f000 8130 	beq.w	80086e6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848a:	4a94      	ldr	r2, [pc, #592]	; (80086dc <UART_SetConfig+0x5c4>)
 800848c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008490:	461a      	mov	r2, r3
 8008492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008494:	fbb3 f3f2 	udiv	r3, r3, r2
 8008498:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	685a      	ldr	r2, [r3, #4]
 800849e:	4613      	mov	r3, r2
 80084a0:	005b      	lsls	r3, r3, #1
 80084a2:	4413      	add	r3, r2
 80084a4:	69ba      	ldr	r2, [r7, #24]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d305      	bcc.n	80084b6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084b0:	69ba      	ldr	r2, [r7, #24]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d903      	bls.n	80084be <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80084bc:	e113      	b.n	80086e6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c0:	2200      	movs	r2, #0
 80084c2:	60bb      	str	r3, [r7, #8]
 80084c4:	60fa      	str	r2, [r7, #12]
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ca:	4a84      	ldr	r2, [pc, #528]	; (80086dc <UART_SetConfig+0x5c4>)
 80084cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	2200      	movs	r2, #0
 80084d4:	603b      	str	r3, [r7, #0]
 80084d6:	607a      	str	r2, [r7, #4]
 80084d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80084e0:	f7f7 fe8c 	bl	80001fc <__aeabi_uldivmod>
 80084e4:	4602      	mov	r2, r0
 80084e6:	460b      	mov	r3, r1
 80084e8:	4610      	mov	r0, r2
 80084ea:	4619      	mov	r1, r3
 80084ec:	f04f 0200 	mov.w	r2, #0
 80084f0:	f04f 0300 	mov.w	r3, #0
 80084f4:	020b      	lsls	r3, r1, #8
 80084f6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80084fa:	0202      	lsls	r2, r0, #8
 80084fc:	6979      	ldr	r1, [r7, #20]
 80084fe:	6849      	ldr	r1, [r1, #4]
 8008500:	0849      	lsrs	r1, r1, #1
 8008502:	2000      	movs	r0, #0
 8008504:	460c      	mov	r4, r1
 8008506:	4605      	mov	r5, r0
 8008508:	eb12 0804 	adds.w	r8, r2, r4
 800850c:	eb43 0905 	adc.w	r9, r3, r5
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	469a      	mov	sl, r3
 8008518:	4693      	mov	fp, r2
 800851a:	4652      	mov	r2, sl
 800851c:	465b      	mov	r3, fp
 800851e:	4640      	mov	r0, r8
 8008520:	4649      	mov	r1, r9
 8008522:	f7f7 fe6b 	bl	80001fc <__aeabi_uldivmod>
 8008526:	4602      	mov	r2, r0
 8008528:	460b      	mov	r3, r1
 800852a:	4613      	mov	r3, r2
 800852c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800852e:	6a3b      	ldr	r3, [r7, #32]
 8008530:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008534:	d308      	bcc.n	8008548 <UART_SetConfig+0x430>
 8008536:	6a3b      	ldr	r3, [r7, #32]
 8008538:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800853c:	d204      	bcs.n	8008548 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	6a3a      	ldr	r2, [r7, #32]
 8008544:	60da      	str	r2, [r3, #12]
 8008546:	e0ce      	b.n	80086e6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800854e:	e0ca      	b.n	80086e6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	69db      	ldr	r3, [r3, #28]
 8008554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008558:	d166      	bne.n	8008628 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800855a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800855e:	2b08      	cmp	r3, #8
 8008560:	d827      	bhi.n	80085b2 <UART_SetConfig+0x49a>
 8008562:	a201      	add	r2, pc, #4	; (adr r2, 8008568 <UART_SetConfig+0x450>)
 8008564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008568:	0800858d 	.word	0x0800858d
 800856c:	08008595 	.word	0x08008595
 8008570:	0800859d 	.word	0x0800859d
 8008574:	080085b3 	.word	0x080085b3
 8008578:	080085a3 	.word	0x080085a3
 800857c:	080085b3 	.word	0x080085b3
 8008580:	080085b3 	.word	0x080085b3
 8008584:	080085b3 	.word	0x080085b3
 8008588:	080085ab 	.word	0x080085ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800858c:	f7fb fb2e 	bl	8003bec <HAL_RCC_GetPCLK1Freq>
 8008590:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008592:	e014      	b.n	80085be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008594:	f7fb fb40 	bl	8003c18 <HAL_RCC_GetPCLK2Freq>
 8008598:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800859a:	e010      	b.n	80085be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800859c:	4b4e      	ldr	r3, [pc, #312]	; (80086d8 <UART_SetConfig+0x5c0>)
 800859e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80085a0:	e00d      	b.n	80085be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085a2:	f7fb fa8b 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 80085a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085a8:	e009      	b.n	80085be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80085b0:	e005      	b.n	80085be <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80085b2:	2300      	movs	r3, #0
 80085b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80085bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f000 8090 	beq.w	80086e6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ca:	4a44      	ldr	r2, [pc, #272]	; (80086dc <UART_SetConfig+0x5c4>)
 80085cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085d0:	461a      	mov	r2, r3
 80085d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80085d8:	005a      	lsls	r2, r3, #1
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	085b      	lsrs	r3, r3, #1
 80085e0:	441a      	add	r2, r3
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ea:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085ec:	6a3b      	ldr	r3, [r7, #32]
 80085ee:	2b0f      	cmp	r3, #15
 80085f0:	d916      	bls.n	8008620 <UART_SetConfig+0x508>
 80085f2:	6a3b      	ldr	r3, [r7, #32]
 80085f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085f8:	d212      	bcs.n	8008620 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085fa:	6a3b      	ldr	r3, [r7, #32]
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	f023 030f 	bic.w	r3, r3, #15
 8008602:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008604:	6a3b      	ldr	r3, [r7, #32]
 8008606:	085b      	lsrs	r3, r3, #1
 8008608:	b29b      	uxth	r3, r3
 800860a:	f003 0307 	and.w	r3, r3, #7
 800860e:	b29a      	uxth	r2, r3
 8008610:	8bfb      	ldrh	r3, [r7, #30]
 8008612:	4313      	orrs	r3, r2
 8008614:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	8bfa      	ldrh	r2, [r7, #30]
 800861c:	60da      	str	r2, [r3, #12]
 800861e:	e062      	b.n	80086e6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008626:	e05e      	b.n	80086e6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008628:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800862c:	2b08      	cmp	r3, #8
 800862e:	d828      	bhi.n	8008682 <UART_SetConfig+0x56a>
 8008630:	a201      	add	r2, pc, #4	; (adr r2, 8008638 <UART_SetConfig+0x520>)
 8008632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008636:	bf00      	nop
 8008638:	0800865d 	.word	0x0800865d
 800863c:	08008665 	.word	0x08008665
 8008640:	0800866d 	.word	0x0800866d
 8008644:	08008683 	.word	0x08008683
 8008648:	08008673 	.word	0x08008673
 800864c:	08008683 	.word	0x08008683
 8008650:	08008683 	.word	0x08008683
 8008654:	08008683 	.word	0x08008683
 8008658:	0800867b 	.word	0x0800867b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800865c:	f7fb fac6 	bl	8003bec <HAL_RCC_GetPCLK1Freq>
 8008660:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008662:	e014      	b.n	800868e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008664:	f7fb fad8 	bl	8003c18 <HAL_RCC_GetPCLK2Freq>
 8008668:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800866a:	e010      	b.n	800868e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800866c:	4b1a      	ldr	r3, [pc, #104]	; (80086d8 <UART_SetConfig+0x5c0>)
 800866e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008670:	e00d      	b.n	800868e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008672:	f7fb fa23 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8008676:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008678:	e009      	b.n	800868e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800867a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800867e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008680:	e005      	b.n	800868e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008682:	2300      	movs	r3, #0
 8008684:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800868c:	bf00      	nop
    }

    if (pclk != 0U)
 800868e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008690:	2b00      	cmp	r3, #0
 8008692:	d028      	beq.n	80086e6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008698:	4a10      	ldr	r2, [pc, #64]	; (80086dc <UART_SetConfig+0x5c4>)
 800869a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800869e:	461a      	mov	r2, r3
 80086a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	085b      	lsrs	r3, r3, #1
 80086ac:	441a      	add	r2, r3
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80086b6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086b8:	6a3b      	ldr	r3, [r7, #32]
 80086ba:	2b0f      	cmp	r3, #15
 80086bc:	d910      	bls.n	80086e0 <UART_SetConfig+0x5c8>
 80086be:	6a3b      	ldr	r3, [r7, #32]
 80086c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086c4:	d20c      	bcs.n	80086e0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80086c6:	6a3b      	ldr	r3, [r7, #32]
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	60da      	str	r2, [r3, #12]
 80086d0:	e009      	b.n	80086e6 <UART_SetConfig+0x5ce>
 80086d2:	bf00      	nop
 80086d4:	40008000 	.word	0x40008000
 80086d8:	00f42400 	.word	0x00f42400
 80086dc:	0800d930 	.word	0x0800d930
      }
      else
      {
        ret = HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	2201      	movs	r2, #1
 80086ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	2201      	movs	r2, #1
 80086f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	2200      	movs	r2, #0
 80086fa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	2200      	movs	r2, #0
 8008700:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008702:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008706:	4618      	mov	r0, r3
 8008708:	3730      	adds	r7, #48	; 0x30
 800870a:	46bd      	mov	sp, r7
 800870c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008710 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871c:	f003 0301 	and.w	r3, r3, #1
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00a      	beq.n	800873a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	430a      	orrs	r2, r1
 8008738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873e:	f003 0302 	and.w	r3, r3, #2
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00a      	beq.n	800875c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	430a      	orrs	r2, r1
 800875a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008760:	f003 0304 	and.w	r3, r3, #4
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00a      	beq.n	800877e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	430a      	orrs	r2, r1
 800877c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008782:	f003 0308 	and.w	r3, r3, #8
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00a      	beq.n	80087a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	430a      	orrs	r2, r1
 800879e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a4:	f003 0310 	and.w	r3, r3, #16
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00a      	beq.n	80087c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	430a      	orrs	r2, r1
 80087c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c6:	f003 0320 	and.w	r3, r3, #32
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00a      	beq.n	80087e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	430a      	orrs	r2, r1
 80087e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d01a      	beq.n	8008826 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	430a      	orrs	r2, r1
 8008804:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800880a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800880e:	d10a      	bne.n	8008826 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	430a      	orrs	r2, r1
 8008824:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800882a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00a      	beq.n	8008848 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	430a      	orrs	r2, r1
 8008846:	605a      	str	r2, [r3, #4]
  }
}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b086      	sub	sp, #24
 8008858:	af02      	add	r7, sp, #8
 800885a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008864:	f7f8 fcfe 	bl	8001264 <HAL_GetTick>
 8008868:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 0308 	and.w	r3, r3, #8
 8008874:	2b08      	cmp	r3, #8
 8008876:	d10e      	bne.n	8008896 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008878:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800887c:	9300      	str	r3, [sp, #0]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 f82f 	bl	80088ea <UART_WaitOnFlagUntilTimeout>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d001      	beq.n	8008896 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e025      	b.n	80088e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 0304 	and.w	r3, r3, #4
 80088a0:	2b04      	cmp	r3, #4
 80088a2:	d10e      	bne.n	80088c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088a8:	9300      	str	r3, [sp, #0]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 f819 	bl	80088ea <UART_WaitOnFlagUntilTimeout>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d001      	beq.n	80088c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088be:	2303      	movs	r3, #3
 80088c0:	e00f      	b.n	80088e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2220      	movs	r2, #32
 80088c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2220      	movs	r2, #32
 80088ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b09c      	sub	sp, #112	; 0x70
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	60f8      	str	r0, [r7, #12]
 80088f2:	60b9      	str	r1, [r7, #8]
 80088f4:	603b      	str	r3, [r7, #0]
 80088f6:	4613      	mov	r3, r2
 80088f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088fa:	e0a9      	b.n	8008a50 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008902:	f000 80a5 	beq.w	8008a50 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008906:	f7f8 fcad 	bl	8001264 <HAL_GetTick>
 800890a:	4602      	mov	r2, r0
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	1ad3      	subs	r3, r2, r3
 8008910:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008912:	429a      	cmp	r2, r3
 8008914:	d302      	bcc.n	800891c <UART_WaitOnFlagUntilTimeout+0x32>
 8008916:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008918:	2b00      	cmp	r3, #0
 800891a:	d140      	bne.n	800899e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008924:	e853 3f00 	ldrex	r3, [r3]
 8008928:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800892a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800892c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008930:	667b      	str	r3, [r7, #100]	; 0x64
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	461a      	mov	r2, r3
 8008938:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800893a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800893c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008940:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008942:	e841 2300 	strex	r3, r2, [r1]
 8008946:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800894a:	2b00      	cmp	r3, #0
 800894c:	d1e6      	bne.n	800891c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	3308      	adds	r3, #8
 8008954:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008958:	e853 3f00 	ldrex	r3, [r3]
 800895c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800895e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008960:	f023 0301 	bic.w	r3, r3, #1
 8008964:	663b      	str	r3, [r7, #96]	; 0x60
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	3308      	adds	r3, #8
 800896c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800896e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008970:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008972:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008974:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008976:	e841 2300 	strex	r3, r2, [r1]
 800897a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800897c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1e5      	bne.n	800894e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2220      	movs	r2, #32
 8008986:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2220      	movs	r2, #32
 800898e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2200      	movs	r2, #0
 8008996:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800899a:	2303      	movs	r3, #3
 800899c:	e069      	b.n	8008a72 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 0304 	and.w	r3, r3, #4
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d051      	beq.n	8008a50 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	69db      	ldr	r3, [r3, #28]
 80089b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089ba:	d149      	bne.n	8008a50 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ce:	e853 3f00 	ldrex	r3, [r3]
 80089d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80089da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	461a      	mov	r2, r3
 80089e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089e4:	637b      	str	r3, [r7, #52]	; 0x34
 80089e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80089ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089ec:	e841 2300 	strex	r3, r2, [r1]
 80089f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80089f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d1e6      	bne.n	80089c6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	3308      	adds	r3, #8
 80089fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	e853 3f00 	ldrex	r3, [r3]
 8008a06:	613b      	str	r3, [r7, #16]
   return(result);
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	f023 0301 	bic.w	r3, r3, #1
 8008a0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	3308      	adds	r3, #8
 8008a16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008a18:	623a      	str	r2, [r7, #32]
 8008a1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1c:	69f9      	ldr	r1, [r7, #28]
 8008a1e:	6a3a      	ldr	r2, [r7, #32]
 8008a20:	e841 2300 	strex	r3, r2, [r1]
 8008a24:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1e5      	bne.n	80089f8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2220      	movs	r2, #32
 8008a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2220      	movs	r2, #32
 8008a38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2220      	movs	r2, #32
 8008a40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	e010      	b.n	8008a72 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	69da      	ldr	r2, [r3, #28]
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	4013      	ands	r3, r2
 8008a5a:	68ba      	ldr	r2, [r7, #8]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	bf0c      	ite	eq
 8008a60:	2301      	moveq	r3, #1
 8008a62:	2300      	movne	r3, #0
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	461a      	mov	r2, r3
 8008a68:	79fb      	ldrb	r3, [r7, #7]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	f43f af46 	beq.w	80088fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3770      	adds	r7, #112	; 0x70
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008a7a:	b480      	push	{r7}
 8008a7c:	b085      	sub	sp, #20
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d101      	bne.n	8008a90 <HAL_UARTEx_DisableFifoMode+0x16>
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	e027      	b.n	8008ae0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2224      	movs	r2, #36	; 0x24
 8008a9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f022 0201 	bic.w	r2, r2, #1
 8008ab6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008abe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2220      	movs	r2, #32
 8008ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3714      	adds	r7, #20
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d101      	bne.n	8008b04 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008b00:	2302      	movs	r3, #2
 8008b02:	e02d      	b.n	8008b60 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2201      	movs	r2, #1
 8008b08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2224      	movs	r2, #36	; 0x24
 8008b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f022 0201 	bic.w	r2, r2, #1
 8008b2a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	683a      	ldr	r2, [r7, #0]
 8008b3c:	430a      	orrs	r2, r1
 8008b3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 f84f 	bl	8008be4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2220      	movs	r2, #32
 8008b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d101      	bne.n	8008b80 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	e02d      	b.n	8008bdc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2224      	movs	r2, #36	; 0x24
 8008b8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f022 0201 	bic.w	r2, r2, #1
 8008ba6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	683a      	ldr	r2, [r7, #0]
 8008bb8:	430a      	orrs	r2, r1
 8008bba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 f811 	bl	8008be4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2220      	movs	r2, #32
 8008bce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d108      	bne.n	8008c06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008c04:	e031      	b.n	8008c6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008c06:	2308      	movs	r3, #8
 8008c08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008c0a:	2308      	movs	r3, #8
 8008c0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	0e5b      	lsrs	r3, r3, #25
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	f003 0307 	and.w	r3, r3, #7
 8008c1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	0f5b      	lsrs	r3, r3, #29
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	f003 0307 	and.w	r3, r3, #7
 8008c2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c2e:	7bbb      	ldrb	r3, [r7, #14]
 8008c30:	7b3a      	ldrb	r2, [r7, #12]
 8008c32:	4911      	ldr	r1, [pc, #68]	; (8008c78 <UARTEx_SetNbDataToProcess+0x94>)
 8008c34:	5c8a      	ldrb	r2, [r1, r2]
 8008c36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008c3a:	7b3a      	ldrb	r2, [r7, #12]
 8008c3c:	490f      	ldr	r1, [pc, #60]	; (8008c7c <UARTEx_SetNbDataToProcess+0x98>)
 8008c3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c40:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c4c:	7bfb      	ldrb	r3, [r7, #15]
 8008c4e:	7b7a      	ldrb	r2, [r7, #13]
 8008c50:	4909      	ldr	r1, [pc, #36]	; (8008c78 <UARTEx_SetNbDataToProcess+0x94>)
 8008c52:	5c8a      	ldrb	r2, [r1, r2]
 8008c54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008c58:	7b7a      	ldrb	r2, [r7, #13]
 8008c5a:	4908      	ldr	r1, [pc, #32]	; (8008c7c <UARTEx_SetNbDataToProcess+0x98>)
 8008c5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c62:	b29a      	uxth	r2, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008c6a:	bf00      	nop
 8008c6c:	3714      	adds	r7, #20
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr
 8008c76:	bf00      	nop
 8008c78:	0800d948 	.word	0x0800d948
 8008c7c:	0800d950 	.word	0x0800d950

08008c80 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008c80:	b084      	sub	sp, #16
 8008c82:	b480      	push	{r7}
 8008c84:	b085      	sub	sp, #20
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
 8008c8a:	f107 001c 	add.w	r0, r7, #28
 8008c8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008c92:	2300      	movs	r3, #0
 8008c94:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8008c96:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8008c98:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008c9a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8008c9e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8008ca2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8008ca6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	685a      	ldr	r2, [r3, #4]
 8008cb2:	4b07      	ldr	r3, [pc, #28]	; (8008cd0 <SDMMC_Init+0x50>)
 8008cb4:	4013      	ands	r3, r2
 8008cb6:	68fa      	ldr	r2, [r7, #12]
 8008cb8:	431a      	orrs	r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3714      	adds	r7, #20
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	b004      	add	sp, #16
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	ffc02c00 	.word	0xffc02c00

08008cd4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	370c      	adds	r7, #12
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr

08008cee <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8008cee:	b480      	push	{r7}
 8008cf0:	b083      	sub	sp, #12
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
 8008cf6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f043 0203 	orr.w	r2, r3, #3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008d24:	2002      	movs	r0, #2
 8008d26:	f7f8 faa9 	bl	800127c <HAL_Delay>

  return HAL_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3708      	adds	r7, #8
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 0303 	and.w	r3, r3, #3
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008d6e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008d74:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008d7a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008d7c:	68fa      	ldr	r2, [r7, #12]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	68da      	ldr	r2, [r3, #12]
 8008d86:	4b06      	ldr	r3, [pc, #24]	; (8008da0 <SDMMC_SendCommand+0x50>)
 8008d88:	4013      	ands	r3, r2
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	431a      	orrs	r2, r3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3714      	adds	r7, #20
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	fffee0c0 	.word	0xfffee0c0

08008da4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	b2db      	uxtb	r3, r3
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	370c      	adds	r7, #12
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr

08008dbe <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008dbe:	b480      	push	{r7}
 8008dc0:	b085      	sub	sp, #20
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
 8008dc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	3314      	adds	r3, #20
 8008dcc:	461a      	mov	r2, r3
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3714      	adds	r7, #20
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b085      	sub	sp, #20
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008dee:	2300      	movs	r3, #0
 8008df0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	685a      	ldr	r2, [r3, #4]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008e0a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008e10:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008e16:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	431a      	orrs	r2, r3
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008e2e:	2300      	movs	r3, #0

}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3714      	adds	r7, #20
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b088      	sub	sp, #32
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008e4a:	2310      	movs	r3, #16
 8008e4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e54:	2300      	movs	r3, #0
 8008e56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e5e:	f107 0308 	add.w	r3, r7, #8
 8008e62:	4619      	mov	r1, r3
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f7ff ff73 	bl	8008d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e6e:	2110      	movs	r1, #16
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fa7b 	bl	800936c <SDMMC_GetCmdResp1>
 8008e76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e78:	69fb      	ldr	r3, [r7, #28]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3720      	adds	r7, #32
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b088      	sub	sp, #32
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008e90:	2311      	movs	r3, #17
 8008e92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ea2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ea4:	f107 0308 	add.w	r3, r7, #8
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f7ff ff50 	bl	8008d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eb4:	2111      	movs	r1, #17
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 fa58 	bl	800936c <SDMMC_GetCmdResp1>
 8008ebc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ebe:	69fb      	ldr	r3, [r7, #28]
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3720      	adds	r7, #32
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b088      	sub	sp, #32
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008ed6:	2312      	movs	r3, #18
 8008ed8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008eda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ede:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ee8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008eea:	f107 0308 	add.w	r3, r7, #8
 8008eee:	4619      	mov	r1, r3
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f7ff ff2d 	bl	8008d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008efa:	2112      	movs	r1, #18
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 fa35 	bl	800936c <SDMMC_GetCmdResp1>
 8008f02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f04:	69fb      	ldr	r3, [r7, #28]
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3720      	adds	r7, #32
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b088      	sub	sp, #32
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
 8008f16:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008f1c:	2318      	movs	r3, #24
 8008f1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f26:	2300      	movs	r3, #0
 8008f28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f30:	f107 0308 	add.w	r3, r7, #8
 8008f34:	4619      	mov	r1, r3
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f7ff ff0a 	bl	8008d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f40:	2118      	movs	r1, #24
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 fa12 	bl	800936c <SDMMC_GetCmdResp1>
 8008f48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f4a:	69fb      	ldr	r3, [r7, #28]
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3720      	adds	r7, #32
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b088      	sub	sp, #32
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008f62:	2319      	movs	r3, #25
 8008f64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f76:	f107 0308 	add.w	r3, r7, #8
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f7ff fee7 	bl	8008d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f86:	2119      	movs	r1, #25
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 f9ef 	bl	800936c <SDMMC_GetCmdResp1>
 8008f8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f90:	69fb      	ldr	r3, [r7, #28]
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3720      	adds	r7, #32
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
	...

08008f9c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b088      	sub	sp, #32
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008fa8:	230c      	movs	r3, #12
 8008faa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fba:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fd4:	f107 0308 	add.w	r3, r7, #8
 8008fd8:	4619      	mov	r1, r3
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f7ff feb8 	bl	8008d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008fe0:	4a08      	ldr	r2, [pc, #32]	; (8009004 <SDMMC_CmdStopTransfer+0x68>)
 8008fe2:	210c      	movs	r1, #12
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f9c1 	bl	800936c <SDMMC_GetCmdResp1>
 8008fea:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8008ff8:	69fb      	ldr	r3, [r7, #28]
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3720      	adds	r7, #32
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	05f5e100 	.word	0x05f5e100

08009008 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b08a      	sub	sp, #40	; 0x28
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009018:	2307      	movs	r3, #7
 800901a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800901c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009020:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009022:	2300      	movs	r3, #0
 8009024:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800902a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800902c:	f107 0310 	add.w	r3, r7, #16
 8009030:	4619      	mov	r1, r3
 8009032:	68f8      	ldr	r0, [r7, #12]
 8009034:	f7ff fe8c 	bl	8008d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009038:	f241 3288 	movw	r2, #5000	; 0x1388
 800903c:	2107      	movs	r1, #7
 800903e:	68f8      	ldr	r0, [r7, #12]
 8009040:	f000 f994 	bl	800936c <SDMMC_GetCmdResp1>
 8009044:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009048:	4618      	mov	r0, r3
 800904a:	3728      	adds	r7, #40	; 0x28
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b088      	sub	sp, #32
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009058:	2300      	movs	r3, #0
 800905a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800905c:	2300      	movs	r3, #0
 800905e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009060:	2300      	movs	r3, #0
 8009062:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009064:	2300      	movs	r3, #0
 8009066:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800906c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800906e:	f107 0308 	add.w	r3, r7, #8
 8009072:	4619      	mov	r1, r3
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f7ff fe6b 	bl	8008d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 fbb8 	bl	80097f0 <SDMMC_GetCmdError>
 8009080:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009082:	69fb      	ldr	r3, [r7, #28]
}
 8009084:	4618      	mov	r0, r3
 8009086:	3720      	adds	r7, #32
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b088      	sub	sp, #32
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009094:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009098:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800909a:	2308      	movs	r3, #8
 800909c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800909e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090a4:	2300      	movs	r3, #0
 80090a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090ae:	f107 0308 	add.w	r3, r7, #8
 80090b2:	4619      	mov	r1, r3
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f7ff fe4b 	bl	8008d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 fb4a 	bl	8009754 <SDMMC_GetCmdResp7>
 80090c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090c2:	69fb      	ldr	r3, [r7, #28]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3720      	adds	r7, #32
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b088      	sub	sp, #32
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80090da:	2337      	movs	r3, #55	; 0x37
 80090dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090e4:	2300      	movs	r3, #0
 80090e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090ee:	f107 0308 	add.w	r3, r7, #8
 80090f2:	4619      	mov	r1, r3
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f7ff fe2b 	bl	8008d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80090fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80090fe:	2137      	movs	r1, #55	; 0x37
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 f933 	bl	800936c <SDMMC_GetCmdResp1>
 8009106:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009108:	69fb      	ldr	r3, [r7, #28]
}
 800910a:	4618      	mov	r0, r3
 800910c:	3720      	adds	r7, #32
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b088      	sub	sp, #32
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
 800911a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009120:	2329      	movs	r3, #41	; 0x29
 8009122:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009124:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009128:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800912a:	2300      	movs	r3, #0
 800912c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800912e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009132:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009134:	f107 0308 	add.w	r3, r7, #8
 8009138:	4619      	mov	r1, r3
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f7ff fe08 	bl	8008d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 fa4f 	bl	80095e4 <SDMMC_GetCmdResp3>
 8009146:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009148:	69fb      	ldr	r3, [r7, #28]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3720      	adds	r7, #32
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b088      	sub	sp, #32
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
 800915a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009160:	2306      	movs	r3, #6
 8009162:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009164:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009168:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800916a:	2300      	movs	r3, #0
 800916c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800916e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009172:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009174:	f107 0308 	add.w	r3, r7, #8
 8009178:	4619      	mov	r1, r3
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f7ff fde8 	bl	8008d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009180:	f241 3288 	movw	r2, #5000	; 0x1388
 8009184:	2106      	movs	r1, #6
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f8f0 	bl	800936c <SDMMC_GetCmdResp1>
 800918c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800918e:	69fb      	ldr	r3, [r7, #28]
}
 8009190:	4618      	mov	r0, r3
 8009192:	3720      	adds	r7, #32
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b088      	sub	sp, #32
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80091a0:	2300      	movs	r3, #0
 80091a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80091a4:	2333      	movs	r3, #51	; 0x33
 80091a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091ae:	2300      	movs	r3, #0
 80091b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091b8:	f107 0308 	add.w	r3, r7, #8
 80091bc:	4619      	mov	r1, r3
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f7ff fdc6 	bl	8008d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80091c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80091c8:	2133      	movs	r1, #51	; 0x33
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 f8ce 	bl	800936c <SDMMC_GetCmdResp1>
 80091d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091d2:	69fb      	ldr	r3, [r7, #28]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3720      	adds	r7, #32
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b088      	sub	sp, #32
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80091e4:	2300      	movs	r3, #0
 80091e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80091e8:	2302      	movs	r3, #2
 80091ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80091ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80091f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091f2:	2300      	movs	r3, #0
 80091f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091fc:	f107 0308 	add.w	r3, r7, #8
 8009200:	4619      	mov	r1, r3
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f7ff fda4 	bl	8008d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 f9a1 	bl	8009550 <SDMMC_GetCmdResp2>
 800920e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009210:	69fb      	ldr	r3, [r7, #28]
}
 8009212:	4618      	mov	r0, r3
 8009214:	3720      	adds	r7, #32
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b088      	sub	sp, #32
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
 8009222:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009228:	2309      	movs	r3, #9
 800922a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800922c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009230:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009232:	2300      	movs	r3, #0
 8009234:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800923a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800923c:	f107 0308 	add.w	r3, r7, #8
 8009240:	4619      	mov	r1, r3
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7ff fd84 	bl	8008d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 f981 	bl	8009550 <SDMMC_GetCmdResp2>
 800924e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009250:	69fb      	ldr	r3, [r7, #28]
}
 8009252:	4618      	mov	r0, r3
 8009254:	3720      	adds	r7, #32
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b088      	sub	sp, #32
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
 8009262:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009264:	2300      	movs	r3, #0
 8009266:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009268:	2303      	movs	r3, #3
 800926a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800926c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009270:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009272:	2300      	movs	r3, #0
 8009274:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800927a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800927c:	f107 0308 	add.w	r3, r7, #8
 8009280:	4619      	mov	r1, r3
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f7ff fd64 	bl	8008d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009288:	683a      	ldr	r2, [r7, #0]
 800928a:	2103      	movs	r1, #3
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 f9e9 	bl	8009664 <SDMMC_GetCmdResp6>
 8009292:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009294:	69fb      	ldr	r3, [r7, #28]
}
 8009296:	4618      	mov	r0, r3
 8009298:	3720      	adds	r7, #32
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b088      	sub	sp, #32
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
 80092a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80092ac:	230d      	movs	r3, #13
 80092ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092b6:	2300      	movs	r3, #0
 80092b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092c0:	f107 0308 	add.w	r3, r7, #8
 80092c4:	4619      	mov	r1, r3
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f7ff fd42 	bl	8008d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80092cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80092d0:	210d      	movs	r1, #13
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 f84a 	bl	800936c <SDMMC_GetCmdResp1>
 80092d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092da:	69fb      	ldr	r3, [r7, #28]
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3720      	adds	r7, #32
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b088      	sub	sp, #32
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80092ec:	2300      	movs	r3, #0
 80092ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80092f0:	230d      	movs	r3, #13
 80092f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092fa:	2300      	movs	r3, #0
 80092fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009302:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009304:	f107 0308 	add.w	r3, r7, #8
 8009308:	4619      	mov	r1, r3
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f7ff fd20 	bl	8008d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009310:	f241 3288 	movw	r2, #5000	; 0x1388
 8009314:	210d      	movs	r1, #13
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f828 	bl	800936c <SDMMC_GetCmdResp1>
 800931c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800931e:	69fb      	ldr	r3, [r7, #28]
}
 8009320:	4618      	mov	r0, r3
 8009322:	3720      	adds	r7, #32
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b088      	sub	sp, #32
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8009330:	2300      	movs	r3, #0
 8009332:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8009334:	230b      	movs	r3, #11
 8009336:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800933c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800933e:	2300      	movs	r3, #0
 8009340:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009346:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009348:	f107 0308 	add.w	r3, r7, #8
 800934c:	4619      	mov	r1, r3
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f7ff fcfe 	bl	8008d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8009354:	f241 3288 	movw	r2, #5000	; 0x1388
 8009358:	210b      	movs	r1, #11
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f806 	bl	800936c <SDMMC_GetCmdResp1>
 8009360:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009362:	69fb      	ldr	r3, [r7, #28]
}
 8009364:	4618      	mov	r0, r3
 8009366:	3720      	adds	r7, #32
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b088      	sub	sp, #32
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	460b      	mov	r3, r1
 8009376:	607a      	str	r2, [r7, #4]
 8009378:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800937a:	4b70      	ldr	r3, [pc, #448]	; (800953c <SDMMC_GetCmdResp1+0x1d0>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a70      	ldr	r2, [pc, #448]	; (8009540 <SDMMC_GetCmdResp1+0x1d4>)
 8009380:	fba2 2303 	umull	r2, r3, r2, r3
 8009384:	0a5a      	lsrs	r2, r3, #9
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	fb02 f303 	mul.w	r3, r2, r3
 800938c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	1e5a      	subs	r2, r3, #1
 8009392:	61fa      	str	r2, [r7, #28]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d102      	bne.n	800939e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009398:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800939c:	e0c9      	b.n	8009532 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093a2:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80093a4:	69ba      	ldr	r2, [r7, #24]
 80093a6:	4b67      	ldr	r3, [pc, #412]	; (8009544 <SDMMC_GetCmdResp1+0x1d8>)
 80093a8:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d0ef      	beq.n	800938e <SDMMC_GetCmdResp1+0x22>
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d1ea      	bne.n	800938e <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093bc:	f003 0304 	and.w	r3, r3, #4
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d004      	beq.n	80093ce <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2204      	movs	r2, #4
 80093c8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80093ca:	2304      	movs	r3, #4
 80093cc:	e0b1      	b.n	8009532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d2:	f003 0301 	and.w	r3, r3, #1
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d004      	beq.n	80093e4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2201      	movs	r2, #1
 80093de:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80093e0:	2301      	movs	r3, #1
 80093e2:	e0a6      	b.n	8009532 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	4a58      	ldr	r2, [pc, #352]	; (8009548 <SDMMC_GetCmdResp1+0x1dc>)
 80093e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80093ea:	68f8      	ldr	r0, [r7, #12]
 80093ec:	f7ff fcda 	bl	8008da4 <SDMMC_GetCommandResponse>
 80093f0:	4603      	mov	r3, r0
 80093f2:	461a      	mov	r2, r3
 80093f4:	7afb      	ldrb	r3, [r7, #11]
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d001      	beq.n	80093fe <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80093fa:	2301      	movs	r3, #1
 80093fc:	e099      	b.n	8009532 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80093fe:	2100      	movs	r1, #0
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f7ff fcdc 	bl	8008dbe <SDMMC_GetResponse>
 8009406:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009408:	697a      	ldr	r2, [r7, #20]
 800940a:	4b50      	ldr	r3, [pc, #320]	; (800954c <SDMMC_GetCmdResp1+0x1e0>)
 800940c:	4013      	ands	r3, r2
 800940e:	2b00      	cmp	r3, #0
 8009410:	d101      	bne.n	8009416 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009412:	2300      	movs	r3, #0
 8009414:	e08d      	b.n	8009532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	2b00      	cmp	r3, #0
 800941a:	da02      	bge.n	8009422 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800941c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009420:	e087      	b.n	8009532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009428:	2b00      	cmp	r3, #0
 800942a:	d001      	beq.n	8009430 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800942c:	2340      	movs	r3, #64	; 0x40
 800942e:	e080      	b.n	8009532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009436:	2b00      	cmp	r3, #0
 8009438:	d001      	beq.n	800943e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800943a:	2380      	movs	r3, #128	; 0x80
 800943c:	e079      	b.n	8009532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009444:	2b00      	cmp	r3, #0
 8009446:	d002      	beq.n	800944e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009448:	f44f 7380 	mov.w	r3, #256	; 0x100
 800944c:	e071      	b.n	8009532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009454:	2b00      	cmp	r3, #0
 8009456:	d002      	beq.n	800945e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009458:	f44f 7300 	mov.w	r3, #512	; 0x200
 800945c:	e069      	b.n	8009532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009464:	2b00      	cmp	r3, #0
 8009466:	d002      	beq.n	800946e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800946c:	e061      	b.n	8009532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009474:	2b00      	cmp	r3, #0
 8009476:	d002      	beq.n	800947e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009478:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800947c:	e059      	b.n	8009532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009484:	2b00      	cmp	r3, #0
 8009486:	d002      	beq.n	800948e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800948c:	e051      	b.n	8009532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009494:	2b00      	cmp	r3, #0
 8009496:	d002      	beq.n	800949e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009498:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800949c:	e049      	b.n	8009532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d002      	beq.n	80094ae <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80094a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80094ac:	e041      	b.n	8009532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d002      	beq.n	80094be <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80094b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094bc:	e039      	b.n	8009532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d002      	beq.n	80094ce <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80094c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80094cc:	e031      	b.n	8009532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d002      	beq.n	80094de <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80094d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80094dc:	e029      	b.n	8009532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d002      	beq.n	80094ee <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80094e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80094ec:	e021      	b.n	8009532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d002      	beq.n	80094fe <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80094f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80094fc:	e019      	b.n	8009532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009504:	2b00      	cmp	r3, #0
 8009506:	d002      	beq.n	800950e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009508:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800950c:	e011      	b.n	8009532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009514:	2b00      	cmp	r3, #0
 8009516:	d002      	beq.n	800951e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009518:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800951c:	e009      	b.n	8009532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	f003 0308 	and.w	r3, r3, #8
 8009524:	2b00      	cmp	r3, #0
 8009526:	d002      	beq.n	800952e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009528:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800952c:	e001      	b.n	8009532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800952e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009532:	4618      	mov	r0, r3
 8009534:	3720      	adds	r7, #32
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	20000000 	.word	0x20000000
 8009540:	10624dd3 	.word	0x10624dd3
 8009544:	00200045 	.word	0x00200045
 8009548:	002000c5 	.word	0x002000c5
 800954c:	fdffe008 	.word	0xfdffe008

08009550 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009550:	b480      	push	{r7}
 8009552:	b085      	sub	sp, #20
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009558:	4b1f      	ldr	r3, [pc, #124]	; (80095d8 <SDMMC_GetCmdResp2+0x88>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a1f      	ldr	r2, [pc, #124]	; (80095dc <SDMMC_GetCmdResp2+0x8c>)
 800955e:	fba2 2303 	umull	r2, r3, r2, r3
 8009562:	0a5b      	lsrs	r3, r3, #9
 8009564:	f241 3288 	movw	r2, #5000	; 0x1388
 8009568:	fb02 f303 	mul.w	r3, r2, r3
 800956c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	1e5a      	subs	r2, r3, #1
 8009572:	60fa      	str	r2, [r7, #12]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d102      	bne.n	800957e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009578:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800957c:	e026      	b.n	80095cc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009582:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800958a:	2b00      	cmp	r3, #0
 800958c:	d0ef      	beq.n	800956e <SDMMC_GetCmdResp2+0x1e>
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009594:	2b00      	cmp	r3, #0
 8009596:	d1ea      	bne.n	800956e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800959c:	f003 0304 	and.w	r3, r3, #4
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d004      	beq.n	80095ae <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2204      	movs	r2, #4
 80095a8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80095aa:	2304      	movs	r3, #4
 80095ac:	e00e      	b.n	80095cc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095b2:	f003 0301 	and.w	r3, r3, #1
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d004      	beq.n	80095c4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2201      	movs	r2, #1
 80095be:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80095c0:	2301      	movs	r3, #1
 80095c2:	e003      	b.n	80095cc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	4a06      	ldr	r2, [pc, #24]	; (80095e0 <SDMMC_GetCmdResp2+0x90>)
 80095c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80095ca:	2300      	movs	r3, #0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3714      	adds	r7, #20
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr
 80095d8:	20000000 	.word	0x20000000
 80095dc:	10624dd3 	.word	0x10624dd3
 80095e0:	002000c5 	.word	0x002000c5

080095e4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b085      	sub	sp, #20
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80095ec:	4b1a      	ldr	r3, [pc, #104]	; (8009658 <SDMMC_GetCmdResp3+0x74>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a1a      	ldr	r2, [pc, #104]	; (800965c <SDMMC_GetCmdResp3+0x78>)
 80095f2:	fba2 2303 	umull	r2, r3, r2, r3
 80095f6:	0a5b      	lsrs	r3, r3, #9
 80095f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80095fc:	fb02 f303 	mul.w	r3, r2, r3
 8009600:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	1e5a      	subs	r2, r3, #1
 8009606:	60fa      	str	r2, [r7, #12]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d102      	bne.n	8009612 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800960c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009610:	e01b      	b.n	800964a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009616:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800961e:	2b00      	cmp	r3, #0
 8009620:	d0ef      	beq.n	8009602 <SDMMC_GetCmdResp3+0x1e>
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009628:	2b00      	cmp	r3, #0
 800962a:	d1ea      	bne.n	8009602 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009630:	f003 0304 	and.w	r3, r3, #4
 8009634:	2b00      	cmp	r3, #0
 8009636:	d004      	beq.n	8009642 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2204      	movs	r2, #4
 800963c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800963e:	2304      	movs	r3, #4
 8009640:	e003      	b.n	800964a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4a06      	ldr	r2, [pc, #24]	; (8009660 <SDMMC_GetCmdResp3+0x7c>)
 8009646:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	3714      	adds	r7, #20
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr
 8009656:	bf00      	nop
 8009658:	20000000 	.word	0x20000000
 800965c:	10624dd3 	.word	0x10624dd3
 8009660:	002000c5 	.word	0x002000c5

08009664 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b088      	sub	sp, #32
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	460b      	mov	r3, r1
 800966e:	607a      	str	r2, [r7, #4]
 8009670:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009672:	4b35      	ldr	r3, [pc, #212]	; (8009748 <SDMMC_GetCmdResp6+0xe4>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a35      	ldr	r2, [pc, #212]	; (800974c <SDMMC_GetCmdResp6+0xe8>)
 8009678:	fba2 2303 	umull	r2, r3, r2, r3
 800967c:	0a5b      	lsrs	r3, r3, #9
 800967e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009682:	fb02 f303 	mul.w	r3, r2, r3
 8009686:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009688:	69fb      	ldr	r3, [r7, #28]
 800968a:	1e5a      	subs	r2, r3, #1
 800968c:	61fa      	str	r2, [r7, #28]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d102      	bne.n	8009698 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009692:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009696:	e052      	b.n	800973e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800969c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800969e:	69bb      	ldr	r3, [r7, #24]
 80096a0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d0ef      	beq.n	8009688 <SDMMC_GetCmdResp6+0x24>
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d1ea      	bne.n	8009688 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096b6:	f003 0304 	and.w	r3, r3, #4
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d004      	beq.n	80096c8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2204      	movs	r2, #4
 80096c2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80096c4:	2304      	movs	r3, #4
 80096c6:	e03a      	b.n	800973e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096cc:	f003 0301 	and.w	r3, r3, #1
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d004      	beq.n	80096de <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2201      	movs	r2, #1
 80096d8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80096da:	2301      	movs	r3, #1
 80096dc:	e02f      	b.n	800973e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80096de:	68f8      	ldr	r0, [r7, #12]
 80096e0:	f7ff fb60 	bl	8008da4 <SDMMC_GetCommandResponse>
 80096e4:	4603      	mov	r3, r0
 80096e6:	461a      	mov	r2, r3
 80096e8:	7afb      	ldrb	r3, [r7, #11]
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d001      	beq.n	80096f2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80096ee:	2301      	movs	r3, #1
 80096f0:	e025      	b.n	800973e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	4a16      	ldr	r2, [pc, #88]	; (8009750 <SDMMC_GetCmdResp6+0xec>)
 80096f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80096f8:	2100      	movs	r1, #0
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	f7ff fb5f 	bl	8008dbe <SDMMC_GetResponse>
 8009700:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009708:	2b00      	cmp	r3, #0
 800970a:	d106      	bne.n	800971a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	0c1b      	lsrs	r3, r3, #16
 8009710:	b29a      	uxth	r2, r3
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8009716:	2300      	movs	r3, #0
 8009718:	e011      	b.n	800973e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009720:	2b00      	cmp	r3, #0
 8009722:	d002      	beq.n	800972a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009724:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009728:	e009      	b.n	800973e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009730:	2b00      	cmp	r3, #0
 8009732:	d002      	beq.n	800973a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009738:	e001      	b.n	800973e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800973a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800973e:	4618      	mov	r0, r3
 8009740:	3720      	adds	r7, #32
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	20000000 	.word	0x20000000
 800974c:	10624dd3 	.word	0x10624dd3
 8009750:	002000c5 	.word	0x002000c5

08009754 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009754:	b480      	push	{r7}
 8009756:	b085      	sub	sp, #20
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800975c:	4b22      	ldr	r3, [pc, #136]	; (80097e8 <SDMMC_GetCmdResp7+0x94>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a22      	ldr	r2, [pc, #136]	; (80097ec <SDMMC_GetCmdResp7+0x98>)
 8009762:	fba2 2303 	umull	r2, r3, r2, r3
 8009766:	0a5b      	lsrs	r3, r3, #9
 8009768:	f241 3288 	movw	r2, #5000	; 0x1388
 800976c:	fb02 f303 	mul.w	r3, r2, r3
 8009770:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	1e5a      	subs	r2, r3, #1
 8009776:	60fa      	str	r2, [r7, #12]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d102      	bne.n	8009782 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800977c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009780:	e02c      	b.n	80097dc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009786:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800978e:	2b00      	cmp	r3, #0
 8009790:	d0ef      	beq.n	8009772 <SDMMC_GetCmdResp7+0x1e>
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1ea      	bne.n	8009772 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097a0:	f003 0304 	and.w	r3, r3, #4
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d004      	beq.n	80097b2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2204      	movs	r2, #4
 80097ac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80097ae:	2304      	movs	r3, #4
 80097b0:	e014      	b.n	80097dc <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097b6:	f003 0301 	and.w	r3, r3, #1
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d004      	beq.n	80097c8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2201      	movs	r2, #1
 80097c2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80097c4:	2301      	movs	r3, #1
 80097c6:	e009      	b.n	80097dc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d002      	beq.n	80097da <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2240      	movs	r2, #64	; 0x40
 80097d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80097da:	2300      	movs	r3, #0

}
 80097dc:	4618      	mov	r0, r3
 80097de:	3714      	adds	r7, #20
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr
 80097e8:	20000000 	.word	0x20000000
 80097ec:	10624dd3 	.word	0x10624dd3

080097f0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b085      	sub	sp, #20
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80097f8:	4b11      	ldr	r3, [pc, #68]	; (8009840 <SDMMC_GetCmdError+0x50>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a11      	ldr	r2, [pc, #68]	; (8009844 <SDMMC_GetCmdError+0x54>)
 80097fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009802:	0a5b      	lsrs	r3, r3, #9
 8009804:	f241 3288 	movw	r2, #5000	; 0x1388
 8009808:	fb02 f303 	mul.w	r3, r2, r3
 800980c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	1e5a      	subs	r2, r3, #1
 8009812:	60fa      	str	r2, [r7, #12]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d102      	bne.n	800981e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009818:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800981c:	e009      	b.n	8009832 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009826:	2b00      	cmp	r3, #0
 8009828:	d0f1      	beq.n	800980e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4a06      	ldr	r2, [pc, #24]	; (8009848 <SDMMC_GetCmdError+0x58>)
 800982e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	3714      	adds	r7, #20
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr
 800983e:	bf00      	nop
 8009840:	20000000 	.word	0x20000000
 8009844:	10624dd3 	.word	0x10624dd3
 8009848:	002000c5 	.word	0x002000c5

0800984c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800984c:	b084      	sub	sp, #16
 800984e:	b580      	push	{r7, lr}
 8009850:	b084      	sub	sp, #16
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
 8009856:	f107 001c 	add.w	r0, r7, #28
 800985a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f001 faf6 	bl	800ae5c <USB_CoreReset>
 8009870:	4603      	mov	r3, r0
 8009872:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009876:	2b00      	cmp	r3, #0
 8009878:	d106      	bne.n	8009888 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800987e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	639a      	str	r2, [r3, #56]	; 0x38
 8009886:	e005      	b.n	8009894 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800988c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8009894:	7bfb      	ldrb	r3, [r7, #15]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098a0:	b004      	add	sp, #16
 80098a2:	4770      	bx	lr

080098a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b087      	sub	sp, #28
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	4613      	mov	r3, r2
 80098b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80098b2:	79fb      	ldrb	r3, [r7, #7]
 80098b4:	2b02      	cmp	r3, #2
 80098b6:	d165      	bne.n	8009984 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	4a3e      	ldr	r2, [pc, #248]	; (80099b4 <USB_SetTurnaroundTime+0x110>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d906      	bls.n	80098ce <USB_SetTurnaroundTime+0x2a>
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	4a3d      	ldr	r2, [pc, #244]	; (80099b8 <USB_SetTurnaroundTime+0x114>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d202      	bcs.n	80098ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80098c8:	230f      	movs	r3, #15
 80098ca:	617b      	str	r3, [r7, #20]
 80098cc:	e05c      	b.n	8009988 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	4a39      	ldr	r2, [pc, #228]	; (80099b8 <USB_SetTurnaroundTime+0x114>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d306      	bcc.n	80098e4 <USB_SetTurnaroundTime+0x40>
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	4a38      	ldr	r2, [pc, #224]	; (80099bc <USB_SetTurnaroundTime+0x118>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d202      	bcs.n	80098e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80098de:	230e      	movs	r3, #14
 80098e0:	617b      	str	r3, [r7, #20]
 80098e2:	e051      	b.n	8009988 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	4a35      	ldr	r2, [pc, #212]	; (80099bc <USB_SetTurnaroundTime+0x118>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d306      	bcc.n	80098fa <USB_SetTurnaroundTime+0x56>
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	4a34      	ldr	r2, [pc, #208]	; (80099c0 <USB_SetTurnaroundTime+0x11c>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d202      	bcs.n	80098fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80098f4:	230d      	movs	r3, #13
 80098f6:	617b      	str	r3, [r7, #20]
 80098f8:	e046      	b.n	8009988 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	4a30      	ldr	r2, [pc, #192]	; (80099c0 <USB_SetTurnaroundTime+0x11c>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d306      	bcc.n	8009910 <USB_SetTurnaroundTime+0x6c>
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	4a2f      	ldr	r2, [pc, #188]	; (80099c4 <USB_SetTurnaroundTime+0x120>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d802      	bhi.n	8009910 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800990a:	230c      	movs	r3, #12
 800990c:	617b      	str	r3, [r7, #20]
 800990e:	e03b      	b.n	8009988 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	4a2c      	ldr	r2, [pc, #176]	; (80099c4 <USB_SetTurnaroundTime+0x120>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d906      	bls.n	8009926 <USB_SetTurnaroundTime+0x82>
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	4a2b      	ldr	r2, [pc, #172]	; (80099c8 <USB_SetTurnaroundTime+0x124>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d802      	bhi.n	8009926 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009920:	230b      	movs	r3, #11
 8009922:	617b      	str	r3, [r7, #20]
 8009924:	e030      	b.n	8009988 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	4a27      	ldr	r2, [pc, #156]	; (80099c8 <USB_SetTurnaroundTime+0x124>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d906      	bls.n	800993c <USB_SetTurnaroundTime+0x98>
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	4a26      	ldr	r2, [pc, #152]	; (80099cc <USB_SetTurnaroundTime+0x128>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d802      	bhi.n	800993c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009936:	230a      	movs	r3, #10
 8009938:	617b      	str	r3, [r7, #20]
 800993a:	e025      	b.n	8009988 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	4a23      	ldr	r2, [pc, #140]	; (80099cc <USB_SetTurnaroundTime+0x128>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d906      	bls.n	8009952 <USB_SetTurnaroundTime+0xae>
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	4a22      	ldr	r2, [pc, #136]	; (80099d0 <USB_SetTurnaroundTime+0x12c>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d202      	bcs.n	8009952 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800994c:	2309      	movs	r3, #9
 800994e:	617b      	str	r3, [r7, #20]
 8009950:	e01a      	b.n	8009988 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	4a1e      	ldr	r2, [pc, #120]	; (80099d0 <USB_SetTurnaroundTime+0x12c>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d306      	bcc.n	8009968 <USB_SetTurnaroundTime+0xc4>
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	4a1d      	ldr	r2, [pc, #116]	; (80099d4 <USB_SetTurnaroundTime+0x130>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d802      	bhi.n	8009968 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009962:	2308      	movs	r3, #8
 8009964:	617b      	str	r3, [r7, #20]
 8009966:	e00f      	b.n	8009988 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	4a1a      	ldr	r2, [pc, #104]	; (80099d4 <USB_SetTurnaroundTime+0x130>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d906      	bls.n	800997e <USB_SetTurnaroundTime+0xda>
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	4a19      	ldr	r2, [pc, #100]	; (80099d8 <USB_SetTurnaroundTime+0x134>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d202      	bcs.n	800997e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009978:	2307      	movs	r3, #7
 800997a:	617b      	str	r3, [r7, #20]
 800997c:	e004      	b.n	8009988 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800997e:	2306      	movs	r3, #6
 8009980:	617b      	str	r3, [r7, #20]
 8009982:	e001      	b.n	8009988 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009984:	2309      	movs	r3, #9
 8009986:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	68da      	ldr	r2, [r3, #12]
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	029b      	lsls	r3, r3, #10
 800999c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80099a0:	431a      	orrs	r2, r3
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80099a6:	2300      	movs	r3, #0
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	371c      	adds	r7, #28
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr
 80099b4:	00d8acbf 	.word	0x00d8acbf
 80099b8:	00e4e1c0 	.word	0x00e4e1c0
 80099bc:	00f42400 	.word	0x00f42400
 80099c0:	01067380 	.word	0x01067380
 80099c4:	011a499f 	.word	0x011a499f
 80099c8:	01312cff 	.word	0x01312cff
 80099cc:	014ca43f 	.word	0x014ca43f
 80099d0:	016e3600 	.word	0x016e3600
 80099d4:	01a6ab1f 	.word	0x01a6ab1f
 80099d8:	01e84800 	.word	0x01e84800

080099dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	f043 0201 	orr.w	r2, r3, #1
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	370c      	adds	r7, #12
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr

080099fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80099fe:	b480      	push	{r7}
 8009a00:	b083      	sub	sp, #12
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	f023 0201 	bic.w	r2, r3, #1
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a12:	2300      	movs	r3, #0
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	370c      	adds	r7, #12
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	460b      	mov	r3, r1
 8009a2a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009a3c:	78fb      	ldrb	r3, [r7, #3]
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d115      	bne.n	8009a6e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	68db      	ldr	r3, [r3, #12]
 8009a46:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009a4e:	2001      	movs	r0, #1
 8009a50:	f7f7 fc14 	bl	800127c <HAL_Delay>
      ms++;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	3301      	adds	r3, #1
 8009a58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f001 f985 	bl	800ad6a <USB_GetMode>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d01e      	beq.n	8009aa4 <USB_SetCurrentMode+0x84>
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2b31      	cmp	r3, #49	; 0x31
 8009a6a:	d9f0      	bls.n	8009a4e <USB_SetCurrentMode+0x2e>
 8009a6c:	e01a      	b.n	8009aa4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009a6e:	78fb      	ldrb	r3, [r7, #3]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d115      	bne.n	8009aa0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009a80:	2001      	movs	r0, #1
 8009a82:	f7f7 fbfb 	bl	800127c <HAL_Delay>
      ms++;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	3301      	adds	r3, #1
 8009a8a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f001 f96c 	bl	800ad6a <USB_GetMode>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d005      	beq.n	8009aa4 <USB_SetCurrentMode+0x84>
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2b31      	cmp	r3, #49	; 0x31
 8009a9c:	d9f0      	bls.n	8009a80 <USB_SetCurrentMode+0x60>
 8009a9e:	e001      	b.n	8009aa4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e005      	b.n	8009ab0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2b32      	cmp	r3, #50	; 0x32
 8009aa8:	d101      	bne.n	8009aae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e000      	b.n	8009ab0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3710      	adds	r7, #16
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009ab8:	b084      	sub	sp, #16
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b086      	sub	sp, #24
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
 8009ac2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009ac6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009aca:	2300      	movs	r3, #0
 8009acc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	613b      	str	r3, [r7, #16]
 8009ad6:	e009      	b.n	8009aec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	3340      	adds	r3, #64	; 0x40
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	4413      	add	r3, r2
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	613b      	str	r3, [r7, #16]
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	2b0e      	cmp	r3, #14
 8009af0:	d9f2      	bls.n	8009ad8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d11c      	bne.n	8009b32 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	68fa      	ldr	r2, [r7, #12]
 8009b02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b06:	f043 0302 	orr.w	r3, r3, #2
 8009b0a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b10:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	601a      	str	r2, [r3, #0]
 8009b30:	e005      	b.n	8009b3e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b36:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b44:	461a      	mov	r2, r3
 8009b46:	2300      	movs	r3, #0
 8009b48:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b50:	4619      	mov	r1, r3
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b58:	461a      	mov	r2, r3
 8009b5a:	680b      	ldr	r3, [r1, #0]
 8009b5c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009b5e:	2103      	movs	r1, #3
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 f959 	bl	8009e18 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009b66:	2110      	movs	r1, #16
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 f8f1 	bl	8009d50 <USB_FlushTxFifo>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d001      	beq.n	8009b78 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8009b74:	2301      	movs	r3, #1
 8009b76:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 f91d 	bl	8009db8 <USB_FlushRxFifo>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d001      	beq.n	8009b88 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8009b84:	2301      	movs	r3, #1
 8009b86:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b8e:	461a      	mov	r2, r3
 8009b90:	2300      	movs	r3, #0
 8009b92:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	2300      	movs	r3, #0
 8009baa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bac:	2300      	movs	r3, #0
 8009bae:	613b      	str	r3, [r7, #16]
 8009bb0:	e043      	b.n	8009c3a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	015a      	lsls	r2, r3, #5
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	4413      	add	r3, r2
 8009bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bc8:	d118      	bne.n	8009bfc <USB_DevInit+0x144>
    {
      if (i == 0U)
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d10a      	bne.n	8009be6 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	015a      	lsls	r2, r3, #5
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bdc:	461a      	mov	r2, r3
 8009bde:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009be2:	6013      	str	r3, [r2, #0]
 8009be4:	e013      	b.n	8009c0e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	015a      	lsls	r2, r3, #5
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	4413      	add	r3, r2
 8009bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009bf8:	6013      	str	r3, [r2, #0]
 8009bfa:	e008      	b.n	8009c0e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	015a      	lsls	r2, r3, #5
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	4413      	add	r3, r2
 8009c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c08:	461a      	mov	r2, r3
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	015a      	lsls	r2, r3, #5
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	4413      	add	r3, r2
 8009c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	015a      	lsls	r2, r3, #5
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	4413      	add	r3, r2
 8009c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009c32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	3301      	adds	r3, #1
 8009c38:	613b      	str	r3, [r7, #16]
 8009c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3c:	693a      	ldr	r2, [r7, #16]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d3b7      	bcc.n	8009bb2 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c42:	2300      	movs	r3, #0
 8009c44:	613b      	str	r3, [r7, #16]
 8009c46:	e043      	b.n	8009cd0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	015a      	lsls	r2, r3, #5
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	4413      	add	r3, r2
 8009c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c5e:	d118      	bne.n	8009c92 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d10a      	bne.n	8009c7c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	015a      	lsls	r2, r3, #5
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c72:	461a      	mov	r2, r3
 8009c74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009c78:	6013      	str	r3, [r2, #0]
 8009c7a:	e013      	b.n	8009ca4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	015a      	lsls	r2, r3, #5
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	4413      	add	r3, r2
 8009c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c88:	461a      	mov	r2, r3
 8009c8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009c8e:	6013      	str	r3, [r2, #0]
 8009c90:	e008      	b.n	8009ca4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	015a      	lsls	r2, r3, #5
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	4413      	add	r3, r2
 8009c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	015a      	lsls	r2, r3, #5
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	4413      	add	r3, r2
 8009cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	015a      	lsls	r2, r3, #5
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009cc8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	613b      	str	r3, [r7, #16]
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd2:	693a      	ldr	r2, [r7, #16]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d3b7      	bcc.n	8009c48 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ce6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009cea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009cf8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	699b      	ldr	r3, [r3, #24]
 8009cfe:	f043 0210 	orr.w	r2, r3, #16
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	699a      	ldr	r2, [r3, #24]
 8009d0a:	4b10      	ldr	r3, [pc, #64]	; (8009d4c <USB_DevInit+0x294>)
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d005      	beq.n	8009d24 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	699b      	ldr	r3, [r3, #24]
 8009d1c:	f043 0208 	orr.w	r2, r3, #8
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d107      	bne.n	8009d3a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	699b      	ldr	r3, [r3, #24]
 8009d2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d32:	f043 0304 	orr.w	r3, r3, #4
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3718      	adds	r7, #24
 8009d40:	46bd      	mov	sp, r7
 8009d42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d46:	b004      	add	sp, #16
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	803c3800 	.word	0x803c3800

08009d50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b085      	sub	sp, #20
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	3301      	adds	r3, #1
 8009d62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	4a13      	ldr	r2, [pc, #76]	; (8009db4 <USB_FlushTxFifo+0x64>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d901      	bls.n	8009d70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009d6c:	2303      	movs	r3, #3
 8009d6e:	e01b      	b.n	8009da8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	691b      	ldr	r3, [r3, #16]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	daf2      	bge.n	8009d5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	019b      	lsls	r3, r3, #6
 8009d80:	f043 0220 	orr.w	r2, r3, #32
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	4a08      	ldr	r2, [pc, #32]	; (8009db4 <USB_FlushTxFifo+0x64>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d901      	bls.n	8009d9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009d96:	2303      	movs	r3, #3
 8009d98:	e006      	b.n	8009da8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	691b      	ldr	r3, [r3, #16]
 8009d9e:	f003 0320 	and.w	r3, r3, #32
 8009da2:	2b20      	cmp	r3, #32
 8009da4:	d0f0      	beq.n	8009d88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3714      	adds	r7, #20
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr
 8009db4:	00030d40 	.word	0x00030d40

08009db8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	4a11      	ldr	r2, [pc, #68]	; (8009e14 <USB_FlushRxFifo+0x5c>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d901      	bls.n	8009dd6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009dd2:	2303      	movs	r3, #3
 8009dd4:	e018      	b.n	8009e08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	daf2      	bge.n	8009dc4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009dde:	2300      	movs	r3, #0
 8009de0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2210      	movs	r2, #16
 8009de6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	3301      	adds	r3, #1
 8009dec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	4a08      	ldr	r2, [pc, #32]	; (8009e14 <USB_FlushRxFifo+0x5c>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d901      	bls.n	8009dfa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009df6:	2303      	movs	r3, #3
 8009df8:	e006      	b.n	8009e08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	691b      	ldr	r3, [r3, #16]
 8009dfe:	f003 0310 	and.w	r3, r3, #16
 8009e02:	2b10      	cmp	r3, #16
 8009e04:	d0f0      	beq.n	8009de8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3714      	adds	r7, #20
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr
 8009e14:	00030d40 	.word	0x00030d40

08009e18 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	460b      	mov	r3, r1
 8009e22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	78fb      	ldrb	r3, [r7, #3]
 8009e32:	68f9      	ldr	r1, [r7, #12]
 8009e34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3714      	adds	r7, #20
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr

08009e4a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009e4a:	b480      	push	{r7}
 8009e4c:	b087      	sub	sp, #28
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	f003 0306 	and.w	r3, r3, #6
 8009e62:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2b02      	cmp	r3, #2
 8009e68:	d002      	beq.n	8009e70 <USB_GetDevSpeed+0x26>
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2b06      	cmp	r3, #6
 8009e6e:	d102      	bne.n	8009e76 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009e70:	2302      	movs	r3, #2
 8009e72:	75fb      	strb	r3, [r7, #23]
 8009e74:	e001      	b.n	8009e7a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8009e76:	230f      	movs	r3, #15
 8009e78:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	371c      	adds	r7, #28
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b085      	sub	sp, #20
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	785b      	ldrb	r3, [r3, #1]
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d13a      	bne.n	8009f1a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eaa:	69da      	ldr	r2, [r3, #28]
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	f003 030f 	and.w	r3, r3, #15
 8009eb4:	2101      	movs	r1, #1
 8009eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	68f9      	ldr	r1, [r7, #12]
 8009ebe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	015a      	lsls	r2, r3, #5
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	4413      	add	r3, r2
 8009ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d155      	bne.n	8009f88 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	015a      	lsls	r2, r3, #5
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	791b      	ldrb	r3, [r3, #4]
 8009ef6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ef8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	059b      	lsls	r3, r3, #22
 8009efe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009f00:	4313      	orrs	r3, r2
 8009f02:	68ba      	ldr	r2, [r7, #8]
 8009f04:	0151      	lsls	r1, r2, #5
 8009f06:	68fa      	ldr	r2, [r7, #12]
 8009f08:	440a      	add	r2, r1
 8009f0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f16:	6013      	str	r3, [r2, #0]
 8009f18:	e036      	b.n	8009f88 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f20:	69da      	ldr	r2, [r3, #28]
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	f003 030f 	and.w	r3, r3, #15
 8009f2a:	2101      	movs	r1, #1
 8009f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8009f30:	041b      	lsls	r3, r3, #16
 8009f32:	68f9      	ldr	r1, [r7, #12]
 8009f34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	015a      	lsls	r2, r3, #5
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	4413      	add	r3, r2
 8009f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d11a      	bne.n	8009f88 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	015a      	lsls	r2, r3, #5
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	4413      	add	r3, r2
 8009f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	68db      	ldr	r3, [r3, #12]
 8009f64:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	791b      	ldrb	r3, [r3, #4]
 8009f6c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009f6e:	430b      	orrs	r3, r1
 8009f70:	4313      	orrs	r3, r2
 8009f72:	68ba      	ldr	r2, [r7, #8]
 8009f74:	0151      	lsls	r1, r2, #5
 8009f76:	68fa      	ldr	r2, [r7, #12]
 8009f78:	440a      	add	r2, r1
 8009f7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f86:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3714      	adds	r7, #20
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr
	...

08009f98 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b085      	sub	sp, #20
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	785b      	ldrb	r3, [r3, #1]
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d161      	bne.n	800a078 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	015a      	lsls	r2, r3, #5
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	4413      	add	r3, r2
 8009fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fca:	d11f      	bne.n	800a00c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	015a      	lsls	r2, r3, #5
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	0151      	lsls	r1, r2, #5
 8009fde:	68fa      	ldr	r2, [r7, #12]
 8009fe0:	440a      	add	r2, r1
 8009fe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fe6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009fea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	015a      	lsls	r2, r3, #5
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	0151      	lsls	r1, r2, #5
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	440a      	add	r2, r1
 800a002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a006:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a00a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a012:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	f003 030f 	and.w	r3, r3, #15
 800a01c:	2101      	movs	r1, #1
 800a01e:	fa01 f303 	lsl.w	r3, r1, r3
 800a022:	b29b      	uxth	r3, r3
 800a024:	43db      	mvns	r3, r3
 800a026:	68f9      	ldr	r1, [r7, #12]
 800a028:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a02c:	4013      	ands	r3, r2
 800a02e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a036:	69da      	ldr	r2, [r3, #28]
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	f003 030f 	and.w	r3, r3, #15
 800a040:	2101      	movs	r1, #1
 800a042:	fa01 f303 	lsl.w	r3, r1, r3
 800a046:	b29b      	uxth	r3, r3
 800a048:	43db      	mvns	r3, r3
 800a04a:	68f9      	ldr	r1, [r7, #12]
 800a04c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a050:	4013      	ands	r3, r2
 800a052:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	015a      	lsls	r2, r3, #5
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	4413      	add	r3, r2
 800a05c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	0159      	lsls	r1, r3, #5
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	440b      	add	r3, r1
 800a06a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a06e:	4619      	mov	r1, r3
 800a070:	4b35      	ldr	r3, [pc, #212]	; (800a148 <USB_DeactivateEndpoint+0x1b0>)
 800a072:	4013      	ands	r3, r2
 800a074:	600b      	str	r3, [r1, #0]
 800a076:	e060      	b.n	800a13a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	015a      	lsls	r2, r3, #5
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	4413      	add	r3, r2
 800a080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a08a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a08e:	d11f      	bne.n	800a0d0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	015a      	lsls	r2, r3, #5
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	4413      	add	r3, r2
 800a098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	68ba      	ldr	r2, [r7, #8]
 800a0a0:	0151      	lsls	r1, r2, #5
 800a0a2:	68fa      	ldr	r2, [r7, #12]
 800a0a4:	440a      	add	r2, r1
 800a0a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a0ae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	015a      	lsls	r2, r3, #5
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	0151      	lsls	r1, r2, #5
 800a0c2:	68fa      	ldr	r2, [r7, #12]
 800a0c4:	440a      	add	r2, r1
 800a0c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	f003 030f 	and.w	r3, r3, #15
 800a0e0:	2101      	movs	r1, #1
 800a0e2:	fa01 f303 	lsl.w	r3, r1, r3
 800a0e6:	041b      	lsls	r3, r3, #16
 800a0e8:	43db      	mvns	r3, r3
 800a0ea:	68f9      	ldr	r1, [r7, #12]
 800a0ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0f0:	4013      	ands	r3, r2
 800a0f2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0fa:	69da      	ldr	r2, [r3, #28]
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	f003 030f 	and.w	r3, r3, #15
 800a104:	2101      	movs	r1, #1
 800a106:	fa01 f303 	lsl.w	r3, r1, r3
 800a10a:	041b      	lsls	r3, r3, #16
 800a10c:	43db      	mvns	r3, r3
 800a10e:	68f9      	ldr	r1, [r7, #12]
 800a110:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a114:	4013      	ands	r3, r2
 800a116:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	015a      	lsls	r2, r3, #5
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	4413      	add	r3, r2
 800a120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	0159      	lsls	r1, r3, #5
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	440b      	add	r3, r1
 800a12e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a132:	4619      	mov	r1, r3
 800a134:	4b05      	ldr	r3, [pc, #20]	; (800a14c <USB_DeactivateEndpoint+0x1b4>)
 800a136:	4013      	ands	r3, r2
 800a138:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a13a:	2300      	movs	r3, #0
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3714      	adds	r7, #20
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr
 800a148:	ec337800 	.word	0xec337800
 800a14c:	eff37800 	.word	0xeff37800

0800a150 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b086      	sub	sp, #24
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	785b      	ldrb	r3, [r3, #1]
 800a168:	2b01      	cmp	r3, #1
 800a16a:	f040 810a 	bne.w	800a382 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	699b      	ldr	r3, [r3, #24]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d132      	bne.n	800a1dc <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	015a      	lsls	r2, r3, #5
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	4413      	add	r3, r2
 800a17e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a182:	691b      	ldr	r3, [r3, #16]
 800a184:	693a      	ldr	r2, [r7, #16]
 800a186:	0151      	lsls	r1, r2, #5
 800a188:	697a      	ldr	r2, [r7, #20]
 800a18a:	440a      	add	r2, r1
 800a18c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a190:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a194:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a198:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	015a      	lsls	r2, r3, #5
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	4413      	add	r3, r2
 800a1a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1a6:	691b      	ldr	r3, [r3, #16]
 800a1a8:	693a      	ldr	r2, [r7, #16]
 800a1aa:	0151      	lsls	r1, r2, #5
 800a1ac:	697a      	ldr	r2, [r7, #20]
 800a1ae:	440a      	add	r2, r1
 800a1b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a1b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	015a      	lsls	r2, r3, #5
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1c6:	691b      	ldr	r3, [r3, #16]
 800a1c8:	693a      	ldr	r2, [r7, #16]
 800a1ca:	0151      	lsls	r1, r2, #5
 800a1cc:	697a      	ldr	r2, [r7, #20]
 800a1ce:	440a      	add	r2, r1
 800a1d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1d4:	0cdb      	lsrs	r3, r3, #19
 800a1d6:	04db      	lsls	r3, r3, #19
 800a1d8:	6113      	str	r3, [r2, #16]
 800a1da:	e074      	b.n	800a2c6 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	015a      	lsls	r2, r3, #5
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1e8:	691b      	ldr	r3, [r3, #16]
 800a1ea:	693a      	ldr	r2, [r7, #16]
 800a1ec:	0151      	lsls	r1, r2, #5
 800a1ee:	697a      	ldr	r2, [r7, #20]
 800a1f0:	440a      	add	r2, r1
 800a1f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1f6:	0cdb      	lsrs	r3, r3, #19
 800a1f8:	04db      	lsls	r3, r3, #19
 800a1fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	015a      	lsls	r2, r3, #5
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	4413      	add	r3, r2
 800a204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a208:	691b      	ldr	r3, [r3, #16]
 800a20a:	693a      	ldr	r2, [r7, #16]
 800a20c:	0151      	lsls	r1, r2, #5
 800a20e:	697a      	ldr	r2, [r7, #20]
 800a210:	440a      	add	r2, r1
 800a212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a216:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a21a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a21e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	015a      	lsls	r2, r3, #5
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	4413      	add	r3, r2
 800a228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a22c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	6999      	ldr	r1, [r3, #24]
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	440b      	add	r3, r1
 800a238:	1e59      	subs	r1, r3, #1
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	fbb1 f3f3 	udiv	r3, r1, r3
 800a242:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a244:	4b9e      	ldr	r3, [pc, #632]	; (800a4c0 <USB_EPStartXfer+0x370>)
 800a246:	400b      	ands	r3, r1
 800a248:	6939      	ldr	r1, [r7, #16]
 800a24a:	0148      	lsls	r0, r1, #5
 800a24c:	6979      	ldr	r1, [r7, #20]
 800a24e:	4401      	add	r1, r0
 800a250:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a254:	4313      	orrs	r3, r2
 800a256:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	015a      	lsls	r2, r3, #5
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	4413      	add	r3, r2
 800a260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a264:	691a      	ldr	r2, [r3, #16]
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	699b      	ldr	r3, [r3, #24]
 800a26a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a26e:	6939      	ldr	r1, [r7, #16]
 800a270:	0148      	lsls	r0, r1, #5
 800a272:	6979      	ldr	r1, [r7, #20]
 800a274:	4401      	add	r1, r0
 800a276:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a27a:	4313      	orrs	r3, r2
 800a27c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	791b      	ldrb	r3, [r3, #4]
 800a282:	2b01      	cmp	r3, #1
 800a284:	d11f      	bne.n	800a2c6 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	015a      	lsls	r2, r3, #5
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	4413      	add	r3, r2
 800a28e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	693a      	ldr	r2, [r7, #16]
 800a296:	0151      	lsls	r1, r2, #5
 800a298:	697a      	ldr	r2, [r7, #20]
 800a29a:	440a      	add	r2, r1
 800a29c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a2a4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	015a      	lsls	r2, r3, #5
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2b2:	691b      	ldr	r3, [r3, #16]
 800a2b4:	693a      	ldr	r2, [r7, #16]
 800a2b6:	0151      	lsls	r1, r2, #5
 800a2b8:	697a      	ldr	r2, [r7, #20]
 800a2ba:	440a      	add	r2, r1
 800a2bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a2c4:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	015a      	lsls	r2, r3, #5
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	693a      	ldr	r2, [r7, #16]
 800a2d6:	0151      	lsls	r1, r2, #5
 800a2d8:	697a      	ldr	r2, [r7, #20]
 800a2da:	440a      	add	r2, r1
 800a2dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a2e4:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	791b      	ldrb	r3, [r3, #4]
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d015      	beq.n	800a31a <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	699b      	ldr	r3, [r3, #24]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f000 8106 	beq.w	800a504 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	f003 030f 	and.w	r3, r3, #15
 800a308:	2101      	movs	r1, #1
 800a30a:	fa01 f303 	lsl.w	r3, r1, r3
 800a30e:	6979      	ldr	r1, [r7, #20]
 800a310:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a314:	4313      	orrs	r3, r2
 800a316:	634b      	str	r3, [r1, #52]	; 0x34
 800a318:	e0f4      	b.n	800a504 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a326:	2b00      	cmp	r3, #0
 800a328:	d110      	bne.n	800a34c <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	015a      	lsls	r2, r3, #5
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	4413      	add	r3, r2
 800a332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	693a      	ldr	r2, [r7, #16]
 800a33a:	0151      	lsls	r1, r2, #5
 800a33c:	697a      	ldr	r2, [r7, #20]
 800a33e:	440a      	add	r2, r1
 800a340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a344:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a348:	6013      	str	r3, [r2, #0]
 800a34a:	e00f      	b.n	800a36c <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	015a      	lsls	r2, r3, #5
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	4413      	add	r3, r2
 800a354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	693a      	ldr	r2, [r7, #16]
 800a35c:	0151      	lsls	r1, r2, #5
 800a35e:	697a      	ldr	r2, [r7, #20]
 800a360:	440a      	add	r2, r1
 800a362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a36a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	6919      	ldr	r1, [r3, #16]
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	781a      	ldrb	r2, [r3, #0]
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	699b      	ldr	r3, [r3, #24]
 800a378:	b29b      	uxth	r3, r3
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 fa94 	bl	800a8a8 <USB_WritePacket>
 800a380:	e0c0      	b.n	800a504 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	015a      	lsls	r2, r3, #5
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	4413      	add	r3, r2
 800a38a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a38e:	691b      	ldr	r3, [r3, #16]
 800a390:	693a      	ldr	r2, [r7, #16]
 800a392:	0151      	lsls	r1, r2, #5
 800a394:	697a      	ldr	r2, [r7, #20]
 800a396:	440a      	add	r2, r1
 800a398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a39c:	0cdb      	lsrs	r3, r3, #19
 800a39e:	04db      	lsls	r3, r3, #19
 800a3a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	015a      	lsls	r2, r3, #5
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	4413      	add	r3, r2
 800a3aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ae:	691b      	ldr	r3, [r3, #16]
 800a3b0:	693a      	ldr	r2, [r7, #16]
 800a3b2:	0151      	lsls	r1, r2, #5
 800a3b4:	697a      	ldr	r2, [r7, #20]
 800a3b6:	440a      	add	r2, r1
 800a3b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a3c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a3c4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	699b      	ldr	r3, [r3, #24]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d123      	bne.n	800a416 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	015a      	lsls	r2, r3, #5
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3da:	691a      	ldr	r2, [r3, #16]
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3e4:	6939      	ldr	r1, [r7, #16]
 800a3e6:	0148      	lsls	r0, r1, #5
 800a3e8:	6979      	ldr	r1, [r7, #20]
 800a3ea:	4401      	add	r1, r0
 800a3ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	015a      	lsls	r2, r3, #5
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a400:	691b      	ldr	r3, [r3, #16]
 800a402:	693a      	ldr	r2, [r7, #16]
 800a404:	0151      	lsls	r1, r2, #5
 800a406:	697a      	ldr	r2, [r7, #20]
 800a408:	440a      	add	r2, r1
 800a40a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a40e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a412:	6113      	str	r3, [r2, #16]
 800a414:	e037      	b.n	800a486 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	699a      	ldr	r2, [r3, #24]
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	4413      	add	r3, r2
 800a420:	1e5a      	subs	r2, r3, #1
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	68db      	ldr	r3, [r3, #12]
 800a426:	fbb2 f3f3 	udiv	r3, r2, r3
 800a42a:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	89fa      	ldrh	r2, [r7, #14]
 800a432:	fb03 f202 	mul.w	r2, r3, r2
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	015a      	lsls	r2, r3, #5
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	4413      	add	r3, r2
 800a442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a446:	691a      	ldr	r2, [r3, #16]
 800a448:	89fb      	ldrh	r3, [r7, #14]
 800a44a:	04d9      	lsls	r1, r3, #19
 800a44c:	4b1c      	ldr	r3, [pc, #112]	; (800a4c0 <USB_EPStartXfer+0x370>)
 800a44e:	400b      	ands	r3, r1
 800a450:	6939      	ldr	r1, [r7, #16]
 800a452:	0148      	lsls	r0, r1, #5
 800a454:	6979      	ldr	r1, [r7, #20]
 800a456:	4401      	add	r1, r0
 800a458:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a45c:	4313      	orrs	r3, r2
 800a45e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	015a      	lsls	r2, r3, #5
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	4413      	add	r3, r2
 800a468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a46c:	691a      	ldr	r2, [r3, #16]
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	69db      	ldr	r3, [r3, #28]
 800a472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a476:	6939      	ldr	r1, [r7, #16]
 800a478:	0148      	lsls	r0, r1, #5
 800a47a:	6979      	ldr	r1, [r7, #20]
 800a47c:	4401      	add	r1, r0
 800a47e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a482:	4313      	orrs	r3, r2
 800a484:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	791b      	ldrb	r3, [r3, #4]
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d12a      	bne.n	800a4e4 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a494:	689b      	ldr	r3, [r3, #8]
 800a496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d112      	bne.n	800a4c4 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	015a      	lsls	r2, r3, #5
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	693a      	ldr	r2, [r7, #16]
 800a4ae:	0151      	lsls	r1, r2, #5
 800a4b0:	697a      	ldr	r2, [r7, #20]
 800a4b2:	440a      	add	r2, r1
 800a4b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a4bc:	6013      	str	r3, [r2, #0]
 800a4be:	e011      	b.n	800a4e4 <USB_EPStartXfer+0x394>
 800a4c0:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	015a      	lsls	r2, r3, #5
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	4413      	add	r3, r2
 800a4cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	693a      	ldr	r2, [r7, #16]
 800a4d4:	0151      	lsls	r1, r2, #5
 800a4d6:	697a      	ldr	r2, [r7, #20]
 800a4d8:	440a      	add	r2, r1
 800a4da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4e2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	015a      	lsls	r2, r3, #5
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	4413      	add	r3, r2
 800a4ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	693a      	ldr	r2, [r7, #16]
 800a4f4:	0151      	lsls	r1, r2, #5
 800a4f6:	697a      	ldr	r2, [r7, #20]
 800a4f8:	440a      	add	r2, r1
 800a4fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a502:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a504:	2300      	movs	r3, #0
}
 800a506:	4618      	mov	r0, r3
 800a508:	3718      	adds	r7, #24
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop

0800a510 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a510:	b480      	push	{r7}
 800a512:	b085      	sub	sp, #20
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	785b      	ldrb	r3, [r3, #1]
 800a528:	2b01      	cmp	r3, #1
 800a52a:	f040 80ab 	bne.w	800a684 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	699b      	ldr	r3, [r3, #24]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d132      	bne.n	800a59c <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	015a      	lsls	r2, r3, #5
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	4413      	add	r3, r2
 800a53e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a542:	691b      	ldr	r3, [r3, #16]
 800a544:	68ba      	ldr	r2, [r7, #8]
 800a546:	0151      	lsls	r1, r2, #5
 800a548:	68fa      	ldr	r2, [r7, #12]
 800a54a:	440a      	add	r2, r1
 800a54c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a550:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a554:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a558:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	015a      	lsls	r2, r3, #5
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	4413      	add	r3, r2
 800a562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a566:	691b      	ldr	r3, [r3, #16]
 800a568:	68ba      	ldr	r2, [r7, #8]
 800a56a:	0151      	lsls	r1, r2, #5
 800a56c:	68fa      	ldr	r2, [r7, #12]
 800a56e:	440a      	add	r2, r1
 800a570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a574:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a578:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	015a      	lsls	r2, r3, #5
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	4413      	add	r3, r2
 800a582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	68ba      	ldr	r2, [r7, #8]
 800a58a:	0151      	lsls	r1, r2, #5
 800a58c:	68fa      	ldr	r2, [r7, #12]
 800a58e:	440a      	add	r2, r1
 800a590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a594:	0cdb      	lsrs	r3, r3, #19
 800a596:	04db      	lsls	r3, r3, #19
 800a598:	6113      	str	r3, [r2, #16]
 800a59a:	e04e      	b.n	800a63a <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	015a      	lsls	r2, r3, #5
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	4413      	add	r3, r2
 800a5a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5a8:	691b      	ldr	r3, [r3, #16]
 800a5aa:	68ba      	ldr	r2, [r7, #8]
 800a5ac:	0151      	lsls	r1, r2, #5
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	440a      	add	r2, r1
 800a5b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5b6:	0cdb      	lsrs	r3, r3, #19
 800a5b8:	04db      	lsls	r3, r3, #19
 800a5ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	015a      	lsls	r2, r3, #5
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	4413      	add	r3, r2
 800a5c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5c8:	691b      	ldr	r3, [r3, #16]
 800a5ca:	68ba      	ldr	r2, [r7, #8]
 800a5cc:	0151      	lsls	r1, r2, #5
 800a5ce:	68fa      	ldr	r2, [r7, #12]
 800a5d0:	440a      	add	r2, r1
 800a5d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a5da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a5de:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	699a      	ldr	r2, [r3, #24]
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d903      	bls.n	800a5f4 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	68da      	ldr	r2, [r3, #12]
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	015a      	lsls	r2, r3, #5
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a600:	691b      	ldr	r3, [r3, #16]
 800a602:	68ba      	ldr	r2, [r7, #8]
 800a604:	0151      	lsls	r1, r2, #5
 800a606:	68fa      	ldr	r2, [r7, #12]
 800a608:	440a      	add	r2, r1
 800a60a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a60e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a612:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	015a      	lsls	r2, r3, #5
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	4413      	add	r3, r2
 800a61c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a620:	691a      	ldr	r2, [r3, #16]
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	699b      	ldr	r3, [r3, #24]
 800a626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a62a:	68b9      	ldr	r1, [r7, #8]
 800a62c:	0148      	lsls	r0, r1, #5
 800a62e:	68f9      	ldr	r1, [r7, #12]
 800a630:	4401      	add	r1, r0
 800a632:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a636:	4313      	orrs	r3, r2
 800a638:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	015a      	lsls	r2, r3, #5
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	4413      	add	r3, r2
 800a642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	68ba      	ldr	r2, [r7, #8]
 800a64a:	0151      	lsls	r1, r2, #5
 800a64c:	68fa      	ldr	r2, [r7, #12]
 800a64e:	440a      	add	r2, r1
 800a650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a654:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a658:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	699b      	ldr	r3, [r3, #24]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d071      	beq.n	800a746 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	f003 030f 	and.w	r3, r3, #15
 800a672:	2101      	movs	r1, #1
 800a674:	fa01 f303 	lsl.w	r3, r1, r3
 800a678:	68f9      	ldr	r1, [r7, #12]
 800a67a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a67e:	4313      	orrs	r3, r2
 800a680:	634b      	str	r3, [r1, #52]	; 0x34
 800a682:	e060      	b.n	800a746 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	015a      	lsls	r2, r3, #5
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	4413      	add	r3, r2
 800a68c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a690:	691b      	ldr	r3, [r3, #16]
 800a692:	68ba      	ldr	r2, [r7, #8]
 800a694:	0151      	lsls	r1, r2, #5
 800a696:	68fa      	ldr	r2, [r7, #12]
 800a698:	440a      	add	r2, r1
 800a69a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a69e:	0cdb      	lsrs	r3, r3, #19
 800a6a0:	04db      	lsls	r3, r3, #19
 800a6a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	015a      	lsls	r2, r3, #5
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6b0:	691b      	ldr	r3, [r3, #16]
 800a6b2:	68ba      	ldr	r2, [r7, #8]
 800a6b4:	0151      	lsls	r1, r2, #5
 800a6b6:	68fa      	ldr	r2, [r7, #12]
 800a6b8:	440a      	add	r2, r1
 800a6ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a6c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a6c6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	699b      	ldr	r3, [r3, #24]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d003      	beq.n	800a6d8 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	68da      	ldr	r2, [r3, #12]
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	68da      	ldr	r2, [r3, #12]
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	015a      	lsls	r2, r3, #5
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	68ba      	ldr	r2, [r7, #8]
 800a6f0:	0151      	lsls	r1, r2, #5
 800a6f2:	68fa      	ldr	r2, [r7, #12]
 800a6f4:	440a      	add	r2, r1
 800a6f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a6fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	015a      	lsls	r2, r3, #5
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	4413      	add	r3, r2
 800a708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a70c:	691a      	ldr	r2, [r3, #16]
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	69db      	ldr	r3, [r3, #28]
 800a712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a716:	68b9      	ldr	r1, [r7, #8]
 800a718:	0148      	lsls	r0, r1, #5
 800a71a:	68f9      	ldr	r1, [r7, #12]
 800a71c:	4401      	add	r1, r0
 800a71e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a722:	4313      	orrs	r3, r2
 800a724:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	015a      	lsls	r2, r3, #5
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	4413      	add	r3, r2
 800a72e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	68ba      	ldr	r2, [r7, #8]
 800a736:	0151      	lsls	r1, r2, #5
 800a738:	68fa      	ldr	r2, [r7, #12]
 800a73a:	440a      	add	r2, r1
 800a73c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a740:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a744:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a746:	2300      	movs	r3, #0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3714      	adds	r7, #20
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a754:	b480      	push	{r7}
 800a756:	b087      	sub	sp, #28
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a75e:	2300      	movs	r3, #0
 800a760:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a762:	2300      	movs	r3, #0
 800a764:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	785b      	ldrb	r3, [r3, #1]
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d14a      	bne.n	800a808 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	015a      	lsls	r2, r3, #5
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	4413      	add	r3, r2
 800a77c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a786:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a78a:	f040 8086 	bne.w	800a89a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	015a      	lsls	r2, r3, #5
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	4413      	add	r3, r2
 800a798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	683a      	ldr	r2, [r7, #0]
 800a7a0:	7812      	ldrb	r2, [r2, #0]
 800a7a2:	0151      	lsls	r1, r2, #5
 800a7a4:	693a      	ldr	r2, [r7, #16]
 800a7a6:	440a      	add	r2, r1
 800a7a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a7b0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	015a      	lsls	r2, r3, #5
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	4413      	add	r3, r2
 800a7bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	683a      	ldr	r2, [r7, #0]
 800a7c4:	7812      	ldrb	r2, [r2, #0]
 800a7c6:	0151      	lsls	r1, r2, #5
 800a7c8:	693a      	ldr	r2, [r7, #16]
 800a7ca:	440a      	add	r2, r1
 800a7cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a7d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	3301      	adds	r3, #1
 800a7da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f242 7210 	movw	r2, #10000	; 0x2710
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d902      	bls.n	800a7ec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	75fb      	strb	r3, [r7, #23]
          break;
 800a7ea:	e056      	b.n	800a89a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	015a      	lsls	r2, r3, #5
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	4413      	add	r3, r2
 800a7f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a800:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a804:	d0e7      	beq.n	800a7d6 <USB_EPStopXfer+0x82>
 800a806:	e048      	b.n	800a89a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	015a      	lsls	r2, r3, #5
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	4413      	add	r3, r2
 800a812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a81c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a820:	d13b      	bne.n	800a89a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	015a      	lsls	r2, r3, #5
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	4413      	add	r3, r2
 800a82c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	683a      	ldr	r2, [r7, #0]
 800a834:	7812      	ldrb	r2, [r2, #0]
 800a836:	0151      	lsls	r1, r2, #5
 800a838:	693a      	ldr	r2, [r7, #16]
 800a83a:	440a      	add	r2, r1
 800a83c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a840:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a844:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	015a      	lsls	r2, r3, #5
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	4413      	add	r3, r2
 800a850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	683a      	ldr	r2, [r7, #0]
 800a858:	7812      	ldrb	r2, [r2, #0]
 800a85a:	0151      	lsls	r1, r2, #5
 800a85c:	693a      	ldr	r2, [r7, #16]
 800a85e:	440a      	add	r2, r1
 800a860:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a864:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a868:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	3301      	adds	r3, #1
 800a86e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f242 7210 	movw	r2, #10000	; 0x2710
 800a876:	4293      	cmp	r3, r2
 800a878:	d902      	bls.n	800a880 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a87a:	2301      	movs	r3, #1
 800a87c:	75fb      	strb	r3, [r7, #23]
          break;
 800a87e:	e00c      	b.n	800a89a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	015a      	lsls	r2, r3, #5
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	4413      	add	r3, r2
 800a88a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a894:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a898:	d0e7      	beq.n	800a86a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a89a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	371c      	adds	r7, #28
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b089      	sub	sp, #36	; 0x24
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	4611      	mov	r1, r2
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	71fb      	strb	r3, [r7, #7]
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800a8c6:	88bb      	ldrh	r3, [r7, #4]
 800a8c8:	3303      	adds	r3, #3
 800a8ca:	089b      	lsrs	r3, r3, #2
 800a8cc:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	61bb      	str	r3, [r7, #24]
 800a8d2:	e018      	b.n	800a906 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a8d4:	79fb      	ldrb	r3, [r7, #7]
 800a8d6:	031a      	lsls	r2, r3, #12
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	4413      	add	r3, r2
 800a8dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	69fb      	ldr	r3, [r7, #28]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	6013      	str	r3, [r2, #0]
    pSrc++;
 800a8e8:	69fb      	ldr	r3, [r7, #28]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a8ee:	69fb      	ldr	r3, [r7, #28]
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a8f4:	69fb      	ldr	r3, [r7, #28]
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a8fa:	69fb      	ldr	r3, [r7, #28]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	3301      	adds	r3, #1
 800a904:	61bb      	str	r3, [r7, #24]
 800a906:	69ba      	ldr	r2, [r7, #24]
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d3e2      	bcc.n	800a8d4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800a90e:	2300      	movs	r3, #0
}
 800a910:	4618      	mov	r0, r3
 800a912:	3724      	adds	r7, #36	; 0x24
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b08b      	sub	sp, #44	; 0x2c
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	60b9      	str	r1, [r7, #8]
 800a926:	4613      	mov	r3, r2
 800a928:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a932:	88fb      	ldrh	r3, [r7, #6]
 800a934:	089b      	lsrs	r3, r3, #2
 800a936:	b29b      	uxth	r3, r3
 800a938:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a93a:	88fb      	ldrh	r3, [r7, #6]
 800a93c:	f003 0303 	and.w	r3, r3, #3
 800a940:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a942:	2300      	movs	r3, #0
 800a944:	623b      	str	r3, [r7, #32]
 800a946:	e014      	b.n	800a972 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a948:	69bb      	ldr	r3, [r7, #24]
 800a94a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a952:	601a      	str	r2, [r3, #0]
    pDest++;
 800a954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a956:	3301      	adds	r3, #1
 800a958:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95c:	3301      	adds	r3, #1
 800a95e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a962:	3301      	adds	r3, #1
 800a964:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a968:	3301      	adds	r3, #1
 800a96a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a96c:	6a3b      	ldr	r3, [r7, #32]
 800a96e:	3301      	adds	r3, #1
 800a970:	623b      	str	r3, [r7, #32]
 800a972:	6a3a      	ldr	r2, [r7, #32]
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	429a      	cmp	r2, r3
 800a978:	d3e6      	bcc.n	800a948 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a97a:	8bfb      	ldrh	r3, [r7, #30]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d01e      	beq.n	800a9be <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a980:	2300      	movs	r3, #0
 800a982:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a98a:	461a      	mov	r2, r3
 800a98c:	f107 0310 	add.w	r3, r7, #16
 800a990:	6812      	ldr	r2, [r2, #0]
 800a992:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a994:	693a      	ldr	r2, [r7, #16]
 800a996:	6a3b      	ldr	r3, [r7, #32]
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	00db      	lsls	r3, r3, #3
 800a99c:	fa22 f303 	lsr.w	r3, r2, r3
 800a9a0:	b2da      	uxtb	r2, r3
 800a9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a4:	701a      	strb	r2, [r3, #0]
      i++;
 800a9a6:	6a3b      	ldr	r3, [r7, #32]
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	623b      	str	r3, [r7, #32]
      pDest++;
 800a9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a9b2:	8bfb      	ldrh	r3, [r7, #30]
 800a9b4:	3b01      	subs	r3, #1
 800a9b6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a9b8:	8bfb      	ldrh	r3, [r7, #30]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d1ea      	bne.n	800a994 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	372c      	adds	r7, #44	; 0x2c
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b085      	sub	sp, #20
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	785b      	ldrb	r3, [r3, #1]
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d12c      	bne.n	800aa42 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	015a      	lsls	r2, r3, #5
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	4413      	add	r3, r2
 800a9f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	db12      	blt.n	800aa20 <USB_EPSetStall+0x54>
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d00f      	beq.n	800aa20 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	015a      	lsls	r2, r3, #5
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	4413      	add	r3, r2
 800aa08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	68ba      	ldr	r2, [r7, #8]
 800aa10:	0151      	lsls	r1, r2, #5
 800aa12:	68fa      	ldr	r2, [r7, #12]
 800aa14:	440a      	add	r2, r1
 800aa16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aa1e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	015a      	lsls	r2, r3, #5
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	4413      	add	r3, r2
 800aa28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	68ba      	ldr	r2, [r7, #8]
 800aa30:	0151      	lsls	r1, r2, #5
 800aa32:	68fa      	ldr	r2, [r7, #12]
 800aa34:	440a      	add	r2, r1
 800aa36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aa3e:	6013      	str	r3, [r2, #0]
 800aa40:	e02b      	b.n	800aa9a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	015a      	lsls	r2, r3, #5
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	4413      	add	r3, r2
 800aa4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	db12      	blt.n	800aa7a <USB_EPSetStall+0xae>
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d00f      	beq.n	800aa7a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	015a      	lsls	r2, r3, #5
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	4413      	add	r3, r2
 800aa62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	68ba      	ldr	r2, [r7, #8]
 800aa6a:	0151      	lsls	r1, r2, #5
 800aa6c:	68fa      	ldr	r2, [r7, #12]
 800aa6e:	440a      	add	r2, r1
 800aa70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aa78:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	015a      	lsls	r2, r3, #5
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	4413      	add	r3, r2
 800aa82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	68ba      	ldr	r2, [r7, #8]
 800aa8a:	0151      	lsls	r1, r2, #5
 800aa8c:	68fa      	ldr	r2, [r7, #12]
 800aa8e:	440a      	add	r2, r1
 800aa90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aa98:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3714      	adds	r7, #20
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b085      	sub	sp, #20
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	785b      	ldrb	r3, [r3, #1]
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d128      	bne.n	800ab16 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	015a      	lsls	r2, r3, #5
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	4413      	add	r3, r2
 800aacc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	68ba      	ldr	r2, [r7, #8]
 800aad4:	0151      	lsls	r1, r2, #5
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	440a      	add	r2, r1
 800aada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aade:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aae2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	791b      	ldrb	r3, [r3, #4]
 800aae8:	2b03      	cmp	r3, #3
 800aaea:	d003      	beq.n	800aaf4 <USB_EPClearStall+0x4c>
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	791b      	ldrb	r3, [r3, #4]
 800aaf0:	2b02      	cmp	r3, #2
 800aaf2:	d138      	bne.n	800ab66 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	015a      	lsls	r2, r3, #5
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	4413      	add	r3, r2
 800aafc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	68ba      	ldr	r2, [r7, #8]
 800ab04:	0151      	lsls	r1, r2, #5
 800ab06:	68fa      	ldr	r2, [r7, #12]
 800ab08:	440a      	add	r2, r1
 800ab0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab12:	6013      	str	r3, [r2, #0]
 800ab14:	e027      	b.n	800ab66 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	015a      	lsls	r2, r3, #5
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	68ba      	ldr	r2, [r7, #8]
 800ab26:	0151      	lsls	r1, r2, #5
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	440a      	add	r2, r1
 800ab2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ab34:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	791b      	ldrb	r3, [r3, #4]
 800ab3a:	2b03      	cmp	r3, #3
 800ab3c:	d003      	beq.n	800ab46 <USB_EPClearStall+0x9e>
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	791b      	ldrb	r3, [r3, #4]
 800ab42:	2b02      	cmp	r3, #2
 800ab44:	d10f      	bne.n	800ab66 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	015a      	lsls	r2, r3, #5
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	68ba      	ldr	r2, [r7, #8]
 800ab56:	0151      	lsls	r1, r2, #5
 800ab58:	68fa      	ldr	r2, [r7, #12]
 800ab5a:	440a      	add	r2, r1
 800ab5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab64:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ab66:	2300      	movs	r3, #0
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3714      	adds	r7, #20
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr

0800ab74 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b085      	sub	sp, #20
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	68fa      	ldr	r2, [r7, #12]
 800ab8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab92:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ab96:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	78fb      	ldrb	r3, [r7, #3]
 800aba2:	011b      	lsls	r3, r3, #4
 800aba4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800aba8:	68f9      	ldr	r1, [r7, #12]
 800abaa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800abae:	4313      	orrs	r3, r2
 800abb0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800abb2:	2300      	movs	r3, #0
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3714      	adds	r7, #20
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr

0800abc0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b085      	sub	sp, #20
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	68fa      	ldr	r2, [r7, #12]
 800abd6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800abda:	f023 0303 	bic.w	r3, r3, #3
 800abde:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800abee:	f023 0302 	bic.w	r3, r3, #2
 800abf2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800abf4:	2300      	movs	r3, #0
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3714      	adds	r7, #20
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr

0800ac02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ac02:	b480      	push	{r7}
 800ac04:	b085      	sub	sp, #20
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ac1c:	f023 0303 	bic.w	r3, r3, #3
 800ac20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	68fa      	ldr	r2, [r7, #12]
 800ac2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac30:	f043 0302 	orr.w	r3, r3, #2
 800ac34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac36:	2300      	movs	r3, #0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3714      	adds	r7, #20
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr

0800ac44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b085      	sub	sp, #20
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	695b      	ldr	r3, [r3, #20]
 800ac50:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	699b      	ldr	r3, [r3, #24]
 800ac56:	68fa      	ldr	r2, [r7, #12]
 800ac58:	4013      	ands	r3, r2
 800ac5a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3714      	adds	r7, #20
 800ac62:	46bd      	mov	sp, r7
 800ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac68:	4770      	bx	lr

0800ac6a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac6a:	b480      	push	{r7}
 800ac6c:	b085      	sub	sp, #20
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac7c:	699b      	ldr	r3, [r3, #24]
 800ac7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac86:	69db      	ldr	r3, [r3, #28]
 800ac88:	68ba      	ldr	r2, [r7, #8]
 800ac8a:	4013      	ands	r3, r2
 800ac8c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	0c1b      	lsrs	r3, r3, #16
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3714      	adds	r7, #20
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr

0800ac9e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac9e:	b480      	push	{r7}
 800aca0:	b085      	sub	sp, #20
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acb0:	699b      	ldr	r3, [r3, #24]
 800acb2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acba:	69db      	ldr	r3, [r3, #28]
 800acbc:	68ba      	ldr	r2, [r7, #8]
 800acbe:	4013      	ands	r3, r2
 800acc0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	b29b      	uxth	r3, r3
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3714      	adds	r7, #20
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr

0800acd2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800acd2:	b480      	push	{r7}
 800acd4:	b085      	sub	sp, #20
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	6078      	str	r0, [r7, #4]
 800acda:	460b      	mov	r3, r1
 800acdc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ace2:	78fb      	ldrb	r3, [r7, #3]
 800ace4:	015a      	lsls	r2, r3, #5
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	4413      	add	r3, r2
 800acea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acf8:	695b      	ldr	r3, [r3, #20]
 800acfa:	68ba      	ldr	r2, [r7, #8]
 800acfc:	4013      	ands	r3, r2
 800acfe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ad00:	68bb      	ldr	r3, [r7, #8]
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3714      	adds	r7, #20
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr

0800ad0e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ad0e:	b480      	push	{r7}
 800ad10:	b087      	sub	sp, #28
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
 800ad16:	460b      	mov	r3, r1
 800ad18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad24:	691b      	ldr	r3, [r3, #16]
 800ad26:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad30:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ad32:	78fb      	ldrb	r3, [r7, #3]
 800ad34:	f003 030f 	and.w	r3, r3, #15
 800ad38:	68fa      	ldr	r2, [r7, #12]
 800ad3a:	fa22 f303 	lsr.w	r3, r2, r3
 800ad3e:	01db      	lsls	r3, r3, #7
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	693a      	ldr	r2, [r7, #16]
 800ad44:	4313      	orrs	r3, r2
 800ad46:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ad48:	78fb      	ldrb	r3, [r7, #3]
 800ad4a:	015a      	lsls	r2, r3, #5
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	4413      	add	r3, r2
 800ad50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad54:	689b      	ldr	r3, [r3, #8]
 800ad56:	693a      	ldr	r2, [r7, #16]
 800ad58:	4013      	ands	r3, r2
 800ad5a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ad5c:	68bb      	ldr	r3, [r7, #8]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	371c      	adds	r7, #28
 800ad62:	46bd      	mov	sp, r7
 800ad64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad68:	4770      	bx	lr

0800ad6a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ad6a:	b480      	push	{r7}
 800ad6c:	b083      	sub	sp, #12
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	695b      	ldr	r3, [r3, #20]
 800ad76:	f003 0301 	and.w	r3, r3, #1
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	370c      	adds	r7, #12
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr

0800ad86 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ad86:	b480      	push	{r7}
 800ad88:	b085      	sub	sp, #20
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ada0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ada4:	f023 0307 	bic.w	r3, r3, #7
 800ada8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	68fa      	ldr	r2, [r7, #12]
 800adb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800adb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800adbc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800adbe:	2300      	movs	r3, #0
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3714      	adds	r7, #20
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr

0800adcc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800adcc:	b480      	push	{r7}
 800adce:	b085      	sub	sp, #20
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	333c      	adds	r3, #60	; 0x3c
 800adde:	3304      	adds	r3, #4
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	4a1c      	ldr	r2, [pc, #112]	; (800ae58 <USB_EP0_OutStart+0x8c>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d90a      	bls.n	800ae02 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800adf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800adfc:	d101      	bne.n	800ae02 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800adfe:	2300      	movs	r3, #0
 800ae00:	e024      	b.n	800ae4c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae08:	461a      	mov	r2, r3
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae14:	691b      	ldr	r3, [r3, #16]
 800ae16:	68fa      	ldr	r2, [r7, #12]
 800ae18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae28:	691b      	ldr	r3, [r3, #16]
 800ae2a:	68fa      	ldr	r2, [r7, #12]
 800ae2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae30:	f043 0318 	orr.w	r3, r3, #24
 800ae34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae3c:	691b      	ldr	r3, [r3, #16]
 800ae3e:	68fa      	ldr	r2, [r7, #12]
 800ae40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae44:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ae48:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800ae4a:	2300      	movs	r3, #0
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3714      	adds	r7, #20
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr
 800ae58:	4f54300a 	.word	0x4f54300a

0800ae5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b085      	sub	sp, #20
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ae64:	2300      	movs	r3, #0
 800ae66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	4a13      	ldr	r2, [pc, #76]	; (800aec0 <USB_CoreReset+0x64>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d901      	bls.n	800ae7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ae76:	2303      	movs	r3, #3
 800ae78:	e01b      	b.n	800aeb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	691b      	ldr	r3, [r3, #16]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	daf2      	bge.n	800ae68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ae82:	2300      	movs	r3, #0
 800ae84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	691b      	ldr	r3, [r3, #16]
 800ae8a:	f043 0201 	orr.w	r2, r3, #1
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	3301      	adds	r3, #1
 800ae96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	4a09      	ldr	r2, [pc, #36]	; (800aec0 <USB_CoreReset+0x64>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d901      	bls.n	800aea4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aea0:	2303      	movs	r3, #3
 800aea2:	e006      	b.n	800aeb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	691b      	ldr	r3, [r3, #16]
 800aea8:	f003 0301 	and.w	r3, r3, #1
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d0f0      	beq.n	800ae92 <USB_CoreReset+0x36>

  return HAL_OK;
 800aeb0:	2300      	movs	r3, #0
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3714      	adds	r7, #20
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop
 800aec0:	00030d40 	.word	0x00030d40

0800aec4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800aec8:	4904      	ldr	r1, [pc, #16]	; (800aedc <MX_FATFS_Init+0x18>)
 800aeca:	4805      	ldr	r0, [pc, #20]	; (800aee0 <MX_FATFS_Init+0x1c>)
 800aecc:	f001 fe6e 	bl	800cbac <FATFS_LinkDriver>
 800aed0:	4603      	mov	r3, r0
 800aed2:	461a      	mov	r2, r3
 800aed4:	4b03      	ldr	r3, [pc, #12]	; (800aee4 <MX_FATFS_Init+0x20>)
 800aed6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aed8:	bf00      	nop
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	200004b0 	.word	0x200004b0
 800aee0:	0800d958 	.word	0x0800d958
 800aee4:	200004ac 	.word	0x200004ac

0800aee8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b082      	sub	sp, #8
 800aeec:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800aeee:	2300      	movs	r3, #0
 800aef0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800aef2:	f000 f879 	bl	800afe8 <BSP_SD_IsDetected>
 800aef6:	4603      	mov	r3, r0
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d001      	beq.n	800af00 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800aefc:	2302      	movs	r3, #2
 800aefe:	e012      	b.n	800af26 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800af00:	480b      	ldr	r0, [pc, #44]	; (800af30 <BSP_SD_Init+0x48>)
 800af02:	f7fa fcd7 	bl	80058b4 <HAL_SD_Init>
 800af06:	4603      	mov	r3, r0
 800af08:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800af0a:	79fb      	ldrb	r3, [r7, #7]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d109      	bne.n	800af24 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800af10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800af14:	4806      	ldr	r0, [pc, #24]	; (800af30 <BSP_SD_Init+0x48>)
 800af16:	f7fb fba3 	bl	8006660 <HAL_SD_ConfigWideBusOperation>
 800af1a:	4603      	mov	r3, r0
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d001      	beq.n	800af24 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800af20:	2301      	movs	r3, #1
 800af22:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800af24:	79fb      	ldrb	r3, [r7, #7]
}
 800af26:	4618      	mov	r0, r3
 800af28:	3708      	adds	r7, #8
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	20000254 	.word	0x20000254

0800af34 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b088      	sub	sp, #32
 800af38:	af02      	add	r7, sp, #8
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
 800af40:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800af42:	2300      	movs	r3, #0
 800af44:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	9300      	str	r3, [sp, #0]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	68ba      	ldr	r2, [r7, #8]
 800af4e:	68f9      	ldr	r1, [r7, #12]
 800af50:	4806      	ldr	r0, [pc, #24]	; (800af6c <BSP_SD_ReadBlocks+0x38>)
 800af52:	f7fa fdd7 	bl	8005b04 <HAL_SD_ReadBlocks>
 800af56:	4603      	mov	r3, r0
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d001      	beq.n	800af60 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800af5c:	2301      	movs	r3, #1
 800af5e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800af60:	7dfb      	ldrb	r3, [r7, #23]
}
 800af62:	4618      	mov	r0, r3
 800af64:	3718      	adds	r7, #24
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	20000254 	.word	0x20000254

0800af70 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b088      	sub	sp, #32
 800af74:	af02      	add	r7, sp, #8
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	607a      	str	r2, [r7, #4]
 800af7c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800af7e:	2300      	movs	r3, #0
 800af80:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	9300      	str	r3, [sp, #0]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	68ba      	ldr	r2, [r7, #8]
 800af8a:	68f9      	ldr	r1, [r7, #12]
 800af8c:	4806      	ldr	r0, [pc, #24]	; (800afa8 <BSP_SD_WriteBlocks+0x38>)
 800af8e:	f7fa ff4b 	bl	8005e28 <HAL_SD_WriteBlocks>
 800af92:	4603      	mov	r3, r0
 800af94:	2b00      	cmp	r3, #0
 800af96:	d001      	beq.n	800af9c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800af98:	2301      	movs	r3, #1
 800af9a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800af9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3718      	adds	r7, #24
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop
 800afa8:	20000254 	.word	0x20000254

0800afac <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800afb0:	4805      	ldr	r0, [pc, #20]	; (800afc8 <BSP_SD_GetCardState+0x1c>)
 800afb2:	f7fb fc69 	bl	8006888 <HAL_SD_GetCardState>
 800afb6:	4603      	mov	r3, r0
 800afb8:	2b04      	cmp	r3, #4
 800afba:	bf14      	ite	ne
 800afbc:	2301      	movne	r3, #1
 800afbe:	2300      	moveq	r3, #0
 800afc0:	b2db      	uxtb	r3, r3
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	bd80      	pop	{r7, pc}
 800afc6:	bf00      	nop
 800afc8:	20000254 	.word	0x20000254

0800afcc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800afd4:	6879      	ldr	r1, [r7, #4]
 800afd6:	4803      	ldr	r0, [pc, #12]	; (800afe4 <BSP_SD_GetCardInfo+0x18>)
 800afd8:	f7fb fb16 	bl	8006608 <HAL_SD_GetCardInfo>
}
 800afdc:	bf00      	nop
 800afde:	3708      	adds	r7, #8
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	20000254 	.word	0x20000254

0800afe8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b082      	sub	sp, #8
 800afec:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800afee:	2301      	movs	r3, #1
 800aff0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800aff2:	f000 f80b 	bl	800b00c <BSP_PlatformIsDetected>
 800aff6:	4603      	mov	r3, r0
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d101      	bne.n	800b000 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800affc:	2300      	movs	r3, #0
 800affe:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b000:	79fb      	ldrb	r3, [r7, #7]
 800b002:	b2db      	uxtb	r3, r3
}
 800b004:	4618      	mov	r0, r3
 800b006:	3708      	adds	r7, #8
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b012:	2301      	movs	r3, #1
 800b014:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b016:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b01a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b01e:	f7f6 fbf5 	bl	800180c <HAL_GPIO_ReadPin>
 800b022:	4603      	mov	r3, r0
 800b024:	2b00      	cmp	r3, #0
 800b026:	d001      	beq.n	800b02c <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 800b028:	2300      	movs	r3, #0
 800b02a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b02c:	79fb      	ldrb	r3, [r7, #7]
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3708      	adds	r7, #8
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
	...

0800b038 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	4603      	mov	r3, r0
 800b040:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b042:	4b0b      	ldr	r3, [pc, #44]	; (800b070 <SD_CheckStatus+0x38>)
 800b044:	2201      	movs	r2, #1
 800b046:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b048:	f7ff ffb0 	bl	800afac <BSP_SD_GetCardState>
 800b04c:	4603      	mov	r3, r0
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d107      	bne.n	800b062 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b052:	4b07      	ldr	r3, [pc, #28]	; (800b070 <SD_CheckStatus+0x38>)
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	b2db      	uxtb	r3, r3
 800b058:	f023 0301 	bic.w	r3, r3, #1
 800b05c:	b2da      	uxtb	r2, r3
 800b05e:	4b04      	ldr	r3, [pc, #16]	; (800b070 <SD_CheckStatus+0x38>)
 800b060:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b062:	4b03      	ldr	r3, [pc, #12]	; (800b070 <SD_CheckStatus+0x38>)
 800b064:	781b      	ldrb	r3, [r3, #0]
 800b066:	b2db      	uxtb	r3, r3
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3708      	adds	r7, #8
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	20000009 	.word	0x20000009

0800b074 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	4603      	mov	r3, r0
 800b07c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b07e:	4b0b      	ldr	r3, [pc, #44]	; (800b0ac <SD_initialize+0x38>)
 800b080:	2201      	movs	r2, #1
 800b082:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b084:	f7ff ff30 	bl	800aee8 <BSP_SD_Init>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d107      	bne.n	800b09e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800b08e:	79fb      	ldrb	r3, [r7, #7]
 800b090:	4618      	mov	r0, r3
 800b092:	f7ff ffd1 	bl	800b038 <SD_CheckStatus>
 800b096:	4603      	mov	r3, r0
 800b098:	461a      	mov	r2, r3
 800b09a:	4b04      	ldr	r3, [pc, #16]	; (800b0ac <SD_initialize+0x38>)
 800b09c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b09e:	4b03      	ldr	r3, [pc, #12]	; (800b0ac <SD_initialize+0x38>)
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	b2db      	uxtb	r3, r3
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3708      	adds	r7, #8
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}
 800b0ac:	20000009 	.word	0x20000009

0800b0b0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b082      	sub	sp, #8
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b0ba:	79fb      	ldrb	r3, [r7, #7]
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f7ff ffbb 	bl	800b038 <SD_CheckStatus>
 800b0c2:	4603      	mov	r3, r0
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3708      	adds	r7, #8
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b086      	sub	sp, #24
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	60b9      	str	r1, [r7, #8]
 800b0d4:	607a      	str	r2, [r7, #4]
 800b0d6:	603b      	str	r3, [r7, #0]
 800b0d8:	4603      	mov	r3, r0
 800b0da:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800b0e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0e4:	683a      	ldr	r2, [r7, #0]
 800b0e6:	6879      	ldr	r1, [r7, #4]
 800b0e8:	68b8      	ldr	r0, [r7, #8]
 800b0ea:	f7ff ff23 	bl	800af34 <BSP_SD_ReadBlocks>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d107      	bne.n	800b104 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b0f4:	bf00      	nop
 800b0f6:	f7ff ff59 	bl	800afac <BSP_SD_GetCardState>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d1fa      	bne.n	800b0f6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800b100:	2300      	movs	r3, #0
 800b102:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b104:	7dfb      	ldrb	r3, [r7, #23]
}
 800b106:	4618      	mov	r0, r3
 800b108:	3718      	adds	r7, #24
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}

0800b10e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b10e:	b580      	push	{r7, lr}
 800b110:	b086      	sub	sp, #24
 800b112:	af00      	add	r7, sp, #0
 800b114:	60b9      	str	r1, [r7, #8]
 800b116:	607a      	str	r2, [r7, #4]
 800b118:	603b      	str	r3, [r7, #0]
 800b11a:	4603      	mov	r3, r0
 800b11c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800b122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b126:	683a      	ldr	r2, [r7, #0]
 800b128:	6879      	ldr	r1, [r7, #4]
 800b12a:	68b8      	ldr	r0, [r7, #8]
 800b12c:	f7ff ff20 	bl	800af70 <BSP_SD_WriteBlocks>
 800b130:	4603      	mov	r3, r0
 800b132:	2b00      	cmp	r3, #0
 800b134:	d107      	bne.n	800b146 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b136:	bf00      	nop
 800b138:	f7ff ff38 	bl	800afac <BSP_SD_GetCardState>
 800b13c:	4603      	mov	r3, r0
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d1fa      	bne.n	800b138 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800b142:	2300      	movs	r3, #0
 800b144:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b146:	7dfb      	ldrb	r3, [r7, #23]
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3718      	adds	r7, #24
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b08c      	sub	sp, #48	; 0x30
 800b154:	af00      	add	r7, sp, #0
 800b156:	4603      	mov	r3, r0
 800b158:	603a      	str	r2, [r7, #0]
 800b15a:	71fb      	strb	r3, [r7, #7]
 800b15c:	460b      	mov	r3, r1
 800b15e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b160:	2301      	movs	r3, #1
 800b162:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b166:	4b25      	ldr	r3, [pc, #148]	; (800b1fc <SD_ioctl+0xac>)
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	b2db      	uxtb	r3, r3
 800b16c:	f003 0301 	and.w	r3, r3, #1
 800b170:	2b00      	cmp	r3, #0
 800b172:	d001      	beq.n	800b178 <SD_ioctl+0x28>
 800b174:	2303      	movs	r3, #3
 800b176:	e03c      	b.n	800b1f2 <SD_ioctl+0xa2>

  switch (cmd)
 800b178:	79bb      	ldrb	r3, [r7, #6]
 800b17a:	2b03      	cmp	r3, #3
 800b17c:	d834      	bhi.n	800b1e8 <SD_ioctl+0x98>
 800b17e:	a201      	add	r2, pc, #4	; (adr r2, 800b184 <SD_ioctl+0x34>)
 800b180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b184:	0800b195 	.word	0x0800b195
 800b188:	0800b19d 	.word	0x0800b19d
 800b18c:	0800b1b5 	.word	0x0800b1b5
 800b190:	0800b1cf 	.word	0x0800b1cf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b194:	2300      	movs	r3, #0
 800b196:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b19a:	e028      	b.n	800b1ee <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b19c:	f107 0308 	add.w	r3, r7, #8
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f7ff ff13 	bl	800afcc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b1a6:	6a3a      	ldr	r2, [r7, #32]
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b1b2:	e01c      	b.n	800b1ee <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b1b4:	f107 0308 	add.w	r3, r7, #8
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f7ff ff07 	bl	800afcc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c0:	b29a      	uxth	r2, r3
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b1cc:	e00f      	b.n	800b1ee <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b1ce:	f107 0308 	add.w	r3, r7, #8
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7ff fefa 	bl	800afcc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1da:	0a5a      	lsrs	r2, r3, #9
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b1e6:	e002      	b.n	800b1ee <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b1e8:	2304      	movs	r3, #4
 800b1ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b1ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3730      	adds	r7, #48	; 0x30
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	20000009 	.word	0x20000009

0800b200 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	460b      	mov	r3, r1
 800b20a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b20c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b210:	f002 fae2 	bl	800d7d8 <USBD_static_malloc>
 800b214:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d105      	bne.n	800b228 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2200      	movs	r2, #0
 800b220:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b224:	2302      	movs	r3, #2
 800b226:	e066      	b.n	800b2f6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	68fa      	ldr	r2, [r7, #12]
 800b22c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	7c1b      	ldrb	r3, [r3, #16]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d119      	bne.n	800b26c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b238:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b23c:	2202      	movs	r2, #2
 800b23e:	2181      	movs	r1, #129	; 0x81
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f002 f8b5 	bl	800d3b0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2201      	movs	r2, #1
 800b24a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b24c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b250:	2202      	movs	r2, #2
 800b252:	2101      	movs	r1, #1
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f002 f8ab 	bl	800d3b0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2201      	movs	r2, #1
 800b25e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2210      	movs	r2, #16
 800b266:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b26a:	e016      	b.n	800b29a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b26c:	2340      	movs	r3, #64	; 0x40
 800b26e:	2202      	movs	r2, #2
 800b270:	2181      	movs	r1, #129	; 0x81
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f002 f89c 	bl	800d3b0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2201      	movs	r2, #1
 800b27c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b27e:	2340      	movs	r3, #64	; 0x40
 800b280:	2202      	movs	r2, #2
 800b282:	2101      	movs	r1, #1
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f002 f893 	bl	800d3b0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2201      	movs	r2, #1
 800b28e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2210      	movs	r2, #16
 800b296:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b29a:	2308      	movs	r3, #8
 800b29c:	2203      	movs	r2, #3
 800b29e:	2182      	movs	r1, #130	; 0x82
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f002 f885 	bl	800d3b0 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	7c1b      	ldrb	r3, [r3, #16]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d109      	bne.n	800b2e4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b2d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2da:	2101      	movs	r1, #1
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f002 f9e1 	bl	800d6a4 <USBD_LL_PrepareReceive>
 800b2e2:	e007      	b.n	800b2f4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b2ea:	2340      	movs	r3, #64	; 0x40
 800b2ec:	2101      	movs	r1, #1
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f002 f9d8 	bl	800d6a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b2f4:	2300      	movs	r3, #0
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3710      	adds	r7, #16
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}

0800b2fe <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2fe:	b580      	push	{r7, lr}
 800b300:	b082      	sub	sp, #8
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
 800b306:	460b      	mov	r3, r1
 800b308:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b30a:	2181      	movs	r1, #129	; 0x81
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f002 f88d 	bl	800d42c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2200      	movs	r2, #0
 800b316:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b318:	2101      	movs	r1, #1
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f002 f886 	bl	800d42c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2200      	movs	r2, #0
 800b324:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b328:	2182      	movs	r1, #130	; 0x82
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f002 f87e 	bl	800d42c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b346:	2b00      	cmp	r3, #0
 800b348:	d00e      	beq.n	800b368 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b35a:	4618      	mov	r0, r3
 800b35c:	f002 fa4a 	bl	800d7f4 <USBD_static_free>
    pdev->pClassData = NULL;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b368:	2300      	movs	r3, #0
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3708      	adds	r7, #8
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
	...

0800b374 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b086      	sub	sp, #24
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b384:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b386:	2300      	movs	r3, #0
 800b388:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b38a:	2300      	movs	r3, #0
 800b38c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b38e:	2300      	movs	r3, #0
 800b390:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d101      	bne.n	800b39c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b398:	2303      	movs	r3, #3
 800b39a:	e0af      	b.n	800b4fc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d03f      	beq.n	800b428 <USBD_CDC_Setup+0xb4>
 800b3a8:	2b20      	cmp	r3, #32
 800b3aa:	f040 809f 	bne.w	800b4ec <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	88db      	ldrh	r3, [r3, #6]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d02e      	beq.n	800b414 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	b25b      	sxtb	r3, r3
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	da16      	bge.n	800b3ee <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b3c6:	689b      	ldr	r3, [r3, #8]
 800b3c8:	683a      	ldr	r2, [r7, #0]
 800b3ca:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b3cc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b3ce:	683a      	ldr	r2, [r7, #0]
 800b3d0:	88d2      	ldrh	r2, [r2, #6]
 800b3d2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	88db      	ldrh	r3, [r3, #6]
 800b3d8:	2b07      	cmp	r3, #7
 800b3da:	bf28      	it	cs
 800b3dc:	2307      	movcs	r3, #7
 800b3de:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	89fa      	ldrh	r2, [r7, #14]
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f001 fb13 	bl	800ca12 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b3ec:	e085      	b.n	800b4fa <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	785a      	ldrb	r2, [r3, #1]
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	88db      	ldrh	r3, [r3, #6]
 800b3fc:	b2da      	uxtb	r2, r3
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b404:	6939      	ldr	r1, [r7, #16]
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	88db      	ldrh	r3, [r3, #6]
 800b40a:	461a      	mov	r2, r3
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f001 fb2c 	bl	800ca6a <USBD_CtlPrepareRx>
      break;
 800b412:	e072      	b.n	800b4fa <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b41a:	689b      	ldr	r3, [r3, #8]
 800b41c:	683a      	ldr	r2, [r7, #0]
 800b41e:	7850      	ldrb	r0, [r2, #1]
 800b420:	2200      	movs	r2, #0
 800b422:	6839      	ldr	r1, [r7, #0]
 800b424:	4798      	blx	r3
      break;
 800b426:	e068      	b.n	800b4fa <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	785b      	ldrb	r3, [r3, #1]
 800b42c:	2b0b      	cmp	r3, #11
 800b42e:	d852      	bhi.n	800b4d6 <USBD_CDC_Setup+0x162>
 800b430:	a201      	add	r2, pc, #4	; (adr r2, 800b438 <USBD_CDC_Setup+0xc4>)
 800b432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b436:	bf00      	nop
 800b438:	0800b469 	.word	0x0800b469
 800b43c:	0800b4e5 	.word	0x0800b4e5
 800b440:	0800b4d7 	.word	0x0800b4d7
 800b444:	0800b4d7 	.word	0x0800b4d7
 800b448:	0800b4d7 	.word	0x0800b4d7
 800b44c:	0800b4d7 	.word	0x0800b4d7
 800b450:	0800b4d7 	.word	0x0800b4d7
 800b454:	0800b4d7 	.word	0x0800b4d7
 800b458:	0800b4d7 	.word	0x0800b4d7
 800b45c:	0800b4d7 	.word	0x0800b4d7
 800b460:	0800b493 	.word	0x0800b493
 800b464:	0800b4bd 	.word	0x0800b4bd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b46e:	b2db      	uxtb	r3, r3
 800b470:	2b03      	cmp	r3, #3
 800b472:	d107      	bne.n	800b484 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b474:	f107 030a 	add.w	r3, r7, #10
 800b478:	2202      	movs	r2, #2
 800b47a:	4619      	mov	r1, r3
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f001 fac8 	bl	800ca12 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b482:	e032      	b.n	800b4ea <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b484:	6839      	ldr	r1, [r7, #0]
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f001 fa52 	bl	800c930 <USBD_CtlError>
            ret = USBD_FAIL;
 800b48c:	2303      	movs	r3, #3
 800b48e:	75fb      	strb	r3, [r7, #23]
          break;
 800b490:	e02b      	b.n	800b4ea <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b498:	b2db      	uxtb	r3, r3
 800b49a:	2b03      	cmp	r3, #3
 800b49c:	d107      	bne.n	800b4ae <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b49e:	f107 030d 	add.w	r3, r7, #13
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f001 fab3 	bl	800ca12 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b4ac:	e01d      	b.n	800b4ea <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b4ae:	6839      	ldr	r1, [r7, #0]
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f001 fa3d 	bl	800c930 <USBD_CtlError>
            ret = USBD_FAIL;
 800b4b6:	2303      	movs	r3, #3
 800b4b8:	75fb      	strb	r3, [r7, #23]
          break;
 800b4ba:	e016      	b.n	800b4ea <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	2b03      	cmp	r3, #3
 800b4c6:	d00f      	beq.n	800b4e8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b4c8:	6839      	ldr	r1, [r7, #0]
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f001 fa30 	bl	800c930 <USBD_CtlError>
            ret = USBD_FAIL;
 800b4d0:	2303      	movs	r3, #3
 800b4d2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b4d4:	e008      	b.n	800b4e8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b4d6:	6839      	ldr	r1, [r7, #0]
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f001 fa29 	bl	800c930 <USBD_CtlError>
          ret = USBD_FAIL;
 800b4de:	2303      	movs	r3, #3
 800b4e0:	75fb      	strb	r3, [r7, #23]
          break;
 800b4e2:	e002      	b.n	800b4ea <USBD_CDC_Setup+0x176>
          break;
 800b4e4:	bf00      	nop
 800b4e6:	e008      	b.n	800b4fa <USBD_CDC_Setup+0x186>
          break;
 800b4e8:	bf00      	nop
      }
      break;
 800b4ea:	e006      	b.n	800b4fa <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b4ec:	6839      	ldr	r1, [r7, #0]
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f001 fa1e 	bl	800c930 <USBD_CtlError>
      ret = USBD_FAIL;
 800b4f4:	2303      	movs	r3, #3
 800b4f6:	75fb      	strb	r3, [r7, #23]
      break;
 800b4f8:	bf00      	nop
  }

  return (uint8_t)ret;
 800b4fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3718      	adds	r7, #24
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b084      	sub	sp, #16
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	460b      	mov	r3, r1
 800b50e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b516:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d101      	bne.n	800b526 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b522:	2303      	movs	r3, #3
 800b524:	e04f      	b.n	800b5c6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b52c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b52e:	78fa      	ldrb	r2, [r7, #3]
 800b530:	6879      	ldr	r1, [r7, #4]
 800b532:	4613      	mov	r3, r2
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	4413      	add	r3, r2
 800b538:	009b      	lsls	r3, r3, #2
 800b53a:	440b      	add	r3, r1
 800b53c:	3318      	adds	r3, #24
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d029      	beq.n	800b598 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b544:	78fa      	ldrb	r2, [r7, #3]
 800b546:	6879      	ldr	r1, [r7, #4]
 800b548:	4613      	mov	r3, r2
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	4413      	add	r3, r2
 800b54e:	009b      	lsls	r3, r3, #2
 800b550:	440b      	add	r3, r1
 800b552:	3318      	adds	r3, #24
 800b554:	681a      	ldr	r2, [r3, #0]
 800b556:	78f9      	ldrb	r1, [r7, #3]
 800b558:	68f8      	ldr	r0, [r7, #12]
 800b55a:	460b      	mov	r3, r1
 800b55c:	00db      	lsls	r3, r3, #3
 800b55e:	440b      	add	r3, r1
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	4403      	add	r3, r0
 800b564:	3348      	adds	r3, #72	; 0x48
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	fbb2 f1f3 	udiv	r1, r2, r3
 800b56c:	fb01 f303 	mul.w	r3, r1, r3
 800b570:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b572:	2b00      	cmp	r3, #0
 800b574:	d110      	bne.n	800b598 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b576:	78fa      	ldrb	r2, [r7, #3]
 800b578:	6879      	ldr	r1, [r7, #4]
 800b57a:	4613      	mov	r3, r2
 800b57c:	009b      	lsls	r3, r3, #2
 800b57e:	4413      	add	r3, r2
 800b580:	009b      	lsls	r3, r3, #2
 800b582:	440b      	add	r3, r1
 800b584:	3318      	adds	r3, #24
 800b586:	2200      	movs	r2, #0
 800b588:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b58a:	78f9      	ldrb	r1, [r7, #3]
 800b58c:	2300      	movs	r3, #0
 800b58e:	2200      	movs	r2, #0
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f002 f84f 	bl	800d634 <USBD_LL_Transmit>
 800b596:	e015      	b.n	800b5c4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	2200      	movs	r2, #0
 800b59c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5a6:	691b      	ldr	r3, [r3, #16]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d00b      	beq.n	800b5c4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5b2:	691b      	ldr	r3, [r3, #16]
 800b5b4:	68ba      	ldr	r2, [r7, #8]
 800b5b6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b5ba:	68ba      	ldr	r2, [r7, #8]
 800b5bc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b5c0:	78fa      	ldrb	r2, [r7, #3]
 800b5c2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b5c4:	2300      	movs	r3, #0
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3710      	adds	r7, #16
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}

0800b5ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b5ce:	b580      	push	{r7, lr}
 800b5d0:	b084      	sub	sp, #16
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d101      	bne.n	800b5f0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b5ec:	2303      	movs	r3, #3
 800b5ee:	e015      	b.n	800b61c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b5f0:	78fb      	ldrb	r3, [r7, #3]
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f002 f88d 	bl	800d714 <USBD_LL_GetRxDataSize>
 800b5fa:	4602      	mov	r2, r0
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b608:	68db      	ldr	r3, [r3, #12]
 800b60a:	68fa      	ldr	r2, [r7, #12]
 800b60c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b610:	68fa      	ldr	r2, [r7, #12]
 800b612:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b616:	4611      	mov	r1, r2
 800b618:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b61a:	2300      	movs	r3, #0
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3710      	adds	r7, #16
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b632:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d101      	bne.n	800b63e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b63a:	2303      	movs	r3, #3
 800b63c:	e01b      	b.n	800b676 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b644:	2b00      	cmp	r3, #0
 800b646:	d015      	beq.n	800b674 <USBD_CDC_EP0_RxReady+0x50>
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b64e:	2bff      	cmp	r3, #255	; 0xff
 800b650:	d010      	beq.n	800b674 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b658:	689b      	ldr	r3, [r3, #8]
 800b65a:	68fa      	ldr	r2, [r7, #12]
 800b65c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b660:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b662:	68fa      	ldr	r2, [r7, #12]
 800b664:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b668:	b292      	uxth	r2, r2
 800b66a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	22ff      	movs	r2, #255	; 0xff
 800b670:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b674:	2300      	movs	r3, #0
}
 800b676:	4618      	mov	r0, r3
 800b678:	3710      	adds	r7, #16
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
	...

0800b680 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b680:	b480      	push	{r7}
 800b682:	b083      	sub	sp, #12
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2243      	movs	r2, #67	; 0x43
 800b68c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b68e:	4b03      	ldr	r3, [pc, #12]	; (800b69c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b690:	4618      	mov	r0, r3
 800b692:	370c      	adds	r7, #12
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr
 800b69c:	20000094 	.word	0x20000094

0800b6a0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b083      	sub	sp, #12
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2243      	movs	r2, #67	; 0x43
 800b6ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b6ae:	4b03      	ldr	r3, [pc, #12]	; (800b6bc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	370c      	adds	r7, #12
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr
 800b6bc:	20000050 	.word	0x20000050

0800b6c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b083      	sub	sp, #12
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2243      	movs	r2, #67	; 0x43
 800b6cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b6ce:	4b03      	ldr	r3, [pc, #12]	; (800b6dc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	370c      	adds	r7, #12
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr
 800b6dc:	200000d8 	.word	0x200000d8

0800b6e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b083      	sub	sp, #12
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	220a      	movs	r2, #10
 800b6ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b6ee:	4b03      	ldr	r3, [pc, #12]	; (800b6fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	370c      	adds	r7, #12
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr
 800b6fc:	2000000c 	.word	0x2000000c

0800b700 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b700:	b480      	push	{r7}
 800b702:	b083      	sub	sp, #12
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d101      	bne.n	800b714 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b710:	2303      	movs	r3, #3
 800b712:	e004      	b.n	800b71e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	683a      	ldr	r2, [r7, #0]
 800b718:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b71c:	2300      	movs	r3, #0
}
 800b71e:	4618      	mov	r0, r3
 800b720:	370c      	adds	r7, #12
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr

0800b72a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b72a:	b480      	push	{r7}
 800b72c:	b087      	sub	sp, #28
 800b72e:	af00      	add	r7, sp, #0
 800b730:	60f8      	str	r0, [r7, #12]
 800b732:	60b9      	str	r1, [r7, #8]
 800b734:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b73c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d101      	bne.n	800b748 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b744:	2303      	movs	r3, #3
 800b746:	e008      	b.n	800b75a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	68ba      	ldr	r2, [r7, #8]
 800b74c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b758:	2300      	movs	r3, #0
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	371c      	adds	r7, #28
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr

0800b766 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b766:	b480      	push	{r7}
 800b768:	b085      	sub	sp, #20
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
 800b76e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b776:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d101      	bne.n	800b782 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b77e:	2303      	movs	r3, #3
 800b780:	e004      	b.n	800b78c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	683a      	ldr	r2, [r7, #0]
 800b786:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b78a:	2300      	movs	r3, #0
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3714      	adds	r7, #20
 800b790:	46bd      	mov	sp, r7
 800b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b796:	4770      	bx	lr

0800b798 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b084      	sub	sp, #16
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d101      	bne.n	800b7b6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b7b2:	2303      	movs	r3, #3
 800b7b4:	e016      	b.n	800b7e4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	7c1b      	ldrb	r3, [r3, #16]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d109      	bne.n	800b7d2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b7c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7c8:	2101      	movs	r1, #1
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f001 ff6a 	bl	800d6a4 <USBD_LL_PrepareReceive>
 800b7d0:	e007      	b.n	800b7e2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b7d8:	2340      	movs	r3, #64	; 0x40
 800b7da:	2101      	movs	r1, #1
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f001 ff61 	bl	800d6a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b7e2:	2300      	movs	r3, #0
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3710      	adds	r7, #16
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b086      	sub	sp, #24
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	4613      	mov	r3, r2
 800b7f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d101      	bne.n	800b804 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b800:	2303      	movs	r3, #3
 800b802:	e01f      	b.n	800b844 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2200      	movs	r2, #0
 800b808:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	2200      	movs	r2, #0
 800b810:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2200      	movs	r2, #0
 800b818:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d003      	beq.n	800b82a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	68ba      	ldr	r2, [r7, #8]
 800b826:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	2201      	movs	r2, #1
 800b82e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	79fa      	ldrb	r2, [r7, #7]
 800b836:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b838:	68f8      	ldr	r0, [r7, #12]
 800b83a:	f001 fd3d 	bl	800d2b8 <USBD_LL_Init>
 800b83e:	4603      	mov	r3, r0
 800b840:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b842:	7dfb      	ldrb	r3, [r7, #23]
}
 800b844:	4618      	mov	r0, r3
 800b846:	3718      	adds	r7, #24
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b856:	2300      	movs	r3, #0
 800b858:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d101      	bne.n	800b864 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b860:	2303      	movs	r3, #3
 800b862:	e016      	b.n	800b892 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	683a      	ldr	r2, [r7, #0]
 800b868:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b874:	2b00      	cmp	r3, #0
 800b876:	d00b      	beq.n	800b890 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b880:	f107 020e 	add.w	r2, r7, #14
 800b884:	4610      	mov	r0, r2
 800b886:	4798      	blx	r3
 800b888:	4602      	mov	r2, r0
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b890:	2300      	movs	r3, #0
}
 800b892:	4618      	mov	r0, r3
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}

0800b89a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b082      	sub	sp, #8
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f001 fd52 	bl	800d34c <USBD_LL_Start>
 800b8a8:	4603      	mov	r3, r0
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3708      	adds	r7, #8
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}

0800b8b2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b8b2:	b480      	push	{r7}
 800b8b4:	b083      	sub	sp, #12
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b8ba:	2300      	movs	r3, #0
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	370c      	adds	r7, #12
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr

0800b8c8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	460b      	mov	r3, r1
 800b8d2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b8d4:	2303      	movs	r3, #3
 800b8d6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d009      	beq.n	800b8f6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	78fa      	ldrb	r2, [r7, #3]
 800b8ec:	4611      	mov	r1, r2
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	4798      	blx	r3
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b8f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3710      	adds	r7, #16
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b082      	sub	sp, #8
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	460b      	mov	r3, r1
 800b90a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b912:	2b00      	cmp	r3, #0
 800b914:	d007      	beq.n	800b926 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	78fa      	ldrb	r2, [r7, #3]
 800b920:	4611      	mov	r1, r2
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	4798      	blx	r3
  }

  return USBD_OK;
 800b926:	2300      	movs	r3, #0
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b940:	6839      	ldr	r1, [r7, #0]
 800b942:	4618      	mov	r0, r3
 800b944:	f000 ffba 	bl	800c8bc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2201      	movs	r2, #1
 800b94c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b956:	461a      	mov	r2, r3
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b964:	f003 031f 	and.w	r3, r3, #31
 800b968:	2b02      	cmp	r3, #2
 800b96a:	d01a      	beq.n	800b9a2 <USBD_LL_SetupStage+0x72>
 800b96c:	2b02      	cmp	r3, #2
 800b96e:	d822      	bhi.n	800b9b6 <USBD_LL_SetupStage+0x86>
 800b970:	2b00      	cmp	r3, #0
 800b972:	d002      	beq.n	800b97a <USBD_LL_SetupStage+0x4a>
 800b974:	2b01      	cmp	r3, #1
 800b976:	d00a      	beq.n	800b98e <USBD_LL_SetupStage+0x5e>
 800b978:	e01d      	b.n	800b9b6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b980:	4619      	mov	r1, r3
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 fa62 	bl	800be4c <USBD_StdDevReq>
 800b988:	4603      	mov	r3, r0
 800b98a:	73fb      	strb	r3, [r7, #15]
      break;
 800b98c:	e020      	b.n	800b9d0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b994:	4619      	mov	r1, r3
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 fac6 	bl	800bf28 <USBD_StdItfReq>
 800b99c:	4603      	mov	r3, r0
 800b99e:	73fb      	strb	r3, [r7, #15]
      break;
 800b9a0:	e016      	b.n	800b9d0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 fb05 	bl	800bfba <USBD_StdEPReq>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	73fb      	strb	r3, [r7, #15]
      break;
 800b9b4:	e00c      	b.n	800b9d0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b9bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f001 fd67 	bl	800d498 <USBD_LL_StallEP>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	73fb      	strb	r3, [r7, #15]
      break;
 800b9ce:	bf00      	nop
  }

  return ret;
 800b9d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3710      	adds	r7, #16
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}

0800b9da <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b9da:	b580      	push	{r7, lr}
 800b9dc:	b086      	sub	sp, #24
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	60f8      	str	r0, [r7, #12]
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	607a      	str	r2, [r7, #4]
 800b9e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b9e8:	7afb      	ldrb	r3, [r7, #11]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d138      	bne.n	800ba60 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b9f4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b9fc:	2b03      	cmp	r3, #3
 800b9fe:	d14a      	bne.n	800ba96 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	689a      	ldr	r2, [r3, #8]
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d913      	bls.n	800ba34 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	689a      	ldr	r2, [r3, #8]
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	68db      	ldr	r3, [r3, #12]
 800ba14:	1ad2      	subs	r2, r2, r3
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	68da      	ldr	r2, [r3, #12]
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	689b      	ldr	r3, [r3, #8]
 800ba22:	4293      	cmp	r3, r2
 800ba24:	bf28      	it	cs
 800ba26:	4613      	movcs	r3, r2
 800ba28:	461a      	mov	r2, r3
 800ba2a:	6879      	ldr	r1, [r7, #4]
 800ba2c:	68f8      	ldr	r0, [r7, #12]
 800ba2e:	f001 f839 	bl	800caa4 <USBD_CtlContinueRx>
 800ba32:	e030      	b.n	800ba96 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba3a:	b2db      	uxtb	r3, r3
 800ba3c:	2b03      	cmp	r3, #3
 800ba3e:	d10b      	bne.n	800ba58 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba46:	691b      	ldr	r3, [r3, #16]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d005      	beq.n	800ba58 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba52:	691b      	ldr	r3, [r3, #16]
 800ba54:	68f8      	ldr	r0, [r7, #12]
 800ba56:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ba58:	68f8      	ldr	r0, [r7, #12]
 800ba5a:	f001 f834 	bl	800cac6 <USBD_CtlSendStatus>
 800ba5e:	e01a      	b.n	800ba96 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba66:	b2db      	uxtb	r3, r3
 800ba68:	2b03      	cmp	r3, #3
 800ba6a:	d114      	bne.n	800ba96 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba72:	699b      	ldr	r3, [r3, #24]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d00e      	beq.n	800ba96 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba7e:	699b      	ldr	r3, [r3, #24]
 800ba80:	7afa      	ldrb	r2, [r7, #11]
 800ba82:	4611      	mov	r1, r2
 800ba84:	68f8      	ldr	r0, [r7, #12]
 800ba86:	4798      	blx	r3
 800ba88:	4603      	mov	r3, r0
 800ba8a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ba8c:	7dfb      	ldrb	r3, [r7, #23]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d001      	beq.n	800ba96 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ba92:	7dfb      	ldrb	r3, [r7, #23]
 800ba94:	e000      	b.n	800ba98 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ba96:	2300      	movs	r3, #0
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3718      	adds	r7, #24
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b086      	sub	sp, #24
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	60f8      	str	r0, [r7, #12]
 800baa8:	460b      	mov	r3, r1
 800baaa:	607a      	str	r2, [r7, #4]
 800baac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800baae:	7afb      	ldrb	r3, [r7, #11]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d16b      	bne.n	800bb8c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	3314      	adds	r3, #20
 800bab8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bac0:	2b02      	cmp	r3, #2
 800bac2:	d156      	bne.n	800bb72 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	689a      	ldr	r2, [r3, #8]
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	68db      	ldr	r3, [r3, #12]
 800bacc:	429a      	cmp	r2, r3
 800bace:	d914      	bls.n	800bafa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	689a      	ldr	r2, [r3, #8]
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	68db      	ldr	r3, [r3, #12]
 800bad8:	1ad2      	subs	r2, r2, r3
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	689b      	ldr	r3, [r3, #8]
 800bae2:	461a      	mov	r2, r3
 800bae4:	6879      	ldr	r1, [r7, #4]
 800bae6:	68f8      	ldr	r0, [r7, #12]
 800bae8:	f000 ffae 	bl	800ca48 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800baec:	2300      	movs	r3, #0
 800baee:	2200      	movs	r2, #0
 800baf0:	2100      	movs	r1, #0
 800baf2:	68f8      	ldr	r0, [r7, #12]
 800baf4:	f001 fdd6 	bl	800d6a4 <USBD_LL_PrepareReceive>
 800baf8:	e03b      	b.n	800bb72 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	68da      	ldr	r2, [r3, #12]
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	689b      	ldr	r3, [r3, #8]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d11c      	bne.n	800bb40 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	685a      	ldr	r2, [r3, #4]
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d316      	bcc.n	800bb40 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	685a      	ldr	r2, [r3, #4]
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d20f      	bcs.n	800bb40 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bb20:	2200      	movs	r2, #0
 800bb22:	2100      	movs	r1, #0
 800bb24:	68f8      	ldr	r0, [r7, #12]
 800bb26:	f000 ff8f 	bl	800ca48 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb32:	2300      	movs	r3, #0
 800bb34:	2200      	movs	r2, #0
 800bb36:	2100      	movs	r1, #0
 800bb38:	68f8      	ldr	r0, [r7, #12]
 800bb3a:	f001 fdb3 	bl	800d6a4 <USBD_LL_PrepareReceive>
 800bb3e:	e018      	b.n	800bb72 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb46:	b2db      	uxtb	r3, r3
 800bb48:	2b03      	cmp	r3, #3
 800bb4a:	d10b      	bne.n	800bb64 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb52:	68db      	ldr	r3, [r3, #12]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d005      	beq.n	800bb64 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb5e:	68db      	ldr	r3, [r3, #12]
 800bb60:	68f8      	ldr	r0, [r7, #12]
 800bb62:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb64:	2180      	movs	r1, #128	; 0x80
 800bb66:	68f8      	ldr	r0, [r7, #12]
 800bb68:	f001 fc96 	bl	800d498 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bb6c:	68f8      	ldr	r0, [r7, #12]
 800bb6e:	f000 ffbd 	bl	800caec <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	d122      	bne.n	800bbc2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bb7c:	68f8      	ldr	r0, [r7, #12]
 800bb7e:	f7ff fe98 	bl	800b8b2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2200      	movs	r2, #0
 800bb86:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bb8a:	e01a      	b.n	800bbc2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb92:	b2db      	uxtb	r3, r3
 800bb94:	2b03      	cmp	r3, #3
 800bb96:	d114      	bne.n	800bbc2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb9e:	695b      	ldr	r3, [r3, #20]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d00e      	beq.n	800bbc2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbaa:	695b      	ldr	r3, [r3, #20]
 800bbac:	7afa      	ldrb	r2, [r7, #11]
 800bbae:	4611      	mov	r1, r2
 800bbb0:	68f8      	ldr	r0, [r7, #12]
 800bbb2:	4798      	blx	r3
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bbb8:	7dfb      	ldrb	r3, [r7, #23]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d001      	beq.n	800bbc2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800bbbe:	7dfb      	ldrb	r3, [r7, #23]
 800bbc0:	e000      	b.n	800bbc4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800bbc2:	2300      	movs	r3, #0
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3718      	adds	r7, #24
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b082      	sub	sp, #8
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2200      	movs	r2, #0
 800bbee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d101      	bne.n	800bc00 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800bbfc:	2303      	movs	r3, #3
 800bbfe:	e02f      	b.n	800bc60 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d00f      	beq.n	800bc2a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d009      	beq.n	800bc2a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	687a      	ldr	r2, [r7, #4]
 800bc20:	6852      	ldr	r2, [r2, #4]
 800bc22:	b2d2      	uxtb	r2, r2
 800bc24:	4611      	mov	r1, r2
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc2a:	2340      	movs	r3, #64	; 0x40
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	2100      	movs	r1, #0
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f001 fbbd 	bl	800d3b0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2201      	movs	r2, #1
 800bc3a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2240      	movs	r2, #64	; 0x40
 800bc42:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc46:	2340      	movs	r3, #64	; 0x40
 800bc48:	2200      	movs	r2, #0
 800bc4a:	2180      	movs	r1, #128	; 0x80
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f001 fbaf 	bl	800d3b0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2201      	movs	r2, #1
 800bc56:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2240      	movs	r2, #64	; 0x40
 800bc5c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800bc5e:	2300      	movs	r3, #0
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3708      	adds	r7, #8
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	460b      	mov	r3, r1
 800bc72:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	78fa      	ldrb	r2, [r7, #3]
 800bc78:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bc7a:	2300      	movs	r3, #0
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	370c      	adds	r7, #12
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr

0800bc88 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b083      	sub	sp, #12
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc96:	b2da      	uxtb	r2, r3
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2204      	movs	r2, #4
 800bca2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bca6:	2300      	movs	r3, #0
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	370c      	adds	r7, #12
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr

0800bcb4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b083      	sub	sp, #12
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcc2:	b2db      	uxtb	r3, r3
 800bcc4:	2b04      	cmp	r3, #4
 800bcc6:	d106      	bne.n	800bcd6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bcce:	b2da      	uxtb	r2, r3
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bcd6:	2300      	movs	r3, #0
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	370c      	adds	r7, #12
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr

0800bce4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b082      	sub	sp, #8
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d101      	bne.n	800bcfa <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800bcf6:	2303      	movs	r3, #3
 800bcf8:	e012      	b.n	800bd20 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd00:	b2db      	uxtb	r3, r3
 800bd02:	2b03      	cmp	r3, #3
 800bd04:	d10b      	bne.n	800bd1e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd0c:	69db      	ldr	r3, [r3, #28]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d005      	beq.n	800bd1e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd18:	69db      	ldr	r3, [r3, #28]
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd1e:	2300      	movs	r3, #0
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3708      	adds	r7, #8
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b082      	sub	sp, #8
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	460b      	mov	r3, r1
 800bd32:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d101      	bne.n	800bd42 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800bd3e:	2303      	movs	r3, #3
 800bd40:	e014      	b.n	800bd6c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd48:	b2db      	uxtb	r3, r3
 800bd4a:	2b03      	cmp	r3, #3
 800bd4c:	d10d      	bne.n	800bd6a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd54:	6a1b      	ldr	r3, [r3, #32]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d007      	beq.n	800bd6a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd60:	6a1b      	ldr	r3, [r3, #32]
 800bd62:	78fa      	ldrb	r2, [r7, #3]
 800bd64:	4611      	mov	r1, r2
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd6a:	2300      	movs	r3, #0
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3708      	adds	r7, #8
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}

0800bd74 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b082      	sub	sp, #8
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	460b      	mov	r3, r1
 800bd7e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d101      	bne.n	800bd8e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800bd8a:	2303      	movs	r3, #3
 800bd8c:	e014      	b.n	800bdb8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd94:	b2db      	uxtb	r3, r3
 800bd96:	2b03      	cmp	r3, #3
 800bd98:	d10d      	bne.n	800bdb6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bda0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d007      	beq.n	800bdb6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdae:	78fa      	ldrb	r2, [r7, #3]
 800bdb0:	4611      	mov	r1, r2
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bdb6:	2300      	movs	r3, #0
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3708      	adds	r7, #8
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b083      	sub	sp, #12
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bdc8:	2300      	movs	r3, #0
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	370c      	adds	r7, #12
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr

0800bdd6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bdd6:	b580      	push	{r7, lr}
 800bdd8:	b082      	sub	sp, #8
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2201      	movs	r2, #1
 800bde2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d009      	beq.n	800be04 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	687a      	ldr	r2, [r7, #4]
 800bdfa:	6852      	ldr	r2, [r2, #4]
 800bdfc:	b2d2      	uxtb	r2, r2
 800bdfe:	4611      	mov	r1, r2
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	4798      	blx	r3
  }

  return USBD_OK;
 800be04:	2300      	movs	r3, #0
}
 800be06:	4618      	mov	r0, r3
 800be08:	3708      	adds	r7, #8
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}

0800be0e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800be0e:	b480      	push	{r7}
 800be10:	b087      	sub	sp, #28
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	781b      	ldrb	r3, [r3, #0]
 800be1e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	3301      	adds	r3, #1
 800be24:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800be2c:	8a3b      	ldrh	r3, [r7, #16]
 800be2e:	021b      	lsls	r3, r3, #8
 800be30:	b21a      	sxth	r2, r3
 800be32:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800be36:	4313      	orrs	r3, r2
 800be38:	b21b      	sxth	r3, r3
 800be3a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800be3c:	89fb      	ldrh	r3, [r7, #14]
}
 800be3e:	4618      	mov	r0, r3
 800be40:	371c      	adds	r7, #28
 800be42:	46bd      	mov	sp, r7
 800be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be48:	4770      	bx	lr
	...

0800be4c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be56:	2300      	movs	r3, #0
 800be58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be62:	2b40      	cmp	r3, #64	; 0x40
 800be64:	d005      	beq.n	800be72 <USBD_StdDevReq+0x26>
 800be66:	2b40      	cmp	r3, #64	; 0x40
 800be68:	d853      	bhi.n	800bf12 <USBD_StdDevReq+0xc6>
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d00b      	beq.n	800be86 <USBD_StdDevReq+0x3a>
 800be6e:	2b20      	cmp	r3, #32
 800be70:	d14f      	bne.n	800bf12 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be78:	689b      	ldr	r3, [r3, #8]
 800be7a:	6839      	ldr	r1, [r7, #0]
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	4798      	blx	r3
 800be80:	4603      	mov	r3, r0
 800be82:	73fb      	strb	r3, [r7, #15]
      break;
 800be84:	e04a      	b.n	800bf1c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	785b      	ldrb	r3, [r3, #1]
 800be8a:	2b09      	cmp	r3, #9
 800be8c:	d83b      	bhi.n	800bf06 <USBD_StdDevReq+0xba>
 800be8e:	a201      	add	r2, pc, #4	; (adr r2, 800be94 <USBD_StdDevReq+0x48>)
 800be90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be94:	0800bee9 	.word	0x0800bee9
 800be98:	0800befd 	.word	0x0800befd
 800be9c:	0800bf07 	.word	0x0800bf07
 800bea0:	0800bef3 	.word	0x0800bef3
 800bea4:	0800bf07 	.word	0x0800bf07
 800bea8:	0800bec7 	.word	0x0800bec7
 800beac:	0800bebd 	.word	0x0800bebd
 800beb0:	0800bf07 	.word	0x0800bf07
 800beb4:	0800bedf 	.word	0x0800bedf
 800beb8:	0800bed1 	.word	0x0800bed1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bebc:	6839      	ldr	r1, [r7, #0]
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 f9de 	bl	800c280 <USBD_GetDescriptor>
          break;
 800bec4:	e024      	b.n	800bf10 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bec6:	6839      	ldr	r1, [r7, #0]
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f000 fb6d 	bl	800c5a8 <USBD_SetAddress>
          break;
 800bece:	e01f      	b.n	800bf10 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bed0:	6839      	ldr	r1, [r7, #0]
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f000 fbac 	bl	800c630 <USBD_SetConfig>
 800bed8:	4603      	mov	r3, r0
 800beda:	73fb      	strb	r3, [r7, #15]
          break;
 800bedc:	e018      	b.n	800bf10 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bede:	6839      	ldr	r1, [r7, #0]
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f000 fc4b 	bl	800c77c <USBD_GetConfig>
          break;
 800bee6:	e013      	b.n	800bf10 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bee8:	6839      	ldr	r1, [r7, #0]
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 fc7c 	bl	800c7e8 <USBD_GetStatus>
          break;
 800bef0:	e00e      	b.n	800bf10 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bef2:	6839      	ldr	r1, [r7, #0]
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f000 fcab 	bl	800c850 <USBD_SetFeature>
          break;
 800befa:	e009      	b.n	800bf10 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800befc:	6839      	ldr	r1, [r7, #0]
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 fcba 	bl	800c878 <USBD_ClrFeature>
          break;
 800bf04:	e004      	b.n	800bf10 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800bf06:	6839      	ldr	r1, [r7, #0]
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f000 fd11 	bl	800c930 <USBD_CtlError>
          break;
 800bf0e:	bf00      	nop
      }
      break;
 800bf10:	e004      	b.n	800bf1c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800bf12:	6839      	ldr	r1, [r7, #0]
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f000 fd0b 	bl	800c930 <USBD_CtlError>
      break;
 800bf1a:	bf00      	nop
  }

  return ret;
 800bf1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3710      	adds	r7, #16
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop

0800bf28 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b084      	sub	sp, #16
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf32:	2300      	movs	r3, #0
 800bf34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf3e:	2b40      	cmp	r3, #64	; 0x40
 800bf40:	d005      	beq.n	800bf4e <USBD_StdItfReq+0x26>
 800bf42:	2b40      	cmp	r3, #64	; 0x40
 800bf44:	d82f      	bhi.n	800bfa6 <USBD_StdItfReq+0x7e>
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d001      	beq.n	800bf4e <USBD_StdItfReq+0x26>
 800bf4a:	2b20      	cmp	r3, #32
 800bf4c:	d12b      	bne.n	800bfa6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf54:	b2db      	uxtb	r3, r3
 800bf56:	3b01      	subs	r3, #1
 800bf58:	2b02      	cmp	r3, #2
 800bf5a:	d81d      	bhi.n	800bf98 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	889b      	ldrh	r3, [r3, #4]
 800bf60:	b2db      	uxtb	r3, r3
 800bf62:	2b01      	cmp	r3, #1
 800bf64:	d813      	bhi.n	800bf8e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	6839      	ldr	r1, [r7, #0]
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	4798      	blx	r3
 800bf74:	4603      	mov	r3, r0
 800bf76:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	88db      	ldrh	r3, [r3, #6]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d110      	bne.n	800bfa2 <USBD_StdItfReq+0x7a>
 800bf80:	7bfb      	ldrb	r3, [r7, #15]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d10d      	bne.n	800bfa2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f000 fd9d 	bl	800cac6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bf8c:	e009      	b.n	800bfa2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800bf8e:	6839      	ldr	r1, [r7, #0]
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f000 fccd 	bl	800c930 <USBD_CtlError>
          break;
 800bf96:	e004      	b.n	800bfa2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800bf98:	6839      	ldr	r1, [r7, #0]
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 fcc8 	bl	800c930 <USBD_CtlError>
          break;
 800bfa0:	e000      	b.n	800bfa4 <USBD_StdItfReq+0x7c>
          break;
 800bfa2:	bf00      	nop
      }
      break;
 800bfa4:	e004      	b.n	800bfb0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800bfa6:	6839      	ldr	r1, [r7, #0]
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f000 fcc1 	bl	800c930 <USBD_CtlError>
      break;
 800bfae:	bf00      	nop
  }

  return ret;
 800bfb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3710      	adds	r7, #16
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}

0800bfba <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfba:	b580      	push	{r7, lr}
 800bfbc:	b084      	sub	sp, #16
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
 800bfc2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	889b      	ldrh	r3, [r3, #4]
 800bfcc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfd6:	2b40      	cmp	r3, #64	; 0x40
 800bfd8:	d007      	beq.n	800bfea <USBD_StdEPReq+0x30>
 800bfda:	2b40      	cmp	r3, #64	; 0x40
 800bfdc:	f200 8145 	bhi.w	800c26a <USBD_StdEPReq+0x2b0>
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d00c      	beq.n	800bffe <USBD_StdEPReq+0x44>
 800bfe4:	2b20      	cmp	r3, #32
 800bfe6:	f040 8140 	bne.w	800c26a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bff0:	689b      	ldr	r3, [r3, #8]
 800bff2:	6839      	ldr	r1, [r7, #0]
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	4798      	blx	r3
 800bff8:	4603      	mov	r3, r0
 800bffa:	73fb      	strb	r3, [r7, #15]
      break;
 800bffc:	e13a      	b.n	800c274 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	785b      	ldrb	r3, [r3, #1]
 800c002:	2b03      	cmp	r3, #3
 800c004:	d007      	beq.n	800c016 <USBD_StdEPReq+0x5c>
 800c006:	2b03      	cmp	r3, #3
 800c008:	f300 8129 	bgt.w	800c25e <USBD_StdEPReq+0x2a4>
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d07f      	beq.n	800c110 <USBD_StdEPReq+0x156>
 800c010:	2b01      	cmp	r3, #1
 800c012:	d03c      	beq.n	800c08e <USBD_StdEPReq+0xd4>
 800c014:	e123      	b.n	800c25e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c01c:	b2db      	uxtb	r3, r3
 800c01e:	2b02      	cmp	r3, #2
 800c020:	d002      	beq.n	800c028 <USBD_StdEPReq+0x6e>
 800c022:	2b03      	cmp	r3, #3
 800c024:	d016      	beq.n	800c054 <USBD_StdEPReq+0x9a>
 800c026:	e02c      	b.n	800c082 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c028:	7bbb      	ldrb	r3, [r7, #14]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d00d      	beq.n	800c04a <USBD_StdEPReq+0x90>
 800c02e:	7bbb      	ldrb	r3, [r7, #14]
 800c030:	2b80      	cmp	r3, #128	; 0x80
 800c032:	d00a      	beq.n	800c04a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c034:	7bbb      	ldrb	r3, [r7, #14]
 800c036:	4619      	mov	r1, r3
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f001 fa2d 	bl	800d498 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c03e:	2180      	movs	r1, #128	; 0x80
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f001 fa29 	bl	800d498 <USBD_LL_StallEP>
 800c046:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c048:	e020      	b.n	800c08c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c04a:	6839      	ldr	r1, [r7, #0]
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f000 fc6f 	bl	800c930 <USBD_CtlError>
              break;
 800c052:	e01b      	b.n	800c08c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	885b      	ldrh	r3, [r3, #2]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d10e      	bne.n	800c07a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c05c:	7bbb      	ldrb	r3, [r7, #14]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d00b      	beq.n	800c07a <USBD_StdEPReq+0xc0>
 800c062:	7bbb      	ldrb	r3, [r7, #14]
 800c064:	2b80      	cmp	r3, #128	; 0x80
 800c066:	d008      	beq.n	800c07a <USBD_StdEPReq+0xc0>
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	88db      	ldrh	r3, [r3, #6]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d104      	bne.n	800c07a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c070:	7bbb      	ldrb	r3, [r7, #14]
 800c072:	4619      	mov	r1, r3
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f001 fa0f 	bl	800d498 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f000 fd23 	bl	800cac6 <USBD_CtlSendStatus>

              break;
 800c080:	e004      	b.n	800c08c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c082:	6839      	ldr	r1, [r7, #0]
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f000 fc53 	bl	800c930 <USBD_CtlError>
              break;
 800c08a:	bf00      	nop
          }
          break;
 800c08c:	e0ec      	b.n	800c268 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c094:	b2db      	uxtb	r3, r3
 800c096:	2b02      	cmp	r3, #2
 800c098:	d002      	beq.n	800c0a0 <USBD_StdEPReq+0xe6>
 800c09a:	2b03      	cmp	r3, #3
 800c09c:	d016      	beq.n	800c0cc <USBD_StdEPReq+0x112>
 800c09e:	e030      	b.n	800c102 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0a0:	7bbb      	ldrb	r3, [r7, #14]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d00d      	beq.n	800c0c2 <USBD_StdEPReq+0x108>
 800c0a6:	7bbb      	ldrb	r3, [r7, #14]
 800c0a8:	2b80      	cmp	r3, #128	; 0x80
 800c0aa:	d00a      	beq.n	800c0c2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0ac:	7bbb      	ldrb	r3, [r7, #14]
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f001 f9f1 	bl	800d498 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0b6:	2180      	movs	r1, #128	; 0x80
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f001 f9ed 	bl	800d498 <USBD_LL_StallEP>
 800c0be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c0c0:	e025      	b.n	800c10e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c0c2:	6839      	ldr	r1, [r7, #0]
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f000 fc33 	bl	800c930 <USBD_CtlError>
              break;
 800c0ca:	e020      	b.n	800c10e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	885b      	ldrh	r3, [r3, #2]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d11b      	bne.n	800c10c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c0d4:	7bbb      	ldrb	r3, [r7, #14]
 800c0d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d004      	beq.n	800c0e8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c0de:	7bbb      	ldrb	r3, [r7, #14]
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f001 fa0e 	bl	800d504 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f000 fcec 	bl	800cac6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0f4:	689b      	ldr	r3, [r3, #8]
 800c0f6:	6839      	ldr	r1, [r7, #0]
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	4798      	blx	r3
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c100:	e004      	b.n	800c10c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c102:	6839      	ldr	r1, [r7, #0]
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 fc13 	bl	800c930 <USBD_CtlError>
              break;
 800c10a:	e000      	b.n	800c10e <USBD_StdEPReq+0x154>
              break;
 800c10c:	bf00      	nop
          }
          break;
 800c10e:	e0ab      	b.n	800c268 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c116:	b2db      	uxtb	r3, r3
 800c118:	2b02      	cmp	r3, #2
 800c11a:	d002      	beq.n	800c122 <USBD_StdEPReq+0x168>
 800c11c:	2b03      	cmp	r3, #3
 800c11e:	d032      	beq.n	800c186 <USBD_StdEPReq+0x1cc>
 800c120:	e097      	b.n	800c252 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c122:	7bbb      	ldrb	r3, [r7, #14]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d007      	beq.n	800c138 <USBD_StdEPReq+0x17e>
 800c128:	7bbb      	ldrb	r3, [r7, #14]
 800c12a:	2b80      	cmp	r3, #128	; 0x80
 800c12c:	d004      	beq.n	800c138 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c12e:	6839      	ldr	r1, [r7, #0]
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f000 fbfd 	bl	800c930 <USBD_CtlError>
                break;
 800c136:	e091      	b.n	800c25c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c138:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	da0b      	bge.n	800c158 <USBD_StdEPReq+0x19e>
 800c140:	7bbb      	ldrb	r3, [r7, #14]
 800c142:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c146:	4613      	mov	r3, r2
 800c148:	009b      	lsls	r3, r3, #2
 800c14a:	4413      	add	r3, r2
 800c14c:	009b      	lsls	r3, r3, #2
 800c14e:	3310      	adds	r3, #16
 800c150:	687a      	ldr	r2, [r7, #4]
 800c152:	4413      	add	r3, r2
 800c154:	3304      	adds	r3, #4
 800c156:	e00b      	b.n	800c170 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c158:	7bbb      	ldrb	r3, [r7, #14]
 800c15a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c15e:	4613      	mov	r3, r2
 800c160:	009b      	lsls	r3, r3, #2
 800c162:	4413      	add	r3, r2
 800c164:	009b      	lsls	r3, r3, #2
 800c166:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c16a:	687a      	ldr	r2, [r7, #4]
 800c16c:	4413      	add	r3, r2
 800c16e:	3304      	adds	r3, #4
 800c170:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	2200      	movs	r2, #0
 800c176:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	2202      	movs	r2, #2
 800c17c:	4619      	mov	r1, r3
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 fc47 	bl	800ca12 <USBD_CtlSendData>
              break;
 800c184:	e06a      	b.n	800c25c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c186:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	da11      	bge.n	800c1b2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c18e:	7bbb      	ldrb	r3, [r7, #14]
 800c190:	f003 020f 	and.w	r2, r3, #15
 800c194:	6879      	ldr	r1, [r7, #4]
 800c196:	4613      	mov	r3, r2
 800c198:	009b      	lsls	r3, r3, #2
 800c19a:	4413      	add	r3, r2
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	440b      	add	r3, r1
 800c1a0:	3324      	adds	r3, #36	; 0x24
 800c1a2:	881b      	ldrh	r3, [r3, #0]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d117      	bne.n	800c1d8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c1a8:	6839      	ldr	r1, [r7, #0]
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f000 fbc0 	bl	800c930 <USBD_CtlError>
                  break;
 800c1b0:	e054      	b.n	800c25c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c1b2:	7bbb      	ldrb	r3, [r7, #14]
 800c1b4:	f003 020f 	and.w	r2, r3, #15
 800c1b8:	6879      	ldr	r1, [r7, #4]
 800c1ba:	4613      	mov	r3, r2
 800c1bc:	009b      	lsls	r3, r3, #2
 800c1be:	4413      	add	r3, r2
 800c1c0:	009b      	lsls	r3, r3, #2
 800c1c2:	440b      	add	r3, r1
 800c1c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c1c8:	881b      	ldrh	r3, [r3, #0]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d104      	bne.n	800c1d8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c1ce:	6839      	ldr	r1, [r7, #0]
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f000 fbad 	bl	800c930 <USBD_CtlError>
                  break;
 800c1d6:	e041      	b.n	800c25c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	da0b      	bge.n	800c1f8 <USBD_StdEPReq+0x23e>
 800c1e0:	7bbb      	ldrb	r3, [r7, #14]
 800c1e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c1e6:	4613      	mov	r3, r2
 800c1e8:	009b      	lsls	r3, r3, #2
 800c1ea:	4413      	add	r3, r2
 800c1ec:	009b      	lsls	r3, r3, #2
 800c1ee:	3310      	adds	r3, #16
 800c1f0:	687a      	ldr	r2, [r7, #4]
 800c1f2:	4413      	add	r3, r2
 800c1f4:	3304      	adds	r3, #4
 800c1f6:	e00b      	b.n	800c210 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c1f8:	7bbb      	ldrb	r3, [r7, #14]
 800c1fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1fe:	4613      	mov	r3, r2
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	4413      	add	r3, r2
 800c204:	009b      	lsls	r3, r3, #2
 800c206:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c20a:	687a      	ldr	r2, [r7, #4]
 800c20c:	4413      	add	r3, r2
 800c20e:	3304      	adds	r3, #4
 800c210:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c212:	7bbb      	ldrb	r3, [r7, #14]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d002      	beq.n	800c21e <USBD_StdEPReq+0x264>
 800c218:	7bbb      	ldrb	r3, [r7, #14]
 800c21a:	2b80      	cmp	r3, #128	; 0x80
 800c21c:	d103      	bne.n	800c226 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	2200      	movs	r2, #0
 800c222:	601a      	str	r2, [r3, #0]
 800c224:	e00e      	b.n	800c244 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c226:	7bbb      	ldrb	r3, [r7, #14]
 800c228:	4619      	mov	r1, r3
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f001 f9a0 	bl	800d570 <USBD_LL_IsStallEP>
 800c230:	4603      	mov	r3, r0
 800c232:	2b00      	cmp	r3, #0
 800c234:	d003      	beq.n	800c23e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	2201      	movs	r2, #1
 800c23a:	601a      	str	r2, [r3, #0]
 800c23c:	e002      	b.n	800c244 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	2200      	movs	r2, #0
 800c242:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	2202      	movs	r2, #2
 800c248:	4619      	mov	r1, r3
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f000 fbe1 	bl	800ca12 <USBD_CtlSendData>
              break;
 800c250:	e004      	b.n	800c25c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c252:	6839      	ldr	r1, [r7, #0]
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f000 fb6b 	bl	800c930 <USBD_CtlError>
              break;
 800c25a:	bf00      	nop
          }
          break;
 800c25c:	e004      	b.n	800c268 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c25e:	6839      	ldr	r1, [r7, #0]
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f000 fb65 	bl	800c930 <USBD_CtlError>
          break;
 800c266:	bf00      	nop
      }
      break;
 800c268:	e004      	b.n	800c274 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c26a:	6839      	ldr	r1, [r7, #0]
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f000 fb5f 	bl	800c930 <USBD_CtlError>
      break;
 800c272:	bf00      	nop
  }

  return ret;
 800c274:	7bfb      	ldrb	r3, [r7, #15]
}
 800c276:	4618      	mov	r0, r3
 800c278:	3710      	adds	r7, #16
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
	...

0800c280 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c28a:	2300      	movs	r3, #0
 800c28c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c28e:	2300      	movs	r3, #0
 800c290:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c292:	2300      	movs	r3, #0
 800c294:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	885b      	ldrh	r3, [r3, #2]
 800c29a:	0a1b      	lsrs	r3, r3, #8
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	3b01      	subs	r3, #1
 800c2a0:	2b0e      	cmp	r3, #14
 800c2a2:	f200 8152 	bhi.w	800c54a <USBD_GetDescriptor+0x2ca>
 800c2a6:	a201      	add	r2, pc, #4	; (adr r2, 800c2ac <USBD_GetDescriptor+0x2c>)
 800c2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ac:	0800c31d 	.word	0x0800c31d
 800c2b0:	0800c335 	.word	0x0800c335
 800c2b4:	0800c375 	.word	0x0800c375
 800c2b8:	0800c54b 	.word	0x0800c54b
 800c2bc:	0800c54b 	.word	0x0800c54b
 800c2c0:	0800c4eb 	.word	0x0800c4eb
 800c2c4:	0800c517 	.word	0x0800c517
 800c2c8:	0800c54b 	.word	0x0800c54b
 800c2cc:	0800c54b 	.word	0x0800c54b
 800c2d0:	0800c54b 	.word	0x0800c54b
 800c2d4:	0800c54b 	.word	0x0800c54b
 800c2d8:	0800c54b 	.word	0x0800c54b
 800c2dc:	0800c54b 	.word	0x0800c54b
 800c2e0:	0800c54b 	.word	0x0800c54b
 800c2e4:	0800c2e9 	.word	0x0800c2e9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2ee:	69db      	ldr	r3, [r3, #28]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d00b      	beq.n	800c30c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2fa:	69db      	ldr	r3, [r3, #28]
 800c2fc:	687a      	ldr	r2, [r7, #4]
 800c2fe:	7c12      	ldrb	r2, [r2, #16]
 800c300:	f107 0108 	add.w	r1, r7, #8
 800c304:	4610      	mov	r0, r2
 800c306:	4798      	blx	r3
 800c308:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c30a:	e126      	b.n	800c55a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c30c:	6839      	ldr	r1, [r7, #0]
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 fb0e 	bl	800c930 <USBD_CtlError>
        err++;
 800c314:	7afb      	ldrb	r3, [r7, #11]
 800c316:	3301      	adds	r3, #1
 800c318:	72fb      	strb	r3, [r7, #11]
      break;
 800c31a:	e11e      	b.n	800c55a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	687a      	ldr	r2, [r7, #4]
 800c326:	7c12      	ldrb	r2, [r2, #16]
 800c328:	f107 0108 	add.w	r1, r7, #8
 800c32c:	4610      	mov	r0, r2
 800c32e:	4798      	blx	r3
 800c330:	60f8      	str	r0, [r7, #12]
      break;
 800c332:	e112      	b.n	800c55a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	7c1b      	ldrb	r3, [r3, #16]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d10d      	bne.n	800c358 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c344:	f107 0208 	add.w	r2, r7, #8
 800c348:	4610      	mov	r0, r2
 800c34a:	4798      	blx	r3
 800c34c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	3301      	adds	r3, #1
 800c352:	2202      	movs	r2, #2
 800c354:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c356:	e100      	b.n	800c55a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c360:	f107 0208 	add.w	r2, r7, #8
 800c364:	4610      	mov	r0, r2
 800c366:	4798      	blx	r3
 800c368:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	3301      	adds	r3, #1
 800c36e:	2202      	movs	r2, #2
 800c370:	701a      	strb	r2, [r3, #0]
      break;
 800c372:	e0f2      	b.n	800c55a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	885b      	ldrh	r3, [r3, #2]
 800c378:	b2db      	uxtb	r3, r3
 800c37a:	2b05      	cmp	r3, #5
 800c37c:	f200 80ac 	bhi.w	800c4d8 <USBD_GetDescriptor+0x258>
 800c380:	a201      	add	r2, pc, #4	; (adr r2, 800c388 <USBD_GetDescriptor+0x108>)
 800c382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c386:	bf00      	nop
 800c388:	0800c3a1 	.word	0x0800c3a1
 800c38c:	0800c3d5 	.word	0x0800c3d5
 800c390:	0800c409 	.word	0x0800c409
 800c394:	0800c43d 	.word	0x0800c43d
 800c398:	0800c471 	.word	0x0800c471
 800c39c:	0800c4a5 	.word	0x0800c4a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d00b      	beq.n	800c3c4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	687a      	ldr	r2, [r7, #4]
 800c3b6:	7c12      	ldrb	r2, [r2, #16]
 800c3b8:	f107 0108 	add.w	r1, r7, #8
 800c3bc:	4610      	mov	r0, r2
 800c3be:	4798      	blx	r3
 800c3c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3c2:	e091      	b.n	800c4e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c3c4:	6839      	ldr	r1, [r7, #0]
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f000 fab2 	bl	800c930 <USBD_CtlError>
            err++;
 800c3cc:	7afb      	ldrb	r3, [r7, #11]
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	72fb      	strb	r3, [r7, #11]
          break;
 800c3d2:	e089      	b.n	800c4e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3da:	689b      	ldr	r3, [r3, #8]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d00b      	beq.n	800c3f8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3e6:	689b      	ldr	r3, [r3, #8]
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	7c12      	ldrb	r2, [r2, #16]
 800c3ec:	f107 0108 	add.w	r1, r7, #8
 800c3f0:	4610      	mov	r0, r2
 800c3f2:	4798      	blx	r3
 800c3f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3f6:	e077      	b.n	800c4e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c3f8:	6839      	ldr	r1, [r7, #0]
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f000 fa98 	bl	800c930 <USBD_CtlError>
            err++;
 800c400:	7afb      	ldrb	r3, [r7, #11]
 800c402:	3301      	adds	r3, #1
 800c404:	72fb      	strb	r3, [r7, #11]
          break;
 800c406:	e06f      	b.n	800c4e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c40e:	68db      	ldr	r3, [r3, #12]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d00b      	beq.n	800c42c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c41a:	68db      	ldr	r3, [r3, #12]
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	7c12      	ldrb	r2, [r2, #16]
 800c420:	f107 0108 	add.w	r1, r7, #8
 800c424:	4610      	mov	r0, r2
 800c426:	4798      	blx	r3
 800c428:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c42a:	e05d      	b.n	800c4e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c42c:	6839      	ldr	r1, [r7, #0]
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 fa7e 	bl	800c930 <USBD_CtlError>
            err++;
 800c434:	7afb      	ldrb	r3, [r7, #11]
 800c436:	3301      	adds	r3, #1
 800c438:	72fb      	strb	r3, [r7, #11]
          break;
 800c43a:	e055      	b.n	800c4e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c442:	691b      	ldr	r3, [r3, #16]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d00b      	beq.n	800c460 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c44e:	691b      	ldr	r3, [r3, #16]
 800c450:	687a      	ldr	r2, [r7, #4]
 800c452:	7c12      	ldrb	r2, [r2, #16]
 800c454:	f107 0108 	add.w	r1, r7, #8
 800c458:	4610      	mov	r0, r2
 800c45a:	4798      	blx	r3
 800c45c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c45e:	e043      	b.n	800c4e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c460:	6839      	ldr	r1, [r7, #0]
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f000 fa64 	bl	800c930 <USBD_CtlError>
            err++;
 800c468:	7afb      	ldrb	r3, [r7, #11]
 800c46a:	3301      	adds	r3, #1
 800c46c:	72fb      	strb	r3, [r7, #11]
          break;
 800c46e:	e03b      	b.n	800c4e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c476:	695b      	ldr	r3, [r3, #20]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d00b      	beq.n	800c494 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c482:	695b      	ldr	r3, [r3, #20]
 800c484:	687a      	ldr	r2, [r7, #4]
 800c486:	7c12      	ldrb	r2, [r2, #16]
 800c488:	f107 0108 	add.w	r1, r7, #8
 800c48c:	4610      	mov	r0, r2
 800c48e:	4798      	blx	r3
 800c490:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c492:	e029      	b.n	800c4e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c494:	6839      	ldr	r1, [r7, #0]
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 fa4a 	bl	800c930 <USBD_CtlError>
            err++;
 800c49c:	7afb      	ldrb	r3, [r7, #11]
 800c49e:	3301      	adds	r3, #1
 800c4a0:	72fb      	strb	r3, [r7, #11]
          break;
 800c4a2:	e021      	b.n	800c4e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4aa:	699b      	ldr	r3, [r3, #24]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d00b      	beq.n	800c4c8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4b6:	699b      	ldr	r3, [r3, #24]
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	7c12      	ldrb	r2, [r2, #16]
 800c4bc:	f107 0108 	add.w	r1, r7, #8
 800c4c0:	4610      	mov	r0, r2
 800c4c2:	4798      	blx	r3
 800c4c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4c6:	e00f      	b.n	800c4e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4c8:	6839      	ldr	r1, [r7, #0]
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f000 fa30 	bl	800c930 <USBD_CtlError>
            err++;
 800c4d0:	7afb      	ldrb	r3, [r7, #11]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	72fb      	strb	r3, [r7, #11]
          break;
 800c4d6:	e007      	b.n	800c4e8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c4d8:	6839      	ldr	r1, [r7, #0]
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f000 fa28 	bl	800c930 <USBD_CtlError>
          err++;
 800c4e0:	7afb      	ldrb	r3, [r7, #11]
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c4e6:	bf00      	nop
      }
      break;
 800c4e8:	e037      	b.n	800c55a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	7c1b      	ldrb	r3, [r3, #16]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d109      	bne.n	800c506 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4fa:	f107 0208 	add.w	r2, r7, #8
 800c4fe:	4610      	mov	r0, r2
 800c500:	4798      	blx	r3
 800c502:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c504:	e029      	b.n	800c55a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c506:	6839      	ldr	r1, [r7, #0]
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f000 fa11 	bl	800c930 <USBD_CtlError>
        err++;
 800c50e:	7afb      	ldrb	r3, [r7, #11]
 800c510:	3301      	adds	r3, #1
 800c512:	72fb      	strb	r3, [r7, #11]
      break;
 800c514:	e021      	b.n	800c55a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	7c1b      	ldrb	r3, [r3, #16]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d10d      	bne.n	800c53a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c526:	f107 0208 	add.w	r2, r7, #8
 800c52a:	4610      	mov	r0, r2
 800c52c:	4798      	blx	r3
 800c52e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	3301      	adds	r3, #1
 800c534:	2207      	movs	r2, #7
 800c536:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c538:	e00f      	b.n	800c55a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c53a:	6839      	ldr	r1, [r7, #0]
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f000 f9f7 	bl	800c930 <USBD_CtlError>
        err++;
 800c542:	7afb      	ldrb	r3, [r7, #11]
 800c544:	3301      	adds	r3, #1
 800c546:	72fb      	strb	r3, [r7, #11]
      break;
 800c548:	e007      	b.n	800c55a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c54a:	6839      	ldr	r1, [r7, #0]
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f000 f9ef 	bl	800c930 <USBD_CtlError>
      err++;
 800c552:	7afb      	ldrb	r3, [r7, #11]
 800c554:	3301      	adds	r3, #1
 800c556:	72fb      	strb	r3, [r7, #11]
      break;
 800c558:	bf00      	nop
  }

  if (err != 0U)
 800c55a:	7afb      	ldrb	r3, [r7, #11]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d11e      	bne.n	800c59e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	88db      	ldrh	r3, [r3, #6]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d016      	beq.n	800c596 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c568:	893b      	ldrh	r3, [r7, #8]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d00e      	beq.n	800c58c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	88da      	ldrh	r2, [r3, #6]
 800c572:	893b      	ldrh	r3, [r7, #8]
 800c574:	4293      	cmp	r3, r2
 800c576:	bf28      	it	cs
 800c578:	4613      	movcs	r3, r2
 800c57a:	b29b      	uxth	r3, r3
 800c57c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c57e:	893b      	ldrh	r3, [r7, #8]
 800c580:	461a      	mov	r2, r3
 800c582:	68f9      	ldr	r1, [r7, #12]
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f000 fa44 	bl	800ca12 <USBD_CtlSendData>
 800c58a:	e009      	b.n	800c5a0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c58c:	6839      	ldr	r1, [r7, #0]
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f000 f9ce 	bl	800c930 <USBD_CtlError>
 800c594:	e004      	b.n	800c5a0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f000 fa95 	bl	800cac6 <USBD_CtlSendStatus>
 800c59c:	e000      	b.n	800c5a0 <USBD_GetDescriptor+0x320>
    return;
 800c59e:	bf00      	nop
  }
}
 800c5a0:	3710      	adds	r7, #16
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop

0800c5a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b084      	sub	sp, #16
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	889b      	ldrh	r3, [r3, #4]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d131      	bne.n	800c61e <USBD_SetAddress+0x76>
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	88db      	ldrh	r3, [r3, #6]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d12d      	bne.n	800c61e <USBD_SetAddress+0x76>
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	885b      	ldrh	r3, [r3, #2]
 800c5c6:	2b7f      	cmp	r3, #127	; 0x7f
 800c5c8:	d829      	bhi.n	800c61e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	885b      	ldrh	r3, [r3, #2]
 800c5ce:	b2db      	uxtb	r3, r3
 800c5d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5dc:	b2db      	uxtb	r3, r3
 800c5de:	2b03      	cmp	r3, #3
 800c5e0:	d104      	bne.n	800c5ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c5e2:	6839      	ldr	r1, [r7, #0]
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f000 f9a3 	bl	800c930 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5ea:	e01d      	b.n	800c628 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	7bfa      	ldrb	r2, [r7, #15]
 800c5f0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c5f4:	7bfb      	ldrb	r3, [r7, #15]
 800c5f6:	4619      	mov	r1, r3
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f000 ffe5 	bl	800d5c8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f000 fa61 	bl	800cac6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c604:	7bfb      	ldrb	r3, [r7, #15]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d004      	beq.n	800c614 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2202      	movs	r2, #2
 800c60e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c612:	e009      	b.n	800c628 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2201      	movs	r2, #1
 800c618:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c61c:	e004      	b.n	800c628 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c61e:	6839      	ldr	r1, [r7, #0]
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f000 f985 	bl	800c930 <USBD_CtlError>
  }
}
 800c626:	bf00      	nop
 800c628:	bf00      	nop
 800c62a:	3710      	adds	r7, #16
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b084      	sub	sp, #16
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
 800c638:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c63a:	2300      	movs	r3, #0
 800c63c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	885b      	ldrh	r3, [r3, #2]
 800c642:	b2da      	uxtb	r2, r3
 800c644:	4b4c      	ldr	r3, [pc, #304]	; (800c778 <USBD_SetConfig+0x148>)
 800c646:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c648:	4b4b      	ldr	r3, [pc, #300]	; (800c778 <USBD_SetConfig+0x148>)
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d905      	bls.n	800c65c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c650:	6839      	ldr	r1, [r7, #0]
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f000 f96c 	bl	800c930 <USBD_CtlError>
    return USBD_FAIL;
 800c658:	2303      	movs	r3, #3
 800c65a:	e088      	b.n	800c76e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c662:	b2db      	uxtb	r3, r3
 800c664:	2b02      	cmp	r3, #2
 800c666:	d002      	beq.n	800c66e <USBD_SetConfig+0x3e>
 800c668:	2b03      	cmp	r3, #3
 800c66a:	d025      	beq.n	800c6b8 <USBD_SetConfig+0x88>
 800c66c:	e071      	b.n	800c752 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c66e:	4b42      	ldr	r3, [pc, #264]	; (800c778 <USBD_SetConfig+0x148>)
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d01c      	beq.n	800c6b0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c676:	4b40      	ldr	r3, [pc, #256]	; (800c778 <USBD_SetConfig+0x148>)
 800c678:	781b      	ldrb	r3, [r3, #0]
 800c67a:	461a      	mov	r2, r3
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c680:	4b3d      	ldr	r3, [pc, #244]	; (800c778 <USBD_SetConfig+0x148>)
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	4619      	mov	r1, r3
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f7ff f91e 	bl	800b8c8 <USBD_SetClassConfig>
 800c68c:	4603      	mov	r3, r0
 800c68e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c690:	7bfb      	ldrb	r3, [r7, #15]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d004      	beq.n	800c6a0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c696:	6839      	ldr	r1, [r7, #0]
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f000 f949 	bl	800c930 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c69e:	e065      	b.n	800c76c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f000 fa10 	bl	800cac6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2203      	movs	r2, #3
 800c6aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c6ae:	e05d      	b.n	800c76c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f000 fa08 	bl	800cac6 <USBD_CtlSendStatus>
      break;
 800c6b6:	e059      	b.n	800c76c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c6b8:	4b2f      	ldr	r3, [pc, #188]	; (800c778 <USBD_SetConfig+0x148>)
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d112      	bne.n	800c6e6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2202      	movs	r2, #2
 800c6c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c6c8:	4b2b      	ldr	r3, [pc, #172]	; (800c778 <USBD_SetConfig+0x148>)
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	461a      	mov	r2, r3
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c6d2:	4b29      	ldr	r3, [pc, #164]	; (800c778 <USBD_SetConfig+0x148>)
 800c6d4:	781b      	ldrb	r3, [r3, #0]
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f7ff f911 	bl	800b900 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f000 f9f1 	bl	800cac6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6e4:	e042      	b.n	800c76c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c6e6:	4b24      	ldr	r3, [pc, #144]	; (800c778 <USBD_SetConfig+0x148>)
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d02a      	beq.n	800c74a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	685b      	ldr	r3, [r3, #4]
 800c6f8:	b2db      	uxtb	r3, r3
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f7ff f8ff 	bl	800b900 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c702:	4b1d      	ldr	r3, [pc, #116]	; (800c778 <USBD_SetConfig+0x148>)
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	461a      	mov	r2, r3
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c70c:	4b1a      	ldr	r3, [pc, #104]	; (800c778 <USBD_SetConfig+0x148>)
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	4619      	mov	r1, r3
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f7ff f8d8 	bl	800b8c8 <USBD_SetClassConfig>
 800c718:	4603      	mov	r3, r0
 800c71a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c71c:	7bfb      	ldrb	r3, [r7, #15]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d00f      	beq.n	800c742 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c722:	6839      	ldr	r1, [r7, #0]
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f000 f903 	bl	800c930 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	685b      	ldr	r3, [r3, #4]
 800c72e:	b2db      	uxtb	r3, r3
 800c730:	4619      	mov	r1, r3
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f7ff f8e4 	bl	800b900 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2202      	movs	r2, #2
 800c73c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c740:	e014      	b.n	800c76c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f000 f9bf 	bl	800cac6 <USBD_CtlSendStatus>
      break;
 800c748:	e010      	b.n	800c76c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 f9bb 	bl	800cac6 <USBD_CtlSendStatus>
      break;
 800c750:	e00c      	b.n	800c76c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c752:	6839      	ldr	r1, [r7, #0]
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f000 f8eb 	bl	800c930 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c75a:	4b07      	ldr	r3, [pc, #28]	; (800c778 <USBD_SetConfig+0x148>)
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	4619      	mov	r1, r3
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f7ff f8cd 	bl	800b900 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c766:	2303      	movs	r3, #3
 800c768:	73fb      	strb	r3, [r7, #15]
      break;
 800c76a:	bf00      	nop
  }

  return ret;
 800c76c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3710      	adds	r7, #16
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}
 800c776:	bf00      	nop
 800c778:	200004b4 	.word	0x200004b4

0800c77c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b082      	sub	sp, #8
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
 800c784:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	88db      	ldrh	r3, [r3, #6]
 800c78a:	2b01      	cmp	r3, #1
 800c78c:	d004      	beq.n	800c798 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c78e:	6839      	ldr	r1, [r7, #0]
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f000 f8cd 	bl	800c930 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c796:	e023      	b.n	800c7e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c79e:	b2db      	uxtb	r3, r3
 800c7a0:	2b02      	cmp	r3, #2
 800c7a2:	dc02      	bgt.n	800c7aa <USBD_GetConfig+0x2e>
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	dc03      	bgt.n	800c7b0 <USBD_GetConfig+0x34>
 800c7a8:	e015      	b.n	800c7d6 <USBD_GetConfig+0x5a>
 800c7aa:	2b03      	cmp	r3, #3
 800c7ac:	d00b      	beq.n	800c7c6 <USBD_GetConfig+0x4a>
 800c7ae:	e012      	b.n	800c7d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	3308      	adds	r3, #8
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	4619      	mov	r1, r3
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f000 f927 	bl	800ca12 <USBD_CtlSendData>
        break;
 800c7c4:	e00c      	b.n	800c7e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	3304      	adds	r3, #4
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	4619      	mov	r1, r3
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f000 f91f 	bl	800ca12 <USBD_CtlSendData>
        break;
 800c7d4:	e004      	b.n	800c7e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c7d6:	6839      	ldr	r1, [r7, #0]
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f000 f8a9 	bl	800c930 <USBD_CtlError>
        break;
 800c7de:	bf00      	nop
}
 800c7e0:	bf00      	nop
 800c7e2:	3708      	adds	r7, #8
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b082      	sub	sp, #8
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7f8:	b2db      	uxtb	r3, r3
 800c7fa:	3b01      	subs	r3, #1
 800c7fc:	2b02      	cmp	r3, #2
 800c7fe:	d81e      	bhi.n	800c83e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	88db      	ldrh	r3, [r3, #6]
 800c804:	2b02      	cmp	r3, #2
 800c806:	d004      	beq.n	800c812 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c808:	6839      	ldr	r1, [r7, #0]
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f000 f890 	bl	800c930 <USBD_CtlError>
        break;
 800c810:	e01a      	b.n	800c848 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2201      	movs	r2, #1
 800c816:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d005      	beq.n	800c82e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	68db      	ldr	r3, [r3, #12]
 800c826:	f043 0202 	orr.w	r2, r3, #2
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	330c      	adds	r3, #12
 800c832:	2202      	movs	r2, #2
 800c834:	4619      	mov	r1, r3
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f000 f8eb 	bl	800ca12 <USBD_CtlSendData>
      break;
 800c83c:	e004      	b.n	800c848 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c83e:	6839      	ldr	r1, [r7, #0]
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f000 f875 	bl	800c930 <USBD_CtlError>
      break;
 800c846:	bf00      	nop
  }
}
 800c848:	bf00      	nop
 800c84a:	3708      	adds	r7, #8
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}

0800c850 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
 800c858:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	885b      	ldrh	r3, [r3, #2]
 800c85e:	2b01      	cmp	r3, #1
 800c860:	d106      	bne.n	800c870 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2201      	movs	r2, #1
 800c866:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f000 f92b 	bl	800cac6 <USBD_CtlSendStatus>
  }
}
 800c870:	bf00      	nop
 800c872:	3708      	adds	r7, #8
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}

0800c878 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c888:	b2db      	uxtb	r3, r3
 800c88a:	3b01      	subs	r3, #1
 800c88c:	2b02      	cmp	r3, #2
 800c88e:	d80b      	bhi.n	800c8a8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	885b      	ldrh	r3, [r3, #2]
 800c894:	2b01      	cmp	r3, #1
 800c896:	d10c      	bne.n	800c8b2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2200      	movs	r2, #0
 800c89c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f000 f910 	bl	800cac6 <USBD_CtlSendStatus>
      }
      break;
 800c8a6:	e004      	b.n	800c8b2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c8a8:	6839      	ldr	r1, [r7, #0]
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f000 f840 	bl	800c930 <USBD_CtlError>
      break;
 800c8b0:	e000      	b.n	800c8b4 <USBD_ClrFeature+0x3c>
      break;
 800c8b2:	bf00      	nop
  }
}
 800c8b4:	bf00      	nop
 800c8b6:	3708      	adds	r7, #8
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b084      	sub	sp, #16
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	781a      	ldrb	r2, [r3, #0]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	781a      	ldrb	r2, [r3, #0]
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	3301      	adds	r3, #1
 800c8e4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c8e6:	68f8      	ldr	r0, [r7, #12]
 800c8e8:	f7ff fa91 	bl	800be0e <SWAPBYTE>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c900:	68f8      	ldr	r0, [r7, #12]
 800c902:	f7ff fa84 	bl	800be0e <SWAPBYTE>
 800c906:	4603      	mov	r3, r0
 800c908:	461a      	mov	r2, r3
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	3301      	adds	r3, #1
 800c912:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	3301      	adds	r3, #1
 800c918:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c91a:	68f8      	ldr	r0, [r7, #12]
 800c91c:	f7ff fa77 	bl	800be0e <SWAPBYTE>
 800c920:	4603      	mov	r3, r0
 800c922:	461a      	mov	r2, r3
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	80da      	strh	r2, [r3, #6]
}
 800c928:	bf00      	nop
 800c92a:	3710      	adds	r7, #16
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b082      	sub	sp, #8
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c93a:	2180      	movs	r1, #128	; 0x80
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f000 fdab 	bl	800d498 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c942:	2100      	movs	r1, #0
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f000 fda7 	bl	800d498 <USBD_LL_StallEP>
}
 800c94a:	bf00      	nop
 800c94c:	3708      	adds	r7, #8
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}

0800c952 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c952:	b580      	push	{r7, lr}
 800c954:	b086      	sub	sp, #24
 800c956:	af00      	add	r7, sp, #0
 800c958:	60f8      	str	r0, [r7, #12]
 800c95a:	60b9      	str	r1, [r7, #8]
 800c95c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c95e:	2300      	movs	r3, #0
 800c960:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d036      	beq.n	800c9d6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c96c:	6938      	ldr	r0, [r7, #16]
 800c96e:	f000 f836 	bl	800c9de <USBD_GetLen>
 800c972:	4603      	mov	r3, r0
 800c974:	3301      	adds	r3, #1
 800c976:	b29b      	uxth	r3, r3
 800c978:	005b      	lsls	r3, r3, #1
 800c97a:	b29a      	uxth	r2, r3
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c980:	7dfb      	ldrb	r3, [r7, #23]
 800c982:	68ba      	ldr	r2, [r7, #8]
 800c984:	4413      	add	r3, r2
 800c986:	687a      	ldr	r2, [r7, #4]
 800c988:	7812      	ldrb	r2, [r2, #0]
 800c98a:	701a      	strb	r2, [r3, #0]
  idx++;
 800c98c:	7dfb      	ldrb	r3, [r7, #23]
 800c98e:	3301      	adds	r3, #1
 800c990:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c992:	7dfb      	ldrb	r3, [r7, #23]
 800c994:	68ba      	ldr	r2, [r7, #8]
 800c996:	4413      	add	r3, r2
 800c998:	2203      	movs	r2, #3
 800c99a:	701a      	strb	r2, [r3, #0]
  idx++;
 800c99c:	7dfb      	ldrb	r3, [r7, #23]
 800c99e:	3301      	adds	r3, #1
 800c9a0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c9a2:	e013      	b.n	800c9cc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c9a4:	7dfb      	ldrb	r3, [r7, #23]
 800c9a6:	68ba      	ldr	r2, [r7, #8]
 800c9a8:	4413      	add	r3, r2
 800c9aa:	693a      	ldr	r2, [r7, #16]
 800c9ac:	7812      	ldrb	r2, [r2, #0]
 800c9ae:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	613b      	str	r3, [r7, #16]
    idx++;
 800c9b6:	7dfb      	ldrb	r3, [r7, #23]
 800c9b8:	3301      	adds	r3, #1
 800c9ba:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c9bc:	7dfb      	ldrb	r3, [r7, #23]
 800c9be:	68ba      	ldr	r2, [r7, #8]
 800c9c0:	4413      	add	r3, r2
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	701a      	strb	r2, [r3, #0]
    idx++;
 800c9c6:	7dfb      	ldrb	r3, [r7, #23]
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d1e7      	bne.n	800c9a4 <USBD_GetString+0x52>
 800c9d4:	e000      	b.n	800c9d8 <USBD_GetString+0x86>
    return;
 800c9d6:	bf00      	nop
  }
}
 800c9d8:	3718      	adds	r7, #24
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}

0800c9de <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c9de:	b480      	push	{r7}
 800c9e0:	b085      	sub	sp, #20
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c9ee:	e005      	b.n	800c9fc <USBD_GetLen+0x1e>
  {
    len++;
 800c9f0:	7bfb      	ldrb	r3, [r7, #15]
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d1f5      	bne.n	800c9f0 <USBD_GetLen+0x12>
  }

  return len;
 800ca04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3714      	adds	r7, #20
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca10:	4770      	bx	lr

0800ca12 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ca12:	b580      	push	{r7, lr}
 800ca14:	b084      	sub	sp, #16
 800ca16:	af00      	add	r7, sp, #0
 800ca18:	60f8      	str	r0, [r7, #12]
 800ca1a:	60b9      	str	r1, [r7, #8]
 800ca1c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	2202      	movs	r2, #2
 800ca22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	687a      	ldr	r2, [r7, #4]
 800ca2a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	687a      	ldr	r2, [r7, #4]
 800ca30:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	68ba      	ldr	r2, [r7, #8]
 800ca36:	2100      	movs	r1, #0
 800ca38:	68f8      	ldr	r0, [r7, #12]
 800ca3a:	f000 fdfb 	bl	800d634 <USBD_LL_Transmit>

  return USBD_OK;
 800ca3e:	2300      	movs	r3, #0
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3710      	adds	r7, #16
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b084      	sub	sp, #16
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	60f8      	str	r0, [r7, #12]
 800ca50:	60b9      	str	r1, [r7, #8]
 800ca52:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	68ba      	ldr	r2, [r7, #8]
 800ca58:	2100      	movs	r1, #0
 800ca5a:	68f8      	ldr	r0, [r7, #12]
 800ca5c:	f000 fdea 	bl	800d634 <USBD_LL_Transmit>

  return USBD_OK;
 800ca60:	2300      	movs	r3, #0
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3710      	adds	r7, #16
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}

0800ca6a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ca6a:	b580      	push	{r7, lr}
 800ca6c:	b084      	sub	sp, #16
 800ca6e:	af00      	add	r7, sp, #0
 800ca70:	60f8      	str	r0, [r7, #12]
 800ca72:	60b9      	str	r1, [r7, #8]
 800ca74:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	2203      	movs	r2, #3
 800ca7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	687a      	ldr	r2, [r7, #4]
 800ca82:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	687a      	ldr	r2, [r7, #4]
 800ca8a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	68ba      	ldr	r2, [r7, #8]
 800ca92:	2100      	movs	r1, #0
 800ca94:	68f8      	ldr	r0, [r7, #12]
 800ca96:	f000 fe05 	bl	800d6a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca9a:	2300      	movs	r3, #0
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3710      	adds	r7, #16
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}

0800caa4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b084      	sub	sp, #16
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	60f8      	str	r0, [r7, #12]
 800caac:	60b9      	str	r1, [r7, #8]
 800caae:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	68ba      	ldr	r2, [r7, #8]
 800cab4:	2100      	movs	r1, #0
 800cab6:	68f8      	ldr	r0, [r7, #12]
 800cab8:	f000 fdf4 	bl	800d6a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cabc:	2300      	movs	r3, #0
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3710      	adds	r7, #16
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}

0800cac6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cac6:	b580      	push	{r7, lr}
 800cac8:	b082      	sub	sp, #8
 800caca:	af00      	add	r7, sp, #0
 800cacc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2204      	movs	r2, #4
 800cad2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cad6:	2300      	movs	r3, #0
 800cad8:	2200      	movs	r2, #0
 800cada:	2100      	movs	r1, #0
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f000 fda9 	bl	800d634 <USBD_LL_Transmit>

  return USBD_OK;
 800cae2:	2300      	movs	r3, #0
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3708      	adds	r7, #8
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}

0800caec <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b082      	sub	sp, #8
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2205      	movs	r2, #5
 800caf8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cafc:	2300      	movs	r3, #0
 800cafe:	2200      	movs	r2, #0
 800cb00:	2100      	movs	r1, #0
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f000 fdce 	bl	800d6a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb08:	2300      	movs	r3, #0
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3708      	adds	r7, #8
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
	...

0800cb14 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cb14:	b480      	push	{r7}
 800cb16:	b087      	sub	sp, #28
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	60f8      	str	r0, [r7, #12]
 800cb1c:	60b9      	str	r1, [r7, #8]
 800cb1e:	4613      	mov	r3, r2
 800cb20:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cb22:	2301      	movs	r3, #1
 800cb24:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cb26:	2300      	movs	r3, #0
 800cb28:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cb2a:	4b1f      	ldr	r3, [pc, #124]	; (800cba8 <FATFS_LinkDriverEx+0x94>)
 800cb2c:	7a5b      	ldrb	r3, [r3, #9]
 800cb2e:	b2db      	uxtb	r3, r3
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d131      	bne.n	800cb98 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cb34:	4b1c      	ldr	r3, [pc, #112]	; (800cba8 <FATFS_LinkDriverEx+0x94>)
 800cb36:	7a5b      	ldrb	r3, [r3, #9]
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	4b1a      	ldr	r3, [pc, #104]	; (800cba8 <FATFS_LinkDriverEx+0x94>)
 800cb3e:	2100      	movs	r1, #0
 800cb40:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cb42:	4b19      	ldr	r3, [pc, #100]	; (800cba8 <FATFS_LinkDriverEx+0x94>)
 800cb44:	7a5b      	ldrb	r3, [r3, #9]
 800cb46:	b2db      	uxtb	r3, r3
 800cb48:	4a17      	ldr	r2, [pc, #92]	; (800cba8 <FATFS_LinkDriverEx+0x94>)
 800cb4a:	009b      	lsls	r3, r3, #2
 800cb4c:	4413      	add	r3, r2
 800cb4e:	68fa      	ldr	r2, [r7, #12]
 800cb50:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cb52:	4b15      	ldr	r3, [pc, #84]	; (800cba8 <FATFS_LinkDriverEx+0x94>)
 800cb54:	7a5b      	ldrb	r3, [r3, #9]
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	461a      	mov	r2, r3
 800cb5a:	4b13      	ldr	r3, [pc, #76]	; (800cba8 <FATFS_LinkDriverEx+0x94>)
 800cb5c:	4413      	add	r3, r2
 800cb5e:	79fa      	ldrb	r2, [r7, #7]
 800cb60:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cb62:	4b11      	ldr	r3, [pc, #68]	; (800cba8 <FATFS_LinkDriverEx+0x94>)
 800cb64:	7a5b      	ldrb	r3, [r3, #9]
 800cb66:	b2db      	uxtb	r3, r3
 800cb68:	1c5a      	adds	r2, r3, #1
 800cb6a:	b2d1      	uxtb	r1, r2
 800cb6c:	4a0e      	ldr	r2, [pc, #56]	; (800cba8 <FATFS_LinkDriverEx+0x94>)
 800cb6e:	7251      	strb	r1, [r2, #9]
 800cb70:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cb72:	7dbb      	ldrb	r3, [r7, #22]
 800cb74:	3330      	adds	r3, #48	; 0x30
 800cb76:	b2da      	uxtb	r2, r3
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	3301      	adds	r3, #1
 800cb80:	223a      	movs	r2, #58	; 0x3a
 800cb82:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	3302      	adds	r3, #2
 800cb88:	222f      	movs	r2, #47	; 0x2f
 800cb8a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	3303      	adds	r3, #3
 800cb90:	2200      	movs	r2, #0
 800cb92:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cb94:	2300      	movs	r3, #0
 800cb96:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cb98:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	371c      	adds	r7, #28
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba4:	4770      	bx	lr
 800cba6:	bf00      	nop
 800cba8:	200004b8 	.word	0x200004b8

0800cbac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b082      	sub	sp, #8
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	6839      	ldr	r1, [r7, #0]
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f7ff ffaa 	bl	800cb14 <FATFS_LinkDriverEx>
 800cbc0:	4603      	mov	r3, r0
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3708      	adds	r7, #8
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
	...

0800cbcc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	4912      	ldr	r1, [pc, #72]	; (800cc1c <MX_USB_DEVICE_Init+0x50>)
 800cbd4:	4812      	ldr	r0, [pc, #72]	; (800cc20 <MX_USB_DEVICE_Init+0x54>)
 800cbd6:	f7fe fe09 	bl	800b7ec <USBD_Init>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d001      	beq.n	800cbe4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cbe0:	f7f3 fffa 	bl	8000bd8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cbe4:	490f      	ldr	r1, [pc, #60]	; (800cc24 <MX_USB_DEVICE_Init+0x58>)
 800cbe6:	480e      	ldr	r0, [pc, #56]	; (800cc20 <MX_USB_DEVICE_Init+0x54>)
 800cbe8:	f7fe fe30 	bl	800b84c <USBD_RegisterClass>
 800cbec:	4603      	mov	r3, r0
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d001      	beq.n	800cbf6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cbf2:	f7f3 fff1 	bl	8000bd8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cbf6:	490c      	ldr	r1, [pc, #48]	; (800cc28 <MX_USB_DEVICE_Init+0x5c>)
 800cbf8:	4809      	ldr	r0, [pc, #36]	; (800cc20 <MX_USB_DEVICE_Init+0x54>)
 800cbfa:	f7fe fd81 	bl	800b700 <USBD_CDC_RegisterInterface>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d001      	beq.n	800cc08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cc04:	f7f3 ffe8 	bl	8000bd8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cc08:	4805      	ldr	r0, [pc, #20]	; (800cc20 <MX_USB_DEVICE_Init+0x54>)
 800cc0a:	f7fe fe46 	bl	800b89a <USBD_Start>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d001      	beq.n	800cc18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cc14:	f7f3 ffe0 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cc18:	bf00      	nop
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	20000130 	.word	0x20000130
 800cc20:	200004c4 	.word	0x200004c4
 800cc24:	20000018 	.word	0x20000018
 800cc28:	2000011c 	.word	0x2000011c

0800cc2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cc30:	2200      	movs	r2, #0
 800cc32:	4905      	ldr	r1, [pc, #20]	; (800cc48 <CDC_Init_FS+0x1c>)
 800cc34:	4805      	ldr	r0, [pc, #20]	; (800cc4c <CDC_Init_FS+0x20>)
 800cc36:	f7fe fd78 	bl	800b72a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cc3a:	4905      	ldr	r1, [pc, #20]	; (800cc50 <CDC_Init_FS+0x24>)
 800cc3c:	4803      	ldr	r0, [pc, #12]	; (800cc4c <CDC_Init_FS+0x20>)
 800cc3e:	f7fe fd92 	bl	800b766 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cc42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	bd80      	pop	{r7, pc}
 800cc48:	20000f94 	.word	0x20000f94
 800cc4c:	200004c4 	.word	0x200004c4
 800cc50:	20000794 	.word	0x20000794

0800cc54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cc54:	b480      	push	{r7}
 800cc56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cc58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc62:	4770      	bx	lr

0800cc64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b083      	sub	sp, #12
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	6039      	str	r1, [r7, #0]
 800cc6e:	71fb      	strb	r3, [r7, #7]
 800cc70:	4613      	mov	r3, r2
 800cc72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cc74:	79fb      	ldrb	r3, [r7, #7]
 800cc76:	2b23      	cmp	r3, #35	; 0x23
 800cc78:	d84a      	bhi.n	800cd10 <CDC_Control_FS+0xac>
 800cc7a:	a201      	add	r2, pc, #4	; (adr r2, 800cc80 <CDC_Control_FS+0x1c>)
 800cc7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc80:	0800cd11 	.word	0x0800cd11
 800cc84:	0800cd11 	.word	0x0800cd11
 800cc88:	0800cd11 	.word	0x0800cd11
 800cc8c:	0800cd11 	.word	0x0800cd11
 800cc90:	0800cd11 	.word	0x0800cd11
 800cc94:	0800cd11 	.word	0x0800cd11
 800cc98:	0800cd11 	.word	0x0800cd11
 800cc9c:	0800cd11 	.word	0x0800cd11
 800cca0:	0800cd11 	.word	0x0800cd11
 800cca4:	0800cd11 	.word	0x0800cd11
 800cca8:	0800cd11 	.word	0x0800cd11
 800ccac:	0800cd11 	.word	0x0800cd11
 800ccb0:	0800cd11 	.word	0x0800cd11
 800ccb4:	0800cd11 	.word	0x0800cd11
 800ccb8:	0800cd11 	.word	0x0800cd11
 800ccbc:	0800cd11 	.word	0x0800cd11
 800ccc0:	0800cd11 	.word	0x0800cd11
 800ccc4:	0800cd11 	.word	0x0800cd11
 800ccc8:	0800cd11 	.word	0x0800cd11
 800cccc:	0800cd11 	.word	0x0800cd11
 800ccd0:	0800cd11 	.word	0x0800cd11
 800ccd4:	0800cd11 	.word	0x0800cd11
 800ccd8:	0800cd11 	.word	0x0800cd11
 800ccdc:	0800cd11 	.word	0x0800cd11
 800cce0:	0800cd11 	.word	0x0800cd11
 800cce4:	0800cd11 	.word	0x0800cd11
 800cce8:	0800cd11 	.word	0x0800cd11
 800ccec:	0800cd11 	.word	0x0800cd11
 800ccf0:	0800cd11 	.word	0x0800cd11
 800ccf4:	0800cd11 	.word	0x0800cd11
 800ccf8:	0800cd11 	.word	0x0800cd11
 800ccfc:	0800cd11 	.word	0x0800cd11
 800cd00:	0800cd11 	.word	0x0800cd11
 800cd04:	0800cd11 	.word	0x0800cd11
 800cd08:	0800cd11 	.word	0x0800cd11
 800cd0c:	0800cd11 	.word	0x0800cd11
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cd10:	bf00      	nop
  }

  return (USBD_OK);
 800cd12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	370c      	adds	r7, #12
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr

0800cd20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b082      	sub	sp, #8
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cd2a:	6879      	ldr	r1, [r7, #4]
 800cd2c:	4805      	ldr	r0, [pc, #20]	; (800cd44 <CDC_Receive_FS+0x24>)
 800cd2e:	f7fe fd1a 	bl	800b766 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cd32:	4804      	ldr	r0, [pc, #16]	; (800cd44 <CDC_Receive_FS+0x24>)
 800cd34:	f7fe fd30 	bl	800b798 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cd38:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3708      	adds	r7, #8
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}
 800cd42:	bf00      	nop
 800cd44:	200004c4 	.word	0x200004c4

0800cd48 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b087      	sub	sp, #28
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	60f8      	str	r0, [r7, #12]
 800cd50:	60b9      	str	r1, [r7, #8]
 800cd52:	4613      	mov	r3, r2
 800cd54:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cd56:	2300      	movs	r3, #0
 800cd58:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cd5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	371c      	adds	r7, #28
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr
	...

0800cd6c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b083      	sub	sp, #12
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	4603      	mov	r3, r0
 800cd74:	6039      	str	r1, [r7, #0]
 800cd76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	2212      	movs	r2, #18
 800cd7c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cd7e:	4b03      	ldr	r3, [pc, #12]	; (800cd8c <USBD_FS_DeviceDescriptor+0x20>)
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	370c      	adds	r7, #12
 800cd84:	46bd      	mov	sp, r7
 800cd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8a:	4770      	bx	lr
 800cd8c:	20000150 	.word	0x20000150

0800cd90 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd90:	b480      	push	{r7}
 800cd92:	b083      	sub	sp, #12
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	4603      	mov	r3, r0
 800cd98:	6039      	str	r1, [r7, #0]
 800cd9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	2204      	movs	r2, #4
 800cda0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cda2:	4b03      	ldr	r3, [pc, #12]	; (800cdb0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	370c      	adds	r7, #12
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr
 800cdb0:	20000170 	.word	0x20000170

0800cdb4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	4603      	mov	r3, r0
 800cdbc:	6039      	str	r1, [r7, #0]
 800cdbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cdc0:	79fb      	ldrb	r3, [r7, #7]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d105      	bne.n	800cdd2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cdc6:	683a      	ldr	r2, [r7, #0]
 800cdc8:	4907      	ldr	r1, [pc, #28]	; (800cde8 <USBD_FS_ProductStrDescriptor+0x34>)
 800cdca:	4808      	ldr	r0, [pc, #32]	; (800cdec <USBD_FS_ProductStrDescriptor+0x38>)
 800cdcc:	f7ff fdc1 	bl	800c952 <USBD_GetString>
 800cdd0:	e004      	b.n	800cddc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cdd2:	683a      	ldr	r2, [r7, #0]
 800cdd4:	4904      	ldr	r1, [pc, #16]	; (800cde8 <USBD_FS_ProductStrDescriptor+0x34>)
 800cdd6:	4805      	ldr	r0, [pc, #20]	; (800cdec <USBD_FS_ProductStrDescriptor+0x38>)
 800cdd8:	f7ff fdbb 	bl	800c952 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cddc:	4b02      	ldr	r3, [pc, #8]	; (800cde8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3708      	adds	r7, #8
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
 800cde6:	bf00      	nop
 800cde8:	20001794 	.word	0x20001794
 800cdec:	0800d8a0 	.word	0x0800d8a0

0800cdf0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b082      	sub	sp, #8
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	6039      	str	r1, [r7, #0]
 800cdfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cdfc:	683a      	ldr	r2, [r7, #0]
 800cdfe:	4904      	ldr	r1, [pc, #16]	; (800ce10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ce00:	4804      	ldr	r0, [pc, #16]	; (800ce14 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ce02:	f7ff fda6 	bl	800c952 <USBD_GetString>
  return USBD_StrDesc;
 800ce06:	4b02      	ldr	r3, [pc, #8]	; (800ce10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3708      	adds	r7, #8
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}
 800ce10:	20001794 	.word	0x20001794
 800ce14:	0800d8b8 	.word	0x0800d8b8

0800ce18 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	4603      	mov	r3, r0
 800ce20:	6039      	str	r1, [r7, #0]
 800ce22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	221a      	movs	r2, #26
 800ce28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ce2a:	f000 f855 	bl	800ced8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ce2e:	4b02      	ldr	r3, [pc, #8]	; (800ce38 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3708      	adds	r7, #8
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}
 800ce38:	20000174 	.word	0x20000174

0800ce3c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b082      	sub	sp, #8
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	4603      	mov	r3, r0
 800ce44:	6039      	str	r1, [r7, #0]
 800ce46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ce48:	79fb      	ldrb	r3, [r7, #7]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d105      	bne.n	800ce5a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce4e:	683a      	ldr	r2, [r7, #0]
 800ce50:	4907      	ldr	r1, [pc, #28]	; (800ce70 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce52:	4808      	ldr	r0, [pc, #32]	; (800ce74 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce54:	f7ff fd7d 	bl	800c952 <USBD_GetString>
 800ce58:	e004      	b.n	800ce64 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce5a:	683a      	ldr	r2, [r7, #0]
 800ce5c:	4904      	ldr	r1, [pc, #16]	; (800ce70 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce5e:	4805      	ldr	r0, [pc, #20]	; (800ce74 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce60:	f7ff fd77 	bl	800c952 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce64:	4b02      	ldr	r3, [pc, #8]	; (800ce70 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3708      	adds	r7, #8
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}
 800ce6e:	bf00      	nop
 800ce70:	20001794 	.word	0x20001794
 800ce74:	0800d8cc 	.word	0x0800d8cc

0800ce78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b082      	sub	sp, #8
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	4603      	mov	r3, r0
 800ce80:	6039      	str	r1, [r7, #0]
 800ce82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce84:	79fb      	ldrb	r3, [r7, #7]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d105      	bne.n	800ce96 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ce8a:	683a      	ldr	r2, [r7, #0]
 800ce8c:	4907      	ldr	r1, [pc, #28]	; (800ceac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ce8e:	4808      	ldr	r0, [pc, #32]	; (800ceb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ce90:	f7ff fd5f 	bl	800c952 <USBD_GetString>
 800ce94:	e004      	b.n	800cea0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ce96:	683a      	ldr	r2, [r7, #0]
 800ce98:	4904      	ldr	r1, [pc, #16]	; (800ceac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ce9a:	4805      	ldr	r0, [pc, #20]	; (800ceb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ce9c:	f7ff fd59 	bl	800c952 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cea0:	4b02      	ldr	r3, [pc, #8]	; (800ceac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3708      	adds	r7, #8
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	bf00      	nop
 800ceac:	20001794 	.word	0x20001794
 800ceb0:	0800d8d8 	.word	0x0800d8d8

0800ceb4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b083      	sub	sp, #12
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	4603      	mov	r3, r0
 800cebc:	6039      	str	r1, [r7, #0]
 800cebe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	220c      	movs	r2, #12
 800cec4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800cec6:	4b03      	ldr	r3, [pc, #12]	; (800ced4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	370c      	adds	r7, #12
 800cecc:	46bd      	mov	sp, r7
 800cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced2:	4770      	bx	lr
 800ced4:	20000164 	.word	0x20000164

0800ced8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b084      	sub	sp, #16
 800cedc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cede:	4b0f      	ldr	r3, [pc, #60]	; (800cf1c <Get_SerialNum+0x44>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cee4:	4b0e      	ldr	r3, [pc, #56]	; (800cf20 <Get_SerialNum+0x48>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ceea:	4b0e      	ldr	r3, [pc, #56]	; (800cf24 <Get_SerialNum+0x4c>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cef0:	68fa      	ldr	r2, [r7, #12]
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	4413      	add	r3, r2
 800cef6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d009      	beq.n	800cf12 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cefe:	2208      	movs	r2, #8
 800cf00:	4909      	ldr	r1, [pc, #36]	; (800cf28 <Get_SerialNum+0x50>)
 800cf02:	68f8      	ldr	r0, [r7, #12]
 800cf04:	f000 f814 	bl	800cf30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cf08:	2204      	movs	r2, #4
 800cf0a:	4908      	ldr	r1, [pc, #32]	; (800cf2c <Get_SerialNum+0x54>)
 800cf0c:	68b8      	ldr	r0, [r7, #8]
 800cf0e:	f000 f80f 	bl	800cf30 <IntToUnicode>
  }
}
 800cf12:	bf00      	nop
 800cf14:	3710      	adds	r7, #16
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}
 800cf1a:	bf00      	nop
 800cf1c:	1fff7590 	.word	0x1fff7590
 800cf20:	1fff7594 	.word	0x1fff7594
 800cf24:	1fff7598 	.word	0x1fff7598
 800cf28:	20000176 	.word	0x20000176
 800cf2c:	20000186 	.word	0x20000186

0800cf30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cf30:	b480      	push	{r7}
 800cf32:	b087      	sub	sp, #28
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	60f8      	str	r0, [r7, #12]
 800cf38:	60b9      	str	r1, [r7, #8]
 800cf3a:	4613      	mov	r3, r2
 800cf3c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cf42:	2300      	movs	r3, #0
 800cf44:	75fb      	strb	r3, [r7, #23]
 800cf46:	e027      	b.n	800cf98 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	0f1b      	lsrs	r3, r3, #28
 800cf4c:	2b09      	cmp	r3, #9
 800cf4e:	d80b      	bhi.n	800cf68 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	0f1b      	lsrs	r3, r3, #28
 800cf54:	b2da      	uxtb	r2, r3
 800cf56:	7dfb      	ldrb	r3, [r7, #23]
 800cf58:	005b      	lsls	r3, r3, #1
 800cf5a:	4619      	mov	r1, r3
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	440b      	add	r3, r1
 800cf60:	3230      	adds	r2, #48	; 0x30
 800cf62:	b2d2      	uxtb	r2, r2
 800cf64:	701a      	strb	r2, [r3, #0]
 800cf66:	e00a      	b.n	800cf7e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	0f1b      	lsrs	r3, r3, #28
 800cf6c:	b2da      	uxtb	r2, r3
 800cf6e:	7dfb      	ldrb	r3, [r7, #23]
 800cf70:	005b      	lsls	r3, r3, #1
 800cf72:	4619      	mov	r1, r3
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	440b      	add	r3, r1
 800cf78:	3237      	adds	r2, #55	; 0x37
 800cf7a:	b2d2      	uxtb	r2, r2
 800cf7c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	011b      	lsls	r3, r3, #4
 800cf82:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cf84:	7dfb      	ldrb	r3, [r7, #23]
 800cf86:	005b      	lsls	r3, r3, #1
 800cf88:	3301      	adds	r3, #1
 800cf8a:	68ba      	ldr	r2, [r7, #8]
 800cf8c:	4413      	add	r3, r2
 800cf8e:	2200      	movs	r2, #0
 800cf90:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cf92:	7dfb      	ldrb	r3, [r7, #23]
 800cf94:	3301      	adds	r3, #1
 800cf96:	75fb      	strb	r3, [r7, #23]
 800cf98:	7dfa      	ldrb	r2, [r7, #23]
 800cf9a:	79fb      	ldrb	r3, [r7, #7]
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d3d3      	bcc.n	800cf48 <IntToUnicode+0x18>
  }
}
 800cfa0:	bf00      	nop
 800cfa2:	bf00      	nop
 800cfa4:	371c      	adds	r7, #28
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfac:	4770      	bx	lr
	...

0800cfb0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b0b0      	sub	sp, #192	; 0xc0
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cfb8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	601a      	str	r2, [r3, #0]
 800cfc0:	605a      	str	r2, [r3, #4]
 800cfc2:	609a      	str	r2, [r3, #8]
 800cfc4:	60da      	str	r2, [r3, #12]
 800cfc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800cfc8:	f107 0318 	add.w	r3, r7, #24
 800cfcc:	2294      	movs	r2, #148	; 0x94
 800cfce:	2100      	movs	r1, #0
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f000 fc43 	bl	800d85c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cfde:	d163      	bne.n	800d0a8 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800cfe0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cfe4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800cfec:	f107 0318 	add.w	r3, r7, #24
 800cff0:	4618      	mov	r0, r3
 800cff2:	f7f6 ff13 	bl	8003e1c <HAL_RCCEx_PeriphCLKConfig>
 800cff6:	4603      	mov	r3, r0
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d001      	beq.n	800d000 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800cffc:	f7f3 fdec 	bl	8000bd8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d000:	4b2b      	ldr	r3, [pc, #172]	; (800d0b0 <HAL_PCD_MspInit+0x100>)
 800d002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d004:	4a2a      	ldr	r2, [pc, #168]	; (800d0b0 <HAL_PCD_MspInit+0x100>)
 800d006:	f043 0301 	orr.w	r3, r3, #1
 800d00a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d00c:	4b28      	ldr	r3, [pc, #160]	; (800d0b0 <HAL_PCD_MspInit+0x100>)
 800d00e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d010:	f003 0301 	and.w	r3, r3, #1
 800d014:	617b      	str	r3, [r7, #20]
 800d016:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d018:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d01c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d020:	2302      	movs	r3, #2
 800d022:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d026:	2300      	movs	r3, #0
 800d028:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d02c:	2303      	movs	r3, #3
 800d02e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d032:	230a      	movs	r3, #10
 800d034:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d038:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800d03c:	4619      	mov	r1, r3
 800d03e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d042:	f7f4 fa51 	bl	80014e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d046:	4b1a      	ldr	r3, [pc, #104]	; (800d0b0 <HAL_PCD_MspInit+0x100>)
 800d048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d04a:	4a19      	ldr	r2, [pc, #100]	; (800d0b0 <HAL_PCD_MspInit+0x100>)
 800d04c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d050:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d052:	4b17      	ldr	r3, [pc, #92]	; (800d0b0 <HAL_PCD_MspInit+0x100>)
 800d054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d056:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d05a:	613b      	str	r3, [r7, #16]
 800d05c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d05e:	4b14      	ldr	r3, [pc, #80]	; (800d0b0 <HAL_PCD_MspInit+0x100>)
 800d060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d066:	2b00      	cmp	r3, #0
 800d068:	d114      	bne.n	800d094 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d06a:	4b11      	ldr	r3, [pc, #68]	; (800d0b0 <HAL_PCD_MspInit+0x100>)
 800d06c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d06e:	4a10      	ldr	r2, [pc, #64]	; (800d0b0 <HAL_PCD_MspInit+0x100>)
 800d070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d074:	6593      	str	r3, [r2, #88]	; 0x58
 800d076:	4b0e      	ldr	r3, [pc, #56]	; (800d0b0 <HAL_PCD_MspInit+0x100>)
 800d078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d07a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d07e:	60fb      	str	r3, [r7, #12]
 800d080:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800d082:	f7f5 ffb7 	bl	8002ff4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d086:	4b0a      	ldr	r3, [pc, #40]	; (800d0b0 <HAL_PCD_MspInit+0x100>)
 800d088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d08a:	4a09      	ldr	r2, [pc, #36]	; (800d0b0 <HAL_PCD_MspInit+0x100>)
 800d08c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d090:	6593      	str	r3, [r2, #88]	; 0x58
 800d092:	e001      	b.n	800d098 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800d094:	f7f5 ffae 	bl	8002ff4 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d098:	2200      	movs	r2, #0
 800d09a:	2100      	movs	r1, #0
 800d09c:	2043      	movs	r0, #67	; 0x43
 800d09e:	f7f4 f9ec 	bl	800147a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d0a2:	2043      	movs	r0, #67	; 0x43
 800d0a4:	f7f4 fa05 	bl	80014b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d0a8:	bf00      	nop
 800d0aa:	37c0      	adds	r7, #192	; 0xc0
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}
 800d0b0:	40021000 	.word	0x40021000

0800d0b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b082      	sub	sp, #8
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	4610      	mov	r0, r2
 800d0cc:	f7fe fc30 	bl	800b930 <USBD_LL_SetupStage>
}
 800d0d0:	bf00      	nop
 800d0d2:	3708      	adds	r7, #8
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}

0800d0d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b082      	sub	sp, #8
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	460b      	mov	r3, r1
 800d0e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d0ea:	78fa      	ldrb	r2, [r7, #3]
 800d0ec:	6879      	ldr	r1, [r7, #4]
 800d0ee:	4613      	mov	r3, r2
 800d0f0:	00db      	lsls	r3, r3, #3
 800d0f2:	4413      	add	r3, r2
 800d0f4:	009b      	lsls	r3, r3, #2
 800d0f6:	440b      	add	r3, r1
 800d0f8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d0fc:	681a      	ldr	r2, [r3, #0]
 800d0fe:	78fb      	ldrb	r3, [r7, #3]
 800d100:	4619      	mov	r1, r3
 800d102:	f7fe fc6a 	bl	800b9da <USBD_LL_DataOutStage>
}
 800d106:	bf00      	nop
 800d108:	3708      	adds	r7, #8
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}

0800d10e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d10e:	b580      	push	{r7, lr}
 800d110:	b082      	sub	sp, #8
 800d112:	af00      	add	r7, sp, #0
 800d114:	6078      	str	r0, [r7, #4]
 800d116:	460b      	mov	r3, r1
 800d118:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d120:	78fa      	ldrb	r2, [r7, #3]
 800d122:	6879      	ldr	r1, [r7, #4]
 800d124:	4613      	mov	r3, r2
 800d126:	00db      	lsls	r3, r3, #3
 800d128:	4413      	add	r3, r2
 800d12a:	009b      	lsls	r3, r3, #2
 800d12c:	440b      	add	r3, r1
 800d12e:	334c      	adds	r3, #76	; 0x4c
 800d130:	681a      	ldr	r2, [r3, #0]
 800d132:	78fb      	ldrb	r3, [r7, #3]
 800d134:	4619      	mov	r1, r3
 800d136:	f7fe fcb3 	bl	800baa0 <USBD_LL_DataInStage>
}
 800d13a:	bf00      	nop
 800d13c:	3708      	adds	r7, #8
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}

0800d142 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d142:	b580      	push	{r7, lr}
 800d144:	b082      	sub	sp, #8
 800d146:	af00      	add	r7, sp, #0
 800d148:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d150:	4618      	mov	r0, r3
 800d152:	f7fe fdc7 	bl	800bce4 <USBD_LL_SOF>
}
 800d156:	bf00      	nop
 800d158:	3708      	adds	r7, #8
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}

0800d15e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d15e:	b580      	push	{r7, lr}
 800d160:	b084      	sub	sp, #16
 800d162:	af00      	add	r7, sp, #0
 800d164:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d166:	2301      	movs	r3, #1
 800d168:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	68db      	ldr	r3, [r3, #12]
 800d16e:	2b02      	cmp	r3, #2
 800d170:	d001      	beq.n	800d176 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d172:	f7f3 fd31 	bl	8000bd8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d17c:	7bfa      	ldrb	r2, [r7, #15]
 800d17e:	4611      	mov	r1, r2
 800d180:	4618      	mov	r0, r3
 800d182:	f7fe fd71 	bl	800bc68 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d18c:	4618      	mov	r0, r3
 800d18e:	f7fe fd1d 	bl	800bbcc <USBD_LL_Reset>
}
 800d192:	bf00      	nop
 800d194:	3710      	adds	r7, #16
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}
	...

0800d19c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b082      	sub	sp, #8
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	687a      	ldr	r2, [r7, #4]
 800d1b0:	6812      	ldr	r2, [r2, #0]
 800d1b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d1b6:	f043 0301 	orr.w	r3, r3, #1
 800d1ba:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7fe fd60 	bl	800bc88 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6a1b      	ldr	r3, [r3, #32]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d005      	beq.n	800d1dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d1d0:	4b04      	ldr	r3, [pc, #16]	; (800d1e4 <HAL_PCD_SuspendCallback+0x48>)
 800d1d2:	691b      	ldr	r3, [r3, #16]
 800d1d4:	4a03      	ldr	r2, [pc, #12]	; (800d1e4 <HAL_PCD_SuspendCallback+0x48>)
 800d1d6:	f043 0306 	orr.w	r3, r3, #6
 800d1da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d1dc:	bf00      	nop
 800d1de:	3708      	adds	r7, #8
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}
 800d1e4:	e000ed00 	.word	0xe000ed00

0800d1e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b082      	sub	sp, #8
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	687a      	ldr	r2, [r7, #4]
 800d1fc:	6812      	ldr	r2, [r2, #0]
 800d1fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d202:	f023 0301 	bic.w	r3, r3, #1
 800d206:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6a1b      	ldr	r3, [r3, #32]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d007      	beq.n	800d220 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d210:	4b08      	ldr	r3, [pc, #32]	; (800d234 <HAL_PCD_ResumeCallback+0x4c>)
 800d212:	691b      	ldr	r3, [r3, #16]
 800d214:	4a07      	ldr	r2, [pc, #28]	; (800d234 <HAL_PCD_ResumeCallback+0x4c>)
 800d216:	f023 0306 	bic.w	r3, r3, #6
 800d21a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d21c:	f000 faf4 	bl	800d808 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d226:	4618      	mov	r0, r3
 800d228:	f7fe fd44 	bl	800bcb4 <USBD_LL_Resume>
}
 800d22c:	bf00      	nop
 800d22e:	3708      	adds	r7, #8
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}
 800d234:	e000ed00 	.word	0xe000ed00

0800d238 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b082      	sub	sp, #8
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	460b      	mov	r3, r1
 800d242:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d24a:	78fa      	ldrb	r2, [r7, #3]
 800d24c:	4611      	mov	r1, r2
 800d24e:	4618      	mov	r0, r3
 800d250:	f7fe fd90 	bl	800bd74 <USBD_LL_IsoOUTIncomplete>
}
 800d254:	bf00      	nop
 800d256:	3708      	adds	r7, #8
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	460b      	mov	r3, r1
 800d266:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d26e:	78fa      	ldrb	r2, [r7, #3]
 800d270:	4611      	mov	r1, r2
 800d272:	4618      	mov	r0, r3
 800d274:	f7fe fd58 	bl	800bd28 <USBD_LL_IsoINIncomplete>
}
 800d278:	bf00      	nop
 800d27a:	3708      	adds	r7, #8
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d28e:	4618      	mov	r0, r3
 800d290:	f7fe fd96 	bl	800bdc0 <USBD_LL_DevConnected>
}
 800d294:	bf00      	nop
 800d296:	3708      	adds	r7, #8
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}

0800d29c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b082      	sub	sp, #8
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f7fe fd93 	bl	800bdd6 <USBD_LL_DevDisconnected>
}
 800d2b0:	bf00      	nop
 800d2b2:	3708      	adds	r7, #8
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}

0800d2b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b082      	sub	sp, #8
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d139      	bne.n	800d33c <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d2c8:	4a1f      	ldr	r2, [pc, #124]	; (800d348 <USBD_LL_Init+0x90>)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	4a1d      	ldr	r2, [pc, #116]	; (800d348 <USBD_LL_Init+0x90>)
 800d2d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d2d8:	4b1b      	ldr	r3, [pc, #108]	; (800d348 <USBD_LL_Init+0x90>)
 800d2da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d2de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d2e0:	4b19      	ldr	r3, [pc, #100]	; (800d348 <USBD_LL_Init+0x90>)
 800d2e2:	2206      	movs	r2, #6
 800d2e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d2e6:	4b18      	ldr	r3, [pc, #96]	; (800d348 <USBD_LL_Init+0x90>)
 800d2e8:	2202      	movs	r2, #2
 800d2ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d2ec:	4b16      	ldr	r3, [pc, #88]	; (800d348 <USBD_LL_Init+0x90>)
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d2f2:	4b15      	ldr	r3, [pc, #84]	; (800d348 <USBD_LL_Init+0x90>)
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d2f8:	4b13      	ldr	r3, [pc, #76]	; (800d348 <USBD_LL_Init+0x90>)
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d2fe:	4b12      	ldr	r3, [pc, #72]	; (800d348 <USBD_LL_Init+0x90>)
 800d300:	2200      	movs	r2, #0
 800d302:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d304:	4b10      	ldr	r3, [pc, #64]	; (800d348 <USBD_LL_Init+0x90>)
 800d306:	2200      	movs	r2, #0
 800d308:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d30a:	4b0f      	ldr	r3, [pc, #60]	; (800d348 <USBD_LL_Init+0x90>)
 800d30c:	2200      	movs	r2, #0
 800d30e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d310:	480d      	ldr	r0, [pc, #52]	; (800d348 <USBD_LL_Init+0x90>)
 800d312:	f7f4 fbeb 	bl	8001aec <HAL_PCD_Init>
 800d316:	4603      	mov	r3, r0
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d001      	beq.n	800d320 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800d31c:	f7f3 fc5c 	bl	8000bd8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d320:	2180      	movs	r1, #128	; 0x80
 800d322:	4809      	ldr	r0, [pc, #36]	; (800d348 <USBD_LL_Init+0x90>)
 800d324:	f7f5 fd6d 	bl	8002e02 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d328:	2240      	movs	r2, #64	; 0x40
 800d32a:	2100      	movs	r1, #0
 800d32c:	4806      	ldr	r0, [pc, #24]	; (800d348 <USBD_LL_Init+0x90>)
 800d32e:	f7f5 fd21 	bl	8002d74 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d332:	2280      	movs	r2, #128	; 0x80
 800d334:	2101      	movs	r1, #1
 800d336:	4804      	ldr	r0, [pc, #16]	; (800d348 <USBD_LL_Init+0x90>)
 800d338:	f7f5 fd1c 	bl	8002d74 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d33c:	2300      	movs	r3, #0
}
 800d33e:	4618      	mov	r0, r3
 800d340:	3708      	adds	r7, #8
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}
 800d346:	bf00      	nop
 800d348:	20001994 	.word	0x20001994

0800d34c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b084      	sub	sp, #16
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d354:	2300      	movs	r3, #0
 800d356:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d358:	2300      	movs	r3, #0
 800d35a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d362:	4618      	mov	r0, r3
 800d364:	f7f4 fce6 	bl	8001d34 <HAL_PCD_Start>
 800d368:	4603      	mov	r3, r0
 800d36a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d36c:	7bbb      	ldrb	r3, [r7, #14]
 800d36e:	2b03      	cmp	r3, #3
 800d370:	d816      	bhi.n	800d3a0 <USBD_LL_Start+0x54>
 800d372:	a201      	add	r2, pc, #4	; (adr r2, 800d378 <USBD_LL_Start+0x2c>)
 800d374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d378:	0800d389 	.word	0x0800d389
 800d37c:	0800d38f 	.word	0x0800d38f
 800d380:	0800d395 	.word	0x0800d395
 800d384:	0800d39b 	.word	0x0800d39b
    case HAL_OK :
      usb_status = USBD_OK;
 800d388:	2300      	movs	r3, #0
 800d38a:	73fb      	strb	r3, [r7, #15]
    break;
 800d38c:	e00b      	b.n	800d3a6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d38e:	2303      	movs	r3, #3
 800d390:	73fb      	strb	r3, [r7, #15]
    break;
 800d392:	e008      	b.n	800d3a6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d394:	2301      	movs	r3, #1
 800d396:	73fb      	strb	r3, [r7, #15]
    break;
 800d398:	e005      	b.n	800d3a6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d39a:	2303      	movs	r3, #3
 800d39c:	73fb      	strb	r3, [r7, #15]
    break;
 800d39e:	e002      	b.n	800d3a6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d3a0:	2303      	movs	r3, #3
 800d3a2:	73fb      	strb	r3, [r7, #15]
    break;
 800d3a4:	bf00      	nop
  }
  return usb_status;
 800d3a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3710      	adds	r7, #16
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}

0800d3b0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b084      	sub	sp, #16
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
 800d3b8:	4608      	mov	r0, r1
 800d3ba:	4611      	mov	r1, r2
 800d3bc:	461a      	mov	r2, r3
 800d3be:	4603      	mov	r3, r0
 800d3c0:	70fb      	strb	r3, [r7, #3]
 800d3c2:	460b      	mov	r3, r1
 800d3c4:	70bb      	strb	r3, [r7, #2]
 800d3c6:	4613      	mov	r3, r2
 800d3c8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d3d8:	78bb      	ldrb	r3, [r7, #2]
 800d3da:	883a      	ldrh	r2, [r7, #0]
 800d3dc:	78f9      	ldrb	r1, [r7, #3]
 800d3de:	f7f5 f990 	bl	8002702 <HAL_PCD_EP_Open>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d3e6:	7bbb      	ldrb	r3, [r7, #14]
 800d3e8:	2b03      	cmp	r3, #3
 800d3ea:	d817      	bhi.n	800d41c <USBD_LL_OpenEP+0x6c>
 800d3ec:	a201      	add	r2, pc, #4	; (adr r2, 800d3f4 <USBD_LL_OpenEP+0x44>)
 800d3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3f2:	bf00      	nop
 800d3f4:	0800d405 	.word	0x0800d405
 800d3f8:	0800d40b 	.word	0x0800d40b
 800d3fc:	0800d411 	.word	0x0800d411
 800d400:	0800d417 	.word	0x0800d417
    case HAL_OK :
      usb_status = USBD_OK;
 800d404:	2300      	movs	r3, #0
 800d406:	73fb      	strb	r3, [r7, #15]
    break;
 800d408:	e00b      	b.n	800d422 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d40a:	2303      	movs	r3, #3
 800d40c:	73fb      	strb	r3, [r7, #15]
    break;
 800d40e:	e008      	b.n	800d422 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d410:	2301      	movs	r3, #1
 800d412:	73fb      	strb	r3, [r7, #15]
    break;
 800d414:	e005      	b.n	800d422 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d416:	2303      	movs	r3, #3
 800d418:	73fb      	strb	r3, [r7, #15]
    break;
 800d41a:	e002      	b.n	800d422 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800d41c:	2303      	movs	r3, #3
 800d41e:	73fb      	strb	r3, [r7, #15]
    break;
 800d420:	bf00      	nop
  }
  return usb_status;
 800d422:	7bfb      	ldrb	r3, [r7, #15]
}
 800d424:	4618      	mov	r0, r3
 800d426:	3710      	adds	r7, #16
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b084      	sub	sp, #16
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	460b      	mov	r3, r1
 800d436:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d438:	2300      	movs	r3, #0
 800d43a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d43c:	2300      	movs	r3, #0
 800d43e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d446:	78fa      	ldrb	r2, [r7, #3]
 800d448:	4611      	mov	r1, r2
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7f5 f9c1 	bl	80027d2 <HAL_PCD_EP_Close>
 800d450:	4603      	mov	r3, r0
 800d452:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d454:	7bbb      	ldrb	r3, [r7, #14]
 800d456:	2b03      	cmp	r3, #3
 800d458:	d816      	bhi.n	800d488 <USBD_LL_CloseEP+0x5c>
 800d45a:	a201      	add	r2, pc, #4	; (adr r2, 800d460 <USBD_LL_CloseEP+0x34>)
 800d45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d460:	0800d471 	.word	0x0800d471
 800d464:	0800d477 	.word	0x0800d477
 800d468:	0800d47d 	.word	0x0800d47d
 800d46c:	0800d483 	.word	0x0800d483
    case HAL_OK :
      usb_status = USBD_OK;
 800d470:	2300      	movs	r3, #0
 800d472:	73fb      	strb	r3, [r7, #15]
    break;
 800d474:	e00b      	b.n	800d48e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d476:	2303      	movs	r3, #3
 800d478:	73fb      	strb	r3, [r7, #15]
    break;
 800d47a:	e008      	b.n	800d48e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d47c:	2301      	movs	r3, #1
 800d47e:	73fb      	strb	r3, [r7, #15]
    break;
 800d480:	e005      	b.n	800d48e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d482:	2303      	movs	r3, #3
 800d484:	73fb      	strb	r3, [r7, #15]
    break;
 800d486:	e002      	b.n	800d48e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d488:	2303      	movs	r3, #3
 800d48a:	73fb      	strb	r3, [r7, #15]
    break;
 800d48c:	bf00      	nop
  }
  return usb_status;
 800d48e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d490:	4618      	mov	r0, r3
 800d492:	3710      	adds	r7, #16
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}

0800d498 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b084      	sub	sp, #16
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d4b2:	78fa      	ldrb	r2, [r7, #3]
 800d4b4:	4611      	mov	r1, r2
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f7f5 fa68 	bl	800298c <HAL_PCD_EP_SetStall>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d4c0:	7bbb      	ldrb	r3, [r7, #14]
 800d4c2:	2b03      	cmp	r3, #3
 800d4c4:	d816      	bhi.n	800d4f4 <USBD_LL_StallEP+0x5c>
 800d4c6:	a201      	add	r2, pc, #4	; (adr r2, 800d4cc <USBD_LL_StallEP+0x34>)
 800d4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4cc:	0800d4dd 	.word	0x0800d4dd
 800d4d0:	0800d4e3 	.word	0x0800d4e3
 800d4d4:	0800d4e9 	.word	0x0800d4e9
 800d4d8:	0800d4ef 	.word	0x0800d4ef
    case HAL_OK :
      usb_status = USBD_OK;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	73fb      	strb	r3, [r7, #15]
    break;
 800d4e0:	e00b      	b.n	800d4fa <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d4e2:	2303      	movs	r3, #3
 800d4e4:	73fb      	strb	r3, [r7, #15]
    break;
 800d4e6:	e008      	b.n	800d4fa <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	73fb      	strb	r3, [r7, #15]
    break;
 800d4ec:	e005      	b.n	800d4fa <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d4ee:	2303      	movs	r3, #3
 800d4f0:	73fb      	strb	r3, [r7, #15]
    break;
 800d4f2:	e002      	b.n	800d4fa <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d4f4:	2303      	movs	r3, #3
 800d4f6:	73fb      	strb	r3, [r7, #15]
    break;
 800d4f8:	bf00      	nop
  }
  return usb_status;
 800d4fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	3710      	adds	r7, #16
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}

0800d504 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b084      	sub	sp, #16
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	460b      	mov	r3, r1
 800d50e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d510:	2300      	movs	r3, #0
 800d512:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d514:	2300      	movs	r3, #0
 800d516:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d51e:	78fa      	ldrb	r2, [r7, #3]
 800d520:	4611      	mov	r1, r2
 800d522:	4618      	mov	r0, r3
 800d524:	f7f5 fa94 	bl	8002a50 <HAL_PCD_EP_ClrStall>
 800d528:	4603      	mov	r3, r0
 800d52a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d52c:	7bbb      	ldrb	r3, [r7, #14]
 800d52e:	2b03      	cmp	r3, #3
 800d530:	d816      	bhi.n	800d560 <USBD_LL_ClearStallEP+0x5c>
 800d532:	a201      	add	r2, pc, #4	; (adr r2, 800d538 <USBD_LL_ClearStallEP+0x34>)
 800d534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d538:	0800d549 	.word	0x0800d549
 800d53c:	0800d54f 	.word	0x0800d54f
 800d540:	0800d555 	.word	0x0800d555
 800d544:	0800d55b 	.word	0x0800d55b
    case HAL_OK :
      usb_status = USBD_OK;
 800d548:	2300      	movs	r3, #0
 800d54a:	73fb      	strb	r3, [r7, #15]
    break;
 800d54c:	e00b      	b.n	800d566 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d54e:	2303      	movs	r3, #3
 800d550:	73fb      	strb	r3, [r7, #15]
    break;
 800d552:	e008      	b.n	800d566 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d554:	2301      	movs	r3, #1
 800d556:	73fb      	strb	r3, [r7, #15]
    break;
 800d558:	e005      	b.n	800d566 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d55a:	2303      	movs	r3, #3
 800d55c:	73fb      	strb	r3, [r7, #15]
    break;
 800d55e:	e002      	b.n	800d566 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d560:	2303      	movs	r3, #3
 800d562:	73fb      	strb	r3, [r7, #15]
    break;
 800d564:	bf00      	nop
  }
  return usb_status;
 800d566:	7bfb      	ldrb	r3, [r7, #15]
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3710      	adds	r7, #16
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d570:	b480      	push	{r7}
 800d572:	b085      	sub	sp, #20
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	460b      	mov	r3, r1
 800d57a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d582:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d584:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	da0b      	bge.n	800d5a4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d58c:	78fb      	ldrb	r3, [r7, #3]
 800d58e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d592:	68f9      	ldr	r1, [r7, #12]
 800d594:	4613      	mov	r3, r2
 800d596:	00db      	lsls	r3, r3, #3
 800d598:	4413      	add	r3, r2
 800d59a:	009b      	lsls	r3, r3, #2
 800d59c:	440b      	add	r3, r1
 800d59e:	333e      	adds	r3, #62	; 0x3e
 800d5a0:	781b      	ldrb	r3, [r3, #0]
 800d5a2:	e00b      	b.n	800d5bc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d5a4:	78fb      	ldrb	r3, [r7, #3]
 800d5a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d5aa:	68f9      	ldr	r1, [r7, #12]
 800d5ac:	4613      	mov	r3, r2
 800d5ae:	00db      	lsls	r3, r3, #3
 800d5b0:	4413      	add	r3, r2
 800d5b2:	009b      	lsls	r3, r3, #2
 800d5b4:	440b      	add	r3, r1
 800d5b6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d5ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3714      	adds	r7, #20
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c6:	4770      	bx	lr

0800d5c8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b084      	sub	sp, #16
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	460b      	mov	r3, r1
 800d5d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d5e2:	78fa      	ldrb	r2, [r7, #3]
 800d5e4:	4611      	mov	r1, r2
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f7f5 f866 	bl	80026b8 <HAL_PCD_SetAddress>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d5f0:	7bbb      	ldrb	r3, [r7, #14]
 800d5f2:	2b03      	cmp	r3, #3
 800d5f4:	d816      	bhi.n	800d624 <USBD_LL_SetUSBAddress+0x5c>
 800d5f6:	a201      	add	r2, pc, #4	; (adr r2, 800d5fc <USBD_LL_SetUSBAddress+0x34>)
 800d5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5fc:	0800d60d 	.word	0x0800d60d
 800d600:	0800d613 	.word	0x0800d613
 800d604:	0800d619 	.word	0x0800d619
 800d608:	0800d61f 	.word	0x0800d61f
    case HAL_OK :
      usb_status = USBD_OK;
 800d60c:	2300      	movs	r3, #0
 800d60e:	73fb      	strb	r3, [r7, #15]
    break;
 800d610:	e00b      	b.n	800d62a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d612:	2303      	movs	r3, #3
 800d614:	73fb      	strb	r3, [r7, #15]
    break;
 800d616:	e008      	b.n	800d62a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d618:	2301      	movs	r3, #1
 800d61a:	73fb      	strb	r3, [r7, #15]
    break;
 800d61c:	e005      	b.n	800d62a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d61e:	2303      	movs	r3, #3
 800d620:	73fb      	strb	r3, [r7, #15]
    break;
 800d622:	e002      	b.n	800d62a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800d624:	2303      	movs	r3, #3
 800d626:	73fb      	strb	r3, [r7, #15]
    break;
 800d628:	bf00      	nop
  }
  return usb_status;
 800d62a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	3710      	adds	r7, #16
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}

0800d634 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b086      	sub	sp, #24
 800d638:	af00      	add	r7, sp, #0
 800d63a:	60f8      	str	r0, [r7, #12]
 800d63c:	607a      	str	r2, [r7, #4]
 800d63e:	603b      	str	r3, [r7, #0]
 800d640:	460b      	mov	r3, r1
 800d642:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d644:	2300      	movs	r3, #0
 800d646:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d648:	2300      	movs	r3, #0
 800d64a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d652:	7af9      	ldrb	r1, [r7, #11]
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	687a      	ldr	r2, [r7, #4]
 800d658:	f7f5 f95b 	bl	8002912 <HAL_PCD_EP_Transmit>
 800d65c:	4603      	mov	r3, r0
 800d65e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d660:	7dbb      	ldrb	r3, [r7, #22]
 800d662:	2b03      	cmp	r3, #3
 800d664:	d816      	bhi.n	800d694 <USBD_LL_Transmit+0x60>
 800d666:	a201      	add	r2, pc, #4	; (adr r2, 800d66c <USBD_LL_Transmit+0x38>)
 800d668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d66c:	0800d67d 	.word	0x0800d67d
 800d670:	0800d683 	.word	0x0800d683
 800d674:	0800d689 	.word	0x0800d689
 800d678:	0800d68f 	.word	0x0800d68f
    case HAL_OK :
      usb_status = USBD_OK;
 800d67c:	2300      	movs	r3, #0
 800d67e:	75fb      	strb	r3, [r7, #23]
    break;
 800d680:	e00b      	b.n	800d69a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d682:	2303      	movs	r3, #3
 800d684:	75fb      	strb	r3, [r7, #23]
    break;
 800d686:	e008      	b.n	800d69a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d688:	2301      	movs	r3, #1
 800d68a:	75fb      	strb	r3, [r7, #23]
    break;
 800d68c:	e005      	b.n	800d69a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d68e:	2303      	movs	r3, #3
 800d690:	75fb      	strb	r3, [r7, #23]
    break;
 800d692:	e002      	b.n	800d69a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800d694:	2303      	movs	r3, #3
 800d696:	75fb      	strb	r3, [r7, #23]
    break;
 800d698:	bf00      	nop
  }
  return usb_status;
 800d69a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3718      	adds	r7, #24
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}

0800d6a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b086      	sub	sp, #24
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	60f8      	str	r0, [r7, #12]
 800d6ac:	607a      	str	r2, [r7, #4]
 800d6ae:	603b      	str	r3, [r7, #0]
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d6c2:	7af9      	ldrb	r1, [r7, #11]
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	687a      	ldr	r2, [r7, #4]
 800d6c8:	f7f5 f8cd 	bl	8002866 <HAL_PCD_EP_Receive>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d6d0:	7dbb      	ldrb	r3, [r7, #22]
 800d6d2:	2b03      	cmp	r3, #3
 800d6d4:	d816      	bhi.n	800d704 <USBD_LL_PrepareReceive+0x60>
 800d6d6:	a201      	add	r2, pc, #4	; (adr r2, 800d6dc <USBD_LL_PrepareReceive+0x38>)
 800d6d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6dc:	0800d6ed 	.word	0x0800d6ed
 800d6e0:	0800d6f3 	.word	0x0800d6f3
 800d6e4:	0800d6f9 	.word	0x0800d6f9
 800d6e8:	0800d6ff 	.word	0x0800d6ff
    case HAL_OK :
      usb_status = USBD_OK;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	75fb      	strb	r3, [r7, #23]
    break;
 800d6f0:	e00b      	b.n	800d70a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d6f2:	2303      	movs	r3, #3
 800d6f4:	75fb      	strb	r3, [r7, #23]
    break;
 800d6f6:	e008      	b.n	800d70a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	75fb      	strb	r3, [r7, #23]
    break;
 800d6fc:	e005      	b.n	800d70a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d6fe:	2303      	movs	r3, #3
 800d700:	75fb      	strb	r3, [r7, #23]
    break;
 800d702:	e002      	b.n	800d70a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800d704:	2303      	movs	r3, #3
 800d706:	75fb      	strb	r3, [r7, #23]
    break;
 800d708:	bf00      	nop
  }
  return usb_status;
 800d70a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3718      	adds	r7, #24
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}

0800d714 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b082      	sub	sp, #8
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	460b      	mov	r3, r1
 800d71e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d726:	78fa      	ldrb	r2, [r7, #3]
 800d728:	4611      	mov	r1, r2
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7f5 f8d9 	bl	80028e2 <HAL_PCD_EP_GetRxCount>
 800d730:	4603      	mov	r3, r0
}
 800d732:	4618      	mov	r0, r3
 800d734:	3708      	adds	r7, #8
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}
	...

0800d73c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b082      	sub	sp, #8
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
 800d744:	460b      	mov	r3, r1
 800d746:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d748:	78fb      	ldrb	r3, [r7, #3]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d002      	beq.n	800d754 <HAL_PCDEx_LPM_Callback+0x18>
 800d74e:	2b01      	cmp	r3, #1
 800d750:	d01f      	beq.n	800d792 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d752:	e03b      	b.n	800d7cc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6a1b      	ldr	r3, [r3, #32]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d007      	beq.n	800d76c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d75c:	f000 f854 	bl	800d808 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d760:	4b1c      	ldr	r3, [pc, #112]	; (800d7d4 <HAL_PCDEx_LPM_Callback+0x98>)
 800d762:	691b      	ldr	r3, [r3, #16]
 800d764:	4a1b      	ldr	r2, [pc, #108]	; (800d7d4 <HAL_PCDEx_LPM_Callback+0x98>)
 800d766:	f023 0306 	bic.w	r3, r3, #6
 800d76a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	687a      	ldr	r2, [r7, #4]
 800d778:	6812      	ldr	r2, [r2, #0]
 800d77a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d77e:	f023 0301 	bic.w	r3, r3, #1
 800d782:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d78a:	4618      	mov	r0, r3
 800d78c:	f7fe fa92 	bl	800bcb4 <USBD_LL_Resume>
    break;
 800d790:	e01c      	b.n	800d7cc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	687a      	ldr	r2, [r7, #4]
 800d79e:	6812      	ldr	r2, [r2, #0]
 800d7a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d7a4:	f043 0301 	orr.w	r3, r3, #1
 800d7a8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f7fe fa69 	bl	800bc88 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6a1b      	ldr	r3, [r3, #32]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d005      	beq.n	800d7ca <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d7be:	4b05      	ldr	r3, [pc, #20]	; (800d7d4 <HAL_PCDEx_LPM_Callback+0x98>)
 800d7c0:	691b      	ldr	r3, [r3, #16]
 800d7c2:	4a04      	ldr	r2, [pc, #16]	; (800d7d4 <HAL_PCDEx_LPM_Callback+0x98>)
 800d7c4:	f043 0306 	orr.w	r3, r3, #6
 800d7c8:	6113      	str	r3, [r2, #16]
    break;
 800d7ca:	bf00      	nop
}
 800d7cc:	bf00      	nop
 800d7ce:	3708      	adds	r7, #8
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}
 800d7d4:	e000ed00 	.word	0xe000ed00

0800d7d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d7d8:	b480      	push	{r7}
 800d7da:	b083      	sub	sp, #12
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d7e0:	4b03      	ldr	r3, [pc, #12]	; (800d7f0 <USBD_static_malloc+0x18>)
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	370c      	adds	r7, #12
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ec:	4770      	bx	lr
 800d7ee:	bf00      	nop
 800d7f0:	20001ea0 	.word	0x20001ea0

0800d7f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b083      	sub	sp, #12
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]

}
 800d7fc:	bf00      	nop
 800d7fe:	370c      	adds	r7, #12
 800d800:	46bd      	mov	sp, r7
 800d802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d806:	4770      	bx	lr

0800d808 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d80c:	f7f2 feba 	bl	8000584 <SystemClock_Config>
}
 800d810:	bf00      	nop
 800d812:	bd80      	pop	{r7, pc}

0800d814 <__libc_init_array>:
 800d814:	b570      	push	{r4, r5, r6, lr}
 800d816:	4d0d      	ldr	r5, [pc, #52]	; (800d84c <__libc_init_array+0x38>)
 800d818:	4c0d      	ldr	r4, [pc, #52]	; (800d850 <__libc_init_array+0x3c>)
 800d81a:	1b64      	subs	r4, r4, r5
 800d81c:	10a4      	asrs	r4, r4, #2
 800d81e:	2600      	movs	r6, #0
 800d820:	42a6      	cmp	r6, r4
 800d822:	d109      	bne.n	800d838 <__libc_init_array+0x24>
 800d824:	4d0b      	ldr	r5, [pc, #44]	; (800d854 <__libc_init_array+0x40>)
 800d826:	4c0c      	ldr	r4, [pc, #48]	; (800d858 <__libc_init_array+0x44>)
 800d828:	f000 f820 	bl	800d86c <_init>
 800d82c:	1b64      	subs	r4, r4, r5
 800d82e:	10a4      	asrs	r4, r4, #2
 800d830:	2600      	movs	r6, #0
 800d832:	42a6      	cmp	r6, r4
 800d834:	d105      	bne.n	800d842 <__libc_init_array+0x2e>
 800d836:	bd70      	pop	{r4, r5, r6, pc}
 800d838:	f855 3b04 	ldr.w	r3, [r5], #4
 800d83c:	4798      	blx	r3
 800d83e:	3601      	adds	r6, #1
 800d840:	e7ee      	b.n	800d820 <__libc_init_array+0xc>
 800d842:	f855 3b04 	ldr.w	r3, [r5], #4
 800d846:	4798      	blx	r3
 800d848:	3601      	adds	r6, #1
 800d84a:	e7f2      	b.n	800d832 <__libc_init_array+0x1e>
 800d84c:	0800d974 	.word	0x0800d974
 800d850:	0800d974 	.word	0x0800d974
 800d854:	0800d974 	.word	0x0800d974
 800d858:	0800d978 	.word	0x0800d978

0800d85c <memset>:
 800d85c:	4402      	add	r2, r0
 800d85e:	4603      	mov	r3, r0
 800d860:	4293      	cmp	r3, r2
 800d862:	d100      	bne.n	800d866 <memset+0xa>
 800d864:	4770      	bx	lr
 800d866:	f803 1b01 	strb.w	r1, [r3], #1
 800d86a:	e7f9      	b.n	800d860 <memset+0x4>

0800d86c <_init>:
 800d86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d86e:	bf00      	nop
 800d870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d872:	bc08      	pop	{r3}
 800d874:	469e      	mov	lr, r3
 800d876:	4770      	bx	lr

0800d878 <_fini>:
 800d878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d87a:	bf00      	nop
 800d87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d87e:	bc08      	pop	{r3}
 800d880:	469e      	mov	lr, r3
 800d882:	4770      	bx	lr
