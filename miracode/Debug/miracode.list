
miracode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ca00  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab0  0801cbc0  0801cbc0  0002cbc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d670  0801d670  000302d0  2**0
                  CONTENTS
  4 .ARM          00000008  0801d670  0801d670  0002d670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d678  0801d678  000302d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d678  0801d678  0002d678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d67c  0801d67c  0002d67c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  0801d680  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d00  200002d0  0801d950  000302d0  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20002fd0  0801d950  00032fd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004996f  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006b3f  00000000  00000000  00079c6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003660  00000000  00000000  000807b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000033e0  00000000  00000000  00083e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000358e2  00000000  00000000  000871f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003cd64  00000000  00000000  000bcad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012a684  00000000  00000000  000f9836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00223eba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000fe74  00000000  00000000  00223f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00233d80  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00233e4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801cba8 	.word	0x0801cba8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200002d4 	.word	0x200002d4
 80001fc:	0801cba8 	.word	0x0801cba8

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c8c:	f000 b974 	b.w	8000f78 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468e      	mov	lr, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14d      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4694      	mov	ip, r2
 8000cba:	d969      	bls.n	8000d90 <__udivmoddi4+0xe8>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b152      	cbz	r2, 8000cd8 <__udivmoddi4+0x30>
 8000cc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa20 f101 	lsr.w	r1, r0, r1
 8000cce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	0c21      	lsrs	r1, r4, #16
 8000cde:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce2:	fa1f f78c 	uxth.w	r7, ip
 8000ce6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	fb06 f107 	mul.w	r1, r6, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cfe:	f080 811f 	bcs.w	8000f40 <__udivmoddi4+0x298>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 811c 	bls.w	8000f40 <__udivmoddi4+0x298>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f707 	mul.w	r7, r0, r7
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x92>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2c:	f080 810a 	bcs.w	8000f44 <__udivmoddi4+0x29c>
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	f240 8107 	bls.w	8000f44 <__udivmoddi4+0x29c>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	1be4      	subs	r4, r4, r7
 8000d40:	2600      	movs	r6, #0
 8000d42:	b11d      	cbz	r5, 8000d4c <__udivmoddi4+0xa4>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xc2>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80ef 	beq.w	8000f3a <__udivmoddi4+0x292>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x160>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd4>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80f9 	bhi.w	8000f6e <__udivmoddi4+0x2c6>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	469e      	mov	lr, r3
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa4>
 8000d8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xec>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 8092 	bne.w	8000ec2 <__udivmoddi4+0x21a>
 8000d9e:	eba1 010c 	sub.w	r1, r1, ip
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2601      	movs	r6, #1
 8000dac:	0c20      	lsrs	r0, r4, #16
 8000dae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db2:	fb07 1113 	mls	r1, r7, r3, r1
 8000db6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dba:	fb0e f003 	mul.w	r0, lr, r3
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x12a>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2c0>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1110 	mls	r1, r7, r0, r1
 8000de0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x156>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x154>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2ca>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e06:	e79c      	b.n	8000d42 <__udivmoddi4+0x9a>
 8000e08:	f1c6 0720 	rsb	r7, r6, #32
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	40f9      	lsrs	r1, r7
 8000e22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e26:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2e:	0c20      	lsrs	r0, r4, #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fb09 1118 	mls	r1, r9, r8, r1
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e40:	4288      	cmp	r0, r1
 8000e42:	fa02 f206 	lsl.w	r2, r2, r6
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b8>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2bc>
 8000e54:	4288      	cmp	r0, r1
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2bc>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e68:	fb09 1110 	mls	r1, r9, r0, r1
 8000e6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	458e      	cmp	lr, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1e2>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2b4>
 8000e82:	458e      	cmp	lr, r1
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2b4>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e92:	eba1 010e 	sub.w	r1, r1, lr
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46a6      	mov	lr, r4
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x2a4>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x2a0>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x212>
 8000ea2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eaa:	fa01 f707 	lsl.w	r7, r1, r7
 8000eae:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb2:	40f1      	lsrs	r1, r6
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	f1c2 0320 	rsb	r3, r2, #32
 8000ec6:	40d8      	lsrs	r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee4:	0c0b      	lsrs	r3, r1, #16
 8000ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eea:	fb00 f60e 	mul.w	r6, r0, lr
 8000eee:	429e      	cmp	r6, r3
 8000ef0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x260>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b8>
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b8>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	b289      	uxth	r1, r1
 8000f0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f10:	fb07 3316 	mls	r3, r7, r6, r3
 8000f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f18:	fb06 f30e 	mul.w	r3, r6, lr
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x28a>
 8000f20:	eb1c 0101 	adds.w	r1, ip, r1
 8000f24:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0x104>
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e705      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e3      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6f8      	b.n	8000d3a <__udivmoddi4+0x92>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f58:	4646      	mov	r6, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x28a>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1e2>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b8>
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x12c>
 8000f6e:	4630      	mov	r0, r6
 8000f70:	e709      	b.n	8000d86 <__udivmoddi4+0xde>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x156>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f001 fbd6 	bl	800273a <null_ptr_check>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d131      	bne.n	8000ffe <bmp3_init+0x82>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7a1b      	ldrb	r3, [r3, #8]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d003      	beq.n	8000faa <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	729a      	strb	r2, [r3, #10]
 8000fa8:	e002      	b.n	8000fb0 <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	729a      	strb	r2, [r3, #10]

	/* Read the chip-id of bmp3 sensor */
        //rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
	
        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 8000fb0:	f107 010e 	add.w	r1, r7, #14
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f000 f826 	bl	800100a <bmp3_get_regs>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d119      	bne.n	8000ffe <bmp3_init+0x82>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 8000fca:	7bbb      	ldrb	r3, [r7, #14]
 8000fcc:	2b50      	cmp	r3, #80	; 0x50
 8000fce:	d002      	beq.n	8000fd6 <bmp3_init+0x5a>
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
 8000fd2:	2b60      	cmp	r3, #96	; 0x60
 8000fd4:	d111      	bne.n	8000ffa <bmp3_init+0x7e>
            {
                dev->chip_id = chip_id;
 8000fd6:	7bba      	ldrb	r2, [r7, #14]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 f9ae 	bl	800133e <bmp3_soft_reset>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8000fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d107      	bne.n	8000ffe <bmp3_init+0x82>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 fb4e 	bl	8001690 <get_calib_data>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8000ff8:	e001      	b.n	8000ffe <bmp3_init+0x82>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 8000ffa:	23f9      	movs	r3, #249	; 0xf9
 8000ffc:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 800100a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800100e:	b08b      	sub	sp, #44	; 0x2c
 8001010:	af00      	add	r7, sp, #0
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	4603      	mov	r3, r0
 800101a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800101c:	6838      	ldr	r0, [r7, #0]
 800101e:	f001 fb8c 	bl	800273a <null_ptr_check>
 8001022:	4603      	mov	r3, r0
 8001024:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 8001028:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800102c:	2b00      	cmp	r3, #0
 800102e:	d172      	bne.n	8001116 <bmp3_get_regs+0x10c>
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d06f      	beq.n	8001116 <bmp3_get_regs+0x10c>
    {
 8001036:	466b      	mov	r3, sp
 8001038:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	7a9b      	ldrb	r3, [r3, #10]
 800103e:	461a      	mov	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4413      	add	r3, r2
 8001044:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	7a9b      	ldrb	r3, [r3, #10]
 800104a:	461a      	mov	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	18d1      	adds	r1, r2, r3
 8001050:	460b      	mov	r3, r1
 8001052:	3b01      	subs	r3, #1
 8001054:	61bb      	str	r3, [r7, #24]
 8001056:	2300      	movs	r3, #0
 8001058:	4688      	mov	r8, r1
 800105a:	4699      	mov	r9, r3
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001068:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800106c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001070:	2300      	movs	r3, #0
 8001072:	460c      	mov	r4, r1
 8001074:	461d      	mov	r5, r3
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	00eb      	lsls	r3, r5, #3
 8001080:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001084:	00e2      	lsls	r2, r4, #3
 8001086:	1dcb      	adds	r3, r1, #7
 8001088:	08db      	lsrs	r3, r3, #3
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	ebad 0d03 	sub.w	sp, sp, r3
 8001090:	466b      	mov	r3, sp
 8001092:	3300      	adds	r3, #0
 8001094:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	7a1b      	ldrb	r3, [r3, #8]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d025      	beq.n	80010ea <bmp3_get_regs+0xe0>
        {
            reg_addr = reg_addr | 0x80;
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010a4:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	68dc      	ldr	r4, [r3, #12]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	7bf8      	ldrb	r0, [r7, #15]
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	6979      	ldr	r1, [r7, #20]
 80010b4:	47a0      	blx	r4
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
 80010c2:	e00d      	b.n	80010e0 <bmp3_get_regs+0xd6>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	7a9b      	ldrb	r3, [r3, #10]
 80010c8:	461a      	mov	r2, r3
 80010ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010cc:	441a      	add	r2, r3
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	440b      	add	r3, r1
 80010d4:	6979      	ldr	r1, [r7, #20]
 80010d6:	5c8a      	ldrb	r2, [r1, r2]
 80010d8:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	3301      	adds	r3, #1
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
 80010e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d3ed      	bcc.n	80010c4 <bmp3_get_regs+0xba>
 80010e8:	e00b      	b.n	8001102 <bmp3_get_regs+0xf8>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	68dc      	ldr	r4, [r3, #12]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	7bf8      	ldrb	r0, [r7, #15]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	68b9      	ldr	r1, [r7, #8]
 80010f8:	47a0      	blx	r4
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d002      	beq.n	8001112 <bmp3_get_regs+0x108>
        {
            rslt = BMP3_E_COMM_FAIL;
 800110c:	23fe      	movs	r3, #254	; 0xfe
 800110e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001112:	46b5      	mov	sp, r6
    {
 8001114:	e002      	b.n	800111c <bmp3_get_regs+0x112>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001116:	23ff      	movs	r3, #255	; 0xff
 8001118:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }

    return rslt;
 800111c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
}
 8001120:	4618      	mov	r0, r3
 8001122:	372c      	adds	r7, #44	; 0x2c
 8001124:	46bd      	mov	sp, r7
 8001126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800112a <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 800112a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800112e:	b089      	sub	sp, #36	; 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	466b      	mov	r3, sp
 800113c:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	0059      	lsls	r1, r3, #1
 8001142:	460b      	mov	r3, r1
 8001144:	3b01      	subs	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	2300      	movs	r3, #0
 800114a:	4688      	mov	r8, r1
 800114c:	4699      	mov	r9, r3
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800115a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800115e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001162:	2300      	movs	r3, #0
 8001164:	460c      	mov	r4, r1
 8001166:	461d      	mov	r5, r3
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	00eb      	lsls	r3, r5, #3
 8001172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001176:	00e2      	lsls	r2, r4, #3
 8001178:	1dcb      	adds	r3, r1, #7
 800117a:	08db      	lsrs	r3, r3, #3
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	ebad 0d03 	sub.w	sp, sp, r3
 8001182:	466b      	mov	r3, sp
 8001184:	3300      	adds	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001188:	6838      	ldr	r0, [r7, #0]
 800118a:	f001 fad6 	bl	800273a <null_ptr_check>
 800118e:	4603      	mov	r3, r0
 8001190:	76fb      	strb	r3, [r7, #27]

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001192:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d14c      	bne.n	8001234 <bmp3_set_regs+0x10a>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d049      	beq.n	8001234 <bmp3_set_regs+0x10a>
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d046      	beq.n	8001234 <bmp3_set_regs+0x10a>
    {
        if (len != 0)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d040      	beq.n	800122e <bmp3_set_regs+0x104>
        {
            temp_buff[0] = reg_data[0];
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	781a      	ldrb	r2, [r3, #0]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	7a1b      	ldrb	r3, [r3, #8]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d114      	bne.n	80011e6 <bmp3_set_regs+0xbc>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80011bc:	2300      	movs	r3, #0
 80011be:	76bb      	strb	r3, [r7, #26]
 80011c0:	e00d      	b.n	80011de <bmp3_set_regs+0xb4>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80011c2:	7ebb      	ldrb	r3, [r7, #26]
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	781a      	ldrb	r2, [r3, #0]
 80011ca:	7ebb      	ldrb	r3, [r7, #26]
 80011cc:	68f9      	ldr	r1, [r7, #12]
 80011ce:	440b      	add	r3, r1
 80011d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80011d8:	7ebb      	ldrb	r3, [r7, #26]
 80011da:	3301      	adds	r3, #1
 80011dc:	76bb      	strb	r3, [r7, #26]
 80011de:	7ebb      	ldrb	r3, [r7, #26]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d8ed      	bhi.n	80011c2 <bmp3_set_regs+0x98>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d909      	bls.n	8001200 <bmp3_set_regs+0xd6>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	6939      	ldr	r1, [r7, #16]
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	f000 fa71 	bl	80016da <interleave_reg_addr>
                temp_len = len * 2;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	61fb      	str	r3, [r7, #28]
 80011fe:	e001      	b.n	8001204 <bmp3_set_regs+0xda>
            }
            else
            {
                temp_len = len;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	61fb      	str	r3, [r7, #28]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	691c      	ldr	r4, [r3, #16]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	7818      	ldrb	r0, [r3, #0]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	69fa      	ldr	r2, [r7, #28]
 8001212:	6939      	ldr	r1, [r7, #16]
 8001214:	47a0      	blx	r4
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d008      	beq.n	800123a <bmp3_set_regs+0x110>
            {
                rslt = BMP3_E_COMM_FAIL;
 8001228:	23fe      	movs	r3, #254	; 0xfe
 800122a:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 800122c:	e005      	b.n	800123a <bmp3_set_regs+0x110>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 800122e:	23fa      	movs	r3, #250	; 0xfa
 8001230:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 8001232:	e002      	b.n	800123a <bmp3_set_regs+0x110>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001234:	23ff      	movs	r3, #255	; 0xff
 8001236:	76fb      	strb	r3, [r7, #27]
 8001238:	e000      	b.n	800123c <bmp3_set_regs+0x112>
        if (len != 0)
 800123a:	bf00      	nop
    }

    return rslt;
 800123c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001240:	46b5      	mov	sp, r6
}
 8001242:	4618      	mov	r0, r3
 8001244:	3724      	adds	r7, #36	; 0x24
 8001246:	46bd      	mov	sp, r7
 8001248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800124c <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	75fb      	strb	r3, [r7, #23]

    if (settings != NULL)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d03a      	beq.n	80012d8 <bmp3_set_sensor_settings+0x8c>
    {

        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 8001262:	68f9      	ldr	r1, [r7, #12]
 8001264:	2006      	movs	r0, #6
 8001266:	f001 fa50 	bl	800270a <are_settings_changed>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d006      	beq.n	800127e <bmp3_set_sensor_settings+0x32>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, settings, dev);
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	68b9      	ldr	r1, [r7, #8]
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f000 fa96 	bl	80017a6 <set_pwr_ctrl_settings>
 800127a:	4603      	mov	r3, r0
 800127c:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings))
 800127e:	68f9      	ldr	r1, [r7, #12]
 8001280:	20f0      	movs	r0, #240	; 0xf0
 8001282:	f001 fa42 	bl	800270a <are_settings_changed>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d006      	beq.n	800129a <bmp3_set_sensor_settings+0x4e>
        {
            /* Set the over sampling, ODR and filter settings */
            rslt = set_odr_filter_settings(desired_settings, settings, dev);
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	68b9      	ldr	r1, [r7, #8]
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f000 fad7 	bl	8001844 <set_odr_filter_settings>
 8001296:	4603      	mov	r3, r0
 8001298:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings))
 800129a:	68f9      	ldr	r1, [r7, #12]
 800129c:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 80012a0:	f001 fa33 	bl	800270a <are_settings_changed>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d006      	beq.n	80012b8 <bmp3_set_sensor_settings+0x6c>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, settings, dev);
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	68f8      	ldr	r0, [r7, #12]
 80012b0:	f000 fb36 	bl	8001920 <set_int_ctrl_settings>
 80012b4:	4603      	mov	r3, r0
 80012b6:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings))
 80012b8:	68f9      	ldr	r1, [r7, #12]
 80012ba:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80012be:	f001 fa24 	bl	800270a <are_settings_changed>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d009      	beq.n	80012dc <bmp3_set_sensor_settings+0x90>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, settings, dev);
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	68b9      	ldr	r1, [r7, #8]
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f000 fba1 	bl	8001a14 <set_advance_settings>
 80012d2:	4603      	mov	r3, r0
 80012d4:	75fb      	strb	r3, [r7, #23]
 80012d6:	e001      	b.n	80012dc <bmp3_set_sensor_settings+0x90>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80012d8:	23ff      	movs	r3, #255	; 0xff
 80012da:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80012dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <bmp3_get_status>:
 * @brief This API gets the command ready, data ready for pressure and
 * temperature and interrupt (fifo watermark, fifo full, data ready) and
 * error status from the sensor.
 */
int8_t bmp3_get_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (status != NULL)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d01a      	beq.n	800132e <bmp3_get_status+0x46>
    {
        rslt = get_sensor_status(status, dev);
 80012f8:	6839      	ldr	r1, [r7, #0]
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f001 fa41 	bl	8002782 <get_sensor_status>
 8001300:	4603      	mov	r3, r0
 8001302:	73fb      	strb	r3, [r7, #15]

        /* Proceed further if the earlier operation is fine */
        if (rslt == BMP3_OK)
 8001304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d112      	bne.n	8001332 <bmp3_get_status+0x4a>
        {
            rslt = get_int_status(status, dev);
 800130c:	6839      	ldr	r1, [r7, #0]
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f001 fa7a 	bl	8002808 <get_int_status>
 8001314:	4603      	mov	r3, r0
 8001316:	73fb      	strb	r3, [r7, #15]

            /* Proceed further if the earlier operation is fine */
            if (rslt == BMP3_OK)
 8001318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d108      	bne.n	8001332 <bmp3_get_status+0x4a>
            {
                /* Get the error status */
                rslt = get_err_status(status, dev);
 8001320:	6839      	ldr	r1, [r7, #0]
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f001 fa9e 	bl	8002864 <get_err_status>
 8001328:	4603      	mov	r3, r0
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	e001      	b.n	8001332 <bmp3_get_status+0x4a>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800132e:	23ff      	movs	r3, #255	; 0xff
 8001330:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001332:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b084      	sub	sp, #16
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 8001346:	237e      	movs	r3, #126	; 0x7e
 8001348:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 800134a:	23b6      	movs	r3, #182	; 0xb6
 800134c:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for command ready status */
    rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 800134e:	f107 010c 	add.w	r1, r7, #12
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2201      	movs	r2, #1
 8001356:	2003      	movs	r0, #3
 8001358:	f7ff fe57 	bl	800100a <bmp3_get_regs>
 800135c:	4603      	mov	r3, r0
 800135e:	73fb      	strb	r3, [r7, #15]

    /* Device is ready to accept new command */
    if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 8001360:	7b3b      	ldrb	r3, [r7, #12]
 8001362:	f003 0310 	and.w	r3, r3, #16
 8001366:	2b00      	cmp	r3, #0
 8001368:	d02d      	beq.n	80013c6 <bmp3_soft_reset+0x88>
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d129      	bne.n	80013c6 <bmp3_soft_reset+0x88>
    {
        /* Write the soft reset command in the sensor */
        rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001372:	f107 010d 	add.w	r1, r7, #13
 8001376:	f107 000e 	add.w	r0, r7, #14
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f7ff fed4 	bl	800112a <bmp3_set_regs>
 8001382:	4603      	mov	r3, r0
 8001384:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d11b      	bne.n	80013c6 <bmp3_soft_reset+0x88>
        {
            /* Wait for 2 ms */
            dev->delay_us(2000, dev->intf_ptr);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6852      	ldr	r2, [r2, #4]
 8001396:	4611      	mov	r1, r2
 8001398:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800139c:	4798      	blx	r3

            /* Read for command error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 800139e:	f107 010b 	add.w	r1, r7, #11
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	2002      	movs	r0, #2
 80013a8:	f7ff fe2f 	bl	800100a <bmp3_get_regs>
 80013ac:	4603      	mov	r3, r0
 80013ae:	73fb      	strb	r3, [r7, #15]

            /* check for command error status */
            if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 80013b0:	7afb      	ldrb	r3, [r7, #11]
 80013b2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d103      	bne.n	80013c2 <bmp3_soft_reset+0x84>
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <bmp3_soft_reset+0x88>
            {
                /* Command not written hence return
                 * error */
                rslt = BMP3_E_CMD_EXEC_FAILED;
 80013c2:	23fc      	movs	r3, #252	; 0xfc
 80013c4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80013c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b084      	sub	sp, #16
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80013dc:	6838      	ldr	r0, [r7, #0]
 80013de:	f001 f9ac 	bl	800273a <null_ptr_check>
 80013e2:	4603      	mov	r3, r0
 80013e4:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BMP3_OK) && (settings != NULL))
 80013e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d139      	bne.n	8001462 <bmp3_set_op_mode+0x90>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d036      	beq.n	8001462 <bmp3_set_op_mode+0x90>
    {
        uint8_t curr_mode = settings->op_mode;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	73bb      	strb	r3, [r7, #14]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 80013fa:	f107 030d 	add.w	r3, r7, #13
 80013fe:	6839      	ldr	r1, [r7, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f000 f838 	bl	8001476 <bmp3_get_op_mode>
 8001406:	4603      	mov	r3, r0
 8001408:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if ((last_set_mode != BMP3_MODE_SLEEP) && (rslt == BMP3_OK))
 800140a:	7b7b      	ldrb	r3, [r7, #13]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d010      	beq.n	8001432 <bmp3_set_op_mode+0x60>
 8001410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10c      	bne.n	8001432 <bmp3_set_op_mode+0x60>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 8001418:	6838      	ldr	r0, [r7, #0]
 800141a:	f000 f8f7 	bl	800160c <put_device_to_sleep>
 800141e:	4603      	mov	r3, r0
 8001420:	73fb      	strb	r3, [r7, #15]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	6852      	ldr	r2, [r2, #4]
 800142a:	4611      	mov	r1, r2
 800142c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001430:	4798      	blx	r3
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 8001432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d116      	bne.n	8001468 <bmp3_set_op_mode+0x96>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 800143a:	7bbb      	ldrb	r3, [r7, #14]
 800143c:	2b03      	cmp	r3, #3
 800143e:	d106      	bne.n	800144e <bmp3_set_op_mode+0x7c>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(settings, dev);
 8001440:	6839      	ldr	r1, [r7, #0]
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 f879 	bl	800153a <set_normal_mode>
 8001448:	4603      	mov	r3, r0
 800144a:	73fb      	strb	r3, [r7, #15]
    {
 800144c:	e00c      	b.n	8001468 <bmp3_set_op_mode+0x96>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 800144e:	7bbb      	ldrb	r3, [r7, #14]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d109      	bne.n	8001468 <bmp3_set_op_mode+0x96>
            {
                /* Set forced mode */
                rslt = write_power_mode(settings, dev);
 8001454:	6839      	ldr	r1, [r7, #0]
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 f8a2 	bl	80015a0 <write_power_mode>
 800145c:	4603      	mov	r3, r0
 800145e:	73fb      	strb	r3, [r7, #15]
    {
 8001460:	e002      	b.n	8001468 <bmp3_set_op_mode+0x96>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001462:	23ff      	movs	r3, #255	; 0xff
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	e000      	b.n	800146a <bmp3_set_op_mode+0x98>
    {
 8001468:	bf00      	nop
    }

    return rslt;
 800146a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (op_mode != NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d011      	beq.n	80014aa <bmp3_get_op_mode+0x34>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	2201      	movs	r2, #1
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	201b      	movs	r0, #27
 800148e:	f7ff fdbc 	bl	800100a <bmp3_get_regs>
 8001492:	4603      	mov	r3, r0
 8001494:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	111b      	asrs	r3, r3, #4
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	701a      	strb	r2, [r3, #0]
 80014a8:	e001      	b.n	80014ae <bmp3_get_op_mode+0x38>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80014aa:	23ff      	movs	r3, #255	; 0xff
 80014ac:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <bmp3_get_sensor_data>:
 * @brief This API reads the pressure, temperature or both data from the
 * sensor, compensates the data and store it in the bmp3_data structure
 * instance passed by the user.
 */
int8_t bmp3_get_sensor_data(uint8_t sensor_comp, struct bmp3_data *comp_data, struct bmp3_dev *dev)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b08a      	sub	sp, #40	; 0x28
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure and temperature data read from
     * the sensor */
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
 80014cc:	2300      	movs	r3, #0
 80014ce:	84bb      	strh	r3, [r7, #36]	; 0x24
    struct bmp3_uncomp_data uncomp_data = { 0 };
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]

    if (comp_data != NULL)
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d021      	beq.n	8001528 <bmp3_get_sensor_data+0x6e>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 80014e4:	f107 0120 	add.w	r1, r7, #32
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2206      	movs	r2, #6
 80014ec:	2004      	movs	r0, #4
 80014ee:	f7ff fd8c 	bl	800100a <bmp3_get_regs>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BMP3_OK)
 80014f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d116      	bne.n	800152e <bmp3_get_sensor_data+0x74>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 8001500:	f107 0210 	add.w	r2, r7, #16
 8001504:	f107 0320 	add.w	r3, r7, #32
 8001508:	4611      	mov	r1, r2
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fc70 	bl	8001df0 <parse_sensor_data>

            /* Compensate the pressure/temperature/both data read
             * from the sensor */
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3318      	adds	r3, #24
 8001514:	f107 0110 	add.w	r1, r7, #16
 8001518:	7bf8      	ldrb	r0, [r7, #15]
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	f000 fca3 	bl	8001e66 <compensate_data>
 8001520:	4603      	mov	r3, r0
 8001522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001526:	e002      	b.n	800152e <bmp3_get_sensor_data+0x74>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001528:	23ff      	movs	r3, #255	; 0xff
 800152a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 800152e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001532:	4618      	mov	r0, r3
 8001534:	3728      	adds	r7, #40	; 0x28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b084      	sub	sp, #16
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(settings, dev);
 8001544:	6839      	ldr	r1, [r7, #0]
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 f888 	bl	800165c <validate_normal_mode_settings>
 800154c:	4603      	mov	r3, r0
 800154e:	73fb      	strb	r3, [r7, #15]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 8001550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d11d      	bne.n	8001594 <set_normal_mode+0x5a>
    {
        rslt = write_power_mode(settings, dev);
 8001558:	6839      	ldr	r1, [r7, #0]
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f820 	bl	80015a0 <write_power_mode>
 8001560:	4603      	mov	r3, r0
 8001562:	73fb      	strb	r3, [r7, #15]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 8001564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d113      	bne.n	8001594 <set_normal_mode+0x5a>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 800156c:	f107 010e 	add.w	r1, r7, #14
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	2201      	movs	r2, #1
 8001574:	2002      	movs	r0, #2
 8001576:	f7ff fd48 	bl	800100a <bmp3_get_regs>
 800157a:	4603      	mov	r3, r0
 800157c:	73fb      	strb	r3, [r7, #15]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 800157e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d106      	bne.n	8001594 <set_normal_mode+0x5a>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 8001586:	7bbb      	ldrb	r3, [r7, #14]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <set_normal_mode+0x5a>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 8001590:	23fb      	movs	r3, #251	; 0xfb
 8001592:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001594:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(const struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80015aa:	231b      	movs	r3, #27
 80015ac:	737b      	strb	r3, [r7, #13]
    uint8_t op_mode = settings->op_mode;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 80015b4:	7b78      	ldrb	r0, [r7, #13]
 80015b6:	f107 010c 	add.w	r1, r7, #12
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2201      	movs	r2, #1
 80015be:	f7ff fd24 	bl	800100a <bmp3_get_regs>
 80015c2:	4603      	mov	r3, r0
 80015c4:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 80015c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d118      	bne.n	8001600 <write_power_mode+0x60>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 80015ce:	7b3b      	ldrb	r3, [r7, #12]
 80015d0:	b25b      	sxtb	r3, r3
 80015d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80015d6:	b25a      	sxtb	r2, r3
 80015d8:	7bbb      	ldrb	r3, [r7, #14]
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	b25b      	sxtb	r3, r3
 80015de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	733b      	strb	r3, [r7, #12]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 80015ec:	f107 010c 	add.w	r1, r7, #12
 80015f0:	f107 000d 	add.w	r0, r7, #13
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f7ff fd97 	bl	800112a <bmp3_set_regs>
 80015fc:	4603      	mov	r3, r0
 80015fe:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001600:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8001614:	231b      	movs	r3, #27
 8001616:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 8001618:	f107 010d 	add.w	r1, r7, #13
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	201b      	movs	r0, #27
 8001622:	f7ff fcf2 	bl	800100a <bmp3_get_regs>
 8001626:	4603      	mov	r3, r0
 8001628:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800162a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10e      	bne.n	8001650 <put_device_to_sleep+0x44>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 8001632:	7b7b      	ldrb	r3, [r7, #13]
 8001634:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001638:	b2db      	uxtb	r3, r3
 800163a:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 800163c:	f107 010d 	add.w	r1, r7, #13
 8001640:	f107 000e 	add.w	r0, r7, #14
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f7ff fd6f 	bl	800112a <bmp3_set_regs>
 800164c:	4603      	mov	r3, r0
 800164e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001650:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = get_odr_filter_settings(settings, dev);
 8001666:	6839      	ldr	r1, [r7, #0]
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fa26 	bl	8001aba <get_odr_filter_settings>
 800166e:	4603      	mov	r3, r0
 8001670:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d104      	bne.n	8001684 <validate_normal_mode_settings+0x28>
    {
        rslt = validate_osr_and_odr_settings(settings);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 fa3a 	bl	8001af4 <validate_osr_and_odr_settings>
 8001680:	4603      	mov	r3, r0
 8001682:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001684:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 8001698:	2331      	movs	r3, #49	; 0x31
 800169a:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	741a      	strb	r2, [r3, #16]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 80016b0:	f107 0108 	add.w	r1, r7, #8
 80016b4:	7ff8      	ldrb	r0, [r7, #31]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2215      	movs	r2, #21
 80016ba:	f7ff fca6 	bl	800100a <bmp3_get_regs>
 80016be:	4603      	mov	r3, r0
 80016c0:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 fc3f 	bl	8001f4c <parse_calib_data>

    return rslt;
 80016ce:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3720      	adds	r7, #32
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 80016da:	b480      	push	{r7}
 80016dc:	b087      	sub	sp, #28
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 80016e8:	2301      	movs	r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	e015      	b.n	800171a <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	441a      	add	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	3b01      	subs	r3, #1
 80016fa:	68b9      	ldr	r1, [r7, #8]
 80016fc:	440b      	add	r3, r1
 80016fe:	7812      	ldrb	r2, [r2, #0]
 8001700:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	441a      	add	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	440b      	add	r3, r1
 8001710:	7812      	ldrb	r2, [r2, #0]
 8001712:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	3301      	adds	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d3e5      	bcc.n	80016ee <interleave_reg_addr+0x14>
    }
}
 8001722:	bf00      	nop
 8001724:	bf00      	nop
 8001726:	371c      	adds	r7, #28
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	73fb      	strb	r3, [r7, #15]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	4413      	add	r3, r2
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	b2da      	uxtb	r2, r3
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	10db      	asrs	r3, r3, #3
 800175a:	b2db      	uxtb	r3, r3
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	b2da      	uxtb	r2, r3
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	3301      	adds	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	f003 031f 	and.w	r3, r3, #31
 8001778:	b2da      	uxtb	r2, r3
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	3302      	adds	r3, #2
 8001782:	73fb      	strb	r3, [r7, #15]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	105b      	asrs	r3, r3, #1
 800178e:	b2db      	uxtb	r3, r3
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	b2da      	uxtb	r2, r3
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	709a      	strb	r2, [r3, #2]
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <set_pwr_ctrl_settings>:
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	60f8      	str	r0, [r7, #12]
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80017b2:	231b      	movs	r3, #27
 80017b4:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80017b6:	7db8      	ldrb	r0, [r7, #22]
 80017b8:	f107 0115 	add.w	r1, r7, #21
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f7ff fc23 	bl	800100a <bmp3_get_regs>
 80017c4:	4603      	mov	r3, r0
 80017c6:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 80017c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d132      	bne.n	8001836 <set_pwr_ctrl_settings+0x90>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00e      	beq.n	80017f8 <set_pwr_ctrl_settings+0x52>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, settings->press_en);
 80017da:	7d7b      	ldrb	r3, [r7, #21]
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	f023 0301 	bic.w	r3, r3, #1
 80017e2:	b25a      	sxtb	r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	785b      	ldrb	r3, [r3, #1]
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	b25b      	sxtb	r3, r3
 80017f0:	4313      	orrs	r3, r2
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00f      	beq.n	8001822 <set_pwr_ctrl_settings+0x7c>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, settings->temp_en);
 8001802:	7d7b      	ldrb	r3, [r7, #21]
 8001804:	b25b      	sxtb	r3, r3
 8001806:	f023 0302 	bic.w	r3, r3, #2
 800180a:	b25a      	sxtb	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	789b      	ldrb	r3, [r3, #2]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	b25b      	sxtb	r3, r3
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	b25b      	sxtb	r3, r3
 800181a:	4313      	orrs	r3, r2
 800181c:	b25b      	sxtb	r3, r3
 800181e:	b2db      	uxtb	r3, r3
 8001820:	757b      	strb	r3, [r7, #21]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001822:	f107 0115 	add.w	r1, r7, #21
 8001826:	f107 0016 	add.w	r0, r7, #22
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f7ff fc7c 	bl	800112a <bmp3_set_regs>
 8001832:	4603      	mov	r3, r0
 8001834:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001836:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af02      	add	r7, sp, #8
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 8001850:	4b32      	ldr	r3, [pc, #200]	; (800191c <set_odr_filter_settings+0xd8>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	83bb      	strh	r3, [r7, #28]
 8001856:	2300      	movs	r3, #0
 8001858:	77bb      	strb	r3, [r7, #30]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	75fb      	strb	r3, [r7, #23]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 800185e:	f107 0118 	add.w	r1, r7, #24
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2204      	movs	r2, #4
 8001866:	201c      	movs	r0, #28
 8001868:	f7ff fbcf 	bl	800100a <bmp3_get_regs>
 800186c:	4603      	mov	r3, r0
 800186e:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMP3_OK)
 8001870:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d14a      	bne.n	800190e <set_odr_filter_settings+0xca>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 8001878:	68f9      	ldr	r1, [r7, #12]
 800187a:	2030      	movs	r0, #48	; 0x30
 800187c:	f000 ff45 	bl	800270a <are_settings_changed>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00b      	beq.n	800189e <set_odr_filter_settings+0x5a>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, settings);
 8001886:	f107 0017 	add.w	r0, r7, #23
 800188a:	f107 0218 	add.w	r2, r7, #24
 800188e:	f107 011c 	add.w	r1, r7, #28
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	4603      	mov	r3, r0
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f000 f9e1 	bl	8001c60 <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 800189e:	68f9      	ldr	r1, [r7, #12]
 80018a0:	2080      	movs	r0, #128	; 0x80
 80018a2:	f000 ff32 	bl	800270a <are_settings_changed>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d008      	beq.n	80018be <set_odr_filter_settings+0x7a>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, settings);
 80018ac:	f107 0217 	add.w	r2, r7, #23
 80018b0:	f107 0118 	add.w	r1, r7, #24
 80018b4:	f107 001c 	add.w	r0, r7, #28
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	f000 fa29 	bl	8001d10 <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 80018be:	68f9      	ldr	r1, [r7, #12]
 80018c0:	2040      	movs	r0, #64	; 0x40
 80018c2:	f000 ff22 	bl	800270a <are_settings_changed>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <set_odr_filter_settings+0x9a>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, settings);
 80018cc:	f107 0217 	add.w	r2, r7, #23
 80018d0:	f107 0118 	add.w	r1, r7, #24
 80018d4:	f107 001c 	add.w	r0, r7, #28
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f000 fa53 	bl	8001d84 <fill_filter_data>
        }

        if (settings->op_mode == BMP3_MODE_NORMAL)
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d104      	bne.n	80018f0 <set_odr_filter_settings+0xac>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(settings);
 80018e6:	68b8      	ldr	r0, [r7, #8]
 80018e8:	f000 f904 	bl	8001af4 <validate_osr_and_odr_settings>
 80018ec:	4603      	mov	r3, r0
 80018ee:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMP3_OK)
 80018f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10a      	bne.n	800190e <set_odr_filter_settings+0xca>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
 80018fa:	461a      	mov	r2, r3
 80018fc:	f107 0118 	add.w	r1, r7, #24
 8001900:	f107 001c 	add.w	r0, r7, #28
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f7ff fc10 	bl	800112a <bmp3_set_regs>
 800190a:	4603      	mov	r3, r0
 800190c:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 800190e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3720      	adds	r7, #32
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	0801cbc0 	.word	0x0801cbc0

08001920 <set_int_ctrl_settings>:
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 800192c:	2319      	movs	r3, #25
 800192e:	757b      	strb	r3, [r7, #21]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001930:	7d78      	ldrb	r0, [r7, #21]
 8001932:	f107 0116 	add.w	r1, r7, #22
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f7ff fb66 	bl	800100a <bmp3_get_regs>
 800193e:	4603      	mov	r3, r0
 8001940:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8001942:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d15e      	bne.n	8001a08 <set_int_ctrl_settings+0xe8>
    {
        int_settings = settings->int_settings;
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	f107 0310 	add.w	r3, r7, #16
 8001950:	3207      	adds	r2, #7
 8001952:	6810      	ldr	r0, [r2, #0]
 8001954:	6018      	str	r0, [r3, #0]

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00d      	beq.n	800197c <set_int_ctrl_settings+0x5c>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 8001960:	7dbb      	ldrb	r3, [r7, #22]
 8001962:	b25b      	sxtb	r3, r3
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	b25a      	sxtb	r2, r3
 800196a:	7c3b      	ldrb	r3, [r7, #16]
 800196c:	b25b      	sxtb	r3, r3
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	b25b      	sxtb	r3, r3
 8001974:	4313      	orrs	r3, r2
 8001976:	b25b      	sxtb	r3, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00e      	beq.n	80019a4 <set_int_ctrl_settings+0x84>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 8001986:	7dbb      	ldrb	r3, [r7, #22]
 8001988:	b25b      	sxtb	r3, r3
 800198a:	f023 0302 	bic.w	r3, r3, #2
 800198e:	b25a      	sxtb	r2, r3
 8001990:	7c7b      	ldrb	r3, [r7, #17]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	b25b      	sxtb	r3, r3
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	b25b      	sxtb	r3, r3
 800199c:	4313      	orrs	r3, r2
 800199e:	b25b      	sxtb	r3, r3
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00e      	beq.n	80019cc <set_int_ctrl_settings+0xac>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 80019ae:	7dbb      	ldrb	r3, [r7, #22]
 80019b0:	b25b      	sxtb	r3, r3
 80019b2:	f023 0304 	bic.w	r3, r3, #4
 80019b6:	b25a      	sxtb	r2, r3
 80019b8:	7cbb      	ldrb	r3, [r7, #18]
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	b25b      	sxtb	r3, r3
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	b25b      	sxtb	r3, r3
 80019c4:	4313      	orrs	r3, r2
 80019c6:	b25b      	sxtb	r3, r3
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00e      	beq.n	80019f4 <set_int_ctrl_settings+0xd4>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 80019d6:	7dbb      	ldrb	r3, [r7, #22]
 80019d8:	b25b      	sxtb	r3, r3
 80019da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019de:	b25a      	sxtb	r2, r3
 80019e0:	7cfb      	ldrb	r3, [r7, #19]
 80019e2:	019b      	lsls	r3, r3, #6
 80019e4:	b25b      	sxtb	r3, r3
 80019e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ea:	b25b      	sxtb	r3, r3
 80019ec:	4313      	orrs	r3, r2
 80019ee:	b25b      	sxtb	r3, r3
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	75bb      	strb	r3, [r7, #22]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 80019f4:	f107 0116 	add.w	r1, r7, #22
 80019f8:	f107 0015 	add.w	r0, r7, #21
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f7ff fb93 	bl	800112a <bmp3_set_regs>
 8001a04:	4603      	mov	r3, r0
 8001a06:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001a08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <set_advance_settings>:
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, const struct bmp3_settings *settings,
                                   struct bmp3_dev *dev)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = settings->adv_settings;
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	f107 0310 	add.w	r3, r7, #16
 8001a26:	320b      	adds	r2, #11
 8001a28:	8812      	ldrh	r2, [r2, #0]
 8001a2a:	801a      	strh	r2, [r3, #0]

    reg_addr = BMP3_REG_IF_CONF;
 8001a2c:	231a      	movs	r3, #26
 8001a2e:	75bb      	strb	r3, [r7, #22]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001a30:	7db8      	ldrb	r0, [r7, #22]
 8001a32:	f107 0115 	add.w	r1, r7, #21
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f7ff fae6 	bl	800100a <bmp3_get_regs>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8001a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d131      	bne.n	8001aae <set_advance_settings+0x9a>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00e      	beq.n	8001a72 <set_advance_settings+0x5e>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 8001a54:	7d7b      	ldrb	r3, [r7, #21]
 8001a56:	b25b      	sxtb	r3, r3
 8001a58:	f023 0302 	bic.w	r3, r3, #2
 8001a5c:	b25a      	sxtb	r2, r3
 8001a5e:	7c3b      	ldrb	r3, [r7, #16]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	b25b      	sxtb	r3, r3
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	b25b      	sxtb	r3, r3
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	b25b      	sxtb	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00e      	beq.n	8001a9a <set_advance_settings+0x86>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 8001a7c:	7d7b      	ldrb	r3, [r7, #21]
 8001a7e:	b25b      	sxtb	r3, r3
 8001a80:	f023 0304 	bic.w	r3, r3, #4
 8001a84:	b25a      	sxtb	r2, r3
 8001a86:	7c7b      	ldrb	r3, [r7, #17]
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	b25b      	sxtb	r3, r3
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	b25b      	sxtb	r3, r3
 8001a92:	4313      	orrs	r3, r2
 8001a94:	b25b      	sxtb	r3, r3
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	757b      	strb	r3, [r7, #21]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001a9a:	f107 0115 	add.w	r1, r7, #21
 8001a9e:	f107 0016 	add.w	r0, r7, #22
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f7ff fb40 	bl	800112a <bmp3_set_regs>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001aae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8001ac4:	f107 0108 	add.w	r1, r7, #8
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	2204      	movs	r2, #4
 8001acc:	201c      	movs	r0, #28
 8001ace:	f7ff fa9c 	bl	800100a <bmp3_get_regs>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	73fb      	strb	r3, [r7, #15]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &settings->odr_filter);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	1cda      	adds	r2, r3, #3
 8001ada:	f107 0308 	add.w	r3, r7, #8
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fe25 	bl	8001730 <parse_odr_filter_settings>

    return rslt;
 8001ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_settings *settings)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b098      	sub	sp, #96	; 0x60
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 8001afc:	23ea      	movs	r3, #234	; 0xea
 8001afe:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t meas_t_p = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 8001b04:	4a1a      	ldr	r2, [pc, #104]	; (8001b70 <validate_osr_and_odr_settings+0x7c>)
 8001b06:	f107 030c 	add.w	r3, r7, #12
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	2248      	movs	r2, #72	; 0x48
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f018 f86a 	bl	8019be8 <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (settings->press_en)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	785b      	ldrb	r3, [r3, #1]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d006      	beq.n	8001b2a <validate_osr_and_odr_settings+0x36>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(settings);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f83f 	bl	8001ba0 <calculate_press_meas_time>
 8001b22:	4602      	mov	r2, r0
 8001b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b26:	4413      	add	r3, r2
 8001b28:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    if (settings->temp_en)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	789b      	ldrb	r3, [r3, #2]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d006      	beq.n	8001b40 <validate_osr_and_odr_settings+0x4c>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(settings);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f864 	bl	8001c00 <calculate_temp_meas_time>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b3c:	4413      	add	r3, r2
 8001b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 8001b40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b44:	4413      	add	r3, r2
 8001b46:	65bb      	str	r3, [r7, #88]	; 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[settings->odr_filter.odr]);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	799b      	ldrb	r3, [r3, #6]
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	3360      	adds	r3, #96	; 0x60
 8001b50:	443b      	add	r3, r7
 8001b52:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001b56:	4619      	mov	r1, r3
 8001b58:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001b5a:	f000 f80b 	bl	8001b74 <verify_meas_time_and_odr_duration>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    return rslt;
 8001b64:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3760      	adds	r7, #96	; 0x60
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	0801cbc4 	.word	0x0801cbc4

08001b74 <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d202      	bcs.n	8001b8c <verify_meas_time_and_odr_duration+0x18>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	73fb      	strb	r3, [r7, #15]
 8001b8a:	e001      	b.n	8001b90 <verify_meas_time_and_odr_duration+0x1c>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 8001b8c:	23fd      	movs	r3, #253	; 0xfd
 8001b8e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_settings *settings)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	f107 030c 	add.w	r3, r7, #12
 8001bae:	3203      	adds	r2, #3
 8001bb0:	6810      	ldr	r0, [r2, #0]
 8001bb2:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bbc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 8001bc0:	7b3b      	ldrb	r3, [r7, #12]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	ed97 0b06 	vldr	d0, [r7, #24]
 8001bc8:	f000 fd7a 	bl	80026c0 <pow_bmp3>
 8001bcc:	ed87 0a05 	vstr	s0, [r7, #20]
    press_meas_t = (uint32_t)(BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 8001bd0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bd4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001bf8 <calculate_press_meas_time+0x58>
 8001bd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bdc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001bfc <calculate_press_meas_time+0x5c>
 8001be0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be8:	ee17 3a90 	vmov	r3, s15
 8001bec:	613b      	str	r3, [r7, #16]

    /* Output in microseconds */
    return press_meas_t;
 8001bee:	693b      	ldr	r3, [r7, #16]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3720      	adds	r7, #32
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	44fa0000 	.word	0x44fa0000
 8001bfc:	43c40000 	.word	0x43c40000

08001c00 <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_settings *settings)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	f107 030c 	add.w	r3, r7, #12
 8001c0e:	3203      	adds	r2, #3
 8001c10:	6810      	ldr	r0, [r2, #0]
 8001c12:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 8001c20:	7b7b      	ldrb	r3, [r7, #13]
 8001c22:	4618      	mov	r0, r3
 8001c24:	ed97 0b06 	vldr	d0, [r7, #24]
 8001c28:	f000 fd4a 	bl	80026c0 <pow_bmp3>
 8001c2c:	ed87 0a05 	vstr	s0, [r7, #20]
    temp_meas_t = (uint32_t)(BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 8001c30:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c34:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001c58 <calculate_temp_meas_time+0x58>
 8001c38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c3c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001c5c <calculate_temp_meas_time+0x5c>
 8001c40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c48:	ee17 3a90 	vmov	r3, s15
 8001c4c:	613b      	str	r3, [r7, #16]

    /* Output in uint32_t */
    return temp_meas_t;
 8001c4e:	693b      	ldr	r3, [r7, #16]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	44fa0000 	.word	0x44fa0000
 8001c5c:	439c8000 	.word	0x439c8000

08001c60 <fill_osr_data>:
static void fill_osr_data(uint32_t desired_settings,
                          uint8_t *addr,
                          uint8_t *reg_data,
                          uint8_t *len,
                          const struct bmp3_settings *settings)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8001c6e:	6a3a      	ldr	r2, [r7, #32]
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	3203      	adds	r2, #3
 8001c76:	6810      	ldr	r0, [r2, #0]
 8001c78:	6018      	str	r0, [r3, #0]

    if (desired_settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d03f      	beq.n	8001d04 <fill_osr_data+0xa4>
    {
        /* Pressure over sampling settings check */
        if (desired_settings & BMP3_SEL_PRESS_OS)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d013      	beq.n	8001cb6 <fill_osr_data+0x56>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	b25b      	sxtb	r3, r3
 8001c94:	f023 0307 	bic.w	r3, r3, #7
 8001c98:	b25a      	sxtb	r2, r3
 8001c9a:	7d3b      	ldrb	r3, [r7, #20]
 8001c9c:	b25b      	sxtb	r3, r3
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	b25b      	sxtb	r3, r3
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	b25a      	sxtb	r2, r3
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	4619      	mov	r1, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	440b      	add	r3, r1
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (desired_settings & BMP3_SEL_TEMP_OS)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f003 0320 	and.w	r3, r3, #32
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d014      	beq.n	8001cea <fill_osr_data+0x8a>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	b25b      	sxtb	r3, r3
 8001cc6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001cca:	b25a      	sxtb	r2, r3
 8001ccc:	7d7b      	ldrb	r3, [r7, #21]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	b25b      	sxtb	r3, r3
 8001cd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cd6:	b25b      	sxtb	r3, r3
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	b25a      	sxtb	r2, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	440b      	add	r3, r1
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	221c      	movs	r2, #28
 8001cf6:	701a      	strb	r2, [r3, #0]
        (*len)++;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	701a      	strb	r2, [r3, #0]
    }
}
 8001d04:	bf00      	nop
 8001d06:	371c      	adds	r7, #28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_settings *settings)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &settings->odr_filter;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	3303      	adds	r3, #3
 8001d22:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	78db      	ldrb	r3, [r3, #3]
 8001d28:	2b11      	cmp	r3, #17
 8001d2a:	d902      	bls.n	8001d32 <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2211      	movs	r2, #17
 8001d30:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	3301      	adds	r3, #1
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	b25b      	sxtb	r3, r3
 8001d3a:	f023 031f 	bic.w	r3, r3, #31
 8001d3e:	b25a      	sxtb	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	78db      	ldrb	r3, [r3, #3]
 8001d44:	b25b      	sxtb	r3, r3
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	b25b      	sxtb	r3, r3
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	b25a      	sxtb	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	440b      	add	r3, r1
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	221d      	movs	r2, #29
 8001d6a:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	3301      	adds	r3, #1
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	701a      	strb	r2, [r3, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	371c      	adds	r7, #28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_settings *settings)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b087      	sub	sp, #28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	3203      	adds	r2, #3
 8001d9a:	6810      	ldr	r0, [r2, #0]
 8001d9c:	6018      	str	r0, [r3, #0]

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	3303      	adds	r3, #3
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b25b      	sxtb	r3, r3
 8001da6:	f023 030e 	bic.w	r3, r3, #14
 8001daa:	b25a      	sxtb	r2, r3
 8001dac:	7dbb      	ldrb	r3, [r7, #22]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	b25b      	sxtb	r3, r3
 8001db2:	f003 030e 	and.w	r3, r3, #14
 8001db6:	b25b      	sxtb	r3, r3
 8001db8:	4313      	orrs	r3, r2
 8001dba:	b25a      	sxtb	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	440b      	add	r3, r1
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	221f      	movs	r2, #31
 8001dd6:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	701a      	strb	r2, [r3, #0]
}
 8001de4:	bf00      	nop
 8001de6:	371c      	adds	r7, #28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure or temperature or
 *  both the data and store it in the bmp3_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bmp3_uncomp_data *uncomp_data)
{
 8001df0:	b4b0      	push	{r4, r5, r7}
 8001df2:	b087      	sub	sp, #28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_xlsb = (uint32_t)reg_data[0];
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	7809      	ldrb	r1, [r1, #0]
 8001dfe:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 8;
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	3101      	adds	r1, #1
 8001e04:	7809      	ldrb	r1, [r1, #0]
 8001e06:	0209      	lsls	r1, r1, #8
 8001e08:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[2] << 16;
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	3102      	adds	r1, #2
 8001e0e:	7809      	ldrb	r1, [r1, #0]
 8001e10:	0409      	lsls	r1, r1, #16
 8001e12:	60f9      	str	r1, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	6939      	ldr	r1, [r7, #16]
 8001e18:	4308      	orrs	r0, r1
 8001e1a:	6979      	ldr	r1, [r7, #20]
 8001e1c:	4301      	orrs	r1, r0
 8001e1e:	2000      	movs	r0, #0
 8001e20:	460c      	mov	r4, r1
 8001e22:	4605      	mov	r5, r0
 8001e24:	6839      	ldr	r1, [r7, #0]
 8001e26:	e9c1 4500 	strd	r4, r5, [r1]

    /* Store the parsed register values for temperature data */
    data_xlsb = (uint32_t)reg_data[3];
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	3103      	adds	r1, #3
 8001e2e:	7809      	ldrb	r1, [r1, #0]
 8001e30:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 8;
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	3104      	adds	r1, #4
 8001e36:	7809      	ldrb	r1, [r1, #0]
 8001e38:	0209      	lsls	r1, r1, #8
 8001e3a:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[5] << 16;
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	3105      	adds	r1, #5
 8001e40:	7809      	ldrb	r1, [r1, #0]
 8001e42:	0409      	lsls	r1, r1, #16
 8001e44:	60f9      	str	r1, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	6939      	ldr	r1, [r7, #16]
 8001e4a:	4308      	orrs	r0, r1
 8001e4c:	6979      	ldr	r1, [r7, #20]
 8001e4e:	4301      	orrs	r1, r0
 8001e50:	2000      	movs	r0, #0
 8001e52:	460a      	mov	r2, r1
 8001e54:	4603      	mov	r3, r0
 8001e56:	6839      	ldr	r1, [r7, #0]
 8001e58:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001e5c:	bf00      	nop
 8001e5e:	371c      	adds	r7, #28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bcb0      	pop	{r4, r5, r7}
 8001e64:	4770      	bx	lr

08001e66 <compensate_data>:
 */
static int8_t compensate_data(uint8_t sensor_comp,
                              const struct bmp3_uncomp_data *uncomp_data,
                              struct bmp3_data *comp_data,
                              struct bmp3_calib_data *calib_data)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b086      	sub	sp, #24
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	603b      	str	r3, [r7, #0]
 8001e72:	4603      	mov	r3, r0
 8001e74:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMP3_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d05a      	beq.n	8001f36 <compensate_data+0xd0>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d057      	beq.n	8001f36 <compensate_data+0xd0>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d054      	beq.n	8001f36 <compensate_data+0xd0>
    {
        /* If pressure and temperature component is selected */
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d115      	bne.n	8001ebe <compensate_data+0x58>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation
             */

            /* Compensate pressure and temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	68b9      	ldr	r1, [r7, #8]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 fa1f 	bl	80022dc <compensate_temperature>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP3_OK)
 8001ea2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d148      	bne.n	8001f3c <compensate_data+0xd6>
            {
                rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3308      	adds	r3, #8
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 fa8c 	bl	80023d0 <compensate_pressure>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001ebc:	e03e      	b.n	8001f3c <compensate_data+0xd6>
            }
        }
        else if (sensor_comp == BMP3_PRESS)
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d116      	bne.n	8001ef2 <compensate_data+0x8c>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation.
             * As only pressure is enabled in 'sensor_comp', after calculating
             * compensated temperature, assign it to zero.
             */
            (void)compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 fa06 	bl	80022dc <compensate_temperature>
            comp_data->temperature = 0;
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	e9c1 2300 	strd	r2, r3, [r1]

            /* Compensate the pressure data */
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3308      	adds	r3, #8
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 fa72 	bl	80023d0 <compensate_pressure>
 8001eec:	4603      	mov	r3, r0
 8001eee:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001ef0:	e024      	b.n	8001f3c <compensate_data+0xd6>
        }
        else if (sensor_comp == BMP3_TEMP)
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d10f      	bne.n	8001f18 <compensate_data+0xb2>
        {
            /* Compensate the temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 f9ec 	bl	80022dc <compensate_temperature>
 8001f04:	4603      	mov	r3, r0
 8001f06:	75fb      	strb	r3, [r7, #23]

            /*
             * As only temperature is enabled in 'sensor_comp'
             * make compensated pressure as zero
             */
            comp_data->pressure = 0;
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001f16:	e011      	b.n	8001f3c <compensate_data+0xd6>
        }
        else
        {
            comp_data->pressure = 0;
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	e9c1 2302 	strd	r2, r3, [r1, #8]
            comp_data->temperature = 0;
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	e9c1 2300 	strd	r2, r3, [r1]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001f34:	e002      	b.n	8001f3c <compensate_data+0xd6>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001f36:	23ff      	movs	r3, #255	; 0xff
 8001f38:	75fb      	strb	r3, [r7, #23]
 8001f3a:	e000      	b.n	8001f3e <compensate_data+0xd8>
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001f3c:	bf00      	nop
    }

    return rslt;
 8001f3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	3390      	adds	r3, #144	; 0x90
 8001f5a:	617b      	str	r3, [r7, #20]
    struct bmp3_quantized_calib_data *quantized_calib_data = &dev->calib_data.quantized_calib_data;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	3318      	adds	r3, #24
 8001f60:	613b      	str	r3, [r7, #16]

    /* Temporary variable */
    double temp_var;

    /* 1 / 2^8 */
    temp_var = 0.00390625f;
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	4ba4      	ldr	r3, [pc, #656]	; (80021f8 <parse_calib_data+0x2ac>)
 8001f68:	e9c7 2302 	strd	r2, r3, [r7, #8]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	b21a      	sxth	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	b21b      	sxth	r3, r3
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	b21b      	sxth	r3, r3
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	801a      	strh	r2, [r3, #0]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fad2 	bl	8000534 <__aeabi_ui2d>
 8001f90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f94:	f7fe fc72 	bl	800087c <__aeabi_ddiv>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	6939      	ldr	r1, [r7, #16]
 8001f9e:	e9c1 2300 	strd	r2, r3, [r1]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3303      	adds	r3, #3
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	b21a      	sxth	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3302      	adds	r3, #2
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	b21b      	sxth	r3, r3
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	b21b      	sxth	r3, r3
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	805a      	strh	r2, [r3, #2]
    temp_var = 1073741824.0f;
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	4b8e      	ldr	r3, [pc, #568]	; (80021fc <parse_calib_data+0x2b0>)
 8001fc4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	885b      	ldrh	r3, [r3, #2]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fab1 	bl	8000534 <__aeabi_ui2d>
 8001fd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fd6:	f7fe fc51 	bl	800087c <__aeabi_ddiv>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	6939      	ldr	r1, [r7, #16]
 8001fe0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	b25a      	sxtb	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	711a      	strb	r2, [r3, #4]
    temp_var = 281474976710656.0f;
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	4b82      	ldr	r3, [pc, #520]	; (8002200 <parse_calib_data+0x2b4>)
 8001ff6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe faa7 	bl	8000554 <__aeabi_i2d>
 8002006:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800200a:	f7fe fc37 	bl	800087c <__aeabi_ddiv>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	6939      	ldr	r1, [r7, #16]
 8002014:	e9c1 2304 	strd	r2, r3, [r1, #16]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3306      	adds	r3, #6
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	b21a      	sxth	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3305      	adds	r3, #5
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	b21b      	sxth	r3, r3
 800202a:	4313      	orrs	r3, r2
 800202c:	b21a      	sxth	r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	80da      	strh	r2, [r3, #6]
    temp_var = 1048576.0f;
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	4b73      	ldr	r3, [pc, #460]	; (8002204 <parse_calib_data+0x2b8>)
 8002038:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002042:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fa84 	bl	8000554 <__aeabi_i2d>
 800204c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002050:	f7fe fc14 	bl	800087c <__aeabi_ddiv>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	6939      	ldr	r1, [r7, #16]
 800205a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3308      	adds	r3, #8
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	021b      	lsls	r3, r3, #8
 8002066:	b21a      	sxth	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3307      	adds	r3, #7
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	b21b      	sxth	r3, r3
 8002070:	4313      	orrs	r3, r2
 8002072:	b21a      	sxth	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	811a      	strh	r2, [r3, #8]
    temp_var = 536870912.0f;
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	4b62      	ldr	r3, [pc, #392]	; (8002208 <parse_calib_data+0x2bc>)
 800207e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002088:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fa61 	bl	8000554 <__aeabi_i2d>
 8002092:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002096:	f7fe fbf1 	bl	800087c <__aeabi_ddiv>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	6939      	ldr	r1, [r7, #16]
 80020a0:	e9c1 2308 	strd	r2, r3, [r1, #32]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3309      	adds	r3, #9
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	b25a      	sxtb	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	729a      	strb	r2, [r3, #10]
    temp_var = 4294967296.0f;
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	4b55      	ldr	r3, [pc, #340]	; (800220c <parse_calib_data+0x2c0>)
 80020b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe fa47 	bl	8000554 <__aeabi_i2d>
 80020c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020ca:	f7fe fbd7 	bl	800087c <__aeabi_ddiv>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	6939      	ldr	r1, [r7, #16]
 80020d4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	330a      	adds	r3, #10
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	b25a      	sxtb	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	72da      	strb	r2, [r3, #11]
    temp_var = 137438953472.0f;
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	4b49      	ldr	r3, [pc, #292]	; (8002210 <parse_calib_data+0x2c4>)
 80020ea:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fa2d 	bl	8000554 <__aeabi_i2d>
 80020fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020fe:	f7fe fbbd 	bl	800087c <__aeabi_ddiv>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	6939      	ldr	r1, [r7, #16]
 8002108:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	330c      	adds	r3, #12
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	b21a      	sxth	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	330b      	adds	r3, #11
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b21b      	sxth	r3, r3
 800211e:	4313      	orrs	r3, r2
 8002120:	b21b      	sxth	r3, r3
 8002122:	b29a      	uxth	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	819a      	strh	r2, [r3, #12]

    /* 1 / 2^3 */
    temp_var = 0.125f;
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002130:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	899b      	ldrh	r3, [r3, #12]
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe f9fb 	bl	8000534 <__aeabi_ui2d>
 800213e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002142:	f7fe fb9b 	bl	800087c <__aeabi_ddiv>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	6939      	ldr	r1, [r7, #16]
 800214c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	330e      	adds	r3, #14
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	b21a      	sxth	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	330d      	adds	r3, #13
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	b21b      	sxth	r3, r3
 8002162:	4313      	orrs	r3, r2
 8002164:	b21b      	sxth	r3, r3
 8002166:	b29a      	uxth	r2, r3
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	81da      	strh	r2, [r3, #14]
    temp_var = 64.0f;
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	4b28      	ldr	r3, [pc, #160]	; (8002214 <parse_calib_data+0x2c8>)
 8002172:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	89db      	ldrh	r3, [r3, #14]
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe f9da 	bl	8000534 <__aeabi_ui2d>
 8002180:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002184:	f7fe fb7a 	bl	800087c <__aeabi_ddiv>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	6939      	ldr	r1, [r7, #16]
 800218e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	330f      	adds	r3, #15
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	b25a      	sxtb	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	741a      	strb	r2, [r3, #16]
    temp_var = 256.0f;
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <parse_calib_data+0x2cc>)
 80021a4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe f9d0 	bl	8000554 <__aeabi_i2d>
 80021b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021b8:	f7fe fb60 	bl	800087c <__aeabi_ddiv>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	6939      	ldr	r1, [r7, #16]
 80021c2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3310      	adds	r3, #16
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b25a      	sxtb	r2, r3
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	745a      	strb	r2, [r3, #17]
    temp_var = 32768.0f;
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <parse_calib_data+0x2d0>)
 80021d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe f9b6 	bl	8000554 <__aeabi_i2d>
 80021e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021ec:	f7fe fb46 	bl	800087c <__aeabi_ddiv>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	6939      	ldr	r1, [r7, #16]
 80021f6:	e013      	b.n	8002220 <parse_calib_data+0x2d4>
 80021f8:	3f700000 	.word	0x3f700000
 80021fc:	41d00000 	.word	0x41d00000
 8002200:	42f00000 	.word	0x42f00000
 8002204:	41300000 	.word	0x41300000
 8002208:	41c00000 	.word	0x41c00000
 800220c:	41f00000 	.word	0x41f00000
 8002210:	42400000 	.word	0x42400000
 8002214:	40500000 	.word	0x40500000
 8002218:	40700000 	.word	0x40700000
 800221c:	40e00000 	.word	0x40e00000
 8002220:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3312      	adds	r3, #18
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	021b      	lsls	r3, r3, #8
 800222c:	b21a      	sxth	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3311      	adds	r3, #17
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	b21b      	sxth	r3, r3
 8002236:	4313      	orrs	r3, r2
 8002238:	b21a      	sxth	r2, r3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	825a      	strh	r2, [r3, #18]
    temp_var = 281474976710656.0f;
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <parse_calib_data+0x38c>)
 8002244:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe f980 	bl	8000554 <__aeabi_i2d>
 8002254:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002258:	f7fe fb10 	bl	800087c <__aeabi_ddiv>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	6939      	ldr	r1, [r7, #16]
 8002262:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3313      	adds	r3, #19
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	b25a      	sxtb	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	751a      	strb	r2, [r3, #20]
    temp_var = 281474976710656.0f;
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <parse_calib_data+0x38c>)
 8002278:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe f966 	bl	8000554 <__aeabi_i2d>
 8002288:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800228c:	f7fe faf6 	bl	800087c <__aeabi_ddiv>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	6939      	ldr	r1, [r7, #16]
 8002296:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3314      	adds	r3, #20
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	b25a      	sxtb	r2, r3
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	755a      	strb	r2, [r3, #21]
    temp_var = 36893488147419103232.0f;
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 80022ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe f94b 	bl	8000554 <__aeabi_i2d>
 80022be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022c2:	f7fe fadb 	bl	800087c <__aeabi_ddiv>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	6939      	ldr	r1, [r7, #16]
 80022cc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 80022d0:	bf00      	nop
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	42f00000 	.word	0x42f00000

080022dc <compensate_temperature>:
 * For e.g. Returns temperature 24.26 deg Celsius
 */
static int8_t compensate_temperature(double *temperature,
                                     const struct bmp3_uncomp_data *uncomp_data,
                                     struct bmp3_calib_data *calib_data)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08c      	sub	sp, #48	; 0x30
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int64_t uncomp_temp = uncomp_data->temperature;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80022f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double partial_data1;
    double partial_data2;

    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 80022f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022fc:	f7fe f966 	bl	80005cc <__aeabi_l2d>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002306:	f7fd ffd7 	bl	80002b8 <__aeabi_dsub>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002318:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800231c:	f7fe f984 	bl	8000628 <__aeabi_dmul>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Update the compensated temperature in calib structure since this is
     * needed for pressure calculation */
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8002328:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800232c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002330:	f7fe f97a 	bl	8000628 <__aeabi_dmul>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4610      	mov	r0, r2
 800233a:	4619      	mov	r1, r3
                                             calib_data->quantized_calib_data.par_t3;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8002342:	f7fe f971 	bl	8000628 <__aeabi_dmul>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4610      	mov	r0, r2
 800234c:	4619      	mov	r1, r3
 800234e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002352:	f7fd ffb3 	bl	80002bc <__adddf3>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

    /* Returns compensated temperature */
    if (calib_data->quantized_calib_data.t_lin < BMP3_MIN_TEMP_DOUBLE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <compensate_temperature+0xec>)
 800236c:	f7fe fbce 	bl	8000b0c <__aeabi_dcmplt>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d008      	beq.n	8002388 <compensate_temperature+0xac>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MIN_TEMP_DOUBLE;
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <compensate_temperature+0xec>)
 800237e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        rslt = BMP3_W_MIN_TEMP;
 8002382:	2303      	movs	r3, #3
 8002384:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (calib_data->quantized_calib_data.t_lin > BMP3_MAX_TEMP_DOUBLE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <compensate_temperature+0xf0>)
 8002394:	f7fe fbd8 	bl	8000b48 <__aeabi_dcmpgt>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d008      	beq.n	80023b0 <compensate_temperature+0xd4>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MAX_TEMP_DOUBLE;
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	4b09      	ldr	r3, [pc, #36]	; (80023cc <compensate_temperature+0xf0>)
 80023a6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        rslt = BMP3_W_MAX_TEMP;
 80023aa:	2304      	movs	r3, #4
 80023ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*temperature) = calib_data->quantized_calib_data.t_lin;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80023b6:	68f9      	ldr	r1, [r7, #12]
 80023b8:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 80023bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3730      	adds	r7, #48	; 0x30
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	c0440000 	.word	0xc0440000
 80023cc:	40554000 	.word	0x40554000

080023d0 <compensate_pressure>:
 * For e.g. returns pressure in Pascal p = 95305.295
 */
static int8_t compensate_pressure(double *pressure,
                                  const struct bmp3_uncomp_data *uncomp_data,
                                  const struct bmp3_calib_data *calib_data)
{
 80023d0:	b5b0      	push	{r4, r5, r7, lr}
 80023d2:	b096      	sub	sp, #88	; 0x58
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    const struct bmp3_quantized_calib_data *quantized_calib_data = &calib_data->quantized_calib_data;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	647b      	str	r3, [r7, #68]	; 0x44
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 80023e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80023ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ee:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80023f2:	f7fe f919 	bl	8000628 <__aeabi_dmul>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 80023fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002400:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8002404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002406:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 800240a:	2002      	movs	r0, #2
 800240c:	eeb0 0a47 	vmov.f32	s0, s14
 8002410:	eef0 0a67 	vmov.f32	s1, s15
 8002414:	f000 f954 	bl	80026c0 <pow_bmp3>
 8002418:	ee10 3a10 	vmov	r3, s0
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe f8ab 	bl	8000578 <__aeabi_f2d>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4620      	mov	r0, r4
 8002428:	4629      	mov	r1, r5
 800242a:	f7fe f8fd 	bl	8000628 <__aeabi_dmul>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 8002436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002438:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800243c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800243e:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8002442:	2003      	movs	r0, #3
 8002444:	eeb0 0a47 	vmov.f32	s0, s14
 8002448:	eef0 0a67 	vmov.f32	s1, s15
 800244c:	f000 f938 	bl	80026c0 <pow_bmp3>
 8002450:	ee10 3a10 	vmov	r3, s0
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe f88f 	bl	8000578 <__aeabi_f2d>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4620      	mov	r0, r4
 8002460:	4629      	mov	r1, r5
 8002462:	f7fe f8e1 	bl	8000628 <__aeabi_dmul>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 800246e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002470:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002474:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002478:	f7fd ff20 	bl	80002bc <__adddf3>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002488:	f7fd ff18 	bl	80002bc <__adddf3>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002494:	f7fd ff12 	bl	80002bc <__adddf3>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 80024a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80024a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80024ac:	f7fe f8bc 	bl	8000628 <__aeabi_dmul>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 80024b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ba:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80024be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024c0:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80024c4:	2002      	movs	r0, #2
 80024c6:	eeb0 0a47 	vmov.f32	s0, s14
 80024ca:	eef0 0a67 	vmov.f32	s1, s15
 80024ce:	f000 f8f7 	bl	80026c0 <pow_bmp3>
 80024d2:	ee10 3a10 	vmov	r3, s0
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe f84e 	bl	8000578 <__aeabi_f2d>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4620      	mov	r0, r4
 80024e2:	4629      	mov	r1, r5
 80024e4:	f7fe f8a0 	bl	8000628 <__aeabi_dmul>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 80024f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f2:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80024f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f8:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80024fc:	2003      	movs	r0, #3
 80024fe:	eeb0 0a47 	vmov.f32	s0, s14
 8002502:	eef0 0a67 	vmov.f32	s1, s15
 8002506:	f000 f8db 	bl	80026c0 <pow_bmp3>
 800250a:	ee10 3a10 	vmov	r3, s0
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe f832 	bl	8000578 <__aeabi_f2d>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4620      	mov	r0, r4
 800251a:	4629      	mov	r1, r5
 800251c:	f7fe f884 	bl	8000628 <__aeabi_dmul>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out2 = uncomp_data->pressure *
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252e:	4610      	mov	r0, r2
 8002530:	4619      	mov	r1, r3
 8002532:	f7fe f843 	bl	80005bc <__aeabi_ul2d>
 8002536:	4604      	mov	r4, r0
 8002538:	460d      	mov	r5, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 800253a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800253c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002540:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002544:	f7fd feba 	bl	80002bc <__adddf3>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4610      	mov	r0, r2
 800254e:	4619      	mov	r1, r3
 8002550:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002554:	f7fd feb2 	bl	80002bc <__adddf3>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4610      	mov	r0, r2
 800255e:	4619      	mov	r1, r3
 8002560:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002564:	f7fd feaa 	bl	80002bc <__adddf3>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
    partial_out2 = uncomp_data->pressure *
 800256c:	4620      	mov	r0, r4
 800256e:	4629      	mov	r1, r5
 8002570:	f7fe f85a 	bl	8000628 <__aeabi_dmul>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002582:	4610      	mov	r0, r2
 8002584:	4619      	mov	r1, r3
 8002586:	f7fe f819 	bl	80005bc <__aeabi_ul2d>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	2002      	movs	r0, #2
 8002590:	ec43 2b10 	vmov	d0, r2, r3
 8002594:	f000 f894 	bl	80026c0 <pow_bmp3>
 8002598:	ee10 3a10 	vmov	r3, s0
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd ffeb 	bl	8000578 <__aeabi_f2d>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 80025aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ac:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 80025b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b2:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80025b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80025bc:	f7fe f834 	bl	8000628 <__aeabi_dmul>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4620      	mov	r0, r4
 80025c6:	4629      	mov	r1, r5
 80025c8:	f7fd fe78 	bl	80002bc <__adddf3>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = partial_data1 * partial_data2;
 80025d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80025d8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80025dc:	f7fe f824 	bl	8000628 <__aeabi_dmul>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ee:	4610      	mov	r0, r2
 80025f0:	4619      	mov	r1, r3
 80025f2:	f7fd ffe3 	bl	80005bc <__aeabi_ul2d>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	2003      	movs	r0, #3
 80025fc:	ec43 2b10 	vmov	d0, r2, r3
 8002600:	f000 f85e 	bl	80026c0 <pow_bmp3>
 8002604:	ee10 3a10 	vmov	r3, s0
 8002608:	4618      	mov	r0, r3
 800260a:	f7fd ffb5 	bl	8000578 <__aeabi_f2d>
 800260e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002610:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002614:	f7fe f808 	bl	8000628 <__aeabi_dmul>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002620:	f7fd fe4c 	bl	80002bc <__adddf3>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	e9c7 2304 	strd	r2, r3, [r7, #16]
    comp_press = partial_out1 + partial_out2 + partial_data4;
 800262c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002630:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002634:	f7fd fe42 	bl	80002bc <__adddf3>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002640:	f7fd fe3c 	bl	80002bc <__adddf3>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    if (comp_press < BMP3_MIN_PRES_DOUBLE)
 800264c:	a318      	add	r3, pc, #96	; (adr r3, 80026b0 <compensate_pressure+0x2e0>)
 800264e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002652:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002656:	f7fe fa59 	bl	8000b0c <__aeabi_dcmplt>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d007      	beq.n	8002670 <compensate_pressure+0x2a0>
    {
        comp_press = BMP3_MIN_PRES_DOUBLE;
 8002660:	a313      	add	r3, pc, #76	; (adr r3, 80026b0 <compensate_pressure+0x2e0>)
 8002662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002666:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        rslt = BMP3_W_MIN_PRES;
 800266a:	2305      	movs	r3, #5
 800266c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    if (comp_press > BMP3_MAX_PRES_DOUBLE)
 8002670:	a311      	add	r3, pc, #68	; (adr r3, 80026b8 <compensate_pressure+0x2e8>)
 8002672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002676:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800267a:	f7fe fa65 	bl	8000b48 <__aeabi_dcmpgt>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d007      	beq.n	8002694 <compensate_pressure+0x2c4>
    {
        comp_press = BMP3_MAX_PRES_DOUBLE;
 8002684:	a30c      	add	r3, pc, #48	; (adr r3, 80026b8 <compensate_pressure+0x2e8>)
 8002686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        rslt = BMP3_W_MAX_PRES;
 800268e:	2306      	movs	r3, #6
 8002690:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    (*pressure) = comp_press;
 8002694:	68f9      	ldr	r1, [r7, #12]
 8002696:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800269a:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 800269e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3758      	adds	r7, #88	; 0x58
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bdb0      	pop	{r4, r5, r7, pc}
 80026aa:	bf00      	nop
 80026ac:	f3af 8000 	nop.w
 80026b0:	00000000 	.word	0x00000000
 80026b4:	40dd4c00 	.word	0x40dd4c00
 80026b8:	00000000 	.word	0x00000000
 80026bc:	40fe8480 	.word	0x40fe8480

080026c0 <pow_bmp3>:
/*!
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	ed87 0b02 	vstr	d0, [r7, #8]
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
    float pow_output = 1;
 80026ce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80026d2:	617b      	str	r3, [r7, #20]

    while (power != 0)
 80026d4:	e00e      	b.n	80026f4 <pow_bmp3+0x34>
    {
        pow_output = (float) base * pow_output;
 80026d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026da:	f7fe fa7d 	bl	8000bd8 <__aeabi_d2f>
 80026de:	ee07 0a10 	vmov	s14, r0
 80026e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80026e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ea:	edc7 7a05 	vstr	s15, [r7, #20]
        power--;
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	71fb      	strb	r3, [r7, #7]
    while (power != 0)
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1ed      	bne.n	80026d6 <pow_bmp3+0x16>
    }

    return pow_output;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	ee07 3a90 	vmov	s15, r3
}
 8002700:	eeb0 0a67 	vmov.f32	s0, s15
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 800270a:	b480      	push	{r7}
 800270c:	b085      	sub	sp, #20
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 8002714:	2300      	movs	r3, #0
 8002716:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <are_settings_changed+0x1e>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8002722:	2301      	movs	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
 8002726:	e001      	b.n	800272c <are_settings_changed+0x22>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8002728:	2300      	movs	r3, #0
 800272a:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 800272c:	7bfb      	ldrb	r3, [r7, #15]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 800273a:	b480      	push	{r7}
 800273c:	b085      	sub	sp, #20
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00f      	beq.n	8002768 <null_ptr_check+0x2e>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00b      	beq.n	8002768 <null_ptr_check+0x2e>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d007      	beq.n	8002768 <null_ptr_check+0x2e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8002764:	2b00      	cmp	r3, #0
 8002766:	d102      	bne.n	800276e <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 8002768:	23ff      	movs	r3, #255	; 0xff
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	e001      	b.n	8002772 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002772:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <get_sensor_status>:
/*!
 * @brief This API gets the command ready, data ready for pressure and
 * temperature, power on reset status from the sensor.
 */
static int8_t get_sensor_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
 800278a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;

    reg_addr = BMP3_REG_SENS_STATUS;
 800278c:	2303      	movs	r3, #3
 800278e:	73bb      	strb	r3, [r7, #14]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8002790:	f107 010d 	add.w	r1, r7, #13
 8002794:	7bb8      	ldrb	r0, [r7, #14]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2201      	movs	r2, #1
 800279a:	f7fe fc36 	bl	800100a <bmp3_get_regs>
 800279e:	4603      	mov	r3, r0
 80027a0:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 80027a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d128      	bne.n	80027fc <get_sensor_status+0x7a>
    {
        status->sensor.cmd_rdy = BMP3_GET_BITS(reg_data, BMP3_STATUS_CMD_RDY);
 80027aa:	7b7b      	ldrb	r3, [r7, #13]
 80027ac:	111b      	asrs	r3, r3, #4
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	70da      	strb	r2, [r3, #3]
        status->sensor.drdy_press = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_PRESS);
 80027ba:	7b7b      	ldrb	r3, [r7, #13]
 80027bc:	115b      	asrs	r3, r3, #5
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	711a      	strb	r2, [r3, #4]
        status->sensor.drdy_temp = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_TEMP);
 80027ca:	7b7b      	ldrb	r3, [r7, #13]
 80027cc:	119b      	asrs	r3, r3, #6
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	715a      	strb	r2, [r3, #5]
        reg_addr = BMP3_REG_EVENT;
 80027da:	2310      	movs	r3, #16
 80027dc:	73bb      	strb	r3, [r7, #14]
        rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80027de:	f107 010d 	add.w	r1, r7, #13
 80027e2:	7bb8      	ldrb	r0, [r7, #14]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f7fe fc0f 	bl	800100a <bmp3_get_regs>
 80027ec:	4603      	mov	r3, r0
 80027ee:	73fb      	strb	r3, [r7, #15]
        status->pwr_on_rst = reg_data & 0x01;
 80027f0:	7b7b      	ldrb	r3, [r7, #13]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	725a      	strb	r2, [r3, #9]
    }

    return rslt;
 80027fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <get_int_status>:
/*!
 * @brief This API gets the interrupt (fifo watermark, fifo full, data ready)
 * status from the sensor.
 */
static int8_t get_int_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_INT_STATUS, &reg_data, 1, dev);
 8002812:	f107 010e 	add.w	r1, r7, #14
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2201      	movs	r2, #1
 800281a:	2011      	movs	r0, #17
 800281c:	f7fe fbf5 	bl	800100a <bmp3_get_regs>
 8002820:	4603      	mov	r3, r0
 8002822:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8002824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d115      	bne.n	8002858 <get_int_status+0x50>
    {
        status->intr.fifo_wm = BMP3_GET_BITS_POS_0(reg_data, BMP3_INT_STATUS_FWTM);
 800282c:	7bbb      	ldrb	r3, [r7, #14]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	b2da      	uxtb	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	701a      	strb	r2, [r3, #0]
        status->intr.fifo_full = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_FFULL);
 8002838:	7bbb      	ldrb	r3, [r7, #14]
 800283a:	105b      	asrs	r3, r3, #1
 800283c:	b2db      	uxtb	r3, r3
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	b2da      	uxtb	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	705a      	strb	r2, [r3, #1]
        status->intr.drdy = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_DRDY);
 8002848:	7bbb      	ldrb	r3, [r7, #14]
 800284a:	10db      	asrs	r3, r3, #3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	b2da      	uxtb	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	709a      	strb	r2, [r3, #2]
    }

    return rslt;
 8002858:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <get_err_status>:
/*!
 * @brief This API gets the fatal, command and configuration error
 * from the sensor.
 */
static int8_t get_err_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_ERR, &reg_data, 1, dev);
 800286e:	f107 010e 	add.w	r1, r7, #14
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2201      	movs	r2, #1
 8002876:	2002      	movs	r0, #2
 8002878:	f7fe fbc7 	bl	800100a <bmp3_get_regs>
 800287c:	4603      	mov	r3, r0
 800287e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8002880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d115      	bne.n	80028b4 <get_err_status+0x50>
    {
        status->err.cmd = BMP3_GET_BITS_POS_0(reg_data, BMP3_ERR_FATAL);
 8002888:	7bbb      	ldrb	r3, [r7, #14]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	b2da      	uxtb	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	71da      	strb	r2, [r3, #7]
        status->err.conf = BMP3_GET_BITS(reg_data, BMP3_ERR_CMD);
 8002894:	7bbb      	ldrb	r3, [r7, #14]
 8002896:	105b      	asrs	r3, r3, #1
 8002898:	b2db      	uxtb	r3, r3
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	721a      	strb	r2, [r3, #8]
        status->err.fatal = BMP3_GET_BITS(reg_data, BMP3_ERR_CONF);
 80028a4:	7bbb      	ldrb	r3, [r7, #14]
 80028a6:	109b      	asrs	r3, r3, #2
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	719a      	strb	r2, [r3, #6]
    }

    return rslt;
 80028b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <bmp3_check_rslt>:
extern volatile uint8_t int2_flag;

static uint8_t dev_addr = 0;

void bmp3_check_rslt(const char api_name[], int8_t rslt)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	70fb      	strb	r3, [r7, #3]
    switch (rslt)
 80028cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028d0:	3307      	adds	r3, #7
 80028d2:	2b09      	cmp	r3, #9
 80028d4:	d839      	bhi.n	800294a <bmp3_check_rslt+0x8a>
 80028d6:	a201      	add	r2, pc, #4	; (adr r2, 80028dc <bmp3_check_rslt+0x1c>)
 80028d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028dc:	08002923 	.word	0x08002923
 80028e0:	08002919 	.word	0x08002919
 80028e4:	0800292d 	.word	0x0800292d
 80028e8:	0800294b 	.word	0x0800294b
 80028ec:	0800294b 	.word	0x0800294b
 80028f0:	0800290f 	.word	0x0800290f
 80028f4:	08002905 	.word	0x08002905
 80028f8:	08002955 	.word	0x08002955
 80028fc:	08002937 	.word	0x08002937
 8002900:	08002941 	.word	0x08002941

            // Do nothing
            break;
        case BMP3_E_NULL_PTR:
            //PDEBUG("API [%s] Error [%d] : Null pointer\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR1\n", 7);
 8002904:	2107      	movs	r1, #7
 8002906:	4816      	ldr	r0, [pc, #88]	; (8002960 <bmp3_check_rslt+0xa0>)
 8002908:	f016 fc0c 	bl	8019124 <CDC_Transmit_FS>
            break;
 800290c:	e023      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_COMM_FAIL:
        	//PDEBUG("API [%s] Error [%d] : Communication failure\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR2\n", 6);
 800290e:	2106      	movs	r1, #6
 8002910:	4814      	ldr	r0, [pc, #80]	; (8002964 <bmp3_check_rslt+0xa4>)
 8002912:	f016 fc07 	bl	8019124 <CDC_Transmit_FS>
        	break;
 8002916:	e01e      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_INVALID_LEN:
        	//PDEBUG("API [%s] Error [%d] : Incorrect length parameter\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR3\n", 6);
 8002918:	2106      	movs	r1, #6
 800291a:	4813      	ldr	r0, [pc, #76]	; (8002968 <bmp3_check_rslt+0xa8>)
 800291c:	f016 fc02 	bl	8019124 <CDC_Transmit_FS>
        	break;
 8002920:	e019      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_DEV_NOT_FOUND:
        	//PDEBUG("API [%s] Error [%d] : Device not found\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR4\n", 6);
 8002922:	2106      	movs	r1, #6
 8002924:	4811      	ldr	r0, [pc, #68]	; (800296c <bmp3_check_rslt+0xac>)
 8002926:	f016 fbfd 	bl	8019124 <CDC_Transmit_FS>
        	break;
 800292a:	e014      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_CONFIGURATION_ERR:
        	//PDEBUG("API [%s] Error [%d] : Configuration Error\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR5\n", 6);
 800292c:	2106      	movs	r1, #6
 800292e:	4810      	ldr	r0, [pc, #64]	; (8002970 <bmp3_check_rslt+0xb0>)
 8002930:	f016 fbf8 	bl	8019124 <CDC_Transmit_FS>
        	break;
 8002934:	e00f      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_W_SENSOR_NOT_ENABLED:
        	//PDEBUG("API [%s] Error [%d] : Warning when Sensor not enabled\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR6\n", 6);
 8002936:	2106      	movs	r1, #6
 8002938:	480e      	ldr	r0, [pc, #56]	; (8002974 <bmp3_check_rslt+0xb4>)
 800293a:	f016 fbf3 	bl	8019124 <CDC_Transmit_FS>
        	break;
 800293e:	e00a      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_W_INVALID_FIFO_REQ_FRAME_CNT:
        	//PDEBUG("API [%s] Error [%d] : Warning when Fifo watermark level is not in limit\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR7\n", 6);
 8002940:	2106      	movs	r1, #6
 8002942:	480d      	ldr	r0, [pc, #52]	; (8002978 <bmp3_check_rslt+0xb8>)
 8002944:	f016 fbee 	bl	8019124 <CDC_Transmit_FS>
        	break;
 8002948:	e005      	b.n	8002956 <bmp3_check_rslt+0x96>
        default:
        	//PDEBUG("API [%s] Error [%d] : Unknown error code\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR8\n", 6);
 800294a:	2106      	movs	r1, #6
 800294c:	480b      	ldr	r0, [pc, #44]	; (800297c <bmp3_check_rslt+0xbc>)
 800294e:	f016 fbe9 	bl	8019124 <CDC_Transmit_FS>
        	break;
 8002952:	e000      	b.n	8002956 <bmp3_check_rslt+0x96>
            break;
 8002954:	bf00      	nop
    }
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	0801cc0c 	.word	0x0801cc0c
 8002964:	0801cc14 	.word	0x0801cc14
 8002968:	0801cc1c 	.word	0x0801cc1c
 800296c:	0801cc24 	.word	0x0801cc24
 8002970:	0801cc2c 	.word	0x0801cc2c
 8002974:	0801cc34 	.word	0x0801cc34
 8002978:	0801cc3c 	.word	0x0801cc3c
 800297c:	0801cc44 	.word	0x0801cc44

08002980 <bmp3_interface_init>:

BMP3_INTF_RET_TYPE bmp3_interface_init(struct bmp3_dev *bmp3, uint8_t intf)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	70fb      	strb	r3, [r7, #3]
	int8_t rslt = BMP3_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	73fb      	strb	r3, [r7, #15]

	if(bmp3 != NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d015      	beq.n	80029c2 <bmp3_interface_init+0x42>
	{
		/* Bus configuration : I2C */
		if (intf == BMP3_I2C_INTF)
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d10b      	bne.n	80029b4 <bmp3_interface_init+0x34>
		{
			//PDEBUG("I2C Interface\n");
			dev_addr = BMP3_ADDR_I2C_SEC;
 800299c:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <bmp3_interface_init+0x58>)
 800299e:	2277      	movs	r2, #119	; 0x77
 80029a0:	701a      	strb	r2, [r3, #0]
			bmp3->read = SensorAPI_I2Cx_Read;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a0d      	ldr	r2, [pc, #52]	; (80029dc <bmp3_interface_init+0x5c>)
 80029a6:	60da      	str	r2, [r3, #12]
			bmp3->write = SensorAPI_I2Cx_Write;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a0d      	ldr	r2, [pc, #52]	; (80029e0 <bmp3_interface_init+0x60>)
 80029ac:	611a      	str	r2, [r3, #16]
			bmp3->intf = BMP3_I2C_INTF;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	721a      	strb	r2, [r3, #8]
			bmp3->read = SensorAPI_SPIx_Read;
			bmp3->write = SensorAPI_SPIx_Write;
			bmp3->intf = BMP3_SPI_INTF;
		}*/

		bmp3->delay_us = bmp3_delay_us;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a0b      	ldr	r2, [pc, #44]	; (80029e4 <bmp3_interface_init+0x64>)
 80029b8:	615a      	str	r2, [r3, #20]
		bmp3->intf_ptr = &dev_addr;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a06      	ldr	r2, [pc, #24]	; (80029d8 <bmp3_interface_init+0x58>)
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	e001      	b.n	80029c6 <bmp3_interface_init+0x46>
	}
	else
	{
		rslt = BMP3_E_NULL_PTR;
 80029c2:	23ff      	movs	r3, #255	; 0xff
 80029c4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80029c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	200002ec 	.word	0x200002ec
 80029dc:	08002a21 	.word	0x08002a21
 80029e0:	08002a75 	.word	0x08002a75
 80029e4:	080029e9 	.word	0x080029e9

080029e8 <bmp3_delay_us>:
		}
	}
}

void bmp3_delay_us(uint32_t period, void *intf_ptr)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
	uint32_t i;

	while(period--)
 80029f2:	e008      	b.n	8002a06 <bmp3_delay_us+0x1e>
	{
		for(i = 0; i < 84; i++)
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	e002      	b.n	8002a00 <bmp3_delay_us+0x18>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3301      	adds	r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b53      	cmp	r3, #83	; 0x53
 8002a04:	d9f9      	bls.n	80029fa <bmp3_delay_us+0x12>
	while(period--)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	1e5a      	subs	r2, r3, #1
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f1      	bne.n	80029f4 <bmp3_delay_us+0xc>
		{
			;
		}
	}
}
 8002a10:	bf00      	nop
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <SensorAPI_I2Cx_Read>:
* Input          : I2C1 or I2C2, slave_address7, subaddress, Write Number
* Output         : None
* Return         : number of bytes transmitted
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t subaddress, uint8_t *pBuffer, uint16_t ReadNumbr, void *intf_ptr)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af02      	add	r7, sp, #8
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	73fb      	strb	r3, [r7, #15]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	81bb      	strh	r3, [r7, #12]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr << 1;
 8002a38:	7dfb      	ldrb	r3, [r7, #23]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	82bb      	strh	r3, [r7, #20]

	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, &subaddress, 1, BUS_TIMEOUT);
 8002a40:	f107 020f 	add.w	r2, r7, #15
 8002a44:	8ab9      	ldrh	r1, [r7, #20]
 8002a46:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	4808      	ldr	r0, [pc, #32]	; (8002a70 <SensorAPI_I2Cx_Read+0x50>)
 8002a50:	f005 fd70 	bl	8008534 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, DevAddress, pBuffer, ReadNumbr, BUS_TIMEOUT);
 8002a54:	89bb      	ldrh	r3, [r7, #12]
 8002a56:	8ab9      	ldrh	r1, [r7, #20]
 8002a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5c:	9200      	str	r2, [sp, #0]
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	4803      	ldr	r0, [pc, #12]	; (8002a70 <SensorAPI_I2Cx_Read+0x50>)
 8002a62:	f005 fe7f 	bl	8008764 <HAL_I2C_Master_Receive>
	return 0;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	200004f0 	.word	0x200004f0

08002a74 <SensorAPI_I2Cx_Write>:

int8_t SensorAPI_I2Cx_Write(uint8_t subaddress, uint8_t *pBuffer, uint16_t WriteNumbr, void *intf_ptr)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607b      	str	r3, [r7, #4]
 8002a7e:	4603      	mov	r3, r0
 8002a80:	73fb      	strb	r3, [r7, #15]
 8002a82:	4613      	mov	r3, r2
 8002a84:	81bb      	strh	r3, [r7, #12]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr << 1;
 8002a8c:	7dfb      	ldrb	r3, [r7, #23]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	82bb      	strh	r3, [r7, #20]

	GTXBuffer[0] = subaddress;
 8002a94:	4a0c      	ldr	r2, [pc, #48]	; (8002ac8 <SensorAPI_I2Cx_Write+0x54>)
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], pBuffer, WriteNumbr);
 8002a9a:	89bb      	ldrh	r3, [r7, #12]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68b9      	ldr	r1, [r7, #8]
 8002aa0:	480a      	ldr	r0, [pc, #40]	; (8002acc <SensorAPI_I2Cx_Write+0x58>)
 8002aa2:	f017 f8a1 	bl	8019be8 <memcpy>

	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, GTXBuffer, WriteNumbr+1, BUS_TIMEOUT);
 8002aa6:	89bb      	ldrh	r3, [r7, #12]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	8ab9      	ldrh	r1, [r7, #20]
 8002aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab2:	9200      	str	r2, [sp, #0]
 8002ab4:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <SensorAPI_I2Cx_Write+0x54>)
 8002ab6:	4806      	ldr	r0, [pc, #24]	; (8002ad0 <SensorAPI_I2Cx_Write+0x5c>)
 8002ab8:	f005 fd3c 	bl	8008534 <HAL_I2C_Master_Transmit>
	return 0;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	200002f0 	.word	0x200002f0
 8002acc:	200002f1 	.word	0x200002f1
 8002ad0:	200004f0 	.word	0x200004f0

08002ad4 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002ada:	2300      	movs	r3, #0
 8002adc:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8002ade:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002ae0:	4a19      	ldr	r2, [pc, #100]	; (8002b48 <BSP_I2C2_Init+0x74>)
 8002ae2:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8002ae4:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <BSP_I2C2_Init+0x78>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	4918      	ldr	r1, [pc, #96]	; (8002b4c <BSP_I2C2_Init+0x78>)
 8002aec:	600a      	str	r2, [r1, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d122      	bne.n	8002b38 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8002af2:	4814      	ldr	r0, [pc, #80]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002af4:	f006 fa63 	bl	8008fbe <HAL_I2C_GetState>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d11c      	bne.n	8002b38 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8002afe:	4811      	ldr	r0, [pc, #68]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002b00:	f000 f8fe 	bl	8002d00 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d116      	bne.n	8002b38 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8002b0a:	480e      	ldr	r0, [pc, #56]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002b0c:	f000 f8b4 	bl	8002c78 <MX_I2C2_Init>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002b16:	f06f 0307 	mvn.w	r3, #7
 8002b1a:	607b      	str	r3, [r7, #4]
 8002b1c:	e00c      	b.n	8002b38 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4808      	ldr	r0, [pc, #32]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002b22:	f006 fda1 	bl	8009668 <HAL_I2CEx_ConfigAnalogFilter>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002b2c:	f06f 0307 	mvn.w	r3, #7
 8002b30:	607b      	str	r3, [r7, #4]
 8002b32:	e001      	b.n	8002b38 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8002b34:	2300      	movs	r3, #0
 8002b36:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002b38:	687b      	ldr	r3, [r7, #4]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	200004f0 	.word	0x200004f0
 8002b48:	40005800 	.word	0x40005800
 8002b4c:	20000544 	.word	0x20000544

08002b50 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002b56:	2300      	movs	r3, #0
 8002b58:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 8002b5a:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <BSP_I2C2_DeInit+0x48>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d014      	beq.n	8002b8c <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 8002b62:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <BSP_I2C2_DeInit+0x48>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	4a0b      	ldr	r2, [pc, #44]	; (8002b98 <BSP_I2C2_DeInit+0x48>)
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <BSP_I2C2_DeInit+0x48>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10b      	bne.n	8002b8c <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 8002b74:	4809      	ldr	r0, [pc, #36]	; (8002b9c <BSP_I2C2_DeInit+0x4c>)
 8002b76:	f000 f923 	bl	8002dc0 <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 8002b7a:	4808      	ldr	r0, [pc, #32]	; (8002b9c <BSP_I2C2_DeInit+0x4c>)
 8002b7c:	f005 fcab 	bl	80084d6 <HAL_I2C_DeInit>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002b86:	f06f 0307 	mvn.w	r3, #7
 8002b8a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002b8c:	687b      	ldr	r3, [r7, #4]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000544 	.word	0x20000544
 8002b9c:	200004f0 	.word	0x200004f0

08002ba0 <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	; 0x28
 8002ba4:	af04      	add	r7, sp, #16
 8002ba6:	60ba      	str	r2, [r7, #8]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4603      	mov	r3, r0
 8002bac:	81fb      	strh	r3, [r7, #14]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	81bb      	strh	r3, [r7, #12]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8002bba:	89ba      	ldrh	r2, [r7, #12]
 8002bbc:	89f9      	ldrh	r1, [r7, #14]
 8002bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bc2:	9302      	str	r3, [sp, #8]
 8002bc4:	88fb      	ldrh	r3, [r7, #6]
 8002bc6:	9301      	str	r3, [sp, #4]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	2301      	movs	r3, #1
 8002bce:	480c      	ldr	r0, [pc, #48]	; (8002c00 <BSP_I2C2_WriteReg+0x60>)
 8002bd0:	f005 febe 	bl	8008950 <HAL_I2C_Mem_Write>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00c      	beq.n	8002bf4 <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8002bda:	4809      	ldr	r0, [pc, #36]	; (8002c00 <BSP_I2C2_WriteReg+0x60>)
 8002bdc:	f006 f9fd 	bl	8008fda <HAL_I2C_GetError>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d103      	bne.n	8002bee <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002be6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	e002      	b.n	8002bf4 <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002bee:	f06f 0303 	mvn.w	r3, #3
 8002bf2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002bf4:	697b      	ldr	r3, [r7, #20]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	200004f0 	.word	0x200004f0

08002c04 <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08a      	sub	sp, #40	; 0x28
 8002c08:	af04      	add	r7, sp, #16
 8002c0a:	60ba      	str	r2, [r7, #8]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4603      	mov	r3, r0
 8002c10:	81fb      	strh	r3, [r7, #14]
 8002c12:	460b      	mov	r3, r1
 8002c14:	81bb      	strh	r3, [r7, #12]
 8002c16:	4613      	mov	r3, r2
 8002c18:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8002c1e:	89ba      	ldrh	r2, [r7, #12]
 8002c20:	89f9      	ldrh	r1, [r7, #14]
 8002c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c26:	9302      	str	r3, [sp, #8]
 8002c28:	88fb      	ldrh	r3, [r7, #6]
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	2301      	movs	r3, #1
 8002c32:	480c      	ldr	r0, [pc, #48]	; (8002c64 <BSP_I2C2_ReadReg+0x60>)
 8002c34:	f005 ffa0 	bl	8008b78 <HAL_I2C_Mem_Read>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00c      	beq.n	8002c58 <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8002c3e:	4809      	ldr	r0, [pc, #36]	; (8002c64 <BSP_I2C2_ReadReg+0x60>)
 8002c40:	f006 f9cb 	bl	8008fda <HAL_I2C_GetError>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d103      	bne.n	8002c52 <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002c4a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	e002      	b.n	8002c58 <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002c52:	f06f 0303 	mvn.w	r3, #3
 8002c56:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002c58:	697b      	ldr	r3, [r7, #20]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	200004f0 	.word	0x200004f0

08002c68 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002c6c:	f004 fc5a 	bl	8007524 <HAL_GetTick>
 8002c70:	4603      	mov	r3, r0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a1c      	ldr	r2, [pc, #112]	; (8002cf8 <MX_I2C2_Init+0x80>)
 8002c88:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x307075B1;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a1b      	ldr	r2, [pc, #108]	; (8002cfc <MX_I2C2_Init+0x84>)
 8002c8e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f005 fb70 	bl	80083a0 <HAL_I2C_Init>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002cca:	2100      	movs	r1, #0
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f006 fccb 	bl	8009668 <HAL_I2CEx_ConfigAnalogFilter>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8002cdc:	2100      	movs	r1, #0
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f006 fd0d 	bl	80096fe <HAL_I2CEx_ConfigDigitalFilter>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40005800 	.word	0x40005800
 8002cfc:	307075b1 	.word	0x307075b1

08002d00 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b0ae      	sub	sp, #184	; 0xb8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d08:	f107 0310 	add.w	r3, r7, #16
 8002d0c:	2294      	movs	r2, #148	; 0x94
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f016 ff77 	bl	8019c04 <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	66bb      	str	r3, [r7, #104]	; 0x68
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8002d1e:	f107 0310 	add.w	r3, r7, #16
 8002d22:	4618      	mov	r0, r3
 8002d24:	f008 fec2 	bl	800baac <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d28:	4b23      	ldr	r3, [pc, #140]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2c:	4a22      	ldr	r2, [pc, #136]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d2e:	f043 0302 	orr.w	r3, r3, #2
 8002d32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d34:	4b20      	ldr	r3, [pc, #128]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8002d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d48:	2312      	movs	r3, #18
 8002d4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d54:	2303      	movs	r3, #3
 8002d56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002d60:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d64:	4619      	mov	r1, r3
 8002d66:	4815      	ldr	r0, [pc, #84]	; (8002dbc <I2C2_MspInit+0xbc>)
 8002d68:	f005 f84c 	bl	8007e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8002d6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d74:	2312      	movs	r3, #18
 8002d76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d80:	2303      	movs	r3, #3
 8002d82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8002d86:	2304      	movs	r3, #4
 8002d88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002d8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d90:	4619      	mov	r1, r3
 8002d92:	480a      	ldr	r0, [pc, #40]	; (8002dbc <I2C2_MspInit+0xbc>)
 8002d94:	f005 f836 	bl	8007e04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d98:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9c:	4a06      	ldr	r2, [pc, #24]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002da2:	6593      	str	r3, [r2, #88]	; 0x58
 8002da4:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8002db0:	bf00      	nop
 8002db2:	37b8      	adds	r7, #184	; 0xb8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	48000400 	.word	0x48000400

08002dc0 <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002dc8:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <I2C2_MspDeInit+0x30>)
 8002dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dcc:	4a08      	ldr	r2, [pc, #32]	; (8002df0 <I2C2_MspDeInit+0x30>)
 8002dce:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002dd2:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8002dd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dd8:	4806      	ldr	r0, [pc, #24]	; (8002df4 <I2C2_MspDeInit+0x34>)
 8002dda:	f005 f9a5 	bl	8008128 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 8002dde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002de2:	4804      	ldr	r0, [pc, #16]	; (8002df4 <I2C2_MspDeInit+0x34>)
 8002de4:	f005 f9a0 	bl	8008128 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000
 8002df4:	48000400 	.word	0x48000400

08002df8 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8002e04:	2300      	movs	r3, #0
 8002e06:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8002e08:	78fb      	ldrb	r3, [r7, #3]
 8002e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6858      	ldr	r0, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	8adb      	ldrh	r3, [r3, #22]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	f005 fa8d 	bl	800833c <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6818      	ldr	r0, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	1cf9      	adds	r1, r7, #3
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f00c f921 	bl	800f074 <HAL_SPI_Transmit>
 8002e32:	4603      	mov	r3, r0
 8002e34:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6818      	ldr	r0, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f107 010f 	add.w	r1, r7, #15
 8002e42:	2201      	movs	r2, #1
 8002e44:	f00c fa8b 	bl	800f35e <HAL_SPI_Receive>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6858      	ldr	r0, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	8adb      	ldrh	r3, [r3, #22]
 8002e54:	2201      	movs	r2, #1
 8002e56:	4619      	mov	r1, r3
 8002e58:	f005 fa70 	bl	800833c <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b084      	sub	sp, #16
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
 8002e6e:	460b      	mov	r3, r1
 8002e70:	70fb      	strb	r3, [r7, #3]
 8002e72:	4613      	mov	r3, r2
 8002e74:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 8002e76:	78fb      	ldrb	r3, [r7, #3]
 8002e78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e7c:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8002e7e:	78bb      	ldrb	r3, [r7, #2]
 8002e80:	021b      	lsls	r3, r3, #8
 8002e82:	b21a      	sxth	r2, r3
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	b21b      	sxth	r3, r3
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	b21b      	sxth	r3, r3
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6858      	ldr	r0, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	8adb      	ldrh	r3, [r3, #22]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	f005 fa4e 	bl	800833c <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6818      	ldr	r0, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f107 010a 	add.w	r1, r7, #10
 8002eac:	2202      	movs	r2, #2
 8002eae:	f00c f8e1 	bl	800f074 <HAL_SPI_Transmit>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6858      	ldr	r0, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	8adb      	ldrh	r3, [r3, #22]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	f005 fa3b 	bl	800833c <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 8002ec6:	bf00      	nop
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b088      	sub	sp, #32
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	4611      	mov	r1, r2
 8002eda:	461a      	mov	r2, r3
 8002edc:	460b      	mov	r3, r1
 8002ede:	71fb      	strb	r3, [r7, #7]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 8002ee4:	2380      	movs	r3, #128	; 0x80
 8002ee6:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6858      	ldr	r0, [r3, #4]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8adb      	ldrh	r3, [r3, #22]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	f005 fa22 	bl	800833c <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6818      	ldr	r0, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f107 0117 	add.w	r1, r7, #23
 8002f04:	2201      	movs	r2, #1
 8002f06:	f00c f8b5 	bl	800f074 <HAL_SPI_Transmit>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 8002f0e:	79bb      	ldrb	r3, [r7, #6]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d108      	bne.n	8002f26 <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	79fa      	ldrb	r2, [r7, #7]
 8002f1a:	b292      	uxth	r2, r2
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f00c fd76 	bl	800fa10 <HAL_SPI_Transmit_DMA>
 8002f24:	e012      	b.n	8002f4c <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6818      	ldr	r0, [r3, #0]
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	68b9      	ldr	r1, [r7, #8]
 8002f34:	f00c f89e 	bl	800f074 <HAL_SPI_Transmit>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6858      	ldr	r0, [r3, #4]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8adb      	ldrh	r3, [r3, #22]
 8002f44:	2201      	movs	r2, #1
 8002f46:	4619      	mov	r1, r3
 8002f48:	f005 f9f8 	bl	800833c <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 8002f4c:	3720      	adds	r7, #32
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8002f5e:	78fb      	ldrb	r3, [r7, #3]
 8002f60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	2101      	movs	r1, #1
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7ff ff7b 	bl	8002e66 <write_register>
}
 8002f70:	bf00      	nop
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	2b2c      	cmp	r3, #44	; 0x2c
 8002f88:	d801      	bhi.n	8002f8e <set_OCP+0x16>
    imax = 45;
 8002f8a:	232d      	movs	r3, #45	; 0x2d
 8002f8c:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 8002f8e:	78fb      	ldrb	r3, [r7, #3]
 8002f90:	2bf0      	cmp	r3, #240	; 0xf0
 8002f92:	d901      	bls.n	8002f98 <set_OCP+0x20>
    imax = 240;
 8002f94:	23f0      	movs	r3, #240	; 0xf0
 8002f96:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	2b81      	cmp	r3, #129	; 0x81
 8002f9c:	d809      	bhi.n	8002fb2 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 8002f9e:	78fb      	ldrb	r3, [r7, #3]
 8002fa0:	3b2d      	subs	r3, #45	; 0x2d
 8002fa2:	4a0f      	ldr	r2, [pc, #60]	; (8002fe0 <set_OCP+0x68>)
 8002fa4:	fb82 1203 	smull	r1, r2, r2, r3
 8002fa8:	1052      	asrs	r2, r2, #1
 8002faa:	17db      	asrs	r3, r3, #31
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	73fb      	strb	r3, [r7, #15]
 8002fb0:	e008      	b.n	8002fc4 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	331e      	adds	r3, #30
 8002fb6:	4a0a      	ldr	r2, [pc, #40]	; (8002fe0 <set_OCP+0x68>)
 8002fb8:	fb82 1203 	smull	r1, r2, r2, r3
 8002fbc:	1092      	asrs	r2, r2, #2
 8002fbe:	17db      	asrs	r3, r3, #31
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	f043 0320 	orr.w	r3, r3, #32
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	461a      	mov	r2, r3
 8002fce:	210b      	movs	r1, #11
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff ff48 	bl	8002e66 <write_register>
}
 8002fd6:	bf00      	nop
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	66666667 	.word	0x66666667

08002fe4 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8002fe4:	b5b0      	push	{r4, r5, r7, lr}
 8002fe6:	b088      	sub	sp, #32
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 8002fec:	211d      	movs	r1, #29
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7ff ff02 	bl	8002df8 <read_register>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	091b      	lsrs	r3, r3, #4
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	461c      	mov	r4, r3
 8003000:	4615      	mov	r5, r2
 8003002:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8003006:	211e      	movs	r1, #30
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff fef5 	bl	8002df8 <read_register>
 800300e:	4603      	mov	r3, r0
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8003014:	2304      	movs	r3, #4
 8003016:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	2b0a      	cmp	r3, #10
 800301c:	d908      	bls.n	8003030 <set_low_data_rate_optimization+0x4c>
 800301e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003022:	1fd1      	subs	r1, r2, #7
 8003024:	430b      	orrs	r3, r1
 8003026:	d103      	bne.n	8003030 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8003028:	7ffb      	ldrb	r3, [r7, #31]
 800302a:	f043 0308 	orr.w	r3, r3, #8
 800302e:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8003030:	7ffb      	ldrb	r3, [r7, #31]
 8003032:	461a      	mov	r2, r3
 8003034:	2126      	movs	r1, #38	; 0x26
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7ff ff15 	bl	8002e66 <write_register>
}
 800303c:	bf00      	nop
 800303e:	3720      	adds	r7, #32
 8003040:	46bd      	mov	sp, r7
 8003042:	bdb0      	pop	{r4, r5, r7, pc}

08003044 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 800304c:	2100      	movs	r1, #0
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7ff ff7f 	bl	8002f52 <set_mode>
}
 8003054:	bf00      	nop
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8003064:	2101      	movs	r1, #1
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff ff73 	bl	8002f52 <set_mode>
}
 800306c:	bf00      	nop
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 800307c:	211d      	movs	r1, #29
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff feba 	bl	8002df8 <read_register>
 8003084:	4603      	mov	r3, r0
 8003086:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	f023 0301 	bic.w	r3, r3, #1
 800308e:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	461a      	mov	r2, r3
 8003094:	211d      	movs	r1, #29
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff fee5 	bl	8002e66 <write_register>
}
 800309c:	bf00      	nop
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10e      	bne.n	80030d6 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	2b0f      	cmp	r3, #15
 80030bc:	d901      	bls.n	80030c2 <lora_set_tx_power+0x1e>
      level = 15;
 80030be:	230f      	movs	r3, #15
 80030c0:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 80030c2:	78fb      	ldrb	r3, [r7, #3]
 80030c4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	2109      	movs	r1, #9
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7ff fec9 	bl	8002e66 <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 80030d4:	e02e      	b.n	8003134 <lora_set_tx_power+0x90>
    if (level > 20) {
 80030d6:	78fb      	ldrb	r3, [r7, #3]
 80030d8:	2b14      	cmp	r3, #20
 80030da:	d901      	bls.n	80030e0 <lora_set_tx_power+0x3c>
      level = 20;
 80030dc:	2314      	movs	r3, #20
 80030de:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d801      	bhi.n	80030ea <lora_set_tx_power+0x46>
      level = 2;
 80030e6:	2302      	movs	r3, #2
 80030e8:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 80030ea:	78fb      	ldrb	r3, [r7, #3]
 80030ec:	2b11      	cmp	r3, #17
 80030ee:	d90c      	bls.n	800310a <lora_set_tx_power+0x66>
      level -= 3;
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	3b03      	subs	r3, #3
 80030f4:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 80030f6:	2287      	movs	r2, #135	; 0x87
 80030f8:	214d      	movs	r1, #77	; 0x4d
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7ff feb3 	bl	8002e66 <write_register>
      set_OCP(lora, 140);
 8003100:	218c      	movs	r1, #140	; 0x8c
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7ff ff38 	bl	8002f78 <set_OCP>
 8003108:	e008      	b.n	800311c <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 800310a:	2284      	movs	r2, #132	; 0x84
 800310c:	214d      	movs	r1, #77	; 0x4d
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff fea9 	bl	8002e66 <write_register>
      set_OCP(lora, 97);
 8003114:	2161      	movs	r1, #97	; 0x61
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7ff ff2e 	bl	8002f78 <set_OCP>
    level -= 2;
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	3b02      	subs	r3, #2
 8003120:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003128:	b2db      	uxtb	r3, r3
 800312a:	461a      	mov	r2, r3
 800312c:	2109      	movs	r1, #9
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff fe99 	bl	8002e66 <write_register>
}
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8003148:	e9d7 2300 	ldrd	r2, r3, [r7]
 800314c:	f04f 0000 	mov.w	r0, #0
 8003150:	f04f 0100 	mov.w	r1, #0
 8003154:	04d9      	lsls	r1, r3, #19
 8003156:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800315a:	04d0      	lsls	r0, r2, #19
 800315c:	4a19      	ldr	r2, [pc, #100]	; (80031c4 <lora_set_frequency+0x88>)
 800315e:	f04f 0300 	mov.w	r3, #0
 8003162:	f7fd fd89 	bl	8000c78 <__aeabi_uldivmod>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 800316e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	0c02      	lsrs	r2, r0, #16
 800317c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003180:	0c0b      	lsrs	r3, r1, #16
 8003182:	b2d3      	uxtb	r3, r2
 8003184:	461a      	mov	r2, r3
 8003186:	2106      	movs	r1, #6
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f7ff fe6c 	bl	8002e66 <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 800318e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	f04f 0300 	mov.w	r3, #0
 800319a:	0a02      	lsrs	r2, r0, #8
 800319c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80031a0:	0a0b      	lsrs	r3, r1, #8
 80031a2:	b2d3      	uxtb	r3, r2
 80031a4:	461a      	mov	r2, r3
 80031a6:	2107      	movs	r1, #7
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f7ff fe5c 	bl	8002e66 <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 80031ae:	7c3b      	ldrb	r3, [r7, #16]
 80031b0:	461a      	mov	r2, r3
 80031b2:	2108      	movs	r1, #8
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f7ff fe56 	bl	8002e66 <write_register>
}
 80031ba:	bf00      	nop
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	01e84800 	.word	0x01e84800

080031c8 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	2b05      	cmp	r3, #5
 80031d8:	d802      	bhi.n	80031e0 <lora_set_spreading_factor+0x18>
    sf = 6;
 80031da:	2306      	movs	r3, #6
 80031dc:	70fb      	strb	r3, [r7, #3]
 80031de:	e004      	b.n	80031ea <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	2b0c      	cmp	r3, #12
 80031e4:	d901      	bls.n	80031ea <lora_set_spreading_factor+0x22>
    sf = 12;
 80031e6:	230c      	movs	r3, #12
 80031e8:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	2b06      	cmp	r3, #6
 80031ee:	d10a      	bne.n	8003206 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 80031f0:	22c5      	movs	r2, #197	; 0xc5
 80031f2:	2131      	movs	r1, #49	; 0x31
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff fe36 	bl	8002e66 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 80031fa:	220c      	movs	r2, #12
 80031fc:	2137      	movs	r1, #55	; 0x37
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7ff fe31 	bl	8002e66 <write_register>
 8003204:	e009      	b.n	800321a <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8003206:	22c3      	movs	r2, #195	; 0xc3
 8003208:	2131      	movs	r1, #49	; 0x31
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff fe2b 	bl	8002e66 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8003210:	220a      	movs	r2, #10
 8003212:	2137      	movs	r1, #55	; 0x37
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff fe26 	bl	8002e66 <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 800321a:	211e      	movs	r1, #30
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff fdeb 	bl	8002df8 <read_register>
 8003222:	4603      	mov	r3, r0
 8003224:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 8003226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	b25a      	sxtb	r2, r3
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	b25b      	sxtb	r3, r3
 8003236:	4313      	orrs	r3, r2
 8003238:	b25b      	sxtb	r3, r3
 800323a:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 800323c:	7bfb      	ldrb	r3, [r7, #15]
 800323e:	461a      	mov	r2, r3
 8003240:	211e      	movs	r1, #30
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7ff fe0f 	bl	8002e66 <write_register>

  set_low_data_rate_optimization(lora);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff fecb 	bl	8002fe4 <set_low_data_rate_optimization>
}
 800324e:	bf00      	nop
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	460b      	mov	r3, r1
 8003260:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 8003262:	887b      	ldrh	r3, [r7, #2]
 8003264:	0a1b      	lsrs	r3, r3, #8
 8003266:	b29b      	uxth	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	461a      	mov	r2, r3
 800326c:	2120      	movs	r1, #32
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7ff fdf9 	bl	8002e66 <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 8003274:	887b      	ldrh	r3, [r7, #2]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	f003 030f 	and.w	r3, r3, #15
 800327c:	b2db      	uxtb	r3, r3
 800327e:	461a      	mov	r2, r3
 8003280:	2121      	movs	r1, #33	; 0x21
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff fdef 	bl	8002e66 <write_register>
}
 8003288:	bf00      	nop
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 8003298:	2142      	movs	r1, #66	; 0x42
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff fdac 	bl	8002df8 <read_register>
 80032a0:	4603      	mov	r3, r0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b084      	sub	sp, #16
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 80032b2:	2101      	movs	r1, #1
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff fd9f 	bl	8002df8 <read_register>
 80032ba:	4603      	mov	r3, r0
 80032bc:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 80032be:	7bfb      	ldrb	r3, [r7, #15]
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d101      	bne.n	80032cc <lora_is_transmitting+0x22>
 80032c8:	2305      	movs	r3, #5
 80032ca:	e000      	b.n	80032ce <lora_is_transmitting+0x24>
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	4611      	mov	r1, r2
 80032e2:	461a      	mov	r2, r3
 80032e4:	460b      	mov	r3, r1
 80032e6:	71fb      	strb	r3, [r7, #7]
 80032e8:	4613      	mov	r3, r2
 80032ea:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f7ff ffdc 	bl	80032aa <lora_is_transmitting>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <lora_send_packet_base+0x26>
    return LORA_BUSY;
 80032f8:	2305      	movs	r3, #5
 80032fa:	e02a      	b.n	8003352 <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 80032fc:	2101      	movs	r1, #1
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f7ff fe27 	bl	8002f52 <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f83a 	bl	800337e <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	7d1b      	ldrb	r3, [r3, #20]
 800330e:	461a      	mov	r2, r3
 8003310:	210d      	movs	r1, #13
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f7ff fda7 	bl	8002e66 <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	7d1b      	ldrb	r3, [r3, #20]
 800331c:	461a      	mov	r2, r3
 800331e:	210e      	movs	r1, #14
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f7ff fda0 	bl	8002e66 <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	461a      	mov	r2, r3
 800332a:	2122      	movs	r1, #34	; 0x22
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f7ff fd9a 	bl	8002e66 <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 8003332:	79bb      	ldrb	r3, [r7, #6]
 8003334:	79fa      	ldrb	r2, [r7, #7]
 8003336:	68b9      	ldr	r1, [r7, #8]
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f7ff fdc8 	bl	8002ece <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 800333e:	79bb      	ldrb	r3, [r7, #6]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <lora_send_packet_base+0x72>
    return LORA_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	e004      	b.n	8003352 <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 8003348:	2103      	movs	r1, #3
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f7ff fe01 	bl	8002f52 <set_mode>
  return LORA_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b084      	sub	sp, #16
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	4613      	mov	r3, r2
 8003366:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 8003368:	79fa      	ldrb	r2, [r7, #7]
 800336a:	2302      	movs	r3, #2
 800336c:	68b9      	ldr	r1, [r7, #8]
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f7ff ffb1 	bl	80032d6 <lora_send_packet_base>
 8003374:	4603      	mov	r3, r0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b082      	sub	sp, #8
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 8003386:	2208      	movs	r2, #8
 8003388:	2112      	movs	r1, #18
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7ff fd6b 	bl	8002e66 <write_register>
}
 8003390:	bf00      	nop
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
 80033a4:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	887a      	ldrh	r2, [r7, #2]
 80033b6:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 80033b8:	6a3a      	ldr	r2, [r7, #32]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2201      	movs	r2, #1
 80033c2:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033d6:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f7ff ff59 	bl	8003290 <lora_version>
 80033de:	4603      	mov	r3, r0
 80033e0:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 80033e2:	7dfb      	ldrb	r3, [r7, #23]
 80033e4:	2b12      	cmp	r3, #18
 80033e6:	d001      	beq.n	80033ec <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 80033e8:	2304      	movs	r3, #4
 80033ea:	e031      	b.n	8003450 <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f7ff fe29 	bl	8003044 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f7ff fe26 	bl	8003044 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 80033f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f7ff fe9d 	bl	800313c <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8003402:	2107      	movs	r1, #7
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f7ff fedf 	bl	80031c8 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 800340a:	210a      	movs	r1, #10
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f7ff ff22 	bl	8003256 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f7ff fe2e 	bl	8003074 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8003418:	210c      	movs	r1, #12
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f7ff fcec 	bl	8002df8 <read_register>
 8003420:	4603      	mov	r3, r0
 8003422:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8003424:	7dbb      	ldrb	r3, [r7, #22]
 8003426:	f043 0303 	orr.w	r3, r3, #3
 800342a:	b2db      	uxtb	r3, r3
 800342c:	461a      	mov	r2, r3
 800342e:	210c      	movs	r1, #12
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f7ff fd18 	bl	8002e66 <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8003436:	2204      	movs	r2, #4
 8003438:	2126      	movs	r1, #38	; 0x26
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f7ff fd13 	bl	8002e66 <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8003440:	2102      	movs	r1, #2
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f7ff fe2e 	bl	80030a4 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f7ff fe07 	bl	800305c <lora_mode_standby>

  return LORA_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <add_to_buffer>:
	put_one_char(x + 48);

	return 0;
}

void add_to_buffer(uint8_t* data_buffer, uint8_t* data, int size) {
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]

	for (int i = 0; i < size; i++) {
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	e010      	b.n	800348c <add_to_buffer+0x34>
		sprintf(data_buffer + strlen(data_buffer), "%c", data[i]);
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f7fc fec8 	bl	8000200 <strlen>
 8003470:	4602      	mov	r2, r0
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	1898      	adds	r0, r3, r2
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	4413      	add	r3, r2
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	4907      	ldr	r1, [pc, #28]	; (80034a0 <add_to_buffer+0x48>)
 8003482:	f017 f939 	bl	801a6f8 <siprintf>
	for (int i = 0; i < size; i++) {
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	3301      	adds	r3, #1
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	429a      	cmp	r2, r3
 8003492:	dbea      	blt.n	800346a <add_to_buffer+0x12>
	}

}
 8003494:	bf00      	nop
 8003496:	bf00      	nop
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	0801ccec 	.word	0x0801ccec
 80034a4:	00000000 	.word	0x00000000

080034a8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80034a8:	b5b0      	push	{r4, r5, r7, lr}
 80034aa:	f5ad 5d9e 	sub.w	sp, sp, #5056	; 0x13c0
 80034ae:	b084      	sub	sp, #16
 80034b0:	af02      	add	r7, sp, #8

	/* USER CODE BEGIN 1 */
	// The SD card mount, init, read, and write variables
	FRESULT sd_result_write; /* FatFs function common result code */
	UINT sd_err_byteswritten, sd_err_bytesread; /* File write/read counts */
	uint8_t sd_write_buffer[50] = "Start of operation\n"; /* File write buffer. */
 80034b2:	4b9b      	ldr	r3, [pc, #620]	; (8003720 <main+0x278>)
 80034b4:	f507 5498 	add.w	r4, r7, #4864	; 0x1300
 80034b8:	f104 0404 	add.w	r4, r4, #4
 80034bc:	461d      	mov	r5, r3
 80034be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034c2:	682b      	ldr	r3, [r5, #0]
 80034c4:	6023      	str	r3, [r4, #0]
 80034c6:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 80034ca:	f103 0318 	add.w	r3, r3, #24
 80034ce:	221e      	movs	r2, #30
 80034d0:	2100      	movs	r1, #0
 80034d2:	4618      	mov	r0, r3
 80034d4:	f016 fb96 	bl	8019c04 <memset>

	// Buffer for all data to be stored into in the same way as it has been printed to the PC
	uint8_t data_buffer[LORA_MAX_PACKET_SIZE]; //LORA_MAX_PACKET_SIZE

	uint8_t gps_buffer[1000];
	char *gps_buffer_ptr1 = gps_buffer;
 80034d8:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 80034dc:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 80034e0:	6013      	str	r3, [r2, #0]
	char *gps_buffer_ptr2 = gps_buffer;
 80034e2:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 80034e6:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 80034ea:	f102 0204 	add.w	r2, r2, #4
 80034ee:	6013      	str	r3, [r2, #0]
	uint8_t gps_parsed_buffer[1000];
	int parser_i;
	int parser_sub_i;
	gps_buffer[0] = '\0';
 80034f0:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80034f4:	f103 0308 	add.w	r3, r3, #8
 80034f8:	f6a3 43ec 	subw	r3, r3, #3308	; 0xcec
 80034fc:	2200      	movs	r2, #0
 80034fe:	701a      	strb	r2, [r3, #0]
	gps_parsed_buffer[0] = '\0';
 8003500:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8003504:	2200      	movs	r2, #0
 8003506:	f803 2cd4 	strb.w	r2, [r3, #-212]

	// The pressure sensor BMP390 variables
	int8_t bmp_result;
	uint16_t bmp_settings_select;
	struct bmp3_dev bmp_device;
	struct bmp3_data bmp_data = { 0 };
 800350a:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 800350e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003512:	461a      	mov	r2, r3
 8003514:	2300      	movs	r3, #0
 8003516:	6013      	str	r3, [r2, #0]
 8003518:	6053      	str	r3, [r2, #4]
 800351a:	6093      	str	r3, [r2, #8]
 800351c:	60d3      	str	r3, [r2, #12]
	struct bmp3_settings bmp_settings = { 0 };
 800351e:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8003522:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	605a      	str	r2, [r3, #4]
 800352c:	609a      	str	r2, [r3, #8]
 800352e:	731a      	strb	r2, [r3, #12]
	struct bmp3_status bmp_status = { { 0 } };
 8003530:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8003534:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	605a      	str	r2, [r3, #4]
 800353e:	811a      	strh	r2, [r3, #8]
	uint8_t bmp_temperature_buffer[25] = {0};
 8003540:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8003544:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	3304      	adds	r3, #4
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	605a      	str	r2, [r3, #4]
 8003554:	609a      	str	r2, [r3, #8]
 8003556:	60da      	str	r2, [r3, #12]
 8003558:	611a      	str	r2, [r3, #16]
 800355a:	751a      	strb	r2, [r3, #20]
	uint8_t bmp_pressure_buffer[25] = {0};
 800355c:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8003560:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	3304      	adds	r3, #4
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	605a      	str	r2, [r3, #4]
 8003570:	609a      	str	r2, [r3, #8]
 8003572:	60da      	str	r2, [r3, #12]
 8003574:	611a      	str	r2, [r3, #16]
 8003576:	751a      	strb	r2, [r3, #20]

	//test
	//HAL_StatusTypeDef i2c2status;
	//uint8_t hello[7] = "Hello!\n";
	uint8_t i2c2check_active_address[25] = {0};
 8003578:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 800357c:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	3304      	adds	r3, #4
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	605a      	str	r2, [r3, #4]
 800358c:	609a      	str	r2, [r3, #8]
 800358e:	60da      	str	r2, [r3, #12]
 8003590:	611a      	str	r2, [r3, #16]
 8003592:	751a      	strb	r2, [r3, #20]
	uint8_t i2c2check_space[] = " - ";
 8003594:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8003598:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800359c:	4a61      	ldr	r2, [pc, #388]	; (8003724 <main+0x27c>)
 800359e:	601a      	str	r2, [r3, #0]

	// The gyroscope LSM6DSO variables
	LSM6DSO_Object_t gyro_device;
	LSM6DSO_Axes_t gyro_acceleration_object;
	uint8_t gyro_acceleration_buffer[40] = {0};
 80035a0:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 80035a4:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	3304      	adds	r3, #4
 80035ae:	2224      	movs	r2, #36	; 0x24
 80035b0:	2100      	movs	r1, #0
 80035b2:	4618      	mov	r0, r3
 80035b4:	f016 fb26 	bl	8019c04 <memset>
	LSM6DSO_Axes_t gyro_angularvel_object;
	uint8_t gyro_angularvel_buffer[40] = {0};
 80035b8:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 80035bc:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	3304      	adds	r3, #4
 80035c6:	2224      	movs	r2, #36	; 0x24
 80035c8:	2100      	movs	r1, #0
 80035ca:	4618      	mov	r0, r3
 80035cc:	f016 fb1a 	bl	8019c04 <memset>

	//LoRa
	lora_sx1276 lora;

	//MIRA
	uint8_t mira_target_reg = 0x00;
 80035d0:	2300      	movs	r3, #0
 80035d2:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 80035d6:	f102 020a 	add.w	r2, r2, #10
 80035da:	7013      	strb	r3, [r2, #0]
	uint8_t mira_Tx_payload[4] = {0x00,0x00,0x00,0x00};
 80035dc:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 80035e0:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
	//	int message;
	//	int message_length;

	// Time progress tracking using tick
	double system_time_counter;
	system_time_counter = 0;
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 80035f4:	f101 0110 	add.w	r1, r1, #16
 80035f8:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t system_time_buffer[25] = {0};
 80035fc:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8003600:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	3304      	adds	r3, #4
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	605a      	str	r2, [r3, #4]
 8003610:	609a      	str	r2, [r3, #8]
 8003612:	60da      	str	r2, [r3, #12]
 8003614:	611a      	str	r2, [r3, #16]
 8003616:	751a      	strb	r2, [r3, #20]
	static uint8_t USB_TIMERS = 0x07;

	static uint8_t USB_PING = 0x08;
	static uint8_t USB_FLIGHTMODE = 0x09;

	uint8_t lora_test_packet[10] = {0,1,2,3,4,5,6,7,8,9};
 8003618:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 800361c:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8003620:	4a41      	ldr	r2, [pc, #260]	; (8003728 <main+0x280>)
 8003622:	ca07      	ldmia	r2, {r0, r1, r2}
 8003624:	c303      	stmia	r3!, {r0, r1}
 8003626:	801a      	strh	r2, [r3, #0]

	int PRINT_TOGGLE = 0;
 8003628:	2300      	movs	r3, #0
 800362a:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 800362e:	f102 0204 	add.w	r2, r2, #4
 8003632:	6013      	str	r3, [r2, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003634:	f003 ff0e 	bl	8007454 <HAL_Init>


	/* USER CODE BEGIN Init */

	// Initialize HAL for UART interrupts
	HAL_MspInit();
 8003638:	f001 feb0 	bl	800539c <HAL_MspInit>
	// Initialize I2C2 with custom driver
	BSP_I2C2_Init();
 800363c:	f7ff fa4a 	bl	8002ad4 <BSP_I2C2_Init>


	//Initialize Msp for both UARTs
	HAL_UART_MspInit(&huart1);
 8003640:	483a      	ldr	r0, [pc, #232]	; (800372c <main+0x284>)
 8003642:	f002 f83d 	bl	80056c0 <HAL_UART_MspInit>
	HAL_UART_MspInit(&huart2);
 8003646:	483a      	ldr	r0, [pc, #232]	; (8003730 <main+0x288>)
 8003648:	f002 f83a 	bl	80056c0 <HAL_UART_MspInit>

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800364c:	f000 ffa0 	bl	8004590 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */
	// Initialize SD card
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003650:	f001 f9f2 	bl	8004a38 <MX_GPIO_Init>
	MX_DMA_Init();
 8003654:	f001 f9cc 	bl	80049f0 <MX_DMA_Init>
	MX_I2C1_Init();
 8003658:	f001 f818 	bl	800468c <MX_I2C1_Init>
	MX_SDMMC1_SD_Init();
 800365c:	f001 f856 	bl	800470c <MX_SDMMC1_SD_Init>
	//BSP_SD_Init();
	MX_SPI1_Init();
 8003660:	f001 f876 	bl	8004750 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8003664:	f001 f928 	bl	80048b8 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8003668:	f001 f972 	bl	8004950 <MX_USART2_UART_Init>
	MX_FATFS_Init();
 800366c:	f011 f920 	bl	80148b0 <MX_FATFS_Init>
	MX_USB_DEVICE_Init();
 8003670:	f015 fc8a 	bl	8018f88 <MX_USB_DEVICE_Init>
	MX_TIM17_Init();
 8003674:	f001 f8aa 	bl	80047cc <MX_TIM17_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8003678:	f000 ffdc 	bl	8004634 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */

	// Power on LED
	HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 800367c:	2108      	movs	r1, #8
 800367e:	482d      	ldr	r0, [pc, #180]	; (8003734 <main+0x28c>)
 8003680:	f004 fe74 	bl	800836c <HAL_GPIO_TogglePin>

	/// MIRA Init /////////////////////////////////////////////////////////////////////////////////


	// Enable MIRA power from OBC
	HAL_GPIO_WritePin(MIRA_EN_PWR_GPIO_Port, MIRA_EN_PWR_Pin, GPIO_PIN_SET);
 8003684:	2201      	movs	r2, #1
 8003686:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800368a:	482b      	ldr	r0, [pc, #172]	; (8003738 <main+0x290>)
 800368c:	f004 fe56 	bl	800833c <HAL_GPIO_WritePin>
	// Enable Over Current Protection at U4
	HAL_GPIO_WritePin(OCPEN_GPIO_Port, OCPEN_Pin, GPIO_PIN_SET);
 8003690:	2201      	movs	r2, #1
 8003692:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003696:	4828      	ldr	r0, [pc, #160]	; (8003738 <main+0x290>)
 8003698:	f004 fe50 	bl	800833c <HAL_GPIO_WritePin>

	// disable channel 1 for MIRA communication
	HAL_GPIO_WritePin(RX_EN_1_GPIO_Port, RX_EN_1_Pin, GPIO_PIN_SET);
 800369c:	2201      	movs	r2, #1
 800369e:	2110      	movs	r1, #16
 80036a0:	4825      	ldr	r0, [pc, #148]	; (8003738 <main+0x290>)
 80036a2:	f004 fe4b 	bl	800833c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TX_EN_1_GPIO_Port, TX_EN_1_Pin, GPIO_PIN_RESET);
 80036a6:	2200      	movs	r2, #0
 80036a8:	2120      	movs	r1, #32
 80036aa:	4823      	ldr	r0, [pc, #140]	; (8003738 <main+0x290>)
 80036ac:	f004 fe46 	bl	800833c <HAL_GPIO_WritePin>

	// enable channel 2
	HAL_GPIO_WritePin(RX_EN_2_GPIO_Port, RX_EN_2_Pin, GPIO_PIN_SET);
 80036b0:	2201      	movs	r2, #1
 80036b2:	2104      	movs	r1, #4
 80036b4:	4820      	ldr	r0, [pc, #128]	; (8003738 <main+0x290>)
 80036b6:	f004 fe41 	bl	800833c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TX_EN_2_GPIO_Port, TX_EN_2_Pin, GPIO_PIN_SET);
 80036ba:	2201      	movs	r2, #1
 80036bc:	2108      	movs	r1, #8
 80036be:	481e      	ldr	r0, [pc, #120]	; (8003738 <main+0x290>)
 80036c0:	f004 fe3c 	bl	800833c <HAL_GPIO_WritePin>

	// Waiting for power distribution in all systems for 10 seconds
	HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 80036c4:	2120      	movs	r1, #32
 80036c6:	481b      	ldr	r0, [pc, #108]	; (8003734 <main+0x28c>)
 80036c8:	f004 fe50 	bl	800836c <HAL_GPIO_TogglePin>
	HAL_Delay(2000);
 80036cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80036d0:	f003 ff34 	bl	800753c <HAL_Delay>
	HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 80036d4:	2120      	movs	r1, #32
 80036d6:	4817      	ldr	r0, [pc, #92]	; (8003734 <main+0x28c>)
 80036d8:	f004 fe48 	bl	800836c <HAL_GPIO_TogglePin>

	//status = mira_science_data(&huart1, mira_science_Rx_buffer, mira_response_Rx_buffer, 5000);

	// WAIT FOR USB CONNECTION
	// Comment this out once build finished
	if (PRINT_TOGGLE == 1) {
 80036dc:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80036e0:	f103 0304 	add.w	r3, r3, #4
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d107      	bne.n	80036fa <main+0x252>
		while (CDC_Transmit_FS ("START\n", 6) == USBD_BUSY); }
 80036ea:	bf00      	nop
 80036ec:	2106      	movs	r1, #6
 80036ee:	4813      	ldr	r0, [pc, #76]	; (800373c <main+0x294>)
 80036f0:	f015 fd18 	bl	8019124 <CDC_Transmit_FS>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d0f8      	beq.n	80036ec <main+0x244>

	// Run test sequence for MIRA
	status = mira_test_sequence(&huart1, mira_science_Rx_buffer, mira_response_Rx_buffer, 5000);
 80036fa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80036fe:	3a1c      	subs	r2, #28
 8003700:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003704:	3910      	subs	r1, #16
 8003706:	f241 3388 	movw	r3, #5000	; 0x1388
 800370a:	4808      	ldr	r0, [pc, #32]	; (800372c <main+0x284>)
 800370c:	f001 fc1c 	bl	8004f48 <mira_test_sequence>
 8003710:	4603      	mov	r3, r0
 8003712:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 8003716:	f102 021b 	add.w	r2, r2, #27
 800371a:	7013      	strb	r3, [r2, #0]

	while(status != HAL_OK){
 800371c:	e030      	b.n	8003780 <main+0x2d8>
 800371e:	bf00      	nop
 8003720:	0801ce4c 	.word	0x0801ce4c
 8003724:	00202d20 	.word	0x00202d20
 8003728:	0801ce80 	.word	0x0801ce80
 800372c:	200006cc 	.word	0x200006cc
 8003730:	20000760 	.word	0x20000760
 8003734:	48000c00 	.word	0x48000c00
 8003738:	48001000 	.word	0x48001000
 800373c:	0801ccf0 	.word	0x0801ccf0

		HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8003740:	2140      	movs	r1, #64	; 0x40
 8003742:	4885      	ldr	r0, [pc, #532]	; (8003958 <main+0x4b0>)
 8003744:	f004 fe12 	bl	800836c <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 8003748:	f44f 7048 	mov.w	r0, #800	; 0x320
 800374c:	f003 fef6 	bl	800753c <HAL_Delay>
		HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8003750:	2140      	movs	r1, #64	; 0x40
 8003752:	4881      	ldr	r0, [pc, #516]	; (8003958 <main+0x4b0>)
 8003754:	f004 fe0a 	bl	800836c <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8003758:	20c8      	movs	r0, #200	; 0xc8
 800375a:	f003 feef 	bl	800753c <HAL_Delay>
		status = mira_test_sequence(&huart1, mira_science_Rx_buffer, mira_response_Rx_buffer, 5000);
 800375e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003762:	3a1c      	subs	r2, #28
 8003764:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003768:	3910      	subs	r1, #16
 800376a:	f241 3388 	movw	r3, #5000	; 0x1388
 800376e:	487b      	ldr	r0, [pc, #492]	; (800395c <main+0x4b4>)
 8003770:	f001 fbea 	bl	8004f48 <mira_test_sequence>
 8003774:	4603      	mov	r3, r0
 8003776:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 800377a:	f102 021b 	add.w	r2, r2, #27
 800377e:	7013      	strb	r3, [r2, #0]
	while(status != HAL_OK){
 8003780:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8003784:	f103 031b 	add.w	r3, r3, #27
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1d8      	bne.n	8003740 <main+0x298>

	}

	HAL_Delay(1000);
 800378e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003792:	f003 fed3 	bl	800753c <HAL_Delay>
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003796:	2110      	movs	r1, #16
 8003798:	486f      	ldr	r0, [pc, #444]	; (8003958 <main+0x4b0>)
 800379a:	f004 fde7 	bl	800836c <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 800379e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037a2:	f003 fecb 	bl	800753c <HAL_Delay>
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80037a6:	2110      	movs	r1, #16
 80037a8:	486b      	ldr	r0, [pc, #428]	; (8003958 <main+0x4b0>)
 80037aa:	f004 fddf 	bl	800836c <HAL_GPIO_TogglePin>


	/// LoRa Init /////////////////////////////////////////////////////////////////////////////////
	uint8_t lora_res = lora_init(&lora, &hspi1, LORA_NSS_GPIO_Port, LORA_NSS_Pin, LORA_BASE_FREQUENCY_435);
 80037ae:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 80037b2:	3804      	subs	r0, #4
 80037b4:	a366      	add	r3, pc, #408	; (adr r3, 8003950 <main+0x4a8>)
 80037b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ba:	e9cd 2300 	strd	r2, r3, [sp]
 80037be:	2320      	movs	r3, #32
 80037c0:	4a67      	ldr	r2, [pc, #412]	; (8003960 <main+0x4b8>)
 80037c2:	4968      	ldr	r1, [pc, #416]	; (8003964 <main+0x4bc>)
 80037c4:	f7ff fde8 	bl	8003398 <lora_init>
 80037c8:	4603      	mov	r3, r0
 80037ca:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 80037ce:	f102 0203 	add.w	r2, r2, #3
 80037d2:	7013      	strb	r3, [r2, #0]
	// Comment this out once build finished
	if (lora_res != LORA_OK) {
 80037d4:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80037d8:	f103 0303 	add.w	r3, r3, #3
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00e      	beq.n	8003800 <main+0x358>
		// Initialization failed
		if (PRINT_TOGGLE == 1) {
 80037e2:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80037e6:	f103 0304 	add.w	r3, r3, #4
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d107      	bne.n	8003800 <main+0x358>
			while (CDC_Transmit_FS ("LORA INIT NOT OK!\n", 18) == USBD_BUSY);}
 80037f0:	bf00      	nop
 80037f2:	2112      	movs	r1, #18
 80037f4:	485c      	ldr	r0, [pc, #368]	; (8003968 <main+0x4c0>)
 80037f6:	f015 fc95 	bl	8019124 <CDC_Transmit_FS>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d0f8      	beq.n	80037f2 <main+0x34a>
	}
	if (lora_res == LORA_OK) {
 8003800:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8003804:	f103 0303 	add.w	r3, r3, #3
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10e      	bne.n	800382c <main+0x384>
		// All good
		if (PRINT_TOGGLE == 1) {
 800380e:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8003812:	f103 0304 	add.w	r3, r3, #4
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d107      	bne.n	800382c <main+0x384>
			while (CDC_Transmit_FS ("LORA OK!\n", 9) == USBD_BUSY);}
 800381c:	bf00      	nop
 800381e:	2109      	movs	r1, #9
 8003820:	4852      	ldr	r0, [pc, #328]	; (800396c <main+0x4c4>)
 8003822:	f015 fc7f 	bl	8019124 <CDC_Transmit_FS>
 8003826:	4603      	mov	r3, r0
 8003828:	2b01      	cmp	r3, #1
 800382a:	d0f8      	beq.n	800381e <main+0x376>
	}
	lora_res = lora_send_packet(&lora, (uint8_t *)"test", 4);
 800382c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003830:	3b04      	subs	r3, #4
 8003832:	2204      	movs	r2, #4
 8003834:	494e      	ldr	r1, [pc, #312]	; (8003970 <main+0x4c8>)
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff fd8f 	bl	800335a <lora_send_packet>
 800383c:	4603      	mov	r3, r0
 800383e:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 8003842:	f102 0203 	add.w	r2, r2, #3
 8003846:	7013      	strb	r3, [r2, #0]
	if (lora_res != LORA_OK) {
 8003848:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 800384c:	f103 0303 	add.w	r3, r3, #3
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00e      	beq.n	8003874 <main+0x3cc>
		// Send failed
		if (PRINT_TOGGLE == 1) {
 8003856:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 800385a:	f103 0304 	add.w	r3, r3, #4
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d107      	bne.n	8003874 <main+0x3cc>
			while (CDC_Transmit_FS ("LORA SEND NOT OK!\n", 18) == USBD_BUSY);}
 8003864:	bf00      	nop
 8003866:	2112      	movs	r1, #18
 8003868:	4842      	ldr	r0, [pc, #264]	; (8003974 <main+0x4cc>)
 800386a:	f015 fc5b 	bl	8019124 <CDC_Transmit_FS>
 800386e:	4603      	mov	r3, r0
 8003870:	2b01      	cmp	r3, #1
 8003872:	d0f8      	beq.n	8003866 <main+0x3be>
	}

	HAL_Delay(1000);
 8003874:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003878:	f003 fe60 	bl	800753c <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800387c:	2110      	movs	r1, #16
 800387e:	4836      	ldr	r0, [pc, #216]	; (8003958 <main+0x4b0>)
 8003880:	f004 fd74 	bl	800836c <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8003884:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003888:	f003 fe58 	bl	800753c <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800388c:	2110      	movs	r1, #16
 800388e:	4832      	ldr	r0, [pc, #200]	; (8003958 <main+0x4b0>)
 8003890:	f004 fd6c 	bl	800836c <HAL_GPIO_TogglePin>


	/// Gyro Init /////////////////////////////////////////////////////////////////////////////////

	// Set gyro io functions and values
	gyro_io.Init = BSP_I2C2_Init;
 8003894:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8003898:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800389c:	4a36      	ldr	r2, [pc, #216]	; (8003978 <main+0x4d0>)
 800389e:	601a      	str	r2, [r3, #0]
	gyro_io.DeInit = BSP_I2C2_DeInit;
 80038a0:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 80038a4:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80038a8:	4a34      	ldr	r2, [pc, #208]	; (800397c <main+0x4d4>)
 80038aa:	605a      	str	r2, [r3, #4]
	gyro_io.BusType = 0;
 80038ac:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 80038b0:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80038b4:	2200      	movs	r2, #0
 80038b6:	609a      	str	r2, [r3, #8]
	gyro_io.Address = LSM6DSO_I2C_ADD_L;
 80038b8:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 80038bc:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80038c0:	22d5      	movs	r2, #213	; 0xd5
 80038c2:	731a      	strb	r2, [r3, #12]
	gyro_io.WriteReg = BSP_I2C2_WriteReg;
 80038c4:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 80038c8:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80038cc:	4a2c      	ldr	r2, [pc, #176]	; (8003980 <main+0x4d8>)
 80038ce:	611a      	str	r2, [r3, #16]
	gyro_io.ReadReg = BSP_I2C2_ReadReg;
 80038d0:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 80038d4:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80038d8:	4a2a      	ldr	r2, [pc, #168]	; (8003984 <main+0x4dc>)
 80038da:	615a      	str	r2, [r3, #20]
	gyro_io.GetTick = BSP_GetTick;
 80038dc:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 80038e0:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80038e4:	4a28      	ldr	r2, [pc, #160]	; (8003988 <main+0x4e0>)
 80038e6:	619a      	str	r2, [r3, #24]
	gyro_io.Delay = HAL_Delay;
 80038e8:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 80038ec:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80038f0:	4a26      	ldr	r2, [pc, #152]	; (800398c <main+0x4e4>)
 80038f2:	61da      	str	r2, [r3, #28]

	// Initialize gyro
	LSM6DSO_RegisterBusIO(&gyro_device, &gyro_io);
 80038f4:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80038f8:	3a0c      	subs	r2, #12
 80038fa:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80038fe:	3b04      	subs	r3, #4
 8003900:	4611      	mov	r1, r2
 8003902:	4618      	mov	r0, r3
 8003904:	f002 f8fe 	bl	8005b04 <LSM6DSO_RegisterBusIO>
	gyro_result_init = LSM6DSO_Init(&gyro_device);
 8003908:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800390c:	3b04      	subs	r3, #4
 800390e:	4618      	mov	r0, r3
 8003910:	f002 f962 	bl	8005bd8 <LSM6DSO_Init>
 8003914:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003918:	f103 031c 	add.w	r3, r3, #28
 800391c:	6018      	str	r0, [r3, #0]

	// Check and print gyro device status
	// Comment this out once build finished
	if (PRINT_TOGGLE == 1) {
 800391e:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8003922:	f103 0304 	add.w	r3, r3, #4
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d13b      	bne.n	80039a4 <main+0x4fc>
		if (gyro_result_init == 0) {
 800392c:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003930:	f103 031c 	add.w	r3, r3, #28
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d12c      	bne.n	8003994 <main+0x4ec>
			while (CDC_Transmit_FS ("GYRO OK!\n", 9) == USBD_BUSY);}
 800393a:	bf00      	nop
 800393c:	2109      	movs	r1, #9
 800393e:	4814      	ldr	r0, [pc, #80]	; (8003990 <main+0x4e8>)
 8003940:	f015 fbf0 	bl	8019124 <CDC_Transmit_FS>
 8003944:	4603      	mov	r3, r0
 8003946:	2b01      	cmp	r3, #1
 8003948:	d0f8      	beq.n	800393c <main+0x494>
 800394a:	e02b      	b.n	80039a4 <main+0x4fc>
 800394c:	f3af 8000 	nop.w
 8003950:	19ed92c0 	.word	0x19ed92c0
 8003954:	00000000 	.word	0x00000000
 8003958:	48000c00 	.word	0x48000c00
 800395c:	200006cc 	.word	0x200006cc
 8003960:	48000800 	.word	0x48000800
 8003964:	2000061c 	.word	0x2000061c
 8003968:	0801ccf8 	.word	0x0801ccf8
 800396c:	0801cd0c 	.word	0x0801cd0c
 8003970:	0801cd18 	.word	0x0801cd18
 8003974:	0801cd20 	.word	0x0801cd20
 8003978:	08002ad5 	.word	0x08002ad5
 800397c:	08002b51 	.word	0x08002b51
 8003980:	08002ba1 	.word	0x08002ba1
 8003984:	08002c05 	.word	0x08002c05
 8003988:	08002c69 	.word	0x08002c69
 800398c:	0800753d 	.word	0x0800753d
 8003990:	0801cd34 	.word	0x0801cd34
		else {
			while (CDC_Transmit_FS ("GYRO NOT OK!\n", 13) == USBD_BUSY);}
 8003994:	bf00      	nop
 8003996:	210d      	movs	r1, #13
 8003998:	48d5      	ldr	r0, [pc, #852]	; (8003cf0 <main+0x848>)
 800399a:	f015 fbc3 	bl	8019124 <CDC_Transmit_FS>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d0f8      	beq.n	8003996 <main+0x4ee>
	}


	// Enabling translational and angular acceleration measurements
	LSM6DSO_ACC_Enable(&gyro_device);
 80039a4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80039a8:	3b04      	subs	r3, #4
 80039aa:	4618      	mov	r0, r3
 80039ac:	f002 f989 	bl	8005cc2 <LSM6DSO_ACC_Enable>
	LSM6DSO_GYRO_Enable(&gyro_device);
 80039b0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80039b4:	3b04      	subs	r3, #4
 80039b6:	4618      	mov	r0, r3
 80039b8:	f002 fbf5 	bl	80061a6 <LSM6DSO_GYRO_Enable>
	LSM6DSO_ACC_SetOutputDataRate(&gyro_device, 104.0f);
 80039bc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80039c0:	3b04      	subs	r3, #4
 80039c2:	ed9f 0acc 	vldr	s0, [pc, #816]	; 8003cf4 <main+0x84c>
 80039c6:	4618      	mov	r0, r3
 80039c8:	f002 f9e6 	bl	8005d98 <LSM6DSO_ACC_SetOutputDataRate>
	LSM6DSO_GYRO_SetOutputDataRate(&gyro_device, 104.0f);
 80039cc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80039d0:	3b04      	subs	r3, #4
 80039d2:	ed9f 0ac8 	vldr	s0, [pc, #800]	; 8003cf4 <main+0x84c>
 80039d6:	4618      	mov	r0, r3
 80039d8:	f002 fc8a 	bl	80062f0 <LSM6DSO_GYRO_SetOutputDataRate>
	//LSM6DSO_FIFO_Set_Mode(&gyro_device, (uint8_t)3);

	HAL_Delay(1000);
 80039dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039e0:	f003 fdac 	bl	800753c <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80039e4:	2110      	movs	r1, #16
 80039e6:	48c4      	ldr	r0, [pc, #784]	; (8003cf8 <main+0x850>)
 80039e8:	f004 fcc0 	bl	800836c <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80039ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039f0:	f003 fda4 	bl	800753c <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80039f4:	2110      	movs	r1, #16
 80039f6:	48c0      	ldr	r0, [pc, #768]	; (8003cf8 <main+0x850>)
 80039f8:	f004 fcb8 	bl	800836c <HAL_GPIO_TogglePin>
	/// BMP Init /////////////////////////////////////////////////////////////////////////////////
	/* Interface reference is given as a parameter
	 *         For I2C : BMP3_I2C_INTF
	 *         For SPI : BMP3_SPI_INTF
	 */
	bmp_result = bmp3_interface_init(&bmp_device, BMP3_I2C_INTF);
 80039fc:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003a00:	3b08      	subs	r3, #8
 8003a02:	2101      	movs	r1, #1
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fe ffbb 	bl	8002980 <bmp3_interface_init>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003a10:	f102 021b 	add.w	r2, r2, #27
 8003a14:	7013      	strb	r3, [r2, #0]
	bmp3_check_rslt("bmp3_interface_init", bmp_result);
 8003a16:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003a1a:	f103 031b 	add.w	r3, r3, #27
 8003a1e:	f993 3000 	ldrsb.w	r3, [r3]
 8003a22:	4619      	mov	r1, r3
 8003a24:	48b5      	ldr	r0, [pc, #724]	; (8003cfc <main+0x854>)
 8003a26:	f7fe ff4b 	bl	80028c0 <bmp3_check_rslt>

	bmp_result = bmp3_init(&bmp_device);
 8003a2a:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003a2e:	3b08      	subs	r3, #8
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fd faa3 	bl	8000f7c <bmp3_init>
 8003a36:	4603      	mov	r3, r0
 8003a38:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003a3c:	f102 021b 	add.w	r2, r2, #27
 8003a40:	7013      	strb	r3, [r2, #0]
	bmp3_check_rslt("bmp3_init", bmp_result);
 8003a42:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003a46:	f103 031b 	add.w	r3, r3, #27
 8003a4a:	f993 3000 	ldrsb.w	r3, [r3]
 8003a4e:	4619      	mov	r1, r3
 8003a50:	48ab      	ldr	r0, [pc, #684]	; (8003d00 <main+0x858>)
 8003a52:	f7fe ff35 	bl	80028c0 <bmp3_check_rslt>


	bmp_settings.int_settings.drdy_en = BMP3_DISABLE;
 8003a56:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8003a5a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003a5e:	2200      	movs	r2, #0
 8003a60:	729a      	strb	r2, [r3, #10]
	bmp_settings.int_settings.latch = BMP3_ENABLE;
 8003a62:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8003a66:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	725a      	strb	r2, [r3, #9]
	bmp_settings.press_en = BMP3_ENABLE;
 8003a6e:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8003a72:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003a76:	2201      	movs	r2, #1
 8003a78:	705a      	strb	r2, [r3, #1]
	bmp_settings.temp_en = BMP3_ENABLE;
 8003a7a:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8003a7e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003a82:	2201      	movs	r2, #1
 8003a84:	709a      	strb	r2, [r3, #2]

	bmp_settings.odr_filter.press_os = BMP3_OVERSAMPLING_4X;
 8003a86:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8003a8a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003a8e:	2202      	movs	r2, #2
 8003a90:	70da      	strb	r2, [r3, #3]
	bmp_settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
 8003a92:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8003a96:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	711a      	strb	r2, [r3, #4]
	bmp_settings.odr_filter.odr = BMP3_ODR_100_HZ;
 8003a9e:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8003aa2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	719a      	strb	r2, [r3, #6]

	bmp_settings_select = BMP3_SEL_PRESS_EN | BMP3_SEL_TEMP_EN | BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR | BMP3_SEL_DRDY_EN;
 8003aaa:	23be      	movs	r3, #190	; 0xbe
 8003aac:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003ab0:	f102 0218 	add.w	r2, r2, #24
 8003ab4:	8013      	strh	r3, [r2, #0]

	bmp_result = bmp3_set_sensor_settings(bmp_settings_select, &bmp_settings, &bmp_device);
 8003ab6:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003aba:	f103 0318 	add.w	r3, r3, #24
 8003abe:	8818      	ldrh	r0, [r3, #0]
 8003ac0:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8003ac4:	3a08      	subs	r2, #8
 8003ac6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003aca:	3b08      	subs	r3, #8
 8003acc:	4619      	mov	r1, r3
 8003ace:	f7fd fbbd 	bl	800124c <bmp3_set_sensor_settings>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003ad8:	f102 021b 	add.w	r2, r2, #27
 8003adc:	7013      	strb	r3, [r2, #0]
	bmp3_check_rslt("bmp3_set_sensor_settings", bmp_result);
 8003ade:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003ae2:	f103 031b 	add.w	r3, r3, #27
 8003ae6:	f993 3000 	ldrsb.w	r3, [r3]
 8003aea:	4619      	mov	r1, r3
 8003aec:	4885      	ldr	r0, [pc, #532]	; (8003d04 <main+0x85c>)
 8003aee:	f7fe fee7 	bl	80028c0 <bmp3_check_rslt>

	// Comment this out once build finished
	if (bmp_result == BMP3_OK) {
 8003af2:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003af6:	f103 031b 	add.w	r3, r3, #27
 8003afa:	f993 3000 	ldrsb.w	r3, [r3]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10e      	bne.n	8003b20 <main+0x678>
		if (PRINT_TOGGLE == 1) {
 8003b02:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8003b06:	f103 0304 	add.w	r3, r3, #4
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d107      	bne.n	8003b20 <main+0x678>
			while (CDC_Transmit_FS ("BMP OK!\n", 8) == USBD_BUSY);}
 8003b10:	bf00      	nop
 8003b12:	2108      	movs	r1, #8
 8003b14:	487c      	ldr	r0, [pc, #496]	; (8003d08 <main+0x860>)
 8003b16:	f015 fb05 	bl	8019124 <CDC_Transmit_FS>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d0f8      	beq.n	8003b12 <main+0x66a>
	bmp_result = bmp3_set_op_mode(&bmp_settings, &bmp_device);
	bmp3_check_rslt("bmp3_set_op_mode", bmp_result);*/

	//volatile unsigned tmp;

	HAL_Delay(1000);
 8003b20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b24:	f003 fd0a 	bl	800753c <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003b28:	2110      	movs	r1, #16
 8003b2a:	4873      	ldr	r0, [pc, #460]	; (8003cf8 <main+0x850>)
 8003b2c:	f004 fc1e 	bl	800836c <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8003b30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b34:	f003 fd02 	bl	800753c <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003b38:	2110      	movs	r1, #16
 8003b3a:	486f      	ldr	r0, [pc, #444]	; (8003cf8 <main+0x850>)
 8003b3c:	f004 fc16 	bl	800836c <HAL_GPIO_TogglePin>

	/// GPS Init /////////////////////////////////////////////////////////////////////////////////

	// Setting the buffer for UART2 data reading
	gps_rxBuffer = gps_rxBuffer1;
 8003b40:	4b72      	ldr	r3, [pc, #456]	; (8003d0c <main+0x864>)
 8003b42:	4a73      	ldr	r2, [pc, #460]	; (8003d10 <main+0x868>)
 8003b44:	601a      	str	r2, [r3, #0]
	ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_UE);
 8003b46:	4b73      	ldr	r3, [pc, #460]	; (8003d14 <main+0x86c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8003b4e:	f102 0208 	add.w	r2, r2, #8
 8003b52:	6013      	str	r3, [r2, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b54:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8003b58:	f103 0308 	add.w	r3, r3, #8
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	e853 3f00 	ldrex	r3, [r3]
 8003b62:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8003b66:	f102 0204 	add.w	r2, r2, #4
 8003b6a:	6013      	str	r3, [r2, #0]
   return(result);
 8003b6c:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8003b70:	f103 0304 	add.w	r3, r3, #4
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f043 0301 	orr.w	r3, r3, #1
 8003b7a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003b7e:	f102 0214 	add.w	r2, r2, #20
 8003b82:	6013      	str	r3, [r2, #0]
 8003b84:	4b63      	ldr	r3, [pc, #396]	; (8003d14 <main+0x86c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003b8e:	f103 0314 	add.w	r3, r3, #20
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f507 519b 	add.w	r1, r7, #4960	; 0x1360
 8003b98:	f101 0114 	add.w	r1, r1, #20
 8003b9c:	600b      	str	r3, [r1, #0]
 8003b9e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8003ba2:	f103 0310 	add.w	r3, r3, #16
 8003ba6:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba8:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8003bac:	f103 0310 	add.w	r3, r3, #16
 8003bb0:	6819      	ldr	r1, [r3, #0]
 8003bb2:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8003bb6:	f103 0314 	add.w	r3, r3, #20
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	e841 2300 	strex	r3, r2, [r1]
 8003bc0:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8003bc4:	f102 020c 	add.w	r2, r2, #12
 8003bc8:	6013      	str	r3, [r2, #0]
   return(result);
 8003bca:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8003bce:	f103 030c 	add.w	r3, r3, #12
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1b6      	bne.n	8003b46 <main+0x69e>
	ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_RE);
 8003bd8:	4b4e      	ldr	r3, [pc, #312]	; (8003d14 <main+0x86c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8003be0:	f102 0214 	add.w	r2, r2, #20
 8003be4:	6013      	str	r3, [r2, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8003bea:	f103 0314 	add.w	r3, r3, #20
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	e853 3f00 	ldrex	r3, [r3]
 8003bf4:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8003bf8:	f102 0210 	add.w	r2, r2, #16
 8003bfc:	6013      	str	r3, [r2, #0]
   return(result);
 8003bfe:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8003c02:	f103 0310 	add.w	r3, r3, #16
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f043 0304 	orr.w	r3, r3, #4
 8003c0c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003c10:	f102 0210 	add.w	r2, r2, #16
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	4b3f      	ldr	r3, [pc, #252]	; (8003d14 <main+0x86c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003c20:	f103 0310 	add.w	r3, r3, #16
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f507 519b 	add.w	r1, r7, #4960	; 0x1360
 8003c2a:	600b      	str	r3, [r1, #0]
 8003c2c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8003c30:	f103 031c 	add.w	r3, r3, #28
 8003c34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c36:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8003c3a:	f103 031c 	add.w	r3, r3, #28
 8003c3e:	6819      	ldr	r1, [r3, #0]
 8003c40:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	e841 2300 	strex	r3, r2, [r1]
 8003c4a:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8003c4e:	f102 0218 	add.w	r2, r2, #24
 8003c52:	6013      	str	r3, [r2, #0]
   return(result);
 8003c54:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8003c58:	f103 0318 	add.w	r3, r3, #24
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1ba      	bne.n	8003bd8 <main+0x730>
	ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003c62:	4b2c      	ldr	r3, [pc, #176]	; (8003d14 <main+0x86c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8003c6a:	6013      	str	r3, [r2, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	e853 3f00 	ldrex	r3, [r3]
 8003c76:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8003c7a:	f102 021c 	add.w	r2, r2, #28
 8003c7e:	6013      	str	r3, [r2, #0]
   return(result);
 8003c80:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8003c84:	f103 031c 	add.w	r3, r3, #28
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f043 0320 	orr.w	r3, r3, #32
 8003c8e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003c92:	f102 020c 	add.w	r2, r2, #12
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	4b1e      	ldr	r3, [pc, #120]	; (8003d14 <main+0x86c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003ca2:	f103 030c 	add.w	r3, r3, #12
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f507 519a 	add.w	r1, r7, #4928	; 0x1340
 8003cac:	f101 010c 	add.w	r1, r1, #12
 8003cb0:	600b      	str	r3, [r1, #0]
 8003cb2:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8003cb6:	f103 0308 	add.w	r3, r3, #8
 8003cba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbc:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8003cc0:	f103 0308 	add.w	r3, r3, #8
 8003cc4:	6819      	ldr	r1, [r3, #0]
 8003cc6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8003cca:	f103 030c 	add.w	r3, r3, #12
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	e841 2300 	strex	r3, r2, [r1]
 8003cd4:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8003cd8:	f102 0204 	add.w	r2, r2, #4
 8003cdc:	6013      	str	r3, [r2, #0]
   return(result);
 8003cde:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8003ce2:	f103 0304 	add.w	r3, r3, #4
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1ba      	bne.n	8003c62 <main+0x7ba>
 8003cec:	e014      	b.n	8003d18 <main+0x870>
 8003cee:	bf00      	nop
 8003cf0:	0801cd40 	.word	0x0801cd40
 8003cf4:	42d00000 	.word	0x42d00000
 8003cf8:	48000c00 	.word	0x48000c00
 8003cfc:	0801cd50 	.word	0x0801cd50
 8003d00:	0801cd64 	.word	0x0801cd64
 8003d04:	0801cd70 	.word	0x0801cd70
 8003d08:	0801cd8c 	.word	0x0801cd8c
 8003d0c:	20000ef4 	.word	0x20000ef4
 8003d10:	200008b4 	.word	0x200008b4
 8003d14:	20000760 	.word	0x20000760


	HAL_Delay(1000);
 8003d18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d1c:	f003 fc0e 	bl	800753c <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003d20:	2110      	movs	r1, #16
 8003d22:	4878      	ldr	r0, [pc, #480]	; (8003f04 <main+0xa5c>)
 8003d24:	f004 fb22 	bl	800836c <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8003d28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d2c:	f003 fc06 	bl	800753c <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003d30:	2110      	movs	r1, #16
 8003d32:	4874      	ldr	r0, [pc, #464]	; (8003f04 <main+0xa5c>)
 8003d34:	f004 fb1a 	bl	800836c <HAL_GPIO_TogglePin>
	//
	//			}
	//		}
	//	}
	//	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
	sd_status = f_mount(&SDFatFS, (TCHAR const*)SDPath, 1);
 8003d38:	2201      	movs	r2, #1
 8003d3a:	4973      	ldr	r1, [pc, #460]	; (8003f08 <main+0xa60>)
 8003d3c:	4873      	ldr	r0, [pc, #460]	; (8003f0c <main+0xa64>)
 8003d3e:	f014 fccf 	bl	80186e0 <f_mount>
 8003d42:	4603      	mov	r3, r0
 8003d44:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 8003d48:	f102 020b 	add.w	r2, r2, #11
 8003d4c:	7013      	strb	r3, [r2, #0]
	// Comment this out once build finished
	GPIO_PinState pinstate = HAL_GPIO_ReadPin(CARD_DETECT_GPIO_Port, CARD_DETECT_Pin);
 8003d4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d56:	f004 fad9 	bl	800830c <HAL_GPIO_ReadPin>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003d60:	f102 020b 	add.w	r2, r2, #11
 8003d64:	7013      	strb	r3, [r2, #0]


	while (pinstate == GPIO_PIN_RESET) {
 8003d66:	e00b      	b.n	8003d80 <main+0x8d8>
		HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8003d68:	2120      	movs	r1, #32
 8003d6a:	4866      	ldr	r0, [pc, #408]	; (8003f04 <main+0xa5c>)
 8003d6c:	f004 fafe 	bl	800836c <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8003d70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d74:	f003 fbe2 	bl	800753c <HAL_Delay>
		HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8003d78:	2120      	movs	r1, #32
 8003d7a:	4862      	ldr	r0, [pc, #392]	; (8003f04 <main+0xa5c>)
 8003d7c:	f004 faf6 	bl	800836c <HAL_GPIO_TogglePin>
	while (pinstate == GPIO_PIN_RESET) {
 8003d80:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003d84:	f103 030b 	add.w	r3, r3, #11
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0ec      	beq.n	8003d68 <main+0x8c0>
	}


	while(sd_status != FR_OK)
 8003d8e:	e025      	b.n	8003ddc <main+0x934>
	{
		if (PRINT_TOGGLE == 1) {
 8003d90:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8003d94:	f103 0304 	add.w	r3, r3, #4
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d107      	bne.n	8003dae <main+0x906>
			while (CDC_Transmit_FS ("Mount failed!\n", 14) == USBD_BUSY);}
 8003d9e:	bf00      	nop
 8003da0:	210e      	movs	r1, #14
 8003da2:	485b      	ldr	r0, [pc, #364]	; (8003f10 <main+0xa68>)
 8003da4:	f015 f9be 	bl	8019124 <CDC_Transmit_FS>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d0f8      	beq.n	8003da0 <main+0x8f8>

		HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8003dae:	2140      	movs	r1, #64	; 0x40
 8003db0:	4854      	ldr	r0, [pc, #336]	; (8003f04 <main+0xa5c>)
 8003db2:	f004 fadb 	bl	800836c <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 8003db6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003dba:	f003 fbbf 	bl	800753c <HAL_Delay>
					HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8003dbe:	2140      	movs	r1, #64	; 0x40
 8003dc0:	4850      	ldr	r0, [pc, #320]	; (8003f04 <main+0xa5c>)
 8003dc2:	f004 fad3 	bl	800836c <HAL_GPIO_TogglePin>

		//while (CDC_Transmit_FS (, 14) == USBD_BUSY);
		sd_status = f_mount(&SDFatFS, (TCHAR const*)SDPath, 1);
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	494f      	ldr	r1, [pc, #316]	; (8003f08 <main+0xa60>)
 8003dca:	4850      	ldr	r0, [pc, #320]	; (8003f0c <main+0xa64>)
 8003dcc:	f014 fc88 	bl	80186e0 <f_mount>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 8003dd6:	f102 020b 	add.w	r2, r2, #11
 8003dda:	7013      	strb	r3, [r2, #0]
	while(sd_status != FR_OK)
 8003ddc:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8003de0:	f103 030b 	add.w	r3, r3, #11
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1d2      	bne.n	8003d90 <main+0x8e8>
	}

	sd_status = f_open(&SDFile, "STM32.TXT", FA_OPEN_APPEND | FA_WRITE);
 8003dea:	2232      	movs	r2, #50	; 0x32
 8003dec:	4949      	ldr	r1, [pc, #292]	; (8003f14 <main+0xa6c>)
 8003dee:	484a      	ldr	r0, [pc, #296]	; (8003f18 <main+0xa70>)
 8003df0:	f014 fcbc 	bl	801876c <f_open>
 8003df4:	4603      	mov	r3, r0
 8003df6:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 8003dfa:	f102 020b 	add.w	r2, r2, #11
 8003dfe:	7013      	strb	r3, [r2, #0]
	if(sd_status != FR_OK)
 8003e00:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8003e04:	f103 030b 	add.w	r3, r3, #11
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00e      	beq.n	8003e2c <main+0x984>
	{
		if (PRINT_TOGGLE == 1) {
 8003e0e:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8003e12:	f103 0304 	add.w	r3, r3, #4
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d107      	bne.n	8003e2c <main+0x984>
			while (CDC_Transmit_FS ("Open file failed!\n", 18) == USBD_BUSY);}
 8003e1c:	bf00      	nop
 8003e1e:	2112      	movs	r1, #18
 8003e20:	483e      	ldr	r0, [pc, #248]	; (8003f1c <main+0xa74>)
 8003e22:	f015 f97f 	bl	8019124 <CDC_Transmit_FS>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d0f8      	beq.n	8003e1e <main+0x976>
	}

	HAL_Delay(1000);
 8003e2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e30:	f003 fb84 	bl	800753c <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003e34:	2110      	movs	r1, #16
 8003e36:	4833      	ldr	r0, [pc, #204]	; (8003f04 <main+0xa5c>)
 8003e38:	f004 fa98 	bl	800836c <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8003e3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e40:	f003 fb7c 	bl	800753c <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003e44:	2110      	movs	r1, #16
 8003e46:	482f      	ldr	r0, [pc, #188]	; (8003f04 <main+0xa5c>)
 8003e48:	f004 fa90 	bl	800836c <HAL_GPIO_TogglePin>

	/// System timers Init /////////////////////////////////////////////////////////////////////////////////

	// Start timers
	HAL_TIM_Base_Start_IT(&htim17);
 8003e4c:	4834      	ldr	r0, [pc, #208]	; (8003f20 <main+0xa78>)
 8003e4e:	f00c f983 	bl	8010158 <HAL_TIM_Base_Start_IT>
	tick = 600;
 8003e52:	4b34      	ldr	r3, [pc, #208]	; (8003f24 <main+0xa7c>)
 8003e54:	2258      	movs	r2, #88	; 0x58
 8003e56:	701a      	strb	r2, [r3, #0]
	tickGPS = 0;
 8003e58:	4b33      	ldr	r3, [pc, #204]	; (8003f28 <main+0xa80>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	701a      	strb	r2, [r3, #0]


	HAL_Delay(1000);
 8003e5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e62:	f003 fb6b 	bl	800753c <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003e66:	2110      	movs	r1, #16
 8003e68:	4826      	ldr	r0, [pc, #152]	; (8003f04 <main+0xa5c>)
 8003e6a:	f004 fa7f 	bl	800836c <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8003e6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e72:	f003 fb63 	bl	800753c <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003e76:	2110      	movs	r1, #16
 8003e78:	4822      	ldr	r0, [pc, #136]	; (8003f04 <main+0xa5c>)
 8003e7a:	f004 fa77 	bl	800836c <HAL_GPIO_TogglePin>
	/// I2C scanning /////////////////////////////////////////////////////////////////////////////////
	// Comment this out once build finished
	//-[ I2C Bus Scanning ]-
	uint8_t i = 0, ret;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 8003e84:	f102 021a 	add.w	r2, r2, #26
 8003e88:	7013      	strb	r3, [r2, #0]
	for(i = 1; i < 128; i++)
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 8003e90:	f102 021a 	add.w	r2, r2, #26
 8003e94:	7013      	strb	r3, [r2, #0]
 8003e96:	e083      	b.n	8003fa0 <main+0xaf8>
	{
		ret = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 3, 5);
 8003e98:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8003e9c:	f103 031a 	add.w	r3, r3, #26
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	b299      	uxth	r1, r3
 8003ea8:	2305      	movs	r3, #5
 8003eaa:	2203      	movs	r2, #3
 8003eac:	481f      	ldr	r0, [pc, #124]	; (8003f2c <main+0xa84>)
 8003eae:	f004 ff7d 	bl	8008dac <HAL_I2C_IsDeviceReady>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8003eb8:	f102 021a 	add.w	r2, r2, #26
 8003ebc:	7013      	strb	r3, [r2, #0]
		if (ret != HAL_OK) // No ACK Received At That Address
 8003ebe:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8003ec2:	f103 031a 	add.w	r3, r3, #26
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d031      	beq.n	8003f30 <main+0xa88>
		{
			if (PRINT_TOGGLE == 1) {
 8003ecc:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8003ed0:	f103 0304 	add.w	r3, r3, #4
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d157      	bne.n	8003f8a <main+0xae2>
				while (CDC_Transmit_FS (i2c2check_space, strlen(i2c2check_space)) == USBD_BUSY);}
 8003eda:	bf00      	nop
 8003edc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003ee0:	3b0c      	subs	r3, #12
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fc f98c 	bl	8000200 <strlen>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003ef0:	3b0c      	subs	r3, #12
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f015 f915 	bl	8019124 <CDC_Transmit_FS>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d0ed      	beq.n	8003edc <main+0xa34>
 8003f00:	e043      	b.n	8003f8a <main+0xae2>
 8003f02:	bf00      	nop
 8003f04:	48000c00 	.word	0x48000c00
 8003f08:	20000f0c 	.word	0x20000f0c
 8003f0c:	20000f10 	.word	0x20000f10
 8003f10:	0801cd98 	.word	0x0801cd98
 8003f14:	0801cda8 	.word	0x0801cda8
 8003f18:	20001140 	.word	0x20001140
 8003f1c:	0801cdb4 	.word	0x0801cdb4
 8003f20:	20000680 	.word	0x20000680
 8003f24:	20000f00 	.word	0x20000f00
 8003f28:	20000f01 	.word	0x20000f01
 8003f2c:	200004f0 	.word	0x200004f0
		}
		else if(ret == HAL_OK)
 8003f30:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8003f34:	f103 031a 	add.w	r3, r3, #26
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d125      	bne.n	8003f8a <main+0xae2>
		{
			sprintf(i2c2check_active_address, "0x%X", i);
 8003f3e:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8003f42:	f103 031a 	add.w	r3, r3, #26
 8003f46:	781a      	ldrb	r2, [r3, #0]
 8003f48:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003f4c:	3b08      	subs	r3, #8
 8003f4e:	49dc      	ldr	r1, [pc, #880]	; (80042c0 <main+0xe18>)
 8003f50:	4618      	mov	r0, r3
 8003f52:	f016 fbd1 	bl	801a6f8 <siprintf>
			if (PRINT_TOGGLE == 1) {
 8003f56:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8003f5a:	f103 0304 	add.w	r3, r3, #4
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d112      	bne.n	8003f8a <main+0xae2>
				while (CDC_Transmit_FS (i2c2check_active_address, strlen(i2c2check_active_address)) == USBD_BUSY);}
 8003f64:	bf00      	nop
 8003f66:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003f6a:	3b08      	subs	r3, #8
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fc f947 	bl	8000200 <strlen>
 8003f72:	4603      	mov	r3, r0
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003f7a:	3b08      	subs	r3, #8
 8003f7c:	4611      	mov	r1, r2
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f015 f8d0 	bl	8019124 <CDC_Transmit_FS>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d0ed      	beq.n	8003f66 <main+0xabe>
	for(i = 1; i < 128; i++)
 8003f8a:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8003f8e:	f103 031a 	add.w	r3, r3, #26
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	3301      	adds	r3, #1
 8003f96:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 8003f9a:	f102 021a 	add.w	r2, r2, #26
 8003f9e:	7013      	strb	r3, [r2, #0]
 8003fa0:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8003fa4:	f103 031a 	add.w	r3, r3, #26
 8003fa8:	f993 3000 	ldrsb.w	r3, [r3]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f6bf af73 	bge.w	8003e98 <main+0x9f0>
		}
	}

	HAL_Delay(1000);
 8003fb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fb6:	f003 fac1 	bl	800753c <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003fba:	2110      	movs	r1, #16
 8003fbc:	48c1      	ldr	r0, [pc, #772]	; (80042c4 <main+0xe1c>)
 8003fbe:	f004 f9d5 	bl	800836c <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8003fc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fc6:	f003 fab9 	bl	800753c <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003fca:	2110      	movs	r1, #16
 8003fcc:	48bd      	ldr	r0, [pc, #756]	; (80042c4 <main+0xe1c>)
 8003fce:	f004 f9cd 	bl	800836c <HAL_GPIO_TogglePin>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	// Have a timer to break the USB loop in case of power cycle
	tick = 600;
 8003fd2:	4bbd      	ldr	r3, [pc, #756]	; (80042c8 <main+0xe20>)
 8003fd4:	2258      	movs	r2, #88	; 0x58
 8003fd6:	701a      	strb	r2, [r3, #0]

	/// Pre-main program /////////////////////////////////////////////////////////////////////////////////
	/// Pre-main program /////////////////////////////////////////////////////////////////////////////////
	/// Pre-main program /////////////////////////////////////////////////////////////////////////////////

	while (0) {
 8003fd8:	bf00      	nop
			}
		}
	}


	HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8003fda:	2110      	movs	r1, #16
 8003fdc:	48b9      	ldr	r0, [pc, #740]	; (80042c4 <main+0xe1c>)
 8003fde:	f004 f9c5 	bl	800836c <HAL_GPIO_TogglePin>
	// Reset timers before main program
	tick = 0;
 8003fe2:	4bb9      	ldr	r3, [pc, #740]	; (80042c8 <main+0xe20>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	701a      	strb	r2, [r3, #0]
	tickGPS = 0;
 8003fe8:	4bb8      	ldr	r3, [pc, #736]	; (80042cc <main+0xe24>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	701a      	strb	r2, [r3, #0]
	tickSync = 0;
 8003fee:	4bb8      	ldr	r3, [pc, #736]	; (80042d0 <main+0xe28>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	701a      	strb	r2, [r3, #0]
	/// Main program /////////////////////////////////////////////////////////////////////////////////
	/// Main program /////////////////////////////////////////////////////////////////////////////////
	while (1) {

		// Flush SD card every minute
		if (tickSync == 0) {
 8003ff4:	4bb6      	ldr	r3, [pc, #728]	; (80042d0 <main+0xe28>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d121      	bne.n	8004042 <main+0xb9a>
			tickSync = 600;
 8003ffe:	4bb4      	ldr	r3, [pc, #720]	; (80042d0 <main+0xe28>)
 8004000:	2258      	movs	r2, #88	; 0x58
 8004002:	701a      	strb	r2, [r3, #0]
			sd_status = f_sync(&SDFile);
 8004004:	48b3      	ldr	r0, [pc, #716]	; (80042d4 <main+0xe2c>)
 8004006:	f014 fee4 	bl	8018dd2 <f_sync>
 800400a:	4603      	mov	r3, r0
 800400c:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 8004010:	f102 020b 	add.w	r2, r2, #11
 8004014:	7013      	strb	r3, [r2, #0]
			// Comment this out once build finished
			if(sd_status != FR_OK)
 8004016:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 800401a:	f103 030b 	add.w	r3, r3, #11
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00e      	beq.n	8004042 <main+0xb9a>
			{
				if (PRINT_TOGGLE == 1) {
 8004024:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8004028:	f103 0304 	add.w	r3, r3, #4
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d107      	bne.n	8004042 <main+0xb9a>
					while (CDC_Transmit_FS ("Sync failed!\n", 14) == USBD_BUSY);}
 8004032:	bf00      	nop
 8004034:	210e      	movs	r1, #14
 8004036:	48a8      	ldr	r0, [pc, #672]	; (80042d8 <main+0xe30>)
 8004038:	f015 f874 	bl	8019124 <CDC_Transmit_FS>
 800403c:	4603      	mov	r3, r0
 800403e:	2b01      	cmp	r3, #1
 8004040:	d0f8      	beq.n	8004034 <main+0xb8c>

		}


		// Read temperature, pressure and gyro data every second and send everything to SD and lora every second
		if (tick == 0) {
 8004042:	4ba1      	ldr	r3, [pc, #644]	; (80042c8 <main+0xe20>)
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	f040 825e 	bne.w	800450a <main+0x1062>
			// Start timer again
			tick = 10;
 800404e:	4b9e      	ldr	r3, [pc, #632]	; (80042c8 <main+0xe20>)
 8004050:	220a      	movs	r2, #10
 8004052:	701a      	strb	r2, [r3, #0]

			/// TIMER /////////////////////////////////////////////////////////////////////////////////
			// Print current time
			sprintf(system_time_buffer, "t:%.0f\n", system_time_counter);
 8004054:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004058:	3818      	subs	r0, #24
 800405a:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 800405e:	f103 0310 	add.w	r3, r3, #16
 8004062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004066:	499d      	ldr	r1, [pc, #628]	; (80042dc <main+0xe34>)
 8004068:	f016 fb46 	bl	801a6f8 <siprintf>

			//while (CDC_Transmit_FS (system_time_buffer, strlen(system_time_buffer)) == USBD_BUSY);
			add_to_buffer(&data_buffer, &system_time_buffer, strlen(system_time_buffer));
 800406c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004070:	3b18      	subs	r3, #24
 8004072:	4618      	mov	r0, r3
 8004074:	f7fc f8c4 	bl	8000200 <strlen>
 8004078:	4603      	mov	r3, r0
 800407a:	461a      	mov	r2, r3
 800407c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004080:	3b18      	subs	r3, #24
 8004082:	f607 20c4 	addw	r0, r7, #2756	; 0xac4
 8004086:	4619      	mov	r1, r3
 8004088:	f7ff f9e6 	bl	8003458 <add_to_buffer>

			system_time_counter++;
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	4b93      	ldr	r3, [pc, #588]	; (80042e0 <main+0xe38>)
 8004092:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 8004096:	f101 0110 	add.w	r1, r1, #16
 800409a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800409e:	f7fc f90d 	bl	80002bc <__adddf3>
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 80040aa:	f101 0110 	add.w	r1, r1, #16
 80040ae:	e9c1 2300 	strd	r2, r3, [r1]

			// Toggle LED on board to indicate succesful timer management
			HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 80040b2:	2140      	movs	r1, #64	; 0x40
 80040b4:	4883      	ldr	r0, [pc, #524]	; (80042c4 <main+0xe1c>)
 80040b6:	f004 f959 	bl	800836c <HAL_GPIO_TogglePin>


			/// BMP  /////////////////////////////////////////////////////////////////////////////////
			// bmp needed to be forced for this kind of data reading, as now FIFO buffers or dready interrupts are being used
			bmp_settings.op_mode = BMP3_MODE_FORCED;
 80040ba:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 80040be:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80040c2:	2201      	movs	r2, #1
 80040c4:	701a      	strb	r2, [r3, #0]
			bmp_result = bmp3_set_op_mode(&bmp_settings, &bmp_device);
 80040c6:	f507 7212 	add.w	r2, r7, #584	; 0x248
 80040ca:	3a08      	subs	r2, #8
 80040cc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80040d0:	3b08      	subs	r3, #8
 80040d2:	4611      	mov	r1, r2
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fd f97c 	bl	80013d2 <bmp3_set_op_mode>
 80040da:	4603      	mov	r3, r0
 80040dc:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80040e0:	f102 021b 	add.w	r2, r2, #27
 80040e4:	7013      	strb	r3, [r2, #0]
			bmp3_check_rslt("bmp3_set_op_mode", bmp_result);
 80040e6:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80040ea:	f103 031b 	add.w	r3, r3, #27
 80040ee:	f993 3000 	ldrsb.w	r3, [r3]
 80040f2:	4619      	mov	r1, r3
 80040f4:	487b      	ldr	r0, [pc, #492]	; (80042e4 <main+0xe3c>)
 80040f6:	f7fe fbe3 	bl	80028c0 <bmp3_check_rslt>
			 * BMP3_TEMP       : To read only temperature data
			 * BMP3_PRESS      : To read only pressure data
			 */

			// Check sensor measurements
			bmp_result = bmp3_get_sensor_data(BMP3_PRESS_TEMP, &bmp_data, &bmp_device);
 80040fa:	f507 7212 	add.w	r2, r7, #584	; 0x248
 80040fe:	3a08      	subs	r2, #8
 8004100:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8004104:	3b18      	subs	r3, #24
 8004106:	4619      	mov	r1, r3
 8004108:	2003      	movs	r0, #3
 800410a:	f7fd f9d6 	bl	80014ba <bmp3_get_sensor_data>
 800410e:	4603      	mov	r3, r0
 8004110:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004114:	f102 021b 	add.w	r2, r2, #27
 8004118:	7013      	strb	r3, [r2, #0]
			bmp3_check_rslt("bmp3_get_sensor_data", bmp_result);
 800411a:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800411e:	f103 031b 	add.w	r3, r3, #27
 8004122:	f993 3000 	ldrsb.w	r3, [r3]
 8004126:	4619      	mov	r1, r3
 8004128:	486f      	ldr	r0, [pc, #444]	; (80042e8 <main+0xe40>)
 800412a:	f7fe fbc9 	bl	80028c0 <bmp3_check_rslt>

			// NOTE : Read status register again to clear data ready interrupt status
			bmp_result = bmp3_get_status(&bmp_status, &bmp_device);
 800412e:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8004132:	3a08      	subs	r2, #8
 8004134:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8004138:	3b14      	subs	r3, #20
 800413a:	4611      	mov	r1, r2
 800413c:	4618      	mov	r0, r3
 800413e:	f7fd f8d3 	bl	80012e8 <bmp3_get_status>
 8004142:	4603      	mov	r3, r0
 8004144:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004148:	f102 021b 	add.w	r2, r2, #27
 800414c:	7013      	strb	r3, [r2, #0]
			bmp3_check_rslt("bmp3_get_status", bmp_result);
 800414e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8004152:	f103 031b 	add.w	r3, r3, #27
 8004156:	f993 3000 	ldrsb.w	r3, [r3]
 800415a:	4619      	mov	r1, r3
 800415c:	4863      	ldr	r0, [pc, #396]	; (80042ec <main+0xe44>)
 800415e:	f7fe fbaf 	bl	80028c0 <bmp3_check_rslt>

			// Print bmp measurements
			sprintf(bmp_temperature_buffer, "%.2f\n", bmp_data.temperature);
 8004162:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8004166:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800416a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416e:	f507 7002 	add.w	r0, r7, #520	; 0x208
 8004172:	3810      	subs	r0, #16
 8004174:	495e      	ldr	r1, [pc, #376]	; (80042f0 <main+0xe48>)
 8004176:	f016 fabf 	bl	801a6f8 <siprintf>
			sprintf(bmp_pressure_buffer, "%.2f\n", bmp_data.pressure);
 800417a:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 800417e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004182:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004186:	f507 70f4 	add.w	r0, r7, #488	; 0x1e8
 800418a:	380c      	subs	r0, #12
 800418c:	4958      	ldr	r1, [pc, #352]	; (80042f0 <main+0xe48>)
 800418e:	f016 fab3 	bl	801a6f8 <siprintf>

			add_to_buffer(&data_buffer, &bmp_temperature_buffer, strlen(bmp_temperature_buffer));
 8004192:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004196:	3b10      	subs	r3, #16
 8004198:	4618      	mov	r0, r3
 800419a:	f7fc f831 	bl	8000200 <strlen>
 800419e:	4603      	mov	r3, r0
 80041a0:	461a      	mov	r2, r3
 80041a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041a6:	3b10      	subs	r3, #16
 80041a8:	f607 20c4 	addw	r0, r7, #2756	; 0xac4
 80041ac:	4619      	mov	r1, r3
 80041ae:	f7ff f953 	bl	8003458 <add_to_buffer>
			add_to_buffer(&data_buffer, &bmp_pressure_buffer, strlen(bmp_pressure_buffer));
 80041b2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80041b6:	3b0c      	subs	r3, #12
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fc f821 	bl	8000200 <strlen>
 80041be:	4603      	mov	r3, r0
 80041c0:	461a      	mov	r2, r3
 80041c2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80041c6:	3b0c      	subs	r3, #12
 80041c8:	f607 20c4 	addw	r0, r7, #2756	; 0xac4
 80041cc:	4619      	mov	r1, r3
 80041ce:	f7ff f943 	bl	8003458 <add_to_buffer>
			//while (CDC_Transmit_FS (bmp_pressure_buffer, strlen(bmp_pressure_buffer)) == USBD_BUSY);


			/// Gyro /////////////////////////////////////////////////////////////////////////////////
			// Read gyro acceleration and angular velocity data
			gyro_result_acceleration = LSM6DSO_ACC_GetAxes (&gyro_device, &gyro_acceleration_object);
 80041d2:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80041d6:	3a10      	subs	r2, #16
 80041d8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80041dc:	3b04      	subs	r3, #4
 80041de:	4611      	mov	r1, r2
 80041e0:	4618      	mov	r0, r3
 80041e2:	f001 ff89 	bl	80060f8 <LSM6DSO_ACC_GetAxes>
 80041e6:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80041ea:	f103 0304 	add.w	r3, r3, #4
 80041ee:	6018      	str	r0, [r3, #0]
			gyro_result_angularvel = LSM6DSO_GYRO_GetAxes (&gyro_device, &gyro_angularvel_object);
 80041f0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80041f4:	3a04      	subs	r2, #4
 80041f6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80041fa:	3b04      	subs	r3, #4
 80041fc:	4611      	mov	r1, r2
 80041fe:	4618      	mov	r0, r3
 8004200:	f002 f91e 	bl	8006440 <LSM6DSO_GYRO_GetAxes>
 8004204:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8004208:	6018      	str	r0, [r3, #0]

			sprintf(gyro_acceleration_buffer, "%"PRId32",%"PRId32",%"PRId32"\n", gyro_acceleration_object.x, gyro_acceleration_object.y, gyro_acceleration_object.z);
 800420a:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 800420e:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8004218:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800421c:	6859      	ldr	r1, [r3, #4]
 800421e:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8004222:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f507 70b4 	add.w	r0, r7, #360	; 0x168
 800422c:	3818      	subs	r0, #24
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	460b      	mov	r3, r1
 8004232:	4930      	ldr	r1, [pc, #192]	; (80042f4 <main+0xe4c>)
 8004234:	f016 fa60 	bl	801a6f8 <siprintf>
			sprintf(gyro_angularvel_buffer, "%"PRId32",%"PRId32",%"PRId32"\n", gyro_angularvel_object.x, gyro_angularvel_object.y, gyro_angularvel_object.z);
 8004238:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 800423c:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8004246:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800424a:	6859      	ldr	r1, [r3, #4]
 800424c:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8004250:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f507 7094 	add.w	r0, r7, #296	; 0x128
 800425a:	380c      	subs	r0, #12
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	460b      	mov	r3, r1
 8004260:	4924      	ldr	r1, [pc, #144]	; (80042f4 <main+0xe4c>)
 8004262:	f016 fa49 	bl	801a6f8 <siprintf>

			add_to_buffer(&data_buffer, &gyro_acceleration_buffer, strlen(gyro_acceleration_buffer));
 8004266:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800426a:	3b18      	subs	r3, #24
 800426c:	4618      	mov	r0, r3
 800426e:	f7fb ffc7 	bl	8000200 <strlen>
 8004272:	4603      	mov	r3, r0
 8004274:	461a      	mov	r2, r3
 8004276:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800427a:	3b18      	subs	r3, #24
 800427c:	f607 20c4 	addw	r0, r7, #2756	; 0xac4
 8004280:	4619      	mov	r1, r3
 8004282:	f7ff f8e9 	bl	8003458 <add_to_buffer>
			add_to_buffer(&data_buffer, &gyro_angularvel_buffer, strlen(gyro_angularvel_buffer));
 8004286:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800428a:	3b0c      	subs	r3, #12
 800428c:	4618      	mov	r0, r3
 800428e:	f7fb ffb7 	bl	8000200 <strlen>
 8004292:	4603      	mov	r3, r0
 8004294:	461a      	mov	r2, r3
 8004296:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800429a:	3b0c      	subs	r3, #12
 800429c:	f607 20c4 	addw	r0, r7, #2756	; 0xac4
 80042a0:	4619      	mov	r1, r3
 80042a2:	f7ff f8d9 	bl	8003458 <add_to_buffer>
			//			}


			//add_to_buffer(&data_buffer, &gps_buffer, strlen(gps_buffer));
			char *token;
			char *gps_buffer_copy = strdup(gps_buffer);
 80042a6:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 80042aa:	4618      	mov	r0, r3
 80042ac:	f016 fa44 	bl	801a738 <strdup>
 80042b0:	4603      	mov	r3, r0
 80042b2:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 80042b6:	f102 021c 	add.w	r2, r2, #28
 80042ba:	6013      	str	r3, [r2, #0]

			parser_i = 0;
 80042bc:	2300      	movs	r3, #0
 80042be:	e01b      	b.n	80042f8 <main+0xe50>
 80042c0:	0801cdc8 	.word	0x0801cdc8
 80042c4:	48000c00 	.word	0x48000c00
 80042c8:	20000f00 	.word	0x20000f00
 80042cc:	20000f01 	.word	0x20000f01
 80042d0:	20000f02 	.word	0x20000f02
 80042d4:	20001140 	.word	0x20001140
 80042d8:	0801cdd0 	.word	0x0801cdd0
 80042dc:	0801cde0 	.word	0x0801cde0
 80042e0:	3ff00000 	.word	0x3ff00000
 80042e4:	0801cde8 	.word	0x0801cde8
 80042e8:	0801cdfc 	.word	0x0801cdfc
 80042ec:	0801ce14 	.word	0x0801ce14
 80042f0:	0801ce24 	.word	0x0801ce24
 80042f4:	0801ce2c 	.word	0x0801ce2c
 80042f8:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 80042fc:	f102 020c 	add.w	r2, r2, #12
 8004300:	6013      	str	r3, [r2, #0]
			token = strtok(strstr(gps_buffer_copy, "$GNGGA"), ",");
 8004302:	4999      	ldr	r1, [pc, #612]	; (8004568 <main+0x10c0>)
 8004304:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8004308:	f103 031c 	add.w	r3, r3, #28
 800430c:	6818      	ldr	r0, [r3, #0]
 800430e:	f016 fa30 	bl	801a772 <strstr>
 8004312:	4603      	mov	r3, r0
 8004314:	4995      	ldr	r1, [pc, #596]	; (800456c <main+0x10c4>)
 8004316:	4618      	mov	r0, r3
 8004318:	f016 fa42 	bl	801a7a0 <strtok>
 800431c:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8004320:	f103 031c 	add.w	r3, r3, #28
 8004324:	6018      	str	r0, [r3, #0]
			while (token != NULL && parser_i < 10) {
 8004326:	e051      	b.n	80043cc <main+0xf24>
				if ((parser_i == 1) || (parser_i == 2) || (parser_i == 4) || (parser_i == 9)) {
 8004328:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 800432c:	f103 030c 	add.w	r3, r3, #12
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d014      	beq.n	8004360 <main+0xeb8>
 8004336:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 800433a:	f103 030c 	add.w	r3, r3, #12
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b02      	cmp	r3, #2
 8004342:	d00d      	beq.n	8004360 <main+0xeb8>
 8004344:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8004348:	f103 030c 	add.w	r3, r3, #12
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b04      	cmp	r3, #4
 8004350:	d006      	beq.n	8004360 <main+0xeb8>
 8004352:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8004356:	f103 030c 	add.w	r3, r3, #12
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b09      	cmp	r3, #9
 800435e:	d121      	bne.n	80043a4 <main+0xefc>
					add_to_buffer(&data_buffer, token, strlen(token));
 8004360:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8004364:	f103 031c 	add.w	r3, r3, #28
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	f7fb ff49 	bl	8000200 <strlen>
 800436e:	4603      	mov	r3, r0
 8004370:	461a      	mov	r2, r3
 8004372:	f607 23c4 	addw	r3, r7, #2756	; 0xac4
 8004376:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 800437a:	f101 011c 	add.w	r1, r1, #28
 800437e:	6809      	ldr	r1, [r1, #0]
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff f869 	bl	8003458 <add_to_buffer>
					strcat(data_buffer, ",");
 8004386:	f607 23c4 	addw	r3, r7, #2756	; 0xac4
 800438a:	4618      	mov	r0, r3
 800438c:	f7fb ff38 	bl	8000200 <strlen>
 8004390:	4603      	mov	r3, r0
 8004392:	461a      	mov	r2, r3
 8004394:	f607 23c4 	addw	r3, r7, #2756	; 0xac4
 8004398:	4413      	add	r3, r2
 800439a:	4974      	ldr	r1, [pc, #464]	; (800456c <main+0x10c4>)
 800439c:	461a      	mov	r2, r3
 800439e:	460b      	mov	r3, r1
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	8013      	strh	r3, [r2, #0]
				}
				token = strtok(NULL, ",");
 80043a4:	4971      	ldr	r1, [pc, #452]	; (800456c <main+0x10c4>)
 80043a6:	2000      	movs	r0, #0
 80043a8:	f016 f9fa 	bl	801a7a0 <strtok>
 80043ac:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80043b0:	f103 031c 	add.w	r3, r3, #28
 80043b4:	6018      	str	r0, [r3, #0]
				parser_i++;
 80043b6:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80043ba:	f103 030c 	add.w	r3, r3, #12
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3301      	adds	r3, #1
 80043c2:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 80043c6:	f102 020c 	add.w	r2, r2, #12
 80043ca:	6013      	str	r3, [r2, #0]
			while (token != NULL && parser_i < 10) {
 80043cc:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80043d0:	f103 031c 	add.w	r3, r3, #28
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d006      	beq.n	80043e8 <main+0xf40>
 80043da:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80043de:	f103 030c 	add.w	r3, r3, #12
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b09      	cmp	r3, #9
 80043e6:	dd9f      	ble.n	8004328 <main+0xe80>
			}
			strcat(data_buffer, "\n");
 80043e8:	f607 23c4 	addw	r3, r7, #2756	; 0xac4
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7fb ff07 	bl	8000200 <strlen>
 80043f2:	4603      	mov	r3, r0
 80043f4:	461a      	mov	r2, r3
 80043f6:	f607 23c4 	addw	r3, r7, #2756	; 0xac4
 80043fa:	4413      	add	r3, r2
 80043fc:	495c      	ldr	r1, [pc, #368]	; (8004570 <main+0x10c8>)
 80043fe:	461a      	mov	r2, r3
 8004400:	460b      	mov	r3, r1
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	8013      	strh	r3, [r2, #0]

			free(gps_buffer_copy); // Free the memory allocated for the copy
 8004406:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800440a:	f103 031c 	add.w	r3, r3, #28
 800440e:	6818      	ldr	r0, [r3, #0]
 8004410:	f015 fbe2 	bl	8019bd8 <free>
			free(token);
 8004414:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8004418:	f103 031c 	add.w	r3, r3, #28
 800441c:	6818      	ldr	r0, [r3, #0]
 800441e:	f015 fbdb 	bl	8019bd8 <free>

			gps_buffer[0] = '\0';
 8004422:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8004426:	f103 0308 	add.w	r3, r3, #8
 800442a:	f6a3 43ec 	subw	r3, r3, #3308	; 0xcec
 800442e:	2200      	movs	r2, #0
 8004430:	701a      	strb	r2, [r3, #0]


			/// MIRA /////////////////////////////////////////////////////////////////////////////////

			status = mira_science_data(&huart1, mira_science_Rx_buffer, mira_response_Rx_buffer, 5000);
 8004432:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004436:	3a1c      	subs	r2, #28
 8004438:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800443c:	3910      	subs	r1, #16
 800443e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004442:	484c      	ldr	r0, [pc, #304]	; (8004574 <main+0x10cc>)
 8004444:	f000 fd44 	bl	8004ed0 <mira_science_data>
 8004448:	4603      	mov	r3, r0
 800444a:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 800444e:	f102 021b 	add.w	r2, r2, #27
 8004452:	7013      	strb	r3, [r2, #0]
			add_to_buffer(&data_buffer, &mira_science_Rx_buffer, strlen(mira_science_Rx_buffer));
 8004454:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004458:	3b10      	subs	r3, #16
 800445a:	4618      	mov	r0, r3
 800445c:	f7fb fed0 	bl	8000200 <strlen>
 8004460:	4603      	mov	r3, r0
 8004462:	461a      	mov	r2, r3
 8004464:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004468:	3b10      	subs	r3, #16
 800446a:	f607 20c4 	addw	r0, r7, #2756	; 0xac4
 800446e:	4619      	mov	r1, r3
 8004470:	f7fe fff2 	bl	8003458 <add_to_buffer>


			/// DATA RECORDING /////////////////////////////////////////////////////////////////////////////////
			//write gps data to SD
			//if (sd_status == FR_OK){
			sd_result_write = f_write(&SDFile, data_buffer, strlen((char *)data_buffer), (void *)&sd_err_byteswritten);
 8004474:	f607 23c4 	addw	r3, r7, #2756	; 0xac4
 8004478:	4618      	mov	r0, r3
 800447a:	f7fb fec1 	bl	8000200 <strlen>
 800447e:	4602      	mov	r2, r0
 8004480:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8004484:	f103 0318 	add.w	r3, r3, #24
 8004488:	f607 21c4 	addw	r1, r7, #2756	; 0xac4
 800448c:	483a      	ldr	r0, [pc, #232]	; (8004578 <main+0x10d0>)
 800448e:	f014 fb2b 	bl	8018ae8 <f_write>
 8004492:	4603      	mov	r3, r0
 8004494:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8004498:	f102 021b 	add.w	r2, r2, #27
 800449c:	7013      	strb	r3, [r2, #0]
			//}
			// Sendgps data to LORA
			if (lora_res == LORA_OK) {
 800449e:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80044a2:	f103 0303 	add.w	r3, r3, #3
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10e      	bne.n	80044ca <main+0x1022>
				lora_send_packet(&lora, data_buffer, strlen(data_buffer));
 80044ac:	f607 23c4 	addw	r3, r7, #2756	; 0xac4
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fb fea5 	bl	8000200 <strlen>
 80044b6:	4603      	mov	r3, r0
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	f607 21c4 	addw	r1, r7, #2756	; 0xac4
 80044be:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80044c2:	3b04      	subs	r3, #4
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7fe ff48 	bl	800335a <lora_send_packet>
			}

			// Comment this out once build finished
			if (PRINT_TOGGLE == 1) {
 80044ca:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80044ce:	f103 0304 	add.w	r3, r3, #4
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d110      	bne.n	80044fa <main+0x1052>
				while (CDC_Transmit_FS (data_buffer, strlen(data_buffer)) == USBD_BUSY);}
 80044d8:	bf00      	nop
 80044da:	f607 23c4 	addw	r3, r7, #2756	; 0xac4
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fb fe8e 	bl	8000200 <strlen>
 80044e4:	4603      	mov	r3, r0
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	f607 23c4 	addw	r3, r7, #2756	; 0xac4
 80044ec:	4611      	mov	r1, r2
 80044ee:	4618      	mov	r0, r3
 80044f0:	f014 fe18 	bl	8019124 <CDC_Transmit_FS>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d0ef      	beq.n	80044da <main+0x1032>
			data_buffer[0] = '\0';
 80044fa:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80044fe:	f103 0308 	add.w	r3, r3, #8
 8004502:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 8004506:	2200      	movs	r2, #0
 8004508:	701a      	strb	r2, [r3, #0]

		}

		/// GPS /////////////////////////////////////////////////////////////////////////////////
		// Read GPS data whenever UART interrupt raises gps_data_ready flag
		if (gps_data_ready) {
 800450a:	4b1c      	ldr	r3, [pc, #112]	; (800457c <main+0x10d4>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	f43f ad70 	beq.w	8003ff4 <main+0xb4c>
			// Choose the buffer from the two data buffers that is not currently being written into and print it
			if (gps_rxBuffer == gps_rxBuffer1) {
 8004514:	4b1a      	ldr	r3, [pc, #104]	; (8004580 <main+0x10d8>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a1a      	ldr	r2, [pc, #104]	; (8004584 <main+0x10dc>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d10b      	bne.n	8004536 <main+0x108e>
				//while (CDC_Transmit_FS (gps_rxBuffer2, strlen(gps_rxBuffer2)) == USBD_BUSY);
				add_to_buffer(&gps_buffer, &gps_rxBuffer2, strlen(gps_rxBuffer2));
 800451e:	481a      	ldr	r0, [pc, #104]	; (8004588 <main+0x10e0>)
 8004520:	f7fb fe6e 	bl	8000200 <strlen>
 8004524:	4603      	mov	r3, r0
 8004526:	461a      	mov	r2, r3
 8004528:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 800452c:	4916      	ldr	r1, [pc, #88]	; (8004588 <main+0x10e0>)
 800452e:	4618      	mov	r0, r3
 8004530:	f7fe ff92 	bl	8003458 <add_to_buffer>
 8004534:	e00a      	b.n	800454c <main+0x10a4>

			}
			else {
				//while (CDC_Transmit_FS (gps_rxBuffer1, strlen(gps_rxBuffer1)) == USBD_BUSY);
				add_to_buffer(&gps_buffer, &gps_rxBuffer1, strlen(gps_rxBuffer1));
 8004536:	4813      	ldr	r0, [pc, #76]	; (8004584 <main+0x10dc>)
 8004538:	f7fb fe62 	bl	8000200 <strlen>
 800453c:	4603      	mov	r3, r0
 800453e:	461a      	mov	r2, r3
 8004540:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 8004544:	490f      	ldr	r1, [pc, #60]	; (8004584 <main+0x10dc>)
 8004546:	4618      	mov	r0, r3
 8004548:	f7fe ff86 	bl	8003458 <add_to_buffer>
			}

			// Toggle flags to allow for buffer swapping and next data batch sending
			gps_data_ready ^= 1;
 800454c:	4b0b      	ldr	r3, [pc, #44]	; (800457c <main+0x10d4>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f083 0301 	eor.w	r3, r3, #1
 8004554:	4a09      	ldr	r2, [pc, #36]	; (800457c <main+0x10d4>)
 8004556:	6013      	str	r3, [r2, #0]
			gps_send_ready |= 1;
 8004558:	4b0c      	ldr	r3, [pc, #48]	; (800458c <main+0x10e4>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f043 0301 	orr.w	r3, r3, #1
 8004560:	4a0a      	ldr	r2, [pc, #40]	; (800458c <main+0x10e4>)
 8004562:	6013      	str	r3, [r2, #0]
		if (tickSync == 0) {
 8004564:	e546      	b.n	8003ff4 <main+0xb4c>
 8004566:	bf00      	nop
 8004568:	0801ce3c 	.word	0x0801ce3c
 800456c:	0801ce44 	.word	0x0801ce44
 8004570:	0801ce48 	.word	0x0801ce48
 8004574:	200006cc 	.word	0x200006cc
 8004578:	20001140 	.word	0x20001140
 800457c:	20000efc 	.word	0x20000efc
 8004580:	20000ef4 	.word	0x20000ef4
 8004584:	200008b4 	.word	0x200008b4
 8004588:	20000bd4 	.word	0x20000bd4
 800458c:	20000000 	.word	0x20000000

08004590 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b096      	sub	sp, #88	; 0x58
 8004594:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004596:	f107 0314 	add.w	r3, r7, #20
 800459a:	2244      	movs	r2, #68	; 0x44
 800459c:	2100      	movs	r1, #0
 800459e:	4618      	mov	r0, r3
 80045a0:	f015 fb30 	bl	8019c04 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045a4:	463b      	mov	r3, r7
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	605a      	str	r2, [r3, #4]
 80045ac:	609a      	str	r2, [r3, #8]
 80045ae:	60da      	str	r2, [r3, #12]
 80045b0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80045b2:	2000      	movs	r0, #0
 80045b4:	f006 fac2 	bl	800ab3c <HAL_PWREx_ControlVoltageScaling>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <SystemClock_Config+0x32>
	{
		Error_Handler();
 80045be:	f000 fb19 	bl	8004bf4 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80045c2:	2321      	movs	r3, #33	; 0x21
 80045c4:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80045c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045ca:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80045cc:	2301      	movs	r3, #1
 80045ce:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045d0:	2302      	movs	r3, #2
 80045d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80045d4:	2303      	movs	r3, #3
 80045d6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80045d8:	2301      	movs	r3, #1
 80045da:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 30;
 80045dc:	231e      	movs	r3, #30
 80045de:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80045e0:	2302      	movs	r3, #2
 80045e2:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80045e4:	2302      	movs	r3, #2
 80045e6:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80045e8:	2302      	movs	r3, #2
 80045ea:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045ec:	f107 0314 	add.w	r3, r7, #20
 80045f0:	4618      	mov	r0, r3
 80045f2:	f006 fb57 	bl	800aca4 <HAL_RCC_OscConfig>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <SystemClock_Config+0x70>
	{
		Error_Handler();
 80045fc:	f000 fafa 	bl	8004bf4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004600:	230f      	movs	r3, #15
 8004602:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004604:	2303      	movs	r3, #3
 8004606:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004608:	2300      	movs	r3, #0
 800460a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800460c:	2300      	movs	r3, #0
 800460e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004610:	2300      	movs	r3, #0
 8004612:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004614:	463b      	mov	r3, r7
 8004616:	2105      	movs	r1, #5
 8004618:	4618      	mov	r0, r3
 800461a:	f006 ff5d 	bl	800b4d8 <HAL_RCC_ClockConfig>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8004624:	f000 fae6 	bl	8004bf4 <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 8004628:	f007 f954 	bl	800b8d4 <HAL_RCC_EnableCSS>
}
 800462c:	bf00      	nop
 800462e:	3758      	adds	r7, #88	; 0x58
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
	/* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8004638:	2200      	movs	r2, #0
 800463a:	2100      	movs	r1, #0
 800463c:	201a      	movs	r0, #26
 800463e:	f003 f87c 	bl	800773a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8004642:	201a      	movs	r0, #26
 8004644:	f003 f895 	bl	8007772 <HAL_NVIC_EnableIRQ>
	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004648:	2200      	movs	r2, #0
 800464a:	2100      	movs	r1, #0
 800464c:	2026      	movs	r0, #38	; 0x26
 800464e:	f003 f874 	bl	800773a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004652:	2026      	movs	r0, #38	; 0x26
 8004654:	f003 f88d 	bl	8007772 <HAL_NVIC_EnableIRQ>
	/* USART1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004658:	2200      	movs	r2, #0
 800465a:	2100      	movs	r1, #0
 800465c:	2025      	movs	r0, #37	; 0x25
 800465e:	f003 f86c 	bl	800773a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004662:	2025      	movs	r0, #37	; 0x25
 8004664:	f003 f885 	bl	8007772 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004668:	2200      	movs	r2, #0
 800466a:	2100      	movs	r1, #0
 800466c:	200b      	movs	r0, #11
 800466e:	f003 f864 	bl	800773a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004672:	200b      	movs	r0, #11
 8004674:	f003 f87d 	bl	8007772 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004678:	2200      	movs	r2, #0
 800467a:	2100      	movs	r1, #0
 800467c:	200c      	movs	r0, #12
 800467e:	f003 f85c 	bl	800773a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004682:	200c      	movs	r0, #12
 8004684:	f003 f875 	bl	8007772 <HAL_NVIC_EnableIRQ>
}
 8004688:	bf00      	nop
 800468a:	bd80      	pop	{r7, pc}

0800468c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8004690:	4b1b      	ldr	r3, [pc, #108]	; (8004700 <MX_I2C1_Init+0x74>)
 8004692:	4a1c      	ldr	r2, [pc, #112]	; (8004704 <MX_I2C1_Init+0x78>)
 8004694:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x307075B1;
 8004696:	4b1a      	ldr	r3, [pc, #104]	; (8004700 <MX_I2C1_Init+0x74>)
 8004698:	4a1b      	ldr	r2, [pc, #108]	; (8004708 <MX_I2C1_Init+0x7c>)
 800469a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 800469c:	4b18      	ldr	r3, [pc, #96]	; (8004700 <MX_I2C1_Init+0x74>)
 800469e:	2200      	movs	r2, #0
 80046a0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80046a2:	4b17      	ldr	r3, [pc, #92]	; (8004700 <MX_I2C1_Init+0x74>)
 80046a4:	2201      	movs	r2, #1
 80046a6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80046a8:	4b15      	ldr	r3, [pc, #84]	; (8004700 <MX_I2C1_Init+0x74>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80046ae:	4b14      	ldr	r3, [pc, #80]	; (8004700 <MX_I2C1_Init+0x74>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80046b4:	4b12      	ldr	r3, [pc, #72]	; (8004700 <MX_I2C1_Init+0x74>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80046ba:	4b11      	ldr	r3, [pc, #68]	; (8004700 <MX_I2C1_Init+0x74>)
 80046bc:	2200      	movs	r2, #0
 80046be:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80046c0:	4b0f      	ldr	r3, [pc, #60]	; (8004700 <MX_I2C1_Init+0x74>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80046c6:	480e      	ldr	r0, [pc, #56]	; (8004700 <MX_I2C1_Init+0x74>)
 80046c8:	f003 fe6a 	bl	80083a0 <HAL_I2C_Init>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 80046d2:	f000 fa8f 	bl	8004bf4 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80046d6:	2100      	movs	r1, #0
 80046d8:	4809      	ldr	r0, [pc, #36]	; (8004700 <MX_I2C1_Init+0x74>)
 80046da:	f004 ffc5 	bl	8009668 <HAL_I2CEx_ConfigAnalogFilter>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 80046e4:	f000 fa86 	bl	8004bf4 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80046e8:	2100      	movs	r1, #0
 80046ea:	4805      	ldr	r0, [pc, #20]	; (8004700 <MX_I2C1_Init+0x74>)
 80046ec:	f005 f807 	bl	80096fe <HAL_I2CEx_ConfigDigitalFilter>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 80046f6:	f000 fa7d 	bl	8004bf4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80046fa:	bf00      	nop
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	20000548 	.word	0x20000548
 8004704:	40005400 	.word	0x40005400
 8004708:	307075b1 	.word	0x307075b1

0800470c <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 800470c:	b480      	push	{r7}
 800470e:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 8004710:	4b0d      	ldr	r3, [pc, #52]	; (8004748 <MX_SDMMC1_SD_Init+0x3c>)
 8004712:	4a0e      	ldr	r2, [pc, #56]	; (800474c <MX_SDMMC1_SD_Init+0x40>)
 8004714:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8004716:	4b0c      	ldr	r3, [pc, #48]	; (8004748 <MX_SDMMC1_SD_Init+0x3c>)
 8004718:	2200      	movs	r2, #0
 800471a:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800471c:	4b0a      	ldr	r3, [pc, #40]	; (8004748 <MX_SDMMC1_SD_Init+0x3c>)
 800471e:	2200      	movs	r2, #0
 8004720:	609a      	str	r2, [r3, #8]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8004722:	4b09      	ldr	r3, [pc, #36]	; (8004748 <MX_SDMMC1_SD_Init+0x3c>)
 8004724:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004728:	60da      	str	r2, [r3, #12]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800472a:	4b07      	ldr	r3, [pc, #28]	; (8004748 <MX_SDMMC1_SD_Init+0x3c>)
 800472c:	2200      	movs	r2, #0
 800472e:	611a      	str	r2, [r3, #16]
	hsd1.Init.ClockDiv = 0;
 8004730:	4b05      	ldr	r3, [pc, #20]	; (8004748 <MX_SDMMC1_SD_Init+0x3c>)
 8004732:	2200      	movs	r2, #0
 8004734:	615a      	str	r2, [r3, #20]
	hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8004736:	4b04      	ldr	r3, [pc, #16]	; (8004748 <MX_SDMMC1_SD_Init+0x3c>)
 8004738:	2200      	movs	r2, #0
 800473a:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */

}
 800473c:	bf00      	nop
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	2000059c 	.word	0x2000059c
 800474c:	50062400 	.word	0x50062400

08004750 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8004754:	4b1b      	ldr	r3, [pc, #108]	; (80047c4 <MX_SPI1_Init+0x74>)
 8004756:	4a1c      	ldr	r2, [pc, #112]	; (80047c8 <MX_SPI1_Init+0x78>)
 8004758:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800475a:	4b1a      	ldr	r3, [pc, #104]	; (80047c4 <MX_SPI1_Init+0x74>)
 800475c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004760:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004762:	4b18      	ldr	r3, [pc, #96]	; (80047c4 <MX_SPI1_Init+0x74>)
 8004764:	2200      	movs	r2, #0
 8004766:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004768:	4b16      	ldr	r3, [pc, #88]	; (80047c4 <MX_SPI1_Init+0x74>)
 800476a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800476e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004770:	4b14      	ldr	r3, [pc, #80]	; (80047c4 <MX_SPI1_Init+0x74>)
 8004772:	2200      	movs	r2, #0
 8004774:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004776:	4b13      	ldr	r3, [pc, #76]	; (80047c4 <MX_SPI1_Init+0x74>)
 8004778:	2200      	movs	r2, #0
 800477a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800477c:	4b11      	ldr	r3, [pc, #68]	; (80047c4 <MX_SPI1_Init+0x74>)
 800477e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004782:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004784:	4b0f      	ldr	r3, [pc, #60]	; (80047c4 <MX_SPI1_Init+0x74>)
 8004786:	2228      	movs	r2, #40	; 0x28
 8004788:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800478a:	4b0e      	ldr	r3, [pc, #56]	; (80047c4 <MX_SPI1_Init+0x74>)
 800478c:	2200      	movs	r2, #0
 800478e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004790:	4b0c      	ldr	r3, [pc, #48]	; (80047c4 <MX_SPI1_Init+0x74>)
 8004792:	2200      	movs	r2, #0
 8004794:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004796:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <MX_SPI1_Init+0x74>)
 8004798:	2200      	movs	r2, #0
 800479a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 800479c:	4b09      	ldr	r3, [pc, #36]	; (80047c4 <MX_SPI1_Init+0x74>)
 800479e:	2207      	movs	r2, #7
 80047a0:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80047a2:	4b08      	ldr	r3, [pc, #32]	; (80047c4 <MX_SPI1_Init+0x74>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80047a8:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <MX_SPI1_Init+0x74>)
 80047aa:	2208      	movs	r2, #8
 80047ac:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80047ae:	4805      	ldr	r0, [pc, #20]	; (80047c4 <MX_SPI1_Init+0x74>)
 80047b0:	f00a fbbd 	bl	800ef2e <HAL_SPI_Init>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 80047ba:	f000 fa1b 	bl	8004bf4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80047be:	bf00      	nop
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	2000061c 	.word	0x2000061c
 80047c8:	40013000 	.word	0x40013000

080047cc <MX_TIM17_Init>:
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b092      	sub	sp, #72	; 0x48
 80047d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM17_Init 0 */

	/* USER CODE END TIM17_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 80047d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	605a      	str	r2, [r3, #4]
 80047dc:	609a      	str	r2, [r3, #8]
 80047de:	60da      	str	r2, [r3, #12]
 80047e0:	611a      	str	r2, [r3, #16]
 80047e2:	615a      	str	r2, [r3, #20]
 80047e4:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80047e6:	463b      	mov	r3, r7
 80047e8:	222c      	movs	r2, #44	; 0x2c
 80047ea:	2100      	movs	r1, #0
 80047ec:	4618      	mov	r0, r3
 80047ee:	f015 fa09 	bl	8019c04 <memset>

	/* USER CODE BEGIN TIM17_Init 1 */

	/* USER CODE END TIM17_Init 1 */
	htim17.Instance = TIM17;
 80047f2:	4b2f      	ldr	r3, [pc, #188]	; (80048b0 <MX_TIM17_Init+0xe4>)
 80047f4:	4a2f      	ldr	r2, [pc, #188]	; (80048b4 <MX_TIM17_Init+0xe8>)
 80047f6:	601a      	str	r2, [r3, #0]
	htim17.Init.Prescaler = 999;
 80047f8:	4b2d      	ldr	r3, [pc, #180]	; (80048b0 <MX_TIM17_Init+0xe4>)
 80047fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80047fe:	605a      	str	r2, [r3, #4]
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004800:	4b2b      	ldr	r3, [pc, #172]	; (80048b0 <MX_TIM17_Init+0xe4>)
 8004802:	2200      	movs	r2, #0
 8004804:	609a      	str	r2, [r3, #8]
	htim17.Init.Period = 11999;
 8004806:	4b2a      	ldr	r3, [pc, #168]	; (80048b0 <MX_TIM17_Init+0xe4>)
 8004808:	f642 62df 	movw	r2, #11999	; 0x2edf
 800480c:	60da      	str	r2, [r3, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800480e:	4b28      	ldr	r3, [pc, #160]	; (80048b0 <MX_TIM17_Init+0xe4>)
 8004810:	2200      	movs	r2, #0
 8004812:	611a      	str	r2, [r3, #16]
	htim17.Init.RepetitionCounter = 0;
 8004814:	4b26      	ldr	r3, [pc, #152]	; (80048b0 <MX_TIM17_Init+0xe4>)
 8004816:	2200      	movs	r2, #0
 8004818:	615a      	str	r2, [r3, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800481a:	4b25      	ldr	r3, [pc, #148]	; (80048b0 <MX_TIM17_Init+0xe4>)
 800481c:	2280      	movs	r2, #128	; 0x80
 800481e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8004820:	4823      	ldr	r0, [pc, #140]	; (80048b0 <MX_TIM17_Init+0xe4>)
 8004822:	f00b fc41 	bl	80100a8 <HAL_TIM_Base_Init>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <MX_TIM17_Init+0x64>
	{
		Error_Handler();
 800482c:	f000 f9e2 	bl	8004bf4 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8004830:	481f      	ldr	r0, [pc, #124]	; (80048b0 <MX_TIM17_Init+0xe4>)
 8004832:	f00b fd01 	bl	8010238 <HAL_TIM_OC_Init>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <MX_TIM17_Init+0x74>
	{
		Error_Handler();
 800483c:	f000 f9da 	bl	8004bf4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004840:	2300      	movs	r3, #0
 8004842:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.Pulse = 0;
 8004844:	2300      	movs	r3, #0
 8004846:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004848:	2300      	movs	r3, #0
 800484a:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800484c:	2300      	movs	r3, #0
 800484e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004850:	2300      	movs	r3, #0
 8004852:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004854:	2300      	movs	r3, #0
 8004856:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004858:	2300      	movs	r3, #0
 800485a:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800485c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004860:	2200      	movs	r2, #0
 8004862:	4619      	mov	r1, r3
 8004864:	4812      	ldr	r0, [pc, #72]	; (80048b0 <MX_TIM17_Init+0xe4>)
 8004866:	f00b fe4b 	bl	8010500 <HAL_TIM_OC_ConfigChannel>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <MX_TIM17_Init+0xa8>
	{
		Error_Handler();
 8004870:	f000 f9c0 	bl	8004bf4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004874:	2300      	movs	r3, #0
 8004876:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004878:	2300      	movs	r3, #0
 800487a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800487c:	2300      	movs	r3, #0
 800487e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8004880:	2300      	movs	r3, #0
 8004882:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004884:	2300      	movs	r3, #0
 8004886:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800488c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800488e:	2300      	movs	r3, #0
 8004890:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8004892:	463b      	mov	r3, r7
 8004894:	4619      	mov	r1, r3
 8004896:	4806      	ldr	r0, [pc, #24]	; (80048b0 <MX_TIM17_Init+0xe4>)
 8004898:	f00c fa4e 	bl	8010d38 <HAL_TIMEx_ConfigBreakDeadTime>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <MX_TIM17_Init+0xda>
	{
		Error_Handler();
 80048a2:	f000 f9a7 	bl	8004bf4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM17_Init 2 */

	/* USER CODE END TIM17_Init 2 */

}
 80048a6:	bf00      	nop
 80048a8:	3748      	adds	r7, #72	; 0x48
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	20000680 	.word	0x20000680
 80048b4:	40014800 	.word	0x40014800

080048b8 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80048bc:	4b22      	ldr	r3, [pc, #136]	; (8004948 <MX_USART1_UART_Init+0x90>)
 80048be:	4a23      	ldr	r2, [pc, #140]	; (800494c <MX_USART1_UART_Init+0x94>)
 80048c0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80048c2:	4b21      	ldr	r3, [pc, #132]	; (8004948 <MX_USART1_UART_Init+0x90>)
 80048c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80048c8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80048ca:	4b1f      	ldr	r3, [pc, #124]	; (8004948 <MX_USART1_UART_Init+0x90>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80048d0:	4b1d      	ldr	r3, [pc, #116]	; (8004948 <MX_USART1_UART_Init+0x90>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80048d6:	4b1c      	ldr	r3, [pc, #112]	; (8004948 <MX_USART1_UART_Init+0x90>)
 80048d8:	2200      	movs	r2, #0
 80048da:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80048dc:	4b1a      	ldr	r3, [pc, #104]	; (8004948 <MX_USART1_UART_Init+0x90>)
 80048de:	220c      	movs	r2, #12
 80048e0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048e2:	4b19      	ldr	r3, [pc, #100]	; (8004948 <MX_USART1_UART_Init+0x90>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80048e8:	4b17      	ldr	r3, [pc, #92]	; (8004948 <MX_USART1_UART_Init+0x90>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80048ee:	4b16      	ldr	r3, [pc, #88]	; (8004948 <MX_USART1_UART_Init+0x90>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80048f4:	4b14      	ldr	r3, [pc, #80]	; (8004948 <MX_USART1_UART_Init+0x90>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80048fa:	4b13      	ldr	r3, [pc, #76]	; (8004948 <MX_USART1_UART_Init+0x90>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8004900:	4811      	ldr	r0, [pc, #68]	; (8004948 <MX_USART1_UART_Init+0x90>)
 8004902:	f00c fab5 	bl	8010e70 <HAL_UART_Init>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 800490c:	f000 f972 	bl	8004bf4 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004910:	2100      	movs	r1, #0
 8004912:	480d      	ldr	r0, [pc, #52]	; (8004948 <MX_USART1_UART_Init+0x90>)
 8004914:	f00d feba 	bl	801268c <HAL_UARTEx_SetTxFifoThreshold>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <MX_USART1_UART_Init+0x6a>
	{
		Error_Handler();
 800491e:	f000 f969 	bl	8004bf4 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004922:	2100      	movs	r1, #0
 8004924:	4808      	ldr	r0, [pc, #32]	; (8004948 <MX_USART1_UART_Init+0x90>)
 8004926:	f00d feef 	bl	8012708 <HAL_UARTEx_SetRxFifoThreshold>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <MX_USART1_UART_Init+0x7c>
	{
		Error_Handler();
 8004930:	f000 f960 	bl	8004bf4 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004934:	4804      	ldr	r0, [pc, #16]	; (8004948 <MX_USART1_UART_Init+0x90>)
 8004936:	f00d fe70 	bl	801261a <HAL_UARTEx_DisableFifoMode>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 8004940:	f000 f958 	bl	8004bf4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8004944:	bf00      	nop
 8004946:	bd80      	pop	{r7, pc}
 8004948:	200006cc 	.word	0x200006cc
 800494c:	40013800 	.word	0x40013800

08004950 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8004954:	4b24      	ldr	r3, [pc, #144]	; (80049e8 <MX_USART2_UART_Init+0x98>)
 8004956:	4a25      	ldr	r2, [pc, #148]	; (80049ec <MX_USART2_UART_Init+0x9c>)
 8004958:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 800495a:	4b23      	ldr	r3, [pc, #140]	; (80049e8 <MX_USART2_UART_Init+0x98>)
 800495c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004960:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004962:	4b21      	ldr	r3, [pc, #132]	; (80049e8 <MX_USART2_UART_Init+0x98>)
 8004964:	2200      	movs	r2, #0
 8004966:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8004968:	4b1f      	ldr	r3, [pc, #124]	; (80049e8 <MX_USART2_UART_Init+0x98>)
 800496a:	2200      	movs	r2, #0
 800496c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800496e:	4b1e      	ldr	r3, [pc, #120]	; (80049e8 <MX_USART2_UART_Init+0x98>)
 8004970:	2200      	movs	r2, #0
 8004972:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8004974:	4b1c      	ldr	r3, [pc, #112]	; (80049e8 <MX_USART2_UART_Init+0x98>)
 8004976:	220c      	movs	r2, #12
 8004978:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800497a:	4b1b      	ldr	r3, [pc, #108]	; (80049e8 <MX_USART2_UART_Init+0x98>)
 800497c:	2200      	movs	r2, #0
 800497e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004980:	4b19      	ldr	r3, [pc, #100]	; (80049e8 <MX_USART2_UART_Init+0x98>)
 8004982:	2200      	movs	r2, #0
 8004984:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004986:	4b18      	ldr	r3, [pc, #96]	; (80049e8 <MX_USART2_UART_Init+0x98>)
 8004988:	2200      	movs	r2, #0
 800498a:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800498c:	4b16      	ldr	r3, [pc, #88]	; (80049e8 <MX_USART2_UART_Init+0x98>)
 800498e:	2200      	movs	r2, #0
 8004990:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8004992:	4b15      	ldr	r3, [pc, #84]	; (80049e8 <MX_USART2_UART_Init+0x98>)
 8004994:	2210      	movs	r2, #16
 8004996:	629a      	str	r2, [r3, #40]	; 0x28
	huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8004998:	4b13      	ldr	r3, [pc, #76]	; (80049e8 <MX_USART2_UART_Init+0x98>)
 800499a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800499e:	63da      	str	r2, [r3, #60]	; 0x3c
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80049a0:	4811      	ldr	r0, [pc, #68]	; (80049e8 <MX_USART2_UART_Init+0x98>)
 80049a2:	f00c fa65 	bl	8010e70 <HAL_UART_Init>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <MX_USART2_UART_Init+0x60>
	{
		Error_Handler();
 80049ac:	f000 f922 	bl	8004bf4 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80049b0:	2100      	movs	r1, #0
 80049b2:	480d      	ldr	r0, [pc, #52]	; (80049e8 <MX_USART2_UART_Init+0x98>)
 80049b4:	f00d fe6a 	bl	801268c <HAL_UARTEx_SetTxFifoThreshold>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <MX_USART2_UART_Init+0x72>
	{
		Error_Handler();
 80049be:	f000 f919 	bl	8004bf4 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80049c2:	2100      	movs	r1, #0
 80049c4:	4808      	ldr	r0, [pc, #32]	; (80049e8 <MX_USART2_UART_Init+0x98>)
 80049c6:	f00d fe9f 	bl	8012708 <HAL_UARTEx_SetRxFifoThreshold>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <MX_USART2_UART_Init+0x84>
	{
		Error_Handler();
 80049d0:	f000 f910 	bl	8004bf4 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80049d4:	4804      	ldr	r0, [pc, #16]	; (80049e8 <MX_USART2_UART_Init+0x98>)
 80049d6:	f00d fe20 	bl	801261a <HAL_UARTEx_DisableFifoMode>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <MX_USART2_UART_Init+0x94>
	{
		Error_Handler();
 80049e0:	f000 f908 	bl	8004bf4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80049e4:	bf00      	nop
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	20000760 	.word	0x20000760
 80049ec:	40004400 	.word	0x40004400

080049f0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80049f6:	4b0f      	ldr	r3, [pc, #60]	; (8004a34 <MX_DMA_Init+0x44>)
 80049f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049fa:	4a0e      	ldr	r2, [pc, #56]	; (8004a34 <MX_DMA_Init+0x44>)
 80049fc:	f043 0304 	orr.w	r3, r3, #4
 8004a00:	6493      	str	r3, [r2, #72]	; 0x48
 8004a02:	4b0c      	ldr	r3, [pc, #48]	; (8004a34 <MX_DMA_Init+0x44>)
 8004a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a06:	f003 0304 	and.w	r3, r3, #4
 8004a0a:	607b      	str	r3, [r7, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004a0e:	4b09      	ldr	r3, [pc, #36]	; (8004a34 <MX_DMA_Init+0x44>)
 8004a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a12:	4a08      	ldr	r2, [pc, #32]	; (8004a34 <MX_DMA_Init+0x44>)
 8004a14:	f043 0301 	orr.w	r3, r3, #1
 8004a18:	6493      	str	r3, [r2, #72]	; 0x48
 8004a1a:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <MX_DMA_Init+0x44>)
 8004a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	603b      	str	r3, [r7, #0]
 8004a24:	683b      	ldr	r3, [r7, #0]

}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	40021000 	.word	0x40021000

08004a38 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b08c      	sub	sp, #48	; 0x30
 8004a3c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a3e:	f107 031c 	add.w	r3, r7, #28
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	605a      	str	r2, [r3, #4]
 8004a48:	609a      	str	r2, [r3, #8]
 8004a4a:	60da      	str	r2, [r3, #12]
 8004a4c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8004a4e:	4b64      	ldr	r3, [pc, #400]	; (8004be0 <MX_GPIO_Init+0x1a8>)
 8004a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a52:	4a63      	ldr	r2, [pc, #396]	; (8004be0 <MX_GPIO_Init+0x1a8>)
 8004a54:	f043 0310 	orr.w	r3, r3, #16
 8004a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a5a:	4b61      	ldr	r3, [pc, #388]	; (8004be0 <MX_GPIO_Init+0x1a8>)
 8004a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5e:	f003 0310 	and.w	r3, r3, #16
 8004a62:	61bb      	str	r3, [r7, #24]
 8004a64:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004a66:	4b5e      	ldr	r3, [pc, #376]	; (8004be0 <MX_GPIO_Init+0x1a8>)
 8004a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a6a:	4a5d      	ldr	r2, [pc, #372]	; (8004be0 <MX_GPIO_Init+0x1a8>)
 8004a6c:	f043 0304 	orr.w	r3, r3, #4
 8004a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a72:	4b5b      	ldr	r3, [pc, #364]	; (8004be0 <MX_GPIO_Init+0x1a8>)
 8004a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a76:	f003 0304 	and.w	r3, r3, #4
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8004a7e:	4b58      	ldr	r3, [pc, #352]	; (8004be0 <MX_GPIO_Init+0x1a8>)
 8004a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a82:	4a57      	ldr	r2, [pc, #348]	; (8004be0 <MX_GPIO_Init+0x1a8>)
 8004a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a8a:	4b55      	ldr	r3, [pc, #340]	; (8004be0 <MX_GPIO_Init+0x1a8>)
 8004a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a92:	613b      	str	r3, [r7, #16]
 8004a94:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004a96:	4b52      	ldr	r3, [pc, #328]	; (8004be0 <MX_GPIO_Init+0x1a8>)
 8004a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a9a:	4a51      	ldr	r2, [pc, #324]	; (8004be0 <MX_GPIO_Init+0x1a8>)
 8004a9c:	f043 0301 	orr.w	r3, r3, #1
 8004aa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004aa2:	4b4f      	ldr	r3, [pc, #316]	; (8004be0 <MX_GPIO_Init+0x1a8>)
 8004aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004aae:	4b4c      	ldr	r3, [pc, #304]	; (8004be0 <MX_GPIO_Init+0x1a8>)
 8004ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab2:	4a4b      	ldr	r2, [pc, #300]	; (8004be0 <MX_GPIO_Init+0x1a8>)
 8004ab4:	f043 0302 	orr.w	r3, r3, #2
 8004ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004aba:	4b49      	ldr	r3, [pc, #292]	; (8004be0 <MX_GPIO_Init+0x1a8>)
 8004abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	60bb      	str	r3, [r7, #8]
 8004ac4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8004ac6:	4b46      	ldr	r3, [pc, #280]	; (8004be0 <MX_GPIO_Init+0x1a8>)
 8004ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aca:	4a45      	ldr	r2, [pc, #276]	; (8004be0 <MX_GPIO_Init+0x1a8>)
 8004acc:	f043 0308 	orr.w	r3, r3, #8
 8004ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ad2:	4b43      	ldr	r3, [pc, #268]	; (8004be0 <MX_GPIO_Init+0x1a8>)
 8004ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad6:	f003 0308 	and.w	r3, r3, #8
 8004ada:	607b      	str	r3, [r7, #4]
 8004adc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f641 013c 	movw	r1, #6204	; 0x183c
 8004ae4:	483f      	ldr	r0, [pc, #252]	; (8004be4 <MX_GPIO_Init+0x1ac>)
 8004ae6:	f003 fc29 	bl	800833c <HAL_GPIO_WritePin>
			|MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_SET);
 8004aea:	2201      	movs	r2, #1
 8004aec:	2130      	movs	r1, #48	; 0x30
 8004aee:	483e      	ldr	r0, [pc, #248]	; (8004be8 <MX_GPIO_Init+0x1b0>)
 8004af0:	f003 fc24 	bl	800833c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8004af4:	2200      	movs	r2, #0
 8004af6:	2178      	movs	r1, #120	; 0x78
 8004af8:	483c      	ldr	r0, [pc, #240]	; (8004bec <MX_GPIO_Init+0x1b4>)
 8004afa:	f003 fc1f 	bl	800833c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
	GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8004afe:	f641 033c 	movw	r3, #6204	; 0x183c
 8004b02:	61fb      	str	r3, [r7, #28]
			|MIRA_EN_PWR_Pin|OCPEN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b04:	2301      	movs	r3, #1
 8004b06:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b10:	f107 031c 	add.w	r3, r7, #28
 8004b14:	4619      	mov	r1, r3
 8004b16:	4833      	ldr	r0, [pc, #204]	; (8004be4 <MX_GPIO_Init+0x1ac>)
 8004b18:	f003 f974 	bl	8007e04 <HAL_GPIO_Init>

	/*Configure GPIO pin : CHG_INT_Pin */
	GPIO_InitStruct.Pin = CHG_INT_Pin;
 8004b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b20:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b22:	2300      	movs	r3, #0
 8004b24:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b26:	2300      	movs	r3, #0
 8004b28:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 8004b2a:	f107 031c 	add.w	r3, r7, #28
 8004b2e:	4619      	mov	r1, r3
 8004b30:	482d      	ldr	r0, [pc, #180]	; (8004be8 <MX_GPIO_Init+0x1b0>)
 8004b32:	f003 f967 	bl	8007e04 <HAL_GPIO_Init>

	/*Configure GPIO pin : LORA_DIG0_Pin */
	GPIO_InitStruct.Pin = LORA_DIG0_Pin;
 8004b36:	2302      	movs	r3, #2
 8004b38:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(LORA_DIG0_GPIO_Port, &GPIO_InitStruct);
 8004b42:	f107 031c 	add.w	r3, r7, #28
 8004b46:	4619      	mov	r1, r3
 8004b48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b4c:	f003 f95a 	bl	8007e04 <HAL_GPIO_Init>

	/*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
	GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 8004b50:	2330      	movs	r3, #48	; 0x30
 8004b52:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b54:	2301      	movs	r3, #1
 8004b56:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b60:	f107 031c 	add.w	r3, r7, #28
 8004b64:	4619      	mov	r1, r3
 8004b66:	4820      	ldr	r0, [pc, #128]	; (8004be8 <MX_GPIO_Init+0x1b0>)
 8004b68:	f003 f94c 	bl	8007e04 <HAL_GPIO_Init>

	/*Configure GPIO pin : OCPFAULT_Pin */
	GPIO_InitStruct.Pin = OCPFAULT_Pin;
 8004b6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b70:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b72:	2300      	movs	r3, #0
 8004b74:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b76:	2301      	movs	r3, #1
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 8004b7a:	f107 031c 	add.w	r3, r7, #28
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4818      	ldr	r0, [pc, #96]	; (8004be4 <MX_GPIO_Init+0x1ac>)
 8004b82:	f003 f93f 	bl	8007e04 <HAL_GPIO_Init>

	/*Configure GPIO pin : CARD_DETECT_Pin */
	GPIO_InitStruct.Pin = CARD_DETECT_Pin;
 8004b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b8a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b90:	2301      	movs	r3, #1
 8004b92:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8004b94:	f107 031c 	add.w	r3, r7, #28
 8004b98:	4619      	mov	r1, r3
 8004b9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b9e:	f003 f931 	bl	8007e04 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8004ba2:	2378      	movs	r3, #120	; 0x78
 8004ba4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004baa:	2300      	movs	r3, #0
 8004bac:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bb2:	f107 031c 	add.w	r3, r7, #28
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	480c      	ldr	r0, [pc, #48]	; (8004bec <MX_GPIO_Init+0x1b4>)
 8004bba:	f003 f923 	bl	8007e04 <HAL_GPIO_Init>

	/*Configure GPIO pin : POWERGOOD_Pin */
	GPIO_InitStruct.Pin = POWERGOOD_Pin;
 8004bbe:	2320      	movs	r3, #32
 8004bc0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 8004bca:	f107 031c 	add.w	r3, r7, #28
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4807      	ldr	r0, [pc, #28]	; (8004bf0 <MX_GPIO_Init+0x1b8>)
 8004bd2:	f003 f917 	bl	8007e04 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8004bd6:	bf00      	nop
 8004bd8:	3730      	adds	r7, #48	; 0x30
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	40021000 	.word	0x40021000
 8004be4:	48001000 	.word	0x48001000
 8004be8:	48000800 	.word	0x48000800
 8004bec:	48000c00 	.word	0x48000c00
 8004bf0:	48000400 	.word	0x48000400

08004bf4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004bf8:	b672      	cpsid	i
}
 8004bfa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	printf("Error_Handler() called");
 8004bfc:	4801      	ldr	r0, [pc, #4]	; (8004c04 <Error_Handler+0x10>)
 8004bfe:	f015 fd53 	bl	801a6a8 <iprintf>
	while (1)
 8004c02:	e7fe      	b.n	8004c02 <Error_Handler+0xe>
 8004c04:	0801ce8c 	.word	0x0801ce8c

08004c08 <CRC16>:
//MIRA communication status
//volatile unsigned mira_ready_for_comm = 1;


uint16_t CRC16 (uint8_t *nData, uint16_t wLength)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	460b      	mov	r3, r1
 8004c12:	807b      	strh	r3, [r7, #2]
			0X4E00, 0X8EC1, 0X8F81, 0X4F40, 0X8D01, 0X4DC0, 0X4C80, 0X8C41,
			0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
			0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

	uint8_t nTemp;
	uint16_t wCRCWord = 0xFFFF;
 8004c14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c18:	81fb      	strh	r3, [r7, #14]

	while (wLength--)
 8004c1a:	e011      	b.n	8004c40 <CRC16+0x38>
	{
		nTemp = *nData++ ^ wCRCWord;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	1c5a      	adds	r2, r3, #1
 8004c20:	607a      	str	r2, [r7, #4]
 8004c22:	781a      	ldrb	r2, [r3, #0]
 8004c24:	89fb      	ldrh	r3, [r7, #14]
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	4053      	eors	r3, r2
 8004c2a:	737b      	strb	r3, [r7, #13]
		wCRCWord >>= 8;
 8004c2c:	89fb      	ldrh	r3, [r7, #14]
 8004c2e:	0a1b      	lsrs	r3, r3, #8
 8004c30:	81fb      	strh	r3, [r7, #14]
		wCRCWord ^= wCRCTable[nTemp];
 8004c32:	7b7b      	ldrb	r3, [r7, #13]
 8004c34:	4a08      	ldr	r2, [pc, #32]	; (8004c58 <CRC16+0x50>)
 8004c36:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004c3a:	89fb      	ldrh	r3, [r7, #14]
 8004c3c:	4053      	eors	r3, r2
 8004c3e:	81fb      	strh	r3, [r7, #14]
	while (wLength--)
 8004c40:	887b      	ldrh	r3, [r7, #2]
 8004c42:	1e5a      	subs	r2, r3, #1
 8004c44:	807a      	strh	r2, [r7, #2]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1e8      	bne.n	8004c1c <CRC16+0x14>
	}
	return wCRCWord;
 8004c4a:	89fb      	ldrh	r3, [r7, #14]

}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	0801cf30 	.word	0x0801cf30

08004c5c <mira_command_empty_payload>:

HAL_StatusTypeDef mira_command_empty_payload(UART_HandleTypeDef *huart, uint8_t command, uint8_t reg, uint8_t *rxBuffer, uint32_t Timeout){
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08c      	sub	sp, #48	; 0x30
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	607b      	str	r3, [r7, #4]
 8004c66:	460b      	mov	r3, r1
 8004c68:	72fb      	strb	r3, [r7, #11]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	72bb      	strb	r3, [r7, #10]
//	HAL_Delay(500);
//	mira_ready_for_comm = 0;

	HAL_StatusTypeDef status;
	uint8_t message[10];
	uint8_t sync[2] = {0x5a, 0xce};
 8004c6e:	f64c 635a 	movw	r3, #52826	; 0xce5a
 8004c72:	83bb      	strh	r3, [r7, #28]
	// do this (below) properly some other time
	uint8_t length[2] = {0x00, 0x01};
 8004c74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c78:	833b      	strh	r3, [r7, #24]
	uint8_t src[1] = {0xc1};
 8004c7a:	23c1      	movs	r3, #193	; 0xc1
 8004c7c:	753b      	strb	r3, [r7, #20]
	uint8_t dest[1] = {0xe1};
 8004c7e:	23e1      	movs	r3, #225	; 0xe1
 8004c80:	743b      	strb	r3, [r7, #16]
	uint16_t sum = 0;
 8004c82:	2300      	movs	r3, #0
 8004c84:	85fb      	strh	r3, [r7, #46]	; 0x2e

	message[0] = sync[0];
 8004c86:	7f3b      	ldrb	r3, [r7, #28]
 8004c88:	f887 3020 	strb.w	r3, [r7, #32]
	message[1] = sync[1];
 8004c8c:	7f7b      	ldrb	r3, [r7, #29]
 8004c8e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	message[2] = length[0];
 8004c92:	7e3b      	ldrb	r3, [r7, #24]
 8004c94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	message[3] = length[1];
 8004c98:	7e7b      	ldrb	r3, [r7, #25]
 8004c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	message[4] = src[0];
 8004c9e:	7d3b      	ldrb	r3, [r7, #20]
 8004ca0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	message[5] = dest[0];
 8004ca4:	7c3b      	ldrb	r3, [r7, #16]
 8004ca6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	message[6] = command;
 8004caa:	7afb      	ldrb	r3, [r7, #11]
 8004cac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	message[7] = reg;
 8004cb0:	7abb      	ldrb	r3, [r7, #10]
 8004cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	sum = CRC16(message+2, 10);
 8004cb6:	f107 0320 	add.w	r3, r7, #32
 8004cba:	3302      	adds	r3, #2
 8004cbc:	210a      	movs	r1, #10
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff ffa2 	bl	8004c08 <CRC16>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	85fb      	strh	r3, [r7, #46]	; 0x2e

	message[8] = (sum&0xFF00)>>8;
 8004cc8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004cca:	0a1b      	lsrs	r3, r3, #8
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	message[9] = (sum&0x00FF);
 8004cd4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	//while (huart->RxState != HAL_UART_STATE_READY) {HAL_Delay(1);}

	// Enable transmitter and disable receiver
	HAL_GPIO_WritePin(RX_EN_2_GPIO_Port, RX_EN_2_Pin, GPIO_PIN_SET);
 8004cdc:	2201      	movs	r2, #1
 8004cde:	2104      	movs	r1, #4
 8004ce0:	4819      	ldr	r0, [pc, #100]	; (8004d48 <mira_command_empty_payload+0xec>)
 8004ce2:	f003 fb2b 	bl	800833c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TX_EN_2_GPIO_Port, TX_EN_2_Pin, GPIO_PIN_SET);
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	2108      	movs	r1, #8
 8004cea:	4817      	ldr	r0, [pc, #92]	; (8004d48 <mira_command_empty_payload+0xec>)
 8004cec:	f003 fb26 	bl	800833c <HAL_GPIO_WritePin>

	// write given value to register at given address
	status = HAL_UART_Transmit(huart, message, 10, Timeout);
 8004cf0:	f107 0120 	add.w	r1, r7, #32
 8004cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf6:	220a      	movs	r2, #10
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f00c f909 	bl	8010f10 <HAL_UART_Transmit>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	// Enable receiver and disable transmitter
	HAL_GPIO_WritePin(RX_EN_2_GPIO_Port, RX_EN_2_Pin, GPIO_PIN_RESET);
 8004d04:	2200      	movs	r2, #0
 8004d06:	2104      	movs	r1, #4
 8004d08:	480f      	ldr	r0, [pc, #60]	; (8004d48 <mira_command_empty_payload+0xec>)
 8004d0a:	f003 fb17 	bl	800833c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TX_EN_2_GPIO_Port, TX_EN_2_Pin, GPIO_PIN_RESET);
 8004d0e:	2200      	movs	r2, #0
 8004d10:	2108      	movs	r1, #8
 8004d12:	480d      	ldr	r0, [pc, #52]	; (8004d48 <mira_command_empty_payload+0xec>)
 8004d14:	f003 fb12 	bl	800833c <HAL_GPIO_WritePin>
	if (status != HAL_OK) {return status;}
 8004d18:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d002      	beq.n	8004d26 <mira_command_empty_payload+0xca>
 8004d20:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d24:	e00c      	b.n	8004d40 <mira_command_empty_payload+0xe4>

	status = HAL_UART_Receive_DMA(huart, rxBuffer, sizeof(rxBuffer));
 8004d26:	2204      	movs	r2, #4
 8004d28:	6879      	ldr	r1, [r7, #4]
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f00c f980 	bl	8011030 <HAL_UART_Receive_DMA>
 8004d30:	4603      	mov	r3, r0
 8004d32:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	HAL_Delay(3);
 8004d36:	2003      	movs	r0, #3
 8004d38:	f002 fc00 	bl	800753c <HAL_Delay>


	return status;
 8004d3c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d

}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3730      	adds	r7, #48	; 0x30
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	48001000 	.word	0x48001000

08004d4c <mira_command>:


HAL_StatusTypeDef mira_command(UART_HandleTypeDef *huart, uint8_t command, uint8_t reg, uint8_t *data, uint8_t *rxBuffer, uint32_t Timeout){
 8004d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d50:	b08e      	sub	sp, #56	; 0x38
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	60f8      	str	r0, [r7, #12]
 8004d56:	607b      	str	r3, [r7, #4]
 8004d58:	460b      	mov	r3, r1
 8004d5a:	72fb      	strb	r3, [r7, #11]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	72bb      	strb	r3, [r7, #10]
 8004d60:	466b      	mov	r3, sp
 8004d62:	469a      	mov	sl, r3
	//Wait that previous instance of communication is done (toggled by HAL_UART_RxCpltCallback)
	//while (!mira_ready_for_comm);//{HAL_Delay(100);}
//	HAL_Delay(500);
//	mira_ready_for_comm = 0;

	uint8_t length_val = sizeof(data)+1;
 8004d64:	2305      	movs	r3, #5
 8004d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	HAL_StatusTypeDef status;
	uint8_t message[9+length_val];
 8004d6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d6e:	f103 0609 	add.w	r6, r3, #9
 8004d72:	1e73      	subs	r3, r6, #1
 8004d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d76:	4632      	mov	r2, r6
 8004d78:	2300      	movs	r3, #0
 8004d7a:	4690      	mov	r8, r2
 8004d7c:	4699      	mov	r9, r3
 8004d7e:	f04f 0200 	mov.w	r2, #0
 8004d82:	f04f 0300 	mov.w	r3, #0
 8004d86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d92:	4632      	mov	r2, r6
 8004d94:	2300      	movs	r3, #0
 8004d96:	4614      	mov	r4, r2
 8004d98:	461d      	mov	r5, r3
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	f04f 0300 	mov.w	r3, #0
 8004da2:	00eb      	lsls	r3, r5, #3
 8004da4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004da8:	00e2      	lsls	r2, r4, #3
 8004daa:	4633      	mov	r3, r6
 8004dac:	3307      	adds	r3, #7
 8004dae:	08db      	lsrs	r3, r3, #3
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	ebad 0d03 	sub.w	sp, sp, r3
 8004db6:	466b      	mov	r3, sp
 8004db8:	3300      	adds	r3, #0
 8004dba:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t sync[2] = {0x5a, 0xce};
 8004dbc:	f64c 635a 	movw	r3, #52826	; 0xce5a
 8004dc0:	843b      	strh	r3, [r7, #32]
	// do this (below) properly some other time
	uint8_t length[2] = {0x00, length_val};
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	773b      	strb	r3, [r7, #28]
 8004dc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004dca:	777b      	strb	r3, [r7, #29]
	uint8_t src[1] = {0xc1};
 8004dcc:	23c1      	movs	r3, #193	; 0xc1
 8004dce:	763b      	strb	r3, [r7, #24]
	uint8_t dest[1] = {0xe1};
 8004dd0:	23e1      	movs	r3, #225	; 0xe1
 8004dd2:	753b      	strb	r3, [r7, #20]
	uint16_t sum = 0;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	84fb      	strh	r3, [r7, #38]	; 0x26

	message[0] = sync[0];
 8004dd8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dde:	701a      	strb	r2, [r3, #0]
	message[1] = sync[1];
 8004de0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8004de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de6:	705a      	strb	r2, [r3, #1]
	message[2] = length[0];
 8004de8:	7f3a      	ldrb	r2, [r7, #28]
 8004dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dec:	709a      	strb	r2, [r3, #2]
	message[3] = length[1];
 8004dee:	7f7a      	ldrb	r2, [r7, #29]
 8004df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df2:	70da      	strb	r2, [r3, #3]
	message[4] = src[0];
 8004df4:	7e3a      	ldrb	r2, [r7, #24]
 8004df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df8:	711a      	strb	r2, [r3, #4]
	message[5] = dest[0];
 8004dfa:	7d3a      	ldrb	r2, [r7, #20]
 8004dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfe:	715a      	strb	r2, [r3, #5]
	message[6] = command;
 8004e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e02:	7afa      	ldrb	r2, [r7, #11]
 8004e04:	719a      	strb	r2, [r3, #6]
	message[7] = reg;
 8004e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e08:	7aba      	ldrb	r2, [r7, #10]
 8004e0a:	71da      	strb	r2, [r3, #7]

	int i;
	for (i = 0; i < length_val; i++) {
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8004e10:	e00a      	b.n	8004e28 <mira_command+0xdc>
		message[8+i] = data[i];
 8004e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	441a      	add	r2, r3
 8004e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e1a:	3308      	adds	r3, #8
 8004e1c:	7811      	ldrb	r1, [r2, #0]
 8004e1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e20:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < length_val; i++) {
 8004e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e24:	3301      	adds	r3, #1
 8004e26:	637b      	str	r3, [r7, #52]	; 0x34
 8004e28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	dbef      	blt.n	8004e12 <mira_command+0xc6>
	}

	sum = CRC16(message+2, 10);
 8004e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e34:	3302      	adds	r3, #2
 8004e36:	210a      	movs	r1, #10
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7ff fee5 	bl	8004c08 <CRC16>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	84fb      	strh	r3, [r7, #38]	; 0x26

	message[9+i] = (sum&0xFF00)>>8;
 8004e42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e44:	0a1b      	lsrs	r3, r3, #8
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4a:	3309      	adds	r3, #9
 8004e4c:	b2d1      	uxtb	r1, r2
 8004e4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e50:	54d1      	strb	r1, [r2, r3]

	message[10+i] = (sum&0x00FF);
 8004e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e54:	330a      	adds	r3, #10
 8004e56:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004e58:	b2d1      	uxtb	r1, r2
 8004e5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e5c:	54d1      	strb	r1, [r2, r3]

	//while (huart->RxState != HAL_UART_STATE_READY) {HAL_Delay(1);}

	// Enable transmitter and disable receiver
	HAL_GPIO_WritePin(RX_EN_2_GPIO_Port, RX_EN_2_Pin, GPIO_PIN_SET);
 8004e5e:	2201      	movs	r2, #1
 8004e60:	2104      	movs	r1, #4
 8004e62:	481a      	ldr	r0, [pc, #104]	; (8004ecc <mira_command+0x180>)
 8004e64:	f003 fa6a 	bl	800833c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TX_EN_2_GPIO_Port, TX_EN_2_Pin, GPIO_PIN_SET);
 8004e68:	2201      	movs	r2, #1
 8004e6a:	2108      	movs	r1, #8
 8004e6c:	4817      	ldr	r0, [pc, #92]	; (8004ecc <mira_command+0x180>)
 8004e6e:	f003 fa65 	bl	800833c <HAL_GPIO_WritePin>

	// write given value to register at given address
	status = HAL_UART_Transmit(huart, message, sizeof(message), Timeout);
 8004e72:	b2b2      	uxth	r2, r6
 8004e74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f00c f849 	bl	8010f10 <HAL_UART_Transmit>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	// Enable receiver and disable transmitter
	HAL_GPIO_WritePin(RX_EN_2_GPIO_Port, RX_EN_2_Pin, GPIO_PIN_RESET);
 8004e84:	2200      	movs	r2, #0
 8004e86:	2104      	movs	r1, #4
 8004e88:	4810      	ldr	r0, [pc, #64]	; (8004ecc <mira_command+0x180>)
 8004e8a:	f003 fa57 	bl	800833c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TX_EN_2_GPIO_Port, TX_EN_2_Pin, GPIO_PIN_RESET);
 8004e8e:	2200      	movs	r2, #0
 8004e90:	2108      	movs	r1, #8
 8004e92:	480e      	ldr	r0, [pc, #56]	; (8004ecc <mira_command+0x180>)
 8004e94:	f003 fa52 	bl	800833c <HAL_GPIO_WritePin>
	if (status != HAL_OK) {return status;}
 8004e98:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d002      	beq.n	8004ea6 <mira_command+0x15a>
 8004ea0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004ea4:	e00c      	b.n	8004ec0 <mira_command+0x174>

	status = HAL_UART_Receive_DMA(huart, rxBuffer, sizeof(rxBuffer));
 8004ea6:	2204      	movs	r2, #4
 8004ea8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f00c f8c0 	bl	8011030 <HAL_UART_Receive_DMA>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	HAL_Delay(3);
 8004eb6:	2003      	movs	r0, #3
 8004eb8:	f002 fb40 	bl	800753c <HAL_Delay>


	return status;
 8004ebc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004ec0:	46d5      	mov	sp, sl

}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3738      	adds	r7, #56	; 0x38
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ecc:	48001000 	.word	0x48001000

08004ed0 <mira_science_data>:


HAL_StatusTypeDef mira_science_data(UART_HandleTypeDef *huart, uint8_t *science_Rx, uint8_t *response_Rx, uint32_t Timeout){
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b088      	sub	sp, #32
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
 8004edc:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef status;
	uint8_t mira_write_Tx_payload[4] = {0x00, 0x00, 0x00, 0x00};
 8004ede:	2300      	movs	r3, #0
 8004ee0:	613b      	str	r3, [r7, #16]

	// Get the science data and save it to rxBuffer
	status = mira_command_empty_payload(huart, GET_SCIENCE_DATA, 0x00, science_Rx, Timeout);
 8004ee2:	2140      	movs	r1, #64	; 0x40
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2200      	movs	r2, #0
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f7ff feb5 	bl	8004c5c <mira_command_empty_payload>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 8004ef6:	7dfb      	ldrb	r3, [r7, #23]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00c      	beq.n	8004f16 <mira_science_data+0x46>
		HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8004efc:	2120      	movs	r1, #32
 8004efe:	4811      	ldr	r0, [pc, #68]	; (8004f44 <mira_science_data+0x74>)
 8004f00:	f003 fa34 	bl	800836c <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 8004f04:	2032      	movs	r0, #50	; 0x32
 8004f06:	f002 fb19 	bl	800753c <HAL_Delay>
		HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8004f0a:	2120      	movs	r1, #32
 8004f0c:	480d      	ldr	r0, [pc, #52]	; (8004f44 <mira_science_data+0x74>)
 8004f0e:	f003 fa2d 	bl	800836c <HAL_GPIO_TogglePin>
		return status;
 8004f12:	7dfb      	ldrb	r3, [r7, #23]
 8004f14:	e012      	b.n	8004f3c <mira_science_data+0x6c>
	}

	// Mark as read
	mira_write_Tx_payload[3] = MARK_AS_READ;
 8004f16:	2381      	movs	r3, #129	; 0x81
 8004f18:	74fb      	strb	r3, [r7, #19]
	status = mira_command(huart, WRITE_REGISTER, CHECK_FOR_READ, mira_write_Tx_payload, response_Rx, 5000);
 8004f1a:	2103      	movs	r1, #3
 8004f1c:	2080      	movs	r0, #128	; 0x80
 8004f1e:	f107 0210 	add.w	r2, r7, #16
 8004f22:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f26:	9301      	str	r3, [sp, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	4602      	mov	r2, r0
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f7ff ff0b 	bl	8004d4c <mira_command>
 8004f36:	4603      	mov	r3, r0
 8004f38:	75fb      	strb	r3, [r7, #23]

	// return status
	return status;
 8004f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3718      	adds	r7, #24
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	48000c00 	.word	0x48000c00

08004f48 <mira_test_sequence>:

HAL_StatusTypeDef mira_test_sequence(UART_HandleTypeDef *huart, uint8_t *science_Rx, uint8_t *response_Rx, uint32_t Timeout) {
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08a      	sub	sp, #40	; 0x28
 8004f4c:	af02      	add	r7, sp, #8
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef status;
	uint8_t mira_response_Rx[10];
	uint8_t mira_write_Tx_payload[4] = {0x00, 0x00, 0x00, 0x00};
 8004f56:	2300      	movs	r3, #0
 8004f58:	613b      	str	r3, [r7, #16]
	// Set time to 0
//	status = mira_command(huart, WRITE_REGISTER, 0x0F, mira_write_Tx_payload, mira_response_Rx, Timeout);
//	if (status != HAL_OK) {return status;}

	// Activate ADC
	mira_write_Tx_payload[3] = 0x01;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	74fb      	strb	r3, [r7, #19]
	status = mira_command(huart, WRITE_REGISTER, 0x02, mira_write_Tx_payload, mira_response_Rx, Timeout);
 8004f5e:	2103      	movs	r1, #3
 8004f60:	f107 0210 	add.w	r2, r7, #16
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	9301      	str	r3, [sp, #4]
 8004f68:	f107 0314 	add.w	r3, r7, #20
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	2202      	movs	r2, #2
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f7ff feea 	bl	8004d4c <mira_command>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	77fb      	strb	r3, [r7, #31]
	if (status != HAL_OK) {return status;}
 8004f7c:	7ffb      	ldrb	r3, [r7, #31]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <mira_test_sequence+0x3e>
 8004f82:	7ffb      	ldrb	r3, [r7, #31]
 8004f84:	e203      	b.n	800538e <mira_test_sequence+0x446>
	mira_write_Tx_payload[3] = 0x00;
 8004f86:	2300      	movs	r3, #0
 8004f88:	74fb      	strb	r3, [r7, #19]

	HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8004f8a:	2120      	movs	r1, #32
 8004f8c:	48c4      	ldr	r0, [pc, #784]	; (80052a0 <mira_test_sequence+0x358>)
 8004f8e:	f003 f9ed 	bl	800836c <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8004f92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f96:	f002 fad1 	bl	800753c <HAL_Delay>
	HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8004f9a:	2120      	movs	r1, #32
 8004f9c:	48c0      	ldr	r0, [pc, #768]	; (80052a0 <mira_test_sequence+0x358>)
 8004f9e:	f003 f9e5 	bl	800836c <HAL_GPIO_TogglePin>

	// Select ADC channel for analysis
	mira_write_Tx_payload[3] = 0x05;
 8004fa2:	2305      	movs	r3, #5
 8004fa4:	74fb      	strb	r3, [r7, #19]
	status = mira_command(huart, WRITE_REGISTER, 0x03, mira_write_Tx_payload, mira_response_Rx, Timeout);
 8004fa6:	2103      	movs	r1, #3
 8004fa8:	f107 0210 	add.w	r2, r7, #16
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	9301      	str	r3, [sp, #4]
 8004fb0:	f107 0314 	add.w	r3, r7, #20
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	2203      	movs	r2, #3
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f7ff fec6 	bl	8004d4c <mira_command>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	77fb      	strb	r3, [r7, #31]
	if (status != HAL_OK) {return status;}
 8004fc4:	7ffb      	ldrb	r3, [r7, #31]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d001      	beq.n	8004fce <mira_test_sequence+0x86>
 8004fca:	7ffb      	ldrb	r3, [r7, #31]
 8004fcc:	e1df      	b.n	800538e <mira_test_sequence+0x446>
	mira_write_Tx_payload[3] = 0x00;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	74fb      	strb	r3, [r7, #19]

	HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8004fd2:	2120      	movs	r1, #32
 8004fd4:	48b2      	ldr	r0, [pc, #712]	; (80052a0 <mira_test_sequence+0x358>)
 8004fd6:	f003 f9c9 	bl	800836c <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8004fda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004fde:	f002 faad 	bl	800753c <HAL_Delay>
		HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8004fe2:	2120      	movs	r1, #32
 8004fe4:	48ae      	ldr	r0, [pc, #696]	; (80052a0 <mira_test_sequence+0x358>)
 8004fe6:	f003 f9c1 	bl	800836c <HAL_GPIO_TogglePin>

	// Set calibration multiplier, 3250 = 0xCB2
	mira_write_Tx_payload[2] = 0x0C;
 8004fea:	230c      	movs	r3, #12
 8004fec:	74bb      	strb	r3, [r7, #18]
	mira_write_Tx_payload[3] = 0xB2;
 8004fee:	23b2      	movs	r3, #178	; 0xb2
 8004ff0:	74fb      	strb	r3, [r7, #19]
	status = mira_command(huart, WRITE_REGISTER, 0x0E, mira_write_Tx_payload, mira_response_Rx, Timeout);
 8004ff2:	2103      	movs	r1, #3
 8004ff4:	f107 0210 	add.w	r2, r7, #16
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	9301      	str	r3, [sp, #4]
 8004ffc:	f107 0314 	add.w	r3, r7, #20
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	4613      	mov	r3, r2
 8005004:	220e      	movs	r2, #14
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f7ff fea0 	bl	8004d4c <mira_command>
 800500c:	4603      	mov	r3, r0
 800500e:	77fb      	strb	r3, [r7, #31]
	if (status != HAL_OK) {return status;}
 8005010:	7ffb      	ldrb	r3, [r7, #31]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <mira_test_sequence+0xd2>
 8005016:	7ffb      	ldrb	r3, [r7, #31]
 8005018:	e1b9      	b.n	800538e <mira_test_sequence+0x446>
	mira_write_Tx_payload[2] = 0x00;
 800501a:	2300      	movs	r3, #0
 800501c:	74bb      	strb	r3, [r7, #18]
	mira_write_Tx_payload[3] = 0x00;
 800501e:	2300      	movs	r3, #0
 8005020:	74fb      	strb	r3, [r7, #19]

	HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8005022:	2120      	movs	r1, #32
 8005024:	489e      	ldr	r0, [pc, #632]	; (80052a0 <mira_test_sequence+0x358>)
 8005026:	f003 f9a1 	bl	800836c <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 800502a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800502e:	f002 fa85 	bl	800753c <HAL_Delay>
		HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8005032:	2120      	movs	r1, #32
 8005034:	489a      	ldr	r0, [pc, #616]	; (80052a0 <mira_test_sequence+0x358>)
 8005036:	f003 f999 	bl	800836c <HAL_GPIO_TogglePin>


	// Set integration time to 5 seconds
	mira_write_Tx_payload[3] = 0x05;
 800503a:	2305      	movs	r3, #5
 800503c:	74fb      	strb	r3, [r7, #19]
	status = mira_command(huart, WRITE_REGISTER, 0x07, mira_write_Tx_payload, mira_response_Rx, Timeout);
 800503e:	2103      	movs	r1, #3
 8005040:	f107 0210 	add.w	r2, r7, #16
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	9301      	str	r3, [sp, #4]
 8005048:	f107 0314 	add.w	r3, r7, #20
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	4613      	mov	r3, r2
 8005050:	2207      	movs	r2, #7
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f7ff fe7a 	bl	8004d4c <mira_command>
 8005058:	4603      	mov	r3, r0
 800505a:	77fb      	strb	r3, [r7, #31]
	if (status != HAL_OK) {return status;}
 800505c:	7ffb      	ldrb	r3, [r7, #31]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <mira_test_sequence+0x11e>
 8005062:	7ffb      	ldrb	r3, [r7, #31]
 8005064:	e193      	b.n	800538e <mira_test_sequence+0x446>
	mira_write_Tx_payload[3] = 0x00;
 8005066:	2300      	movs	r3, #0
 8005068:	74fb      	strb	r3, [r7, #19]

	HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 800506a:	2120      	movs	r1, #32
 800506c:	488c      	ldr	r0, [pc, #560]	; (80052a0 <mira_test_sequence+0x358>)
 800506e:	f003 f97d 	bl	800836c <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8005072:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005076:	f002 fa61 	bl	800753c <HAL_Delay>
		HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 800507a:	2120      	movs	r1, #32
 800507c:	4888      	ldr	r0, [pc, #544]	; (80052a0 <mira_test_sequence+0x358>)
 800507e:	f003 f975 	bl	800836c <HAL_GPIO_TogglePin>

	// Skipping read spectrum status

	// Set test pulser size
	mira_write_Tx_payload[2] = 0x07;
 8005082:	2307      	movs	r3, #7
 8005084:	74bb      	strb	r3, [r7, #18]
	mira_write_Tx_payload[3] = 0xFF;
 8005086:	23ff      	movs	r3, #255	; 0xff
 8005088:	74fb      	strb	r3, [r7, #19]
	status = mira_command(huart, WRITE_REGISTER, 0x0D, mira_write_Tx_payload, mira_response_Rx, Timeout);
 800508a:	2103      	movs	r1, #3
 800508c:	f107 0210 	add.w	r2, r7, #16
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	9301      	str	r3, [sp, #4]
 8005094:	f107 0314 	add.w	r3, r7, #20
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	4613      	mov	r3, r2
 800509c:	220d      	movs	r2, #13
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f7ff fe54 	bl	8004d4c <mira_command>
 80050a4:	4603      	mov	r3, r0
 80050a6:	77fb      	strb	r3, [r7, #31]
	if (status != HAL_OK) {return status;}
 80050a8:	7ffb      	ldrb	r3, [r7, #31]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <mira_test_sequence+0x16a>
 80050ae:	7ffb      	ldrb	r3, [r7, #31]
 80050b0:	e16d      	b.n	800538e <mira_test_sequence+0x446>
	mira_write_Tx_payload[2] = 0x00;
 80050b2:	2300      	movs	r3, #0
 80050b4:	74bb      	strb	r3, [r7, #18]
	mira_write_Tx_payload[3] = 0x00;
 80050b6:	2300      	movs	r3, #0
 80050b8:	74fb      	strb	r3, [r7, #19]

	HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 80050ba:	2120      	movs	r1, #32
 80050bc:	4878      	ldr	r0, [pc, #480]	; (80052a0 <mira_test_sequence+0x358>)
 80050be:	f003 f955 	bl	800836c <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80050c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80050c6:	f002 fa39 	bl	800753c <HAL_Delay>
		HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 80050ca:	2120      	movs	r1, #32
 80050cc:	4874      	ldr	r0, [pc, #464]	; (80052a0 <mira_test_sequence+0x358>)
 80050ce:	f003 f94d 	bl	800836c <HAL_GPIO_TogglePin>

	// Activate test pulser
	mira_write_Tx_payload[3] = 0x01;
 80050d2:	2301      	movs	r3, #1
 80050d4:	74fb      	strb	r3, [r7, #19]
	status = mira_command(huart, WRITE_REGISTER, 0x0C, mira_write_Tx_payload, mira_response_Rx, Timeout);
 80050d6:	2103      	movs	r1, #3
 80050d8:	f107 0210 	add.w	r2, r7, #16
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	9301      	str	r3, [sp, #4]
 80050e0:	f107 0314 	add.w	r3, r7, #20
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	4613      	mov	r3, r2
 80050e8:	220c      	movs	r2, #12
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f7ff fe2e 	bl	8004d4c <mira_command>
 80050f0:	4603      	mov	r3, r0
 80050f2:	77fb      	strb	r3, [r7, #31]
	if (status != HAL_OK) {return status;}
 80050f4:	7ffb      	ldrb	r3, [r7, #31]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <mira_test_sequence+0x1b6>
 80050fa:	7ffb      	ldrb	r3, [r7, #31]
 80050fc:	e147      	b.n	800538e <mira_test_sequence+0x446>
	mira_write_Tx_payload[3] = 0x00;
 80050fe:	2300      	movs	r3, #0
 8005100:	74fb      	strb	r3, [r7, #19]

	HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8005102:	2120      	movs	r1, #32
 8005104:	4866      	ldr	r0, [pc, #408]	; (80052a0 <mira_test_sequence+0x358>)
 8005106:	f003 f931 	bl	800836c <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 800510a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800510e:	f002 fa15 	bl	800753c <HAL_Delay>
		HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8005112:	2120      	movs	r1, #32
 8005114:	4862      	ldr	r0, [pc, #392]	; (80052a0 <mira_test_sequence+0x358>)
 8005116:	f003 f929 	bl	800836c <HAL_GPIO_TogglePin>

	// Activate analysis using default parameters
	mira_write_Tx_payload[3] = 0x01;
 800511a:	2301      	movs	r3, #1
 800511c:	74fb      	strb	r3, [r7, #19]
	status = mira_command(huart, WRITE_REGISTER, 0x06, mira_write_Tx_payload, mira_response_Rx, Timeout);
 800511e:	2103      	movs	r1, #3
 8005120:	f107 0210 	add.w	r2, r7, #16
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	9301      	str	r3, [sp, #4]
 8005128:	f107 0314 	add.w	r3, r7, #20
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	4613      	mov	r3, r2
 8005130:	2206      	movs	r2, #6
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f7ff fe0a 	bl	8004d4c <mira_command>
 8005138:	4603      	mov	r3, r0
 800513a:	77fb      	strb	r3, [r7, #31]
	if (status != HAL_OK) {return status;}
 800513c:	7ffb      	ldrb	r3, [r7, #31]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <mira_test_sequence+0x1fe>
 8005142:	7ffb      	ldrb	r3, [r7, #31]
 8005144:	e123      	b.n	800538e <mira_test_sequence+0x446>
	mira_write_Tx_payload[3] = 0x00;
 8005146:	2300      	movs	r3, #0
 8005148:	74fb      	strb	r3, [r7, #19]

	HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 800514a:	2120      	movs	r1, #32
 800514c:	4854      	ldr	r0, [pc, #336]	; (80052a0 <mira_test_sequence+0x358>)
 800514e:	f003 f90d 	bl	800836c <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8005152:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005156:	f002 f9f1 	bl	800753c <HAL_Delay>
		HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 800515a:	2120      	movs	r1, #32
 800515c:	4850      	ldr	r0, [pc, #320]	; (80052a0 <mira_test_sequence+0x358>)
 800515e:	f003 f905 	bl	800836c <HAL_GPIO_TogglePin>

	// Pause while integration happens
	HAL_Delay(800);
 8005162:	f44f 7048 	mov.w	r0, #800	; 0x320
 8005166:	f002 f9e9 	bl	800753c <HAL_Delay>

	// Set test pulser size
	mira_write_Tx_payload[2] = 0x04;
 800516a:	2304      	movs	r3, #4
 800516c:	74bb      	strb	r3, [r7, #18]
	mira_write_Tx_payload[3] = 0x00;
 800516e:	2300      	movs	r3, #0
 8005170:	74fb      	strb	r3, [r7, #19]
	status = mira_command(huart, WRITE_REGISTER, 0x0D, mira_write_Tx_payload, mira_response_Rx, Timeout);
 8005172:	2103      	movs	r1, #3
 8005174:	f107 0210 	add.w	r2, r7, #16
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	9301      	str	r3, [sp, #4]
 800517c:	f107 0314 	add.w	r3, r7, #20
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	4613      	mov	r3, r2
 8005184:	220d      	movs	r2, #13
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f7ff fde0 	bl	8004d4c <mira_command>
 800518c:	4603      	mov	r3, r0
 800518e:	77fb      	strb	r3, [r7, #31]
	if (status != HAL_OK) {return status;}
 8005190:	7ffb      	ldrb	r3, [r7, #31]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <mira_test_sequence+0x252>
 8005196:	7ffb      	ldrb	r3, [r7, #31]
 8005198:	e0f9      	b.n	800538e <mira_test_sequence+0x446>
	mira_write_Tx_payload[2] = 0x00;
 800519a:	2300      	movs	r3, #0
 800519c:	74bb      	strb	r3, [r7, #18]
	mira_write_Tx_payload[3] = 0x00;
 800519e:	2300      	movs	r3, #0
 80051a0:	74fb      	strb	r3, [r7, #19]

	HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 80051a2:	2120      	movs	r1, #32
 80051a4:	483e      	ldr	r0, [pc, #248]	; (80052a0 <mira_test_sequence+0x358>)
 80051a6:	f003 f8e1 	bl	800836c <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80051aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80051ae:	f002 f9c5 	bl	800753c <HAL_Delay>
		HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 80051b2:	2120      	movs	r1, #32
 80051b4:	483a      	ldr	r0, [pc, #232]	; (80052a0 <mira_test_sequence+0x358>)
 80051b6:	f003 f8d9 	bl	800836c <HAL_GPIO_TogglePin>

	// Pause while integration happens
	HAL_Delay(1500);
 80051ba:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80051be:	f002 f9bd 	bl	800753c <HAL_Delay>

	// Set test pulser size
	mira_write_Tx_payload[2] = 0x05;
 80051c2:	2305      	movs	r3, #5
 80051c4:	74bb      	strb	r3, [r7, #18]
	mira_write_Tx_payload[3] = 0xDC;
 80051c6:	23dc      	movs	r3, #220	; 0xdc
 80051c8:	74fb      	strb	r3, [r7, #19]
	status = mira_command(huart, WRITE_REGISTER, 0x0D, mira_write_Tx_payload, mira_response_Rx, Timeout);
 80051ca:	2103      	movs	r1, #3
 80051cc:	f107 0210 	add.w	r2, r7, #16
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	9301      	str	r3, [sp, #4]
 80051d4:	f107 0314 	add.w	r3, r7, #20
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	4613      	mov	r3, r2
 80051dc:	220d      	movs	r2, #13
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f7ff fdb4 	bl	8004d4c <mira_command>
 80051e4:	4603      	mov	r3, r0
 80051e6:	77fb      	strb	r3, [r7, #31]
	if (status != HAL_OK) {return status;}
 80051e8:	7ffb      	ldrb	r3, [r7, #31]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <mira_test_sequence+0x2aa>
 80051ee:	7ffb      	ldrb	r3, [r7, #31]
 80051f0:	e0cd      	b.n	800538e <mira_test_sequence+0x446>
	mira_write_Tx_payload[2] = 0x00;
 80051f2:	2300      	movs	r3, #0
 80051f4:	74bb      	strb	r3, [r7, #18]
	mira_write_Tx_payload[3] = 0x00;
 80051f6:	2300      	movs	r3, #0
 80051f8:	74fb      	strb	r3, [r7, #19]

	HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 80051fa:	2120      	movs	r1, #32
 80051fc:	4828      	ldr	r0, [pc, #160]	; (80052a0 <mira_test_sequence+0x358>)
 80051fe:	f003 f8b5 	bl	800836c <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8005202:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005206:	f002 f999 	bl	800753c <HAL_Delay>
		HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 800520a:	2120      	movs	r1, #32
 800520c:	4824      	ldr	r0, [pc, #144]	; (80052a0 <mira_test_sequence+0x358>)
 800520e:	f003 f8ad 	bl	800836c <HAL_GPIO_TogglePin>

	// Pause while integration happens
	HAL_Delay(1000);
 8005212:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005216:	f002 f991 	bl	800753c <HAL_Delay>

	// Set test pulser size
	mira_write_Tx_payload[2] = 0x09;
 800521a:	2309      	movs	r3, #9
 800521c:	74bb      	strb	r3, [r7, #18]
	mira_write_Tx_payload[3] = 0xC4;
 800521e:	23c4      	movs	r3, #196	; 0xc4
 8005220:	74fb      	strb	r3, [r7, #19]
	status = mira_command(huart, WRITE_REGISTER, 0x0D, mira_write_Tx_payload, mira_response_Rx, Timeout);
 8005222:	2103      	movs	r1, #3
 8005224:	f107 0210 	add.w	r2, r7, #16
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	9301      	str	r3, [sp, #4]
 800522c:	f107 0314 	add.w	r3, r7, #20
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	4613      	mov	r3, r2
 8005234:	220d      	movs	r2, #13
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f7ff fd88 	bl	8004d4c <mira_command>
 800523c:	4603      	mov	r3, r0
 800523e:	77fb      	strb	r3, [r7, #31]
	if (status != HAL_OK) {return status;}
 8005240:	7ffb      	ldrb	r3, [r7, #31]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <mira_test_sequence+0x302>
 8005246:	7ffb      	ldrb	r3, [r7, #31]
 8005248:	e0a1      	b.n	800538e <mira_test_sequence+0x446>
	mira_write_Tx_payload[2] = 0x00;
 800524a:	2300      	movs	r3, #0
 800524c:	74bb      	strb	r3, [r7, #18]
	mira_write_Tx_payload[3] = 0x00;
 800524e:	2300      	movs	r3, #0
 8005250:	74fb      	strb	r3, [r7, #19]

	HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8005252:	2120      	movs	r1, #32
 8005254:	4812      	ldr	r0, [pc, #72]	; (80052a0 <mira_test_sequence+0x358>)
 8005256:	f003 f889 	bl	800836c <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 800525a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800525e:	f002 f96d 	bl	800753c <HAL_Delay>
		HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8005262:	2120      	movs	r1, #32
 8005264:	480e      	ldr	r0, [pc, #56]	; (80052a0 <mira_test_sequence+0x358>)
 8005266:	f003 f881 	bl	800836c <HAL_GPIO_TogglePin>

	// Pause while integration happens
	HAL_Delay(500);
 800526a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800526e:	f002 f965 	bl	800753c <HAL_Delay>

	// Set test pulser size
	mira_write_Tx_payload[3] = 0x00;
 8005272:	2300      	movs	r3, #0
 8005274:	74fb      	strb	r3, [r7, #19]
	status = mira_command(huart, WRITE_REGISTER, 0x0D, mira_write_Tx_payload, mira_response_Rx, Timeout);
 8005276:	2103      	movs	r1, #3
 8005278:	f107 0210 	add.w	r2, r7, #16
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	9301      	str	r3, [sp, #4]
 8005280:	f107 0314 	add.w	r3, r7, #20
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	4613      	mov	r3, r2
 8005288:	220d      	movs	r2, #13
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f7ff fd5e 	bl	8004d4c <mira_command>
 8005290:	4603      	mov	r3, r0
 8005292:	77fb      	strb	r3, [r7, #31]
	if (status != HAL_OK) {return status;}
 8005294:	7ffb      	ldrb	r3, [r7, #31]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d004      	beq.n	80052a4 <mira_test_sequence+0x35c>
 800529a:	7ffb      	ldrb	r3, [r7, #31]
 800529c:	e077      	b.n	800538e <mira_test_sequence+0x446>
 800529e:	bf00      	nop
 80052a0:	48000c00 	.word	0x48000c00
	mira_write_Tx_payload[3] = 0x00;
 80052a4:	2300      	movs	r3, #0
 80052a6:	74fb      	strb	r3, [r7, #19]

	HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 80052a8:	2120      	movs	r1, #32
 80052aa:	483b      	ldr	r0, [pc, #236]	; (8005398 <mira_test_sequence+0x450>)
 80052ac:	f003 f85e 	bl	800836c <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80052b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80052b4:	f002 f942 	bl	800753c <HAL_Delay>
		HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 80052b8:	2120      	movs	r1, #32
 80052ba:	4837      	ldr	r0, [pc, #220]	; (8005398 <mira_test_sequence+0x450>)
 80052bc:	f003 f856 	bl	800836c <HAL_GPIO_TogglePin>

	// Pause while integration happens
	HAL_Delay(1200);
 80052c0:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80052c4:	f002 f93a 	bl	800753c <HAL_Delay>

	// Skipping read spectrum status

	// Read spectrum
	status = mira_science_data(huart, science_Rx, response_Rx, 5000);
 80052c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	68b9      	ldr	r1, [r7, #8]
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f7ff fdfd 	bl	8004ed0 <mira_science_data>
 80052d6:	4603      	mov	r3, r0
 80052d8:	77fb      	strb	r3, [r7, #31]
	if (status != HAL_OK) {return status;}
 80052da:	7ffb      	ldrb	r3, [r7, #31]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <mira_test_sequence+0x39c>
 80052e0:	7ffb      	ldrb	r3, [r7, #31]
 80052e2:	e054      	b.n	800538e <mira_test_sequence+0x446>

	HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 80052e4:	2120      	movs	r1, #32
 80052e6:	482c      	ldr	r0, [pc, #176]	; (8005398 <mira_test_sequence+0x450>)
 80052e8:	f003 f840 	bl	800836c <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80052ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80052f0:	f002 f924 	bl	800753c <HAL_Delay>
		HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 80052f4:	2120      	movs	r1, #32
 80052f6:	4828      	ldr	r0, [pc, #160]	; (8005398 <mira_test_sequence+0x450>)
 80052f8:	f003 f838 	bl	800836c <HAL_GPIO_TogglePin>

	// Deactivate analysis
	mira_write_Tx_payload[3] = 0x00;
 80052fc:	2300      	movs	r3, #0
 80052fe:	74fb      	strb	r3, [r7, #19]
	status = mira_command(huart, WRITE_REGISTER, 0x06, mira_write_Tx_payload, mira_response_Rx, Timeout);
 8005300:	2103      	movs	r1, #3
 8005302:	f107 0210 	add.w	r2, r7, #16
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	9301      	str	r3, [sp, #4]
 800530a:	f107 0314 	add.w	r3, r7, #20
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	4613      	mov	r3, r2
 8005312:	2206      	movs	r2, #6
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f7ff fd19 	bl	8004d4c <mira_command>
 800531a:	4603      	mov	r3, r0
 800531c:	77fb      	strb	r3, [r7, #31]
	if (status != HAL_OK) {return status;}
 800531e:	7ffb      	ldrb	r3, [r7, #31]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <mira_test_sequence+0x3e0>
 8005324:	7ffb      	ldrb	r3, [r7, #31]
 8005326:	e032      	b.n	800538e <mira_test_sequence+0x446>
	mira_write_Tx_payload[3] = 0x00;
 8005328:	2300      	movs	r3, #0
 800532a:	74fb      	strb	r3, [r7, #19]

	HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 800532c:	2120      	movs	r1, #32
 800532e:	481a      	ldr	r0, [pc, #104]	; (8005398 <mira_test_sequence+0x450>)
 8005330:	f003 f81c 	bl	800836c <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8005334:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005338:	f002 f900 	bl	800753c <HAL_Delay>
		HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 800533c:	2120      	movs	r1, #32
 800533e:	4816      	ldr	r0, [pc, #88]	; (8005398 <mira_test_sequence+0x450>)
 8005340:	f003 f814 	bl	800836c <HAL_GPIO_TogglePin>

	// Deactivate test pulser
	mira_write_Tx_payload[3] = 0x00;
 8005344:	2300      	movs	r3, #0
 8005346:	74fb      	strb	r3, [r7, #19]
	status = mira_command(huart, WRITE_REGISTER, 0x0C, mira_write_Tx_payload, mira_response_Rx, Timeout);
 8005348:	2103      	movs	r1, #3
 800534a:	f107 0210 	add.w	r2, r7, #16
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	9301      	str	r3, [sp, #4]
 8005352:	f107 0314 	add.w	r3, r7, #20
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	4613      	mov	r3, r2
 800535a:	220c      	movs	r2, #12
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f7ff fcf5 	bl	8004d4c <mira_command>
 8005362:	4603      	mov	r3, r0
 8005364:	77fb      	strb	r3, [r7, #31]
	if (status != HAL_OK) {return status;}
 8005366:	7ffb      	ldrb	r3, [r7, #31]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <mira_test_sequence+0x428>
 800536c:	7ffb      	ldrb	r3, [r7, #31]
 800536e:	e00e      	b.n	800538e <mira_test_sequence+0x446>
	mira_write_Tx_payload[3] = 0x00;
 8005370:	2300      	movs	r3, #0
 8005372:	74fb      	strb	r3, [r7, #19]

	HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8005374:	2120      	movs	r1, #32
 8005376:	4808      	ldr	r0, [pc, #32]	; (8005398 <mira_test_sequence+0x450>)
 8005378:	f002 fff8 	bl	800836c <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 800537c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005380:	f002 f8dc 	bl	800753c <HAL_Delay>
		HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8005384:	2120      	movs	r1, #32
 8005386:	4804      	ldr	r0, [pc, #16]	; (8005398 <mira_test_sequence+0x450>)
 8005388:	f002 fff0 	bl	800836c <HAL_GPIO_TogglePin>

	return status;
 800538c:	7ffb      	ldrb	r3, [r7, #31]

}
 800538e:	4618      	mov	r0, r3
 8005390:	3720      	adds	r7, #32
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	48000c00 	.word	0x48000c00

0800539c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053a2:	4b0f      	ldr	r3, [pc, #60]	; (80053e0 <HAL_MspInit+0x44>)
 80053a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053a6:	4a0e      	ldr	r2, [pc, #56]	; (80053e0 <HAL_MspInit+0x44>)
 80053a8:	f043 0301 	orr.w	r3, r3, #1
 80053ac:	6613      	str	r3, [r2, #96]	; 0x60
 80053ae:	4b0c      	ldr	r3, [pc, #48]	; (80053e0 <HAL_MspInit+0x44>)
 80053b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	607b      	str	r3, [r7, #4]
 80053b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80053ba:	4b09      	ldr	r3, [pc, #36]	; (80053e0 <HAL_MspInit+0x44>)
 80053bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053be:	4a08      	ldr	r2, [pc, #32]	; (80053e0 <HAL_MspInit+0x44>)
 80053c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053c4:	6593      	str	r3, [r2, #88]	; 0x58
 80053c6:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <HAL_MspInit+0x44>)
 80053c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ce:	603b      	str	r3, [r7, #0]
 80053d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053d2:	bf00      	nop
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	40021000 	.word	0x40021000

080053e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b0ae      	sub	sp, #184	; 0xb8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	605a      	str	r2, [r3, #4]
 80053f6:	609a      	str	r2, [r3, #8]
 80053f8:	60da      	str	r2, [r3, #12]
 80053fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80053fc:	f107 0310 	add.w	r3, r7, #16
 8005400:	2294      	movs	r2, #148	; 0x94
 8005402:	2100      	movs	r1, #0
 8005404:	4618      	mov	r0, r3
 8005406:	f014 fbfd 	bl	8019c04 <memset>
  if(hi2c->Instance==I2C1)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a21      	ldr	r2, [pc, #132]	; (8005494 <HAL_I2C_MspInit+0xb0>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d13a      	bne.n	800548a <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005414:	2340      	movs	r3, #64	; 0x40
 8005416:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005418:	2300      	movs	r3, #0
 800541a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800541c:	f107 0310 	add.w	r3, r7, #16
 8005420:	4618      	mov	r0, r3
 8005422:	f006 fb43 	bl	800baac <HAL_RCCEx_PeriphCLKConfig>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800542c:	f7ff fbe2 	bl	8004bf4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005430:	4b19      	ldr	r3, [pc, #100]	; (8005498 <HAL_I2C_MspInit+0xb4>)
 8005432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005434:	4a18      	ldr	r2, [pc, #96]	; (8005498 <HAL_I2C_MspInit+0xb4>)
 8005436:	f043 0302 	orr.w	r3, r3, #2
 800543a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800543c:	4b16      	ldr	r3, [pc, #88]	; (8005498 <HAL_I2C_MspInit+0xb4>)
 800543e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	60fb      	str	r3, [r7, #12]
 8005446:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005448:	23c0      	movs	r3, #192	; 0xc0
 800544a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800544e:	2312      	movs	r3, #18
 8005450:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005454:	2300      	movs	r3, #0
 8005456:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800545a:	2303      	movs	r3, #3
 800545c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005460:	2304      	movs	r3, #4
 8005462:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005466:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800546a:	4619      	mov	r1, r3
 800546c:	480b      	ldr	r0, [pc, #44]	; (800549c <HAL_I2C_MspInit+0xb8>)
 800546e:	f002 fcc9 	bl	8007e04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005472:	4b09      	ldr	r3, [pc, #36]	; (8005498 <HAL_I2C_MspInit+0xb4>)
 8005474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005476:	4a08      	ldr	r2, [pc, #32]	; (8005498 <HAL_I2C_MspInit+0xb4>)
 8005478:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800547c:	6593      	str	r3, [r2, #88]	; 0x58
 800547e:	4b06      	ldr	r3, [pc, #24]	; (8005498 <HAL_I2C_MspInit+0xb4>)
 8005480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005482:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005486:	60bb      	str	r3, [r7, #8]
 8005488:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800548a:	bf00      	nop
 800548c:	37b8      	adds	r7, #184	; 0xb8
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	40005400 	.word	0x40005400
 8005498:	40021000 	.word	0x40021000
 800549c:	48000400 	.word	0x48000400

080054a0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a0a      	ldr	r2, [pc, #40]	; (80054d8 <HAL_I2C_MspDeInit+0x38>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d10d      	bne.n	80054ce <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80054b2:	4b0a      	ldr	r3, [pc, #40]	; (80054dc <HAL_I2C_MspDeInit+0x3c>)
 80054b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b6:	4a09      	ldr	r2, [pc, #36]	; (80054dc <HAL_I2C_MspDeInit+0x3c>)
 80054b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054bc:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80054be:	2140      	movs	r1, #64	; 0x40
 80054c0:	4807      	ldr	r0, [pc, #28]	; (80054e0 <HAL_I2C_MspDeInit+0x40>)
 80054c2:	f002 fe31 	bl	8008128 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80054c6:	2180      	movs	r1, #128	; 0x80
 80054c8:	4805      	ldr	r0, [pc, #20]	; (80054e0 <HAL_I2C_MspDeInit+0x40>)
 80054ca:	f002 fe2d 	bl	8008128 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80054ce:	bf00      	nop
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	40005400 	.word	0x40005400
 80054dc:	40021000 	.word	0x40021000
 80054e0:	48000400 	.word	0x48000400

080054e4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b0b0      	sub	sp, #192	; 0xc0
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054ec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80054f0:	2200      	movs	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	605a      	str	r2, [r3, #4]
 80054f6:	609a      	str	r2, [r3, #8]
 80054f8:	60da      	str	r2, [r3, #12]
 80054fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80054fc:	f107 0318 	add.w	r3, r7, #24
 8005500:	2294      	movs	r2, #148	; 0x94
 8005502:	2100      	movs	r1, #0
 8005504:	4618      	mov	r0, r3
 8005506:	f014 fb7d 	bl	8019c04 <memset>
  if(hsd->Instance==SDMMC1)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a37      	ldr	r2, [pc, #220]	; (80055ec <HAL_SD_MspInit+0x108>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d166      	bne.n	80055e2 <HAL_SD_MspInit+0xfe>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8005514:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005518:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_HSI48;
 800551a:	2300      	movs	r3, #0
 800551c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005520:	f107 0318 	add.w	r3, r7, #24
 8005524:	4618      	mov	r0, r3
 8005526:	f006 fac1 	bl	800baac <HAL_RCCEx_PeriphCLKConfig>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d001      	beq.n	8005534 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8005530:	f7ff fb60 	bl	8004bf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8005534:	4b2e      	ldr	r3, [pc, #184]	; (80055f0 <HAL_SD_MspInit+0x10c>)
 8005536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005538:	4a2d      	ldr	r2, [pc, #180]	; (80055f0 <HAL_SD_MspInit+0x10c>)
 800553a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800553e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005540:	4b2b      	ldr	r3, [pc, #172]	; (80055f0 <HAL_SD_MspInit+0x10c>)
 8005542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005544:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800554c:	4b28      	ldr	r3, [pc, #160]	; (80055f0 <HAL_SD_MspInit+0x10c>)
 800554e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005550:	4a27      	ldr	r2, [pc, #156]	; (80055f0 <HAL_SD_MspInit+0x10c>)
 8005552:	f043 0304 	orr.w	r3, r3, #4
 8005556:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005558:	4b25      	ldr	r3, [pc, #148]	; (80055f0 <HAL_SD_MspInit+0x10c>)
 800555a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800555c:	f003 0304 	and.w	r3, r3, #4
 8005560:	613b      	str	r3, [r7, #16]
 8005562:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005564:	4b22      	ldr	r3, [pc, #136]	; (80055f0 <HAL_SD_MspInit+0x10c>)
 8005566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005568:	4a21      	ldr	r2, [pc, #132]	; (80055f0 <HAL_SD_MspInit+0x10c>)
 800556a:	f043 0308 	orr.w	r3, r3, #8
 800556e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005570:	4b1f      	ldr	r3, [pc, #124]	; (80055f0 <HAL_SD_MspInit+0x10c>)
 8005572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005574:	f003 0308 	and.w	r3, r3, #8
 8005578:	60fb      	str	r3, [r7, #12]
 800557a:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800557c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8005580:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005584:	2302      	movs	r3, #2
 8005586:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800558a:	2300      	movs	r3, #0
 800558c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005590:	2303      	movs	r3, #3
 8005592:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8005596:	230c      	movs	r3, #12
 8005598:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800559c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80055a0:	4619      	mov	r1, r3
 80055a2:	4814      	ldr	r0, [pc, #80]	; (80055f4 <HAL_SD_MspInit+0x110>)
 80055a4:	f002 fc2e 	bl	8007e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80055a8:	2304      	movs	r3, #4
 80055aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ae:	2302      	movs	r3, #2
 80055b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b4:	2300      	movs	r3, #0
 80055b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055ba:	2303      	movs	r3, #3
 80055bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80055c0:	230c      	movs	r3, #12
 80055c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80055c6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80055ca:	4619      	mov	r1, r3
 80055cc:	480a      	ldr	r0, [pc, #40]	; (80055f8 <HAL_SD_MspInit+0x114>)
 80055ce:	f002 fc19 	bl	8007e04 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80055d2:	2200      	movs	r2, #0
 80055d4:	2100      	movs	r1, #0
 80055d6:	2031      	movs	r0, #49	; 0x31
 80055d8:	f002 f8af 	bl	800773a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80055dc:	2031      	movs	r0, #49	; 0x31
 80055de:	f002 f8c8 	bl	8007772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80055e2:	bf00      	nop
 80055e4:	37c0      	adds	r7, #192	; 0xc0
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	50062400 	.word	0x50062400
 80055f0:	40021000 	.word	0x40021000
 80055f4:	48000800 	.word	0x48000800
 80055f8:	48000c00 	.word	0x48000c00

080055fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b08a      	sub	sp, #40	; 0x28
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005604:	f107 0314 	add.w	r3, r7, #20
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	605a      	str	r2, [r3, #4]
 800560e:	609a      	str	r2, [r3, #8]
 8005610:	60da      	str	r2, [r3, #12]
 8005612:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a17      	ldr	r2, [pc, #92]	; (8005678 <HAL_SPI_MspInit+0x7c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d128      	bne.n	8005670 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800561e:	4b17      	ldr	r3, [pc, #92]	; (800567c <HAL_SPI_MspInit+0x80>)
 8005620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005622:	4a16      	ldr	r2, [pc, #88]	; (800567c <HAL_SPI_MspInit+0x80>)
 8005624:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005628:	6613      	str	r3, [r2, #96]	; 0x60
 800562a:	4b14      	ldr	r3, [pc, #80]	; (800567c <HAL_SPI_MspInit+0x80>)
 800562c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800562e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005632:	613b      	str	r3, [r7, #16]
 8005634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005636:	4b11      	ldr	r3, [pc, #68]	; (800567c <HAL_SPI_MspInit+0x80>)
 8005638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800563a:	4a10      	ldr	r2, [pc, #64]	; (800567c <HAL_SPI_MspInit+0x80>)
 800563c:	f043 0301 	orr.w	r3, r3, #1
 8005640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005642:	4b0e      	ldr	r3, [pc, #56]	; (800567c <HAL_SPI_MspInit+0x80>)
 8005644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|LORA0_SCK_Pin|LORA0_MISO_Pin|LORA0_MOSI_Pin;
 800564e:	23f0      	movs	r3, #240	; 0xf0
 8005650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005652:	2302      	movs	r3, #2
 8005654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005656:	2300      	movs	r3, #0
 8005658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800565a:	2303      	movs	r3, #3
 800565c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800565e:	2305      	movs	r3, #5
 8005660:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005662:	f107 0314 	add.w	r3, r7, #20
 8005666:	4619      	mov	r1, r3
 8005668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800566c:	f002 fbca 	bl	8007e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005670:	bf00      	nop
 8005672:	3728      	adds	r7, #40	; 0x28
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	40013000 	.word	0x40013000
 800567c:	40021000 	.word	0x40021000

08005680 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a0a      	ldr	r2, [pc, #40]	; (80056b8 <HAL_TIM_Base_MspInit+0x38>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d10b      	bne.n	80056aa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005692:	4b0a      	ldr	r3, [pc, #40]	; (80056bc <HAL_TIM_Base_MspInit+0x3c>)
 8005694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005696:	4a09      	ldr	r2, [pc, #36]	; (80056bc <HAL_TIM_Base_MspInit+0x3c>)
 8005698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800569c:	6613      	str	r3, [r2, #96]	; 0x60
 800569e:	4b07      	ldr	r3, [pc, #28]	; (80056bc <HAL_TIM_Base_MspInit+0x3c>)
 80056a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80056aa:	bf00      	nop
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	40014800 	.word	0x40014800
 80056bc:	40021000 	.word	0x40021000

080056c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b0b0      	sub	sp, #192	; 0xc0
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80056cc:	2200      	movs	r2, #0
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	605a      	str	r2, [r3, #4]
 80056d2:	609a      	str	r2, [r3, #8]
 80056d4:	60da      	str	r2, [r3, #12]
 80056d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80056d8:	f107 0318 	add.w	r3, r7, #24
 80056dc:	2294      	movs	r2, #148	; 0x94
 80056de:	2100      	movs	r1, #0
 80056e0:	4618      	mov	r0, r3
 80056e2:	f014 fa8f 	bl	8019c04 <memset>
  if(huart->Instance==USART1)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a6d      	ldr	r2, [pc, #436]	; (80058a0 <HAL_UART_MspInit+0x1e0>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	f040 8091 	bne.w	8005814 <HAL_UART_MspInit+0x154>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80056f2:	2301      	movs	r3, #1
 80056f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80056f6:	2300      	movs	r3, #0
 80056f8:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80056fa:	f107 0318 	add.w	r3, r7, #24
 80056fe:	4618      	mov	r0, r3
 8005700:	f006 f9d4 	bl	800baac <HAL_RCCEx_PeriphCLKConfig>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800570a:	f7ff fa73 	bl	8004bf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800570e:	4b65      	ldr	r3, [pc, #404]	; (80058a4 <HAL_UART_MspInit+0x1e4>)
 8005710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005712:	4a64      	ldr	r2, [pc, #400]	; (80058a4 <HAL_UART_MspInit+0x1e4>)
 8005714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005718:	6613      	str	r3, [r2, #96]	; 0x60
 800571a:	4b62      	ldr	r3, [pc, #392]	; (80058a4 <HAL_UART_MspInit+0x1e4>)
 800571c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800571e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005722:	617b      	str	r3, [r7, #20]
 8005724:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005726:	4b5f      	ldr	r3, [pc, #380]	; (80058a4 <HAL_UART_MspInit+0x1e4>)
 8005728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800572a:	4a5e      	ldr	r2, [pc, #376]	; (80058a4 <HAL_UART_MspInit+0x1e4>)
 800572c:	f043 0301 	orr.w	r3, r3, #1
 8005730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005732:	4b5c      	ldr	r3, [pc, #368]	; (80058a4 <HAL_UART_MspInit+0x1e4>)
 8005734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	613b      	str	r3, [r7, #16]
 800573c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 800573e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005742:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005746:	2302      	movs	r3, #2
 8005748:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800574c:	2300      	movs	r3, #0
 800574e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005752:	2303      	movs	r3, #3
 8005754:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005758:	2307      	movs	r3, #7
 800575a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800575e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005762:	4619      	mov	r1, r3
 8005764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005768:	f002 fb4c 	bl	8007e04 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800576c:	4b4e      	ldr	r3, [pc, #312]	; (80058a8 <HAL_UART_MspInit+0x1e8>)
 800576e:	4a4f      	ldr	r2, [pc, #316]	; (80058ac <HAL_UART_MspInit+0x1ec>)
 8005770:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8005772:	4b4d      	ldr	r3, [pc, #308]	; (80058a8 <HAL_UART_MspInit+0x1e8>)
 8005774:	2218      	movs	r2, #24
 8005776:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005778:	4b4b      	ldr	r3, [pc, #300]	; (80058a8 <HAL_UART_MspInit+0x1e8>)
 800577a:	2200      	movs	r2, #0
 800577c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800577e:	4b4a      	ldr	r3, [pc, #296]	; (80058a8 <HAL_UART_MspInit+0x1e8>)
 8005780:	2200      	movs	r2, #0
 8005782:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005784:	4b48      	ldr	r3, [pc, #288]	; (80058a8 <HAL_UART_MspInit+0x1e8>)
 8005786:	2280      	movs	r2, #128	; 0x80
 8005788:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800578a:	4b47      	ldr	r3, [pc, #284]	; (80058a8 <HAL_UART_MspInit+0x1e8>)
 800578c:	2200      	movs	r2, #0
 800578e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005790:	4b45      	ldr	r3, [pc, #276]	; (80058a8 <HAL_UART_MspInit+0x1e8>)
 8005792:	2200      	movs	r2, #0
 8005794:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005796:	4b44      	ldr	r3, [pc, #272]	; (80058a8 <HAL_UART_MspInit+0x1e8>)
 8005798:	2200      	movs	r2, #0
 800579a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800579c:	4b42      	ldr	r3, [pc, #264]	; (80058a8 <HAL_UART_MspInit+0x1e8>)
 800579e:	2200      	movs	r2, #0
 80057a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80057a2:	4841      	ldr	r0, [pc, #260]	; (80058a8 <HAL_UART_MspInit+0x1e8>)
 80057a4:	f002 f800 	bl	80077a8 <HAL_DMA_Init>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d001      	beq.n	80057b2 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 80057ae:	f7ff fa21 	bl	8004bf4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a3c      	ldr	r2, [pc, #240]	; (80058a8 <HAL_UART_MspInit+0x1e8>)
 80057b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80057ba:	4a3b      	ldr	r2, [pc, #236]	; (80058a8 <HAL_UART_MspInit+0x1e8>)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80057c0:	4b3b      	ldr	r3, [pc, #236]	; (80058b0 <HAL_UART_MspInit+0x1f0>)
 80057c2:	4a3c      	ldr	r2, [pc, #240]	; (80058b4 <HAL_UART_MspInit+0x1f4>)
 80057c4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80057c6:	4b3a      	ldr	r3, [pc, #232]	; (80058b0 <HAL_UART_MspInit+0x1f0>)
 80057c8:	2219      	movs	r2, #25
 80057ca:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80057cc:	4b38      	ldr	r3, [pc, #224]	; (80058b0 <HAL_UART_MspInit+0x1f0>)
 80057ce:	2210      	movs	r2, #16
 80057d0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057d2:	4b37      	ldr	r3, [pc, #220]	; (80058b0 <HAL_UART_MspInit+0x1f0>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80057d8:	4b35      	ldr	r3, [pc, #212]	; (80058b0 <HAL_UART_MspInit+0x1f0>)
 80057da:	2280      	movs	r2, #128	; 0x80
 80057dc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80057de:	4b34      	ldr	r3, [pc, #208]	; (80058b0 <HAL_UART_MspInit+0x1f0>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80057e4:	4b32      	ldr	r3, [pc, #200]	; (80058b0 <HAL_UART_MspInit+0x1f0>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80057ea:	4b31      	ldr	r3, [pc, #196]	; (80058b0 <HAL_UART_MspInit+0x1f0>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80057f0:	4b2f      	ldr	r3, [pc, #188]	; (80058b0 <HAL_UART_MspInit+0x1f0>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80057f6:	482e      	ldr	r0, [pc, #184]	; (80058b0 <HAL_UART_MspInit+0x1f0>)
 80057f8:	f001 ffd6 	bl	80077a8 <HAL_DMA_Init>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d001      	beq.n	8005806 <HAL_UART_MspInit+0x146>
    {
      Error_Handler();
 8005802:	f7ff f9f7 	bl	8004bf4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a29      	ldr	r2, [pc, #164]	; (80058b0 <HAL_UART_MspInit+0x1f0>)
 800580a:	67da      	str	r2, [r3, #124]	; 0x7c
 800580c:	4a28      	ldr	r2, [pc, #160]	; (80058b0 <HAL_UART_MspInit+0x1f0>)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005812:	e040      	b.n	8005896 <HAL_UART_MspInit+0x1d6>
  else if(huart->Instance==USART2)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a27      	ldr	r2, [pc, #156]	; (80058b8 <HAL_UART_MspInit+0x1f8>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d13b      	bne.n	8005896 <HAL_UART_MspInit+0x1d6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800581e:	2302      	movs	r3, #2
 8005820:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005822:	2300      	movs	r3, #0
 8005824:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005826:	f107 0318 	add.w	r3, r7, #24
 800582a:	4618      	mov	r0, r3
 800582c:	f006 f93e 	bl	800baac <HAL_RCCEx_PeriphCLKConfig>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <HAL_UART_MspInit+0x17a>
      Error_Handler();
 8005836:	f7ff f9dd 	bl	8004bf4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800583a:	4b1a      	ldr	r3, [pc, #104]	; (80058a4 <HAL_UART_MspInit+0x1e4>)
 800583c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800583e:	4a19      	ldr	r2, [pc, #100]	; (80058a4 <HAL_UART_MspInit+0x1e4>)
 8005840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005844:	6593      	str	r3, [r2, #88]	; 0x58
 8005846:	4b17      	ldr	r3, [pc, #92]	; (80058a4 <HAL_UART_MspInit+0x1e4>)
 8005848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800584a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005852:	4b14      	ldr	r3, [pc, #80]	; (80058a4 <HAL_UART_MspInit+0x1e4>)
 8005854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005856:	4a13      	ldr	r2, [pc, #76]	; (80058a4 <HAL_UART_MspInit+0x1e4>)
 8005858:	f043 0301 	orr.w	r3, r3, #1
 800585c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800585e:	4b11      	ldr	r3, [pc, #68]	; (80058a4 <HAL_UART_MspInit+0x1e4>)
 8005860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	60bb      	str	r3, [r7, #8]
 8005868:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 800586a:	230c      	movs	r3, #12
 800586c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005870:	2302      	movs	r3, #2
 8005872:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005876:	2300      	movs	r3, #0
 8005878:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800587c:	2303      	movs	r3, #3
 800587e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005882:	2307      	movs	r3, #7
 8005884:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005888:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800588c:	4619      	mov	r1, r3
 800588e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005892:	f002 fab7 	bl	8007e04 <HAL_GPIO_Init>
}
 8005896:	bf00      	nop
 8005898:	37c0      	adds	r7, #192	; 0xc0
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	40013800 	.word	0x40013800
 80058a4:	40021000 	.word	0x40021000
 80058a8:	200007f4 	.word	0x200007f4
 80058ac:	40020008 	.word	0x40020008
 80058b0:	20000854 	.word	0x20000854
 80058b4:	4002001c 	.word	0x4002001c
 80058b8:	40004400 	.word	0x40004400

080058bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80058c0:	f006 f818 	bl	800b8f4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80058c4:	e7fe      	b.n	80058c4 <NMI_Handler+0x8>

080058c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80058c6:	b480      	push	{r7}
 80058c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80058ca:	e7fe      	b.n	80058ca <HardFault_Handler+0x4>

080058cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80058cc:	b480      	push	{r7}
 80058ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80058d0:	e7fe      	b.n	80058d0 <MemManage_Handler+0x4>

080058d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80058d2:	b480      	push	{r7}
 80058d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80058d6:	e7fe      	b.n	80058d6 <BusFault_Handler+0x4>

080058d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80058d8:	b480      	push	{r7}
 80058da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80058dc:	e7fe      	b.n	80058dc <UsageFault_Handler+0x4>

080058de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80058de:	b480      	push	{r7}
 80058e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80058e2:	bf00      	nop
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80058f0:	bf00      	nop
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80058fa:	b480      	push	{r7}
 80058fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80058fe:	bf00      	nop
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800590c:	f001 fdf6 	bl	80074fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005910:	bf00      	nop
 8005912:	bd80      	pop	{r7, pc}

08005914 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005918:	4802      	ldr	r0, [pc, #8]	; (8005924 <DMA1_Channel1_IRQHandler+0x10>)
 800591a:	f002 f923 	bl	8007b64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800591e:	bf00      	nop
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	200007f4 	.word	0x200007f4

08005928 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800592c:	4802      	ldr	r0, [pc, #8]	; (8005938 <DMA1_Channel2_IRQHandler+0x10>)
 800592e:	f002 f919 	bl	8007b64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005932:	bf00      	nop
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20000854 	.word	0x20000854

0800593c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	if (tick) {tick--;}
 8005940:	4b14      	ldr	r3, [pc, #80]	; (8005994 <TIM1_TRG_COM_TIM17_IRQHandler+0x58>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d006      	beq.n	8005958 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>
 800594a:	4b12      	ldr	r3, [pc, #72]	; (8005994 <TIM1_TRG_COM_TIM17_IRQHandler+0x58>)
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	b2db      	uxtb	r3, r3
 8005950:	3b01      	subs	r3, #1
 8005952:	b2da      	uxtb	r2, r3
 8005954:	4b0f      	ldr	r3, [pc, #60]	; (8005994 <TIM1_TRG_COM_TIM17_IRQHandler+0x58>)
 8005956:	701a      	strb	r2, [r3, #0]
	if (tickGPS) {tickGPS--;}
 8005958:	4b0f      	ldr	r3, [pc, #60]	; (8005998 <TIM1_TRG_COM_TIM17_IRQHandler+0x5c>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d006      	beq.n	8005970 <TIM1_TRG_COM_TIM17_IRQHandler+0x34>
 8005962:	4b0d      	ldr	r3, [pc, #52]	; (8005998 <TIM1_TRG_COM_TIM17_IRQHandler+0x5c>)
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	b2db      	uxtb	r3, r3
 8005968:	3b01      	subs	r3, #1
 800596a:	b2da      	uxtb	r2, r3
 800596c:	4b0a      	ldr	r3, [pc, #40]	; (8005998 <TIM1_TRG_COM_TIM17_IRQHandler+0x5c>)
 800596e:	701a      	strb	r2, [r3, #0]
	if (tickSync) {tickSync--;}
 8005970:	4b0a      	ldr	r3, [pc, #40]	; (800599c <TIM1_TRG_COM_TIM17_IRQHandler+0x60>)
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d006      	beq.n	8005988 <TIM1_TRG_COM_TIM17_IRQHandler+0x4c>
 800597a:	4b08      	ldr	r3, [pc, #32]	; (800599c <TIM1_TRG_COM_TIM17_IRQHandler+0x60>)
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	b2db      	uxtb	r3, r3
 8005980:	3b01      	subs	r3, #1
 8005982:	b2da      	uxtb	r2, r3
 8005984:	4b05      	ldr	r3, [pc, #20]	; (800599c <TIM1_TRG_COM_TIM17_IRQHandler+0x60>)
 8005986:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8005988:	4805      	ldr	r0, [pc, #20]	; (80059a0 <TIM1_TRG_COM_TIM17_IRQHandler+0x64>)
 800598a:	f00a fcb6 	bl	80102fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800598e:	bf00      	nop
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	20000f00 	.word	0x20000f00
 8005998:	20000f01 	.word	0x20000f01
 800599c:	20000f02 	.word	0x20000f02
 80059a0:	20000680 	.word	0x20000680

080059a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	af00      	add	r7, sp, #0
//		if (mira_rxBuffer == mira_rxBuffer1) {mira_rxBuffer = mira_rxBuffer2;}
//		else {mira_rxBuffer = mira_rxBuffer1;}
//		HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
//	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80059a8:	4802      	ldr	r0, [pc, #8]	; (80059b4 <USART1_IRQHandler+0x10>)
 80059aa:	f00b fb8d 	bl	80110c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80059ae:	bf00      	nop
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	200006cc 	.word	0x200006cc

080059b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	char c = huart2.Instance->RDR;
 80059be:	4b22      	ldr	r3, [pc, #136]	; (8005a48 <USART2_IRQHandler+0x90>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	71fb      	strb	r3, [r7, #7]
	if (gps_rxBufferPos < gps_RXBUFSIZE - 1)
 80059c8:	4b20      	ldr	r3, [pc, #128]	; (8005a4c <USART2_IRQHandler+0x94>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
	{ gps_rxBuffer[gps_rxBufferPos++] = (uint8_t) c; }
 80059cc:	4b20      	ldr	r3, [pc, #128]	; (8005a50 <USART2_IRQHandler+0x98>)
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	4b1e      	ldr	r3, [pc, #120]	; (8005a4c <USART2_IRQHandler+0x94>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	1c59      	adds	r1, r3, #1
 80059d8:	b2c8      	uxtb	r0, r1
 80059da:	491c      	ldr	r1, [pc, #112]	; (8005a4c <USART2_IRQHandler+0x94>)
 80059dc:	7008      	strb	r0, [r1, #0]
 80059de:	4413      	add	r3, r2
 80059e0:	79fa      	ldrb	r2, [r7, #7]
 80059e2:	701a      	strb	r2, [r3, #0]

	if ((c == '\n') && (gps_send_ready))// && (tickGPS == 0))// && (tickGPS == 0)) //(c == '\r') ||
 80059e4:	79fb      	ldrb	r3, [r7, #7]
 80059e6:	2b0a      	cmp	r3, #10
 80059e8:	d126      	bne.n	8005a38 <USART2_IRQHandler+0x80>
 80059ea:	4b1a      	ldr	r3, [pc, #104]	; (8005a54 <USART2_IRQHandler+0x9c>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d022      	beq.n	8005a38 <USART2_IRQHandler+0x80>
	{
		//tickGPS = 1;
		gps_rxBuffer[gps_rxBufferPos] = 0;
 80059f2:	4b17      	ldr	r3, [pc, #92]	; (8005a50 <USART2_IRQHandler+0x98>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a15      	ldr	r2, [pc, #84]	; (8005a4c <USART2_IRQHandler+0x94>)
 80059f8:	7812      	ldrb	r2, [r2, #0]
 80059fa:	b2d2      	uxtb	r2, r2
 80059fc:	4413      	add	r3, r2
 80059fe:	2200      	movs	r2, #0
 8005a00:	701a      	strb	r2, [r3, #0]
		gps_data_ready |= 1;
 8005a02:	4b15      	ldr	r3, [pc, #84]	; (8005a58 <USART2_IRQHandler+0xa0>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f043 0301 	orr.w	r3, r3, #1
 8005a0a:	4a13      	ldr	r2, [pc, #76]	; (8005a58 <USART2_IRQHandler+0xa0>)
 8005a0c:	6013      	str	r3, [r2, #0]
		gps_send_ready ^= 1;
 8005a0e:	4b11      	ldr	r3, [pc, #68]	; (8005a54 <USART2_IRQHandler+0x9c>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f083 0301 	eor.w	r3, r3, #1
 8005a16:	4a0f      	ldr	r2, [pc, #60]	; (8005a54 <USART2_IRQHandler+0x9c>)
 8005a18:	6013      	str	r3, [r2, #0]
		gps_rxBufferPos = 0;
 8005a1a:	4b0c      	ldr	r3, [pc, #48]	; (8005a4c <USART2_IRQHandler+0x94>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	701a      	strb	r2, [r3, #0]
		if (gps_rxBuffer == gps_rxBuffer1) {gps_rxBuffer = gps_rxBuffer2;}
 8005a20:	4b0b      	ldr	r3, [pc, #44]	; (8005a50 <USART2_IRQHandler+0x98>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a0d      	ldr	r2, [pc, #52]	; (8005a5c <USART2_IRQHandler+0xa4>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d103      	bne.n	8005a32 <USART2_IRQHandler+0x7a>
 8005a2a:	4b09      	ldr	r3, [pc, #36]	; (8005a50 <USART2_IRQHandler+0x98>)
 8005a2c:	4a0c      	ldr	r2, [pc, #48]	; (8005a60 <USART2_IRQHandler+0xa8>)
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	e002      	b.n	8005a38 <USART2_IRQHandler+0x80>
		else {gps_rxBuffer = gps_rxBuffer1;}
 8005a32:	4b07      	ldr	r3, [pc, #28]	; (8005a50 <USART2_IRQHandler+0x98>)
 8005a34:	4a09      	ldr	r2, [pc, #36]	; (8005a5c <USART2_IRQHandler+0xa4>)
 8005a36:	601a      	str	r2, [r3, #0]

	//HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
	//rchar = huart2.Instance->RDR;

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005a38:	4803      	ldr	r0, [pc, #12]	; (8005a48 <USART2_IRQHandler+0x90>)
 8005a3a:	f00b fb45 	bl	80110c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	//ATOMIC_SET_BIT(huart2.Instance->CR3, USART_CR3_EIE);
  /* USER CODE END USART2_IRQn 1 */
}
 8005a3e:	bf00      	nop
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	20000760 	.word	0x20000760
 8005a4c:	20000ef8 	.word	0x20000ef8
 8005a50:	20000ef4 	.word	0x20000ef4
 8005a54:	20000000 	.word	0x20000000
 8005a58:	20000efc 	.word	0x20000efc
 8005a5c:	200008b4 	.word	0x200008b4
 8005a60:	20000bd4 	.word	0x20000bd4

08005a64 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8005a68:	4802      	ldr	r0, [pc, #8]	; (8005a74 <SDMMC1_IRQHandler+0x10>)
 8005a6a:	f007 ffe3 	bl	800da34 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8005a6e:	bf00      	nop
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	2000059c 	.word	0x2000059c

08005a78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005a7c:	4802      	ldr	r0, [pc, #8]	; (8005a88 <OTG_FS_IRQHandler+0x10>)
 8005a7e:	f003 ffdd 	bl	8009a3c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005a82:	bf00      	nop
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	20002890 	.word	0x20002890

08005a8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005a90:	4b06      	ldr	r3, [pc, #24]	; (8005aac <SystemInit+0x20>)
 8005a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a96:	4a05      	ldr	r2, [pc, #20]	; (8005aac <SystemInit+0x20>)
 8005a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005aa0:	bf00      	nop
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	e000ed00 	.word	0xe000ed00

08005ab0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005ab0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005ae8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005ab4:	f7ff ffea 	bl	8005a8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005ab8:	480c      	ldr	r0, [pc, #48]	; (8005aec <LoopForever+0x6>)
  ldr r1, =_edata
 8005aba:	490d      	ldr	r1, [pc, #52]	; (8005af0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005abc:	4a0d      	ldr	r2, [pc, #52]	; (8005af4 <LoopForever+0xe>)
  movs r3, #0
 8005abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ac0:	e002      	b.n	8005ac8 <LoopCopyDataInit>

08005ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ac6:	3304      	adds	r3, #4

08005ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005acc:	d3f9      	bcc.n	8005ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005ace:	4a0a      	ldr	r2, [pc, #40]	; (8005af8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005ad0:	4c0a      	ldr	r4, [pc, #40]	; (8005afc <LoopForever+0x16>)
  movs r3, #0
 8005ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ad4:	e001      	b.n	8005ada <LoopFillZerobss>

08005ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005ad8:	3204      	adds	r2, #4

08005ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005adc:	d3fb      	bcc.n	8005ad6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005ade:	f014 f84f 	bl	8019b80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005ae2:	f7fd fce1 	bl	80034a8 <main>

08005ae6 <LoopForever>:

LoopForever:
    b LoopForever
 8005ae6:	e7fe      	b.n	8005ae6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005ae8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8005aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005af0:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8005af4:	0801d680 	.word	0x0801d680
  ldr r2, =_sbss
 8005af8:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8005afc:	20002fd0 	.word	0x20002fd0

08005b00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005b00:	e7fe      	b.n	8005b00 <ADC1_IRQHandler>
	...

08005b04 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d103      	bne.n	8005b20 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8005b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	e051      	b.n	8005bc4 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	7b1a      	ldrb	r2, [r3, #12]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	691a      	ldr	r2, [r3, #16]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	695a      	ldr	r2, [r3, #20]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	699a      	ldr	r2, [r3, #24]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a1d      	ldr	r2, [pc, #116]	; (8005bd0 <LSM6DSO_RegisterBusIO+0xcc>)
 8005b5c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a1c      	ldr	r2, [pc, #112]	; (8005bd4 <LSM6DSO_RegisterBusIO+0xd0>)
 8005b62:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	69da      	ldr	r2, [r3, #28]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d103      	bne.n	8005b82 <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8005b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	e020      	b.n	8005bc4 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4798      	blx	r3
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8005b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	e016      	b.n	8005bc4 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d112      	bne.n	8005bc4 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10d      	bne.n	8005bc4 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8005ba8:	230c      	movs	r3, #12
 8005baa:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8005bac:	7afb      	ldrb	r3, [r7, #11]
 8005bae:	461a      	mov	r2, r3
 8005bb0:	2112      	movs	r1, #18
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fc98 	bl	80064e8 <LSM6DSO_Write_Reg>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d002      	beq.n	8005bc4 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8005bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bc2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	0800698d 	.word	0x0800698d
 8005bd4:	080069c3 	.word	0x080069c3

08005bd8 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	3320      	adds	r3, #32
 8005be4:	2180      	movs	r1, #128	; 0x80
 8005be6:	4618      	mov	r0, r3
 8005be8:	f001 fb5e 	bl	80072a8 <lsm6dso_i3c_disable_set>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d002      	beq.n	8005bf8 <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 8005bf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bf6:	e060      	b.n	8005cba <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	3320      	adds	r3, #32
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f001 fb2c 	bl	800725c <lsm6dso_auto_increment_set>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d002      	beq.n	8005c10 <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 8005c0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c0e:	e054      	b.n	8005cba <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	3320      	adds	r3, #32
 8005c14:	2101      	movs	r1, #1
 8005c16:	4618      	mov	r0, r3
 8005c18:	f001 fa3e 	bl	8007098 <lsm6dso_block_data_update_set>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d002      	beq.n	8005c28 <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 8005c22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c26:	e048      	b.n	8005cba <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	3320      	adds	r3, #32
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f001 fb80 	bl	8007334 <lsm6dso_fifo_mode_set>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d002      	beq.n	8005c40 <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 8005c3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c3e:	e03c      	b.n	8005cba <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2204      	movs	r2, #4
 8005c44:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	3320      	adds	r3, #32
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 ff60 	bl	8006b14 <lsm6dso_xl_data_rate_set>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d002      	beq.n	8005c60 <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 8005c5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c5e:	e02c      	b.n	8005cba <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	3320      	adds	r3, #32
 8005c64:	2100      	movs	r1, #0
 8005c66:	4618      	mov	r0, r3
 8005c68:	f000 fef6 	bl	8006a58 <lsm6dso_xl_full_scale_set>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 8005c72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c76:	e020      	b.n	8005cba <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2204      	movs	r2, #4
 8005c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	3320      	adds	r3, #32
 8005c84:	2100      	movs	r1, #0
 8005c86:	4618      	mov	r0, r3
 8005c88:	f001 f8a8 	bl	8006ddc <lsm6dso_gy_data_rate_set>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d002      	beq.n	8005c98 <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 8005c92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c96:	e010      	b.n	8005cba <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3320      	adds	r3, #32
 8005c9c:	2106      	movs	r1, #6
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f001 f834 	bl	8006d0c <lsm6dso_gy_full_scale_set>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d002      	beq.n	8005cb0 <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 8005caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cae:	e004      	b.n	8005cba <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b082      	sub	sp, #8
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d101      	bne.n	8005cd8 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	e014      	b.n	8005d02 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f103 0220 	add.w	r2, r3, #32
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	4610      	mov	r0, r2
 8005ce8:	f000 ff14 	bl	8006b14 <lsm6dso_xl_data_rate_set>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d002      	beq.n	8005cf8 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8005cf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cf6:	e004      	b.n	8005d02 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
	...

08005d0c <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	3320      	adds	r3, #32
 8005d1e:	f107 020b 	add.w	r2, r7, #11
 8005d22:	4611      	mov	r1, r2
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 febd 	bl	8006aa4 <lsm6dso_xl_full_scale_get>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8005d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d34:	e023      	b.n	8005d7e <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8005d36:	7afb      	ldrb	r3, [r7, #11]
 8005d38:	2b03      	cmp	r3, #3
 8005d3a:	d81b      	bhi.n	8005d74 <LSM6DSO_ACC_GetSensitivity+0x68>
 8005d3c:	a201      	add	r2, pc, #4	; (adr r2, 8005d44 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8005d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d42:	bf00      	nop
 8005d44:	08005d55 	.word	0x08005d55
 8005d48:	08005d6d 	.word	0x08005d6d
 8005d4c:	08005d5d 	.word	0x08005d5d
 8005d50:	08005d65 	.word	0x08005d65
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	4a0c      	ldr	r2, [pc, #48]	; (8005d88 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8005d58:	601a      	str	r2, [r3, #0]
      break;
 8005d5a:	e00f      	b.n	8005d7c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	4a0b      	ldr	r2, [pc, #44]	; (8005d8c <LSM6DSO_ACC_GetSensitivity+0x80>)
 8005d60:	601a      	str	r2, [r3, #0]
      break;
 8005d62:	e00b      	b.n	8005d7c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	4a0a      	ldr	r2, [pc, #40]	; (8005d90 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8005d68:	601a      	str	r2, [r3, #0]
      break;
 8005d6a:	e007      	b.n	8005d7c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	4a09      	ldr	r2, [pc, #36]	; (8005d94 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8005d70:	601a      	str	r2, [r3, #0]
      break;
 8005d72:	e003      	b.n	8005d7c <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8005d74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d78:	60fb      	str	r3, [r7, #12]
      break;
 8005d7a:	bf00      	nop
  }

  return ret;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	3d79db23 	.word	0x3d79db23
 8005d8c:	3df9db23 	.word	0x3df9db23
 8005d90:	3e79db23 	.word	0x3e79db23
 8005d94:	3ef9db23 	.word	0x3ef9db23

08005d98 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8005da4:	2100      	movs	r1, #0
 8005da6:	ed97 0a00 	vldr	s0, [r7]
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f806 	bl	8005dbc <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8005db0:	4603      	mov	r3, r0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
	...

08005dbc <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b08c      	sub	sp, #48	; 0x30
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	ed87 0a02 	vstr	s0, [r7, #8]
 8005dc8:	460b      	mov	r3, r1
 8005dca:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 8005dd4:	79fb      	ldrb	r3, [r7, #7]
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	f000 80ea 	beq.w	8005fb0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	f300 8163 	bgt.w	80060a8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d002      	beq.n	8005dec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d074      	beq.n	8005ed4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 8005dea:	e15d      	b.n	80060a8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f103 0020 	add.w	r0, r3, #32
 8005df2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005df6:	2301      	movs	r3, #1
 8005df8:	2114      	movs	r1, #20
 8005dfa:	f000 fdfd 	bl	80069f8 <lsm6dso_read_reg>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8005e04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e08:	e16c      	b.n	80060e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8005e0a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005e0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d025      	beq.n	8005e64 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d10b      	bne.n	8005e3a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	3320      	adds	r3, #32
 8005e26:	2100      	movs	r1, #0
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f000 fe73 	bl	8006b14 <lsm6dso_xl_data_rate_set>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8005e34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e38:	e154      	b.n	80060e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8005e3a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005e3e:	f36f 13c7 	bfc	r3, #7, #1
 8005e42:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f103 0020 	add.w	r0, r3, #32
 8005e4c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005e50:	2301      	movs	r3, #1
 8005e52:	2114      	movs	r1, #20
 8005e54:	f000 fde8 	bl	8006a28 <lsm6dso_write_reg>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d002      	beq.n	8005e64 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 8005e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e62:	e13f      	b.n	80060e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f103 0020 	add.w	r0, r3, #32
 8005e6a:	f107 0220 	add.w	r2, r7, #32
 8005e6e:	2301      	movs	r3, #1
 8005e70:	2115      	movs	r1, #21
 8005e72:	f000 fdc1 	bl	80069f8 <lsm6dso_read_reg>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d002      	beq.n	8005e82 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 8005e7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e80:	e130      	b.n	80060e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8005e82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e86:	f003 0310 	and.w	r3, r3, #16
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d014      	beq.n	8005eba <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8005e90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e94:	f36f 1304 	bfc	r3, #4, #1
 8005e98:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f103 0020 	add.w	r0, r3, #32
 8005ea2:	f107 0220 	add.w	r2, r7, #32
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	2115      	movs	r1, #21
 8005eaa:	f000 fdbd 	bl	8006a28 <lsm6dso_write_reg>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d002      	beq.n	8005eba <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8005eb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005eb8:	e114      	b.n	80060e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8005eba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005ebe:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eca:	d400      	bmi.n	8005ece <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8005ecc:	e0f0      	b.n	80060b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8005ece:	4b87      	ldr	r3, [pc, #540]	; (80060ec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8005ed0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ed2:	e0ed      	b.n	80060b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f103 0020 	add.w	r0, r3, #32
 8005eda:	f107 021c 	add.w	r2, r7, #28
 8005ede:	2301      	movs	r3, #1
 8005ee0:	2114      	movs	r1, #20
 8005ee2:	f000 fd89 	bl	80069f8 <lsm6dso_read_reg>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d002      	beq.n	8005ef2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8005eec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ef0:	e0f8      	b.n	80060e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8005ef2:	7f3b      	ldrb	r3, [r7, #28]
 8005ef4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d023      	beq.n	8005f46 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d10b      	bne.n	8005f20 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	3320      	adds	r3, #32
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 fe00 	bl	8006b14 <lsm6dso_xl_data_rate_set>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d002      	beq.n	8005f20 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 8005f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f1e:	e0e1      	b.n	80060e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8005f20:	7f3b      	ldrb	r3, [r7, #28]
 8005f22:	f36f 13c7 	bfc	r3, #7, #1
 8005f26:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f103 0020 	add.w	r0, r3, #32
 8005f2e:	f107 021c 	add.w	r2, r7, #28
 8005f32:	2301      	movs	r3, #1
 8005f34:	2114      	movs	r1, #20
 8005f36:	f000 fd77 	bl	8006a28 <lsm6dso_write_reg>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d002      	beq.n	8005f46 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8005f40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f44:	e0ce      	b.n	80060e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f103 0020 	add.w	r0, r3, #32
 8005f4c:	f107 0218 	add.w	r2, r7, #24
 8005f50:	2301      	movs	r3, #1
 8005f52:	2115      	movs	r1, #21
 8005f54:	f000 fd50 	bl	80069f8 <lsm6dso_read_reg>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d002      	beq.n	8005f64 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 8005f5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f62:	e0bf      	b.n	80060e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8005f64:	7e3b      	ldrb	r3, [r7, #24]
 8005f66:	f003 0310 	and.w	r3, r3, #16
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d112      	bne.n	8005f96 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8005f70:	7e3b      	ldrb	r3, [r7, #24]
 8005f72:	f043 0310 	orr.w	r3, r3, #16
 8005f76:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f103 0020 	add.w	r0, r3, #32
 8005f7e:	f107 0218 	add.w	r2, r7, #24
 8005f82:	2301      	movs	r3, #1
 8005f84:	2115      	movs	r1, #21
 8005f86:	f000 fd4f 	bl	8006a28 <lsm6dso_write_reg>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d002      	beq.n	8005f96 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8005f90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f94:	e0a6      	b.n	80060e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8005f96:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005f9a:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80060f0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8005f9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fa6:	dc00      	bgt.n	8005faa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8005fa8:	e082      	b.n	80060b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8005faa:	4b52      	ldr	r3, [pc, #328]	; (80060f4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8005fac:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fae:	e07f      	b.n	80060b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f103 0020 	add.w	r0, r3, #32
 8005fb6:	f107 0210 	add.w	r2, r7, #16
 8005fba:	2301      	movs	r3, #1
 8005fbc:	2115      	movs	r1, #21
 8005fbe:	f000 fd1b 	bl	80069f8 <lsm6dso_read_reg>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8005fc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fcc:	e08a      	b.n	80060e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8005fce:	7c3b      	ldrb	r3, [r7, #16]
 8005fd0:	f003 0310 	and.w	r3, r3, #16
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d012      	beq.n	8006000 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8005fda:	7c3b      	ldrb	r3, [r7, #16]
 8005fdc:	f36f 1304 	bfc	r3, #4, #1
 8005fe0:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f103 0020 	add.w	r0, r3, #32
 8005fe8:	f107 0210 	add.w	r2, r7, #16
 8005fec:	2301      	movs	r3, #1
 8005fee:	2115      	movs	r1, #21
 8005ff0:	f000 fd1a 	bl	8006a28 <lsm6dso_write_reg>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d002      	beq.n	8006000 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8005ffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ffe:	e071      	b.n	80060e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006006:	2b01      	cmp	r3, #1
 8006008:	d108      	bne.n	800601c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 f8ef 	bl	80061ee <LSM6DSO_GYRO_Disable>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d002      	beq.n	800601c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8006016:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800601a:	e063      	b.n	80060e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f103 0020 	add.w	r0, r3, #32
 8006022:	f107 0214 	add.w	r2, r7, #20
 8006026:	2301      	movs	r3, #1
 8006028:	2114      	movs	r1, #20
 800602a:	f000 fce5 	bl	80069f8 <lsm6dso_read_reg>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d002      	beq.n	800603a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8006034:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006038:	e054      	b.n	80060e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 800603a:	7d3b      	ldrb	r3, [r7, #20]
 800603c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d123      	bne.n	800608e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800604c:	2b01      	cmp	r3, #1
 800604e:	d10b      	bne.n	8006068 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	3320      	adds	r3, #32
 8006054:	2100      	movs	r1, #0
 8006056:	4618      	mov	r0, r3
 8006058:	f000 fd5c 	bl	8006b14 <lsm6dso_xl_data_rate_set>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d002      	beq.n	8006068 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8006062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006066:	e03d      	b.n	80060e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8006068:	7d3b      	ldrb	r3, [r7, #20]
 800606a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800606e:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f103 0020 	add.w	r0, r3, #32
 8006076:	f107 0214 	add.w	r2, r7, #20
 800607a:	2301      	movs	r3, #1
 800607c:	2114      	movs	r1, #20
 800607e:	f000 fcd3 	bl	8006a28 <lsm6dso_write_reg>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d002      	beq.n	800608e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8006088:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800608c:	e02a      	b.n	80060e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 800608e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006092:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80060f0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8006096:	eef4 7ac7 	vcmpe.f32	s15, s14
 800609a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800609e:	dc00      	bgt.n	80060a2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 80060a0:	e006      	b.n	80060b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 80060a2:	4b14      	ldr	r3, [pc, #80]	; (80060f4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 80060a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80060a6:	e003      	b.n	80060b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 80060a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80060ae:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 80060b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060b6:	d102      	bne.n	80060be <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 80060b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060bc:	e012      	b.n	80060e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d106      	bne.n	80060d6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80060c8:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f000 fa27 	bl	8006520 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 80060d2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80060d4:	e005      	b.n	80060e2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 80060d6:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 fab8 	bl	8006650 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 80060e0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 80060e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3730      	adds	r7, #48	; 0x30
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	41480000 	.word	0x41480000
 80060f0:	43500000 	.word	0x43500000
 80060f4:	43500000 	.word	0x43500000

080060f8 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8006102:	f04f 0300 	mov.w	r3, #0
 8006106:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3320      	adds	r3, #32
 800610c:	f107 0210 	add.w	r2, r7, #16
 8006110:	4611      	mov	r1, r2
 8006112:	4618      	mov	r0, r3
 8006114:	f001 f831 	bl	800717a <lsm6dso_acceleration_raw_get>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d002      	beq.n	8006124 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 800611e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006122:	e03c      	b.n	800619e <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8006124:	f107 030c 	add.w	r3, r7, #12
 8006128:	4619      	mov	r1, r3
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f7ff fdee 	bl	8005d0c <LSM6DSO_ACC_GetSensitivity>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d002      	beq.n	800613c <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8006136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800613a:	e030      	b.n	800619e <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 800613c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006140:	ee07 3a90 	vmov	s15, r3
 8006144:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006148:	edd7 7a03 	vldr	s15, [r7, #12]
 800614c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006150:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006154:	ee17 2a90 	vmov	r2, s15
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 800615c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006160:	ee07 3a90 	vmov	s15, r3
 8006164:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006168:	edd7 7a03 	vldr	s15, [r7, #12]
 800616c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006170:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006174:	ee17 2a90 	vmov	r2, s15
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 800617c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006180:	ee07 3a90 	vmov	s15, r3
 8006184:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006188:	edd7 7a03 	vldr	s15, [r7, #12]
 800618c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006190:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006194:	ee17 2a90 	vmov	r2, s15
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3718      	adds	r7, #24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b082      	sub	sp, #8
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d101      	bne.n	80061bc <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	e014      	b.n	80061e6 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f103 0220 	add.w	r2, r3, #32
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80061c8:	4619      	mov	r1, r3
 80061ca:	4610      	mov	r0, r2
 80061cc:	f000 fe06 	bl	8006ddc <lsm6dso_gy_data_rate_set>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d002      	beq.n	80061dc <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 80061d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061da:	e004      	b.n	80061e6 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b082      	sub	sp, #8
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d101      	bne.n	8006204 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8006200:	2300      	movs	r3, #0
 8006202:	e01f      	b.n	8006244 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f103 0220 	add.w	r2, r3, #32
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	3334      	adds	r3, #52	; 0x34
 800620e:	4619      	mov	r1, r3
 8006210:	4610      	mov	r0, r2
 8006212:	f000 fedf 	bl	8006fd4 <lsm6dso_gy_data_rate_get>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d002      	beq.n	8006222 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 800621c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006220:	e010      	b.n	8006244 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	3320      	adds	r3, #32
 8006226:	2100      	movs	r1, #0
 8006228:	4618      	mov	r0, r3
 800622a:	f000 fdd7 	bl	8006ddc <lsm6dso_gy_data_rate_set>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d002      	beq.n	800623a <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8006234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006238:	e004      	b.n	8006244 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006256:	2300      	movs	r3, #0
 8006258:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	3320      	adds	r3, #32
 800625e:	f107 020b 	add.w	r2, r7, #11
 8006262:	4611      	mov	r1, r2
 8006264:	4618      	mov	r0, r3
 8006266:	f000 fd77 	bl	8006d58 <lsm6dso_gy_full_scale_get>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d002      	beq.n	8006276 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8006270:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006274:	e02d      	b.n	80062d2 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8006276:	7afb      	ldrb	r3, [r7, #11]
 8006278:	2b06      	cmp	r3, #6
 800627a:	d825      	bhi.n	80062c8 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 800627c:	a201      	add	r2, pc, #4	; (adr r2, 8006284 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 800627e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006282:	bf00      	nop
 8006284:	080062a9 	.word	0x080062a9
 8006288:	080062a1 	.word	0x080062a1
 800628c:	080062b1 	.word	0x080062b1
 8006290:	080062c9 	.word	0x080062c9
 8006294:	080062b9 	.word	0x080062b9
 8006298:	080062c9 	.word	0x080062c9
 800629c:	080062c1 	.word	0x080062c1
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	4a0e      	ldr	r2, [pc, #56]	; (80062dc <LSM6DSO_GYRO_GetSensitivity+0x90>)
 80062a4:	601a      	str	r2, [r3, #0]
      break;
 80062a6:	e013      	b.n	80062d0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	4a0d      	ldr	r2, [pc, #52]	; (80062e0 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 80062ac:	601a      	str	r2, [r3, #0]
      break;
 80062ae:	e00f      	b.n	80062d0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	4a0c      	ldr	r2, [pc, #48]	; (80062e4 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 80062b4:	601a      	str	r2, [r3, #0]
      break;
 80062b6:	e00b      	b.n	80062d0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	4a0b      	ldr	r2, [pc, #44]	; (80062e8 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 80062bc:	601a      	str	r2, [r3, #0]
      break;
 80062be:	e007      	b.n	80062d0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	4a0a      	ldr	r2, [pc, #40]	; (80062ec <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 80062c4:	601a      	str	r2, [r3, #0]
      break;
 80062c6:	e003      	b.n	80062d0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 80062c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062cc:	60fb      	str	r3, [r7, #12]
      break;
 80062ce:	bf00      	nop
  }

  return ret;
 80062d0:	68fb      	ldr	r3, [r7, #12]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	408c0000 	.word	0x408c0000
 80062e0:	410c0000 	.word	0x410c0000
 80062e4:	418c0000 	.word	0x418c0000
 80062e8:	420c0000 	.word	0x420c0000
 80062ec:	428c0000 	.word	0x428c0000

080062f0 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 80062fc:	2100      	movs	r1, #0
 80062fe:	ed97 0a00 	vldr	s0, [r7]
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f806 	bl	8006314 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8006308:	4603      	mov	r3, r0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3708      	adds	r7, #8
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
	...

08006314 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b088      	sub	sp, #32
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	ed87 0a02 	vstr	s0, [r7, #8]
 8006320:	460b      	mov	r3, r1
 8006322:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8006324:	2300      	movs	r3, #0
 8006326:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 800632c:	79fb      	ldrb	r3, [r7, #7]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d002      	beq.n	8006338 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8006332:	2b01      	cmp	r3, #1
 8006334:	d028      	beq.n	8006388 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8006336:	e05c      	b.n	80063f2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f103 0020 	add.w	r0, r3, #32
 800633e:	f107 0214 	add.w	r2, r7, #20
 8006342:	2301      	movs	r3, #1
 8006344:	2116      	movs	r1, #22
 8006346:	f000 fb57 	bl	80069f8 <lsm6dso_read_reg>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d002      	beq.n	8006356 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8006350:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006354:	e06c      	b.n	8006430 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 8006356:	7d3b      	ldrb	r3, [r7, #20]
 8006358:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d04b      	beq.n	80063fa <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8006362:	7d3b      	ldrb	r3, [r7, #20]
 8006364:	f36f 13c7 	bfc	r3, #7, #1
 8006368:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f103 0020 	add.w	r0, r3, #32
 8006370:	f107 0214 	add.w	r2, r7, #20
 8006374:	2301      	movs	r3, #1
 8006376:	2116      	movs	r1, #22
 8006378:	f000 fb56 	bl	8006a28 <lsm6dso_write_reg>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d03b      	beq.n	80063fa <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8006382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006386:	e053      	b.n	8006430 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f103 0020 	add.w	r0, r3, #32
 800638e:	f107 0210 	add.w	r2, r7, #16
 8006392:	2301      	movs	r3, #1
 8006394:	2116      	movs	r1, #22
 8006396:	f000 fb2f 	bl	80069f8 <lsm6dso_read_reg>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 80063a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063a4:	e044      	b.n	8006430 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 80063a6:	7c3b      	ldrb	r3, [r7, #16]
 80063a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d112      	bne.n	80063d8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 80063b2:	7c3b      	ldrb	r3, [r7, #16]
 80063b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063b8:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f103 0020 	add.w	r0, r3, #32
 80063c0:	f107 0210 	add.w	r2, r7, #16
 80063c4:	2301      	movs	r3, #1
 80063c6:	2116      	movs	r1, #22
 80063c8:	f000 fb2e 	bl	8006a28 <lsm6dso_write_reg>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d002      	beq.n	80063d8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 80063d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063d6:	e02b      	b.n	8006430 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80063d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80063dc:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8006438 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 80063e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063e8:	dc00      	bgt.n	80063ec <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 80063ea:	e007      	b.n	80063fc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 80063ec:	4b13      	ldr	r3, [pc, #76]	; (800643c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 80063ee:	61bb      	str	r3, [r7, #24]
 80063f0:	e004      	b.n	80063fc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 80063f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063f6:	61fb      	str	r3, [r7, #28]
      break;
 80063f8:	e000      	b.n	80063fc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 80063fa:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006402:	d102      	bne.n	800640a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8006404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006408:	e012      	b.n	8006430 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006410:	2b01      	cmp	r3, #1
 8006412:	d106      	bne.n	8006422 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8006414:	ed97 0a06 	vldr	s0, [r7, #24]
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 f9a9 	bl	8006770 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 800641e:	61f8      	str	r0, [r7, #28]
 8006420:	e005      	b.n	800642e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8006422:	ed97 0a06 	vldr	s0, [r7, #24]
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 fa2e 	bl	8006888 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 800642c:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 800642e:	69fb      	ldr	r3, [r7, #28]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3720      	adds	r7, #32
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	43500000 	.word	0x43500000
 800643c:	43500000 	.word	0x43500000

08006440 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	3320      	adds	r3, #32
 800644e:	f107 0210 	add.w	r2, r7, #16
 8006452:	4611      	mov	r1, r2
 8006454:	4618      	mov	r0, r3
 8006456:	f000 fe45 	bl	80070e4 <lsm6dso_angular_rate_raw_get>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d002      	beq.n	8006466 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8006460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006464:	e03c      	b.n	80064e0 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8006466:	f107 030c 	add.w	r3, r7, #12
 800646a:	4619      	mov	r1, r3
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f7ff feed 	bl	800624c <LSM6DSO_GYRO_GetSensitivity>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d002      	beq.n	800647e <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8006478:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800647c:	e030      	b.n	80064e0 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 800647e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006482:	ee07 3a90 	vmov	s15, r3
 8006486:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800648a:	edd7 7a03 	vldr	s15, [r7, #12]
 800648e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006492:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006496:	ee17 2a90 	vmov	r2, s15
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 800649e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80064a2:	ee07 3a90 	vmov	s15, r3
 80064a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80064ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064b6:	ee17 2a90 	vmov	r2, s15
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80064be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80064c2:	ee07 3a90 	vmov	s15, r3
 80064c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80064ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064d6:	ee17 2a90 	vmov	r2, s15
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3718      	adds	r7, #24
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	460b      	mov	r3, r1
 80064f2:	70fb      	strb	r3, [r7, #3]
 80064f4:	4613      	mov	r3, r2
 80064f6:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f103 0020 	add.w	r0, r3, #32
 80064fe:	1cba      	adds	r2, r7, #2
 8006500:	78f9      	ldrb	r1, [r7, #3]
 8006502:	2301      	movs	r3, #1
 8006504:	f000 fa90 	bl	8006a28 <lsm6dso_write_reg>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 800650e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006512:	e000      	b.n	8006516 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
	...

08006520 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 800652c:	edd7 7a00 	vldr	s15, [r7]
 8006530:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006630 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8006534:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800653c:	d801      	bhi.n	8006542 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 800653e:	230b      	movs	r3, #11
 8006540:	e063      	b.n	800660a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006542:	edd7 7a00 	vldr	s15, [r7]
 8006546:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800654a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800654e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006552:	d801      	bhi.n	8006558 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8006554:	2301      	movs	r3, #1
 8006556:	e058      	b.n	800660a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006558:	edd7 7a00 	vldr	s15, [r7]
 800655c:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006560:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006568:	d801      	bhi.n	800656e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800656a:	2302      	movs	r3, #2
 800656c:	e04d      	b.n	800660a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800656e:	edd7 7a00 	vldr	s15, [r7]
 8006572:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8006634 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8006576:	eef4 7ac7 	vcmpe.f32	s15, s14
 800657a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800657e:	d801      	bhi.n	8006584 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8006580:	2303      	movs	r3, #3
 8006582:	e042      	b.n	800660a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006584:	edd7 7a00 	vldr	s15, [r7]
 8006588:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006638 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 800658c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006594:	d801      	bhi.n	800659a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8006596:	2304      	movs	r3, #4
 8006598:	e037      	b.n	800660a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800659a:	edd7 7a00 	vldr	s15, [r7]
 800659e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800663c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 80065a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065aa:	d801      	bhi.n	80065b0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 80065ac:	2305      	movs	r3, #5
 80065ae:	e02c      	b.n	800660a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80065b0:	edd7 7a00 	vldr	s15, [r7]
 80065b4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006640 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 80065b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065c0:	d801      	bhi.n	80065c6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80065c2:	2306      	movs	r3, #6
 80065c4:	e021      	b.n	800660a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80065c6:	edd7 7a00 	vldr	s15, [r7]
 80065ca:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006644 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 80065ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065d6:	d801      	bhi.n	80065dc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80065d8:	2307      	movs	r3, #7
 80065da:	e016      	b.n	800660a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80065dc:	edd7 7a00 	vldr	s15, [r7]
 80065e0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006648 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 80065e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ec:	d801      	bhi.n	80065f2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80065ee:	2308      	movs	r3, #8
 80065f0:	e00b      	b.n	800660a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80065f2:	edd7 7a00 	vldr	s15, [r7]
 80065f6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800664c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 80065fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006602:	d801      	bhi.n	8006608 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8006604:	2309      	movs	r3, #9
 8006606:	e000      	b.n	800660a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006608:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 800660a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	3320      	adds	r3, #32
 8006610:	7bfa      	ldrb	r2, [r7, #15]
 8006612:	4611      	mov	r1, r2
 8006614:	4618      	mov	r0, r3
 8006616:	f000 fa7d 	bl	8006b14 <lsm6dso_xl_data_rate_set>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8006620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006624:	e000      	b.n	8006628 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3710      	adds	r7, #16
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	3fcccccd 	.word	0x3fcccccd
 8006634:	42500000 	.word	0x42500000
 8006638:	42d00000 	.word	0x42d00000
 800663c:	43500000 	.word	0x43500000
 8006640:	43d08000 	.word	0x43d08000
 8006644:	44504000 	.word	0x44504000
 8006648:	44d06000 	.word	0x44d06000
 800664c:	45505000 	.word	0x45505000

08006650 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 800665c:	edd7 7a00 	vldr	s15, [r7]
 8006660:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8006750 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8006664:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800666c:	d801      	bhi.n	8006672 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 800666e:	230b      	movs	r3, #11
 8006670:	e063      	b.n	800673a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006672:	edd7 7a00 	vldr	s15, [r7]
 8006676:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800667a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800667e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006682:	d801      	bhi.n	8006688 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8006684:	2301      	movs	r3, #1
 8006686:	e058      	b.n	800673a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006688:	edd7 7a00 	vldr	s15, [r7]
 800668c:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006690:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006698:	d801      	bhi.n	800669e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800669a:	2302      	movs	r3, #2
 800669c:	e04d      	b.n	800673a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800669e:	edd7 7a00 	vldr	s15, [r7]
 80066a2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006754 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 80066a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ae:	d801      	bhi.n	80066b4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 80066b0:	2303      	movs	r3, #3
 80066b2:	e042      	b.n	800673a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80066b4:	edd7 7a00 	vldr	s15, [r7]
 80066b8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8006758 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 80066bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066c4:	d801      	bhi.n	80066ca <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80066c6:	2304      	movs	r3, #4
 80066c8:	e037      	b.n	800673a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80066ca:	edd7 7a00 	vldr	s15, [r7]
 80066ce:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800675c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 80066d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066da:	d801      	bhi.n	80066e0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 80066dc:	2305      	movs	r3, #5
 80066de:	e02c      	b.n	800673a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80066e0:	edd7 7a00 	vldr	s15, [r7]
 80066e4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006760 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 80066e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066f0:	d801      	bhi.n	80066f6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80066f2:	2306      	movs	r3, #6
 80066f4:	e021      	b.n	800673a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80066f6:	edd7 7a00 	vldr	s15, [r7]
 80066fa:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8006764 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 80066fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006706:	d801      	bhi.n	800670c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8006708:	2307      	movs	r3, #7
 800670a:	e016      	b.n	800673a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800670c:	edd7 7a00 	vldr	s15, [r7]
 8006710:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8006768 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8006714:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800671c:	d801      	bhi.n	8006722 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800671e:	2308      	movs	r3, #8
 8006720:	e00b      	b.n	800673a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006722:	edd7 7a00 	vldr	s15, [r7]
 8006726:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800676c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 800672a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800672e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006732:	d801      	bhi.n	8006738 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8006734:	2309      	movs	r3, #9
 8006736:	e000      	b.n	800673a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006738:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	3fcccccd 	.word	0x3fcccccd
 8006754:	42500000 	.word	0x42500000
 8006758:	42d00000 	.word	0x42d00000
 800675c:	43500000 	.word	0x43500000
 8006760:	43d08000 	.word	0x43d08000
 8006764:	44504000 	.word	0x44504000
 8006768:	44d06000 	.word	0x44d06000
 800676c:	45505000 	.word	0x45505000

08006770 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 800677c:	edd7 7a00 	vldr	s15, [r7]
 8006780:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006784:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800678c:	d801      	bhi.n	8006792 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800678e:	2301      	movs	r3, #1
 8006790:	e058      	b.n	8006844 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006792:	edd7 7a00 	vldr	s15, [r7]
 8006796:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800679a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800679e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067a2:	d801      	bhi.n	80067a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80067a4:	2302      	movs	r3, #2
 80067a6:	e04d      	b.n	8006844 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80067a8:	edd7 7a00 	vldr	s15, [r7]
 80067ac:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800686c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80067b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067b8:	d801      	bhi.n	80067be <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80067ba:	2303      	movs	r3, #3
 80067bc:	e042      	b.n	8006844 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80067be:	edd7 7a00 	vldr	s15, [r7]
 80067c2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006870 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80067c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067ce:	d801      	bhi.n	80067d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80067d0:	2304      	movs	r3, #4
 80067d2:	e037      	b.n	8006844 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80067d4:	edd7 7a00 	vldr	s15, [r7]
 80067d8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006874 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80067dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067e4:	d801      	bhi.n	80067ea <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80067e6:	2305      	movs	r3, #5
 80067e8:	e02c      	b.n	8006844 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80067ea:	edd7 7a00 	vldr	s15, [r7]
 80067ee:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006878 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80067f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067fa:	d801      	bhi.n	8006800 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80067fc:	2306      	movs	r3, #6
 80067fe:	e021      	b.n	8006844 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006800:	edd7 7a00 	vldr	s15, [r7]
 8006804:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800687c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8006808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800680c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006810:	d801      	bhi.n	8006816 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8006812:	2307      	movs	r3, #7
 8006814:	e016      	b.n	8006844 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006816:	edd7 7a00 	vldr	s15, [r7]
 800681a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006880 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800681e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006826:	d801      	bhi.n	800682c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8006828:	2308      	movs	r3, #8
 800682a:	e00b      	b.n	8006844 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800682c:	edd7 7a00 	vldr	s15, [r7]
 8006830:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8006884 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8006834:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800683c:	d801      	bhi.n	8006842 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800683e:	2309      	movs	r3, #9
 8006840:	e000      	b.n	8006844 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006842:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8006844:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	3320      	adds	r3, #32
 800684a:	7bfa      	ldrb	r2, [r7, #15]
 800684c:	4611      	mov	r1, r2
 800684e:	4618      	mov	r0, r3
 8006850:	f000 fac4 	bl	8006ddc <lsm6dso_gy_data_rate_set>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d002      	beq.n	8006860 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 800685a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800685e:	e000      	b.n	8006862 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	42500000 	.word	0x42500000
 8006870:	42d00000 	.word	0x42d00000
 8006874:	43500000 	.word	0x43500000
 8006878:	43d08000 	.word	0x43d08000
 800687c:	44504000 	.word	0x44504000
 8006880:	44d06000 	.word	0x44d06000
 8006884:	45505000 	.word	0x45505000

08006888 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8006894:	edd7 7a00 	vldr	s15, [r7]
 8006898:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800689c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068a4:	d801      	bhi.n	80068aa <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80068a6:	2301      	movs	r3, #1
 80068a8:	e058      	b.n	800695c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80068aa:	edd7 7a00 	vldr	s15, [r7]
 80068ae:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80068b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ba:	d801      	bhi.n	80068c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80068bc:	2302      	movs	r3, #2
 80068be:	e04d      	b.n	800695c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80068c0:	edd7 7a00 	vldr	s15, [r7]
 80068c4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8006970 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80068c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068d0:	d801      	bhi.n	80068d6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80068d2:	2303      	movs	r3, #3
 80068d4:	e042      	b.n	800695c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80068d6:	edd7 7a00 	vldr	s15, [r7]
 80068da:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006974 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80068de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068e6:	d801      	bhi.n	80068ec <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80068e8:	2304      	movs	r3, #4
 80068ea:	e037      	b.n	800695c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80068ec:	edd7 7a00 	vldr	s15, [r7]
 80068f0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8006978 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80068f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068fc:	d801      	bhi.n	8006902 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80068fe:	2305      	movs	r3, #5
 8006900:	e02c      	b.n	800695c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006902:	edd7 7a00 	vldr	s15, [r7]
 8006906:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800697c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800690a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800690e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006912:	d801      	bhi.n	8006918 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8006914:	2306      	movs	r3, #6
 8006916:	e021      	b.n	800695c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006918:	edd7 7a00 	vldr	s15, [r7]
 800691c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006980 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8006920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006928:	d801      	bhi.n	800692e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800692a:	2307      	movs	r3, #7
 800692c:	e016      	b.n	800695c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800692e:	edd7 7a00 	vldr	s15, [r7]
 8006932:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8006984 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8006936:	eef4 7ac7 	vcmpe.f32	s15, s14
 800693a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800693e:	d801      	bhi.n	8006944 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8006940:	2308      	movs	r3, #8
 8006942:	e00b      	b.n	800695c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006944:	edd7 7a00 	vldr	s15, [r7]
 8006948:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8006988 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 800694c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006954:	d801      	bhi.n	800695a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8006956:	2309      	movs	r3, #9
 8006958:	e000      	b.n	800695c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800695a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	42500000 	.word	0x42500000
 8006974:	42d00000 	.word	0x42d00000
 8006978:	43500000 	.word	0x43500000
 800697c:	43d08000 	.word	0x43d08000
 8006980:	44504000 	.word	0x44504000
 8006984:	44d06000 	.word	0x44d06000
 8006988:	45505000 	.word	0x45505000

0800698c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800698c:	b590      	push	{r4, r7, lr}
 800698e:	b087      	sub	sp, #28
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	607a      	str	r2, [r7, #4]
 8006996:	461a      	mov	r2, r3
 8006998:	460b      	mov	r3, r1
 800699a:	72fb      	strb	r3, [r7, #11]
 800699c:	4613      	mov	r3, r2
 800699e:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	695c      	ldr	r4, [r3, #20]
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	7b1b      	ldrb	r3, [r3, #12]
 80069ac:	b298      	uxth	r0, r3
 80069ae:	7afb      	ldrb	r3, [r7, #11]
 80069b0:	b299      	uxth	r1, r3
 80069b2:	893b      	ldrh	r3, [r7, #8]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	47a0      	blx	r4
 80069b8:	4603      	mov	r3, r0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	371c      	adds	r7, #28
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd90      	pop	{r4, r7, pc}

080069c2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80069c2:	b590      	push	{r4, r7, lr}
 80069c4:	b087      	sub	sp, #28
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	60f8      	str	r0, [r7, #12]
 80069ca:	607a      	str	r2, [r7, #4]
 80069cc:	461a      	mov	r2, r3
 80069ce:	460b      	mov	r3, r1
 80069d0:	72fb      	strb	r3, [r7, #11]
 80069d2:	4613      	mov	r3, r2
 80069d4:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	691c      	ldr	r4, [r3, #16]
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	7b1b      	ldrb	r3, [r3, #12]
 80069e2:	b298      	uxth	r0, r3
 80069e4:	7afb      	ldrb	r3, [r7, #11]
 80069e6:	b299      	uxth	r1, r3
 80069e8:	893b      	ldrh	r3, [r7, #8]
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	47a0      	blx	r4
 80069ee:	4603      	mov	r3, r0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	371c      	adds	r7, #28
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd90      	pop	{r4, r7, pc}

080069f8 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80069f8:	b590      	push	{r4, r7, lr}
 80069fa:	b087      	sub	sp, #28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	607a      	str	r2, [r7, #4]
 8006a02:	461a      	mov	r2, r3
 8006a04:	460b      	mov	r3, r1
 8006a06:	72fb      	strb	r3, [r7, #11]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	685c      	ldr	r4, [r3, #4]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	68d8      	ldr	r0, [r3, #12]
 8006a14:	893b      	ldrh	r3, [r7, #8]
 8006a16:	7af9      	ldrb	r1, [r7, #11]
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	47a0      	blx	r4
 8006a1c:	6178      	str	r0, [r7, #20]

  return ret;
 8006a1e:	697b      	ldr	r3, [r7, #20]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	371c      	adds	r7, #28
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd90      	pop	{r4, r7, pc}

08006a28 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8006a28:	b590      	push	{r4, r7, lr}
 8006a2a:	b087      	sub	sp, #28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	607a      	str	r2, [r7, #4]
 8006a32:	461a      	mov	r2, r3
 8006a34:	460b      	mov	r3, r1
 8006a36:	72fb      	strb	r3, [r7, #11]
 8006a38:	4613      	mov	r3, r2
 8006a3a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681c      	ldr	r4, [r3, #0]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	68d8      	ldr	r0, [r3, #12]
 8006a44:	893b      	ldrh	r3, [r7, #8]
 8006a46:	7af9      	ldrb	r1, [r7, #11]
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	47a0      	blx	r4
 8006a4c:	6178      	str	r0, [r7, #20]

  return ret;
 8006a4e:	697b      	ldr	r3, [r7, #20]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	371c      	adds	r7, #28
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd90      	pop	{r4, r7, pc}

08006a58 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	460b      	mov	r3, r1
 8006a62:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8006a64:	f107 0208 	add.w	r2, r7, #8
 8006a68:	2301      	movs	r3, #1
 8006a6a:	2110      	movs	r1, #16
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f7ff ffc3 	bl	80069f8 <lsm6dso_read_reg>
 8006a72:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10f      	bne.n	8006a9a <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8006a7a:	78fb      	ldrb	r3, [r7, #3]
 8006a7c:	f003 0303 	and.w	r3, r3, #3
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	7a3b      	ldrb	r3, [r7, #8]
 8006a84:	f362 0383 	bfi	r3, r2, #2, #2
 8006a88:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8006a8a:	f107 0208 	add.w	r2, r7, #8
 8006a8e:	2301      	movs	r3, #1
 8006a90:	2110      	movs	r1, #16
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7ff ffc8 	bl	8006a28 <lsm6dso_write_reg>
 8006a98:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8006aae:	f107 0208 	add.w	r2, r7, #8
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	2110      	movs	r1, #16
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7ff ff9e 	bl	80069f8 <lsm6dso_read_reg>
 8006abc:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8006abe:	7a3b      	ldrb	r3, [r7, #8]
 8006ac0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b03      	cmp	r3, #3
 8006ac8:	d81a      	bhi.n	8006b00 <lsm6dso_xl_full_scale_get+0x5c>
 8006aca:	a201      	add	r2, pc, #4	; (adr r2, 8006ad0 <lsm6dso_xl_full_scale_get+0x2c>)
 8006acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad0:	08006ae1 	.word	0x08006ae1
 8006ad4:	08006ae9 	.word	0x08006ae9
 8006ad8:	08006af1 	.word	0x08006af1
 8006adc:	08006af9 	.word	0x08006af9
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	701a      	strb	r2, [r3, #0]
      break;
 8006ae6:	e00f      	b.n	8006b08 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	2201      	movs	r2, #1
 8006aec:	701a      	strb	r2, [r3, #0]
      break;
 8006aee:	e00b      	b.n	8006b08 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	2202      	movs	r2, #2
 8006af4:	701a      	strb	r2, [r3, #0]
      break;
 8006af6:	e007      	b.n	8006b08 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	2203      	movs	r2, #3
 8006afc:	701a      	strb	r2, [r3, #0]
      break;
 8006afe:	e003      	b.n	8006b08 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	2200      	movs	r2, #0
 8006b04:	701a      	strb	r2, [r3, #0]
      break;
 8006b06:	bf00      	nop
  }

  return ret;
 8006b08:	68fb      	ldr	r3, [r7, #12]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop

08006b14 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8006b20:	78fb      	ldrb	r3, [r7, #3]
 8006b22:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8006b24:	f107 030c 	add.w	r3, r7, #12
 8006b28:	4619      	mov	r1, r3
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fc28 	bl	8007380 <lsm6dso_fsm_enable_get>
 8006b30:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f040 80c4 	bne.w	8006cc2 <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006b3a:	7b3b      	ldrb	r3, [r7, #12]
 8006b3c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006b40:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006b42:	7b3b      	ldrb	r3, [r7, #12]
 8006b44:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006b48:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006b4e:	7b3b      	ldrb	r3, [r7, #12]
 8006b50:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006b54:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006b56:	4313      	orrs	r3, r2
 8006b58:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006b5a:	7b3b      	ldrb	r3, [r7, #12]
 8006b5c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006b60:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006b62:	4313      	orrs	r3, r2
 8006b64:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006b66:	7b3b      	ldrb	r3, [r7, #12]
 8006b68:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006b6c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006b72:	7b3b      	ldrb	r3, [r7, #12]
 8006b74:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006b78:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006b7e:	7b3b      	ldrb	r3, [r7, #12]
 8006b80:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006b84:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006b86:	4313      	orrs	r3, r2
 8006b88:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006b8a:	7b3b      	ldrb	r3, [r7, #12]
 8006b8c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006b90:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006b92:	4313      	orrs	r3, r2
 8006b94:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006b96:	7b7b      	ldrb	r3, [r7, #13]
 8006b98:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006b9c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006ba2:	7b7b      	ldrb	r3, [r7, #13]
 8006ba4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006ba8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006baa:	4313      	orrs	r3, r2
 8006bac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006bae:	7b7b      	ldrb	r3, [r7, #13]
 8006bb0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006bb4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006bba:	7b7b      	ldrb	r3, [r7, #13]
 8006bbc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006bc0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006bc6:	7b7b      	ldrb	r3, [r7, #13]
 8006bc8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006bcc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006bd2:	7b7b      	ldrb	r3, [r7, #13]
 8006bd4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006bd8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006bde:	7b7b      	ldrb	r3, [r7, #13]
 8006be0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006be4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006be6:	4313      	orrs	r3, r2
 8006be8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8006bea:	7b7b      	ldrb	r3, [r7, #13]
 8006bec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006bf0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d163      	bne.n	8006cc2 <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8006bfa:	f107 030b 	add.w	r3, r7, #11
 8006bfe:	4619      	mov	r1, r3
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 fbdf 	bl	80073c4 <lsm6dso_fsm_data_rate_get>
 8006c06:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d159      	bne.n	8006cc2 <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8006c0e:	7afb      	ldrb	r3, [r7, #11]
 8006c10:	2b03      	cmp	r3, #3
 8006c12:	d853      	bhi.n	8006cbc <lsm6dso_xl_data_rate_set+0x1a8>
 8006c14:	a201      	add	r2, pc, #4	; (adr r2, 8006c1c <lsm6dso_xl_data_rate_set+0x108>)
 8006c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c1a:	bf00      	nop
 8006c1c:	08006c2d 	.word	0x08006c2d
 8006c20:	08006c3f 	.word	0x08006c3f
 8006c24:	08006c5d 	.word	0x08006c5d
 8006c28:	08006c87 	.word	0x08006c87
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 8006c2c:	78fb      	ldrb	r3, [r7, #3]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d102      	bne.n	8006c38 <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8006c32:	2301      	movs	r3, #1
 8006c34:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006c36:	e045      	b.n	8006cc4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006c38:	78fb      	ldrb	r3, [r7, #3]
 8006c3a:	75fb      	strb	r3, [r7, #23]
            break;
 8006c3c:	e042      	b.n	8006cc4 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8006c3e:	78fb      	ldrb	r3, [r7, #3]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d102      	bne.n	8006c4a <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8006c44:	2302      	movs	r3, #2
 8006c46:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006c48:	e03c      	b.n	8006cc4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8006c4a:	78fb      	ldrb	r3, [r7, #3]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d102      	bne.n	8006c56 <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8006c50:	2302      	movs	r3, #2
 8006c52:	75fb      	strb	r3, [r7, #23]
            break;
 8006c54:	e036      	b.n	8006cc4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006c56:	78fb      	ldrb	r3, [r7, #3]
 8006c58:	75fb      	strb	r3, [r7, #23]
            break;
 8006c5a:	e033      	b.n	8006cc4 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8006c5c:	78fb      	ldrb	r3, [r7, #3]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d102      	bne.n	8006c68 <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8006c62:	2303      	movs	r3, #3
 8006c64:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006c66:	e02d      	b.n	8006cc4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8006c68:	78fb      	ldrb	r3, [r7, #3]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d102      	bne.n	8006c74 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	75fb      	strb	r3, [r7, #23]
            break;
 8006c72:	e027      	b.n	8006cc4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8006c74:	78fb      	ldrb	r3, [r7, #3]
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d102      	bne.n	8006c80 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	75fb      	strb	r3, [r7, #23]
            break;
 8006c7e:	e021      	b.n	8006cc4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006c80:	78fb      	ldrb	r3, [r7, #3]
 8006c82:	75fb      	strb	r3, [r7, #23]
            break;
 8006c84:	e01e      	b.n	8006cc4 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8006c86:	78fb      	ldrb	r3, [r7, #3]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d102      	bne.n	8006c92 <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006c8c:	2304      	movs	r3, #4
 8006c8e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006c90:	e018      	b.n	8006cc4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8006c92:	78fb      	ldrb	r3, [r7, #3]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d102      	bne.n	8006c9e <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006c98:	2304      	movs	r3, #4
 8006c9a:	75fb      	strb	r3, [r7, #23]
            break;
 8006c9c:	e012      	b.n	8006cc4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8006c9e:	78fb      	ldrb	r3, [r7, #3]
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d102      	bne.n	8006caa <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006ca4:	2304      	movs	r3, #4
 8006ca6:	75fb      	strb	r3, [r7, #23]
            break;
 8006ca8:	e00c      	b.n	8006cc4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 8006caa:	78fb      	ldrb	r3, [r7, #3]
 8006cac:	2b03      	cmp	r3, #3
 8006cae:	d102      	bne.n	8006cb6 <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006cb0:	2304      	movs	r3, #4
 8006cb2:	75fb      	strb	r3, [r7, #23]
            break;
 8006cb4:	e006      	b.n	8006cc4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006cb6:	78fb      	ldrb	r3, [r7, #3]
 8006cb8:	75fb      	strb	r3, [r7, #23]
            break;
 8006cba:	e003      	b.n	8006cc4 <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8006cbc:	78fb      	ldrb	r3, [r7, #3]
 8006cbe:	75fb      	strb	r3, [r7, #23]
            break;
 8006cc0:	e000      	b.n	8006cc4 <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 8006cc2:	bf00      	nop
    }
  }

  if (ret == 0)
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d107      	bne.n	8006cda <lsm6dso_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8006cca:	f107 0208 	add.w	r2, r7, #8
 8006cce:	2301      	movs	r3, #1
 8006cd0:	2110      	movs	r1, #16
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7ff fe90 	bl	80069f8 <lsm6dso_read_reg>
 8006cd8:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10f      	bne.n	8006d00 <lsm6dso_xl_data_rate_set+0x1ec>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8006ce0:	7dfb      	ldrb	r3, [r7, #23]
 8006ce2:	f003 030f 	and.w	r3, r3, #15
 8006ce6:	b2da      	uxtb	r2, r3
 8006ce8:	7a3b      	ldrb	r3, [r7, #8]
 8006cea:	f362 1307 	bfi	r3, r2, #4, #4
 8006cee:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8006cf0:	f107 0208 	add.w	r2, r7, #8
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	2110      	movs	r1, #16
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f7ff fe95 	bl	8006a28 <lsm6dso_write_reg>
 8006cfe:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8006d00:	693b      	ldr	r3, [r7, #16]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3718      	adds	r7, #24
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop

08006d0c <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	460b      	mov	r3, r1
 8006d16:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006d18:	f107 0208 	add.w	r2, r7, #8
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	2111      	movs	r1, #17
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f7ff fe69 	bl	80069f8 <lsm6dso_read_reg>
 8006d26:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10f      	bne.n	8006d4e <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8006d2e:	78fb      	ldrb	r3, [r7, #3]
 8006d30:	f003 0307 	and.w	r3, r3, #7
 8006d34:	b2da      	uxtb	r2, r3
 8006d36:	7a3b      	ldrb	r3, [r7, #8]
 8006d38:	f362 0343 	bfi	r3, r2, #1, #3
 8006d3c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006d3e:	f107 0208 	add.w	r2, r7, #8
 8006d42:	2301      	movs	r3, #1
 8006d44:	2111      	movs	r1, #17
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7ff fe6e 	bl	8006a28 <lsm6dso_write_reg>
 8006d4c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006d62:	f107 0208 	add.w	r2, r7, #8
 8006d66:	2301      	movs	r3, #1
 8006d68:	2111      	movs	r1, #17
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7ff fe44 	bl	80069f8 <lsm6dso_read_reg>
 8006d70:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8006d72:	7a3b      	ldrb	r3, [r7, #8]
 8006d74:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	2b06      	cmp	r3, #6
 8006d7c:	d824      	bhi.n	8006dc8 <lsm6dso_gy_full_scale_get+0x70>
 8006d7e:	a201      	add	r2, pc, #4	; (adr r2, 8006d84 <lsm6dso_gy_full_scale_get+0x2c>)
 8006d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d84:	08006da1 	.word	0x08006da1
 8006d88:	08006da9 	.word	0x08006da9
 8006d8c:	08006db1 	.word	0x08006db1
 8006d90:	08006dc9 	.word	0x08006dc9
 8006d94:	08006db9 	.word	0x08006db9
 8006d98:	08006dc9 	.word	0x08006dc9
 8006d9c:	08006dc1 	.word	0x08006dc1
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	2200      	movs	r2, #0
 8006da4:	701a      	strb	r2, [r3, #0]
      break;
 8006da6:	e013      	b.n	8006dd0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	2201      	movs	r2, #1
 8006dac:	701a      	strb	r2, [r3, #0]
      break;
 8006dae:	e00f      	b.n	8006dd0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	2202      	movs	r2, #2
 8006db4:	701a      	strb	r2, [r3, #0]
      break;
 8006db6:	e00b      	b.n	8006dd0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	2204      	movs	r2, #4
 8006dbc:	701a      	strb	r2, [r3, #0]
      break;
 8006dbe:	e007      	b.n	8006dd0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	2206      	movs	r2, #6
 8006dc4:	701a      	strb	r2, [r3, #0]
      break;
 8006dc6:	e003      	b.n	8006dd0 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	701a      	strb	r2, [r3, #0]
      break;
 8006dce:	bf00      	nop
  }

  return ret;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop

08006ddc <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	460b      	mov	r3, r1
 8006de6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8006de8:	78fb      	ldrb	r3, [r7, #3]
 8006dea:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8006dec:	f107 030c 	add.w	r3, r7, #12
 8006df0:	4619      	mov	r1, r3
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fac4 	bl	8007380 <lsm6dso_fsm_enable_get>
 8006df8:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f040 80c4 	bne.w	8006f8a <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006e02:	7b3b      	ldrb	r3, [r7, #12]
 8006e04:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006e08:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006e0a:	7b3b      	ldrb	r3, [r7, #12]
 8006e0c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006e10:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006e12:	4313      	orrs	r3, r2
 8006e14:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006e16:	7b3b      	ldrb	r3, [r7, #12]
 8006e18:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006e1c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006e22:	7b3b      	ldrb	r3, [r7, #12]
 8006e24:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006e28:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006e2e:	7b3b      	ldrb	r3, [r7, #12]
 8006e30:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006e34:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006e36:	4313      	orrs	r3, r2
 8006e38:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006e3a:	7b3b      	ldrb	r3, [r7, #12]
 8006e3c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006e40:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006e42:	4313      	orrs	r3, r2
 8006e44:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006e46:	7b3b      	ldrb	r3, [r7, #12]
 8006e48:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006e4c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006e52:	7b3b      	ldrb	r3, [r7, #12]
 8006e54:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006e58:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006e5e:	7b7b      	ldrb	r3, [r7, #13]
 8006e60:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006e64:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006e66:	4313      	orrs	r3, r2
 8006e68:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006e6a:	7b7b      	ldrb	r3, [r7, #13]
 8006e6c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006e70:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006e72:	4313      	orrs	r3, r2
 8006e74:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006e76:	7b7b      	ldrb	r3, [r7, #13]
 8006e78:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006e7c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006e82:	7b7b      	ldrb	r3, [r7, #13]
 8006e84:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006e88:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006e8e:	7b7b      	ldrb	r3, [r7, #13]
 8006e90:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006e94:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006e96:	4313      	orrs	r3, r2
 8006e98:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006e9a:	7b7b      	ldrb	r3, [r7, #13]
 8006e9c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006ea0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006ea6:	7b7b      	ldrb	r3, [r7, #13]
 8006ea8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006eac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8006eb2:	7b7b      	ldrb	r3, [r7, #13]
 8006eb4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006eb8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d163      	bne.n	8006f8a <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8006ec2:	f107 030b 	add.w	r3, r7, #11
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fa7b 	bl	80073c4 <lsm6dso_fsm_data_rate_get>
 8006ece:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d159      	bne.n	8006f8a <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8006ed6:	7afb      	ldrb	r3, [r7, #11]
 8006ed8:	2b03      	cmp	r3, #3
 8006eda:	d853      	bhi.n	8006f84 <lsm6dso_gy_data_rate_set+0x1a8>
 8006edc:	a201      	add	r2, pc, #4	; (adr r2, 8006ee4 <lsm6dso_gy_data_rate_set+0x108>)
 8006ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee2:	bf00      	nop
 8006ee4:	08006ef5 	.word	0x08006ef5
 8006ee8:	08006f07 	.word	0x08006f07
 8006eec:	08006f25 	.word	0x08006f25
 8006ef0:	08006f4f 	.word	0x08006f4f
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 8006ef4:	78fb      	ldrb	r3, [r7, #3]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d102      	bne.n	8006f00 <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8006efa:	2301      	movs	r3, #1
 8006efc:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006efe:	e045      	b.n	8006f8c <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006f00:	78fb      	ldrb	r3, [r7, #3]
 8006f02:	75fb      	strb	r3, [r7, #23]
            break;
 8006f04:	e042      	b.n	8006f8c <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8006f06:	78fb      	ldrb	r3, [r7, #3]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d102      	bne.n	8006f12 <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006f10:	e03c      	b.n	8006f8c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8006f12:	78fb      	ldrb	r3, [r7, #3]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d102      	bne.n	8006f1e <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8006f18:	2302      	movs	r3, #2
 8006f1a:	75fb      	strb	r3, [r7, #23]
            break;
 8006f1c:	e036      	b.n	8006f8c <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006f1e:	78fb      	ldrb	r3, [r7, #3]
 8006f20:	75fb      	strb	r3, [r7, #23]
            break;
 8006f22:	e033      	b.n	8006f8c <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8006f24:	78fb      	ldrb	r3, [r7, #3]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d102      	bne.n	8006f30 <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006f2e:	e02d      	b.n	8006f8c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8006f30:	78fb      	ldrb	r3, [r7, #3]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d102      	bne.n	8006f3c <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8006f36:	2303      	movs	r3, #3
 8006f38:	75fb      	strb	r3, [r7, #23]
            break;
 8006f3a:	e027      	b.n	8006f8c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8006f3c:	78fb      	ldrb	r3, [r7, #3]
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d102      	bne.n	8006f48 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8006f42:	2303      	movs	r3, #3
 8006f44:	75fb      	strb	r3, [r7, #23]
            break;
 8006f46:	e021      	b.n	8006f8c <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006f48:	78fb      	ldrb	r3, [r7, #3]
 8006f4a:	75fb      	strb	r3, [r7, #23]
            break;
 8006f4c:	e01e      	b.n	8006f8c <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8006f4e:	78fb      	ldrb	r3, [r7, #3]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d102      	bne.n	8006f5a <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006f54:	2304      	movs	r3, #4
 8006f56:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006f58:	e018      	b.n	8006f8c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8006f5a:	78fb      	ldrb	r3, [r7, #3]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d102      	bne.n	8006f66 <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006f60:	2304      	movs	r3, #4
 8006f62:	75fb      	strb	r3, [r7, #23]
            break;
 8006f64:	e012      	b.n	8006f8c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8006f66:	78fb      	ldrb	r3, [r7, #3]
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d102      	bne.n	8006f72 <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006f6c:	2304      	movs	r3, #4
 8006f6e:	75fb      	strb	r3, [r7, #23]
            break;
 8006f70:	e00c      	b.n	8006f8c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 8006f72:	78fb      	ldrb	r3, [r7, #3]
 8006f74:	2b03      	cmp	r3, #3
 8006f76:	d102      	bne.n	8006f7e <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006f78:	2304      	movs	r3, #4
 8006f7a:	75fb      	strb	r3, [r7, #23]
            break;
 8006f7c:	e006      	b.n	8006f8c <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006f7e:	78fb      	ldrb	r3, [r7, #3]
 8006f80:	75fb      	strb	r3, [r7, #23]
            break;
 8006f82:	e003      	b.n	8006f8c <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8006f84:	78fb      	ldrb	r3, [r7, #3]
 8006f86:	75fb      	strb	r3, [r7, #23]
            break;
 8006f88:	e000      	b.n	8006f8c <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 8006f8a:	bf00      	nop
    }
  }

  if (ret == 0)
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d107      	bne.n	8006fa2 <lsm6dso_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006f92:	f107 0208 	add.w	r2, r7, #8
 8006f96:	2301      	movs	r3, #1
 8006f98:	2111      	movs	r1, #17
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7ff fd2c 	bl	80069f8 <lsm6dso_read_reg>
 8006fa0:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d10f      	bne.n	8006fc8 <lsm6dso_gy_data_rate_set+0x1ec>
  {
    reg.odr_g = (uint8_t) odr_gy;
 8006fa8:	7dfb      	ldrb	r3, [r7, #23]
 8006faa:	f003 030f 	and.w	r3, r3, #15
 8006fae:	b2da      	uxtb	r2, r3
 8006fb0:	7a3b      	ldrb	r3, [r7, #8]
 8006fb2:	f362 1307 	bfi	r3, r2, #4, #4
 8006fb6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006fb8:	f107 0208 	add.w	r2, r7, #8
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	2111      	movs	r1, #17
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f7ff fd31 	bl	8006a28 <lsm6dso_write_reg>
 8006fc6:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8006fc8:	693b      	ldr	r3, [r7, #16]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3718      	adds	r7, #24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop

08006fd4 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006fde:	f107 0208 	add.w	r2, r7, #8
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	2111      	movs	r1, #17
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7ff fd06 	bl	80069f8 <lsm6dso_read_reg>
 8006fec:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8006fee:	7a3b      	ldrb	r3, [r7, #8]
 8006ff0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b0a      	cmp	r3, #10
 8006ff8:	d844      	bhi.n	8007084 <lsm6dso_gy_data_rate_get+0xb0>
 8006ffa:	a201      	add	r2, pc, #4	; (adr r2, 8007000 <lsm6dso_gy_data_rate_get+0x2c>)
 8006ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007000:	0800702d 	.word	0x0800702d
 8007004:	08007035 	.word	0x08007035
 8007008:	0800703d 	.word	0x0800703d
 800700c:	08007045 	.word	0x08007045
 8007010:	0800704d 	.word	0x0800704d
 8007014:	08007055 	.word	0x08007055
 8007018:	0800705d 	.word	0x0800705d
 800701c:	08007065 	.word	0x08007065
 8007020:	0800706d 	.word	0x0800706d
 8007024:	08007075 	.word	0x08007075
 8007028:	0800707d 	.word	0x0800707d
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	2200      	movs	r2, #0
 8007030:	701a      	strb	r2, [r3, #0]
      break;
 8007032:	e02b      	b.n	800708c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	2201      	movs	r2, #1
 8007038:	701a      	strb	r2, [r3, #0]
      break;
 800703a:	e027      	b.n	800708c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	2202      	movs	r2, #2
 8007040:	701a      	strb	r2, [r3, #0]
      break;
 8007042:	e023      	b.n	800708c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	2203      	movs	r2, #3
 8007048:	701a      	strb	r2, [r3, #0]
      break;
 800704a:	e01f      	b.n	800708c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	2204      	movs	r2, #4
 8007050:	701a      	strb	r2, [r3, #0]
      break;
 8007052:	e01b      	b.n	800708c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	2205      	movs	r2, #5
 8007058:	701a      	strb	r2, [r3, #0]
      break;
 800705a:	e017      	b.n	800708c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	2206      	movs	r2, #6
 8007060:	701a      	strb	r2, [r3, #0]
      break;
 8007062:	e013      	b.n	800708c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	2207      	movs	r2, #7
 8007068:	701a      	strb	r2, [r3, #0]
      break;
 800706a:	e00f      	b.n	800708c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	2208      	movs	r2, #8
 8007070:	701a      	strb	r2, [r3, #0]
      break;
 8007072:	e00b      	b.n	800708c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	2209      	movs	r2, #9
 8007078:	701a      	strb	r2, [r3, #0]
      break;
 800707a:	e007      	b.n	800708c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	220a      	movs	r2, #10
 8007080:	701a      	strb	r2, [r3, #0]
      break;
 8007082:	e003      	b.n	800708c <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	2200      	movs	r2, #0
 8007088:	701a      	strb	r2, [r3, #0]
      break;
 800708a:	bf00      	nop
  }

  return ret;
 800708c:	68fb      	ldr	r3, [r7, #12]
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop

08007098 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	460b      	mov	r3, r1
 80070a2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80070a4:	f107 0208 	add.w	r2, r7, #8
 80070a8:	2301      	movs	r3, #1
 80070aa:	2112      	movs	r1, #18
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7ff fca3 	bl	80069f8 <lsm6dso_read_reg>
 80070b2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10f      	bne.n	80070da <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80070ba:	78fb      	ldrb	r3, [r7, #3]
 80070bc:	f003 0301 	and.w	r3, r3, #1
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	7a3b      	ldrb	r3, [r7, #8]
 80070c4:	f362 1386 	bfi	r3, r2, #6, #1
 80070c8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80070ca:	f107 0208 	add.w	r2, r7, #8
 80070ce:	2301      	movs	r3, #1
 80070d0:	2112      	movs	r1, #18
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f7ff fca8 	bl	8006a28 <lsm6dso_write_reg>
 80070d8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80070da:	68fb      	ldr	r3, [r7, #12]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b086      	sub	sp, #24
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 80070ee:	f107 020c 	add.w	r2, r7, #12
 80070f2:	2306      	movs	r3, #6
 80070f4:	2122      	movs	r1, #34	; 0x22
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7ff fc7e 	bl	80069f8 <lsm6dso_read_reg>
 80070fc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80070fe:	7b7b      	ldrb	r3, [r7, #13]
 8007100:	b21a      	sxth	r2, r3
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	f9b3 3000 	ldrsh.w	r3, [r3]
 800710c:	b29b      	uxth	r3, r3
 800710e:	021b      	lsls	r3, r3, #8
 8007110:	b29a      	uxth	r2, r3
 8007112:	7b3b      	ldrb	r3, [r7, #12]
 8007114:	b29b      	uxth	r3, r3
 8007116:	4413      	add	r3, r2
 8007118:	b29b      	uxth	r3, r3
 800711a:	b21a      	sxth	r2, r3
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007120:	7bfa      	ldrb	r2, [r7, #15]
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	3302      	adds	r3, #2
 8007126:	b212      	sxth	r2, r2
 8007128:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	3302      	adds	r3, #2
 800712e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007132:	b29b      	uxth	r3, r3
 8007134:	021b      	lsls	r3, r3, #8
 8007136:	b29a      	uxth	r2, r3
 8007138:	7bbb      	ldrb	r3, [r7, #14]
 800713a:	b29b      	uxth	r3, r3
 800713c:	4413      	add	r3, r2
 800713e:	b29a      	uxth	r2, r3
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	3302      	adds	r3, #2
 8007144:	b212      	sxth	r2, r2
 8007146:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007148:	7c7a      	ldrb	r2, [r7, #17]
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	3304      	adds	r3, #4
 800714e:	b212      	sxth	r2, r2
 8007150:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	3304      	adds	r3, #4
 8007156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800715a:	b29b      	uxth	r3, r3
 800715c:	021b      	lsls	r3, r3, #8
 800715e:	b29a      	uxth	r2, r3
 8007160:	7c3b      	ldrb	r3, [r7, #16]
 8007162:	b29b      	uxth	r3, r3
 8007164:	4413      	add	r3, r2
 8007166:	b29a      	uxth	r2, r3
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	3304      	adds	r3, #4
 800716c:	b212      	sxth	r2, r2
 800716e:	801a      	strh	r2, [r3, #0]

  return ret;
 8007170:	697b      	ldr	r3, [r7, #20]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3718      	adds	r7, #24
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b086      	sub	sp, #24
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
 8007182:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8007184:	f107 020c 	add.w	r2, r7, #12
 8007188:	2306      	movs	r3, #6
 800718a:	2128      	movs	r1, #40	; 0x28
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f7ff fc33 	bl	80069f8 <lsm6dso_read_reg>
 8007192:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007194:	7b7b      	ldrb	r3, [r7, #13]
 8007196:	b21a      	sxth	r2, r3
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	021b      	lsls	r3, r3, #8
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	7b3b      	ldrb	r3, [r7, #12]
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	4413      	add	r3, r2
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	b21a      	sxth	r2, r3
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80071b6:	7bfa      	ldrb	r2, [r7, #15]
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	3302      	adds	r3, #2
 80071bc:	b212      	sxth	r2, r2
 80071be:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	3302      	adds	r3, #2
 80071c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	021b      	lsls	r3, r3, #8
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	7bbb      	ldrb	r3, [r7, #14]
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	4413      	add	r3, r2
 80071d4:	b29a      	uxth	r2, r3
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	3302      	adds	r3, #2
 80071da:	b212      	sxth	r2, r2
 80071dc:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80071de:	7c7a      	ldrb	r2, [r7, #17]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	3304      	adds	r3, #4
 80071e4:	b212      	sxth	r2, r2
 80071e6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	3304      	adds	r3, #4
 80071ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	021b      	lsls	r3, r3, #8
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	7c3b      	ldrb	r3, [r7, #16]
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	4413      	add	r3, r2
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	3304      	adds	r3, #4
 8007202:	b212      	sxth	r2, r2
 8007204:	801a      	strh	r2, [r3, #0]

  return ret;
 8007206:	697b      	ldr	r3, [r7, #20]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3718      	adds	r7, #24
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	460b      	mov	r3, r1
 800721a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 800721c:	f107 0208 	add.w	r2, r7, #8
 8007220:	2301      	movs	r3, #1
 8007222:	2101      	movs	r1, #1
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f7ff fbe7 	bl	80069f8 <lsm6dso_read_reg>
 800722a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10f      	bne.n	8007252 <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 8007232:	78fb      	ldrb	r3, [r7, #3]
 8007234:	f003 0303 	and.w	r3, r3, #3
 8007238:	b2da      	uxtb	r2, r3
 800723a:	7a3b      	ldrb	r3, [r7, #8]
 800723c:	f362 1387 	bfi	r3, r2, #6, #2
 8007240:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8007242:	f107 0208 	add.w	r2, r7, #8
 8007246:	2301      	movs	r3, #1
 8007248:	2101      	movs	r1, #1
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7ff fbec 	bl	8006a28 <lsm6dso_write_reg>
 8007250:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007252:	68fb      	ldr	r3, [r7, #12]
}
 8007254:	4618      	mov	r0, r3
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	460b      	mov	r3, r1
 8007266:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007268:	f107 0208 	add.w	r2, r7, #8
 800726c:	2301      	movs	r3, #1
 800726e:	2112      	movs	r1, #18
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f7ff fbc1 	bl	80069f8 <lsm6dso_read_reg>
 8007276:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10f      	bne.n	800729e <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 800727e:	78fb      	ldrb	r3, [r7, #3]
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	b2da      	uxtb	r2, r3
 8007286:	7a3b      	ldrb	r3, [r7, #8]
 8007288:	f362 0382 	bfi	r3, r2, #2, #1
 800728c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800728e:	f107 0208 	add.w	r2, r7, #8
 8007292:	2301      	movs	r3, #1
 8007294:	2112      	movs	r1, #18
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f7ff fbc6 	bl	8006a28 <lsm6dso_write_reg>
 800729c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800729e:	68fb      	ldr	r3, [r7, #12]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	460b      	mov	r3, r1
 80072b2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80072b4:	f107 020c 	add.w	r2, r7, #12
 80072b8:	2301      	movs	r3, #1
 80072ba:	2118      	movs	r1, #24
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f7ff fb9b 	bl	80069f8 <lsm6dso_read_reg>
 80072c2:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d111      	bne.n	80072ee <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 80072ca:	78fb      	ldrb	r3, [r7, #3]
 80072cc:	09db      	lsrs	r3, r3, #7
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	f003 0301 	and.w	r3, r3, #1
 80072d4:	b2da      	uxtb	r2, r3
 80072d6:	7b3b      	ldrb	r3, [r7, #12]
 80072d8:	f362 0341 	bfi	r3, r2, #1, #1
 80072dc:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80072de:	f107 020c 	add.w	r2, r7, #12
 80072e2:	2301      	movs	r3, #1
 80072e4:	2118      	movs	r1, #24
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f7ff fb9e 	bl	8006a28 <lsm6dso_write_reg>
 80072ec:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d107      	bne.n	8007304 <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 80072f4:	f107 0210 	add.w	r2, r7, #16
 80072f8:	2301      	movs	r3, #1
 80072fa:	2162      	movs	r1, #98	; 0x62
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f7ff fb7b 	bl	80069f8 <lsm6dso_read_reg>
 8007302:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10f      	bne.n	800732a <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 800730a:	78fb      	ldrb	r3, [r7, #3]
 800730c:	f003 0303 	and.w	r3, r3, #3
 8007310:	b2da      	uxtb	r2, r3
 8007312:	7c3b      	ldrb	r3, [r7, #16]
 8007314:	f362 03c4 	bfi	r3, r2, #3, #2
 8007318:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 800731a:	f107 0210 	add.w	r2, r7, #16
 800731e:	2301      	movs	r3, #1
 8007320:	2162      	movs	r1, #98	; 0x62
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7ff fb80 	bl	8006a28 <lsm6dso_write_reg>
 8007328:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 800732a:	697b      	ldr	r3, [r7, #20]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3718      	adds	r7, #24
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	460b      	mov	r3, r1
 800733e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8007340:	f107 0208 	add.w	r2, r7, #8
 8007344:	2301      	movs	r3, #1
 8007346:	210a      	movs	r1, #10
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7ff fb55 	bl	80069f8 <lsm6dso_read_reg>
 800734e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d10f      	bne.n	8007376 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8007356:	78fb      	ldrb	r3, [r7, #3]
 8007358:	f003 0307 	and.w	r3, r3, #7
 800735c:	b2da      	uxtb	r2, r3
 800735e:	7a3b      	ldrb	r3, [r7, #8]
 8007360:	f362 0302 	bfi	r3, r2, #0, #3
 8007364:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8007366:	f107 0208 	add.w	r2, r7, #8
 800736a:	2301      	movs	r3, #1
 800736c:	210a      	movs	r1, #10
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f7ff fb5a 	bl	8006a28 <lsm6dso_write_reg>
 8007374:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007376:	68fb      	ldr	r3, [r7, #12]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800738a:	2102      	movs	r1, #2
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f7ff ff3f 	bl	8007210 <lsm6dso_mem_bank_set>
 8007392:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d106      	bne.n	80073a8 <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 800739a:	2302      	movs	r3, #2
 800739c:	683a      	ldr	r2, [r7, #0]
 800739e:	2146      	movs	r1, #70	; 0x46
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f7ff fb29 	bl	80069f8 <lsm6dso_read_reg>
 80073a6:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d104      	bne.n	80073b8 <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80073ae:	2100      	movs	r1, #0
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7ff ff2d 	bl	8007210 <lsm6dso_mem_bank_set>
 80073b6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80073b8:	68fb      	ldr	r3, [r7, #12]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
	...

080073c4 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80073ce:	2102      	movs	r1, #2
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f7ff ff1d 	bl	8007210 <lsm6dso_mem_bank_set>
 80073d6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d107      	bne.n	80073ee <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 80073de:	f107 0208 	add.w	r2, r7, #8
 80073e2:	2301      	movs	r3, #1
 80073e4:	215f      	movs	r1, #95	; 0x5f
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f7ff fb06 	bl	80069f8 <lsm6dso_read_reg>
 80073ec:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d12a      	bne.n	800744a <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 80073f4:	7a3b      	ldrb	r3, [r7, #8]
 80073f6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	2b03      	cmp	r3, #3
 80073fe:	d81b      	bhi.n	8007438 <lsm6dso_fsm_data_rate_get+0x74>
 8007400:	a201      	add	r2, pc, #4	; (adr r2, 8007408 <lsm6dso_fsm_data_rate_get+0x44>)
 8007402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007406:	bf00      	nop
 8007408:	08007419 	.word	0x08007419
 800740c:	08007421 	.word	0x08007421
 8007410:	08007429 	.word	0x08007429
 8007414:	08007431 	.word	0x08007431
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	2200      	movs	r2, #0
 800741c:	701a      	strb	r2, [r3, #0]
        break;
 800741e:	e00f      	b.n	8007440 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	2201      	movs	r2, #1
 8007424:	701a      	strb	r2, [r3, #0]
        break;
 8007426:	e00b      	b.n	8007440 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	2202      	movs	r2, #2
 800742c:	701a      	strb	r2, [r3, #0]
        break;
 800742e:	e007      	b.n	8007440 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	2203      	movs	r2, #3
 8007434:	701a      	strb	r2, [r3, #0]
        break;
 8007436:	e003      	b.n	8007440 <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2200      	movs	r2, #0
 800743c:	701a      	strb	r2, [r3, #0]
        break;
 800743e:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007440:	2100      	movs	r1, #0
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7ff fee4 	bl	8007210 <lsm6dso_mem_bank_set>
 8007448:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800744a:	68fb      	ldr	r3, [r7, #12]
}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800745e:	2003      	movs	r0, #3
 8007460:	f000 f960 	bl	8007724 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007464:	200f      	movs	r0, #15
 8007466:	f000 f80d 	bl	8007484 <HAL_InitTick>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d002      	beq.n	8007476 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	71fb      	strb	r3, [r7, #7]
 8007474:	e001      	b.n	800747a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007476:	f7fd ff91 	bl	800539c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800747a:	79fb      	ldrb	r3, [r7, #7]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800748c:	2300      	movs	r3, #0
 800748e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8007490:	4b17      	ldr	r3, [pc, #92]	; (80074f0 <HAL_InitTick+0x6c>)
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d023      	beq.n	80074e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8007498:	4b16      	ldr	r3, [pc, #88]	; (80074f4 <HAL_InitTick+0x70>)
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	4b14      	ldr	r3, [pc, #80]	; (80074f0 <HAL_InitTick+0x6c>)
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	4619      	mov	r1, r3
 80074a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80074a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80074aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 f96d 	bl	800778e <HAL_SYSTICK_Config>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10f      	bne.n	80074da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2b0f      	cmp	r3, #15
 80074be:	d809      	bhi.n	80074d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80074c0:	2200      	movs	r2, #0
 80074c2:	6879      	ldr	r1, [r7, #4]
 80074c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074c8:	f000 f937 	bl	800773a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80074cc:	4a0a      	ldr	r2, [pc, #40]	; (80074f8 <HAL_InitTick+0x74>)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6013      	str	r3, [r2, #0]
 80074d2:	e007      	b.n	80074e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	73fb      	strb	r3, [r7, #15]
 80074d8:	e004      	b.n	80074e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	73fb      	strb	r3, [r7, #15]
 80074de:	e001      	b.n	80074e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	2000000c 	.word	0x2000000c
 80074f4:	20000004 	.word	0x20000004
 80074f8:	20000008 	.word	0x20000008

080074fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80074fc:	b480      	push	{r7}
 80074fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007500:	4b06      	ldr	r3, [pc, #24]	; (800751c <HAL_IncTick+0x20>)
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	461a      	mov	r2, r3
 8007506:	4b06      	ldr	r3, [pc, #24]	; (8007520 <HAL_IncTick+0x24>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4413      	add	r3, r2
 800750c:	4a04      	ldr	r2, [pc, #16]	; (8007520 <HAL_IncTick+0x24>)
 800750e:	6013      	str	r3, [r2, #0]
}
 8007510:	bf00      	nop
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	2000000c 	.word	0x2000000c
 8007520:	20000f04 	.word	0x20000f04

08007524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007524:	b480      	push	{r7}
 8007526:	af00      	add	r7, sp, #0
  return uwTick;
 8007528:	4b03      	ldr	r3, [pc, #12]	; (8007538 <HAL_GetTick+0x14>)
 800752a:	681b      	ldr	r3, [r3, #0]
}
 800752c:	4618      	mov	r0, r3
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	20000f04 	.word	0x20000f04

0800753c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007544:	f7ff ffee 	bl	8007524 <HAL_GetTick>
 8007548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007554:	d005      	beq.n	8007562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8007556:	4b0a      	ldr	r3, [pc, #40]	; (8007580 <HAL_Delay+0x44>)
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	461a      	mov	r2, r3
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	4413      	add	r3, r2
 8007560:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007562:	bf00      	nop
 8007564:	f7ff ffde 	bl	8007524 <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	429a      	cmp	r2, r3
 8007572:	d8f7      	bhi.n	8007564 <HAL_Delay+0x28>
  {
  }
}
 8007574:	bf00      	nop
 8007576:	bf00      	nop
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	2000000c 	.word	0x2000000c

08007584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f003 0307 	and.w	r3, r3, #7
 8007592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007594:	4b0c      	ldr	r3, [pc, #48]	; (80075c8 <__NVIC_SetPriorityGrouping+0x44>)
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80075a0:	4013      	ands	r3, r2
 80075a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80075ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80075b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80075b6:	4a04      	ldr	r2, [pc, #16]	; (80075c8 <__NVIC_SetPriorityGrouping+0x44>)
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	60d3      	str	r3, [r2, #12]
}
 80075bc:	bf00      	nop
 80075be:	3714      	adds	r7, #20
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr
 80075c8:	e000ed00 	.word	0xe000ed00

080075cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80075cc:	b480      	push	{r7}
 80075ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80075d0:	4b04      	ldr	r3, [pc, #16]	; (80075e4 <__NVIC_GetPriorityGrouping+0x18>)
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	0a1b      	lsrs	r3, r3, #8
 80075d6:	f003 0307 	and.w	r3, r3, #7
}
 80075da:	4618      	mov	r0, r3
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr
 80075e4:	e000ed00 	.word	0xe000ed00

080075e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	4603      	mov	r3, r0
 80075f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	db0b      	blt.n	8007612 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80075fa:	79fb      	ldrb	r3, [r7, #7]
 80075fc:	f003 021f 	and.w	r2, r3, #31
 8007600:	4907      	ldr	r1, [pc, #28]	; (8007620 <__NVIC_EnableIRQ+0x38>)
 8007602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007606:	095b      	lsrs	r3, r3, #5
 8007608:	2001      	movs	r0, #1
 800760a:	fa00 f202 	lsl.w	r2, r0, r2
 800760e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007612:	bf00      	nop
 8007614:	370c      	adds	r7, #12
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	e000e100 	.word	0xe000e100

08007624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	4603      	mov	r3, r0
 800762c:	6039      	str	r1, [r7, #0]
 800762e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007634:	2b00      	cmp	r3, #0
 8007636:	db0a      	blt.n	800764e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	b2da      	uxtb	r2, r3
 800763c:	490c      	ldr	r1, [pc, #48]	; (8007670 <__NVIC_SetPriority+0x4c>)
 800763e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007642:	0112      	lsls	r2, r2, #4
 8007644:	b2d2      	uxtb	r2, r2
 8007646:	440b      	add	r3, r1
 8007648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800764c:	e00a      	b.n	8007664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	b2da      	uxtb	r2, r3
 8007652:	4908      	ldr	r1, [pc, #32]	; (8007674 <__NVIC_SetPriority+0x50>)
 8007654:	79fb      	ldrb	r3, [r7, #7]
 8007656:	f003 030f 	and.w	r3, r3, #15
 800765a:	3b04      	subs	r3, #4
 800765c:	0112      	lsls	r2, r2, #4
 800765e:	b2d2      	uxtb	r2, r2
 8007660:	440b      	add	r3, r1
 8007662:	761a      	strb	r2, [r3, #24]
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	e000e100 	.word	0xe000e100
 8007674:	e000ed00 	.word	0xe000ed00

08007678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007678:	b480      	push	{r7}
 800767a:	b089      	sub	sp, #36	; 0x24
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f003 0307 	and.w	r3, r3, #7
 800768a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	f1c3 0307 	rsb	r3, r3, #7
 8007692:	2b04      	cmp	r3, #4
 8007694:	bf28      	it	cs
 8007696:	2304      	movcs	r3, #4
 8007698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	3304      	adds	r3, #4
 800769e:	2b06      	cmp	r3, #6
 80076a0:	d902      	bls.n	80076a8 <NVIC_EncodePriority+0x30>
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	3b03      	subs	r3, #3
 80076a6:	e000      	b.n	80076aa <NVIC_EncodePriority+0x32>
 80076a8:	2300      	movs	r3, #0
 80076aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80076ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	fa02 f303 	lsl.w	r3, r2, r3
 80076b6:	43da      	mvns	r2, r3
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	401a      	ands	r2, r3
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80076c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	fa01 f303 	lsl.w	r3, r1, r3
 80076ca:	43d9      	mvns	r1, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80076d0:	4313      	orrs	r3, r2
         );
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3724      	adds	r7, #36	; 0x24
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
	...

080076e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	3b01      	subs	r3, #1
 80076ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076f0:	d301      	bcc.n	80076f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80076f2:	2301      	movs	r3, #1
 80076f4:	e00f      	b.n	8007716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80076f6:	4a0a      	ldr	r2, [pc, #40]	; (8007720 <SysTick_Config+0x40>)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	3b01      	subs	r3, #1
 80076fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80076fe:	210f      	movs	r1, #15
 8007700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007704:	f7ff ff8e 	bl	8007624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007708:	4b05      	ldr	r3, [pc, #20]	; (8007720 <SysTick_Config+0x40>)
 800770a:	2200      	movs	r2, #0
 800770c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800770e:	4b04      	ldr	r3, [pc, #16]	; (8007720 <SysTick_Config+0x40>)
 8007710:	2207      	movs	r2, #7
 8007712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	e000e010 	.word	0xe000e010

08007724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f7ff ff29 	bl	8007584 <__NVIC_SetPriorityGrouping>
}
 8007732:	bf00      	nop
 8007734:	3708      	adds	r7, #8
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b086      	sub	sp, #24
 800773e:	af00      	add	r7, sp, #0
 8007740:	4603      	mov	r3, r0
 8007742:	60b9      	str	r1, [r7, #8]
 8007744:	607a      	str	r2, [r7, #4]
 8007746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007748:	2300      	movs	r3, #0
 800774a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800774c:	f7ff ff3e 	bl	80075cc <__NVIC_GetPriorityGrouping>
 8007750:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	68b9      	ldr	r1, [r7, #8]
 8007756:	6978      	ldr	r0, [r7, #20]
 8007758:	f7ff ff8e 	bl	8007678 <NVIC_EncodePriority>
 800775c:	4602      	mov	r2, r0
 800775e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007762:	4611      	mov	r1, r2
 8007764:	4618      	mov	r0, r3
 8007766:	f7ff ff5d 	bl	8007624 <__NVIC_SetPriority>
}
 800776a:	bf00      	nop
 800776c:	3718      	adds	r7, #24
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b082      	sub	sp, #8
 8007776:	af00      	add	r7, sp, #0
 8007778:	4603      	mov	r3, r0
 800777a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800777c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007780:	4618      	mov	r0, r3
 8007782:	f7ff ff31 	bl	80075e8 <__NVIC_EnableIRQ>
}
 8007786:	bf00      	nop
 8007788:	3708      	adds	r7, #8
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b082      	sub	sp, #8
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f7ff ffa2 	bl	80076e0 <SysTick_Config>
 800779c:	4603      	mov	r3, r0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
	...

080077a8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d101      	bne.n	80077ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e08d      	b.n	80078d6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	461a      	mov	r2, r3
 80077c0:	4b47      	ldr	r3, [pc, #284]	; (80078e0 <HAL_DMA_Init+0x138>)
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d80f      	bhi.n	80077e6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	461a      	mov	r2, r3
 80077cc:	4b45      	ldr	r3, [pc, #276]	; (80078e4 <HAL_DMA_Init+0x13c>)
 80077ce:	4413      	add	r3, r2
 80077d0:	4a45      	ldr	r2, [pc, #276]	; (80078e8 <HAL_DMA_Init+0x140>)
 80077d2:	fba2 2303 	umull	r2, r3, r2, r3
 80077d6:	091b      	lsrs	r3, r3, #4
 80077d8:	009a      	lsls	r2, r3, #2
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a42      	ldr	r2, [pc, #264]	; (80078ec <HAL_DMA_Init+0x144>)
 80077e2:	641a      	str	r2, [r3, #64]	; 0x40
 80077e4:	e00e      	b.n	8007804 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	461a      	mov	r2, r3
 80077ec:	4b40      	ldr	r3, [pc, #256]	; (80078f0 <HAL_DMA_Init+0x148>)
 80077ee:	4413      	add	r3, r2
 80077f0:	4a3d      	ldr	r2, [pc, #244]	; (80078e8 <HAL_DMA_Init+0x140>)
 80077f2:	fba2 2303 	umull	r2, r3, r2, r3
 80077f6:	091b      	lsrs	r3, r3, #4
 80077f8:	009a      	lsls	r2, r3, #2
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a3c      	ldr	r2, [pc, #240]	; (80078f4 <HAL_DMA_Init+0x14c>)
 8007802:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2202      	movs	r2, #2
 8007808:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800781a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800781e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007828:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007834:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007840:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	4313      	orrs	r3, r2
 800784c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fa72 	bl	8007d40 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007864:	d102      	bne.n	800786c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685a      	ldr	r2, [r3, #4]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007874:	b2d2      	uxtb	r2, r2
 8007876:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007880:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d010      	beq.n	80078ac <HAL_DMA_Init+0x104>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	2b04      	cmp	r3, #4
 8007890:	d80c      	bhi.n	80078ac <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fa92 	bl	8007dbc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800789c:	2200      	movs	r2, #0
 800789e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80078a8:	605a      	str	r2, [r3, #4]
 80078aa:	e008      	b.n	80078be <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	40020407 	.word	0x40020407
 80078e4:	bffdfff8 	.word	0xbffdfff8
 80078e8:	cccccccd 	.word	0xcccccccd
 80078ec:	40020000 	.word	0x40020000
 80078f0:	bffdfbf8 	.word	0xbffdfbf8
 80078f4:	40020400 	.word	0x40020400

080078f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
 8007904:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007910:	2b01      	cmp	r3, #1
 8007912:	d101      	bne.n	8007918 <HAL_DMA_Start_IT+0x20>
 8007914:	2302      	movs	r3, #2
 8007916:	e066      	b.n	80079e6 <HAL_DMA_Start_IT+0xee>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b01      	cmp	r3, #1
 800792a:	d155      	bne.n	80079d8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2202      	movs	r2, #2
 8007930:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f022 0201 	bic.w	r2, r2, #1
 8007948:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	68b9      	ldr	r1, [r7, #8]
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f000 f9b6 	bl	8007cc2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795a:	2b00      	cmp	r3, #0
 800795c:	d008      	beq.n	8007970 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f042 020e 	orr.w	r2, r2, #14
 800796c:	601a      	str	r2, [r3, #0]
 800796e:	e00f      	b.n	8007990 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f022 0204 	bic.w	r2, r2, #4
 800797e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f042 020a 	orr.w	r2, r2, #10
 800798e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d007      	beq.n	80079ae <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079ac:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d007      	beq.n	80079c6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079c4:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f042 0201 	orr.w	r2, r2, #1
 80079d4:	601a      	str	r2, [r3, #0]
 80079d6:	e005      	b.n	80079e4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80079e0:	2302      	movs	r3, #2
 80079e2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80079e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3718      	adds	r7, #24
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b085      	sub	sp, #20
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079f6:	2300      	movs	r3, #0
 80079f8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d008      	beq.n	8007a18 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2204      	movs	r2, #4
 8007a0a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e040      	b.n	8007a9a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f022 020e 	bic.w	r2, r2, #14
 8007a26:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a36:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f022 0201 	bic.w	r2, r2, #1
 8007a46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a4c:	f003 021c 	and.w	r2, r3, #28
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a54:	2101      	movs	r1, #1
 8007a56:	fa01 f202 	lsl.w	r2, r1, r2
 8007a5a:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007a64:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00c      	beq.n	8007a88 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a7c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007a86:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b084      	sub	sp, #16
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d005      	beq.n	8007aca <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2204      	movs	r2, #4
 8007ac2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	73fb      	strb	r3, [r7, #15]
 8007ac8:	e047      	b.n	8007b5a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f022 020e 	bic.w	r2, r2, #14
 8007ad8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f022 0201 	bic.w	r2, r2, #1
 8007ae8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007af4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007af8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007afe:	f003 021c 	and.w	r2, r3, #28
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b06:	2101      	movs	r1, #1
 8007b08:	fa01 f202 	lsl.w	r2, r1, r2
 8007b0c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007b16:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00c      	beq.n	8007b3a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b2e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007b38:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d003      	beq.n	8007b5a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	4798      	blx	r3
    }
  }
  return status;
 8007b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b80:	f003 031c 	and.w	r3, r3, #28
 8007b84:	2204      	movs	r2, #4
 8007b86:	409a      	lsls	r2, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d026      	beq.n	8007bde <HAL_DMA_IRQHandler+0x7a>
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	f003 0304 	and.w	r3, r3, #4
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d021      	beq.n	8007bde <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 0320 	and.w	r3, r3, #32
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d107      	bne.n	8007bb8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f022 0204 	bic.w	r2, r2, #4
 8007bb6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bbc:	f003 021c 	and.w	r2, r3, #28
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc4:	2104      	movs	r1, #4
 8007bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8007bca:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d071      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007bdc:	e06c      	b.n	8007cb8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007be2:	f003 031c 	and.w	r3, r3, #28
 8007be6:	2202      	movs	r2, #2
 8007be8:	409a      	lsls	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	4013      	ands	r3, r2
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d02e      	beq.n	8007c50 <HAL_DMA_IRQHandler+0xec>
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	f003 0302 	and.w	r3, r3, #2
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d029      	beq.n	8007c50 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0320 	and.w	r3, r3, #32
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10b      	bne.n	8007c22 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f022 020a 	bic.w	r2, r2, #10
 8007c18:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c26:	f003 021c 	and.w	r2, r3, #28
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2e:	2102      	movs	r1, #2
 8007c30:	fa01 f202 	lsl.w	r2, r1, r2
 8007c34:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d038      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007c4e:	e033      	b.n	8007cb8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c54:	f003 031c 	and.w	r3, r3, #28
 8007c58:	2208      	movs	r2, #8
 8007c5a:	409a      	lsls	r2, r3
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	4013      	ands	r3, r2
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d02a      	beq.n	8007cba <HAL_DMA_IRQHandler+0x156>
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	f003 0308 	and.w	r3, r3, #8
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d025      	beq.n	8007cba <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f022 020e 	bic.w	r2, r2, #14
 8007c7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c82:	f003 021c 	and.w	r2, r3, #28
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8a:	2101      	movs	r1, #1
 8007c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8007c90:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d004      	beq.n	8007cba <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007cb8:	bf00      	nop
 8007cba:	bf00      	nop
}
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b085      	sub	sp, #20
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	60f8      	str	r0, [r7, #12]
 8007cca:	60b9      	str	r1, [r7, #8]
 8007ccc:	607a      	str	r2, [r7, #4]
 8007cce:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007cd8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d004      	beq.n	8007cec <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007cea:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf0:	f003 021c 	and.w	r2, r3, #28
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf8:	2101      	movs	r1, #1
 8007cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8007cfe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	683a      	ldr	r2, [r7, #0]
 8007d06:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	2b10      	cmp	r3, #16
 8007d0e:	d108      	bne.n	8007d22 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007d20:	e007      	b.n	8007d32 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68ba      	ldr	r2, [r7, #8]
 8007d28:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	60da      	str	r2, [r3, #12]
}
 8007d32:	bf00      	nop
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
	...

08007d40 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	4b17      	ldr	r3, [pc, #92]	; (8007dac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d80a      	bhi.n	8007d6a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d58:	089b      	lsrs	r3, r3, #2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007d60:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	6493      	str	r3, [r2, #72]	; 0x48
 8007d68:	e007      	b.n	8007d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d6e:	089b      	lsrs	r3, r3, #2
 8007d70:	009a      	lsls	r2, r3, #2
 8007d72:	4b0f      	ldr	r3, [pc, #60]	; (8007db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007d74:	4413      	add	r3, r2
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	3b08      	subs	r3, #8
 8007d82:	4a0c      	ldr	r2, [pc, #48]	; (8007db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007d84:	fba2 2303 	umull	r2, r3, r2, r3
 8007d88:	091b      	lsrs	r3, r3, #4
 8007d8a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a0a      	ldr	r2, [pc, #40]	; (8007db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007d90:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f003 031f 	and.w	r3, r3, #31
 8007d98:	2201      	movs	r2, #1
 8007d9a:	409a      	lsls	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007da0:	bf00      	nop
 8007da2:	3714      	adds	r7, #20
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr
 8007dac:	40020407 	.word	0x40020407
 8007db0:	4002081c 	.word	0x4002081c
 8007db4:	cccccccd 	.word	0xcccccccd
 8007db8:	40020880 	.word	0x40020880

08007dbc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	4b0b      	ldr	r3, [pc, #44]	; (8007dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007dd0:	4413      	add	r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a08      	ldr	r2, [pc, #32]	; (8007e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007dde:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	3b01      	subs	r3, #1
 8007de4:	f003 0303 	and.w	r3, r3, #3
 8007de8:	2201      	movs	r2, #1
 8007dea:	409a      	lsls	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007df0:	bf00      	nop
 8007df2:	3714      	adds	r7, #20
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr
 8007dfc:	1000823f 	.word	0x1000823f
 8007e00:	40020940 	.word	0x40020940

08007e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b087      	sub	sp, #28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007e12:	e166      	b.n	80080e2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	2101      	movs	r1, #1
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e20:	4013      	ands	r3, r2
 8007e22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f000 8158 	beq.w	80080dc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	f003 0303 	and.w	r3, r3, #3
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d005      	beq.n	8007e44 <HAL_GPIO_Init+0x40>
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	f003 0303 	and.w	r3, r3, #3
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d130      	bne.n	8007ea6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	005b      	lsls	r3, r3, #1
 8007e4e:	2203      	movs	r2, #3
 8007e50:	fa02 f303 	lsl.w	r3, r2, r3
 8007e54:	43db      	mvns	r3, r3
 8007e56:	693a      	ldr	r2, [r7, #16]
 8007e58:	4013      	ands	r3, r2
 8007e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	68da      	ldr	r2, [r3, #12]
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	005b      	lsls	r3, r3, #1
 8007e64:	fa02 f303 	lsl.w	r3, r2, r3
 8007e68:	693a      	ldr	r2, [r7, #16]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e82:	43db      	mvns	r3, r3
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	4013      	ands	r3, r2
 8007e88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	091b      	lsrs	r3, r3, #4
 8007e90:	f003 0201 	and.w	r2, r3, #1
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	fa02 f303 	lsl.w	r3, r2, r3
 8007e9a:	693a      	ldr	r2, [r7, #16]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	f003 0303 	and.w	r3, r3, #3
 8007eae:	2b03      	cmp	r3, #3
 8007eb0:	d017      	beq.n	8007ee2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	005b      	lsls	r3, r3, #1
 8007ebc:	2203      	movs	r2, #3
 8007ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec2:	43db      	mvns	r3, r3
 8007ec4:	693a      	ldr	r2, [r7, #16]
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	689a      	ldr	r2, [r3, #8]
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	005b      	lsls	r3, r3, #1
 8007ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed6:	693a      	ldr	r2, [r7, #16]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f003 0303 	and.w	r3, r3, #3
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d123      	bne.n	8007f36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	08da      	lsrs	r2, r3, #3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	3208      	adds	r2, #8
 8007ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007efa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	f003 0307 	and.w	r3, r3, #7
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	220f      	movs	r2, #15
 8007f06:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0a:	43db      	mvns	r3, r3
 8007f0c:	693a      	ldr	r2, [r7, #16]
 8007f0e:	4013      	ands	r3, r2
 8007f10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	691a      	ldr	r2, [r3, #16]
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	f003 0307 	and.w	r3, r3, #7
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f22:	693a      	ldr	r2, [r7, #16]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	08da      	lsrs	r2, r3, #3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	3208      	adds	r2, #8
 8007f30:	6939      	ldr	r1, [r7, #16]
 8007f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	005b      	lsls	r3, r3, #1
 8007f40:	2203      	movs	r2, #3
 8007f42:	fa02 f303 	lsl.w	r3, r2, r3
 8007f46:	43db      	mvns	r3, r3
 8007f48:	693a      	ldr	r2, [r7, #16]
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	f003 0203 	and.w	r2, r3, #3
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	005b      	lsls	r3, r3, #1
 8007f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f5e:	693a      	ldr	r2, [r7, #16]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f000 80b2 	beq.w	80080dc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f78:	4b61      	ldr	r3, [pc, #388]	; (8008100 <HAL_GPIO_Init+0x2fc>)
 8007f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f7c:	4a60      	ldr	r2, [pc, #384]	; (8008100 <HAL_GPIO_Init+0x2fc>)
 8007f7e:	f043 0301 	orr.w	r3, r3, #1
 8007f82:	6613      	str	r3, [r2, #96]	; 0x60
 8007f84:	4b5e      	ldr	r3, [pc, #376]	; (8008100 <HAL_GPIO_Init+0x2fc>)
 8007f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f88:	f003 0301 	and.w	r3, r3, #1
 8007f8c:	60bb      	str	r3, [r7, #8]
 8007f8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007f90:	4a5c      	ldr	r2, [pc, #368]	; (8008104 <HAL_GPIO_Init+0x300>)
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	089b      	lsrs	r3, r3, #2
 8007f96:	3302      	adds	r3, #2
 8007f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	f003 0303 	and.w	r3, r3, #3
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	220f      	movs	r2, #15
 8007fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fac:	43db      	mvns	r3, r3
 8007fae:	693a      	ldr	r2, [r7, #16]
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007fba:	d02b      	beq.n	8008014 <HAL_GPIO_Init+0x210>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a52      	ldr	r2, [pc, #328]	; (8008108 <HAL_GPIO_Init+0x304>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d025      	beq.n	8008010 <HAL_GPIO_Init+0x20c>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a51      	ldr	r2, [pc, #324]	; (800810c <HAL_GPIO_Init+0x308>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d01f      	beq.n	800800c <HAL_GPIO_Init+0x208>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a50      	ldr	r2, [pc, #320]	; (8008110 <HAL_GPIO_Init+0x30c>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d019      	beq.n	8008008 <HAL_GPIO_Init+0x204>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a4f      	ldr	r2, [pc, #316]	; (8008114 <HAL_GPIO_Init+0x310>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d013      	beq.n	8008004 <HAL_GPIO_Init+0x200>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a4e      	ldr	r2, [pc, #312]	; (8008118 <HAL_GPIO_Init+0x314>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d00d      	beq.n	8008000 <HAL_GPIO_Init+0x1fc>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a4d      	ldr	r2, [pc, #308]	; (800811c <HAL_GPIO_Init+0x318>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d007      	beq.n	8007ffc <HAL_GPIO_Init+0x1f8>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a4c      	ldr	r2, [pc, #304]	; (8008120 <HAL_GPIO_Init+0x31c>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d101      	bne.n	8007ff8 <HAL_GPIO_Init+0x1f4>
 8007ff4:	2307      	movs	r3, #7
 8007ff6:	e00e      	b.n	8008016 <HAL_GPIO_Init+0x212>
 8007ff8:	2308      	movs	r3, #8
 8007ffa:	e00c      	b.n	8008016 <HAL_GPIO_Init+0x212>
 8007ffc:	2306      	movs	r3, #6
 8007ffe:	e00a      	b.n	8008016 <HAL_GPIO_Init+0x212>
 8008000:	2305      	movs	r3, #5
 8008002:	e008      	b.n	8008016 <HAL_GPIO_Init+0x212>
 8008004:	2304      	movs	r3, #4
 8008006:	e006      	b.n	8008016 <HAL_GPIO_Init+0x212>
 8008008:	2303      	movs	r3, #3
 800800a:	e004      	b.n	8008016 <HAL_GPIO_Init+0x212>
 800800c:	2302      	movs	r3, #2
 800800e:	e002      	b.n	8008016 <HAL_GPIO_Init+0x212>
 8008010:	2301      	movs	r3, #1
 8008012:	e000      	b.n	8008016 <HAL_GPIO_Init+0x212>
 8008014:	2300      	movs	r3, #0
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	f002 0203 	and.w	r2, r2, #3
 800801c:	0092      	lsls	r2, r2, #2
 800801e:	4093      	lsls	r3, r2
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	4313      	orrs	r3, r2
 8008024:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008026:	4937      	ldr	r1, [pc, #220]	; (8008104 <HAL_GPIO_Init+0x300>)
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	089b      	lsrs	r3, r3, #2
 800802c:	3302      	adds	r3, #2
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008034:	4b3b      	ldr	r3, [pc, #236]	; (8008124 <HAL_GPIO_Init+0x320>)
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	43db      	mvns	r3, r3
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	4013      	ands	r3, r2
 8008042:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800804c:	2b00      	cmp	r3, #0
 800804e:	d003      	beq.n	8008058 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8008050:	693a      	ldr	r2, [r7, #16]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	4313      	orrs	r3, r2
 8008056:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008058:	4a32      	ldr	r2, [pc, #200]	; (8008124 <HAL_GPIO_Init+0x320>)
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800805e:	4b31      	ldr	r3, [pc, #196]	; (8008124 <HAL_GPIO_Init+0x320>)
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	43db      	mvns	r3, r3
 8008068:	693a      	ldr	r2, [r7, #16]
 800806a:	4013      	ands	r3, r2
 800806c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800807a:	693a      	ldr	r2, [r7, #16]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	4313      	orrs	r3, r2
 8008080:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008082:	4a28      	ldr	r2, [pc, #160]	; (8008124 <HAL_GPIO_Init+0x320>)
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008088:	4b26      	ldr	r3, [pc, #152]	; (8008124 <HAL_GPIO_Init+0x320>)
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	43db      	mvns	r3, r3
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	4013      	ands	r3, r2
 8008096:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d003      	beq.n	80080ac <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80080a4:	693a      	ldr	r2, [r7, #16]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80080ac:	4a1d      	ldr	r2, [pc, #116]	; (8008124 <HAL_GPIO_Init+0x320>)
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80080b2:	4b1c      	ldr	r3, [pc, #112]	; (8008124 <HAL_GPIO_Init+0x320>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	43db      	mvns	r3, r3
 80080bc:	693a      	ldr	r2, [r7, #16]
 80080be:	4013      	ands	r3, r2
 80080c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d003      	beq.n	80080d6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80080ce:	693a      	ldr	r2, [r7, #16]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80080d6:	4a13      	ldr	r2, [pc, #76]	; (8008124 <HAL_GPIO_Init+0x320>)
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	3301      	adds	r3, #1
 80080e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	fa22 f303 	lsr.w	r3, r2, r3
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f47f ae91 	bne.w	8007e14 <HAL_GPIO_Init+0x10>
  }
}
 80080f2:	bf00      	nop
 80080f4:	bf00      	nop
 80080f6:	371c      	adds	r7, #28
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr
 8008100:	40021000 	.word	0x40021000
 8008104:	40010000 	.word	0x40010000
 8008108:	48000400 	.word	0x48000400
 800810c:	48000800 	.word	0x48000800
 8008110:	48000c00 	.word	0x48000c00
 8008114:	48001000 	.word	0x48001000
 8008118:	48001400 	.word	0x48001400
 800811c:	48001800 	.word	0x48001800
 8008120:	48001c00 	.word	0x48001c00
 8008124:	40010400 	.word	0x40010400

08008128 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008128:	b480      	push	{r7}
 800812a:	b087      	sub	sp, #28
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008132:	2300      	movs	r3, #0
 8008134:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8008136:	e0c9      	b.n	80082cc <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008138:	2201      	movs	r2, #1
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	fa02 f303 	lsl.w	r3, r2, r3
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	4013      	ands	r3, r2
 8008144:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	2b00      	cmp	r3, #0
 800814a:	f000 80bc 	beq.w	80082c6 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800814e:	4a66      	ldr	r2, [pc, #408]	; (80082e8 <HAL_GPIO_DeInit+0x1c0>)
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	089b      	lsrs	r3, r3, #2
 8008154:	3302      	adds	r3, #2
 8008156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800815a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	f003 0303 	and.w	r3, r3, #3
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	220f      	movs	r2, #15
 8008166:	fa02 f303 	lsl.w	r3, r2, r3
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	4013      	ands	r3, r2
 800816e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008176:	d02b      	beq.n	80081d0 <HAL_GPIO_DeInit+0xa8>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a5c      	ldr	r2, [pc, #368]	; (80082ec <HAL_GPIO_DeInit+0x1c4>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d025      	beq.n	80081cc <HAL_GPIO_DeInit+0xa4>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4a5b      	ldr	r2, [pc, #364]	; (80082f0 <HAL_GPIO_DeInit+0x1c8>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d01f      	beq.n	80081c8 <HAL_GPIO_DeInit+0xa0>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a5a      	ldr	r2, [pc, #360]	; (80082f4 <HAL_GPIO_DeInit+0x1cc>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d019      	beq.n	80081c4 <HAL_GPIO_DeInit+0x9c>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a59      	ldr	r2, [pc, #356]	; (80082f8 <HAL_GPIO_DeInit+0x1d0>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d013      	beq.n	80081c0 <HAL_GPIO_DeInit+0x98>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a58      	ldr	r2, [pc, #352]	; (80082fc <HAL_GPIO_DeInit+0x1d4>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d00d      	beq.n	80081bc <HAL_GPIO_DeInit+0x94>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a57      	ldr	r2, [pc, #348]	; (8008300 <HAL_GPIO_DeInit+0x1d8>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d007      	beq.n	80081b8 <HAL_GPIO_DeInit+0x90>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a56      	ldr	r2, [pc, #344]	; (8008304 <HAL_GPIO_DeInit+0x1dc>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d101      	bne.n	80081b4 <HAL_GPIO_DeInit+0x8c>
 80081b0:	2307      	movs	r3, #7
 80081b2:	e00e      	b.n	80081d2 <HAL_GPIO_DeInit+0xaa>
 80081b4:	2308      	movs	r3, #8
 80081b6:	e00c      	b.n	80081d2 <HAL_GPIO_DeInit+0xaa>
 80081b8:	2306      	movs	r3, #6
 80081ba:	e00a      	b.n	80081d2 <HAL_GPIO_DeInit+0xaa>
 80081bc:	2305      	movs	r3, #5
 80081be:	e008      	b.n	80081d2 <HAL_GPIO_DeInit+0xaa>
 80081c0:	2304      	movs	r3, #4
 80081c2:	e006      	b.n	80081d2 <HAL_GPIO_DeInit+0xaa>
 80081c4:	2303      	movs	r3, #3
 80081c6:	e004      	b.n	80081d2 <HAL_GPIO_DeInit+0xaa>
 80081c8:	2302      	movs	r3, #2
 80081ca:	e002      	b.n	80081d2 <HAL_GPIO_DeInit+0xaa>
 80081cc:	2301      	movs	r3, #1
 80081ce:	e000      	b.n	80081d2 <HAL_GPIO_DeInit+0xaa>
 80081d0:	2300      	movs	r3, #0
 80081d2:	697a      	ldr	r2, [r7, #20]
 80081d4:	f002 0203 	and.w	r2, r2, #3
 80081d8:	0092      	lsls	r2, r2, #2
 80081da:	4093      	lsls	r3, r2
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d132      	bne.n	8008248 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80081e2:	4b49      	ldr	r3, [pc, #292]	; (8008308 <HAL_GPIO_DeInit+0x1e0>)
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	43db      	mvns	r3, r3
 80081ea:	4947      	ldr	r1, [pc, #284]	; (8008308 <HAL_GPIO_DeInit+0x1e0>)
 80081ec:	4013      	ands	r3, r2
 80081ee:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80081f0:	4b45      	ldr	r3, [pc, #276]	; (8008308 <HAL_GPIO_DeInit+0x1e0>)
 80081f2:	685a      	ldr	r2, [r3, #4]
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	43db      	mvns	r3, r3
 80081f8:	4943      	ldr	r1, [pc, #268]	; (8008308 <HAL_GPIO_DeInit+0x1e0>)
 80081fa:	4013      	ands	r3, r2
 80081fc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80081fe:	4b42      	ldr	r3, [pc, #264]	; (8008308 <HAL_GPIO_DeInit+0x1e0>)
 8008200:	68da      	ldr	r2, [r3, #12]
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	43db      	mvns	r3, r3
 8008206:	4940      	ldr	r1, [pc, #256]	; (8008308 <HAL_GPIO_DeInit+0x1e0>)
 8008208:	4013      	ands	r3, r2
 800820a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800820c:	4b3e      	ldr	r3, [pc, #248]	; (8008308 <HAL_GPIO_DeInit+0x1e0>)
 800820e:	689a      	ldr	r2, [r3, #8]
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	43db      	mvns	r3, r3
 8008214:	493c      	ldr	r1, [pc, #240]	; (8008308 <HAL_GPIO_DeInit+0x1e0>)
 8008216:	4013      	ands	r3, r2
 8008218:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	f003 0303 	and.w	r3, r3, #3
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	220f      	movs	r2, #15
 8008224:	fa02 f303 	lsl.w	r3, r2, r3
 8008228:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800822a:	4a2f      	ldr	r2, [pc, #188]	; (80082e8 <HAL_GPIO_DeInit+0x1c0>)
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	089b      	lsrs	r3, r3, #2
 8008230:	3302      	adds	r3, #2
 8008232:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	43da      	mvns	r2, r3
 800823a:	482b      	ldr	r0, [pc, #172]	; (80082e8 <HAL_GPIO_DeInit+0x1c0>)
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	089b      	lsrs	r3, r3, #2
 8008240:	400a      	ands	r2, r1
 8008242:	3302      	adds	r3, #2
 8008244:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	005b      	lsls	r3, r3, #1
 8008250:	2103      	movs	r1, #3
 8008252:	fa01 f303 	lsl.w	r3, r1, r3
 8008256:	431a      	orrs	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	08da      	lsrs	r2, r3, #3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	3208      	adds	r2, #8
 8008264:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	f003 0307 	and.w	r3, r3, #7
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	220f      	movs	r2, #15
 8008272:	fa02 f303 	lsl.w	r3, r2, r3
 8008276:	43db      	mvns	r3, r3
 8008278:	697a      	ldr	r2, [r7, #20]
 800827a:	08d2      	lsrs	r2, r2, #3
 800827c:	4019      	ands	r1, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	3208      	adds	r2, #8
 8008282:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	689a      	ldr	r2, [r3, #8]
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	005b      	lsls	r3, r3, #1
 800828e:	2103      	movs	r1, #3
 8008290:	fa01 f303 	lsl.w	r3, r1, r3
 8008294:	43db      	mvns	r3, r3
 8008296:	401a      	ands	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	685a      	ldr	r2, [r3, #4]
 80082a0:	2101      	movs	r1, #1
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	fa01 f303 	lsl.w	r3, r1, r3
 80082a8:	43db      	mvns	r3, r3
 80082aa:	401a      	ands	r2, r3
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	68da      	ldr	r2, [r3, #12]
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	005b      	lsls	r3, r3, #1
 80082b8:	2103      	movs	r1, #3
 80082ba:	fa01 f303 	lsl.w	r3, r1, r3
 80082be:	43db      	mvns	r3, r3
 80082c0:	401a      	ands	r2, r3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	3301      	adds	r3, #1
 80082ca:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80082cc:	683a      	ldr	r2, [r7, #0]
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	fa22 f303 	lsr.w	r3, r2, r3
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f47f af2f 	bne.w	8008138 <HAL_GPIO_DeInit+0x10>
  }
}
 80082da:	bf00      	nop
 80082dc:	bf00      	nop
 80082de:	371c      	adds	r7, #28
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr
 80082e8:	40010000 	.word	0x40010000
 80082ec:	48000400 	.word	0x48000400
 80082f0:	48000800 	.word	0x48000800
 80082f4:	48000c00 	.word	0x48000c00
 80082f8:	48001000 	.word	0x48001000
 80082fc:	48001400 	.word	0x48001400
 8008300:	48001800 	.word	0x48001800
 8008304:	48001c00 	.word	0x48001c00
 8008308:	40010400 	.word	0x40010400

0800830c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800830c:	b480      	push	{r7}
 800830e:	b085      	sub	sp, #20
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	460b      	mov	r3, r1
 8008316:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	691a      	ldr	r2, [r3, #16]
 800831c:	887b      	ldrh	r3, [r7, #2]
 800831e:	4013      	ands	r3, r2
 8008320:	2b00      	cmp	r3, #0
 8008322:	d002      	beq.n	800832a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008324:	2301      	movs	r3, #1
 8008326:	73fb      	strb	r3, [r7, #15]
 8008328:	e001      	b.n	800832e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800832a:	2300      	movs	r3, #0
 800832c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800832e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3714      	adds	r7, #20
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	460b      	mov	r3, r1
 8008346:	807b      	strh	r3, [r7, #2]
 8008348:	4613      	mov	r3, r2
 800834a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800834c:	787b      	ldrb	r3, [r7, #1]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008352:	887a      	ldrh	r2, [r7, #2]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008358:	e002      	b.n	8008360 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800835a:	887a      	ldrh	r2, [r7, #2]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800836c:	b480      	push	{r7}
 800836e:	b085      	sub	sp, #20
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	460b      	mov	r3, r1
 8008376:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	695b      	ldr	r3, [r3, #20]
 800837c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800837e:	887a      	ldrh	r2, [r7, #2]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	4013      	ands	r3, r2
 8008384:	041a      	lsls	r2, r3, #16
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	43d9      	mvns	r1, r3
 800838a:	887b      	ldrh	r3, [r7, #2]
 800838c:	400b      	ands	r3, r1
 800838e:	431a      	orrs	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	619a      	str	r2, [r3, #24]
}
 8008394:	bf00      	nop
 8008396:	3714      	adds	r7, #20
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d101      	bne.n	80083b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	e08d      	b.n	80084ce <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d106      	bne.n	80083cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f7fd f80c 	bl	80053e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2224      	movs	r2, #36	; 0x24
 80083d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f022 0201 	bic.w	r2, r2, #1
 80083e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	685a      	ldr	r2, [r3, #4]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80083f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	689a      	ldr	r2, [r3, #8]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008400:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	2b01      	cmp	r3, #1
 8008408:	d107      	bne.n	800841a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	689a      	ldr	r2, [r3, #8]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008416:	609a      	str	r2, [r3, #8]
 8008418:	e006      	b.n	8008428 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	689a      	ldr	r2, [r3, #8]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008426:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	2b02      	cmp	r3, #2
 800842e:	d108      	bne.n	8008442 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	685a      	ldr	r2, [r3, #4]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800843e:	605a      	str	r2, [r3, #4]
 8008440:	e007      	b.n	8008452 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	685a      	ldr	r2, [r3, #4]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008450:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	6812      	ldr	r2, [r2, #0]
 800845c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008464:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68da      	ldr	r2, [r3, #12]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008474:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	691a      	ldr	r2, [r3, #16]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	695b      	ldr	r3, [r3, #20]
 800847e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	430a      	orrs	r2, r1
 800848e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	69d9      	ldr	r1, [r3, #28]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a1a      	ldr	r2, [r3, #32]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	430a      	orrs	r2, r1
 800849e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f042 0201 	orr.w	r2, r2, #1
 80084ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2220      	movs	r2, #32
 80084ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b082      	sub	sp, #8
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d101      	bne.n	80084e8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e021      	b.n	800852c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2224      	movs	r2, #36	; 0x24
 80084ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f022 0201 	bic.w	r2, r2, #1
 80084fe:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f7fc ffcd 	bl	80054a0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3708      	adds	r7, #8
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b088      	sub	sp, #32
 8008538:	af02      	add	r7, sp, #8
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	607a      	str	r2, [r7, #4]
 800853e:	461a      	mov	r2, r3
 8008540:	460b      	mov	r3, r1
 8008542:	817b      	strh	r3, [r7, #10]
 8008544:	4613      	mov	r3, r2
 8008546:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800854e:	b2db      	uxtb	r3, r3
 8008550:	2b20      	cmp	r3, #32
 8008552:	f040 80fd 	bne.w	8008750 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800855c:	2b01      	cmp	r3, #1
 800855e:	d101      	bne.n	8008564 <HAL_I2C_Master_Transmit+0x30>
 8008560:	2302      	movs	r3, #2
 8008562:	e0f6      	b.n	8008752 <HAL_I2C_Master_Transmit+0x21e>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800856c:	f7fe ffda 	bl	8007524 <HAL_GetTick>
 8008570:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	9300      	str	r3, [sp, #0]
 8008576:	2319      	movs	r3, #25
 8008578:	2201      	movs	r2, #1
 800857a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f000 fe04 	bl	800918c <I2C_WaitOnFlagUntilTimeout>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d001      	beq.n	800858e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e0e1      	b.n	8008752 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2221      	movs	r2, #33	; 0x21
 8008592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2210      	movs	r2, #16
 800859a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2200      	movs	r2, #0
 80085a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	893a      	ldrh	r2, [r7, #8]
 80085ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	2bff      	cmp	r3, #255	; 0xff
 80085be:	d906      	bls.n	80085ce <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	22ff      	movs	r2, #255	; 0xff
 80085c4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80085c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80085ca:	617b      	str	r3, [r7, #20]
 80085cc:	e007      	b.n	80085de <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085d2:	b29a      	uxth	r2, r3
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80085d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80085dc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d024      	beq.n	8008630 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ea:	781a      	ldrb	r2, [r3, #0]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f6:	1c5a      	adds	r2, r3, #1
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008600:	b29b      	uxth	r3, r3
 8008602:	3b01      	subs	r3, #1
 8008604:	b29a      	uxth	r2, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800860e:	3b01      	subs	r3, #1
 8008610:	b29a      	uxth	r2, r3
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800861a:	b2db      	uxtb	r3, r3
 800861c:	3301      	adds	r3, #1
 800861e:	b2da      	uxtb	r2, r3
 8008620:	8979      	ldrh	r1, [r7, #10]
 8008622:	4b4e      	ldr	r3, [pc, #312]	; (800875c <HAL_I2C_Master_Transmit+0x228>)
 8008624:	9300      	str	r3, [sp, #0]
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f000 ffeb 	bl	8009604 <I2C_TransferConfig>
 800862e:	e066      	b.n	80086fe <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008634:	b2da      	uxtb	r2, r3
 8008636:	8979      	ldrh	r1, [r7, #10]
 8008638:	4b48      	ldr	r3, [pc, #288]	; (800875c <HAL_I2C_Master_Transmit+0x228>)
 800863a:	9300      	str	r3, [sp, #0]
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f000 ffe0 	bl	8009604 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008644:	e05b      	b.n	80086fe <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008646:	693a      	ldr	r2, [r7, #16]
 8008648:	6a39      	ldr	r1, [r7, #32]
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f000 fded 	bl	800922a <I2C_WaitOnTXISFlagUntilTimeout>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d001      	beq.n	800865a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e07b      	b.n	8008752 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865e:	781a      	ldrb	r2, [r3, #0]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866a:	1c5a      	adds	r2, r3, #1
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008674:	b29b      	uxth	r3, r3
 8008676:	3b01      	subs	r3, #1
 8008678:	b29a      	uxth	r2, r3
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008682:	3b01      	subs	r3, #1
 8008684:	b29a      	uxth	r2, r3
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800868e:	b29b      	uxth	r3, r3
 8008690:	2b00      	cmp	r3, #0
 8008692:	d034      	beq.n	80086fe <HAL_I2C_Master_Transmit+0x1ca>
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008698:	2b00      	cmp	r3, #0
 800869a:	d130      	bne.n	80086fe <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	9300      	str	r3, [sp, #0]
 80086a0:	6a3b      	ldr	r3, [r7, #32]
 80086a2:	2200      	movs	r2, #0
 80086a4:	2180      	movs	r1, #128	; 0x80
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f000 fd70 	bl	800918c <I2C_WaitOnFlagUntilTimeout>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d001      	beq.n	80086b6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e04d      	b.n	8008752 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	2bff      	cmp	r3, #255	; 0xff
 80086be:	d90e      	bls.n	80086de <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	22ff      	movs	r2, #255	; 0xff
 80086c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086ca:	b2da      	uxtb	r2, r3
 80086cc:	8979      	ldrh	r1, [r7, #10]
 80086ce:	2300      	movs	r3, #0
 80086d0:	9300      	str	r3, [sp, #0]
 80086d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80086d6:	68f8      	ldr	r0, [r7, #12]
 80086d8:	f000 ff94 	bl	8009604 <I2C_TransferConfig>
 80086dc:	e00f      	b.n	80086fe <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086ec:	b2da      	uxtb	r2, r3
 80086ee:	8979      	ldrh	r1, [r7, #10]
 80086f0:	2300      	movs	r3, #0
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f000 ff83 	bl	8009604 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008702:	b29b      	uxth	r3, r3
 8008704:	2b00      	cmp	r3, #0
 8008706:	d19e      	bne.n	8008646 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	6a39      	ldr	r1, [r7, #32]
 800870c:	68f8      	ldr	r0, [r7, #12]
 800870e:	f000 fdd3 	bl	80092b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d001      	beq.n	800871c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	e01a      	b.n	8008752 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2220      	movs	r2, #32
 8008722:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	6859      	ldr	r1, [r3, #4]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	4b0c      	ldr	r3, [pc, #48]	; (8008760 <HAL_I2C_Master_Transmit+0x22c>)
 8008730:	400b      	ands	r3, r1
 8008732:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2220      	movs	r2, #32
 8008738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2200      	movs	r2, #0
 8008748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800874c:	2300      	movs	r3, #0
 800874e:	e000      	b.n	8008752 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8008750:	2302      	movs	r3, #2
  }
}
 8008752:	4618      	mov	r0, r3
 8008754:	3718      	adds	r7, #24
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	80002000 	.word	0x80002000
 8008760:	fe00e800 	.word	0xfe00e800

08008764 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b088      	sub	sp, #32
 8008768:	af02      	add	r7, sp, #8
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	607a      	str	r2, [r7, #4]
 800876e:	461a      	mov	r2, r3
 8008770:	460b      	mov	r3, r1
 8008772:	817b      	strh	r3, [r7, #10]
 8008774:	4613      	mov	r3, r2
 8008776:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800877e:	b2db      	uxtb	r3, r3
 8008780:	2b20      	cmp	r3, #32
 8008782:	f040 80db 	bne.w	800893c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800878c:	2b01      	cmp	r3, #1
 800878e:	d101      	bne.n	8008794 <HAL_I2C_Master_Receive+0x30>
 8008790:	2302      	movs	r3, #2
 8008792:	e0d4      	b.n	800893e <HAL_I2C_Master_Receive+0x1da>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800879c:	f7fe fec2 	bl	8007524 <HAL_GetTick>
 80087a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	9300      	str	r3, [sp, #0]
 80087a6:	2319      	movs	r3, #25
 80087a8:	2201      	movs	r2, #1
 80087aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f000 fcec 	bl	800918c <I2C_WaitOnFlagUntilTimeout>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	e0bf      	b.n	800893e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2222      	movs	r2, #34	; 0x22
 80087c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2210      	movs	r2, #16
 80087ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2200      	movs	r2, #0
 80087d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	893a      	ldrh	r2, [r7, #8]
 80087de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2200      	movs	r2, #0
 80087e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	2bff      	cmp	r3, #255	; 0xff
 80087ee:	d90e      	bls.n	800880e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	22ff      	movs	r2, #255	; 0xff
 80087f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087fa:	b2da      	uxtb	r2, r3
 80087fc:	8979      	ldrh	r1, [r7, #10]
 80087fe:	4b52      	ldr	r3, [pc, #328]	; (8008948 <HAL_I2C_Master_Receive+0x1e4>)
 8008800:	9300      	str	r3, [sp, #0]
 8008802:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f000 fefc 	bl	8009604 <I2C_TransferConfig>
 800880c:	e06d      	b.n	80088ea <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008812:	b29a      	uxth	r2, r3
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800881c:	b2da      	uxtb	r2, r3
 800881e:	8979      	ldrh	r1, [r7, #10]
 8008820:	4b49      	ldr	r3, [pc, #292]	; (8008948 <HAL_I2C_Master_Receive+0x1e4>)
 8008822:	9300      	str	r3, [sp, #0]
 8008824:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f000 feeb 	bl	8009604 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800882e:	e05c      	b.n	80088ea <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008830:	697a      	ldr	r2, [r7, #20]
 8008832:	6a39      	ldr	r1, [r7, #32]
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f000 fd83 	bl	8009340 <I2C_WaitOnRXNEFlagUntilTimeout>
 800883a:	4603      	mov	r3, r0
 800883c:	2b00      	cmp	r3, #0
 800883e:	d001      	beq.n	8008844 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	e07c      	b.n	800893e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884e:	b2d2      	uxtb	r2, r2
 8008850:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008856:	1c5a      	adds	r2, r3, #1
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008860:	3b01      	subs	r3, #1
 8008862:	b29a      	uxth	r2, r3
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800886c:	b29b      	uxth	r3, r3
 800886e:	3b01      	subs	r3, #1
 8008870:	b29a      	uxth	r2, r3
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800887a:	b29b      	uxth	r3, r3
 800887c:	2b00      	cmp	r3, #0
 800887e:	d034      	beq.n	80088ea <HAL_I2C_Master_Receive+0x186>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008884:	2b00      	cmp	r3, #0
 8008886:	d130      	bne.n	80088ea <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	9300      	str	r3, [sp, #0]
 800888c:	6a3b      	ldr	r3, [r7, #32]
 800888e:	2200      	movs	r2, #0
 8008890:	2180      	movs	r1, #128	; 0x80
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f000 fc7a 	bl	800918c <I2C_WaitOnFlagUntilTimeout>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d001      	beq.n	80088a2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e04d      	b.n	800893e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	2bff      	cmp	r3, #255	; 0xff
 80088aa:	d90e      	bls.n	80088ca <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	22ff      	movs	r2, #255	; 0xff
 80088b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088b6:	b2da      	uxtb	r2, r3
 80088b8:	8979      	ldrh	r1, [r7, #10]
 80088ba:	2300      	movs	r3, #0
 80088bc:	9300      	str	r3, [sp, #0]
 80088be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	f000 fe9e 	bl	8009604 <I2C_TransferConfig>
 80088c8:	e00f      	b.n	80088ea <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088ce:	b29a      	uxth	r2, r3
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088d8:	b2da      	uxtb	r2, r3
 80088da:	8979      	ldrh	r1, [r7, #10]
 80088dc:	2300      	movs	r3, #0
 80088de:	9300      	str	r3, [sp, #0]
 80088e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f000 fe8d 	bl	8009604 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d19d      	bne.n	8008830 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088f4:	697a      	ldr	r2, [r7, #20]
 80088f6:	6a39      	ldr	r1, [r7, #32]
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f000 fcdd 	bl	80092b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d001      	beq.n	8008908 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e01a      	b.n	800893e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2220      	movs	r2, #32
 800890e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	6859      	ldr	r1, [r3, #4]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	4b0c      	ldr	r3, [pc, #48]	; (800894c <HAL_I2C_Master_Receive+0x1e8>)
 800891c:	400b      	ands	r3, r1
 800891e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2220      	movs	r2, #32
 8008924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2200      	movs	r2, #0
 800892c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008938:	2300      	movs	r3, #0
 800893a:	e000      	b.n	800893e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800893c:	2302      	movs	r3, #2
  }
}
 800893e:	4618      	mov	r0, r3
 8008940:	3718      	adds	r7, #24
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	80002400 	.word	0x80002400
 800894c:	fe00e800 	.word	0xfe00e800

08008950 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b088      	sub	sp, #32
 8008954:	af02      	add	r7, sp, #8
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	4608      	mov	r0, r1
 800895a:	4611      	mov	r1, r2
 800895c:	461a      	mov	r2, r3
 800895e:	4603      	mov	r3, r0
 8008960:	817b      	strh	r3, [r7, #10]
 8008962:	460b      	mov	r3, r1
 8008964:	813b      	strh	r3, [r7, #8]
 8008966:	4613      	mov	r3, r2
 8008968:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008970:	b2db      	uxtb	r3, r3
 8008972:	2b20      	cmp	r3, #32
 8008974:	f040 80f9 	bne.w	8008b6a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008978:	6a3b      	ldr	r3, [r7, #32]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d002      	beq.n	8008984 <HAL_I2C_Mem_Write+0x34>
 800897e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008980:	2b00      	cmp	r3, #0
 8008982:	d105      	bne.n	8008990 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800898a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	e0ed      	b.n	8008b6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008996:	2b01      	cmp	r3, #1
 8008998:	d101      	bne.n	800899e <HAL_I2C_Mem_Write+0x4e>
 800899a:	2302      	movs	r3, #2
 800899c:	e0e6      	b.n	8008b6c <HAL_I2C_Mem_Write+0x21c>
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2201      	movs	r2, #1
 80089a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80089a6:	f7fe fdbd 	bl	8007524 <HAL_GetTick>
 80089aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	2319      	movs	r3, #25
 80089b2:	2201      	movs	r2, #1
 80089b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f000 fbe7 	bl	800918c <I2C_WaitOnFlagUntilTimeout>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d001      	beq.n	80089c8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	e0d1      	b.n	8008b6c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2221      	movs	r2, #33	; 0x21
 80089cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2240      	movs	r2, #64	; 0x40
 80089d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	6a3a      	ldr	r2, [r7, #32]
 80089e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80089e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80089f0:	88f8      	ldrh	r0, [r7, #6]
 80089f2:	893a      	ldrh	r2, [r7, #8]
 80089f4:	8979      	ldrh	r1, [r7, #10]
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	9301      	str	r3, [sp, #4]
 80089fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fc:	9300      	str	r3, [sp, #0]
 80089fe:	4603      	mov	r3, r0
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	f000 faf7 	bl	8008ff4 <I2C_RequestMemoryWrite>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d005      	beq.n	8008a18 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	e0a9      	b.n	8008b6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	2bff      	cmp	r3, #255	; 0xff
 8008a20:	d90e      	bls.n	8008a40 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	22ff      	movs	r2, #255	; 0xff
 8008a26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a2c:	b2da      	uxtb	r2, r3
 8008a2e:	8979      	ldrh	r1, [r7, #10]
 8008a30:	2300      	movs	r3, #0
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f000 fde3 	bl	8009604 <I2C_TransferConfig>
 8008a3e:	e00f      	b.n	8008a60 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a4e:	b2da      	uxtb	r2, r3
 8008a50:	8979      	ldrh	r1, [r7, #10]
 8008a52:	2300      	movs	r3, #0
 8008a54:	9300      	str	r3, [sp, #0]
 8008a56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f000 fdd2 	bl	8009604 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a60:	697a      	ldr	r2, [r7, #20]
 8008a62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f000 fbe0 	bl	800922a <I2C_WaitOnTXISFlagUntilTimeout>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e07b      	b.n	8008b6c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a78:	781a      	ldrb	r2, [r3, #0]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a84:	1c5a      	adds	r2, r3, #1
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	3b01      	subs	r3, #1
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d034      	beq.n	8008b18 <HAL_I2C_Mem_Write+0x1c8>
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d130      	bne.n	8008b18 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	9300      	str	r3, [sp, #0]
 8008aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008abc:	2200      	movs	r2, #0
 8008abe:	2180      	movs	r1, #128	; 0x80
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f000 fb63 	bl	800918c <I2C_WaitOnFlagUntilTimeout>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d001      	beq.n	8008ad0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	e04d      	b.n	8008b6c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	2bff      	cmp	r3, #255	; 0xff
 8008ad8:	d90e      	bls.n	8008af8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	22ff      	movs	r2, #255	; 0xff
 8008ade:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ae4:	b2da      	uxtb	r2, r3
 8008ae6:	8979      	ldrh	r1, [r7, #10]
 8008ae8:	2300      	movs	r3, #0
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	f000 fd87 	bl	8009604 <I2C_TransferConfig>
 8008af6:	e00f      	b.n	8008b18 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008afc:	b29a      	uxth	r2, r3
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b06:	b2da      	uxtb	r2, r3
 8008b08:	8979      	ldrh	r1, [r7, #10]
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	9300      	str	r3, [sp, #0]
 8008b0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b12:	68f8      	ldr	r0, [r7, #12]
 8008b14:	f000 fd76 	bl	8009604 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d19e      	bne.n	8008a60 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b22:	697a      	ldr	r2, [r7, #20]
 8008b24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f000 fbc6 	bl	80092b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d001      	beq.n	8008b36 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	e01a      	b.n	8008b6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2220      	movs	r2, #32
 8008b3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	6859      	ldr	r1, [r3, #4]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	4b0a      	ldr	r3, [pc, #40]	; (8008b74 <HAL_I2C_Mem_Write+0x224>)
 8008b4a:	400b      	ands	r3, r1
 8008b4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2220      	movs	r2, #32
 8008b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008b66:	2300      	movs	r3, #0
 8008b68:	e000      	b.n	8008b6c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008b6a:	2302      	movs	r3, #2
  }
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3718      	adds	r7, #24
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	fe00e800 	.word	0xfe00e800

08008b78 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b088      	sub	sp, #32
 8008b7c:	af02      	add	r7, sp, #8
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	4608      	mov	r0, r1
 8008b82:	4611      	mov	r1, r2
 8008b84:	461a      	mov	r2, r3
 8008b86:	4603      	mov	r3, r0
 8008b88:	817b      	strh	r3, [r7, #10]
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	813b      	strh	r3, [r7, #8]
 8008b8e:	4613      	mov	r3, r2
 8008b90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	2b20      	cmp	r3, #32
 8008b9c:	f040 80fd 	bne.w	8008d9a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ba0:	6a3b      	ldr	r3, [r7, #32]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d002      	beq.n	8008bac <HAL_I2C_Mem_Read+0x34>
 8008ba6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d105      	bne.n	8008bb8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bb2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e0f1      	b.n	8008d9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d101      	bne.n	8008bc6 <HAL_I2C_Mem_Read+0x4e>
 8008bc2:	2302      	movs	r3, #2
 8008bc4:	e0ea      	b.n	8008d9c <HAL_I2C_Mem_Read+0x224>
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008bce:	f7fe fca9 	bl	8007524 <HAL_GetTick>
 8008bd2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	2319      	movs	r3, #25
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f000 fad3 	bl	800918c <I2C_WaitOnFlagUntilTimeout>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d001      	beq.n	8008bf0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	e0d5      	b.n	8008d9c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2222      	movs	r2, #34	; 0x22
 8008bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2240      	movs	r2, #64	; 0x40
 8008bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6a3a      	ldr	r2, [r7, #32]
 8008c0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008c10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2200      	movs	r2, #0
 8008c16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008c18:	88f8      	ldrh	r0, [r7, #6]
 8008c1a:	893a      	ldrh	r2, [r7, #8]
 8008c1c:	8979      	ldrh	r1, [r7, #10]
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	9301      	str	r3, [sp, #4]
 8008c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c24:	9300      	str	r3, [sp, #0]
 8008c26:	4603      	mov	r3, r0
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	f000 fa37 	bl	800909c <I2C_RequestMemoryRead>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d005      	beq.n	8008c40 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e0ad      	b.n	8008d9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	2bff      	cmp	r3, #255	; 0xff
 8008c48:	d90e      	bls.n	8008c68 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	22ff      	movs	r2, #255	; 0xff
 8008c4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c54:	b2da      	uxtb	r2, r3
 8008c56:	8979      	ldrh	r1, [r7, #10]
 8008c58:	4b52      	ldr	r3, [pc, #328]	; (8008da4 <HAL_I2C_Mem_Read+0x22c>)
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	f000 fccf 	bl	8009604 <I2C_TransferConfig>
 8008c66:	e00f      	b.n	8008c88 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c76:	b2da      	uxtb	r2, r3
 8008c78:	8979      	ldrh	r1, [r7, #10]
 8008c7a:	4b4a      	ldr	r3, [pc, #296]	; (8008da4 <HAL_I2C_Mem_Read+0x22c>)
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f000 fcbe 	bl	8009604 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	9300      	str	r3, [sp, #0]
 8008c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8e:	2200      	movs	r2, #0
 8008c90:	2104      	movs	r1, #4
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f000 fa7a 	bl	800918c <I2C_WaitOnFlagUntilTimeout>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d001      	beq.n	8008ca2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e07c      	b.n	8008d9c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cac:	b2d2      	uxtb	r2, r2
 8008cae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb4:	1c5a      	adds	r2, r3, #1
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	b29a      	uxth	r2, r3
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d034      	beq.n	8008d48 <HAL_I2C_Mem_Read+0x1d0>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d130      	bne.n	8008d48 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	9300      	str	r3, [sp, #0]
 8008cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cec:	2200      	movs	r2, #0
 8008cee:	2180      	movs	r1, #128	; 0x80
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f000 fa4b 	bl	800918c <I2C_WaitOnFlagUntilTimeout>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d001      	beq.n	8008d00 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e04d      	b.n	8008d9c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	2bff      	cmp	r3, #255	; 0xff
 8008d08:	d90e      	bls.n	8008d28 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	22ff      	movs	r2, #255	; 0xff
 8008d0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d14:	b2da      	uxtb	r2, r3
 8008d16:	8979      	ldrh	r1, [r7, #10]
 8008d18:	2300      	movs	r3, #0
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d20:	68f8      	ldr	r0, [r7, #12]
 8008d22:	f000 fc6f 	bl	8009604 <I2C_TransferConfig>
 8008d26:	e00f      	b.n	8008d48 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d2c:	b29a      	uxth	r2, r3
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d36:	b2da      	uxtb	r2, r3
 8008d38:	8979      	ldrh	r1, [r7, #10]
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	9300      	str	r3, [sp, #0]
 8008d3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f000 fc5e 	bl	8009604 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d19a      	bne.n	8008c88 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d52:	697a      	ldr	r2, [r7, #20]
 8008d54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d56:	68f8      	ldr	r0, [r7, #12]
 8008d58:	f000 faae 	bl	80092b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d001      	beq.n	8008d66 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	e01a      	b.n	8008d9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	2220      	movs	r2, #32
 8008d6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	6859      	ldr	r1, [r3, #4]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	4b0b      	ldr	r3, [pc, #44]	; (8008da8 <HAL_I2C_Mem_Read+0x230>)
 8008d7a:	400b      	ands	r3, r1
 8008d7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2220      	movs	r2, #32
 8008d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2200      	movs	r2, #0
 8008d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d96:	2300      	movs	r3, #0
 8008d98:	e000      	b.n	8008d9c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008d9a:	2302      	movs	r3, #2
  }
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3718      	adds	r7, #24
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	80002400 	.word	0x80002400
 8008da8:	fe00e800 	.word	0xfe00e800

08008dac <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b08a      	sub	sp, #40	; 0x28
 8008db0:	af02      	add	r7, sp, #8
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	607a      	str	r2, [r7, #4]
 8008db6:	603b      	str	r3, [r7, #0]
 8008db8:	460b      	mov	r3, r1
 8008dba:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	2b20      	cmp	r3, #32
 8008dca:	f040 80f3 	bne.w	8008fb4 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ddc:	d101      	bne.n	8008de2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8008dde:	2302      	movs	r3, #2
 8008de0:	e0e9      	b.n	8008fb6 <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d101      	bne.n	8008df0 <HAL_I2C_IsDeviceReady+0x44>
 8008dec:	2302      	movs	r3, #2
 8008dee:	e0e2      	b.n	8008fb6 <HAL_I2C_IsDeviceReady+0x20a>
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2224      	movs	r2, #36	; 0x24
 8008dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2200      	movs	r2, #0
 8008e04:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d107      	bne.n	8008e1e <HAL_I2C_IsDeviceReady+0x72>
 8008e0e:	897b      	ldrh	r3, [r7, #10]
 8008e10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008e18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008e1c:	e006      	b.n	8008e2c <HAL_I2C_IsDeviceReady+0x80>
 8008e1e:	897b      	ldrh	r3, [r7, #10]
 8008e20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008e28:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	6812      	ldr	r2, [r2, #0]
 8008e30:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8008e32:	f7fe fb77 	bl	8007524 <HAL_GetTick>
 8008e36:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	699b      	ldr	r3, [r3, #24]
 8008e3e:	f003 0320 	and.w	r3, r3, #32
 8008e42:	2b20      	cmp	r3, #32
 8008e44:	bf0c      	ite	eq
 8008e46:	2301      	moveq	r3, #1
 8008e48:	2300      	movne	r3, #0
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	699b      	ldr	r3, [r3, #24]
 8008e54:	f003 0310 	and.w	r3, r3, #16
 8008e58:	2b10      	cmp	r3, #16
 8008e5a:	bf0c      	ite	eq
 8008e5c:	2301      	moveq	r3, #1
 8008e5e:	2300      	movne	r3, #0
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008e64:	e034      	b.n	8008ed0 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e6c:	d01a      	beq.n	8008ea4 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008e6e:	f7fe fb59 	bl	8007524 <HAL_GetTick>
 8008e72:	4602      	mov	r2, r0
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	1ad3      	subs	r3, r2, r3
 8008e78:	683a      	ldr	r2, [r7, #0]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d302      	bcc.n	8008e84 <HAL_I2C_IsDeviceReady+0xd8>
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d10f      	bne.n	8008ea4 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2220      	movs	r2, #32
 8008e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e90:	f043 0220 	orr.w	r2, r3, #32
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e088      	b.n	8008fb6 <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	699b      	ldr	r3, [r3, #24]
 8008eaa:	f003 0320 	and.w	r3, r3, #32
 8008eae:	2b20      	cmp	r3, #32
 8008eb0:	bf0c      	ite	eq
 8008eb2:	2301      	moveq	r3, #1
 8008eb4:	2300      	movne	r3, #0
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	699b      	ldr	r3, [r3, #24]
 8008ec0:	f003 0310 	and.w	r3, r3, #16
 8008ec4:	2b10      	cmp	r3, #16
 8008ec6:	bf0c      	ite	eq
 8008ec8:	2301      	moveq	r3, #1
 8008eca:	2300      	movne	r3, #0
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008ed0:	7ffb      	ldrb	r3, [r7, #31]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d102      	bne.n	8008edc <HAL_I2C_IsDeviceReady+0x130>
 8008ed6:	7fbb      	ldrb	r3, [r7, #30]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d0c4      	beq.n	8008e66 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	699b      	ldr	r3, [r3, #24]
 8008ee2:	f003 0310 	and.w	r3, r3, #16
 8008ee6:	2b10      	cmp	r3, #16
 8008ee8:	d01a      	beq.n	8008f20 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	9300      	str	r3, [sp, #0]
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	2120      	movs	r1, #32
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f000 f949 	bl	800918c <I2C_WaitOnFlagUntilTimeout>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d001      	beq.n	8008f04 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	e058      	b.n	8008fb6 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2220      	movs	r2, #32
 8008f0a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2220      	movs	r2, #32
 8008f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	e04a      	b.n	8008fb6 <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	2200      	movs	r2, #0
 8008f28:	2120      	movs	r1, #32
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f000 f92e 	bl	800918c <I2C_WaitOnFlagUntilTimeout>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d001      	beq.n	8008f3a <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e03d      	b.n	8008fb6 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2210      	movs	r2, #16
 8008f40:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2220      	movs	r2, #32
 8008f48:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d118      	bne.n	8008f84 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	685a      	ldr	r2, [r3, #4]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f60:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	9300      	str	r3, [sp, #0]
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	2120      	movs	r1, #32
 8008f6c:	68f8      	ldr	r0, [r7, #12]
 8008f6e:	f000 f90d 	bl	800918c <I2C_WaitOnFlagUntilTimeout>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d001      	beq.n	8008f7c <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e01c      	b.n	8008fb6 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2220      	movs	r2, #32
 8008f82:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	3301      	adds	r3, #1
 8008f88:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	f63f af39 	bhi.w	8008e06 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2220      	movs	r2, #32
 8008f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fa0:	f043 0220 	orr.w	r2, r3, #32
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2200      	movs	r2, #0
 8008fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e000      	b.n	8008fb6 <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8008fb4:	2302      	movs	r3, #2
  }
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3720      	adds	r7, #32
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8008fbe:	b480      	push	{r7}
 8008fc0:	b083      	sub	sp, #12
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fcc:	b2db      	uxtb	r3, r3
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	370c      	adds	r7, #12
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr

08008fda <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8008fda:	b480      	push	{r7}
 8008fdc:	b083      	sub	sp, #12
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	370c      	adds	r7, #12
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
	...

08008ff4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b086      	sub	sp, #24
 8008ff8:	af02      	add	r7, sp, #8
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	4608      	mov	r0, r1
 8008ffe:	4611      	mov	r1, r2
 8009000:	461a      	mov	r2, r3
 8009002:	4603      	mov	r3, r0
 8009004:	817b      	strh	r3, [r7, #10]
 8009006:	460b      	mov	r3, r1
 8009008:	813b      	strh	r3, [r7, #8]
 800900a:	4613      	mov	r3, r2
 800900c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800900e:	88fb      	ldrh	r3, [r7, #6]
 8009010:	b2da      	uxtb	r2, r3
 8009012:	8979      	ldrh	r1, [r7, #10]
 8009014:	4b20      	ldr	r3, [pc, #128]	; (8009098 <I2C_RequestMemoryWrite+0xa4>)
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f000 faf1 	bl	8009604 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009022:	69fa      	ldr	r2, [r7, #28]
 8009024:	69b9      	ldr	r1, [r7, #24]
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	f000 f8ff 	bl	800922a <I2C_WaitOnTXISFlagUntilTimeout>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d001      	beq.n	8009036 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e02c      	b.n	8009090 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009036:	88fb      	ldrh	r3, [r7, #6]
 8009038:	2b01      	cmp	r3, #1
 800903a:	d105      	bne.n	8009048 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800903c:	893b      	ldrh	r3, [r7, #8]
 800903e:	b2da      	uxtb	r2, r3
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	629a      	str	r2, [r3, #40]	; 0x28
 8009046:	e015      	b.n	8009074 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009048:	893b      	ldrh	r3, [r7, #8]
 800904a:	0a1b      	lsrs	r3, r3, #8
 800904c:	b29b      	uxth	r3, r3
 800904e:	b2da      	uxtb	r2, r3
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009056:	69fa      	ldr	r2, [r7, #28]
 8009058:	69b9      	ldr	r1, [r7, #24]
 800905a:	68f8      	ldr	r0, [r7, #12]
 800905c:	f000 f8e5 	bl	800922a <I2C_WaitOnTXISFlagUntilTimeout>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d001      	beq.n	800906a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	e012      	b.n	8009090 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800906a:	893b      	ldrh	r3, [r7, #8]
 800906c:	b2da      	uxtb	r2, r3
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	9300      	str	r3, [sp, #0]
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	2200      	movs	r2, #0
 800907c:	2180      	movs	r1, #128	; 0x80
 800907e:	68f8      	ldr	r0, [r7, #12]
 8009080:	f000 f884 	bl	800918c <I2C_WaitOnFlagUntilTimeout>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d001      	beq.n	800908e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	e000      	b.n	8009090 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800908e:	2300      	movs	r3, #0
}
 8009090:	4618      	mov	r0, r3
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	80002000 	.word	0x80002000

0800909c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b086      	sub	sp, #24
 80090a0:	af02      	add	r7, sp, #8
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	4608      	mov	r0, r1
 80090a6:	4611      	mov	r1, r2
 80090a8:	461a      	mov	r2, r3
 80090aa:	4603      	mov	r3, r0
 80090ac:	817b      	strh	r3, [r7, #10]
 80090ae:	460b      	mov	r3, r1
 80090b0:	813b      	strh	r3, [r7, #8]
 80090b2:	4613      	mov	r3, r2
 80090b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80090b6:	88fb      	ldrh	r3, [r7, #6]
 80090b8:	b2da      	uxtb	r2, r3
 80090ba:	8979      	ldrh	r1, [r7, #10]
 80090bc:	4b20      	ldr	r3, [pc, #128]	; (8009140 <I2C_RequestMemoryRead+0xa4>)
 80090be:	9300      	str	r3, [sp, #0]
 80090c0:	2300      	movs	r3, #0
 80090c2:	68f8      	ldr	r0, [r7, #12]
 80090c4:	f000 fa9e 	bl	8009604 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80090c8:	69fa      	ldr	r2, [r7, #28]
 80090ca:	69b9      	ldr	r1, [r7, #24]
 80090cc:	68f8      	ldr	r0, [r7, #12]
 80090ce:	f000 f8ac 	bl	800922a <I2C_WaitOnTXISFlagUntilTimeout>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d001      	beq.n	80090dc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80090d8:	2301      	movs	r3, #1
 80090da:	e02c      	b.n	8009136 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80090dc:	88fb      	ldrh	r3, [r7, #6]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d105      	bne.n	80090ee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80090e2:	893b      	ldrh	r3, [r7, #8]
 80090e4:	b2da      	uxtb	r2, r3
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	629a      	str	r2, [r3, #40]	; 0x28
 80090ec:	e015      	b.n	800911a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80090ee:	893b      	ldrh	r3, [r7, #8]
 80090f0:	0a1b      	lsrs	r3, r3, #8
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	b2da      	uxtb	r2, r3
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80090fc:	69fa      	ldr	r2, [r7, #28]
 80090fe:	69b9      	ldr	r1, [r7, #24]
 8009100:	68f8      	ldr	r0, [r7, #12]
 8009102:	f000 f892 	bl	800922a <I2C_WaitOnTXISFlagUntilTimeout>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d001      	beq.n	8009110 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	e012      	b.n	8009136 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009110:	893b      	ldrh	r3, [r7, #8]
 8009112:	b2da      	uxtb	r2, r3
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	9300      	str	r3, [sp, #0]
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	2200      	movs	r2, #0
 8009122:	2140      	movs	r1, #64	; 0x40
 8009124:	68f8      	ldr	r0, [r7, #12]
 8009126:	f000 f831 	bl	800918c <I2C_WaitOnFlagUntilTimeout>
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d001      	beq.n	8009134 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	e000      	b.n	8009136 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop
 8009140:	80002000 	.word	0x80002000

08009144 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	699b      	ldr	r3, [r3, #24]
 8009152:	f003 0302 	and.w	r3, r3, #2
 8009156:	2b02      	cmp	r3, #2
 8009158:	d103      	bne.n	8009162 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2200      	movs	r2, #0
 8009160:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	699b      	ldr	r3, [r3, #24]
 8009168:	f003 0301 	and.w	r3, r3, #1
 800916c:	2b01      	cmp	r3, #1
 800916e:	d007      	beq.n	8009180 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	699a      	ldr	r2, [r3, #24]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f042 0201 	orr.w	r2, r2, #1
 800917e:	619a      	str	r2, [r3, #24]
  }
}
 8009180:	bf00      	nop
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	603b      	str	r3, [r7, #0]
 8009198:	4613      	mov	r3, r2
 800919a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800919c:	e031      	b.n	8009202 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091a4:	d02d      	beq.n	8009202 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091a6:	f7fe f9bd 	bl	8007524 <HAL_GetTick>
 80091aa:	4602      	mov	r2, r0
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	1ad3      	subs	r3, r2, r3
 80091b0:	683a      	ldr	r2, [r7, #0]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d302      	bcc.n	80091bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d122      	bne.n	8009202 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	699a      	ldr	r2, [r3, #24]
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	4013      	ands	r3, r2
 80091c6:	68ba      	ldr	r2, [r7, #8]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	bf0c      	ite	eq
 80091cc:	2301      	moveq	r3, #1
 80091ce:	2300      	movne	r3, #0
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	461a      	mov	r2, r3
 80091d4:	79fb      	ldrb	r3, [r7, #7]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d113      	bne.n	8009202 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091de:	f043 0220 	orr.w	r2, r3, #32
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2220      	movs	r2, #32
 80091ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e00f      	b.n	8009222 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	699a      	ldr	r2, [r3, #24]
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	4013      	ands	r3, r2
 800920c:	68ba      	ldr	r2, [r7, #8]
 800920e:	429a      	cmp	r2, r3
 8009210:	bf0c      	ite	eq
 8009212:	2301      	moveq	r3, #1
 8009214:	2300      	movne	r3, #0
 8009216:	b2db      	uxtb	r3, r3
 8009218:	461a      	mov	r2, r3
 800921a:	79fb      	ldrb	r3, [r7, #7]
 800921c:	429a      	cmp	r2, r3
 800921e:	d0be      	beq.n	800919e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b084      	sub	sp, #16
 800922e:	af00      	add	r7, sp, #0
 8009230:	60f8      	str	r0, [r7, #12]
 8009232:	60b9      	str	r1, [r7, #8]
 8009234:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009236:	e033      	b.n	80092a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	68b9      	ldr	r1, [r7, #8]
 800923c:	68f8      	ldr	r0, [r7, #12]
 800923e:	f000 f901 	bl	8009444 <I2C_IsErrorOccurred>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d001      	beq.n	800924c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	e031      	b.n	80092b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009252:	d025      	beq.n	80092a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009254:	f7fe f966 	bl	8007524 <HAL_GetTick>
 8009258:	4602      	mov	r2, r0
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	1ad3      	subs	r3, r2, r3
 800925e:	68ba      	ldr	r2, [r7, #8]
 8009260:	429a      	cmp	r2, r3
 8009262:	d302      	bcc.n	800926a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d11a      	bne.n	80092a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	699b      	ldr	r3, [r3, #24]
 8009270:	f003 0302 	and.w	r3, r3, #2
 8009274:	2b02      	cmp	r3, #2
 8009276:	d013      	beq.n	80092a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800927c:	f043 0220 	orr.w	r2, r3, #32
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2220      	movs	r2, #32
 8009288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2200      	movs	r2, #0
 8009290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2200      	movs	r2, #0
 8009298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	e007      	b.n	80092b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	699b      	ldr	r3, [r3, #24]
 80092a6:	f003 0302 	and.w	r3, r3, #2
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d1c4      	bne.n	8009238 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3710      	adds	r7, #16
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80092c4:	e02f      	b.n	8009326 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	68b9      	ldr	r1, [r7, #8]
 80092ca:	68f8      	ldr	r0, [r7, #12]
 80092cc:	f000 f8ba 	bl	8009444 <I2C_IsErrorOccurred>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d001      	beq.n	80092da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	e02d      	b.n	8009336 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092da:	f7fe f923 	bl	8007524 <HAL_GetTick>
 80092de:	4602      	mov	r2, r0
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	1ad3      	subs	r3, r2, r3
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d302      	bcc.n	80092f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d11a      	bne.n	8009326 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	f003 0320 	and.w	r3, r3, #32
 80092fa:	2b20      	cmp	r3, #32
 80092fc:	d013      	beq.n	8009326 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009302:	f043 0220 	orr.w	r2, r3, #32
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2220      	movs	r2, #32
 800930e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2200      	movs	r2, #0
 8009316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2200      	movs	r2, #0
 800931e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	e007      	b.n	8009336 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	699b      	ldr	r3, [r3, #24]
 800932c:	f003 0320 	and.w	r3, r3, #32
 8009330:	2b20      	cmp	r3, #32
 8009332:	d1c8      	bne.n	80092c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
	...

08009340 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800934c:	e06b      	b.n	8009426 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	68b9      	ldr	r1, [r7, #8]
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f000 f876 	bl	8009444 <I2C_IsErrorOccurred>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d001      	beq.n	8009362 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e069      	b.n	8009436 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	699b      	ldr	r3, [r3, #24]
 8009368:	f003 0320 	and.w	r3, r3, #32
 800936c:	2b20      	cmp	r3, #32
 800936e:	d138      	bne.n	80093e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	699b      	ldr	r3, [r3, #24]
 8009376:	f003 0304 	and.w	r3, r3, #4
 800937a:	2b04      	cmp	r3, #4
 800937c:	d105      	bne.n	800938a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009382:	2b00      	cmp	r3, #0
 8009384:	d001      	beq.n	800938a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8009386:	2300      	movs	r3, #0
 8009388:	e055      	b.n	8009436 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	699b      	ldr	r3, [r3, #24]
 8009390:	f003 0310 	and.w	r3, r3, #16
 8009394:	2b10      	cmp	r3, #16
 8009396:	d107      	bne.n	80093a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2210      	movs	r2, #16
 800939e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2204      	movs	r2, #4
 80093a4:	645a      	str	r2, [r3, #68]	; 0x44
 80093a6:	e002      	b.n	80093ae <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2220      	movs	r2, #32
 80093b4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	6859      	ldr	r1, [r3, #4]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	4b1f      	ldr	r3, [pc, #124]	; (8009440 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80093c2:	400b      	ands	r3, r1
 80093c4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2220      	movs	r2, #32
 80093ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2200      	movs	r2, #0
 80093da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	e029      	b.n	8009436 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093e2:	f7fe f89f 	bl	8007524 <HAL_GetTick>
 80093e6:	4602      	mov	r2, r0
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	68ba      	ldr	r2, [r7, #8]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d302      	bcc.n	80093f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d116      	bne.n	8009426 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	699b      	ldr	r3, [r3, #24]
 80093fe:	f003 0304 	and.w	r3, r3, #4
 8009402:	2b04      	cmp	r3, #4
 8009404:	d00f      	beq.n	8009426 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800940a:	f043 0220 	orr.w	r2, r3, #32
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2220      	movs	r2, #32
 8009416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2200      	movs	r2, #0
 800941e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009422:	2301      	movs	r3, #1
 8009424:	e007      	b.n	8009436 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	699b      	ldr	r3, [r3, #24]
 800942c:	f003 0304 	and.w	r3, r3, #4
 8009430:	2b04      	cmp	r3, #4
 8009432:	d18c      	bne.n	800934e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	3710      	adds	r7, #16
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	fe00e800 	.word	0xfe00e800

08009444 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b08a      	sub	sp, #40	; 0x28
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009450:	2300      	movs	r3, #0
 8009452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	699b      	ldr	r3, [r3, #24]
 800945c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800945e:	2300      	movs	r3, #0
 8009460:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	f003 0310 	and.w	r3, r3, #16
 800946c:	2b00      	cmp	r3, #0
 800946e:	d068      	beq.n	8009542 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2210      	movs	r2, #16
 8009476:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009478:	e049      	b.n	800950e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009480:	d045      	beq.n	800950e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009482:	f7fe f84f 	bl	8007524 <HAL_GetTick>
 8009486:	4602      	mov	r2, r0
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	1ad3      	subs	r3, r2, r3
 800948c:	68ba      	ldr	r2, [r7, #8]
 800948e:	429a      	cmp	r2, r3
 8009490:	d302      	bcc.n	8009498 <I2C_IsErrorOccurred+0x54>
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d13a      	bne.n	800950e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80094aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	699b      	ldr	r3, [r3, #24]
 80094b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094ba:	d121      	bne.n	8009500 <I2C_IsErrorOccurred+0xbc>
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094c2:	d01d      	beq.n	8009500 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80094c4:	7cfb      	ldrb	r3, [r7, #19]
 80094c6:	2b20      	cmp	r3, #32
 80094c8:	d01a      	beq.n	8009500 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	685a      	ldr	r2, [r3, #4]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80094d8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80094da:	f7fe f823 	bl	8007524 <HAL_GetTick>
 80094de:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80094e0:	e00e      	b.n	8009500 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80094e2:	f7fe f81f 	bl	8007524 <HAL_GetTick>
 80094e6:	4602      	mov	r2, r0
 80094e8:	69fb      	ldr	r3, [r7, #28]
 80094ea:	1ad3      	subs	r3, r2, r3
 80094ec:	2b19      	cmp	r3, #25
 80094ee:	d907      	bls.n	8009500 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80094f0:	6a3b      	ldr	r3, [r7, #32]
 80094f2:	f043 0320 	orr.w	r3, r3, #32
 80094f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80094fe:	e006      	b.n	800950e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	699b      	ldr	r3, [r3, #24]
 8009506:	f003 0320 	and.w	r3, r3, #32
 800950a:	2b20      	cmp	r3, #32
 800950c:	d1e9      	bne.n	80094e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	699b      	ldr	r3, [r3, #24]
 8009514:	f003 0320 	and.w	r3, r3, #32
 8009518:	2b20      	cmp	r3, #32
 800951a:	d003      	beq.n	8009524 <I2C_IsErrorOccurred+0xe0>
 800951c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009520:	2b00      	cmp	r3, #0
 8009522:	d0aa      	beq.n	800947a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009528:	2b00      	cmp	r3, #0
 800952a:	d103      	bne.n	8009534 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2220      	movs	r2, #32
 8009532:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009534:	6a3b      	ldr	r3, [r7, #32]
 8009536:	f043 0304 	orr.w	r3, r3, #4
 800953a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	699b      	ldr	r3, [r3, #24]
 8009548:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00b      	beq.n	800956c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009554:	6a3b      	ldr	r3, [r7, #32]
 8009556:	f043 0301 	orr.w	r3, r3, #1
 800955a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009564:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00b      	beq.n	800958e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009576:	6a3b      	ldr	r3, [r7, #32]
 8009578:	f043 0308 	orr.w	r3, r3, #8
 800957c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009586:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009594:	2b00      	cmp	r3, #0
 8009596:	d00b      	beq.n	80095b0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009598:	6a3b      	ldr	r3, [r7, #32]
 800959a:	f043 0302 	orr.w	r3, r3, #2
 800959e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80095b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d01c      	beq.n	80095f2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80095b8:	68f8      	ldr	r0, [r7, #12]
 80095ba:	f7ff fdc3 	bl	8009144 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	6859      	ldr	r1, [r3, #4]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	4b0d      	ldr	r3, [pc, #52]	; (8009600 <I2C_IsErrorOccurred+0x1bc>)
 80095ca:	400b      	ands	r3, r1
 80095cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095d2:	6a3b      	ldr	r3, [r7, #32]
 80095d4:	431a      	orrs	r2, r3
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2220      	movs	r2, #32
 80095de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2200      	movs	r2, #0
 80095ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80095f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3728      	adds	r7, #40	; 0x28
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	fe00e800 	.word	0xfe00e800

08009604 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009604:	b480      	push	{r7}
 8009606:	b087      	sub	sp, #28
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	607b      	str	r3, [r7, #4]
 800960e:	460b      	mov	r3, r1
 8009610:	817b      	strh	r3, [r7, #10]
 8009612:	4613      	mov	r3, r2
 8009614:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009616:	897b      	ldrh	r3, [r7, #10]
 8009618:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800961c:	7a7b      	ldrb	r3, [r7, #9]
 800961e:	041b      	lsls	r3, r3, #16
 8009620:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009624:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800962a:	6a3b      	ldr	r3, [r7, #32]
 800962c:	4313      	orrs	r3, r2
 800962e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009632:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	685a      	ldr	r2, [r3, #4]
 800963a:	6a3b      	ldr	r3, [r7, #32]
 800963c:	0d5b      	lsrs	r3, r3, #21
 800963e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009642:	4b08      	ldr	r3, [pc, #32]	; (8009664 <I2C_TransferConfig+0x60>)
 8009644:	430b      	orrs	r3, r1
 8009646:	43db      	mvns	r3, r3
 8009648:	ea02 0103 	and.w	r1, r2, r3
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	697a      	ldr	r2, [r7, #20]
 8009652:	430a      	orrs	r2, r1
 8009654:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009656:	bf00      	nop
 8009658:	371c      	adds	r7, #28
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	03ff63ff 	.word	0x03ff63ff

08009668 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009678:	b2db      	uxtb	r3, r3
 800967a:	2b20      	cmp	r3, #32
 800967c:	d138      	bne.n	80096f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009684:	2b01      	cmp	r3, #1
 8009686:	d101      	bne.n	800968c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009688:	2302      	movs	r3, #2
 800968a:	e032      	b.n	80096f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2224      	movs	r2, #36	; 0x24
 8009698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f022 0201 	bic.w	r2, r2, #1
 80096aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80096ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	6819      	ldr	r1, [r3, #0]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	683a      	ldr	r2, [r7, #0]
 80096c8:	430a      	orrs	r2, r1
 80096ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f042 0201 	orr.w	r2, r2, #1
 80096da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2220      	movs	r2, #32
 80096e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80096ec:	2300      	movs	r3, #0
 80096ee:	e000      	b.n	80096f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80096f0:	2302      	movs	r3, #2
  }
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	370c      	adds	r7, #12
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr

080096fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80096fe:	b480      	push	{r7}
 8009700:	b085      	sub	sp, #20
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
 8009706:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800970e:	b2db      	uxtb	r3, r3
 8009710:	2b20      	cmp	r3, #32
 8009712:	d139      	bne.n	8009788 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800971a:	2b01      	cmp	r3, #1
 800971c:	d101      	bne.n	8009722 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800971e:	2302      	movs	r3, #2
 8009720:	e033      	b.n	800978a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2201      	movs	r2, #1
 8009726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2224      	movs	r2, #36	; 0x24
 800972e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f022 0201 	bic.w	r2, r2, #1
 8009740:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009750:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	021b      	lsls	r3, r3, #8
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	4313      	orrs	r3, r2
 800975a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f042 0201 	orr.w	r2, r2, #1
 8009772:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2220      	movs	r2, #32
 8009778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009784:	2300      	movs	r3, #0
 8009786:	e000      	b.n	800978a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009788:	2302      	movs	r3, #2
  }
}
 800978a:	4618      	mov	r0, r3
 800978c:	3714      	adds	r7, #20
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr

08009796 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009796:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009798:	b08f      	sub	sp, #60	; 0x3c
 800979a:	af0a      	add	r7, sp, #40	; 0x28
 800979c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d101      	bne.n	80097a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80097a4:	2301      	movs	r3, #1
 80097a6:	e116      	b.n	80099d6 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d106      	bne.n	80097c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f00f fdf6 	bl	80193b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2203      	movs	r2, #3
 80097cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d102      	bne.n	80097e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4618      	mov	r0, r3
 80097e8:	f009 fed9 	bl	801359e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	603b      	str	r3, [r7, #0]
 80097f2:	687e      	ldr	r6, [r7, #4]
 80097f4:	466d      	mov	r5, sp
 80097f6:	f106 0410 	add.w	r4, r6, #16
 80097fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80097fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80097fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009800:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009802:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009806:	e885 0003 	stmia.w	r5, {r0, r1}
 800980a:	1d33      	adds	r3, r6, #4
 800980c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800980e:	6838      	ldr	r0, [r7, #0]
 8009810:	f009 fdec 	bl	80133ec <USB_CoreInit>
 8009814:	4603      	mov	r3, r0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d005      	beq.n	8009826 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2202      	movs	r2, #2
 800981e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	e0d7      	b.n	80099d6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2100      	movs	r1, #0
 800982c:	4618      	mov	r0, r3
 800982e:	f009 fec7 	bl	80135c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009832:	2300      	movs	r3, #0
 8009834:	73fb      	strb	r3, [r7, #15]
 8009836:	e04a      	b.n	80098ce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009838:	7bfa      	ldrb	r2, [r7, #15]
 800983a:	6879      	ldr	r1, [r7, #4]
 800983c:	4613      	mov	r3, r2
 800983e:	00db      	lsls	r3, r3, #3
 8009840:	4413      	add	r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	440b      	add	r3, r1
 8009846:	333d      	adds	r3, #61	; 0x3d
 8009848:	2201      	movs	r2, #1
 800984a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800984c:	7bfa      	ldrb	r2, [r7, #15]
 800984e:	6879      	ldr	r1, [r7, #4]
 8009850:	4613      	mov	r3, r2
 8009852:	00db      	lsls	r3, r3, #3
 8009854:	4413      	add	r3, r2
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	440b      	add	r3, r1
 800985a:	333c      	adds	r3, #60	; 0x3c
 800985c:	7bfa      	ldrb	r2, [r7, #15]
 800985e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009860:	7bfa      	ldrb	r2, [r7, #15]
 8009862:	7bfb      	ldrb	r3, [r7, #15]
 8009864:	b298      	uxth	r0, r3
 8009866:	6879      	ldr	r1, [r7, #4]
 8009868:	4613      	mov	r3, r2
 800986a:	00db      	lsls	r3, r3, #3
 800986c:	4413      	add	r3, r2
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	440b      	add	r3, r1
 8009872:	3356      	adds	r3, #86	; 0x56
 8009874:	4602      	mov	r2, r0
 8009876:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009878:	7bfa      	ldrb	r2, [r7, #15]
 800987a:	6879      	ldr	r1, [r7, #4]
 800987c:	4613      	mov	r3, r2
 800987e:	00db      	lsls	r3, r3, #3
 8009880:	4413      	add	r3, r2
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	440b      	add	r3, r1
 8009886:	3340      	adds	r3, #64	; 0x40
 8009888:	2200      	movs	r2, #0
 800988a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800988c:	7bfa      	ldrb	r2, [r7, #15]
 800988e:	6879      	ldr	r1, [r7, #4]
 8009890:	4613      	mov	r3, r2
 8009892:	00db      	lsls	r3, r3, #3
 8009894:	4413      	add	r3, r2
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	440b      	add	r3, r1
 800989a:	3344      	adds	r3, #68	; 0x44
 800989c:	2200      	movs	r2, #0
 800989e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80098a0:	7bfa      	ldrb	r2, [r7, #15]
 80098a2:	6879      	ldr	r1, [r7, #4]
 80098a4:	4613      	mov	r3, r2
 80098a6:	00db      	lsls	r3, r3, #3
 80098a8:	4413      	add	r3, r2
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	440b      	add	r3, r1
 80098ae:	3348      	adds	r3, #72	; 0x48
 80098b0:	2200      	movs	r2, #0
 80098b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80098b4:	7bfa      	ldrb	r2, [r7, #15]
 80098b6:	6879      	ldr	r1, [r7, #4]
 80098b8:	4613      	mov	r3, r2
 80098ba:	00db      	lsls	r3, r3, #3
 80098bc:	4413      	add	r3, r2
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	440b      	add	r3, r1
 80098c2:	334c      	adds	r3, #76	; 0x4c
 80098c4:	2200      	movs	r2, #0
 80098c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80098c8:	7bfb      	ldrb	r3, [r7, #15]
 80098ca:	3301      	adds	r3, #1
 80098cc:	73fb      	strb	r3, [r7, #15]
 80098ce:	7bfa      	ldrb	r2, [r7, #15]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d3af      	bcc.n	8009838 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80098d8:	2300      	movs	r3, #0
 80098da:	73fb      	strb	r3, [r7, #15]
 80098dc:	e044      	b.n	8009968 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80098de:	7bfa      	ldrb	r2, [r7, #15]
 80098e0:	6879      	ldr	r1, [r7, #4]
 80098e2:	4613      	mov	r3, r2
 80098e4:	00db      	lsls	r3, r3, #3
 80098e6:	4413      	add	r3, r2
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	440b      	add	r3, r1
 80098ec:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80098f0:	2200      	movs	r2, #0
 80098f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80098f4:	7bfa      	ldrb	r2, [r7, #15]
 80098f6:	6879      	ldr	r1, [r7, #4]
 80098f8:	4613      	mov	r3, r2
 80098fa:	00db      	lsls	r3, r3, #3
 80098fc:	4413      	add	r3, r2
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	440b      	add	r3, r1
 8009902:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8009906:	7bfa      	ldrb	r2, [r7, #15]
 8009908:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800990a:	7bfa      	ldrb	r2, [r7, #15]
 800990c:	6879      	ldr	r1, [r7, #4]
 800990e:	4613      	mov	r3, r2
 8009910:	00db      	lsls	r3, r3, #3
 8009912:	4413      	add	r3, r2
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	440b      	add	r3, r1
 8009918:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800991c:	2200      	movs	r2, #0
 800991e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009920:	7bfa      	ldrb	r2, [r7, #15]
 8009922:	6879      	ldr	r1, [r7, #4]
 8009924:	4613      	mov	r3, r2
 8009926:	00db      	lsls	r3, r3, #3
 8009928:	4413      	add	r3, r2
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	440b      	add	r3, r1
 800992e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8009932:	2200      	movs	r2, #0
 8009934:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009936:	7bfa      	ldrb	r2, [r7, #15]
 8009938:	6879      	ldr	r1, [r7, #4]
 800993a:	4613      	mov	r3, r2
 800993c:	00db      	lsls	r3, r3, #3
 800993e:	4413      	add	r3, r2
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	440b      	add	r3, r1
 8009944:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009948:	2200      	movs	r2, #0
 800994a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800994c:	7bfa      	ldrb	r2, [r7, #15]
 800994e:	6879      	ldr	r1, [r7, #4]
 8009950:	4613      	mov	r3, r2
 8009952:	00db      	lsls	r3, r3, #3
 8009954:	4413      	add	r3, r2
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	440b      	add	r3, r1
 800995a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800995e:	2200      	movs	r2, #0
 8009960:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009962:	7bfb      	ldrb	r3, [r7, #15]
 8009964:	3301      	adds	r3, #1
 8009966:	73fb      	strb	r3, [r7, #15]
 8009968:	7bfa      	ldrb	r2, [r7, #15]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	429a      	cmp	r2, r3
 8009970:	d3b5      	bcc.n	80098de <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	603b      	str	r3, [r7, #0]
 8009978:	687e      	ldr	r6, [r7, #4]
 800997a:	466d      	mov	r5, sp
 800997c:	f106 0410 	add.w	r4, r6, #16
 8009980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009988:	e894 0003 	ldmia.w	r4, {r0, r1}
 800998c:	e885 0003 	stmia.w	r5, {r0, r1}
 8009990:	1d33      	adds	r3, r6, #4
 8009992:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009994:	6838      	ldr	r0, [r7, #0]
 8009996:	f009 fe5f 	bl	8013658 <USB_DevInit>
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d005      	beq.n	80099ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2202      	movs	r2, #2
 80099a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	e014      	b.n	80099d6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d102      	bne.n	80099ca <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f001 f869 	bl	800aa9c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4618      	mov	r0, r3
 80099d0:	f00a fe0d 	bl	80145ee <USB_DevDisconnect>

  return HAL_OK;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3714      	adds	r7, #20
 80099da:	46bd      	mov	sp, r7
 80099dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080099de <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b084      	sub	sp, #16
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d101      	bne.n	80099fa <HAL_PCD_Start+0x1c>
 80099f6:	2302      	movs	r3, #2
 80099f8:	e01c      	b.n	8009a34 <HAL_PCD_Start+0x56>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2201      	movs	r2, #1
 80099fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d105      	bne.n	8009a16 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f009 fdae 	bl	801357c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4618      	mov	r0, r3
 8009a26:	f00a fdc1 	bl	80145ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3710      	adds	r7, #16
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009a3c:	b590      	push	{r4, r7, lr}
 8009a3e:	b08d      	sub	sp, #52	; 0x34
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a4a:	6a3b      	ldr	r3, [r7, #32]
 8009a4c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4618      	mov	r0, r3
 8009a54:	f00a fe7f 	bl	8014756 <USB_GetMode>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	f040 847e 	bne.w	800a35c <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4618      	mov	r0, r3
 8009a66:	f00a fde3 	bl	8014630 <USB_ReadInterrupts>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f000 8474 	beq.w	800a35a <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	0a1b      	lsrs	r3, r3, #8
 8009a7c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f00a fdd0 	bl	8014630 <USB_ReadInterrupts>
 8009a90:	4603      	mov	r3, r0
 8009a92:	f003 0302 	and.w	r3, r3, #2
 8009a96:	2b02      	cmp	r3, #2
 8009a98:	d107      	bne.n	8009aaa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	695a      	ldr	r2, [r3, #20]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f002 0202 	and.w	r2, r2, #2
 8009aa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f00a fdbe 	bl	8014630 <USB_ReadInterrupts>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	f003 0310 	and.w	r3, r3, #16
 8009aba:	2b10      	cmp	r3, #16
 8009abc:	d161      	bne.n	8009b82 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	699a      	ldr	r2, [r3, #24]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f022 0210 	bic.w	r2, r2, #16
 8009acc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8009ace:	6a3b      	ldr	r3, [r7, #32]
 8009ad0:	6a1b      	ldr	r3, [r3, #32]
 8009ad2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	f003 020f 	and.w	r2, r3, #15
 8009ada:	4613      	mov	r3, r2
 8009adc:	00db      	lsls	r3, r3, #3
 8009ade:	4413      	add	r3, r2
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	4413      	add	r3, r2
 8009aea:	3304      	adds	r3, #4
 8009aec:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	0c5b      	lsrs	r3, r3, #17
 8009af2:	f003 030f 	and.w	r3, r3, #15
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	d124      	bne.n	8009b44 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009afa:	69ba      	ldr	r2, [r7, #24]
 8009afc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009b00:	4013      	ands	r3, r2
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d035      	beq.n	8009b72 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009b0a:	69bb      	ldr	r3, [r7, #24]
 8009b0c:	091b      	lsrs	r3, r3, #4
 8009b0e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009b10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	461a      	mov	r2, r3
 8009b18:	6a38      	ldr	r0, [r7, #32]
 8009b1a:	f00a fbf5 	bl	8014308 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	68da      	ldr	r2, [r3, #12]
 8009b22:	69bb      	ldr	r3, [r7, #24]
 8009b24:	091b      	lsrs	r3, r3, #4
 8009b26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b2a:	441a      	add	r2, r3
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	695a      	ldr	r2, [r3, #20]
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	091b      	lsrs	r3, r3, #4
 8009b38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b3c:	441a      	add	r2, r3
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	615a      	str	r2, [r3, #20]
 8009b42:	e016      	b.n	8009b72 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	0c5b      	lsrs	r3, r3, #17
 8009b48:	f003 030f 	and.w	r3, r3, #15
 8009b4c:	2b06      	cmp	r3, #6
 8009b4e:	d110      	bne.n	8009b72 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009b56:	2208      	movs	r2, #8
 8009b58:	4619      	mov	r1, r3
 8009b5a:	6a38      	ldr	r0, [r7, #32]
 8009b5c:	f00a fbd4 	bl	8014308 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	695a      	ldr	r2, [r3, #20]
 8009b64:	69bb      	ldr	r3, [r7, #24]
 8009b66:	091b      	lsrs	r3, r3, #4
 8009b68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b6c:	441a      	add	r2, r3
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	699a      	ldr	r2, [r3, #24]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f042 0210 	orr.w	r2, r2, #16
 8009b80:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4618      	mov	r0, r3
 8009b88:	f00a fd52 	bl	8014630 <USB_ReadInterrupts>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009b92:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009b96:	f040 80a7 	bne.w	8009ce8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f00a fd57 	bl	8014656 <USB_ReadDevAllOutEpInterrupt>
 8009ba8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009baa:	e099      	b.n	8009ce0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bae:	f003 0301 	and.w	r3, r3, #1
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	f000 808e 	beq.w	8009cd4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bbe:	b2d2      	uxtb	r2, r2
 8009bc0:	4611      	mov	r1, r2
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f00a fd7b 	bl	80146be <USB_ReadDevOutEPInterrupt>
 8009bc8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	f003 0301 	and.w	r3, r3, #1
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00c      	beq.n	8009bee <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd6:	015a      	lsls	r2, r3, #5
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	4413      	add	r3, r2
 8009bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009be0:	461a      	mov	r2, r3
 8009be2:	2301      	movs	r3, #1
 8009be4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009be6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 fe7d 	bl	800a8e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	f003 0308 	and.w	r3, r3, #8
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d00c      	beq.n	8009c12 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfa:	015a      	lsls	r2, r3, #5
 8009bfc:	69fb      	ldr	r3, [r7, #28]
 8009bfe:	4413      	add	r3, r2
 8009c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c04:	461a      	mov	r2, r3
 8009c06:	2308      	movs	r3, #8
 8009c08:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009c0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 feb9 	bl	800a984 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	f003 0310 	and.w	r3, r3, #16
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d008      	beq.n	8009c2e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1e:	015a      	lsls	r2, r3, #5
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	4413      	add	r3, r2
 8009c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c28:	461a      	mov	r2, r3
 8009c2a:	2310      	movs	r3, #16
 8009c2c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	f003 0302 	and.w	r3, r3, #2
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d030      	beq.n	8009c9a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009c38:	6a3b      	ldr	r3, [r7, #32]
 8009c3a:	695b      	ldr	r3, [r3, #20]
 8009c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c40:	2b80      	cmp	r3, #128	; 0x80
 8009c42:	d109      	bne.n	8009c58 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009c44:	69fb      	ldr	r3, [r7, #28]
 8009c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	69fa      	ldr	r2, [r7, #28]
 8009c4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c56:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8009c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c5a:	4613      	mov	r3, r2
 8009c5c:	00db      	lsls	r3, r3, #3
 8009c5e:	4413      	add	r3, r2
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	4413      	add	r3, r2
 8009c6a:	3304      	adds	r3, #4
 8009c6c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	78db      	ldrb	r3, [r3, #3]
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d108      	bne.n	8009c88 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	4619      	mov	r1, r3
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f00f fcda 	bl	801963c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8a:	015a      	lsls	r2, r3, #5
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	4413      	add	r3, r2
 8009c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c94:	461a      	mov	r2, r3
 8009c96:	2302      	movs	r3, #2
 8009c98:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	f003 0320 	and.w	r3, r3, #32
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d008      	beq.n	8009cb6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca6:	015a      	lsls	r2, r3, #5
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	4413      	add	r3, r2
 8009cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	2320      	movs	r3, #32
 8009cb4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d009      	beq.n	8009cd4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc2:	015a      	lsls	r2, r3, #5
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ccc:	461a      	mov	r2, r3
 8009cce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009cd2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cdc:	085b      	lsrs	r3, r3, #1
 8009cde:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	f47f af62 	bne.w	8009bac <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4618      	mov	r0, r3
 8009cee:	f00a fc9f 	bl	8014630 <USB_ReadInterrupts>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009cf8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009cfc:	f040 80a4 	bne.w	8009e48 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4618      	mov	r0, r3
 8009d06:	f00a fcc0 	bl	801468a <USB_ReadDevAllInEpInterrupt>
 8009d0a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009d10:	e096      	b.n	8009e40 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d14:	f003 0301 	and.w	r3, r3, #1
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f000 808b 	beq.w	8009e34 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d24:	b2d2      	uxtb	r2, r2
 8009d26:	4611      	mov	r1, r2
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f00a fce6 	bl	80146fa <USB_ReadDevInEPInterrupt>
 8009d2e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	f003 0301 	and.w	r3, r3, #1
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d020      	beq.n	8009d7c <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3c:	f003 030f 	and.w	r3, r3, #15
 8009d40:	2201      	movs	r2, #1
 8009d42:	fa02 f303 	lsl.w	r3, r2, r3
 8009d46:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	43db      	mvns	r3, r3
 8009d54:	69f9      	ldr	r1, [r7, #28]
 8009d56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d5a:	4013      	ands	r3, r2
 8009d5c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d60:	015a      	lsls	r2, r3, #5
 8009d62:	69fb      	ldr	r3, [r7, #28]
 8009d64:	4413      	add	r3, r2
 8009d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	4619      	mov	r1, r3
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f00f fbcb 	bl	8019512 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	f003 0308 	and.w	r3, r3, #8
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d008      	beq.n	8009d98 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d88:	015a      	lsls	r2, r3, #5
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d92:	461a      	mov	r2, r3
 8009d94:	2308      	movs	r3, #8
 8009d96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	f003 0310 	and.w	r3, r3, #16
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d008      	beq.n	8009db4 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da4:	015a      	lsls	r2, r3, #5
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	4413      	add	r3, r2
 8009daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dae:	461a      	mov	r2, r3
 8009db0:	2310      	movs	r3, #16
 8009db2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d008      	beq.n	8009dd0 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc0:	015a      	lsls	r2, r3, #5
 8009dc2:	69fb      	ldr	r3, [r7, #28]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dca:	461a      	mov	r2, r3
 8009dcc:	2340      	movs	r3, #64	; 0x40
 8009dce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	f003 0302 	and.w	r3, r3, #2
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d023      	beq.n	8009e22 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009dda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ddc:	6a38      	ldr	r0, [r7, #32]
 8009dde:	f009 fd7d 	bl	80138dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8009de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009de4:	4613      	mov	r3, r2
 8009de6:	00db      	lsls	r3, r3, #3
 8009de8:	4413      	add	r3, r2
 8009dea:	009b      	lsls	r3, r3, #2
 8009dec:	3338      	adds	r3, #56	; 0x38
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	4413      	add	r3, r2
 8009df2:	3304      	adds	r3, #4
 8009df4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	78db      	ldrb	r3, [r3, #3]
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d108      	bne.n	8009e10 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	2200      	movs	r2, #0
 8009e02:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	4619      	mov	r1, r3
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f00f fc28 	bl	8019660 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e12:	015a      	lsls	r2, r3, #5
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	4413      	add	r3, r2
 8009e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	2302      	movs	r3, #2
 8009e20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d003      	beq.n	8009e34 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009e2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 fcd2 	bl	800a7d8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e36:	3301      	adds	r3, #1
 8009e38:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3c:	085b      	lsrs	r3, r3, #1
 8009e3e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	f47f af65 	bne.w	8009d12 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f00a fbef 	bl	8014630 <USB_ReadInterrupts>
 8009e52:	4603      	mov	r3, r0
 8009e54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e5c:	d122      	bne.n	8009ea4 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	69fa      	ldr	r2, [r7, #28]
 8009e68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e6c:	f023 0301 	bic.w	r3, r3, #1
 8009e70:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d108      	bne.n	8009e8e <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009e84:	2100      	movs	r1, #0
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 fe2c 	bl	800aae4 <HAL_PCDEx_LPM_Callback>
 8009e8c:	e002      	b.n	8009e94 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f00f fbac 	bl	80195ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	695a      	ldr	r2, [r3, #20]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009ea2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f00a fbc1 	bl	8014630 <USB_ReadInterrupts>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009eb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009eb8:	d112      	bne.n	8009ee0 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009eba:	69fb      	ldr	r3, [r7, #28]
 8009ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	f003 0301 	and.w	r3, r3, #1
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d102      	bne.n	8009ed0 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f00f fb68 	bl	80195a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	695a      	ldr	r2, [r3, #20]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009ede:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f00a fba3 	bl	8014630 <USB_ReadInterrupts>
 8009eea:	4603      	mov	r3, r0
 8009eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ef0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ef4:	d121      	bne.n	8009f3a <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	695a      	ldr	r2, [r3, #20]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8009f04:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d111      	bne.n	8009f34 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2201      	movs	r2, #1
 8009f14:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f1e:	089b      	lsrs	r3, r3, #2
 8009f20:	f003 020f 	and.w	r2, r3, #15
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009f2a:	2101      	movs	r1, #1
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 fdd9 	bl	800aae4 <HAL_PCDEx_LPM_Callback>
 8009f32:	e002      	b.n	8009f3a <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f00f fb33 	bl	80195a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f00a fb76 	bl	8014630 <USB_ReadInterrupts>
 8009f44:	4603      	mov	r3, r0
 8009f46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f4e:	f040 80b5 	bne.w	800a0bc <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009f52:	69fb      	ldr	r3, [r7, #28]
 8009f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	69fa      	ldr	r2, [r7, #28]
 8009f5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f60:	f023 0301 	bic.w	r3, r3, #1
 8009f64:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2110      	movs	r1, #16
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f009 fcb5 	bl	80138dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f72:	2300      	movs	r3, #0
 8009f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f76:	e046      	b.n	800a006 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f7a:	015a      	lsls	r2, r3, #5
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	4413      	add	r3, r2
 8009f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f84:	461a      	mov	r2, r3
 8009f86:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009f8a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f8e:	015a      	lsls	r2, r3, #5
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	4413      	add	r3, r2
 8009f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f9c:	0151      	lsls	r1, r2, #5
 8009f9e:	69fa      	ldr	r2, [r7, #28]
 8009fa0:	440a      	add	r2, r1
 8009fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fa6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009faa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fae:	015a      	lsls	r2, r3, #5
 8009fb0:	69fb      	ldr	r3, [r7, #28]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fb8:	461a      	mov	r2, r3
 8009fba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009fbe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc2:	015a      	lsls	r2, r3, #5
 8009fc4:	69fb      	ldr	r3, [r7, #28]
 8009fc6:	4413      	add	r3, r2
 8009fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fd0:	0151      	lsls	r1, r2, #5
 8009fd2:	69fa      	ldr	r2, [r7, #28]
 8009fd4:	440a      	add	r2, r1
 8009fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009fde:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe2:	015a      	lsls	r2, r3, #5
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ff0:	0151      	lsls	r1, r2, #5
 8009ff2:	69fa      	ldr	r2, [r7, #28]
 8009ff4:	440a      	add	r2, r1
 8009ff6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ffa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009ffe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a002:	3301      	adds	r3, #1
 800a004:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d3b3      	bcc.n	8009f78 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a016:	69db      	ldr	r3, [r3, #28]
 800a018:	69fa      	ldr	r2, [r7, #28]
 800a01a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a01e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a022:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d016      	beq.n	800a05a <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a032:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a036:	69fa      	ldr	r2, [r7, #28]
 800a038:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a03c:	f043 030b 	orr.w	r3, r3, #11
 800a040:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a044:	69fb      	ldr	r3, [r7, #28]
 800a046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a04a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a04c:	69fa      	ldr	r2, [r7, #28]
 800a04e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a052:	f043 030b 	orr.w	r3, r3, #11
 800a056:	6453      	str	r3, [r2, #68]	; 0x44
 800a058:	e015      	b.n	800a086 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a05a:	69fb      	ldr	r3, [r7, #28]
 800a05c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a060:	695b      	ldr	r3, [r3, #20]
 800a062:	69fa      	ldr	r2, [r7, #28]
 800a064:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a068:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a06c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800a070:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a072:	69fb      	ldr	r3, [r7, #28]
 800a074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	69fa      	ldr	r2, [r7, #28]
 800a07c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a080:	f043 030b 	orr.w	r3, r3, #11
 800a084:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a086:	69fb      	ldr	r3, [r7, #28]
 800a088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	69fa      	ldr	r2, [r7, #28]
 800a090:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a094:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a098:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681a      	ldr	r2, [r3, #0]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	4610      	mov	r0, r2
 800a0a8:	f00a fb86 	bl	80147b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	695a      	ldr	r2, [r3, #20]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a0ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f00a fab5 	bl	8014630 <USB_ReadInterrupts>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0d0:	d124      	bne.n	800a11c <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f00a fb4b 	bl	8014772 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f009 fc78 	bl	80139d6 <USB_GetDevSpeed>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681c      	ldr	r4, [r3, #0]
 800a0f2:	f001 fbb7 	bl	800b864 <HAL_RCC_GetHCLKFreq>
 800a0f6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	461a      	mov	r2, r3
 800a100:	4620      	mov	r0, r4
 800a102:	f009 f99f 	bl	8013444 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f00f fa2b 	bl	8019562 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	695a      	ldr	r2, [r3, #20]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a11a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4618      	mov	r0, r3
 800a122:	f00a fa85 	bl	8014630 <USB_ReadInterrupts>
 800a126:	4603      	mov	r3, r0
 800a128:	f003 0308 	and.w	r3, r3, #8
 800a12c:	2b08      	cmp	r3, #8
 800a12e:	d10a      	bne.n	800a146 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f00f fa08 	bl	8019546 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	695a      	ldr	r2, [r3, #20]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f002 0208 	and.w	r2, r2, #8
 800a144:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4618      	mov	r0, r3
 800a14c:	f00a fa70 	bl	8014630 <USB_ReadInterrupts>
 800a150:	4603      	mov	r3, r0
 800a152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a156:	2b80      	cmp	r3, #128	; 0x80
 800a158:	d122      	bne.n	800a1a0 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800a15a:	6a3b      	ldr	r3, [r7, #32]
 800a15c:	699b      	ldr	r3, [r3, #24]
 800a15e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a162:	6a3b      	ldr	r3, [r7, #32]
 800a164:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a166:	2301      	movs	r3, #1
 800a168:	627b      	str	r3, [r7, #36]	; 0x24
 800a16a:	e014      	b.n	800a196 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a16c:	6879      	ldr	r1, [r7, #4]
 800a16e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a170:	4613      	mov	r3, r2
 800a172:	00db      	lsls	r3, r3, #3
 800a174:	4413      	add	r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	440b      	add	r3, r1
 800a17a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	2b01      	cmp	r3, #1
 800a182:	d105      	bne.n	800a190 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800a184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a186:	b2db      	uxtb	r3, r3
 800a188:	4619      	mov	r1, r3
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 faf3 	bl	800a776 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a192:	3301      	adds	r3, #1
 800a194:	627b      	str	r3, [r7, #36]	; 0x24
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d3e5      	bcc.n	800a16c <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f00a fa43 	bl	8014630 <USB_ReadInterrupts>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a1b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1b4:	d13b      	bne.n	800a22e <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	627b      	str	r3, [r7, #36]	; 0x24
 800a1ba:	e02b      	b.n	800a214 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1be:	015a      	lsls	r2, r3, #5
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	4413      	add	r3, r2
 800a1c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a1cc:	6879      	ldr	r1, [r7, #4]
 800a1ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	00db      	lsls	r3, r3, #3
 800a1d4:	4413      	add	r3, r2
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	440b      	add	r3, r1
 800a1da:	3340      	adds	r3, #64	; 0x40
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d115      	bne.n	800a20e <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800a1e2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	da12      	bge.n	800a20e <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a1e8:	6879      	ldr	r1, [r7, #4]
 800a1ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1ec:	4613      	mov	r3, r2
 800a1ee:	00db      	lsls	r3, r3, #3
 800a1f0:	4413      	add	r3, r2
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	440b      	add	r3, r1
 800a1f6:	333f      	adds	r3, #63	; 0x3f
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800a1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a204:	b2db      	uxtb	r3, r3
 800a206:	4619      	mov	r1, r3
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 fab4 	bl	800a776 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a210:	3301      	adds	r3, #1
 800a212:	627b      	str	r3, [r7, #36]	; 0x24
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d3ce      	bcc.n	800a1bc <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	695a      	ldr	r2, [r3, #20]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a22c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4618      	mov	r0, r3
 800a234:	f00a f9fc 	bl	8014630 <USB_ReadInterrupts>
 800a238:	4603      	mov	r3, r0
 800a23a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a23e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a242:	d155      	bne.n	800a2f0 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a244:	2301      	movs	r3, #1
 800a246:	627b      	str	r3, [r7, #36]	; 0x24
 800a248:	e045      	b.n	800a2d6 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800a24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24c:	015a      	lsls	r2, r3, #5
 800a24e:	69fb      	ldr	r3, [r7, #28]
 800a250:	4413      	add	r3, r2
 800a252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a25a:	6879      	ldr	r1, [r7, #4]
 800a25c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a25e:	4613      	mov	r3, r2
 800a260:	00db      	lsls	r3, r3, #3
 800a262:	4413      	add	r3, r2
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	440b      	add	r3, r1
 800a268:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	2b01      	cmp	r3, #1
 800a270:	d12e      	bne.n	800a2d0 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a272:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a274:	2b00      	cmp	r3, #0
 800a276:	da2b      	bge.n	800a2d0 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800a278:	69bb      	ldr	r3, [r7, #24]
 800a27a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800a284:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a288:	429a      	cmp	r2, r3
 800a28a:	d121      	bne.n	800a2d0 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800a28c:	6879      	ldr	r1, [r7, #4]
 800a28e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a290:	4613      	mov	r3, r2
 800a292:	00db      	lsls	r3, r3, #3
 800a294:	4413      	add	r3, r2
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	440b      	add	r3, r1
 800a29a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800a29e:	2201      	movs	r2, #1
 800a2a0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800a2a2:	6a3b      	ldr	r3, [r7, #32]
 800a2a4:	699b      	ldr	r3, [r3, #24]
 800a2a6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a2aa:	6a3b      	ldr	r3, [r7, #32]
 800a2ac:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800a2ae:	6a3b      	ldr	r3, [r7, #32]
 800a2b0:	695b      	ldr	r3, [r3, #20]
 800a2b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d10a      	bne.n	800a2d0 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	69fa      	ldr	r2, [r7, #28]
 800a2c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a2c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a2cc:	6053      	str	r3, [r2, #4]
            break;
 800a2ce:	e007      	b.n	800a2e0 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	627b      	str	r3, [r7, #36]	; 0x24
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d3b4      	bcc.n	800a24a <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	695a      	ldr	r2, [r3, #20]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a2ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f00a f99b 	bl	8014630 <USB_ReadInterrupts>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a304:	d10a      	bne.n	800a31c <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f00f f9bc 	bl	8019684 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	695a      	ldr	r2, [r3, #20]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a31a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4618      	mov	r0, r3
 800a322:	f00a f985 	bl	8014630 <USB_ReadInterrupts>
 800a326:	4603      	mov	r3, r0
 800a328:	f003 0304 	and.w	r3, r3, #4
 800a32c:	2b04      	cmp	r3, #4
 800a32e:	d115      	bne.n	800a35c <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a338:	69bb      	ldr	r3, [r7, #24]
 800a33a:	f003 0304 	and.w	r3, r3, #4
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d002      	beq.n	800a348 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f00f f9ac 	bl	80196a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	6859      	ldr	r1, [r3, #4]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	69ba      	ldr	r2, [r7, #24]
 800a354:	430a      	orrs	r2, r1
 800a356:	605a      	str	r2, [r3, #4]
 800a358:	e000      	b.n	800a35c <HAL_PCD_IRQHandler+0x920>
      return;
 800a35a:	bf00      	nop
    }
  }
}
 800a35c:	3734      	adds	r7, #52	; 0x34
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd90      	pop	{r4, r7, pc}

0800a362 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b082      	sub	sp, #8
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
 800a36a:	460b      	mov	r3, r1
 800a36c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a374:	2b01      	cmp	r3, #1
 800a376:	d101      	bne.n	800a37c <HAL_PCD_SetAddress+0x1a>
 800a378:	2302      	movs	r3, #2
 800a37a:	e013      	b.n	800a3a4 <HAL_PCD_SetAddress+0x42>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2201      	movs	r2, #1
 800a380:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	78fa      	ldrb	r2, [r7, #3]
 800a388:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	78fa      	ldrb	r2, [r7, #3]
 800a392:	4611      	mov	r1, r2
 800a394:	4618      	mov	r0, r3
 800a396:	f00a f8e3 	bl	8014560 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3708      	adds	r7, #8
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	4608      	mov	r0, r1
 800a3b6:	4611      	mov	r1, r2
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	70fb      	strb	r3, [r7, #3]
 800a3be:	460b      	mov	r3, r1
 800a3c0:	803b      	strh	r3, [r7, #0]
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a3ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	da0f      	bge.n	800a3f2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a3d2:	78fb      	ldrb	r3, [r7, #3]
 800a3d4:	f003 020f 	and.w	r2, r3, #15
 800a3d8:	4613      	mov	r3, r2
 800a3da:	00db      	lsls	r3, r3, #3
 800a3dc:	4413      	add	r3, r2
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	3338      	adds	r3, #56	; 0x38
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	3304      	adds	r3, #4
 800a3e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	705a      	strb	r2, [r3, #1]
 800a3f0:	e00f      	b.n	800a412 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a3f2:	78fb      	ldrb	r3, [r7, #3]
 800a3f4:	f003 020f 	and.w	r2, r3, #15
 800a3f8:	4613      	mov	r3, r2
 800a3fa:	00db      	lsls	r3, r3, #3
 800a3fc:	4413      	add	r3, r2
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a404:	687a      	ldr	r2, [r7, #4]
 800a406:	4413      	add	r3, r2
 800a408:	3304      	adds	r3, #4
 800a40a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2200      	movs	r2, #0
 800a410:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a412:	78fb      	ldrb	r3, [r7, #3]
 800a414:	f003 030f 	and.w	r3, r3, #15
 800a418:	b2da      	uxtb	r2, r3
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a41e:	883a      	ldrh	r2, [r7, #0]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	78ba      	ldrb	r2, [r7, #2]
 800a428:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	785b      	ldrb	r3, [r3, #1]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d004      	beq.n	800a43c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	b29a      	uxth	r2, r3
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a43c:	78bb      	ldrb	r3, [r7, #2]
 800a43e:	2b02      	cmp	r3, #2
 800a440:	d102      	bne.n	800a448 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2200      	movs	r2, #0
 800a446:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d101      	bne.n	800a456 <HAL_PCD_EP_Open+0xaa>
 800a452:	2302      	movs	r3, #2
 800a454:	e00e      	b.n	800a474 <HAL_PCD_EP_Open+0xc8>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2201      	movs	r2, #1
 800a45a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	68f9      	ldr	r1, [r7, #12]
 800a464:	4618      	mov	r0, r3
 800a466:	f009 fad5 	bl	8013a14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800a472:	7afb      	ldrb	r3, [r7, #11]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	460b      	mov	r3, r1
 800a486:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a488:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	da0f      	bge.n	800a4b0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a490:	78fb      	ldrb	r3, [r7, #3]
 800a492:	f003 020f 	and.w	r2, r3, #15
 800a496:	4613      	mov	r3, r2
 800a498:	00db      	lsls	r3, r3, #3
 800a49a:	4413      	add	r3, r2
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	3338      	adds	r3, #56	; 0x38
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	3304      	adds	r3, #4
 800a4a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	705a      	strb	r2, [r3, #1]
 800a4ae:	e00f      	b.n	800a4d0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a4b0:	78fb      	ldrb	r3, [r7, #3]
 800a4b2:	f003 020f 	and.w	r2, r3, #15
 800a4b6:	4613      	mov	r3, r2
 800a4b8:	00db      	lsls	r3, r3, #3
 800a4ba:	4413      	add	r3, r2
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	3304      	adds	r3, #4
 800a4c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a4d0:	78fb      	ldrb	r3, [r7, #3]
 800a4d2:	f003 030f 	and.w	r3, r3, #15
 800a4d6:	b2da      	uxtb	r2, r3
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d101      	bne.n	800a4ea <HAL_PCD_EP_Close+0x6e>
 800a4e6:	2302      	movs	r3, #2
 800a4e8:	e00e      	b.n	800a508 <HAL_PCD_EP_Close+0x8c>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	68f9      	ldr	r1, [r7, #12]
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f009 fb13 	bl	8013b24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2200      	movs	r2, #0
 800a502:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800a506:	2300      	movs	r3, #0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3710      	adds	r7, #16
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b086      	sub	sp, #24
 800a514:	af00      	add	r7, sp, #0
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	607a      	str	r2, [r7, #4]
 800a51a:	603b      	str	r3, [r7, #0]
 800a51c:	460b      	mov	r3, r1
 800a51e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a520:	7afb      	ldrb	r3, [r7, #11]
 800a522:	f003 020f 	and.w	r2, r3, #15
 800a526:	4613      	mov	r3, r2
 800a528:	00db      	lsls	r3, r3, #3
 800a52a:	4413      	add	r3, r2
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	4413      	add	r3, r2
 800a536:	3304      	adds	r3, #4
 800a538:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	683a      	ldr	r2, [r7, #0]
 800a544:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	2200      	movs	r2, #0
 800a54a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	2200      	movs	r2, #0
 800a550:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a552:	7afb      	ldrb	r3, [r7, #11]
 800a554:	f003 030f 	and.w	r3, r3, #15
 800a558:	b2da      	uxtb	r2, r3
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	6979      	ldr	r1, [r7, #20]
 800a564:	4618      	mov	r0, r3
 800a566:	f009 fbb9 	bl	8013cdc <USB_EPStartXfer>

  return HAL_OK;
 800a56a:	2300      	movs	r3, #0
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3718      	adds	r7, #24
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	460b      	mov	r3, r1
 800a57e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a580:	78fb      	ldrb	r3, [r7, #3]
 800a582:	f003 020f 	and.w	r2, r3, #15
 800a586:	6879      	ldr	r1, [r7, #4]
 800a588:	4613      	mov	r3, r2
 800a58a:	00db      	lsls	r3, r3, #3
 800a58c:	4413      	add	r3, r2
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	440b      	add	r3, r1
 800a592:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800a596:	681b      	ldr	r3, [r3, #0]
}
 800a598:	4618      	mov	r0, r3
 800a59a:	370c      	adds	r7, #12
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b086      	sub	sp, #24
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	60f8      	str	r0, [r7, #12]
 800a5ac:	607a      	str	r2, [r7, #4]
 800a5ae:	603b      	str	r3, [r7, #0]
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a5b4:	7afb      	ldrb	r3, [r7, #11]
 800a5b6:	f003 020f 	and.w	r2, r3, #15
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	00db      	lsls	r3, r3, #3
 800a5be:	4413      	add	r3, r2
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	3338      	adds	r3, #56	; 0x38
 800a5c4:	68fa      	ldr	r2, [r7, #12]
 800a5c6:	4413      	add	r3, r2
 800a5c8:	3304      	adds	r3, #4
 800a5ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	683a      	ldr	r2, [r7, #0]
 800a5d6:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a5e4:	7afb      	ldrb	r3, [r7, #11]
 800a5e6:	f003 030f 	and.w	r3, r3, #15
 800a5ea:	b2da      	uxtb	r2, r3
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	6979      	ldr	r1, [r7, #20]
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f009 fb70 	bl	8013cdc <USB_EPStartXfer>

  return HAL_OK;
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3718      	adds	r7, #24
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b084      	sub	sp, #16
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
 800a60e:	460b      	mov	r3, r1
 800a610:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a612:	78fb      	ldrb	r3, [r7, #3]
 800a614:	f003 020f 	and.w	r2, r3, #15
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d901      	bls.n	800a624 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a620:	2301      	movs	r3, #1
 800a622:	e04e      	b.n	800a6c2 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a624:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	da0f      	bge.n	800a64c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a62c:	78fb      	ldrb	r3, [r7, #3]
 800a62e:	f003 020f 	and.w	r2, r3, #15
 800a632:	4613      	mov	r3, r2
 800a634:	00db      	lsls	r3, r3, #3
 800a636:	4413      	add	r3, r2
 800a638:	009b      	lsls	r3, r3, #2
 800a63a:	3338      	adds	r3, #56	; 0x38
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	4413      	add	r3, r2
 800a640:	3304      	adds	r3, #4
 800a642:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2201      	movs	r2, #1
 800a648:	705a      	strb	r2, [r3, #1]
 800a64a:	e00d      	b.n	800a668 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a64c:	78fa      	ldrb	r2, [r7, #3]
 800a64e:	4613      	mov	r3, r2
 800a650:	00db      	lsls	r3, r3, #3
 800a652:	4413      	add	r3, r2
 800a654:	009b      	lsls	r3, r3, #2
 800a656:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	4413      	add	r3, r2
 800a65e:	3304      	adds	r3, #4
 800a660:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2200      	movs	r2, #0
 800a666:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2201      	movs	r2, #1
 800a66c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a66e:	78fb      	ldrb	r3, [r7, #3]
 800a670:	f003 030f 	and.w	r3, r3, #15
 800a674:	b2da      	uxtb	r2, r3
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a680:	2b01      	cmp	r3, #1
 800a682:	d101      	bne.n	800a688 <HAL_PCD_EP_SetStall+0x82>
 800a684:	2302      	movs	r3, #2
 800a686:	e01c      	b.n	800a6c2 <HAL_PCD_EP_SetStall+0xbc>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2201      	movs	r2, #1
 800a68c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68f9      	ldr	r1, [r7, #12]
 800a696:	4618      	mov	r0, r3
 800a698:	f009 fe8e 	bl	80143b8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a69c:	78fb      	ldrb	r3, [r7, #3]
 800a69e:	f003 030f 	and.w	r3, r3, #15
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d108      	bne.n	800a6b8 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	4610      	mov	r0, r2
 800a6b4:	f00a f880 	bl	80147b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a6c0:	2300      	movs	r3, #0
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b084      	sub	sp, #16
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a6d6:	78fb      	ldrb	r3, [r7, #3]
 800a6d8:	f003 020f 	and.w	r2, r3, #15
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d901      	bls.n	800a6e8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	e042      	b.n	800a76e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a6e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	da0f      	bge.n	800a710 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a6f0:	78fb      	ldrb	r3, [r7, #3]
 800a6f2:	f003 020f 	and.w	r2, r3, #15
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	00db      	lsls	r3, r3, #3
 800a6fa:	4413      	add	r3, r2
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	3338      	adds	r3, #56	; 0x38
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	4413      	add	r3, r2
 800a704:	3304      	adds	r3, #4
 800a706:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2201      	movs	r2, #1
 800a70c:	705a      	strb	r2, [r3, #1]
 800a70e:	e00f      	b.n	800a730 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a710:	78fb      	ldrb	r3, [r7, #3]
 800a712:	f003 020f 	and.w	r2, r3, #15
 800a716:	4613      	mov	r3, r2
 800a718:	00db      	lsls	r3, r3, #3
 800a71a:	4413      	add	r3, r2
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	4413      	add	r3, r2
 800a726:	3304      	adds	r3, #4
 800a728:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2200      	movs	r2, #0
 800a72e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2200      	movs	r2, #0
 800a734:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a736:	78fb      	ldrb	r3, [r7, #3]
 800a738:	f003 030f 	and.w	r3, r3, #15
 800a73c:	b2da      	uxtb	r2, r3
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d101      	bne.n	800a750 <HAL_PCD_EP_ClrStall+0x86>
 800a74c:	2302      	movs	r3, #2
 800a74e:	e00e      	b.n	800a76e <HAL_PCD_EP_ClrStall+0xa4>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2201      	movs	r2, #1
 800a754:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	68f9      	ldr	r1, [r7, #12]
 800a75e:	4618      	mov	r0, r3
 800a760:	f009 fe98 	bl	8014494 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2200      	movs	r2, #0
 800a768:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a76c:	2300      	movs	r3, #0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3710      	adds	r7, #16
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}

0800a776 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a776:	b580      	push	{r7, lr}
 800a778:	b084      	sub	sp, #16
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
 800a77e:	460b      	mov	r3, r1
 800a780:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a782:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a786:	2b00      	cmp	r3, #0
 800a788:	da0c      	bge.n	800a7a4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a78a:	78fb      	ldrb	r3, [r7, #3]
 800a78c:	f003 020f 	and.w	r2, r3, #15
 800a790:	4613      	mov	r3, r2
 800a792:	00db      	lsls	r3, r3, #3
 800a794:	4413      	add	r3, r2
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	3338      	adds	r3, #56	; 0x38
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	4413      	add	r3, r2
 800a79e:	3304      	adds	r3, #4
 800a7a0:	60fb      	str	r3, [r7, #12]
 800a7a2:	e00c      	b.n	800a7be <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a7a4:	78fb      	ldrb	r3, [r7, #3]
 800a7a6:	f003 020f 	and.w	r2, r3, #15
 800a7aa:	4613      	mov	r3, r2
 800a7ac:	00db      	lsls	r3, r3, #3
 800a7ae:	4413      	add	r3, r2
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	4413      	add	r3, r2
 800a7ba:	3304      	adds	r3, #4
 800a7bc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	68f9      	ldr	r1, [r7, #12]
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f009 fcbb 	bl	8014140 <USB_EPStopXfer>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a7ce:	7afb      	ldrb	r3, [r7, #11]
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3710      	adds	r7, #16
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b088      	sub	sp, #32
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a7ec:	683a      	ldr	r2, [r7, #0]
 800a7ee:	4613      	mov	r3, r2
 800a7f0:	00db      	lsls	r3, r3, #3
 800a7f2:	4413      	add	r3, r2
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	3338      	adds	r3, #56	; 0x38
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	4413      	add	r3, r2
 800a7fc:	3304      	adds	r3, #4
 800a7fe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	695a      	ldr	r2, [r3, #20]
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	691b      	ldr	r3, [r3, #16]
 800a808:	429a      	cmp	r2, r3
 800a80a:	d901      	bls.n	800a810 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a80c:	2301      	movs	r3, #1
 800a80e:	e067      	b.n	800a8e0 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	691a      	ldr	r2, [r3, #16]
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	695b      	ldr	r3, [r3, #20]
 800a818:	1ad3      	subs	r3, r2, r3
 800a81a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	69fa      	ldr	r2, [r7, #28]
 800a822:	429a      	cmp	r2, r3
 800a824:	d902      	bls.n	800a82c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	689b      	ldr	r3, [r3, #8]
 800a82a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	3303      	adds	r3, #3
 800a830:	089b      	lsrs	r3, r3, #2
 800a832:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a834:	e026      	b.n	800a884 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	691a      	ldr	r2, [r3, #16]
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	695b      	ldr	r3, [r3, #20]
 800a83e:	1ad3      	subs	r3, r2, r3
 800a840:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	689b      	ldr	r3, [r3, #8]
 800a846:	69fa      	ldr	r2, [r7, #28]
 800a848:	429a      	cmp	r2, r3
 800a84a:	d902      	bls.n	800a852 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a852:	69fb      	ldr	r3, [r7, #28]
 800a854:	3303      	adds	r3, #3
 800a856:	089b      	lsrs	r3, r3, #2
 800a858:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	68d9      	ldr	r1, [r3, #12]
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	b2da      	uxtb	r2, r3
 800a862:	69fb      	ldr	r3, [r7, #28]
 800a864:	b29b      	uxth	r3, r3
 800a866:	6978      	ldr	r0, [r7, #20]
 800a868:	f009 fd14 	bl	8014294 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	68da      	ldr	r2, [r3, #12]
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	441a      	add	r2, r3
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	695a      	ldr	r2, [r3, #20]
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	441a      	add	r2, r3
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	015a      	lsls	r2, r3, #5
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	4413      	add	r3, r2
 800a88c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a890:	699b      	ldr	r3, [r3, #24]
 800a892:	b29b      	uxth	r3, r3
 800a894:	69ba      	ldr	r2, [r7, #24]
 800a896:	429a      	cmp	r2, r3
 800a898:	d809      	bhi.n	800a8ae <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	695a      	ldr	r2, [r3, #20]
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d203      	bcs.n	800a8ae <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	691b      	ldr	r3, [r3, #16]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d1c3      	bne.n	800a836 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	691a      	ldr	r2, [r3, #16]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	695b      	ldr	r3, [r3, #20]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d811      	bhi.n	800a8de <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	f003 030f 	and.w	r3, r3, #15
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a8c6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	43db      	mvns	r3, r3
 800a8d4:	6939      	ldr	r1, [r7, #16]
 800a8d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8da:	4013      	ands	r3, r2
 800a8dc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a8de:	2300      	movs	r3, #0
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3720      	adds	r7, #32
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b086      	sub	sp, #24
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	333c      	adds	r3, #60	; 0x3c
 800a900:	3304      	adds	r3, #4
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	015a      	lsls	r2, r3, #5
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	4413      	add	r3, r2
 800a90e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a912:	689b      	ldr	r3, [r3, #8]
 800a914:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	4a19      	ldr	r2, [pc, #100]	; (800a980 <PCD_EP_OutXfrComplete_int+0x98>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d124      	bne.n	800a968 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a924:	2b00      	cmp	r3, #0
 800a926:	d00a      	beq.n	800a93e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	015a      	lsls	r2, r3, #5
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	4413      	add	r3, r2
 800a930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a934:	461a      	mov	r2, r3
 800a936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a93a:	6093      	str	r3, [r2, #8]
 800a93c:	e01a      	b.n	800a974 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	f003 0320 	and.w	r3, r3, #32
 800a944:	2b00      	cmp	r3, #0
 800a946:	d008      	beq.n	800a95a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	015a      	lsls	r2, r3, #5
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	4413      	add	r3, r2
 800a950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a954:	461a      	mov	r2, r3
 800a956:	2320      	movs	r3, #32
 800a958:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	b2db      	uxtb	r3, r3
 800a95e:	4619      	mov	r1, r3
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f00e fdbb 	bl	80194dc <HAL_PCD_DataOutStageCallback>
 800a966:	e005      	b.n	800a974 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	4619      	mov	r1, r3
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f00e fdb4 	bl	80194dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800a974:	2300      	movs	r3, #0
}
 800a976:	4618      	mov	r0, r3
 800a978:	3718      	adds	r7, #24
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	4f54310a 	.word	0x4f54310a

0800a984 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b086      	sub	sp, #24
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	333c      	adds	r3, #60	; 0x3c
 800a99c:	3304      	adds	r3, #4
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	015a      	lsls	r2, r3, #5
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	4413      	add	r3, r2
 800a9aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9ae:	689b      	ldr	r3, [r3, #8]
 800a9b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	4a0c      	ldr	r2, [pc, #48]	; (800a9e8 <PCD_EP_OutSetupPacket_int+0x64>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d90e      	bls.n	800a9d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d009      	beq.n	800a9d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	015a      	lsls	r2, r3, #5
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f00e fd6d 	bl	80194b8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800a9de:	2300      	movs	r3, #0
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3718      	adds	r7, #24
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	4f54300a 	.word	0x4f54300a

0800a9ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b085      	sub	sp, #20
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	70fb      	strb	r3, [r7, #3]
 800a9f8:	4613      	mov	r3, r2
 800a9fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa02:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800aa04:	78fb      	ldrb	r3, [r7, #3]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d107      	bne.n	800aa1a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800aa0a:	883b      	ldrh	r3, [r7, #0]
 800aa0c:	0419      	lsls	r1, r3, #16
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	68ba      	ldr	r2, [r7, #8]
 800aa14:	430a      	orrs	r2, r1
 800aa16:	629a      	str	r2, [r3, #40]	; 0x28
 800aa18:	e028      	b.n	800aa6c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa20:	0c1b      	lsrs	r3, r3, #16
 800aa22:	68ba      	ldr	r2, [r7, #8]
 800aa24:	4413      	add	r3, r2
 800aa26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800aa28:	2300      	movs	r3, #0
 800aa2a:	73fb      	strb	r3, [r7, #15]
 800aa2c:	e00d      	b.n	800aa4a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	7bfb      	ldrb	r3, [r7, #15]
 800aa34:	3340      	adds	r3, #64	; 0x40
 800aa36:	009b      	lsls	r3, r3, #2
 800aa38:	4413      	add	r3, r2
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	0c1b      	lsrs	r3, r3, #16
 800aa3e:	68ba      	ldr	r2, [r7, #8]
 800aa40:	4413      	add	r3, r2
 800aa42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800aa44:	7bfb      	ldrb	r3, [r7, #15]
 800aa46:	3301      	adds	r3, #1
 800aa48:	73fb      	strb	r3, [r7, #15]
 800aa4a:	7bfa      	ldrb	r2, [r7, #15]
 800aa4c:	78fb      	ldrb	r3, [r7, #3]
 800aa4e:	3b01      	subs	r3, #1
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d3ec      	bcc.n	800aa2e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800aa54:	883b      	ldrh	r3, [r7, #0]
 800aa56:	0418      	lsls	r0, r3, #16
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6819      	ldr	r1, [r3, #0]
 800aa5c:	78fb      	ldrb	r3, [r7, #3]
 800aa5e:	3b01      	subs	r3, #1
 800aa60:	68ba      	ldr	r2, [r7, #8]
 800aa62:	4302      	orrs	r2, r0
 800aa64:	3340      	adds	r3, #64	; 0x40
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	440b      	add	r3, r1
 800aa6a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800aa6c:	2300      	movs	r3, #0
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3714      	adds	r7, #20
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr

0800aa7a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800aa7a:	b480      	push	{r7}
 800aa7c:	b083      	sub	sp, #12
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
 800aa82:	460b      	mov	r3, r1
 800aa84:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	887a      	ldrh	r2, [r7, #2]
 800aa8c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800aa8e:	2300      	movs	r3, #0
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	370c      	adds	r7, #12
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr

0800aa9c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2201      	movs	r2, #1
 800aaae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	699b      	ldr	r3, [r3, #24]
 800aabe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aace:	f043 0303 	orr.w	r3, r3, #3
 800aad2:	68fa      	ldr	r2, [r7, #12]
 800aad4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800aad6:	2300      	movs	r3, #0
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3714      	adds	r7, #20
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	460b      	mov	r3, r1
 800aaee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800aaf0:	bf00      	nop
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800aafc:	b480      	push	{r7}
 800aafe:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800ab00:	4b0d      	ldr	r3, [pc, #52]	; (800ab38 <HAL_PWREx_GetVoltageRange+0x3c>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ab08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab0c:	d102      	bne.n	800ab14 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800ab0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab12:	e00b      	b.n	800ab2c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800ab14:	4b08      	ldr	r3, [pc, #32]	; (800ab38 <HAL_PWREx_GetVoltageRange+0x3c>)
 800ab16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab22:	d102      	bne.n	800ab2a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800ab24:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab28:	e000      	b.n	800ab2c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800ab2a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr
 800ab36:	bf00      	nop
 800ab38:	40007000 	.word	0x40007000

0800ab3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b085      	sub	sp, #20
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d141      	bne.n	800abce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800ab4a:	4b4b      	ldr	r3, [pc, #300]	; (800ac78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ab52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab56:	d131      	bne.n	800abbc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ab58:	4b47      	ldr	r3, [pc, #284]	; (800ac78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab5e:	4a46      	ldr	r2, [pc, #280]	; (800ac78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ab68:	4b43      	ldr	r3, [pc, #268]	; (800ac78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ab70:	4a41      	ldr	r2, [pc, #260]	; (800ac78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ab76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800ab78:	4b40      	ldr	r3, [pc, #256]	; (800ac7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	2232      	movs	r2, #50	; 0x32
 800ab7e:	fb02 f303 	mul.w	r3, r2, r3
 800ab82:	4a3f      	ldr	r2, [pc, #252]	; (800ac80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800ab84:	fba2 2303 	umull	r2, r3, r2, r3
 800ab88:	0c9b      	lsrs	r3, r3, #18
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ab8e:	e002      	b.n	800ab96 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	3b01      	subs	r3, #1
 800ab94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ab96:	4b38      	ldr	r3, [pc, #224]	; (800ac78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab98:	695b      	ldr	r3, [r3, #20]
 800ab9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aba2:	d102      	bne.n	800abaa <HAL_PWREx_ControlVoltageScaling+0x6e>
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d1f2      	bne.n	800ab90 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800abaa:	4b33      	ldr	r3, [pc, #204]	; (800ac78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abac:	695b      	ldr	r3, [r3, #20]
 800abae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abb6:	d158      	bne.n	800ac6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800abb8:	2303      	movs	r3, #3
 800abba:	e057      	b.n	800ac6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800abbc:	4b2e      	ldr	r3, [pc, #184]	; (800ac78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800abc2:	4a2d      	ldr	r2, [pc, #180]	; (800ac78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800abcc:	e04d      	b.n	800ac6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abd4:	d141      	bne.n	800ac5a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800abd6:	4b28      	ldr	r3, [pc, #160]	; (800ac78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800abde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abe2:	d131      	bne.n	800ac48 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800abe4:	4b24      	ldr	r3, [pc, #144]	; (800ac78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800abea:	4a23      	ldr	r2, [pc, #140]	; (800ac78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abf0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800abf4:	4b20      	ldr	r3, [pc, #128]	; (800ac78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800abfc:	4a1e      	ldr	r2, [pc, #120]	; (800ac78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ac02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800ac04:	4b1d      	ldr	r3, [pc, #116]	; (800ac7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2232      	movs	r2, #50	; 0x32
 800ac0a:	fb02 f303 	mul.w	r3, r2, r3
 800ac0e:	4a1c      	ldr	r2, [pc, #112]	; (800ac80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800ac10:	fba2 2303 	umull	r2, r3, r2, r3
 800ac14:	0c9b      	lsrs	r3, r3, #18
 800ac16:	3301      	adds	r3, #1
 800ac18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ac1a:	e002      	b.n	800ac22 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	3b01      	subs	r3, #1
 800ac20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ac22:	4b15      	ldr	r3, [pc, #84]	; (800ac78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac24:	695b      	ldr	r3, [r3, #20]
 800ac26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac2e:	d102      	bne.n	800ac36 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d1f2      	bne.n	800ac1c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ac36:	4b10      	ldr	r3, [pc, #64]	; (800ac78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac38:	695b      	ldr	r3, [r3, #20]
 800ac3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac42:	d112      	bne.n	800ac6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800ac44:	2303      	movs	r3, #3
 800ac46:	e011      	b.n	800ac6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ac48:	4b0b      	ldr	r3, [pc, #44]	; (800ac78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac4e:	4a0a      	ldr	r2, [pc, #40]	; (800ac78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800ac58:	e007      	b.n	800ac6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ac5a:	4b07      	ldr	r3, [pc, #28]	; (800ac78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ac62:	4a05      	ldr	r2, [pc, #20]	; (800ac78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ac68:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800ac6a:	2300      	movs	r3, #0
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3714      	adds	r7, #20
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr
 800ac78:	40007000 	.word	0x40007000
 800ac7c:	20000004 	.word	0x20000004
 800ac80:	431bde83 	.word	0x431bde83

0800ac84 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800ac84:	b480      	push	{r7}
 800ac86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800ac88:	4b05      	ldr	r3, [pc, #20]	; (800aca0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	4a04      	ldr	r2, [pc, #16]	; (800aca0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800ac8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ac92:	6053      	str	r3, [r2, #4]
}
 800ac94:	bf00      	nop
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr
 800ac9e:	bf00      	nop
 800aca0:	40007000 	.word	0x40007000

0800aca4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b088      	sub	sp, #32
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d102      	bne.n	800acb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800acb2:	2301      	movs	r3, #1
 800acb4:	f000 bc08 	b.w	800b4c8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800acb8:	4b96      	ldr	r3, [pc, #600]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800acba:	689b      	ldr	r3, [r3, #8]
 800acbc:	f003 030c 	and.w	r3, r3, #12
 800acc0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800acc2:	4b94      	ldr	r3, [pc, #592]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800acc4:	68db      	ldr	r3, [r3, #12]
 800acc6:	f003 0303 	and.w	r3, r3, #3
 800acca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f003 0310 	and.w	r3, r3, #16
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f000 80e4 	beq.w	800aea2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800acda:	69bb      	ldr	r3, [r7, #24]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d007      	beq.n	800acf0 <HAL_RCC_OscConfig+0x4c>
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	2b0c      	cmp	r3, #12
 800ace4:	f040 808b 	bne.w	800adfe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	2b01      	cmp	r3, #1
 800acec:	f040 8087 	bne.w	800adfe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800acf0:	4b88      	ldr	r3, [pc, #544]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f003 0302 	and.w	r3, r3, #2
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d005      	beq.n	800ad08 <HAL_RCC_OscConfig+0x64>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	699b      	ldr	r3, [r3, #24]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d101      	bne.n	800ad08 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800ad04:	2301      	movs	r3, #1
 800ad06:	e3df      	b.n	800b4c8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6a1a      	ldr	r2, [r3, #32]
 800ad0c:	4b81      	ldr	r3, [pc, #516]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f003 0308 	and.w	r3, r3, #8
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d004      	beq.n	800ad22 <HAL_RCC_OscConfig+0x7e>
 800ad18:	4b7e      	ldr	r3, [pc, #504]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad20:	e005      	b.n	800ad2e <HAL_RCC_OscConfig+0x8a>
 800ad22:	4b7c      	ldr	r3, [pc, #496]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800ad24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ad28:	091b      	lsrs	r3, r3, #4
 800ad2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d223      	bcs.n	800ad7a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a1b      	ldr	r3, [r3, #32]
 800ad36:	4618      	mov	r0, r3
 800ad38:	f000 fdf8 	bl	800b92c <RCC_SetFlashLatencyFromMSIRange>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d001      	beq.n	800ad46 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800ad42:	2301      	movs	r3, #1
 800ad44:	e3c0      	b.n	800b4c8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ad46:	4b73      	ldr	r3, [pc, #460]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4a72      	ldr	r2, [pc, #456]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800ad4c:	f043 0308 	orr.w	r3, r3, #8
 800ad50:	6013      	str	r3, [r2, #0]
 800ad52:	4b70      	ldr	r3, [pc, #448]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6a1b      	ldr	r3, [r3, #32]
 800ad5e:	496d      	ldr	r1, [pc, #436]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800ad60:	4313      	orrs	r3, r2
 800ad62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ad64:	4b6b      	ldr	r3, [pc, #428]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	69db      	ldr	r3, [r3, #28]
 800ad70:	021b      	lsls	r3, r3, #8
 800ad72:	4968      	ldr	r1, [pc, #416]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800ad74:	4313      	orrs	r3, r2
 800ad76:	604b      	str	r3, [r1, #4]
 800ad78:	e025      	b.n	800adc6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ad7a:	4b66      	ldr	r3, [pc, #408]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4a65      	ldr	r2, [pc, #404]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800ad80:	f043 0308 	orr.w	r3, r3, #8
 800ad84:	6013      	str	r3, [r2, #0]
 800ad86:	4b63      	ldr	r3, [pc, #396]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6a1b      	ldr	r3, [r3, #32]
 800ad92:	4960      	ldr	r1, [pc, #384]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800ad94:	4313      	orrs	r3, r2
 800ad96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ad98:	4b5e      	ldr	r3, [pc, #376]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	69db      	ldr	r3, [r3, #28]
 800ada4:	021b      	lsls	r3, r3, #8
 800ada6:	495b      	ldr	r1, [pc, #364]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800ada8:	4313      	orrs	r3, r2
 800adaa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800adac:	69bb      	ldr	r3, [r7, #24]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d109      	bne.n	800adc6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6a1b      	ldr	r3, [r3, #32]
 800adb6:	4618      	mov	r0, r3
 800adb8:	f000 fdb8 	bl	800b92c <RCC_SetFlashLatencyFromMSIRange>
 800adbc:	4603      	mov	r3, r0
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d001      	beq.n	800adc6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800adc2:	2301      	movs	r3, #1
 800adc4:	e380      	b.n	800b4c8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800adc6:	f000 fcc1 	bl	800b74c <HAL_RCC_GetSysClockFreq>
 800adca:	4602      	mov	r2, r0
 800adcc:	4b51      	ldr	r3, [pc, #324]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	091b      	lsrs	r3, r3, #4
 800add2:	f003 030f 	and.w	r3, r3, #15
 800add6:	4950      	ldr	r1, [pc, #320]	; (800af18 <HAL_RCC_OscConfig+0x274>)
 800add8:	5ccb      	ldrb	r3, [r1, r3]
 800adda:	f003 031f 	and.w	r3, r3, #31
 800adde:	fa22 f303 	lsr.w	r3, r2, r3
 800ade2:	4a4e      	ldr	r2, [pc, #312]	; (800af1c <HAL_RCC_OscConfig+0x278>)
 800ade4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800ade6:	4b4e      	ldr	r3, [pc, #312]	; (800af20 <HAL_RCC_OscConfig+0x27c>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4618      	mov	r0, r3
 800adec:	f7fc fb4a 	bl	8007484 <HAL_InitTick>
 800adf0:	4603      	mov	r3, r0
 800adf2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800adf4:	7bfb      	ldrb	r3, [r7, #15]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d052      	beq.n	800aea0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800adfa:	7bfb      	ldrb	r3, [r7, #15]
 800adfc:	e364      	b.n	800b4c8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	699b      	ldr	r3, [r3, #24]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d032      	beq.n	800ae6c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800ae06:	4b43      	ldr	r3, [pc, #268]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4a42      	ldr	r2, [pc, #264]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800ae0c:	f043 0301 	orr.w	r3, r3, #1
 800ae10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ae12:	f7fc fb87 	bl	8007524 <HAL_GetTick>
 800ae16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ae18:	e008      	b.n	800ae2c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ae1a:	f7fc fb83 	bl	8007524 <HAL_GetTick>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	1ad3      	subs	r3, r2, r3
 800ae24:	2b02      	cmp	r3, #2
 800ae26:	d901      	bls.n	800ae2c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800ae28:	2303      	movs	r3, #3
 800ae2a:	e34d      	b.n	800b4c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ae2c:	4b39      	ldr	r3, [pc, #228]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f003 0302 	and.w	r3, r3, #2
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d0f0      	beq.n	800ae1a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ae38:	4b36      	ldr	r3, [pc, #216]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a35      	ldr	r2, [pc, #212]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800ae3e:	f043 0308 	orr.w	r3, r3, #8
 800ae42:	6013      	str	r3, [r2, #0]
 800ae44:	4b33      	ldr	r3, [pc, #204]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6a1b      	ldr	r3, [r3, #32]
 800ae50:	4930      	ldr	r1, [pc, #192]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800ae52:	4313      	orrs	r3, r2
 800ae54:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ae56:	4b2f      	ldr	r3, [pc, #188]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	69db      	ldr	r3, [r3, #28]
 800ae62:	021b      	lsls	r3, r3, #8
 800ae64:	492b      	ldr	r1, [pc, #172]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800ae66:	4313      	orrs	r3, r2
 800ae68:	604b      	str	r3, [r1, #4]
 800ae6a:	e01a      	b.n	800aea2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800ae6c:	4b29      	ldr	r3, [pc, #164]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a28      	ldr	r2, [pc, #160]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800ae72:	f023 0301 	bic.w	r3, r3, #1
 800ae76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ae78:	f7fc fb54 	bl	8007524 <HAL_GetTick>
 800ae7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800ae7e:	e008      	b.n	800ae92 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ae80:	f7fc fb50 	bl	8007524 <HAL_GetTick>
 800ae84:	4602      	mov	r2, r0
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	1ad3      	subs	r3, r2, r3
 800ae8a:	2b02      	cmp	r3, #2
 800ae8c:	d901      	bls.n	800ae92 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800ae8e:	2303      	movs	r3, #3
 800ae90:	e31a      	b.n	800b4c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800ae92:	4b20      	ldr	r3, [pc, #128]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f003 0302 	and.w	r3, r3, #2
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d1f0      	bne.n	800ae80 <HAL_RCC_OscConfig+0x1dc>
 800ae9e:	e000      	b.n	800aea2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800aea0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f003 0301 	and.w	r3, r3, #1
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d073      	beq.n	800af96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800aeae:	69bb      	ldr	r3, [r7, #24]
 800aeb0:	2b08      	cmp	r3, #8
 800aeb2:	d005      	beq.n	800aec0 <HAL_RCC_OscConfig+0x21c>
 800aeb4:	69bb      	ldr	r3, [r7, #24]
 800aeb6:	2b0c      	cmp	r3, #12
 800aeb8:	d10e      	bne.n	800aed8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	2b03      	cmp	r3, #3
 800aebe:	d10b      	bne.n	800aed8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aec0:	4b14      	ldr	r3, [pc, #80]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d063      	beq.n	800af94 <HAL_RCC_OscConfig+0x2f0>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d15f      	bne.n	800af94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800aed4:	2301      	movs	r3, #1
 800aed6:	e2f7      	b.n	800b4c8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aee0:	d106      	bne.n	800aef0 <HAL_RCC_OscConfig+0x24c>
 800aee2:	4b0c      	ldr	r3, [pc, #48]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4a0b      	ldr	r2, [pc, #44]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800aee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aeec:	6013      	str	r3, [r2, #0]
 800aeee:	e025      	b.n	800af3c <HAL_RCC_OscConfig+0x298>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aef8:	d114      	bne.n	800af24 <HAL_RCC_OscConfig+0x280>
 800aefa:	4b06      	ldr	r3, [pc, #24]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4a05      	ldr	r2, [pc, #20]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800af00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af04:	6013      	str	r3, [r2, #0]
 800af06:	4b03      	ldr	r3, [pc, #12]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a02      	ldr	r2, [pc, #8]	; (800af14 <HAL_RCC_OscConfig+0x270>)
 800af0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af10:	6013      	str	r3, [r2, #0]
 800af12:	e013      	b.n	800af3c <HAL_RCC_OscConfig+0x298>
 800af14:	40021000 	.word	0x40021000
 800af18:	0801d130 	.word	0x0801d130
 800af1c:	20000004 	.word	0x20000004
 800af20:	20000008 	.word	0x20000008
 800af24:	4ba0      	ldr	r3, [pc, #640]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a9f      	ldr	r2, [pc, #636]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800af2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af2e:	6013      	str	r3, [r2, #0]
 800af30:	4b9d      	ldr	r3, [pc, #628]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a9c      	ldr	r2, [pc, #624]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800af36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d013      	beq.n	800af6c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af44:	f7fc faee 	bl	8007524 <HAL_GetTick>
 800af48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800af4a:	e008      	b.n	800af5e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800af4c:	f7fc faea 	bl	8007524 <HAL_GetTick>
 800af50:	4602      	mov	r2, r0
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	1ad3      	subs	r3, r2, r3
 800af56:	2b64      	cmp	r3, #100	; 0x64
 800af58:	d901      	bls.n	800af5e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800af5a:	2303      	movs	r3, #3
 800af5c:	e2b4      	b.n	800b4c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800af5e:	4b92      	ldr	r3, [pc, #584]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af66:	2b00      	cmp	r3, #0
 800af68:	d0f0      	beq.n	800af4c <HAL_RCC_OscConfig+0x2a8>
 800af6a:	e014      	b.n	800af96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af6c:	f7fc fada 	bl	8007524 <HAL_GetTick>
 800af70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800af72:	e008      	b.n	800af86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800af74:	f7fc fad6 	bl	8007524 <HAL_GetTick>
 800af78:	4602      	mov	r2, r0
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	1ad3      	subs	r3, r2, r3
 800af7e:	2b64      	cmp	r3, #100	; 0x64
 800af80:	d901      	bls.n	800af86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800af82:	2303      	movs	r3, #3
 800af84:	e2a0      	b.n	800b4c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800af86:	4b88      	ldr	r3, [pc, #544]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d1f0      	bne.n	800af74 <HAL_RCC_OscConfig+0x2d0>
 800af92:	e000      	b.n	800af96 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f003 0302 	and.w	r3, r3, #2
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d060      	beq.n	800b064 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800afa2:	69bb      	ldr	r3, [r7, #24]
 800afa4:	2b04      	cmp	r3, #4
 800afa6:	d005      	beq.n	800afb4 <HAL_RCC_OscConfig+0x310>
 800afa8:	69bb      	ldr	r3, [r7, #24]
 800afaa:	2b0c      	cmp	r3, #12
 800afac:	d119      	bne.n	800afe2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	2b02      	cmp	r3, #2
 800afb2:	d116      	bne.n	800afe2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800afb4:	4b7c      	ldr	r3, [pc, #496]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d005      	beq.n	800afcc <HAL_RCC_OscConfig+0x328>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	68db      	ldr	r3, [r3, #12]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d101      	bne.n	800afcc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800afc8:	2301      	movs	r3, #1
 800afca:	e27d      	b.n	800b4c8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800afcc:	4b76      	ldr	r3, [pc, #472]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	691b      	ldr	r3, [r3, #16]
 800afd8:	061b      	lsls	r3, r3, #24
 800afda:	4973      	ldr	r1, [pc, #460]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800afdc:	4313      	orrs	r3, r2
 800afde:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800afe0:	e040      	b.n	800b064 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d023      	beq.n	800b032 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800afea:	4b6f      	ldr	r3, [pc, #444]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	4a6e      	ldr	r2, [pc, #440]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800aff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aff4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aff6:	f7fc fa95 	bl	8007524 <HAL_GetTick>
 800affa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800affc:	e008      	b.n	800b010 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800affe:	f7fc fa91 	bl	8007524 <HAL_GetTick>
 800b002:	4602      	mov	r2, r0
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	1ad3      	subs	r3, r2, r3
 800b008:	2b02      	cmp	r3, #2
 800b00a:	d901      	bls.n	800b010 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800b00c:	2303      	movs	r3, #3
 800b00e:	e25b      	b.n	800b4c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b010:	4b65      	ldr	r3, [pc, #404]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d0f0      	beq.n	800affe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b01c:	4b62      	ldr	r3, [pc, #392]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	691b      	ldr	r3, [r3, #16]
 800b028:	061b      	lsls	r3, r3, #24
 800b02a:	495f      	ldr	r1, [pc, #380]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800b02c:	4313      	orrs	r3, r2
 800b02e:	604b      	str	r3, [r1, #4]
 800b030:	e018      	b.n	800b064 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b032:	4b5d      	ldr	r3, [pc, #372]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a5c      	ldr	r2, [pc, #368]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800b038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b03c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b03e:	f7fc fa71 	bl	8007524 <HAL_GetTick>
 800b042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b044:	e008      	b.n	800b058 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b046:	f7fc fa6d 	bl	8007524 <HAL_GetTick>
 800b04a:	4602      	mov	r2, r0
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	1ad3      	subs	r3, r2, r3
 800b050:	2b02      	cmp	r3, #2
 800b052:	d901      	bls.n	800b058 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800b054:	2303      	movs	r3, #3
 800b056:	e237      	b.n	800b4c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b058:	4b53      	ldr	r3, [pc, #332]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b060:	2b00      	cmp	r3, #0
 800b062:	d1f0      	bne.n	800b046 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f003 0308 	and.w	r3, r3, #8
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d03c      	beq.n	800b0ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	695b      	ldr	r3, [r3, #20]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d01c      	beq.n	800b0b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b078:	4b4b      	ldr	r3, [pc, #300]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800b07a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b07e:	4a4a      	ldr	r2, [pc, #296]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800b080:	f043 0301 	orr.w	r3, r3, #1
 800b084:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b088:	f7fc fa4c 	bl	8007524 <HAL_GetTick>
 800b08c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b08e:	e008      	b.n	800b0a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b090:	f7fc fa48 	bl	8007524 <HAL_GetTick>
 800b094:	4602      	mov	r2, r0
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	1ad3      	subs	r3, r2, r3
 800b09a:	2b02      	cmp	r3, #2
 800b09c:	d901      	bls.n	800b0a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800b09e:	2303      	movs	r3, #3
 800b0a0:	e212      	b.n	800b4c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b0a2:	4b41      	ldr	r3, [pc, #260]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800b0a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b0a8:	f003 0302 	and.w	r3, r3, #2
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d0ef      	beq.n	800b090 <HAL_RCC_OscConfig+0x3ec>
 800b0b0:	e01b      	b.n	800b0ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b0b2:	4b3d      	ldr	r3, [pc, #244]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800b0b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b0b8:	4a3b      	ldr	r2, [pc, #236]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800b0ba:	f023 0301 	bic.w	r3, r3, #1
 800b0be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0c2:	f7fc fa2f 	bl	8007524 <HAL_GetTick>
 800b0c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b0c8:	e008      	b.n	800b0dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b0ca:	f7fc fa2b 	bl	8007524 <HAL_GetTick>
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	1ad3      	subs	r3, r2, r3
 800b0d4:	2b02      	cmp	r3, #2
 800b0d6:	d901      	bls.n	800b0dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800b0d8:	2303      	movs	r3, #3
 800b0da:	e1f5      	b.n	800b4c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b0dc:	4b32      	ldr	r3, [pc, #200]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800b0de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b0e2:	f003 0302 	and.w	r3, r3, #2
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d1ef      	bne.n	800b0ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f003 0304 	and.w	r3, r3, #4
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f000 80a6 	beq.w	800b244 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800b0fc:	4b2a      	ldr	r3, [pc, #168]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800b0fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b104:	2b00      	cmp	r3, #0
 800b106:	d10d      	bne.n	800b124 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b108:	4b27      	ldr	r3, [pc, #156]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800b10a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b10c:	4a26      	ldr	r2, [pc, #152]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800b10e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b112:	6593      	str	r3, [r2, #88]	; 0x58
 800b114:	4b24      	ldr	r3, [pc, #144]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800b116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b11c:	60bb      	str	r3, [r7, #8]
 800b11e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b120:	2301      	movs	r3, #1
 800b122:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b124:	4b21      	ldr	r3, [pc, #132]	; (800b1ac <HAL_RCC_OscConfig+0x508>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d118      	bne.n	800b162 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b130:	4b1e      	ldr	r3, [pc, #120]	; (800b1ac <HAL_RCC_OscConfig+0x508>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	4a1d      	ldr	r2, [pc, #116]	; (800b1ac <HAL_RCC_OscConfig+0x508>)
 800b136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b13a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b13c:	f7fc f9f2 	bl	8007524 <HAL_GetTick>
 800b140:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b142:	e008      	b.n	800b156 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b144:	f7fc f9ee 	bl	8007524 <HAL_GetTick>
 800b148:	4602      	mov	r2, r0
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	1ad3      	subs	r3, r2, r3
 800b14e:	2b02      	cmp	r3, #2
 800b150:	d901      	bls.n	800b156 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800b152:	2303      	movs	r3, #3
 800b154:	e1b8      	b.n	800b4c8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b156:	4b15      	ldr	r3, [pc, #84]	; (800b1ac <HAL_RCC_OscConfig+0x508>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d0f0      	beq.n	800b144 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	2b01      	cmp	r3, #1
 800b168:	d108      	bne.n	800b17c <HAL_RCC_OscConfig+0x4d8>
 800b16a:	4b0f      	ldr	r3, [pc, #60]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800b16c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b170:	4a0d      	ldr	r2, [pc, #52]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800b172:	f043 0301 	orr.w	r3, r3, #1
 800b176:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b17a:	e029      	b.n	800b1d0 <HAL_RCC_OscConfig+0x52c>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	2b05      	cmp	r3, #5
 800b182:	d115      	bne.n	800b1b0 <HAL_RCC_OscConfig+0x50c>
 800b184:	4b08      	ldr	r3, [pc, #32]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800b186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b18a:	4a07      	ldr	r2, [pc, #28]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800b18c:	f043 0304 	orr.w	r3, r3, #4
 800b190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b194:	4b04      	ldr	r3, [pc, #16]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800b196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b19a:	4a03      	ldr	r2, [pc, #12]	; (800b1a8 <HAL_RCC_OscConfig+0x504>)
 800b19c:	f043 0301 	orr.w	r3, r3, #1
 800b1a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b1a4:	e014      	b.n	800b1d0 <HAL_RCC_OscConfig+0x52c>
 800b1a6:	bf00      	nop
 800b1a8:	40021000 	.word	0x40021000
 800b1ac:	40007000 	.word	0x40007000
 800b1b0:	4b9d      	ldr	r3, [pc, #628]	; (800b428 <HAL_RCC_OscConfig+0x784>)
 800b1b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1b6:	4a9c      	ldr	r2, [pc, #624]	; (800b428 <HAL_RCC_OscConfig+0x784>)
 800b1b8:	f023 0301 	bic.w	r3, r3, #1
 800b1bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b1c0:	4b99      	ldr	r3, [pc, #612]	; (800b428 <HAL_RCC_OscConfig+0x784>)
 800b1c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1c6:	4a98      	ldr	r2, [pc, #608]	; (800b428 <HAL_RCC_OscConfig+0x784>)
 800b1c8:	f023 0304 	bic.w	r3, r3, #4
 800b1cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	689b      	ldr	r3, [r3, #8]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d016      	beq.n	800b206 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1d8:	f7fc f9a4 	bl	8007524 <HAL_GetTick>
 800b1dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b1de:	e00a      	b.n	800b1f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b1e0:	f7fc f9a0 	bl	8007524 <HAL_GetTick>
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	1ad3      	subs	r3, r2, r3
 800b1ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d901      	bls.n	800b1f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800b1f2:	2303      	movs	r3, #3
 800b1f4:	e168      	b.n	800b4c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b1f6:	4b8c      	ldr	r3, [pc, #560]	; (800b428 <HAL_RCC_OscConfig+0x784>)
 800b1f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1fc:	f003 0302 	and.w	r3, r3, #2
 800b200:	2b00      	cmp	r3, #0
 800b202:	d0ed      	beq.n	800b1e0 <HAL_RCC_OscConfig+0x53c>
 800b204:	e015      	b.n	800b232 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b206:	f7fc f98d 	bl	8007524 <HAL_GetTick>
 800b20a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b20c:	e00a      	b.n	800b224 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b20e:	f7fc f989 	bl	8007524 <HAL_GetTick>
 800b212:	4602      	mov	r2, r0
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	1ad3      	subs	r3, r2, r3
 800b218:	f241 3288 	movw	r2, #5000	; 0x1388
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d901      	bls.n	800b224 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800b220:	2303      	movs	r3, #3
 800b222:	e151      	b.n	800b4c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b224:	4b80      	ldr	r3, [pc, #512]	; (800b428 <HAL_RCC_OscConfig+0x784>)
 800b226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b22a:	f003 0302 	and.w	r3, r3, #2
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d1ed      	bne.n	800b20e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b232:	7ffb      	ldrb	r3, [r7, #31]
 800b234:	2b01      	cmp	r3, #1
 800b236:	d105      	bne.n	800b244 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b238:	4b7b      	ldr	r3, [pc, #492]	; (800b428 <HAL_RCC_OscConfig+0x784>)
 800b23a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b23c:	4a7a      	ldr	r2, [pc, #488]	; (800b428 <HAL_RCC_OscConfig+0x784>)
 800b23e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b242:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f003 0320 	and.w	r3, r3, #32
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d03c      	beq.n	800b2ca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b254:	2b00      	cmp	r3, #0
 800b256:	d01c      	beq.n	800b292 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b258:	4b73      	ldr	r3, [pc, #460]	; (800b428 <HAL_RCC_OscConfig+0x784>)
 800b25a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b25e:	4a72      	ldr	r2, [pc, #456]	; (800b428 <HAL_RCC_OscConfig+0x784>)
 800b260:	f043 0301 	orr.w	r3, r3, #1
 800b264:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b268:	f7fc f95c 	bl	8007524 <HAL_GetTick>
 800b26c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b26e:	e008      	b.n	800b282 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b270:	f7fc f958 	bl	8007524 <HAL_GetTick>
 800b274:	4602      	mov	r2, r0
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	1ad3      	subs	r3, r2, r3
 800b27a:	2b02      	cmp	r3, #2
 800b27c:	d901      	bls.n	800b282 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800b27e:	2303      	movs	r3, #3
 800b280:	e122      	b.n	800b4c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b282:	4b69      	ldr	r3, [pc, #420]	; (800b428 <HAL_RCC_OscConfig+0x784>)
 800b284:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b288:	f003 0302 	and.w	r3, r3, #2
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d0ef      	beq.n	800b270 <HAL_RCC_OscConfig+0x5cc>
 800b290:	e01b      	b.n	800b2ca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b292:	4b65      	ldr	r3, [pc, #404]	; (800b428 <HAL_RCC_OscConfig+0x784>)
 800b294:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b298:	4a63      	ldr	r2, [pc, #396]	; (800b428 <HAL_RCC_OscConfig+0x784>)
 800b29a:	f023 0301 	bic.w	r3, r3, #1
 800b29e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2a2:	f7fc f93f 	bl	8007524 <HAL_GetTick>
 800b2a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b2a8:	e008      	b.n	800b2bc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b2aa:	f7fc f93b 	bl	8007524 <HAL_GetTick>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	1ad3      	subs	r3, r2, r3
 800b2b4:	2b02      	cmp	r3, #2
 800b2b6:	d901      	bls.n	800b2bc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800b2b8:	2303      	movs	r3, #3
 800b2ba:	e105      	b.n	800b4c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b2bc:	4b5a      	ldr	r3, [pc, #360]	; (800b428 <HAL_RCC_OscConfig+0x784>)
 800b2be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b2c2:	f003 0302 	and.w	r3, r3, #2
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d1ef      	bne.n	800b2aa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	f000 80f9 	beq.w	800b4c6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2d8:	2b02      	cmp	r3, #2
 800b2da:	f040 80cf 	bne.w	800b47c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800b2de:	4b52      	ldr	r3, [pc, #328]	; (800b428 <HAL_RCC_OscConfig+0x784>)
 800b2e0:	68db      	ldr	r3, [r3, #12]
 800b2e2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	f003 0203 	and.w	r2, r3, #3
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d12c      	bne.n	800b34c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2fc:	3b01      	subs	r3, #1
 800b2fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b300:	429a      	cmp	r2, r3
 800b302:	d123      	bne.n	800b34c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b30e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b310:	429a      	cmp	r2, r3
 800b312:	d11b      	bne.n	800b34c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b31e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b320:	429a      	cmp	r2, r3
 800b322:	d113      	bne.n	800b34c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b32e:	085b      	lsrs	r3, r3, #1
 800b330:	3b01      	subs	r3, #1
 800b332:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b334:	429a      	cmp	r2, r3
 800b336:	d109      	bne.n	800b34c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b342:	085b      	lsrs	r3, r3, #1
 800b344:	3b01      	subs	r3, #1
 800b346:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b348:	429a      	cmp	r2, r3
 800b34a:	d071      	beq.n	800b430 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b34c:	69bb      	ldr	r3, [r7, #24]
 800b34e:	2b0c      	cmp	r3, #12
 800b350:	d068      	beq.n	800b424 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b352:	4b35      	ldr	r3, [pc, #212]	; (800b428 <HAL_RCC_OscConfig+0x784>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d105      	bne.n	800b36a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800b35e:	4b32      	ldr	r3, [pc, #200]	; (800b428 <HAL_RCC_OscConfig+0x784>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b366:	2b00      	cmp	r3, #0
 800b368:	d001      	beq.n	800b36e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800b36a:	2301      	movs	r3, #1
 800b36c:	e0ac      	b.n	800b4c8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b36e:	4b2e      	ldr	r3, [pc, #184]	; (800b428 <HAL_RCC_OscConfig+0x784>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4a2d      	ldr	r2, [pc, #180]	; (800b428 <HAL_RCC_OscConfig+0x784>)
 800b374:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b378:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b37a:	f7fc f8d3 	bl	8007524 <HAL_GetTick>
 800b37e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b380:	e008      	b.n	800b394 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b382:	f7fc f8cf 	bl	8007524 <HAL_GetTick>
 800b386:	4602      	mov	r2, r0
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	1ad3      	subs	r3, r2, r3
 800b38c:	2b02      	cmp	r3, #2
 800b38e:	d901      	bls.n	800b394 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800b390:	2303      	movs	r3, #3
 800b392:	e099      	b.n	800b4c8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b394:	4b24      	ldr	r3, [pc, #144]	; (800b428 <HAL_RCC_OscConfig+0x784>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d1f0      	bne.n	800b382 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b3a0:	4b21      	ldr	r3, [pc, #132]	; (800b428 <HAL_RCC_OscConfig+0x784>)
 800b3a2:	68da      	ldr	r2, [r3, #12]
 800b3a4:	4b21      	ldr	r3, [pc, #132]	; (800b42c <HAL_RCC_OscConfig+0x788>)
 800b3a6:	4013      	ands	r3, r2
 800b3a8:	687a      	ldr	r2, [r7, #4]
 800b3aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b3b0:	3a01      	subs	r2, #1
 800b3b2:	0112      	lsls	r2, r2, #4
 800b3b4:	4311      	orrs	r1, r2
 800b3b6:	687a      	ldr	r2, [r7, #4]
 800b3b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b3ba:	0212      	lsls	r2, r2, #8
 800b3bc:	4311      	orrs	r1, r2
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b3c2:	0852      	lsrs	r2, r2, #1
 800b3c4:	3a01      	subs	r2, #1
 800b3c6:	0552      	lsls	r2, r2, #21
 800b3c8:	4311      	orrs	r1, r2
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b3ce:	0852      	lsrs	r2, r2, #1
 800b3d0:	3a01      	subs	r2, #1
 800b3d2:	0652      	lsls	r2, r2, #25
 800b3d4:	4311      	orrs	r1, r2
 800b3d6:	687a      	ldr	r2, [r7, #4]
 800b3d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b3da:	06d2      	lsls	r2, r2, #27
 800b3dc:	430a      	orrs	r2, r1
 800b3de:	4912      	ldr	r1, [pc, #72]	; (800b428 <HAL_RCC_OscConfig+0x784>)
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b3e4:	4b10      	ldr	r3, [pc, #64]	; (800b428 <HAL_RCC_OscConfig+0x784>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4a0f      	ldr	r2, [pc, #60]	; (800b428 <HAL_RCC_OscConfig+0x784>)
 800b3ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b3ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b3f0:	4b0d      	ldr	r3, [pc, #52]	; (800b428 <HAL_RCC_OscConfig+0x784>)
 800b3f2:	68db      	ldr	r3, [r3, #12]
 800b3f4:	4a0c      	ldr	r2, [pc, #48]	; (800b428 <HAL_RCC_OscConfig+0x784>)
 800b3f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b3fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b3fc:	f7fc f892 	bl	8007524 <HAL_GetTick>
 800b400:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b402:	e008      	b.n	800b416 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b404:	f7fc f88e 	bl	8007524 <HAL_GetTick>
 800b408:	4602      	mov	r2, r0
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	1ad3      	subs	r3, r2, r3
 800b40e:	2b02      	cmp	r3, #2
 800b410:	d901      	bls.n	800b416 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800b412:	2303      	movs	r3, #3
 800b414:	e058      	b.n	800b4c8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b416:	4b04      	ldr	r3, [pc, #16]	; (800b428 <HAL_RCC_OscConfig+0x784>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d0f0      	beq.n	800b404 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b422:	e050      	b.n	800b4c6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b424:	2301      	movs	r3, #1
 800b426:	e04f      	b.n	800b4c8 <HAL_RCC_OscConfig+0x824>
 800b428:	40021000 	.word	0x40021000
 800b42c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b430:	4b27      	ldr	r3, [pc, #156]	; (800b4d0 <HAL_RCC_OscConfig+0x82c>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d144      	bne.n	800b4c6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b43c:	4b24      	ldr	r3, [pc, #144]	; (800b4d0 <HAL_RCC_OscConfig+0x82c>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a23      	ldr	r2, [pc, #140]	; (800b4d0 <HAL_RCC_OscConfig+0x82c>)
 800b442:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b446:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b448:	4b21      	ldr	r3, [pc, #132]	; (800b4d0 <HAL_RCC_OscConfig+0x82c>)
 800b44a:	68db      	ldr	r3, [r3, #12]
 800b44c:	4a20      	ldr	r2, [pc, #128]	; (800b4d0 <HAL_RCC_OscConfig+0x82c>)
 800b44e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b452:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b454:	f7fc f866 	bl	8007524 <HAL_GetTick>
 800b458:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b45a:	e008      	b.n	800b46e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b45c:	f7fc f862 	bl	8007524 <HAL_GetTick>
 800b460:	4602      	mov	r2, r0
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	1ad3      	subs	r3, r2, r3
 800b466:	2b02      	cmp	r3, #2
 800b468:	d901      	bls.n	800b46e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800b46a:	2303      	movs	r3, #3
 800b46c:	e02c      	b.n	800b4c8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b46e:	4b18      	ldr	r3, [pc, #96]	; (800b4d0 <HAL_RCC_OscConfig+0x82c>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b476:	2b00      	cmp	r3, #0
 800b478:	d0f0      	beq.n	800b45c <HAL_RCC_OscConfig+0x7b8>
 800b47a:	e024      	b.n	800b4c6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b47c:	69bb      	ldr	r3, [r7, #24]
 800b47e:	2b0c      	cmp	r3, #12
 800b480:	d01f      	beq.n	800b4c2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b482:	4b13      	ldr	r3, [pc, #76]	; (800b4d0 <HAL_RCC_OscConfig+0x82c>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4a12      	ldr	r2, [pc, #72]	; (800b4d0 <HAL_RCC_OscConfig+0x82c>)
 800b488:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b48c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b48e:	f7fc f849 	bl	8007524 <HAL_GetTick>
 800b492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b494:	e008      	b.n	800b4a8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b496:	f7fc f845 	bl	8007524 <HAL_GetTick>
 800b49a:	4602      	mov	r2, r0
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	1ad3      	subs	r3, r2, r3
 800b4a0:	2b02      	cmp	r3, #2
 800b4a2:	d901      	bls.n	800b4a8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800b4a4:	2303      	movs	r3, #3
 800b4a6:	e00f      	b.n	800b4c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b4a8:	4b09      	ldr	r3, [pc, #36]	; (800b4d0 <HAL_RCC_OscConfig+0x82c>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d1f0      	bne.n	800b496 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800b4b4:	4b06      	ldr	r3, [pc, #24]	; (800b4d0 <HAL_RCC_OscConfig+0x82c>)
 800b4b6:	68da      	ldr	r2, [r3, #12]
 800b4b8:	4905      	ldr	r1, [pc, #20]	; (800b4d0 <HAL_RCC_OscConfig+0x82c>)
 800b4ba:	4b06      	ldr	r3, [pc, #24]	; (800b4d4 <HAL_RCC_OscConfig+0x830>)
 800b4bc:	4013      	ands	r3, r2
 800b4be:	60cb      	str	r3, [r1, #12]
 800b4c0:	e001      	b.n	800b4c6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	e000      	b.n	800b4c8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800b4c6:	2300      	movs	r3, #0
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3720      	adds	r7, #32
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	40021000 	.word	0x40021000
 800b4d4:	feeefffc 	.word	0xfeeefffc

0800b4d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b086      	sub	sp, #24
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d101      	bne.n	800b4f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	e11d      	b.n	800b72c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b4f0:	4b90      	ldr	r3, [pc, #576]	; (800b734 <HAL_RCC_ClockConfig+0x25c>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f003 030f 	and.w	r3, r3, #15
 800b4f8:	683a      	ldr	r2, [r7, #0]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d910      	bls.n	800b520 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b4fe:	4b8d      	ldr	r3, [pc, #564]	; (800b734 <HAL_RCC_ClockConfig+0x25c>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f023 020f 	bic.w	r2, r3, #15
 800b506:	498b      	ldr	r1, [pc, #556]	; (800b734 <HAL_RCC_ClockConfig+0x25c>)
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	4313      	orrs	r3, r2
 800b50c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b50e:	4b89      	ldr	r3, [pc, #548]	; (800b734 <HAL_RCC_ClockConfig+0x25c>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f003 030f 	and.w	r3, r3, #15
 800b516:	683a      	ldr	r2, [r7, #0]
 800b518:	429a      	cmp	r2, r3
 800b51a:	d001      	beq.n	800b520 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b51c:	2301      	movs	r3, #1
 800b51e:	e105      	b.n	800b72c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f003 0302 	and.w	r3, r3, #2
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d010      	beq.n	800b54e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	689a      	ldr	r2, [r3, #8]
 800b530:	4b81      	ldr	r3, [pc, #516]	; (800b738 <HAL_RCC_ClockConfig+0x260>)
 800b532:	689b      	ldr	r3, [r3, #8]
 800b534:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b538:	429a      	cmp	r2, r3
 800b53a:	d908      	bls.n	800b54e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b53c:	4b7e      	ldr	r3, [pc, #504]	; (800b738 <HAL_RCC_ClockConfig+0x260>)
 800b53e:	689b      	ldr	r3, [r3, #8]
 800b540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	497b      	ldr	r1, [pc, #492]	; (800b738 <HAL_RCC_ClockConfig+0x260>)
 800b54a:	4313      	orrs	r3, r2
 800b54c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f003 0301 	and.w	r3, r3, #1
 800b556:	2b00      	cmp	r3, #0
 800b558:	d079      	beq.n	800b64e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	2b03      	cmp	r3, #3
 800b560:	d11e      	bne.n	800b5a0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b562:	4b75      	ldr	r3, [pc, #468]	; (800b738 <HAL_RCC_ClockConfig+0x260>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d101      	bne.n	800b572 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800b56e:	2301      	movs	r3, #1
 800b570:	e0dc      	b.n	800b72c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800b572:	f000 fa35 	bl	800b9e0 <RCC_GetSysClockFreqFromPLLSource>
 800b576:	4603      	mov	r3, r0
 800b578:	4a70      	ldr	r2, [pc, #448]	; (800b73c <HAL_RCC_ClockConfig+0x264>)
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d946      	bls.n	800b60c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800b57e:	4b6e      	ldr	r3, [pc, #440]	; (800b738 <HAL_RCC_ClockConfig+0x260>)
 800b580:	689b      	ldr	r3, [r3, #8]
 800b582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b586:	2b00      	cmp	r3, #0
 800b588:	d140      	bne.n	800b60c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b58a:	4b6b      	ldr	r3, [pc, #428]	; (800b738 <HAL_RCC_ClockConfig+0x260>)
 800b58c:	689b      	ldr	r3, [r3, #8]
 800b58e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b592:	4a69      	ldr	r2, [pc, #420]	; (800b738 <HAL_RCC_ClockConfig+0x260>)
 800b594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b598:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b59a:	2380      	movs	r3, #128	; 0x80
 800b59c:	617b      	str	r3, [r7, #20]
 800b59e:	e035      	b.n	800b60c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	2b02      	cmp	r3, #2
 800b5a6:	d107      	bne.n	800b5b8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b5a8:	4b63      	ldr	r3, [pc, #396]	; (800b738 <HAL_RCC_ClockConfig+0x260>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d115      	bne.n	800b5e0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	e0b9      	b.n	800b72c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	685b      	ldr	r3, [r3, #4]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d107      	bne.n	800b5d0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b5c0:	4b5d      	ldr	r3, [pc, #372]	; (800b738 <HAL_RCC_ClockConfig+0x260>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f003 0302 	and.w	r3, r3, #2
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d109      	bne.n	800b5e0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	e0ad      	b.n	800b72c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b5d0:	4b59      	ldr	r3, [pc, #356]	; (800b738 <HAL_RCC_ClockConfig+0x260>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d101      	bne.n	800b5e0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	e0a5      	b.n	800b72c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800b5e0:	f000 f8b4 	bl	800b74c <HAL_RCC_GetSysClockFreq>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	4a55      	ldr	r2, [pc, #340]	; (800b73c <HAL_RCC_ClockConfig+0x264>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d90f      	bls.n	800b60c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800b5ec:	4b52      	ldr	r3, [pc, #328]	; (800b738 <HAL_RCC_ClockConfig+0x260>)
 800b5ee:	689b      	ldr	r3, [r3, #8]
 800b5f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d109      	bne.n	800b60c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b5f8:	4b4f      	ldr	r3, [pc, #316]	; (800b738 <HAL_RCC_ClockConfig+0x260>)
 800b5fa:	689b      	ldr	r3, [r3, #8]
 800b5fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b600:	4a4d      	ldr	r2, [pc, #308]	; (800b738 <HAL_RCC_ClockConfig+0x260>)
 800b602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b606:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b608:	2380      	movs	r3, #128	; 0x80
 800b60a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b60c:	4b4a      	ldr	r3, [pc, #296]	; (800b738 <HAL_RCC_ClockConfig+0x260>)
 800b60e:	689b      	ldr	r3, [r3, #8]
 800b610:	f023 0203 	bic.w	r2, r3, #3
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	4947      	ldr	r1, [pc, #284]	; (800b738 <HAL_RCC_ClockConfig+0x260>)
 800b61a:	4313      	orrs	r3, r2
 800b61c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b61e:	f7fb ff81 	bl	8007524 <HAL_GetTick>
 800b622:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b624:	e00a      	b.n	800b63c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b626:	f7fb ff7d 	bl	8007524 <HAL_GetTick>
 800b62a:	4602      	mov	r2, r0
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	1ad3      	subs	r3, r2, r3
 800b630:	f241 3288 	movw	r2, #5000	; 0x1388
 800b634:	4293      	cmp	r3, r2
 800b636:	d901      	bls.n	800b63c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800b638:	2303      	movs	r3, #3
 800b63a:	e077      	b.n	800b72c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b63c:	4b3e      	ldr	r3, [pc, #248]	; (800b738 <HAL_RCC_ClockConfig+0x260>)
 800b63e:	689b      	ldr	r3, [r3, #8]
 800b640:	f003 020c 	and.w	r2, r3, #12
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	685b      	ldr	r3, [r3, #4]
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d1eb      	bne.n	800b626 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	2b80      	cmp	r3, #128	; 0x80
 800b652:	d105      	bne.n	800b660 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b654:	4b38      	ldr	r3, [pc, #224]	; (800b738 <HAL_RCC_ClockConfig+0x260>)
 800b656:	689b      	ldr	r3, [r3, #8]
 800b658:	4a37      	ldr	r2, [pc, #220]	; (800b738 <HAL_RCC_ClockConfig+0x260>)
 800b65a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b65e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f003 0302 	and.w	r3, r3, #2
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d010      	beq.n	800b68e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	689a      	ldr	r2, [r3, #8]
 800b670:	4b31      	ldr	r3, [pc, #196]	; (800b738 <HAL_RCC_ClockConfig+0x260>)
 800b672:	689b      	ldr	r3, [r3, #8]
 800b674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b678:	429a      	cmp	r2, r3
 800b67a:	d208      	bcs.n	800b68e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b67c:	4b2e      	ldr	r3, [pc, #184]	; (800b738 <HAL_RCC_ClockConfig+0x260>)
 800b67e:	689b      	ldr	r3, [r3, #8]
 800b680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	689b      	ldr	r3, [r3, #8]
 800b688:	492b      	ldr	r1, [pc, #172]	; (800b738 <HAL_RCC_ClockConfig+0x260>)
 800b68a:	4313      	orrs	r3, r2
 800b68c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b68e:	4b29      	ldr	r3, [pc, #164]	; (800b734 <HAL_RCC_ClockConfig+0x25c>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f003 030f 	and.w	r3, r3, #15
 800b696:	683a      	ldr	r2, [r7, #0]
 800b698:	429a      	cmp	r2, r3
 800b69a:	d210      	bcs.n	800b6be <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b69c:	4b25      	ldr	r3, [pc, #148]	; (800b734 <HAL_RCC_ClockConfig+0x25c>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f023 020f 	bic.w	r2, r3, #15
 800b6a4:	4923      	ldr	r1, [pc, #140]	; (800b734 <HAL_RCC_ClockConfig+0x25c>)
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b6ac:	4b21      	ldr	r3, [pc, #132]	; (800b734 <HAL_RCC_ClockConfig+0x25c>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f003 030f 	and.w	r3, r3, #15
 800b6b4:	683a      	ldr	r2, [r7, #0]
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d001      	beq.n	800b6be <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	e036      	b.n	800b72c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f003 0304 	and.w	r3, r3, #4
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d008      	beq.n	800b6dc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b6ca:	4b1b      	ldr	r3, [pc, #108]	; (800b738 <HAL_RCC_ClockConfig+0x260>)
 800b6cc:	689b      	ldr	r3, [r3, #8]
 800b6ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	68db      	ldr	r3, [r3, #12]
 800b6d6:	4918      	ldr	r1, [pc, #96]	; (800b738 <HAL_RCC_ClockConfig+0x260>)
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f003 0308 	and.w	r3, r3, #8
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d009      	beq.n	800b6fc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b6e8:	4b13      	ldr	r3, [pc, #76]	; (800b738 <HAL_RCC_ClockConfig+0x260>)
 800b6ea:	689b      	ldr	r3, [r3, #8]
 800b6ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	691b      	ldr	r3, [r3, #16]
 800b6f4:	00db      	lsls	r3, r3, #3
 800b6f6:	4910      	ldr	r1, [pc, #64]	; (800b738 <HAL_RCC_ClockConfig+0x260>)
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b6fc:	f000 f826 	bl	800b74c <HAL_RCC_GetSysClockFreq>
 800b700:	4602      	mov	r2, r0
 800b702:	4b0d      	ldr	r3, [pc, #52]	; (800b738 <HAL_RCC_ClockConfig+0x260>)
 800b704:	689b      	ldr	r3, [r3, #8]
 800b706:	091b      	lsrs	r3, r3, #4
 800b708:	f003 030f 	and.w	r3, r3, #15
 800b70c:	490c      	ldr	r1, [pc, #48]	; (800b740 <HAL_RCC_ClockConfig+0x268>)
 800b70e:	5ccb      	ldrb	r3, [r1, r3]
 800b710:	f003 031f 	and.w	r3, r3, #31
 800b714:	fa22 f303 	lsr.w	r3, r2, r3
 800b718:	4a0a      	ldr	r2, [pc, #40]	; (800b744 <HAL_RCC_ClockConfig+0x26c>)
 800b71a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b71c:	4b0a      	ldr	r3, [pc, #40]	; (800b748 <HAL_RCC_ClockConfig+0x270>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4618      	mov	r0, r3
 800b722:	f7fb feaf 	bl	8007484 <HAL_InitTick>
 800b726:	4603      	mov	r3, r0
 800b728:	73fb      	strb	r3, [r7, #15]

  return status;
 800b72a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3718      	adds	r7, #24
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}
 800b734:	40022000 	.word	0x40022000
 800b738:	40021000 	.word	0x40021000
 800b73c:	04c4b400 	.word	0x04c4b400
 800b740:	0801d130 	.word	0x0801d130
 800b744:	20000004 	.word	0x20000004
 800b748:	20000008 	.word	0x20000008

0800b74c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b089      	sub	sp, #36	; 0x24
 800b750:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800b752:	2300      	movs	r3, #0
 800b754:	61fb      	str	r3, [r7, #28]
 800b756:	2300      	movs	r3, #0
 800b758:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b75a:	4b3e      	ldr	r3, [pc, #248]	; (800b854 <HAL_RCC_GetSysClockFreq+0x108>)
 800b75c:	689b      	ldr	r3, [r3, #8]
 800b75e:	f003 030c 	and.w	r3, r3, #12
 800b762:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b764:	4b3b      	ldr	r3, [pc, #236]	; (800b854 <HAL_RCC_GetSysClockFreq+0x108>)
 800b766:	68db      	ldr	r3, [r3, #12]
 800b768:	f003 0303 	and.w	r3, r3, #3
 800b76c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d005      	beq.n	800b780 <HAL_RCC_GetSysClockFreq+0x34>
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	2b0c      	cmp	r3, #12
 800b778:	d121      	bne.n	800b7be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	d11e      	bne.n	800b7be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b780:	4b34      	ldr	r3, [pc, #208]	; (800b854 <HAL_RCC_GetSysClockFreq+0x108>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f003 0308 	and.w	r3, r3, #8
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d107      	bne.n	800b79c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b78c:	4b31      	ldr	r3, [pc, #196]	; (800b854 <HAL_RCC_GetSysClockFreq+0x108>)
 800b78e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b792:	0a1b      	lsrs	r3, r3, #8
 800b794:	f003 030f 	and.w	r3, r3, #15
 800b798:	61fb      	str	r3, [r7, #28]
 800b79a:	e005      	b.n	800b7a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b79c:	4b2d      	ldr	r3, [pc, #180]	; (800b854 <HAL_RCC_GetSysClockFreq+0x108>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	091b      	lsrs	r3, r3, #4
 800b7a2:	f003 030f 	and.w	r3, r3, #15
 800b7a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b7a8:	4a2b      	ldr	r2, [pc, #172]	; (800b858 <HAL_RCC_GetSysClockFreq+0x10c>)
 800b7aa:	69fb      	ldr	r3, [r7, #28]
 800b7ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d10d      	bne.n	800b7d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b7b8:	69fb      	ldr	r3, [r7, #28]
 800b7ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b7bc:	e00a      	b.n	800b7d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	2b04      	cmp	r3, #4
 800b7c2:	d102      	bne.n	800b7ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b7c4:	4b25      	ldr	r3, [pc, #148]	; (800b85c <HAL_RCC_GetSysClockFreq+0x110>)
 800b7c6:	61bb      	str	r3, [r7, #24]
 800b7c8:	e004      	b.n	800b7d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	2b08      	cmp	r3, #8
 800b7ce:	d101      	bne.n	800b7d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b7d0:	4b23      	ldr	r3, [pc, #140]	; (800b860 <HAL_RCC_GetSysClockFreq+0x114>)
 800b7d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	2b0c      	cmp	r3, #12
 800b7d8:	d134      	bne.n	800b844 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b7da:	4b1e      	ldr	r3, [pc, #120]	; (800b854 <HAL_RCC_GetSysClockFreq+0x108>)
 800b7dc:	68db      	ldr	r3, [r3, #12]
 800b7de:	f003 0303 	and.w	r3, r3, #3
 800b7e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	2b02      	cmp	r3, #2
 800b7e8:	d003      	beq.n	800b7f2 <HAL_RCC_GetSysClockFreq+0xa6>
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	2b03      	cmp	r3, #3
 800b7ee:	d003      	beq.n	800b7f8 <HAL_RCC_GetSysClockFreq+0xac>
 800b7f0:	e005      	b.n	800b7fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800b7f2:	4b1a      	ldr	r3, [pc, #104]	; (800b85c <HAL_RCC_GetSysClockFreq+0x110>)
 800b7f4:	617b      	str	r3, [r7, #20]
      break;
 800b7f6:	e005      	b.n	800b804 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800b7f8:	4b19      	ldr	r3, [pc, #100]	; (800b860 <HAL_RCC_GetSysClockFreq+0x114>)
 800b7fa:	617b      	str	r3, [r7, #20]
      break;
 800b7fc:	e002      	b.n	800b804 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800b7fe:	69fb      	ldr	r3, [r7, #28]
 800b800:	617b      	str	r3, [r7, #20]
      break;
 800b802:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b804:	4b13      	ldr	r3, [pc, #76]	; (800b854 <HAL_RCC_GetSysClockFreq+0x108>)
 800b806:	68db      	ldr	r3, [r3, #12]
 800b808:	091b      	lsrs	r3, r3, #4
 800b80a:	f003 030f 	and.w	r3, r3, #15
 800b80e:	3301      	adds	r3, #1
 800b810:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b812:	4b10      	ldr	r3, [pc, #64]	; (800b854 <HAL_RCC_GetSysClockFreq+0x108>)
 800b814:	68db      	ldr	r3, [r3, #12]
 800b816:	0a1b      	lsrs	r3, r3, #8
 800b818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b81c:	697a      	ldr	r2, [r7, #20]
 800b81e:	fb03 f202 	mul.w	r2, r3, r2
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	fbb2 f3f3 	udiv	r3, r2, r3
 800b828:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b82a:	4b0a      	ldr	r3, [pc, #40]	; (800b854 <HAL_RCC_GetSysClockFreq+0x108>)
 800b82c:	68db      	ldr	r3, [r3, #12]
 800b82e:	0e5b      	lsrs	r3, r3, #25
 800b830:	f003 0303 	and.w	r3, r3, #3
 800b834:	3301      	adds	r3, #1
 800b836:	005b      	lsls	r3, r3, #1
 800b838:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800b83a:	697a      	ldr	r2, [r7, #20]
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b842:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800b844:	69bb      	ldr	r3, [r7, #24]
}
 800b846:	4618      	mov	r0, r3
 800b848:	3724      	adds	r7, #36	; 0x24
 800b84a:	46bd      	mov	sp, r7
 800b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b850:	4770      	bx	lr
 800b852:	bf00      	nop
 800b854:	40021000 	.word	0x40021000
 800b858:	0801d148 	.word	0x0801d148
 800b85c:	00f42400 	.word	0x00f42400
 800b860:	007a1200 	.word	0x007a1200

0800b864 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b864:	b480      	push	{r7}
 800b866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b868:	4b03      	ldr	r3, [pc, #12]	; (800b878 <HAL_RCC_GetHCLKFreq+0x14>)
 800b86a:	681b      	ldr	r3, [r3, #0]
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr
 800b876:	bf00      	nop
 800b878:	20000004 	.word	0x20000004

0800b87c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b880:	f7ff fff0 	bl	800b864 <HAL_RCC_GetHCLKFreq>
 800b884:	4602      	mov	r2, r0
 800b886:	4b06      	ldr	r3, [pc, #24]	; (800b8a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b888:	689b      	ldr	r3, [r3, #8]
 800b88a:	0a1b      	lsrs	r3, r3, #8
 800b88c:	f003 0307 	and.w	r3, r3, #7
 800b890:	4904      	ldr	r1, [pc, #16]	; (800b8a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b892:	5ccb      	ldrb	r3, [r1, r3]
 800b894:	f003 031f 	and.w	r3, r3, #31
 800b898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	bd80      	pop	{r7, pc}
 800b8a0:	40021000 	.word	0x40021000
 800b8a4:	0801d140 	.word	0x0801d140

0800b8a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b8ac:	f7ff ffda 	bl	800b864 <HAL_RCC_GetHCLKFreq>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	4b06      	ldr	r3, [pc, #24]	; (800b8cc <HAL_RCC_GetPCLK2Freq+0x24>)
 800b8b4:	689b      	ldr	r3, [r3, #8]
 800b8b6:	0adb      	lsrs	r3, r3, #11
 800b8b8:	f003 0307 	and.w	r3, r3, #7
 800b8bc:	4904      	ldr	r1, [pc, #16]	; (800b8d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b8be:	5ccb      	ldrb	r3, [r1, r3]
 800b8c0:	f003 031f 	and.w	r3, r3, #31
 800b8c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	bd80      	pop	{r7, pc}
 800b8cc:	40021000 	.word	0x40021000
 800b8d0:	0801d140 	.word	0x0801d140

0800b8d4 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800b8d8:	4b05      	ldr	r3, [pc, #20]	; (800b8f0 <HAL_RCC_EnableCSS+0x1c>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4a04      	ldr	r2, [pc, #16]	; (800b8f0 <HAL_RCC_EnableCSS+0x1c>)
 800b8de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b8e2:	6013      	str	r3, [r2, #0]
}
 800b8e4:	bf00      	nop
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ec:	4770      	bx	lr
 800b8ee:	bf00      	nop
 800b8f0:	40021000 	.word	0x40021000

0800b8f4 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800b8f8:	4b07      	ldr	r3, [pc, #28]	; (800b918 <HAL_RCC_NMI_IRQHandler+0x24>)
 800b8fa:	69db      	ldr	r3, [r3, #28]
 800b8fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b904:	d105      	bne.n	800b912 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800b906:	f000 f809 	bl	800b91c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800b90a:	4b03      	ldr	r3, [pc, #12]	; (800b918 <HAL_RCC_NMI_IRQHandler+0x24>)
 800b90c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b910:	621a      	str	r2, [r3, #32]
  }
}
 800b912:	bf00      	nop
 800b914:	bd80      	pop	{r7, pc}
 800b916:	bf00      	nop
 800b918:	40021000 	.word	0x40021000

0800b91c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800b91c:	b480      	push	{r7}
 800b91e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800b920:	bf00      	nop
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr
	...

0800b92c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b086      	sub	sp, #24
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b934:	2300      	movs	r3, #0
 800b936:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b938:	4b27      	ldr	r3, [pc, #156]	; (800b9d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b93a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b93c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b940:	2b00      	cmp	r3, #0
 800b942:	d003      	beq.n	800b94c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b944:	f7ff f8da 	bl	800aafc <HAL_PWREx_GetVoltageRange>
 800b948:	6178      	str	r0, [r7, #20]
 800b94a:	e014      	b.n	800b976 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b94c:	4b22      	ldr	r3, [pc, #136]	; (800b9d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b94e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b950:	4a21      	ldr	r2, [pc, #132]	; (800b9d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b956:	6593      	str	r3, [r2, #88]	; 0x58
 800b958:	4b1f      	ldr	r3, [pc, #124]	; (800b9d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b95a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b95c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b960:	60fb      	str	r3, [r7, #12]
 800b962:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b964:	f7ff f8ca 	bl	800aafc <HAL_PWREx_GetVoltageRange>
 800b968:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b96a:	4b1b      	ldr	r3, [pc, #108]	; (800b9d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b96c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b96e:	4a1a      	ldr	r2, [pc, #104]	; (800b9d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b974:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b97c:	d10b      	bne.n	800b996 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2b80      	cmp	r3, #128	; 0x80
 800b982:	d913      	bls.n	800b9ac <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2ba0      	cmp	r3, #160	; 0xa0
 800b988:	d902      	bls.n	800b990 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b98a:	2302      	movs	r3, #2
 800b98c:	613b      	str	r3, [r7, #16]
 800b98e:	e00d      	b.n	800b9ac <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b990:	2301      	movs	r3, #1
 800b992:	613b      	str	r3, [r7, #16]
 800b994:	e00a      	b.n	800b9ac <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2b7f      	cmp	r3, #127	; 0x7f
 800b99a:	d902      	bls.n	800b9a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800b99c:	2302      	movs	r3, #2
 800b99e:	613b      	str	r3, [r7, #16]
 800b9a0:	e004      	b.n	800b9ac <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2b70      	cmp	r3, #112	; 0x70
 800b9a6:	d101      	bne.n	800b9ac <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b9ac:	4b0b      	ldr	r3, [pc, #44]	; (800b9dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f023 020f 	bic.w	r2, r3, #15
 800b9b4:	4909      	ldr	r1, [pc, #36]	; (800b9dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b9bc:	4b07      	ldr	r3, [pc, #28]	; (800b9dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f003 030f 	and.w	r3, r3, #15
 800b9c4:	693a      	ldr	r2, [r7, #16]
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d001      	beq.n	800b9ce <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	e000      	b.n	800b9d0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800b9ce:	2300      	movs	r3, #0
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3718      	adds	r7, #24
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}
 800b9d8:	40021000 	.word	0x40021000
 800b9dc:	40022000 	.word	0x40022000

0800b9e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b087      	sub	sp, #28
 800b9e4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b9e6:	4b2d      	ldr	r3, [pc, #180]	; (800ba9c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800b9e8:	68db      	ldr	r3, [r3, #12]
 800b9ea:	f003 0303 	and.w	r3, r3, #3
 800b9ee:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2b03      	cmp	r3, #3
 800b9f4:	d00b      	beq.n	800ba0e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2b03      	cmp	r3, #3
 800b9fa:	d825      	bhi.n	800ba48 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2b01      	cmp	r3, #1
 800ba00:	d008      	beq.n	800ba14 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2b02      	cmp	r3, #2
 800ba06:	d11f      	bne.n	800ba48 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800ba08:	4b25      	ldr	r3, [pc, #148]	; (800baa0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800ba0a:	613b      	str	r3, [r7, #16]
    break;
 800ba0c:	e01f      	b.n	800ba4e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800ba0e:	4b25      	ldr	r3, [pc, #148]	; (800baa4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800ba10:	613b      	str	r3, [r7, #16]
    break;
 800ba12:	e01c      	b.n	800ba4e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800ba14:	4b21      	ldr	r3, [pc, #132]	; (800ba9c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f003 0308 	and.w	r3, r3, #8
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d107      	bne.n	800ba30 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800ba20:	4b1e      	ldr	r3, [pc, #120]	; (800ba9c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800ba22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba26:	0a1b      	lsrs	r3, r3, #8
 800ba28:	f003 030f 	and.w	r3, r3, #15
 800ba2c:	617b      	str	r3, [r7, #20]
 800ba2e:	e005      	b.n	800ba3c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800ba30:	4b1a      	ldr	r3, [pc, #104]	; (800ba9c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	091b      	lsrs	r3, r3, #4
 800ba36:	f003 030f 	and.w	r3, r3, #15
 800ba3a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800ba3c:	4a1a      	ldr	r2, [pc, #104]	; (800baa8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba44:	613b      	str	r3, [r7, #16]
    break;
 800ba46:	e002      	b.n	800ba4e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	613b      	str	r3, [r7, #16]
    break;
 800ba4c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ba4e:	4b13      	ldr	r3, [pc, #76]	; (800ba9c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800ba50:	68db      	ldr	r3, [r3, #12]
 800ba52:	091b      	lsrs	r3, r3, #4
 800ba54:	f003 030f 	and.w	r3, r3, #15
 800ba58:	3301      	adds	r3, #1
 800ba5a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800ba5c:	4b0f      	ldr	r3, [pc, #60]	; (800ba9c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800ba5e:	68db      	ldr	r3, [r3, #12]
 800ba60:	0a1b      	lsrs	r3, r3, #8
 800ba62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba66:	693a      	ldr	r2, [r7, #16]
 800ba68:	fb03 f202 	mul.w	r2, r3, r2
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba72:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ba74:	4b09      	ldr	r3, [pc, #36]	; (800ba9c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800ba76:	68db      	ldr	r3, [r3, #12]
 800ba78:	0e5b      	lsrs	r3, r3, #25
 800ba7a:	f003 0303 	and.w	r3, r3, #3
 800ba7e:	3301      	adds	r3, #1
 800ba80:	005b      	lsls	r3, r3, #1
 800ba82:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800ba84:	693a      	ldr	r2, [r7, #16]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba8c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800ba8e:	683b      	ldr	r3, [r7, #0]
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	371c      	adds	r7, #28
 800ba94:	46bd      	mov	sp, r7
 800ba96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9a:	4770      	bx	lr
 800ba9c:	40021000 	.word	0x40021000
 800baa0:	00f42400 	.word	0x00f42400
 800baa4:	007a1200 	.word	0x007a1200
 800baa8:	0801d148 	.word	0x0801d148

0800baac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b086      	sub	sp, #24
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bab4:	2300      	movs	r3, #0
 800bab6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bab8:	2300      	movs	r3, #0
 800baba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d040      	beq.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bacc:	2b80      	cmp	r3, #128	; 0x80
 800bace:	d02a      	beq.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800bad0:	2b80      	cmp	r3, #128	; 0x80
 800bad2:	d825      	bhi.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800bad4:	2b60      	cmp	r3, #96	; 0x60
 800bad6:	d026      	beq.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800bad8:	2b60      	cmp	r3, #96	; 0x60
 800bada:	d821      	bhi.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800badc:	2b40      	cmp	r3, #64	; 0x40
 800bade:	d006      	beq.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x42>
 800bae0:	2b40      	cmp	r3, #64	; 0x40
 800bae2:	d81d      	bhi.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d009      	beq.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x50>
 800bae8:	2b20      	cmp	r3, #32
 800baea:	d010      	beq.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800baec:	e018      	b.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800baee:	4b89      	ldr	r3, [pc, #548]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800baf0:	68db      	ldr	r3, [r3, #12]
 800baf2:	4a88      	ldr	r2, [pc, #544]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800baf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800baf8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800bafa:	e015      	b.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	3304      	adds	r3, #4
 800bb00:	2100      	movs	r1, #0
 800bb02:	4618      	mov	r0, r3
 800bb04:	f001 fa24 	bl	800cf50 <RCCEx_PLLSAI1_Config>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800bb0c:	e00c      	b.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	3320      	adds	r3, #32
 800bb12:	2100      	movs	r1, #0
 800bb14:	4618      	mov	r0, r3
 800bb16:	f001 fb0f 	bl	800d138 <RCCEx_PLLSAI2_Config>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800bb1e:	e003      	b.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bb20:	2301      	movs	r3, #1
 800bb22:	74fb      	strb	r3, [r7, #19]
      break;
 800bb24:	e000      	b.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800bb26:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb28:	7cfb      	ldrb	r3, [r7, #19]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d10b      	bne.n	800bb46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bb2e:	4b79      	ldr	r3, [pc, #484]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bb30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bb34:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb3c:	4975      	ldr	r1, [pc, #468]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800bb44:	e001      	b.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb46:	7cfb      	ldrb	r3, [r7, #19]
 800bb48:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d047      	beq.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb5e:	d030      	beq.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800bb60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb64:	d82a      	bhi.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800bb66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb6a:	d02a      	beq.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800bb6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb70:	d824      	bhi.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800bb72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb76:	d008      	beq.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0xde>
 800bb78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb7c:	d81e      	bhi.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d00a      	beq.n	800bb98 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800bb82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb86:	d010      	beq.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800bb88:	e018      	b.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800bb8a:	4b62      	ldr	r3, [pc, #392]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bb8c:	68db      	ldr	r3, [r3, #12]
 800bb8e:	4a61      	ldr	r2, [pc, #388]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bb90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb94:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800bb96:	e015      	b.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	3304      	adds	r3, #4
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f001 f9d6 	bl	800cf50 <RCCEx_PLLSAI1_Config>
 800bba4:	4603      	mov	r3, r0
 800bba6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800bba8:	e00c      	b.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	3320      	adds	r3, #32
 800bbae:	2100      	movs	r1, #0
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f001 fac1 	bl	800d138 <RCCEx_PLLSAI2_Config>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800bbba:	e003      	b.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	74fb      	strb	r3, [r7, #19]
      break;
 800bbc0:	e000      	b.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800bbc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bbc4:	7cfb      	ldrb	r3, [r7, #19]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d10b      	bne.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800bbca:	4b52      	ldr	r3, [pc, #328]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bbcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bbd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbd8:	494e      	ldr	r1, [pc, #312]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800bbe0:	e001      	b.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbe2:	7cfb      	ldrb	r3, [r7, #19]
 800bbe4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	f000 809f 	beq.w	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800bbf8:	4b46      	ldr	r3, [pc, #280]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bbfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d101      	bne.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800bc04:	2301      	movs	r3, #1
 800bc06:	e000      	b.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800bc08:	2300      	movs	r3, #0
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d00d      	beq.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bc0e:	4b41      	ldr	r3, [pc, #260]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bc10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc12:	4a40      	ldr	r2, [pc, #256]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bc14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc18:	6593      	str	r3, [r2, #88]	; 0x58
 800bc1a:	4b3e      	ldr	r3, [pc, #248]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bc1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc22:	60bb      	str	r3, [r7, #8]
 800bc24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bc26:	2301      	movs	r3, #1
 800bc28:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bc2a:	4b3b      	ldr	r3, [pc, #236]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4a3a      	ldr	r2, [pc, #232]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800bc30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bc36:	f7fb fc75 	bl	8007524 <HAL_GetTick>
 800bc3a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800bc3c:	e009      	b.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc3e:	f7fb fc71 	bl	8007524 <HAL_GetTick>
 800bc42:	4602      	mov	r2, r0
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	1ad3      	subs	r3, r2, r3
 800bc48:	2b02      	cmp	r3, #2
 800bc4a:	d902      	bls.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800bc4c:	2303      	movs	r3, #3
 800bc4e:	74fb      	strb	r3, [r7, #19]
        break;
 800bc50:	e005      	b.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800bc52:	4b31      	ldr	r3, [pc, #196]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d0ef      	beq.n	800bc3e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800bc5e:	7cfb      	ldrb	r3, [r7, #19]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d15b      	bne.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bc64:	4b2b      	ldr	r3, [pc, #172]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bc66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc6e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d01f      	beq.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc7c:	697a      	ldr	r2, [r7, #20]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d019      	beq.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bc82:	4b24      	ldr	r3, [pc, #144]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bc84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc8c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bc8e:	4b21      	ldr	r3, [pc, #132]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bc90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc94:	4a1f      	ldr	r2, [pc, #124]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bc96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bc9e:	4b1d      	ldr	r3, [pc, #116]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bca4:	4a1b      	ldr	r2, [pc, #108]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bcaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bcae:	4a19      	ldr	r2, [pc, #100]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	f003 0301 	and.w	r3, r3, #1
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d016      	beq.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcc0:	f7fb fc30 	bl	8007524 <HAL_GetTick>
 800bcc4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bcc6:	e00b      	b.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bcc8:	f7fb fc2c 	bl	8007524 <HAL_GetTick>
 800bccc:	4602      	mov	r2, r0
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	1ad3      	subs	r3, r2, r3
 800bcd2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d902      	bls.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800bcda:	2303      	movs	r3, #3
 800bcdc:	74fb      	strb	r3, [r7, #19]
            break;
 800bcde:	e006      	b.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bce0:	4b0c      	ldr	r3, [pc, #48]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bce6:	f003 0302 	and.w	r3, r3, #2
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d0ec      	beq.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800bcee:	7cfb      	ldrb	r3, [r7, #19]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d10c      	bne.n	800bd0e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bcf4:	4b07      	ldr	r3, [pc, #28]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bcf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd04:	4903      	ldr	r1, [pc, #12]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bd06:	4313      	orrs	r3, r2
 800bd08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800bd0c:	e008      	b.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bd0e:	7cfb      	ldrb	r3, [r7, #19]
 800bd10:	74bb      	strb	r3, [r7, #18]
 800bd12:	e005      	b.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800bd14:	40021000 	.word	0x40021000
 800bd18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd1c:	7cfb      	ldrb	r3, [r7, #19]
 800bd1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bd20:	7c7b      	ldrb	r3, [r7, #17]
 800bd22:	2b01      	cmp	r3, #1
 800bd24:	d105      	bne.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bd26:	4ba0      	ldr	r3, [pc, #640]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd2a:	4a9f      	ldr	r2, [pc, #636]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f003 0301 	and.w	r3, r3, #1
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d00a      	beq.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bd3e:	4b9a      	ldr	r3, [pc, #616]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd44:	f023 0203 	bic.w	r2, r3, #3
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd4c:	4996      	ldr	r1, [pc, #600]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f003 0302 	and.w	r3, r3, #2
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d00a      	beq.n	800bd76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bd60:	4b91      	ldr	r3, [pc, #580]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd66:	f023 020c 	bic.w	r2, r3, #12
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd6e:	498e      	ldr	r1, [pc, #568]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd70:	4313      	orrs	r3, r2
 800bd72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f003 0304 	and.w	r3, r3, #4
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d00a      	beq.n	800bd98 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bd82:	4b89      	ldr	r3, [pc, #548]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd90:	4985      	ldr	r1, [pc, #532]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd92:	4313      	orrs	r3, r2
 800bd94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f003 0308 	and.w	r3, r3, #8
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d00a      	beq.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bda4:	4b80      	ldr	r3, [pc, #512]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bda6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdaa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdb2:	497d      	ldr	r1, [pc, #500]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f003 0310 	and.w	r3, r3, #16
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d00a      	beq.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bdc6:	4b78      	ldr	r3, [pc, #480]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bdc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdd4:	4974      	ldr	r1, [pc, #464]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f003 0320 	and.w	r3, r3, #32
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d00a      	beq.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bde8:	4b6f      	ldr	r3, [pc, #444]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bdea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdf6:	496c      	ldr	r1, [pc, #432]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be06:	2b00      	cmp	r3, #0
 800be08:	d00a      	beq.n	800be20 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800be0a:	4b67      	ldr	r3, [pc, #412]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800be0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be18:	4963      	ldr	r1, [pc, #396]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800be1a:	4313      	orrs	r3, r2
 800be1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d00a      	beq.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800be2c:	4b5e      	ldr	r3, [pc, #376]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800be2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be3a:	495b      	ldr	r1, [pc, #364]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800be3c:	4313      	orrs	r3, r2
 800be3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d00a      	beq.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800be4e:	4b56      	ldr	r3, [pc, #344]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800be50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be5c:	4952      	ldr	r1, [pc, #328]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800be5e:	4313      	orrs	r3, r2
 800be60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d00a      	beq.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800be70:	4b4d      	ldr	r3, [pc, #308]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800be72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be7e:	494a      	ldr	r1, [pc, #296]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800be80:	4313      	orrs	r3, r2
 800be82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d00a      	beq.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800be92:	4b45      	ldr	r3, [pc, #276]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800be94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bea0:	4941      	ldr	r1, [pc, #260]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bea2:	4313      	orrs	r3, r2
 800bea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d00a      	beq.n	800beca <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800beb4:	4b3c      	ldr	r3, [pc, #240]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800beb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800beba:	f023 0203 	bic.w	r2, r3, #3
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bec2:	4939      	ldr	r1, [pc, #228]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bec4:	4313      	orrs	r3, r2
 800bec6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d028      	beq.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bed6:	4b34      	ldr	r3, [pc, #208]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bedc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bee4:	4930      	ldr	r1, [pc, #192]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bee6:	4313      	orrs	r3, r2
 800bee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bef0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bef4:	d106      	bne.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bef6:	4b2c      	ldr	r3, [pc, #176]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bef8:	68db      	ldr	r3, [r3, #12]
 800befa:	4a2b      	ldr	r2, [pc, #172]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800befc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf00:	60d3      	str	r3, [r2, #12]
 800bf02:	e011      	b.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bf0c:	d10c      	bne.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	3304      	adds	r3, #4
 800bf12:	2101      	movs	r1, #1
 800bf14:	4618      	mov	r0, r3
 800bf16:	f001 f81b 	bl	800cf50 <RCCEx_PLLSAI1_Config>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800bf1e:	7cfb      	ldrb	r3, [r7, #19]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d001      	beq.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800bf24:	7cfb      	ldrb	r3, [r7, #19]
 800bf26:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d04d      	beq.n	800bfd0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf3c:	d108      	bne.n	800bf50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800bf3e:	4b1a      	ldr	r3, [pc, #104]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bf40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bf44:	4a18      	ldr	r2, [pc, #96]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bf46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bf4a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800bf4e:	e012      	b.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800bf50:	4b15      	ldr	r3, [pc, #84]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bf52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bf56:	4a14      	ldr	r2, [pc, #80]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bf58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bf5c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800bf60:	4b11      	ldr	r3, [pc, #68]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bf62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf6e:	490e      	ldr	r1, [pc, #56]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bf70:	4313      	orrs	r3, r2
 800bf72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf7e:	d106      	bne.n	800bf8e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bf80:	4b09      	ldr	r3, [pc, #36]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bf82:	68db      	ldr	r3, [r3, #12]
 800bf84:	4a08      	ldr	r2, [pc, #32]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bf86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf8a:	60d3      	str	r3, [r2, #12]
 800bf8c:	e020      	b.n	800bfd0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf96:	d109      	bne.n	800bfac <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800bf98:	4b03      	ldr	r3, [pc, #12]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	4a02      	ldr	r2, [pc, #8]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bf9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bfa2:	60d3      	str	r3, [r2, #12]
 800bfa4:	e014      	b.n	800bfd0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800bfa6:	bf00      	nop
 800bfa8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bfb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bfb4:	d10c      	bne.n	800bfd0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	3304      	adds	r3, #4
 800bfba:	2101      	movs	r1, #1
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f000 ffc7 	bl	800cf50 <RCCEx_PLLSAI1_Config>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bfc6:	7cfb      	ldrb	r3, [r7, #19]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d001      	beq.n	800bfd0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800bfcc:	7cfb      	ldrb	r3, [r7, #19]
 800bfce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d028      	beq.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bfdc:	4b4a      	ldr	r3, [pc, #296]	; (800c108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bfde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfe2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfea:	4947      	ldr	r1, [pc, #284]	; (800c108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bfec:	4313      	orrs	r3, r2
 800bfee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bff6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bffa:	d106      	bne.n	800c00a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bffc:	4b42      	ldr	r3, [pc, #264]	; (800c108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bffe:	68db      	ldr	r3, [r3, #12]
 800c000:	4a41      	ldr	r2, [pc, #260]	; (800c108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c006:	60d3      	str	r3, [r2, #12]
 800c008:	e011      	b.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c00e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c012:	d10c      	bne.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	3304      	adds	r3, #4
 800c018:	2101      	movs	r1, #1
 800c01a:	4618      	mov	r0, r3
 800c01c:	f000 ff98 	bl	800cf50 <RCCEx_PLLSAI1_Config>
 800c020:	4603      	mov	r3, r0
 800c022:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c024:	7cfb      	ldrb	r3, [r7, #19]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d001      	beq.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800c02a:	7cfb      	ldrb	r3, [r7, #19]
 800c02c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c036:	2b00      	cmp	r3, #0
 800c038:	d01e      	beq.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c03a:	4b33      	ldr	r3, [pc, #204]	; (800c108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c03c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c040:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c04a:	492f      	ldr	r1, [pc, #188]	; (800c108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c04c:	4313      	orrs	r3, r2
 800c04e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c058:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c05c:	d10c      	bne.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	3304      	adds	r3, #4
 800c062:	2102      	movs	r1, #2
 800c064:	4618      	mov	r0, r3
 800c066:	f000 ff73 	bl	800cf50 <RCCEx_PLLSAI1_Config>
 800c06a:	4603      	mov	r3, r0
 800c06c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c06e:	7cfb      	ldrb	r3, [r7, #19]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d001      	beq.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800c074:	7cfb      	ldrb	r3, [r7, #19]
 800c076:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c080:	2b00      	cmp	r3, #0
 800c082:	d00b      	beq.n	800c09c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c084:	4b20      	ldr	r3, [pc, #128]	; (800c108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c086:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c08a:	f023 0204 	bic.w	r2, r3, #4
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c094:	491c      	ldr	r1, [pc, #112]	; (800c108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c096:	4313      	orrs	r3, r2
 800c098:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d00b      	beq.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800c0a8:	4b17      	ldr	r3, [pc, #92]	; (800c108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c0aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c0ae:	f023 0218 	bic.w	r2, r3, #24
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0b8:	4913      	ldr	r1, [pc, #76]	; (800c108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d017      	beq.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800c0cc:	4b0e      	ldr	r3, [pc, #56]	; (800c108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c0ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c0d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0dc:	490a      	ldr	r1, [pc, #40]	; (800c108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c0de:	4313      	orrs	r3, r2
 800c0e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c0ee:	d105      	bne.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c0f0:	4b05      	ldr	r3, [pc, #20]	; (800c108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	4a04      	ldr	r2, [pc, #16]	; (800c108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c0f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c0fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800c0fc:	7cbb      	ldrb	r3, [r7, #18]
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3718      	adds	r7, #24
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop
 800c108:	40021000 	.word	0x40021000

0800c10c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b088      	sub	sp, #32
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800c114:	2300      	movs	r3, #0
 800c116:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c11e:	d13e      	bne.n	800c19e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800c120:	4bb6      	ldr	r3, [pc, #728]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c12a:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c132:	d028      	beq.n	800c186 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c13a:	f200 86f4 	bhi.w	800cf26 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c144:	d005      	beq.n	800c152 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c14c:	d00e      	beq.n	800c16c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800c14e:	f000 beea 	b.w	800cf26 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c152:	4baa      	ldr	r3, [pc, #680]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c158:	f003 0302 	and.w	r3, r3, #2
 800c15c:	2b02      	cmp	r3, #2
 800c15e:	f040 86e4 	bne.w	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 800c162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c166:	61fb      	str	r3, [r7, #28]
      break;
 800c168:	f000 bedf 	b.w	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800c16c:	4ba3      	ldr	r3, [pc, #652]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c16e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c172:	f003 0302 	and.w	r3, r3, #2
 800c176:	2b02      	cmp	r3, #2
 800c178:	f040 86d9 	bne.w	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 800c17c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c180:	61fb      	str	r3, [r7, #28]
      break;
 800c182:	f000 bed4 	b.w	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c186:	4b9d      	ldr	r3, [pc, #628]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c18e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c192:	f040 86ce 	bne.w	800cf32 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 800c196:	4b9a      	ldr	r3, [pc, #616]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800c198:	61fb      	str	r3, [r7, #28]
      break;
 800c19a:	f000 beca 	b.w	800cf32 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c19e:	4b97      	ldr	r3, [pc, #604]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c1a0:	68db      	ldr	r3, [r3, #12]
 800c1a2:	f003 0303 	and.w	r3, r3, #3
 800c1a6:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	2b03      	cmp	r3, #3
 800c1ac:	d036      	beq.n	800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	2b03      	cmp	r3, #3
 800c1b2:	d840      	bhi.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	2b01      	cmp	r3, #1
 800c1b8:	d003      	beq.n	800c1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	2b02      	cmp	r3, #2
 800c1be:	d020      	beq.n	800c202 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800c1c0:	e039      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800c1c2:	4b8e      	ldr	r3, [pc, #568]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f003 0302 	and.w	r3, r3, #2
 800c1ca:	2b02      	cmp	r3, #2
 800c1cc:	d116      	bne.n	800c1fc <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800c1ce:	4b8b      	ldr	r3, [pc, #556]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f003 0308 	and.w	r3, r3, #8
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d005      	beq.n	800c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800c1da:	4b88      	ldr	r3, [pc, #544]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	091b      	lsrs	r3, r3, #4
 800c1e0:	f003 030f 	and.w	r3, r3, #15
 800c1e4:	e005      	b.n	800c1f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800c1e6:	4b85      	ldr	r3, [pc, #532]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c1e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c1ec:	0a1b      	lsrs	r3, r3, #8
 800c1ee:	f003 030f 	and.w	r3, r3, #15
 800c1f2:	4a84      	ldr	r2, [pc, #528]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800c1f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1f8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800c1fa:	e01f      	b.n	800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	61bb      	str	r3, [r7, #24]
      break;
 800c200:	e01c      	b.n	800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c202:	4b7e      	ldr	r3, [pc, #504]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c20a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c20e:	d102      	bne.n	800c216 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800c210:	4b7d      	ldr	r3, [pc, #500]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800c212:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800c214:	e012      	b.n	800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800c216:	2300      	movs	r3, #0
 800c218:	61bb      	str	r3, [r7, #24]
      break;
 800c21a:	e00f      	b.n	800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c21c:	4b77      	ldr	r3, [pc, #476]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c224:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c228:	d102      	bne.n	800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800c22a:	4b78      	ldr	r3, [pc, #480]	; (800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800c22c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800c22e:	e005      	b.n	800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800c230:	2300      	movs	r3, #0
 800c232:	61bb      	str	r3, [r7, #24]
      break;
 800c234:	e002      	b.n	800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800c236:	2300      	movs	r3, #0
 800c238:	61bb      	str	r3, [r7, #24]
      break;
 800c23a:	bf00      	nop
    }

    switch(PeriphClk)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c242:	f000 8606 	beq.w	800ce52 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c24c:	f200 8673 	bhi.w	800cf36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c256:	f000 8469 	beq.w	800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c260:	f200 8669 	bhi.w	800cf36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c26a:	f000 8531 	beq.w	800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c274:	f200 865f 	bhi.w	800cf36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c27e:	f000 8187 	beq.w	800c590 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c288:	f200 8655 	bhi.w	800cf36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c292:	f000 80cd 	beq.w	800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c29c:	f200 864b 	bhi.w	800cf36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2a6:	f000 8430 	beq.w	800cb0a <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2b0:	f200 8641 	bhi.w	800cf36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c2ba:	f000 83e4 	beq.w	800ca86 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c2c4:	f200 8637 	bhi.w	800cf36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2ce:	f000 80af 	beq.w	800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2d8:	f200 862d 	bhi.w	800cf36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2e2:	f000 809d 	beq.w	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2ec:	f200 8623 	bhi.w	800cf36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2f6:	f000 808b 	beq.w	800c410 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c300:	f200 8619 	bhi.w	800cf36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c30a:	f000 8554 	beq.w	800cdb6 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c314:	f200 860f 	bhi.w	800cf36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c31e:	f000 8500 	beq.w	800cd22 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c328:	f200 8605 	bhi.w	800cf36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c332:	f000 84a1 	beq.w	800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c33c:	f200 85fb 	bhi.w	800cf36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2b80      	cmp	r3, #128	; 0x80
 800c344:	f000 846c 	beq.w	800cc20 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2b80      	cmp	r3, #128	; 0x80
 800c34c:	f200 85f3 	bhi.w	800cf36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2b20      	cmp	r3, #32
 800c354:	d84c      	bhi.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	f000 85ec 	beq.w	800cf36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	3b01      	subs	r3, #1
 800c362:	2b1f      	cmp	r3, #31
 800c364:	f200 85e7 	bhi.w	800cf36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c368:	a201      	add	r2, pc, #4	; (adr r2, 800c370 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800c36a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c36e:	bf00      	nop
 800c370:	0800c785 	.word	0x0800c785
 800c374:	0800c7f3 	.word	0x0800c7f3
 800c378:	0800cf37 	.word	0x0800cf37
 800c37c:	0800c887 	.word	0x0800c887
 800c380:	0800cf37 	.word	0x0800cf37
 800c384:	0800cf37 	.word	0x0800cf37
 800c388:	0800cf37 	.word	0x0800cf37
 800c38c:	0800c8ff 	.word	0x0800c8ff
 800c390:	0800cf37 	.word	0x0800cf37
 800c394:	0800cf37 	.word	0x0800cf37
 800c398:	0800cf37 	.word	0x0800cf37
 800c39c:	0800cf37 	.word	0x0800cf37
 800c3a0:	0800cf37 	.word	0x0800cf37
 800c3a4:	0800cf37 	.word	0x0800cf37
 800c3a8:	0800cf37 	.word	0x0800cf37
 800c3ac:	0800c983 	.word	0x0800c983
 800c3b0:	0800cf37 	.word	0x0800cf37
 800c3b4:	0800cf37 	.word	0x0800cf37
 800c3b8:	0800cf37 	.word	0x0800cf37
 800c3bc:	0800cf37 	.word	0x0800cf37
 800c3c0:	0800cf37 	.word	0x0800cf37
 800c3c4:	0800cf37 	.word	0x0800cf37
 800c3c8:	0800cf37 	.word	0x0800cf37
 800c3cc:	0800cf37 	.word	0x0800cf37
 800c3d0:	0800cf37 	.word	0x0800cf37
 800c3d4:	0800cf37 	.word	0x0800cf37
 800c3d8:	0800cf37 	.word	0x0800cf37
 800c3dc:	0800cf37 	.word	0x0800cf37
 800c3e0:	0800cf37 	.word	0x0800cf37
 800c3e4:	0800cf37 	.word	0x0800cf37
 800c3e8:	0800cf37 	.word	0x0800cf37
 800c3ec:	0800ca05 	.word	0x0800ca05
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2b40      	cmp	r3, #64	; 0x40
 800c3f4:	f000 83e8 	beq.w	800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800c3f8:	f000 bd9d 	b.w	800cf36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c3fc:	40021000 	.word	0x40021000
 800c400:	0003d090 	.word	0x0003d090
 800c404:	0801d148 	.word	0x0801d148
 800c408:	00f42400 	.word	0x00f42400
 800c40c:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800c410:	69b9      	ldr	r1, [r7, #24]
 800c412:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c416:	f000 ff83 	bl	800d320 <RCCEx_GetSAIxPeriphCLKFreq>
 800c41a:	61f8      	str	r0, [r7, #28]
      break;
 800c41c:	f000 bd8e 	b.w	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800c420:	69b9      	ldr	r1, [r7, #24]
 800c422:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c426:	f000 ff7b 	bl	800d320 <RCCEx_GetSAIxPeriphCLKFreq>
 800c42a:	61f8      	str	r0, [r7, #28]
      break;
 800c42c:	f000 bd86 	b.w	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800c430:	4b9a      	ldr	r3, [pc, #616]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c436:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800c43a:	60fb      	str	r3, [r7, #12]
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c442:	d015      	beq.n	800c470 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c44a:	f200 8092 	bhi.w	800c572 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c454:	d029      	beq.n	800c4aa <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c45c:	f200 8089 	bhi.w	800c572 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d07b      	beq.n	800c55e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c46c:	d04a      	beq.n	800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 800c46e:	e080      	b.n	800c572 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800c470:	4b8a      	ldr	r3, [pc, #552]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f003 0302 	and.w	r3, r3, #2
 800c478:	2b02      	cmp	r3, #2
 800c47a:	d17d      	bne.n	800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800c47c:	4b87      	ldr	r3, [pc, #540]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f003 0308 	and.w	r3, r3, #8
 800c484:	2b00      	cmp	r3, #0
 800c486:	d005      	beq.n	800c494 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 800c488:	4b84      	ldr	r3, [pc, #528]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	091b      	lsrs	r3, r3, #4
 800c48e:	f003 030f 	and.w	r3, r3, #15
 800c492:	e005      	b.n	800c4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 800c494:	4b81      	ldr	r3, [pc, #516]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c49a:	0a1b      	lsrs	r3, r3, #8
 800c49c:	f003 030f 	and.w	r3, r3, #15
 800c4a0:	4a7f      	ldr	r2, [pc, #508]	; (800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c4a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4a6:	61fb      	str	r3, [r7, #28]
          break;
 800c4a8:	e066      	b.n	800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800c4aa:	4b7c      	ldr	r3, [pc, #496]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4b6:	d162      	bne.n	800c57e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800c4b8:	4b78      	ldr	r3, [pc, #480]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c4ba:	68db      	ldr	r3, [r3, #12]
 800c4bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c4c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c4c4:	d15b      	bne.n	800c57e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800c4c6:	4b75      	ldr	r3, [pc, #468]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c4c8:	68db      	ldr	r3, [r3, #12]
 800c4ca:	0a1b      	lsrs	r3, r3, #8
 800c4cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4d0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c4d2:	69bb      	ldr	r3, [r7, #24]
 800c4d4:	68ba      	ldr	r2, [r7, #8]
 800c4d6:	fb03 f202 	mul.w	r2, r3, r2
 800c4da:	4b70      	ldr	r3, [pc, #448]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c4dc:	68db      	ldr	r3, [r3, #12]
 800c4de:	091b      	lsrs	r3, r3, #4
 800c4e0:	f003 030f 	and.w	r3, r3, #15
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4ea:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800c4ec:	4b6b      	ldr	r3, [pc, #428]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c4ee:	68db      	ldr	r3, [r3, #12]
 800c4f0:	0d5b      	lsrs	r3, r3, #21
 800c4f2:	f003 0303 	and.w	r3, r3, #3
 800c4f6:	3301      	adds	r3, #1
 800c4f8:	005b      	lsls	r3, r3, #1
 800c4fa:	69ba      	ldr	r2, [r7, #24]
 800c4fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c500:	61fb      	str	r3, [r7, #28]
          break;
 800c502:	e03c      	b.n	800c57e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800c504:	4b65      	ldr	r3, [pc, #404]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c50c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c510:	d138      	bne.n	800c584 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800c512:	4b62      	ldr	r3, [pc, #392]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c514:	691b      	ldr	r3, [r3, #16]
 800c516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c51a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c51e:	d131      	bne.n	800c584 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800c520:	4b5e      	ldr	r3, [pc, #376]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c522:	691b      	ldr	r3, [r3, #16]
 800c524:	0a1b      	lsrs	r3, r3, #8
 800c526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c52a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800c52c:	69bb      	ldr	r3, [r7, #24]
 800c52e:	68ba      	ldr	r2, [r7, #8]
 800c530:	fb03 f202 	mul.w	r2, r3, r2
 800c534:	4b59      	ldr	r3, [pc, #356]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c536:	691b      	ldr	r3, [r3, #16]
 800c538:	091b      	lsrs	r3, r3, #4
 800c53a:	f003 030f 	and.w	r3, r3, #15
 800c53e:	3301      	adds	r3, #1
 800c540:	fbb2 f3f3 	udiv	r3, r2, r3
 800c544:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800c546:	4b55      	ldr	r3, [pc, #340]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c548:	691b      	ldr	r3, [r3, #16]
 800c54a:	0d5b      	lsrs	r3, r3, #21
 800c54c:	f003 0303 	and.w	r3, r3, #3
 800c550:	3301      	adds	r3, #1
 800c552:	005b      	lsls	r3, r3, #1
 800c554:	69ba      	ldr	r2, [r7, #24]
 800c556:	fbb2 f3f3 	udiv	r3, r2, r3
 800c55a:	61fb      	str	r3, [r7, #28]
          break;
 800c55c:	e012      	b.n	800c584 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800c55e:	4b4f      	ldr	r3, [pc, #316]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c560:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c564:	f003 0302 	and.w	r3, r3, #2
 800c568:	2b02      	cmp	r3, #2
 800c56a:	d10e      	bne.n	800c58a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 800c56c:	4b4d      	ldr	r3, [pc, #308]	; (800c6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800c56e:	61fb      	str	r3, [r7, #28]
          break;
 800c570:	e00b      	b.n	800c58a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800c572:	bf00      	nop
 800c574:	f000 bce2 	b.w	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c578:	bf00      	nop
 800c57a:	f000 bcdf 	b.w	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c57e:	bf00      	nop
 800c580:	f000 bcdc 	b.w	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c584:	bf00      	nop
 800c586:	f000 bcd9 	b.w	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c58a:	bf00      	nop
        break;
 800c58c:	f000 bcd6 	b.w	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 800c590:	4b42      	ldr	r3, [pc, #264]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c592:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c59a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c59e:	d13d      	bne.n	800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800c5a0:	4b3e      	ldr	r3, [pc, #248]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5ac:	f040 84c5 	bne.w	800cf3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800c5b0:	4b3a      	ldr	r3, [pc, #232]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c5b2:	68db      	ldr	r3, [r3, #12]
 800c5b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c5b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5bc:	f040 84bd 	bne.w	800cf3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800c5c0:	4b36      	ldr	r3, [pc, #216]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c5c2:	68db      	ldr	r3, [r3, #12]
 800c5c4:	0a1b      	lsrs	r3, r3, #8
 800c5c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5ca:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c5cc:	69bb      	ldr	r3, [r7, #24]
 800c5ce:	68ba      	ldr	r2, [r7, #8]
 800c5d0:	fb03 f202 	mul.w	r2, r3, r2
 800c5d4:	4b31      	ldr	r3, [pc, #196]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c5d6:	68db      	ldr	r3, [r3, #12]
 800c5d8:	091b      	lsrs	r3, r3, #4
 800c5da:	f003 030f 	and.w	r3, r3, #15
 800c5de:	3301      	adds	r3, #1
 800c5e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5e4:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800c5e6:	4b2d      	ldr	r3, [pc, #180]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c5e8:	68db      	ldr	r3, [r3, #12]
 800c5ea:	0edb      	lsrs	r3, r3, #27
 800c5ec:	f003 031f 	and.w	r3, r3, #31
 800c5f0:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d10a      	bne.n	800c60e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800c5f8:	4b28      	ldr	r3, [pc, #160]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c5fa:	68db      	ldr	r3, [r3, #12]
 800c5fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c600:	2b00      	cmp	r3, #0
 800c602:	d002      	beq.n	800c60a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 800c604:	2311      	movs	r3, #17
 800c606:	617b      	str	r3, [r7, #20]
 800c608:	e001      	b.n	800c60e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 800c60a:	2307      	movs	r3, #7
 800c60c:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800c60e:	69ba      	ldr	r2, [r7, #24]
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	fbb2 f3f3 	udiv	r3, r2, r3
 800c616:	61fb      	str	r3, [r7, #28]
      break;
 800c618:	f000 bc8f 	b.w	800cf3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800c61c:	4b1f      	ldr	r3, [pc, #124]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c61e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c622:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800c626:	60fb      	str	r3, [r7, #12]
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c62e:	d016      	beq.n	800c65e <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c636:	f200 809b 	bhi.w	800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c640:	d032      	beq.n	800c6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c648:	f200 8092 	bhi.w	800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	f000 8084 	beq.w	800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c65a:	d052      	beq.n	800c702 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 800c65c:	e088      	b.n	800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800c65e:	4b0f      	ldr	r3, [pc, #60]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	f003 0302 	and.w	r3, r3, #2
 800c666:	2b02      	cmp	r3, #2
 800c668:	f040 8084 	bne.w	800c774 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800c66c:	4b0b      	ldr	r3, [pc, #44]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f003 0308 	and.w	r3, r3, #8
 800c674:	2b00      	cmp	r3, #0
 800c676:	d005      	beq.n	800c684 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800c678:	4b08      	ldr	r3, [pc, #32]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	091b      	lsrs	r3, r3, #4
 800c67e:	f003 030f 	and.w	r3, r3, #15
 800c682:	e005      	b.n	800c690 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 800c684:	4b05      	ldr	r3, [pc, #20]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c686:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c68a:	0a1b      	lsrs	r3, r3, #8
 800c68c:	f003 030f 	and.w	r3, r3, #15
 800c690:	4a03      	ldr	r2, [pc, #12]	; (800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c696:	61fb      	str	r3, [r7, #28]
          break;
 800c698:	e06c      	b.n	800c774 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800c69a:	bf00      	nop
 800c69c:	40021000 	.word	0x40021000
 800c6a0:	0801d148 	.word	0x0801d148
 800c6a4:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800c6a8:	4ba5      	ldr	r3, [pc, #660]	; (800c940 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c6b4:	d160      	bne.n	800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800c6b6:	4ba2      	ldr	r3, [pc, #648]	; (800c940 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c6b8:	68db      	ldr	r3, [r3, #12]
 800c6ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c6be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6c2:	d159      	bne.n	800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800c6c4:	4b9e      	ldr	r3, [pc, #632]	; (800c940 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c6c6:	68db      	ldr	r3, [r3, #12]
 800c6c8:	0a1b      	lsrs	r3, r3, #8
 800c6ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6ce:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c6d0:	69bb      	ldr	r3, [r7, #24]
 800c6d2:	68ba      	ldr	r2, [r7, #8]
 800c6d4:	fb03 f202 	mul.w	r2, r3, r2
 800c6d8:	4b99      	ldr	r3, [pc, #612]	; (800c940 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c6da:	68db      	ldr	r3, [r3, #12]
 800c6dc:	091b      	lsrs	r3, r3, #4
 800c6de:	f003 030f 	and.w	r3, r3, #15
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6e8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800c6ea:	4b95      	ldr	r3, [pc, #596]	; (800c940 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c6ec:	68db      	ldr	r3, [r3, #12]
 800c6ee:	0d5b      	lsrs	r3, r3, #21
 800c6f0:	f003 0303 	and.w	r3, r3, #3
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	005b      	lsls	r3, r3, #1
 800c6f8:	69ba      	ldr	r2, [r7, #24]
 800c6fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6fe:	61fb      	str	r3, [r7, #28]
          break;
 800c700:	e03a      	b.n	800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800c702:	4b8f      	ldr	r3, [pc, #572]	; (800c940 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c70a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c70e:	d135      	bne.n	800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800c710:	4b8b      	ldr	r3, [pc, #556]	; (800c940 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c712:	691b      	ldr	r3, [r3, #16]
 800c714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c718:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c71c:	d12e      	bne.n	800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800c71e:	4b88      	ldr	r3, [pc, #544]	; (800c940 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c720:	691b      	ldr	r3, [r3, #16]
 800c722:	0a1b      	lsrs	r3, r3, #8
 800c724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c728:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800c72a:	69bb      	ldr	r3, [r7, #24]
 800c72c:	68ba      	ldr	r2, [r7, #8]
 800c72e:	fb03 f202 	mul.w	r2, r3, r2
 800c732:	4b83      	ldr	r3, [pc, #524]	; (800c940 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c734:	691b      	ldr	r3, [r3, #16]
 800c736:	091b      	lsrs	r3, r3, #4
 800c738:	f003 030f 	and.w	r3, r3, #15
 800c73c:	3301      	adds	r3, #1
 800c73e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c742:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800c744:	4b7e      	ldr	r3, [pc, #504]	; (800c940 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c746:	691b      	ldr	r3, [r3, #16]
 800c748:	0d5b      	lsrs	r3, r3, #21
 800c74a:	f003 0303 	and.w	r3, r3, #3
 800c74e:	3301      	adds	r3, #1
 800c750:	005b      	lsls	r3, r3, #1
 800c752:	69ba      	ldr	r2, [r7, #24]
 800c754:	fbb2 f3f3 	udiv	r3, r2, r3
 800c758:	61fb      	str	r3, [r7, #28]
          break;
 800c75a:	e00f      	b.n	800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800c75c:	4b78      	ldr	r3, [pc, #480]	; (800c940 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c75e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c762:	f003 0302 	and.w	r3, r3, #2
 800c766:	2b02      	cmp	r3, #2
 800c768:	d10a      	bne.n	800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 800c76a:	4b76      	ldr	r3, [pc, #472]	; (800c944 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800c76c:	61fb      	str	r3, [r7, #28]
          break;
 800c76e:	e007      	b.n	800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 800c770:	bf00      	nop
 800c772:	e3e2      	b.n	800cf3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800c774:	bf00      	nop
 800c776:	e3e0      	b.n	800cf3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800c778:	bf00      	nop
 800c77a:	e3de      	b.n	800cf3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800c77c:	bf00      	nop
 800c77e:	e3dc      	b.n	800cf3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800c780:	bf00      	nop
      break;
 800c782:	e3da      	b.n	800cf3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800c784:	4b6e      	ldr	r3, [pc, #440]	; (800c940 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c78a:	f003 0303 	and.w	r3, r3, #3
 800c78e:	60fb      	str	r3, [r7, #12]
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2b03      	cmp	r3, #3
 800c794:	d827      	bhi.n	800c7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800c796:	a201      	add	r2, pc, #4	; (adr r2, 800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 800c798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c79c:	0800c7ad 	.word	0x0800c7ad
 800c7a0:	0800c7b5 	.word	0x0800c7b5
 800c7a4:	0800c7bd 	.word	0x0800c7bd
 800c7a8:	0800c7d1 	.word	0x0800c7d1
          frequency = HAL_RCC_GetPCLK2Freq();
 800c7ac:	f7ff f87c 	bl	800b8a8 <HAL_RCC_GetPCLK2Freq>
 800c7b0:	61f8      	str	r0, [r7, #28]
          break;
 800c7b2:	e01d      	b.n	800c7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 800c7b4:	f7fe ffca 	bl	800b74c <HAL_RCC_GetSysClockFreq>
 800c7b8:	61f8      	str	r0, [r7, #28]
          break;
 800c7ba:	e019      	b.n	800c7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c7bc:	4b60      	ldr	r3, [pc, #384]	; (800c940 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c7c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7c8:	d10f      	bne.n	800c7ea <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 800c7ca:	4b5f      	ldr	r3, [pc, #380]	; (800c948 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c7cc:	61fb      	str	r3, [r7, #28]
          break;
 800c7ce:	e00c      	b.n	800c7ea <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c7d0:	4b5b      	ldr	r3, [pc, #364]	; (800c940 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c7d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7d6:	f003 0302 	and.w	r3, r3, #2
 800c7da:	2b02      	cmp	r3, #2
 800c7dc:	d107      	bne.n	800c7ee <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 800c7de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c7e2:	61fb      	str	r3, [r7, #28]
          break;
 800c7e4:	e003      	b.n	800c7ee <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 800c7e6:	bf00      	nop
 800c7e8:	e3a8      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c7ea:	bf00      	nop
 800c7ec:	e3a6      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c7ee:	bf00      	nop
        break;
 800c7f0:	e3a4      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800c7f2:	4b53      	ldr	r3, [pc, #332]	; (800c940 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c7f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7f8:	f003 030c 	and.w	r3, r3, #12
 800c7fc:	60fb      	str	r3, [r7, #12]
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	2b0c      	cmp	r3, #12
 800c802:	d83a      	bhi.n	800c87a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c804:	a201      	add	r2, pc, #4	; (adr r2, 800c80c <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 800c806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c80a:	bf00      	nop
 800c80c:	0800c841 	.word	0x0800c841
 800c810:	0800c87b 	.word	0x0800c87b
 800c814:	0800c87b 	.word	0x0800c87b
 800c818:	0800c87b 	.word	0x0800c87b
 800c81c:	0800c849 	.word	0x0800c849
 800c820:	0800c87b 	.word	0x0800c87b
 800c824:	0800c87b 	.word	0x0800c87b
 800c828:	0800c87b 	.word	0x0800c87b
 800c82c:	0800c851 	.word	0x0800c851
 800c830:	0800c87b 	.word	0x0800c87b
 800c834:	0800c87b 	.word	0x0800c87b
 800c838:	0800c87b 	.word	0x0800c87b
 800c83c:	0800c865 	.word	0x0800c865
          frequency = HAL_RCC_GetPCLK1Freq();
 800c840:	f7ff f81c 	bl	800b87c <HAL_RCC_GetPCLK1Freq>
 800c844:	61f8      	str	r0, [r7, #28]
          break;
 800c846:	e01d      	b.n	800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 800c848:	f7fe ff80 	bl	800b74c <HAL_RCC_GetSysClockFreq>
 800c84c:	61f8      	str	r0, [r7, #28]
          break;
 800c84e:	e019      	b.n	800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c850:	4b3b      	ldr	r3, [pc, #236]	; (800c940 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c85c:	d10f      	bne.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 800c85e:	4b3a      	ldr	r3, [pc, #232]	; (800c948 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c860:	61fb      	str	r3, [r7, #28]
          break;
 800c862:	e00c      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c864:	4b36      	ldr	r3, [pc, #216]	; (800c940 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c86a:	f003 0302 	and.w	r3, r3, #2
 800c86e:	2b02      	cmp	r3, #2
 800c870:	d107      	bne.n	800c882 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 800c872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c876:	61fb      	str	r3, [r7, #28]
          break;
 800c878:	e003      	b.n	800c882 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 800c87a:	bf00      	nop
 800c87c:	e35e      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c87e:	bf00      	nop
 800c880:	e35c      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c882:	bf00      	nop
        break;
 800c884:	e35a      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800c886:	4b2e      	ldr	r3, [pc, #184]	; (800c940 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c88c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c890:	60fb      	str	r3, [r7, #12]
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2b30      	cmp	r3, #48	; 0x30
 800c896:	d021      	beq.n	800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2b30      	cmp	r3, #48	; 0x30
 800c89c:	d829      	bhi.n	800c8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2b20      	cmp	r3, #32
 800c8a2:	d011      	beq.n	800c8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2b20      	cmp	r3, #32
 800c8a8:	d823      	bhi.n	800c8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d003      	beq.n	800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	2b10      	cmp	r3, #16
 800c8b4:	d004      	beq.n	800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800c8b6:	e01c      	b.n	800c8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c8b8:	f7fe ffe0 	bl	800b87c <HAL_RCC_GetPCLK1Freq>
 800c8bc:	61f8      	str	r0, [r7, #28]
          break;
 800c8be:	e01d      	b.n	800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800c8c0:	f7fe ff44 	bl	800b74c <HAL_RCC_GetSysClockFreq>
 800c8c4:	61f8      	str	r0, [r7, #28]
          break;
 800c8c6:	e019      	b.n	800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c8c8:	4b1d      	ldr	r3, [pc, #116]	; (800c940 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c8d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c8d4:	d10f      	bne.n	800c8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 800c8d6:	4b1c      	ldr	r3, [pc, #112]	; (800c948 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c8d8:	61fb      	str	r3, [r7, #28]
          break;
 800c8da:	e00c      	b.n	800c8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c8dc:	4b18      	ldr	r3, [pc, #96]	; (800c940 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c8de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8e2:	f003 0302 	and.w	r3, r3, #2
 800c8e6:	2b02      	cmp	r3, #2
 800c8e8:	d107      	bne.n	800c8fa <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 800c8ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c8ee:	61fb      	str	r3, [r7, #28]
          break;
 800c8f0:	e003      	b.n	800c8fa <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 800c8f2:	bf00      	nop
 800c8f4:	e322      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c8f6:	bf00      	nop
 800c8f8:	e320      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c8fa:	bf00      	nop
        break;
 800c8fc:	e31e      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800c8fe:	4b10      	ldr	r3, [pc, #64]	; (800c940 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c904:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c908:	60fb      	str	r3, [r7, #12]
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	2bc0      	cmp	r3, #192	; 0xc0
 800c90e:	d027      	beq.n	800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	2bc0      	cmp	r3, #192	; 0xc0
 800c914:	d82f      	bhi.n	800c976 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2b80      	cmp	r3, #128	; 0x80
 800c91a:	d017      	beq.n	800c94c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2b80      	cmp	r3, #128	; 0x80
 800c920:	d829      	bhi.n	800c976 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d003      	beq.n	800c930 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	2b40      	cmp	r3, #64	; 0x40
 800c92c:	d004      	beq.n	800c938 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 800c92e:	e022      	b.n	800c976 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c930:	f7fe ffa4 	bl	800b87c <HAL_RCC_GetPCLK1Freq>
 800c934:	61f8      	str	r0, [r7, #28]
          break;
 800c936:	e023      	b.n	800c980 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 800c938:	f7fe ff08 	bl	800b74c <HAL_RCC_GetSysClockFreq>
 800c93c:	61f8      	str	r0, [r7, #28]
          break;
 800c93e:	e01f      	b.n	800c980 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 800c940:	40021000 	.word	0x40021000
 800c944:	02dc6c00 	.word	0x02dc6c00
 800c948:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c94c:	4b9b      	ldr	r3, [pc, #620]	; (800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c958:	d10f      	bne.n	800c97a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 800c95a:	4b99      	ldr	r3, [pc, #612]	; (800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800c95c:	61fb      	str	r3, [r7, #28]
          break;
 800c95e:	e00c      	b.n	800c97a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c960:	4b96      	ldr	r3, [pc, #600]	; (800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c966:	f003 0302 	and.w	r3, r3, #2
 800c96a:	2b02      	cmp	r3, #2
 800c96c:	d107      	bne.n	800c97e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 800c96e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c972:	61fb      	str	r3, [r7, #28]
          break;
 800c974:	e003      	b.n	800c97e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 800c976:	bf00      	nop
 800c978:	e2e0      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c97a:	bf00      	nop
 800c97c:	e2de      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c97e:	bf00      	nop
        break;
 800c980:	e2dc      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800c982:	4b8e      	ldr	r3, [pc, #568]	; (800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c988:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c98c:	60fb      	str	r3, [r7, #12]
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c994:	d025      	beq.n	800c9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c99c:	d82c      	bhi.n	800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9a4:	d013      	beq.n	800c9ce <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9ac:	d824      	bhi.n	800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d004      	beq.n	800c9be <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9ba:	d004      	beq.n	800c9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 800c9bc:	e01c      	b.n	800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c9be:	f7fe ff5d 	bl	800b87c <HAL_RCC_GetPCLK1Freq>
 800c9c2:	61f8      	str	r0, [r7, #28]
          break;
 800c9c4:	e01d      	b.n	800ca02 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800c9c6:	f7fe fec1 	bl	800b74c <HAL_RCC_GetSysClockFreq>
 800c9ca:	61f8      	str	r0, [r7, #28]
          break;
 800c9cc:	e019      	b.n	800ca02 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c9ce:	4b7b      	ldr	r3, [pc, #492]	; (800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c9d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c9da:	d10f      	bne.n	800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 800c9dc:	4b78      	ldr	r3, [pc, #480]	; (800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800c9de:	61fb      	str	r3, [r7, #28]
          break;
 800c9e0:	e00c      	b.n	800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c9e2:	4b76      	ldr	r3, [pc, #472]	; (800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c9e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9e8:	f003 0302 	and.w	r3, r3, #2
 800c9ec:	2b02      	cmp	r3, #2
 800c9ee:	d107      	bne.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 800c9f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c9f4:	61fb      	str	r3, [r7, #28]
          break;
 800c9f6:	e003      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 800c9f8:	bf00      	nop
 800c9fa:	e29f      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c9fc:	bf00      	nop
 800c9fe:	e29d      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ca00:	bf00      	nop
        break;
 800ca02:	e29b      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800ca04:	4b6d      	ldr	r3, [pc, #436]	; (800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ca06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca0a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ca0e:	60fb      	str	r3, [r7, #12]
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ca16:	d025      	beq.n	800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ca1e:	d82c      	bhi.n	800ca7a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca26:	d013      	beq.n	800ca50 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca2e:	d824      	bhi.n	800ca7a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d004      	beq.n	800ca40 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca3c:	d004      	beq.n	800ca48 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 800ca3e:	e01c      	b.n	800ca7a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ca40:	f7fe ff1c 	bl	800b87c <HAL_RCC_GetPCLK1Freq>
 800ca44:	61f8      	str	r0, [r7, #28]
          break;
 800ca46:	e01d      	b.n	800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 800ca48:	f7fe fe80 	bl	800b74c <HAL_RCC_GetSysClockFreq>
 800ca4c:	61f8      	str	r0, [r7, #28]
          break;
 800ca4e:	e019      	b.n	800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ca50:	4b5a      	ldr	r3, [pc, #360]	; (800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca5c:	d10f      	bne.n	800ca7e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 800ca5e:	4b58      	ldr	r3, [pc, #352]	; (800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800ca60:	61fb      	str	r3, [r7, #28]
          break;
 800ca62:	e00c      	b.n	800ca7e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ca64:	4b55      	ldr	r3, [pc, #340]	; (800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ca66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca6a:	f003 0302 	and.w	r3, r3, #2
 800ca6e:	2b02      	cmp	r3, #2
 800ca70:	d107      	bne.n	800ca82 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 800ca72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca76:	61fb      	str	r3, [r7, #28]
          break;
 800ca78:	e003      	b.n	800ca82 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 800ca7a:	bf00      	nop
 800ca7c:	e25e      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ca7e:	bf00      	nop
 800ca80:	e25c      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ca82:	bf00      	nop
        break;
 800ca84:	e25a      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ca86:	4b4d      	ldr	r3, [pc, #308]	; (800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ca88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ca90:	60fb      	str	r3, [r7, #12]
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca98:	d007      	beq.n	800caaa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800caa0:	d12f      	bne.n	800cb02 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800caa2:	f7fe fe53 	bl	800b74c <HAL_RCC_GetSysClockFreq>
 800caa6:	61f8      	str	r0, [r7, #28]
          break;
 800caa8:	e02e      	b.n	800cb08 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800caaa:	4b44      	ldr	r3, [pc, #272]	; (800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cab2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cab6:	d126      	bne.n	800cb06 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800cab8:	4b40      	ldr	r3, [pc, #256]	; (800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800caba:	691b      	ldr	r3, [r3, #16]
 800cabc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d020      	beq.n	800cb06 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800cac4:	4b3d      	ldr	r3, [pc, #244]	; (800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800cac6:	691b      	ldr	r3, [r3, #16]
 800cac8:	0a1b      	lsrs	r3, r3, #8
 800caca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cace:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800cad0:	69bb      	ldr	r3, [r7, #24]
 800cad2:	68ba      	ldr	r2, [r7, #8]
 800cad4:	fb03 f202 	mul.w	r2, r3, r2
 800cad8:	4b38      	ldr	r3, [pc, #224]	; (800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800cada:	691b      	ldr	r3, [r3, #16]
 800cadc:	091b      	lsrs	r3, r3, #4
 800cade:	f003 030f 	and.w	r3, r3, #15
 800cae2:	3301      	adds	r3, #1
 800cae4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cae8:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800caea:	4b34      	ldr	r3, [pc, #208]	; (800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800caec:	691b      	ldr	r3, [r3, #16]
 800caee:	0e5b      	lsrs	r3, r3, #25
 800caf0:	f003 0303 	and.w	r3, r3, #3
 800caf4:	3301      	adds	r3, #1
 800caf6:	005b      	lsls	r3, r3, #1
 800caf8:	69ba      	ldr	r2, [r7, #24]
 800cafa:	fbb2 f3f3 	udiv	r3, r2, r3
 800cafe:	61fb      	str	r3, [r7, #28]
          break;
 800cb00:	e001      	b.n	800cb06 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 800cb02:	bf00      	nop
 800cb04:	e21a      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800cb06:	bf00      	nop
        break;
 800cb08:	e218      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800cb0a:	4b2c      	ldr	r3, [pc, #176]	; (800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800cb0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cb10:	f003 0304 	and.w	r3, r3, #4
 800cb14:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d103      	bne.n	800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 800cb1c:	f7fe fec4 	bl	800b8a8 <HAL_RCC_GetPCLK2Freq>
 800cb20:	61f8      	str	r0, [r7, #28]
        break;
 800cb22:	e20b      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 800cb24:	f7fe fe12 	bl	800b74c <HAL_RCC_GetSysClockFreq>
 800cb28:	61f8      	str	r0, [r7, #28]
        break;
 800cb2a:	e207      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800cb2c:	4b23      	ldr	r3, [pc, #140]	; (800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800cb2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cb32:	f003 0318 	and.w	r3, r3, #24
 800cb36:	60fb      	str	r3, [r7, #12]
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	2b10      	cmp	r3, #16
 800cb3c:	d010      	beq.n	800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	2b10      	cmp	r3, #16
 800cb42:	d834      	bhi.n	800cbae <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d003      	beq.n	800cb52 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2b08      	cmp	r3, #8
 800cb4e:	d024      	beq.n	800cb9a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 800cb50:	e02d      	b.n	800cbae <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800cb52:	69b9      	ldr	r1, [r7, #24]
 800cb54:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800cb58:	f000 fbe2 	bl	800d320 <RCCEx_GetSAIxPeriphCLKFreq>
 800cb5c:	61f8      	str	r0, [r7, #28]
          break;
 800cb5e:	e02b      	b.n	800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800cb60:	4b16      	ldr	r3, [pc, #88]	; (800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f003 0302 	and.w	r3, r3, #2
 800cb68:	2b02      	cmp	r3, #2
 800cb6a:	d122      	bne.n	800cbb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800cb6c:	4b13      	ldr	r3, [pc, #76]	; (800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f003 0308 	and.w	r3, r3, #8
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d005      	beq.n	800cb84 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800cb78:	4b10      	ldr	r3, [pc, #64]	; (800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	091b      	lsrs	r3, r3, #4
 800cb7e:	f003 030f 	and.w	r3, r3, #15
 800cb82:	e005      	b.n	800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 800cb84:	4b0d      	ldr	r3, [pc, #52]	; (800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800cb86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cb8a:	0a1b      	lsrs	r3, r3, #8
 800cb8c:	f003 030f 	and.w	r3, r3, #15
 800cb90:	4a0c      	ldr	r2, [pc, #48]	; (800cbc4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800cb92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb96:	61fb      	str	r3, [r7, #28]
          break;
 800cb98:	e00b      	b.n	800cbb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cb9a:	4b08      	ldr	r3, [pc, #32]	; (800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cba6:	d106      	bne.n	800cbb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 800cba8:	4b05      	ldr	r3, [pc, #20]	; (800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800cbaa:	61fb      	str	r3, [r7, #28]
          break;
 800cbac:	e003      	b.n	800cbb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 800cbae:	bf00      	nop
 800cbb0:	e1c4      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800cbb2:	bf00      	nop
 800cbb4:	e1c2      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800cbb6:	bf00      	nop
        break;
 800cbb8:	e1c0      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800cbba:	bf00      	nop
 800cbbc:	40021000 	.word	0x40021000
 800cbc0:	00f42400 	.word	0x00f42400
 800cbc4:	0801d148 	.word	0x0801d148
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800cbc8:	4b96      	ldr	r3, [pc, #600]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800cbca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800cbd2:	60fb      	str	r3, [r7, #12]
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cbda:	d013      	beq.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cbe2:	d819      	bhi.n	800cc18 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d004      	beq.n	800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbf0:	d004      	beq.n	800cbfc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 800cbf2:	e011      	b.n	800cc18 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800cbf4:	f7fe fe42 	bl	800b87c <HAL_RCC_GetPCLK1Freq>
 800cbf8:	61f8      	str	r0, [r7, #28]
          break;
 800cbfa:	e010      	b.n	800cc1e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 800cbfc:	f7fe fda6 	bl	800b74c <HAL_RCC_GetSysClockFreq>
 800cc00:	61f8      	str	r0, [r7, #28]
          break;
 800cc02:	e00c      	b.n	800cc1e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cc04:	4b87      	ldr	r3, [pc, #540]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cc0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc10:	d104      	bne.n	800cc1c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 800cc12:	4b85      	ldr	r3, [pc, #532]	; (800ce28 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800cc14:	61fb      	str	r3, [r7, #28]
          break;
 800cc16:	e001      	b.n	800cc1c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 800cc18:	bf00      	nop
 800cc1a:	e18f      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800cc1c:	bf00      	nop
        break;
 800cc1e:	e18d      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800cc20:	4b80      	ldr	r3, [pc, #512]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800cc22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc26:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800cc2a:	60fb      	str	r3, [r7, #12]
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc32:	d013      	beq.n	800cc5c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc3a:	d819      	bhi.n	800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d004      	beq.n	800cc4c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cc48:	d004      	beq.n	800cc54 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 800cc4a:	e011      	b.n	800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800cc4c:	f7fe fe16 	bl	800b87c <HAL_RCC_GetPCLK1Freq>
 800cc50:	61f8      	str	r0, [r7, #28]
          break;
 800cc52:	e010      	b.n	800cc76 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 800cc54:	f7fe fd7a 	bl	800b74c <HAL_RCC_GetSysClockFreq>
 800cc58:	61f8      	str	r0, [r7, #28]
          break;
 800cc5a:	e00c      	b.n	800cc76 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cc5c:	4b71      	ldr	r3, [pc, #452]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cc64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc68:	d104      	bne.n	800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 800cc6a:	4b6f      	ldr	r3, [pc, #444]	; (800ce28 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800cc6c:	61fb      	str	r3, [r7, #28]
          break;
 800cc6e:	e001      	b.n	800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 800cc70:	bf00      	nop
 800cc72:	e163      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800cc74:	bf00      	nop
        break;
 800cc76:	e161      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800cc78:	4b6a      	ldr	r3, [pc, #424]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800cc7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cc82:	60fb      	str	r3, [r7, #12]
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc8a:	d013      	beq.n	800ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc92:	d819      	bhi.n	800ccc8 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d004      	beq.n	800cca4 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cca0:	d004      	beq.n	800ccac <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 800cca2:	e011      	b.n	800ccc8 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800cca4:	f7fe fdea 	bl	800b87c <HAL_RCC_GetPCLK1Freq>
 800cca8:	61f8      	str	r0, [r7, #28]
          break;
 800ccaa:	e010      	b.n	800ccce <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 800ccac:	f7fe fd4e 	bl	800b74c <HAL_RCC_GetSysClockFreq>
 800ccb0:	61f8      	str	r0, [r7, #28]
          break;
 800ccb2:	e00c      	b.n	800ccce <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ccb4:	4b5b      	ldr	r3, [pc, #364]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ccbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ccc0:	d104      	bne.n	800cccc <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 800ccc2:	4b59      	ldr	r3, [pc, #356]	; (800ce28 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800ccc4:	61fb      	str	r3, [r7, #28]
          break;
 800ccc6:	e001      	b.n	800cccc <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 800ccc8:	bf00      	nop
 800ccca:	e137      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800cccc:	bf00      	nop
        break;
 800ccce:	e135      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800ccd0:	4b54      	ldr	r3, [pc, #336]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800ccd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ccd6:	f003 0303 	and.w	r3, r3, #3
 800ccda:	60fb      	str	r3, [r7, #12]
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	2b02      	cmp	r3, #2
 800cce0:	d011      	beq.n	800cd06 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2b02      	cmp	r3, #2
 800cce6:	d818      	bhi.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d003      	beq.n	800ccf6 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	2b01      	cmp	r3, #1
 800ccf2:	d004      	beq.n	800ccfe <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 800ccf4:	e011      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ccf6:	f7fe fdc1 	bl	800b87c <HAL_RCC_GetPCLK1Freq>
 800ccfa:	61f8      	str	r0, [r7, #28]
          break;
 800ccfc:	e010      	b.n	800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 800ccfe:	f7fe fd25 	bl	800b74c <HAL_RCC_GetSysClockFreq>
 800cd02:	61f8      	str	r0, [r7, #28]
          break;
 800cd04:	e00c      	b.n	800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cd06:	4b47      	ldr	r3, [pc, #284]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cd0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd12:	d104      	bne.n	800cd1e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 800cd14:	4b44      	ldr	r3, [pc, #272]	; (800ce28 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800cd16:	61fb      	str	r3, [r7, #28]
          break;
 800cd18:	e001      	b.n	800cd1e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 800cd1a:	bf00      	nop
 800cd1c:	e10e      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800cd1e:	bf00      	nop
        break;
 800cd20:	e10c      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800cd22:	4b40      	ldr	r3, [pc, #256]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800cd24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd28:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800cd2c:	60fb      	str	r3, [r7, #12]
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800cd34:	d02c      	beq.n	800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800cd3c:	d833      	bhi.n	800cda6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800cd44:	d01a      	beq.n	800cd7c <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800cd4c:	d82b      	bhi.n	800cda6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d004      	beq.n	800cd5e <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cd5a:	d004      	beq.n	800cd66 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 800cd5c:	e023      	b.n	800cda6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800cd5e:	f7fe fd8d 	bl	800b87c <HAL_RCC_GetPCLK1Freq>
 800cd62:	61f8      	str	r0, [r7, #28]
          break;
 800cd64:	e026      	b.n	800cdb4 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800cd66:	4b2f      	ldr	r3, [pc, #188]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800cd68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cd6c:	f003 0302 	and.w	r3, r3, #2
 800cd70:	2b02      	cmp	r3, #2
 800cd72:	d11a      	bne.n	800cdaa <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 800cd74:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800cd78:	61fb      	str	r3, [r7, #28]
          break;
 800cd7a:	e016      	b.n	800cdaa <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cd7c:	4b29      	ldr	r3, [pc, #164]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cd84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd88:	d111      	bne.n	800cdae <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 800cd8a:	4b27      	ldr	r3, [pc, #156]	; (800ce28 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800cd8c:	61fb      	str	r3, [r7, #28]
          break;
 800cd8e:	e00e      	b.n	800cdae <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800cd90:	4b24      	ldr	r3, [pc, #144]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800cd92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd96:	f003 0302 	and.w	r3, r3, #2
 800cd9a:	2b02      	cmp	r3, #2
 800cd9c:	d109      	bne.n	800cdb2 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 800cd9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cda2:	61fb      	str	r3, [r7, #28]
          break;
 800cda4:	e005      	b.n	800cdb2 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 800cda6:	bf00      	nop
 800cda8:	e0c8      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800cdaa:	bf00      	nop
 800cdac:	e0c6      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800cdae:	bf00      	nop
 800cdb0:	e0c4      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800cdb2:	bf00      	nop
        break;
 800cdb4:	e0c2      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800cdb6:	4b1b      	ldr	r3, [pc, #108]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800cdb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cdbc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800cdc0:	60fb      	str	r3, [r7, #12]
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cdc8:	d030      	beq.n	800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cdd0:	d837      	bhi.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cdd8:	d01a      	beq.n	800ce10 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cde0:	d82f      	bhi.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d004      	beq.n	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cdee:	d004      	beq.n	800cdfa <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 800cdf0:	e027      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 800cdf2:	f7fe fd43 	bl	800b87c <HAL_RCC_GetPCLK1Freq>
 800cdf6:	61f8      	str	r0, [r7, #28]
          break;
 800cdf8:	e02a      	b.n	800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800cdfa:	4b0a      	ldr	r3, [pc, #40]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800cdfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ce00:	f003 0302 	and.w	r3, r3, #2
 800ce04:	2b02      	cmp	r3, #2
 800ce06:	d11e      	bne.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 800ce08:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ce0c:	61fb      	str	r3, [r7, #28]
          break;
 800ce0e:	e01a      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ce10:	4b04      	ldr	r3, [pc, #16]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce1c:	d115      	bne.n	800ce4a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 800ce1e:	4b02      	ldr	r3, [pc, #8]	; (800ce28 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800ce20:	61fb      	str	r3, [r7, #28]
          break;
 800ce22:	e012      	b.n	800ce4a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800ce24:	40021000 	.word	0x40021000
 800ce28:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ce2c:	4b46      	ldr	r3, [pc, #280]	; (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800ce2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce32:	f003 0302 	and.w	r3, r3, #2
 800ce36:	2b02      	cmp	r3, #2
 800ce38:	d109      	bne.n	800ce4e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 800ce3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce3e:	61fb      	str	r3, [r7, #28]
          break;
 800ce40:	e005      	b.n	800ce4e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 800ce42:	bf00      	nop
 800ce44:	e07a      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ce46:	bf00      	nop
 800ce48:	e078      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ce4a:	bf00      	nop
 800ce4c:	e076      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ce4e:	bf00      	nop
        break;
 800ce50:	e074      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800ce52:	4b3d      	ldr	r3, [pc, #244]	; (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800ce54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ce58:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800ce5c:	60fb      	str	r3, [r7, #12]
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ce64:	d02c      	beq.n	800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ce6c:	d855      	bhi.n	800cf1a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d004      	beq.n	800ce7e <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce7a:	d004      	beq.n	800ce86 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 800ce7c:	e04d      	b.n	800cf1a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800ce7e:	f7fe fc65 	bl	800b74c <HAL_RCC_GetSysClockFreq>
 800ce82:	61f8      	str	r0, [r7, #28]
          break;
 800ce84:	e04e      	b.n	800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800ce86:	4b30      	ldr	r3, [pc, #192]	; (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f003 0302 	and.w	r3, r3, #2
 800ce8e:	2b02      	cmp	r3, #2
 800ce90:	d145      	bne.n	800cf1e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800ce92:	4b2d      	ldr	r3, [pc, #180]	; (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f003 0308 	and.w	r3, r3, #8
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d005      	beq.n	800ceaa <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800ce9e:	4b2a      	ldr	r3, [pc, #168]	; (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	091b      	lsrs	r3, r3, #4
 800cea4:	f003 030f 	and.w	r3, r3, #15
 800cea8:	e005      	b.n	800ceb6 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800ceaa:	4b27      	ldr	r3, [pc, #156]	; (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800ceac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ceb0:	0a1b      	lsrs	r3, r3, #8
 800ceb2:	f003 030f 	and.w	r3, r3, #15
 800ceb6:	4a25      	ldr	r2, [pc, #148]	; (800cf4c <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 800ceb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cebc:	61fb      	str	r3, [r7, #28]
          break;
 800cebe:	e02e      	b.n	800cf1e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800cec0:	4b21      	ldr	r3, [pc, #132]	; (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cec8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cecc:	d129      	bne.n	800cf22 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800cece:	4b1e      	ldr	r3, [pc, #120]	; (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800ced0:	68db      	ldr	r3, [r3, #12]
 800ced2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ced6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ceda:	d122      	bne.n	800cf22 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800cedc:	4b1a      	ldr	r3, [pc, #104]	; (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800cede:	68db      	ldr	r3, [r3, #12]
 800cee0:	0a1b      	lsrs	r3, r3, #8
 800cee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cee6:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800cee8:	69bb      	ldr	r3, [r7, #24]
 800ceea:	68ba      	ldr	r2, [r7, #8]
 800ceec:	fb03 f202 	mul.w	r2, r3, r2
 800cef0:	4b15      	ldr	r3, [pc, #84]	; (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800cef2:	68db      	ldr	r3, [r3, #12]
 800cef4:	091b      	lsrs	r3, r3, #4
 800cef6:	f003 030f 	and.w	r3, r3, #15
 800cefa:	3301      	adds	r3, #1
 800cefc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf00:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800cf02:	4b11      	ldr	r3, [pc, #68]	; (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800cf04:	68db      	ldr	r3, [r3, #12]
 800cf06:	0d5b      	lsrs	r3, r3, #21
 800cf08:	f003 0303 	and.w	r3, r3, #3
 800cf0c:	3301      	adds	r3, #1
 800cf0e:	005b      	lsls	r3, r3, #1
 800cf10:	69ba      	ldr	r2, [r7, #24]
 800cf12:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf16:	61fb      	str	r3, [r7, #28]
          break;
 800cf18:	e003      	b.n	800cf22 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 800cf1a:	bf00      	nop
 800cf1c:	e00e      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800cf1e:	bf00      	nop
 800cf20:	e00c      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800cf22:	bf00      	nop
        break;
 800cf24:	e00a      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800cf26:	bf00      	nop
 800cf28:	e008      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800cf2a:	bf00      	nop
 800cf2c:	e006      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800cf2e:	bf00      	nop
 800cf30:	e004      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800cf32:	bf00      	nop
 800cf34:	e002      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800cf36:	bf00      	nop
 800cf38:	e000      	b.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800cf3a:	bf00      	nop
    }
  }

  return(frequency);
 800cf3c:	69fb      	ldr	r3, [r7, #28]
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3720      	adds	r7, #32
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	bf00      	nop
 800cf48:	40021000 	.word	0x40021000
 800cf4c:	0801d148 	.word	0x0801d148

0800cf50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b084      	sub	sp, #16
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800cf5e:	4b72      	ldr	r3, [pc, #456]	; (800d128 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cf60:	68db      	ldr	r3, [r3, #12]
 800cf62:	f003 0303 	and.w	r3, r3, #3
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d00e      	beq.n	800cf88 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800cf6a:	4b6f      	ldr	r3, [pc, #444]	; (800d128 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cf6c:	68db      	ldr	r3, [r3, #12]
 800cf6e:	f003 0203 	and.w	r2, r3, #3
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d103      	bne.n	800cf82 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
       ||
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d142      	bne.n	800d008 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800cf82:	2301      	movs	r3, #1
 800cf84:	73fb      	strb	r3, [r7, #15]
 800cf86:	e03f      	b.n	800d008 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	2b03      	cmp	r3, #3
 800cf8e:	d018      	beq.n	800cfc2 <RCCEx_PLLSAI1_Config+0x72>
 800cf90:	2b03      	cmp	r3, #3
 800cf92:	d825      	bhi.n	800cfe0 <RCCEx_PLLSAI1_Config+0x90>
 800cf94:	2b01      	cmp	r3, #1
 800cf96:	d002      	beq.n	800cf9e <RCCEx_PLLSAI1_Config+0x4e>
 800cf98:	2b02      	cmp	r3, #2
 800cf9a:	d009      	beq.n	800cfb0 <RCCEx_PLLSAI1_Config+0x60>
 800cf9c:	e020      	b.n	800cfe0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800cf9e:	4b62      	ldr	r3, [pc, #392]	; (800d128 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f003 0302 	and.w	r3, r3, #2
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d11d      	bne.n	800cfe6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800cfaa:	2301      	movs	r3, #1
 800cfac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cfae:	e01a      	b.n	800cfe6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800cfb0:	4b5d      	ldr	r3, [pc, #372]	; (800d128 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d116      	bne.n	800cfea <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cfc0:	e013      	b.n	800cfea <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800cfc2:	4b59      	ldr	r3, [pc, #356]	; (800d128 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d10f      	bne.n	800cfee <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800cfce:	4b56      	ldr	r3, [pc, #344]	; (800d128 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d109      	bne.n	800cfee <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800cfda:	2301      	movs	r3, #1
 800cfdc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cfde:	e006      	b.n	800cfee <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	73fb      	strb	r3, [r7, #15]
      break;
 800cfe4:	e004      	b.n	800cff0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800cfe6:	bf00      	nop
 800cfe8:	e002      	b.n	800cff0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800cfea:	bf00      	nop
 800cfec:	e000      	b.n	800cff0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800cfee:	bf00      	nop
    }

    if(status == HAL_OK)
 800cff0:	7bfb      	ldrb	r3, [r7, #15]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d108      	bne.n	800d008 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800cff6:	4b4c      	ldr	r3, [pc, #304]	; (800d128 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cff8:	68db      	ldr	r3, [r3, #12]
 800cffa:	f023 0203 	bic.w	r2, r3, #3
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	4949      	ldr	r1, [pc, #292]	; (800d128 <RCCEx_PLLSAI1_Config+0x1d8>)
 800d004:	4313      	orrs	r3, r2
 800d006:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800d008:	7bfb      	ldrb	r3, [r7, #15]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	f040 8086 	bne.w	800d11c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800d010:	4b45      	ldr	r3, [pc, #276]	; (800d128 <RCCEx_PLLSAI1_Config+0x1d8>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	4a44      	ldr	r2, [pc, #272]	; (800d128 <RCCEx_PLLSAI1_Config+0x1d8>)
 800d016:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d01a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d01c:	f7fa fa82 	bl	8007524 <HAL_GetTick>
 800d020:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d022:	e009      	b.n	800d038 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d024:	f7fa fa7e 	bl	8007524 <HAL_GetTick>
 800d028:	4602      	mov	r2, r0
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	1ad3      	subs	r3, r2, r3
 800d02e:	2b02      	cmp	r3, #2
 800d030:	d902      	bls.n	800d038 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800d032:	2303      	movs	r3, #3
 800d034:	73fb      	strb	r3, [r7, #15]
        break;
 800d036:	e005      	b.n	800d044 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d038:	4b3b      	ldr	r3, [pc, #236]	; (800d128 <RCCEx_PLLSAI1_Config+0x1d8>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d040:	2b00      	cmp	r3, #0
 800d042:	d1ef      	bne.n	800d024 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800d044:	7bfb      	ldrb	r3, [r7, #15]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d168      	bne.n	800d11c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d113      	bne.n	800d078 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d050:	4b35      	ldr	r3, [pc, #212]	; (800d128 <RCCEx_PLLSAI1_Config+0x1d8>)
 800d052:	691a      	ldr	r2, [r3, #16]
 800d054:	4b35      	ldr	r3, [pc, #212]	; (800d12c <RCCEx_PLLSAI1_Config+0x1dc>)
 800d056:	4013      	ands	r3, r2
 800d058:	687a      	ldr	r2, [r7, #4]
 800d05a:	6892      	ldr	r2, [r2, #8]
 800d05c:	0211      	lsls	r1, r2, #8
 800d05e:	687a      	ldr	r2, [r7, #4]
 800d060:	68d2      	ldr	r2, [r2, #12]
 800d062:	06d2      	lsls	r2, r2, #27
 800d064:	4311      	orrs	r1, r2
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	6852      	ldr	r2, [r2, #4]
 800d06a:	3a01      	subs	r2, #1
 800d06c:	0112      	lsls	r2, r2, #4
 800d06e:	430a      	orrs	r2, r1
 800d070:	492d      	ldr	r1, [pc, #180]	; (800d128 <RCCEx_PLLSAI1_Config+0x1d8>)
 800d072:	4313      	orrs	r3, r2
 800d074:	610b      	str	r3, [r1, #16]
 800d076:	e02d      	b.n	800d0d4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	2b01      	cmp	r3, #1
 800d07c:	d115      	bne.n	800d0aa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d07e:	4b2a      	ldr	r3, [pc, #168]	; (800d128 <RCCEx_PLLSAI1_Config+0x1d8>)
 800d080:	691a      	ldr	r2, [r3, #16]
 800d082:	4b2b      	ldr	r3, [pc, #172]	; (800d130 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d084:	4013      	ands	r3, r2
 800d086:	687a      	ldr	r2, [r7, #4]
 800d088:	6892      	ldr	r2, [r2, #8]
 800d08a:	0211      	lsls	r1, r2, #8
 800d08c:	687a      	ldr	r2, [r7, #4]
 800d08e:	6912      	ldr	r2, [r2, #16]
 800d090:	0852      	lsrs	r2, r2, #1
 800d092:	3a01      	subs	r2, #1
 800d094:	0552      	lsls	r2, r2, #21
 800d096:	4311      	orrs	r1, r2
 800d098:	687a      	ldr	r2, [r7, #4]
 800d09a:	6852      	ldr	r2, [r2, #4]
 800d09c:	3a01      	subs	r2, #1
 800d09e:	0112      	lsls	r2, r2, #4
 800d0a0:	430a      	orrs	r2, r1
 800d0a2:	4921      	ldr	r1, [pc, #132]	; (800d128 <RCCEx_PLLSAI1_Config+0x1d8>)
 800d0a4:	4313      	orrs	r3, r2
 800d0a6:	610b      	str	r3, [r1, #16]
 800d0a8:	e014      	b.n	800d0d4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d0aa:	4b1f      	ldr	r3, [pc, #124]	; (800d128 <RCCEx_PLLSAI1_Config+0x1d8>)
 800d0ac:	691a      	ldr	r2, [r3, #16]
 800d0ae:	4b21      	ldr	r3, [pc, #132]	; (800d134 <RCCEx_PLLSAI1_Config+0x1e4>)
 800d0b0:	4013      	ands	r3, r2
 800d0b2:	687a      	ldr	r2, [r7, #4]
 800d0b4:	6892      	ldr	r2, [r2, #8]
 800d0b6:	0211      	lsls	r1, r2, #8
 800d0b8:	687a      	ldr	r2, [r7, #4]
 800d0ba:	6952      	ldr	r2, [r2, #20]
 800d0bc:	0852      	lsrs	r2, r2, #1
 800d0be:	3a01      	subs	r2, #1
 800d0c0:	0652      	lsls	r2, r2, #25
 800d0c2:	4311      	orrs	r1, r2
 800d0c4:	687a      	ldr	r2, [r7, #4]
 800d0c6:	6852      	ldr	r2, [r2, #4]
 800d0c8:	3a01      	subs	r2, #1
 800d0ca:	0112      	lsls	r2, r2, #4
 800d0cc:	430a      	orrs	r2, r1
 800d0ce:	4916      	ldr	r1, [pc, #88]	; (800d128 <RCCEx_PLLSAI1_Config+0x1d8>)
 800d0d0:	4313      	orrs	r3, r2
 800d0d2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800d0d4:	4b14      	ldr	r3, [pc, #80]	; (800d128 <RCCEx_PLLSAI1_Config+0x1d8>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	4a13      	ldr	r2, [pc, #76]	; (800d128 <RCCEx_PLLSAI1_Config+0x1d8>)
 800d0da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d0de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d0e0:	f7fa fa20 	bl	8007524 <HAL_GetTick>
 800d0e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d0e6:	e009      	b.n	800d0fc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d0e8:	f7fa fa1c 	bl	8007524 <HAL_GetTick>
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	1ad3      	subs	r3, r2, r3
 800d0f2:	2b02      	cmp	r3, #2
 800d0f4:	d902      	bls.n	800d0fc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800d0f6:	2303      	movs	r3, #3
 800d0f8:	73fb      	strb	r3, [r7, #15]
          break;
 800d0fa:	e005      	b.n	800d108 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d0fc:	4b0a      	ldr	r3, [pc, #40]	; (800d128 <RCCEx_PLLSAI1_Config+0x1d8>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d104:	2b00      	cmp	r3, #0
 800d106:	d0ef      	beq.n	800d0e8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800d108:	7bfb      	ldrb	r3, [r7, #15]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d106      	bne.n	800d11c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800d10e:	4b06      	ldr	r3, [pc, #24]	; (800d128 <RCCEx_PLLSAI1_Config+0x1d8>)
 800d110:	691a      	ldr	r2, [r3, #16]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	699b      	ldr	r3, [r3, #24]
 800d116:	4904      	ldr	r1, [pc, #16]	; (800d128 <RCCEx_PLLSAI1_Config+0x1d8>)
 800d118:	4313      	orrs	r3, r2
 800d11a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800d11c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3710      	adds	r7, #16
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}
 800d126:	bf00      	nop
 800d128:	40021000 	.word	0x40021000
 800d12c:	07ff800f 	.word	0x07ff800f
 800d130:	ff9f800f 	.word	0xff9f800f
 800d134:	f9ff800f 	.word	0xf9ff800f

0800d138 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b084      	sub	sp, #16
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d142:	2300      	movs	r3, #0
 800d144:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800d146:	4b72      	ldr	r3, [pc, #456]	; (800d310 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d148:	68db      	ldr	r3, [r3, #12]
 800d14a:	f003 0303 	and.w	r3, r3, #3
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d00e      	beq.n	800d170 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800d152:	4b6f      	ldr	r3, [pc, #444]	; (800d310 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d154:	68db      	ldr	r3, [r3, #12]
 800d156:	f003 0203 	and.w	r2, r3, #3
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	429a      	cmp	r2, r3
 800d160:	d103      	bne.n	800d16a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
       ||
 800d166:	2b00      	cmp	r3, #0
 800d168:	d142      	bne.n	800d1f0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800d16a:	2301      	movs	r3, #1
 800d16c:	73fb      	strb	r3, [r7, #15]
 800d16e:	e03f      	b.n	800d1f0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	2b03      	cmp	r3, #3
 800d176:	d018      	beq.n	800d1aa <RCCEx_PLLSAI2_Config+0x72>
 800d178:	2b03      	cmp	r3, #3
 800d17a:	d825      	bhi.n	800d1c8 <RCCEx_PLLSAI2_Config+0x90>
 800d17c:	2b01      	cmp	r3, #1
 800d17e:	d002      	beq.n	800d186 <RCCEx_PLLSAI2_Config+0x4e>
 800d180:	2b02      	cmp	r3, #2
 800d182:	d009      	beq.n	800d198 <RCCEx_PLLSAI2_Config+0x60>
 800d184:	e020      	b.n	800d1c8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800d186:	4b62      	ldr	r3, [pc, #392]	; (800d310 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f003 0302 	and.w	r3, r3, #2
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d11d      	bne.n	800d1ce <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800d192:	2301      	movs	r3, #1
 800d194:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d196:	e01a      	b.n	800d1ce <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800d198:	4b5d      	ldr	r3, [pc, #372]	; (800d310 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d116      	bne.n	800d1d2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d1a8:	e013      	b.n	800d1d2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800d1aa:	4b59      	ldr	r3, [pc, #356]	; (800d310 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d10f      	bne.n	800d1d6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800d1b6:	4b56      	ldr	r3, [pc, #344]	; (800d310 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d109      	bne.n	800d1d6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d1c6:	e006      	b.n	800d1d6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	73fb      	strb	r3, [r7, #15]
      break;
 800d1cc:	e004      	b.n	800d1d8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800d1ce:	bf00      	nop
 800d1d0:	e002      	b.n	800d1d8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800d1d2:	bf00      	nop
 800d1d4:	e000      	b.n	800d1d8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800d1d6:	bf00      	nop
    }

    if(status == HAL_OK)
 800d1d8:	7bfb      	ldrb	r3, [r7, #15]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d108      	bne.n	800d1f0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800d1de:	4b4c      	ldr	r3, [pc, #304]	; (800d310 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d1e0:	68db      	ldr	r3, [r3, #12]
 800d1e2:	f023 0203 	bic.w	r2, r3, #3
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	4949      	ldr	r1, [pc, #292]	; (800d310 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d1ec:	4313      	orrs	r3, r2
 800d1ee:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800d1f0:	7bfb      	ldrb	r3, [r7, #15]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	f040 8086 	bne.w	800d304 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800d1f8:	4b45      	ldr	r3, [pc, #276]	; (800d310 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	4a44      	ldr	r2, [pc, #272]	; (800d310 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d1fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d202:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d204:	f7fa f98e 	bl	8007524 <HAL_GetTick>
 800d208:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d20a:	e009      	b.n	800d220 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800d20c:	f7fa f98a 	bl	8007524 <HAL_GetTick>
 800d210:	4602      	mov	r2, r0
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	1ad3      	subs	r3, r2, r3
 800d216:	2b02      	cmp	r3, #2
 800d218:	d902      	bls.n	800d220 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800d21a:	2303      	movs	r3, #3
 800d21c:	73fb      	strb	r3, [r7, #15]
        break;
 800d21e:	e005      	b.n	800d22c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d220:	4b3b      	ldr	r3, [pc, #236]	; (800d310 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d1ef      	bne.n	800d20c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800d22c:	7bfb      	ldrb	r3, [r7, #15]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d168      	bne.n	800d304 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d113      	bne.n	800d260 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d238:	4b35      	ldr	r3, [pc, #212]	; (800d310 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d23a:	695a      	ldr	r2, [r3, #20]
 800d23c:	4b35      	ldr	r3, [pc, #212]	; (800d314 <RCCEx_PLLSAI2_Config+0x1dc>)
 800d23e:	4013      	ands	r3, r2
 800d240:	687a      	ldr	r2, [r7, #4]
 800d242:	6892      	ldr	r2, [r2, #8]
 800d244:	0211      	lsls	r1, r2, #8
 800d246:	687a      	ldr	r2, [r7, #4]
 800d248:	68d2      	ldr	r2, [r2, #12]
 800d24a:	06d2      	lsls	r2, r2, #27
 800d24c:	4311      	orrs	r1, r2
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	6852      	ldr	r2, [r2, #4]
 800d252:	3a01      	subs	r2, #1
 800d254:	0112      	lsls	r2, r2, #4
 800d256:	430a      	orrs	r2, r1
 800d258:	492d      	ldr	r1, [pc, #180]	; (800d310 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d25a:	4313      	orrs	r3, r2
 800d25c:	614b      	str	r3, [r1, #20]
 800d25e:	e02d      	b.n	800d2bc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	2b01      	cmp	r3, #1
 800d264:	d115      	bne.n	800d292 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d266:	4b2a      	ldr	r3, [pc, #168]	; (800d310 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d268:	695a      	ldr	r2, [r3, #20]
 800d26a:	4b2b      	ldr	r3, [pc, #172]	; (800d318 <RCCEx_PLLSAI2_Config+0x1e0>)
 800d26c:	4013      	ands	r3, r2
 800d26e:	687a      	ldr	r2, [r7, #4]
 800d270:	6892      	ldr	r2, [r2, #8]
 800d272:	0211      	lsls	r1, r2, #8
 800d274:	687a      	ldr	r2, [r7, #4]
 800d276:	6912      	ldr	r2, [r2, #16]
 800d278:	0852      	lsrs	r2, r2, #1
 800d27a:	3a01      	subs	r2, #1
 800d27c:	0552      	lsls	r2, r2, #21
 800d27e:	4311      	orrs	r1, r2
 800d280:	687a      	ldr	r2, [r7, #4]
 800d282:	6852      	ldr	r2, [r2, #4]
 800d284:	3a01      	subs	r2, #1
 800d286:	0112      	lsls	r2, r2, #4
 800d288:	430a      	orrs	r2, r1
 800d28a:	4921      	ldr	r1, [pc, #132]	; (800d310 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d28c:	4313      	orrs	r3, r2
 800d28e:	614b      	str	r3, [r1, #20]
 800d290:	e014      	b.n	800d2bc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d292:	4b1f      	ldr	r3, [pc, #124]	; (800d310 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d294:	695a      	ldr	r2, [r3, #20]
 800d296:	4b21      	ldr	r3, [pc, #132]	; (800d31c <RCCEx_PLLSAI2_Config+0x1e4>)
 800d298:	4013      	ands	r3, r2
 800d29a:	687a      	ldr	r2, [r7, #4]
 800d29c:	6892      	ldr	r2, [r2, #8]
 800d29e:	0211      	lsls	r1, r2, #8
 800d2a0:	687a      	ldr	r2, [r7, #4]
 800d2a2:	6952      	ldr	r2, [r2, #20]
 800d2a4:	0852      	lsrs	r2, r2, #1
 800d2a6:	3a01      	subs	r2, #1
 800d2a8:	0652      	lsls	r2, r2, #25
 800d2aa:	4311      	orrs	r1, r2
 800d2ac:	687a      	ldr	r2, [r7, #4]
 800d2ae:	6852      	ldr	r2, [r2, #4]
 800d2b0:	3a01      	subs	r2, #1
 800d2b2:	0112      	lsls	r2, r2, #4
 800d2b4:	430a      	orrs	r2, r1
 800d2b6:	4916      	ldr	r1, [pc, #88]	; (800d310 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d2b8:	4313      	orrs	r3, r2
 800d2ba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800d2bc:	4b14      	ldr	r3, [pc, #80]	; (800d310 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4a13      	ldr	r2, [pc, #76]	; (800d310 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d2c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d2c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d2c8:	f7fa f92c 	bl	8007524 <HAL_GetTick>
 800d2cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800d2ce:	e009      	b.n	800d2e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800d2d0:	f7fa f928 	bl	8007524 <HAL_GetTick>
 800d2d4:	4602      	mov	r2, r0
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	1ad3      	subs	r3, r2, r3
 800d2da:	2b02      	cmp	r3, #2
 800d2dc:	d902      	bls.n	800d2e4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800d2de:	2303      	movs	r3, #3
 800d2e0:	73fb      	strb	r3, [r7, #15]
          break;
 800d2e2:	e005      	b.n	800d2f0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800d2e4:	4b0a      	ldr	r3, [pc, #40]	; (800d310 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d0ef      	beq.n	800d2d0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800d2f0:	7bfb      	ldrb	r3, [r7, #15]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d106      	bne.n	800d304 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800d2f6:	4b06      	ldr	r3, [pc, #24]	; (800d310 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d2f8:	695a      	ldr	r2, [r3, #20]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	699b      	ldr	r3, [r3, #24]
 800d2fe:	4904      	ldr	r1, [pc, #16]	; (800d310 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d300:	4313      	orrs	r3, r2
 800d302:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800d304:	7bfb      	ldrb	r3, [r7, #15]
}
 800d306:	4618      	mov	r0, r3
 800d308:	3710      	adds	r7, #16
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}
 800d30e:	bf00      	nop
 800d310:	40021000 	.word	0x40021000
 800d314:	07ff800f 	.word	0x07ff800f
 800d318:	ff9f800f 	.word	0xff9f800f
 800d31c:	f9ff800f 	.word	0xf9ff800f

0800d320 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800d320:	b480      	push	{r7}
 800d322:	b089      	sub	sp, #36	; 0x24
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
 800d328:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800d32a:	2300      	movs	r3, #0
 800d32c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800d32e:	2300      	movs	r3, #0
 800d330:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800d332:	2300      	movs	r3, #0
 800d334:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d33c:	d10b      	bne.n	800d356 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800d33e:	4b7e      	ldr	r3, [pc, #504]	; (800d538 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d340:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d344:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800d348:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800d34a:	69bb      	ldr	r3, [r7, #24]
 800d34c:	2b60      	cmp	r3, #96	; 0x60
 800d34e:	d112      	bne.n	800d376 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800d350:	4b7a      	ldr	r3, [pc, #488]	; (800d53c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800d352:	61fb      	str	r3, [r7, #28]
 800d354:	e00f      	b.n	800d376 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d35c:	d10b      	bne.n	800d376 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800d35e:	4b76      	ldr	r3, [pc, #472]	; (800d538 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d360:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d364:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d368:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800d36a:	69bb      	ldr	r3, [r7, #24]
 800d36c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d370:	d101      	bne.n	800d376 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800d372:	4b72      	ldr	r3, [pc, #456]	; (800d53c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800d374:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800d376:	69fb      	ldr	r3, [r7, #28]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	f040 80d6 	bne.w	800d52a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800d382:	69bb      	ldr	r3, [r7, #24]
 800d384:	2b40      	cmp	r3, #64	; 0x40
 800d386:	d003      	beq.n	800d390 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 800d388:	69bb      	ldr	r3, [r7, #24]
 800d38a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d38e:	d13b      	bne.n	800d408 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800d390:	4b69      	ldr	r3, [pc, #420]	; (800d538 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d398:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d39c:	f040 80c4 	bne.w	800d528 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 800d3a0:	4b65      	ldr	r3, [pc, #404]	; (800d538 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d3a2:	68db      	ldr	r3, [r3, #12]
 800d3a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	f000 80bd 	beq.w	800d528 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800d3ae:	4b62      	ldr	r3, [pc, #392]	; (800d538 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d3b0:	68db      	ldr	r3, [r3, #12]
 800d3b2:	091b      	lsrs	r3, r3, #4
 800d3b4:	f003 030f 	and.w	r3, r3, #15
 800d3b8:	3301      	adds	r3, #1
 800d3ba:	693a      	ldr	r2, [r7, #16]
 800d3bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3c0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800d3c2:	4b5d      	ldr	r3, [pc, #372]	; (800d538 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d3c4:	68db      	ldr	r3, [r3, #12]
 800d3c6:	0a1b      	lsrs	r3, r3, #8
 800d3c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3cc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800d3ce:	4b5a      	ldr	r3, [pc, #360]	; (800d538 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d3d0:	68db      	ldr	r3, [r3, #12]
 800d3d2:	0edb      	lsrs	r3, r3, #27
 800d3d4:	f003 031f 	and.w	r3, r3, #31
 800d3d8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d10a      	bne.n	800d3f6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800d3e0:	4b55      	ldr	r3, [pc, #340]	; (800d538 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d3e2:	68db      	ldr	r3, [r3, #12]
 800d3e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d002      	beq.n	800d3f2 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800d3ec:	2311      	movs	r3, #17
 800d3ee:	617b      	str	r3, [r7, #20]
 800d3f0:	e001      	b.n	800d3f6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800d3f2:	2307      	movs	r3, #7
 800d3f4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	68fa      	ldr	r2, [r7, #12]
 800d3fa:	fb03 f202 	mul.w	r2, r3, r2
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	fbb2 f3f3 	udiv	r3, r2, r3
 800d404:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800d406:	e08f      	b.n	800d528 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800d408:	69bb      	ldr	r3, [r7, #24]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d13a      	bne.n	800d484 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800d40e:	4b4a      	ldr	r3, [pc, #296]	; (800d538 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d416:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d41a:	f040 8086 	bne.w	800d52a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800d41e:	4b46      	ldr	r3, [pc, #280]	; (800d538 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d420:	691b      	ldr	r3, [r3, #16]
 800d422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d426:	2b00      	cmp	r3, #0
 800d428:	d07f      	beq.n	800d52a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800d42a:	4b43      	ldr	r3, [pc, #268]	; (800d538 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d42c:	691b      	ldr	r3, [r3, #16]
 800d42e:	091b      	lsrs	r3, r3, #4
 800d430:	f003 030f 	and.w	r3, r3, #15
 800d434:	3301      	adds	r3, #1
 800d436:	693a      	ldr	r2, [r7, #16]
 800d438:	fbb2 f3f3 	udiv	r3, r2, r3
 800d43c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800d43e:	4b3e      	ldr	r3, [pc, #248]	; (800d538 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d440:	691b      	ldr	r3, [r3, #16]
 800d442:	0a1b      	lsrs	r3, r3, #8
 800d444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d448:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800d44a:	4b3b      	ldr	r3, [pc, #236]	; (800d538 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d44c:	691b      	ldr	r3, [r3, #16]
 800d44e:	0edb      	lsrs	r3, r3, #27
 800d450:	f003 031f 	and.w	r3, r3, #31
 800d454:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800d456:	697b      	ldr	r3, [r7, #20]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d10a      	bne.n	800d472 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800d45c:	4b36      	ldr	r3, [pc, #216]	; (800d538 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d45e:	691b      	ldr	r3, [r3, #16]
 800d460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d464:	2b00      	cmp	r3, #0
 800d466:	d002      	beq.n	800d46e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 800d468:	2311      	movs	r3, #17
 800d46a:	617b      	str	r3, [r7, #20]
 800d46c:	e001      	b.n	800d472 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800d46e:	2307      	movs	r3, #7
 800d470:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	68fa      	ldr	r2, [r7, #12]
 800d476:	fb03 f202 	mul.w	r2, r3, r2
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d480:	61fb      	str	r3, [r7, #28]
 800d482:	e052      	b.n	800d52a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800d484:	69bb      	ldr	r3, [r7, #24]
 800d486:	2b80      	cmp	r3, #128	; 0x80
 800d488:	d003      	beq.n	800d492 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800d48a:	69bb      	ldr	r3, [r7, #24]
 800d48c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d490:	d109      	bne.n	800d4a6 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d492:	4b29      	ldr	r3, [pc, #164]	; (800d538 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d49a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d49e:	d144      	bne.n	800d52a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 800d4a0:	4b27      	ldr	r3, [pc, #156]	; (800d540 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800d4a2:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d4a4:	e041      	b.n	800d52a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800d4a6:	69bb      	ldr	r3, [r7, #24]
 800d4a8:	2b20      	cmp	r3, #32
 800d4aa:	d003      	beq.n	800d4b4 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800d4ac:	69bb      	ldr	r3, [r7, #24]
 800d4ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4b2:	d13a      	bne.n	800d52a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800d4b4:	4b20      	ldr	r3, [pc, #128]	; (800d538 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d4bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d4c0:	d133      	bne.n	800d52a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800d4c2:	4b1d      	ldr	r3, [pc, #116]	; (800d538 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d4c4:	695b      	ldr	r3, [r3, #20]
 800d4c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d02d      	beq.n	800d52a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800d4ce:	4b1a      	ldr	r3, [pc, #104]	; (800d538 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d4d0:	695b      	ldr	r3, [r3, #20]
 800d4d2:	091b      	lsrs	r3, r3, #4
 800d4d4:	f003 030f 	and.w	r3, r3, #15
 800d4d8:	3301      	adds	r3, #1
 800d4da:	693a      	ldr	r2, [r7, #16]
 800d4dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4e0:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800d4e2:	4b15      	ldr	r3, [pc, #84]	; (800d538 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d4e4:	695b      	ldr	r3, [r3, #20]
 800d4e6:	0a1b      	lsrs	r3, r3, #8
 800d4e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4ec:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800d4ee:	4b12      	ldr	r3, [pc, #72]	; (800d538 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d4f0:	695b      	ldr	r3, [r3, #20]
 800d4f2:	0edb      	lsrs	r3, r3, #27
 800d4f4:	f003 031f 	and.w	r3, r3, #31
 800d4f8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d10a      	bne.n	800d516 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800d500:	4b0d      	ldr	r3, [pc, #52]	; (800d538 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d502:	695b      	ldr	r3, [r3, #20]
 800d504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d002      	beq.n	800d512 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 800d50c:	2311      	movs	r3, #17
 800d50e:	617b      	str	r3, [r7, #20]
 800d510:	e001      	b.n	800d516 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800d512:	2307      	movs	r3, #7
 800d514:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	68fa      	ldr	r2, [r7, #12]
 800d51a:	fb03 f202 	mul.w	r2, r3, r2
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	fbb2 f3f3 	udiv	r3, r2, r3
 800d524:	61fb      	str	r3, [r7, #28]
 800d526:	e000      	b.n	800d52a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800d528:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800d52a:	69fb      	ldr	r3, [r7, #28]
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3724      	adds	r7, #36	; 0x24
 800d530:	46bd      	mov	sp, r7
 800d532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d536:	4770      	bx	lr
 800d538:	40021000 	.word	0x40021000
 800d53c:	001fff68 	.word	0x001fff68
 800d540:	00f42400 	.word	0x00f42400

0800d544 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b08a      	sub	sp, #40	; 0x28
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d101      	bne.n	800d556 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d552:	2301      	movs	r3, #1
 800d554:	e078      	b.n	800d648 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d55c:	b2db      	uxtb	r3, r3
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d105      	bne.n	800d56e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2200      	movs	r2, #0
 800d566:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f7f7 ffbb 	bl	80054e4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2203      	movs	r2, #3
 800d572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f000 f86a 	bl	800d650 <HAL_SD_InitCard>
 800d57c:	4603      	mov	r3, r0
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d001      	beq.n	800d586 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d582:	2301      	movs	r3, #1
 800d584:	e060      	b.n	800d648 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d586:	f107 0308 	add.w	r3, r7, #8
 800d58a:	4619      	mov	r1, r3
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f000 fdb5 	bl	800e0fc <HAL_SD_GetCardStatus>
 800d592:	4603      	mov	r3, r0
 800d594:	2b00      	cmp	r3, #0
 800d596:	d001      	beq.n	800d59c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800d598:	2301      	movs	r3, #1
 800d59a:	e055      	b.n	800d648 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d59c:	7e3b      	ldrb	r3, [r7, #24]
 800d59e:	b2db      	uxtb	r3, r3
 800d5a0:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d5a2:	7e7b      	ldrb	r3, [r7, #25]
 800d5a4:	b2db      	uxtb	r3, r3
 800d5a6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5ac:	2b01      	cmp	r3, #1
 800d5ae:	d10a      	bne.n	800d5c6 <HAL_SD_Init+0x82>
 800d5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d102      	bne.n	800d5bc <HAL_SD_Init+0x78>
 800d5b6:	6a3b      	ldr	r3, [r7, #32]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d004      	beq.n	800d5c6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d5c2:	65da      	str	r2, [r3, #92]	; 0x5c
 800d5c4:	e00b      	b.n	800d5de <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5ca:	2b01      	cmp	r3, #1
 800d5cc:	d104      	bne.n	800d5d8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d5d4:	65da      	str	r2, [r3, #92]	; 0x5c
 800d5d6:	e002      	b.n	800d5de <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	68db      	ldr	r3, [r3, #12]
 800d5e2:	4619      	mov	r1, r3
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f000 fe6b 	bl	800e2c0 <HAL_SD_ConfigWideBusOperation>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d001      	beq.n	800d5f4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	e029      	b.n	800d648 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d5f4:	f7f9 ff96 	bl	8007524 <HAL_GetTick>
 800d5f8:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d5fa:	e014      	b.n	800d626 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800d5fc:	f7f9 ff92 	bl	8007524 <HAL_GetTick>
 800d600:	4602      	mov	r2, r0
 800d602:	69fb      	ldr	r3, [r7, #28]
 800d604:	1ad3      	subs	r3, r2, r3
 800d606:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d60a:	d10c      	bne.n	800d626 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d612:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2201      	movs	r2, #1
 800d618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2200      	movs	r2, #0
 800d620:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800d622:	2303      	movs	r3, #3
 800d624:	e010      	b.n	800d648 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	f000 ff5e 	bl	800e4e8 <HAL_SD_GetCardState>
 800d62c:	4603      	mov	r3, r0
 800d62e:	2b04      	cmp	r3, #4
 800d630:	d1e4      	bne.n	800d5fc <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2200      	movs	r2, #0
 800d636:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2200      	movs	r2, #0
 800d63c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2201      	movs	r2, #1
 800d642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d646:	2300      	movs	r3, #0
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3728      	adds	r7, #40	; 0x28
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d650:	b5b0      	push	{r4, r5, r7, lr}
 800d652:	b08e      	sub	sp, #56	; 0x38
 800d654:	af04      	add	r7, sp, #16
 800d656:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d658:	2300      	movs	r3, #0
 800d65a:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d65c:	2300      	movs	r3, #0
 800d65e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d660:	2300      	movs	r3, #0
 800d662:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d664:	2300      	movs	r3, #0
 800d666:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800d668:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800d66c:	f7fe fd4e 	bl	800c10c <HAL_RCCEx_GetPeriphCLKFreq>
 800d670:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d674:	2b00      	cmp	r3, #0
 800d676:	d109      	bne.n	800d68c <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2201      	movs	r2, #1
 800d67c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d686:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d688:	2301      	movs	r3, #1
 800d68a:	e079      	b.n	800d780 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d68e:	0a1b      	lsrs	r3, r3, #8
 800d690:	4a3d      	ldr	r2, [pc, #244]	; (800d788 <HAL_SD_InitCard+0x138>)
 800d692:	fba2 2303 	umull	r2, r3, r2, r3
 800d696:	091b      	lsrs	r3, r3, #4
 800d698:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	699b      	ldr	r3, [r3, #24]
 800d69e:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	699b      	ldr	r3, [r3, #24]
 800d6a4:	2b01      	cmp	r3, #1
 800d6a6:	d107      	bne.n	800d6b8 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	681a      	ldr	r2, [r3, #0]
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	f042 0210 	orr.w	r2, r2, #16
 800d6b6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681d      	ldr	r5, [r3, #0]
 800d6bc:	466c      	mov	r4, sp
 800d6be:	f107 0314 	add.w	r3, r7, #20
 800d6c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d6c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d6ca:	f107 0308 	add.w	r3, r7, #8
 800d6ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d6d0:	4628      	mov	r0, r5
 800d6d2:	f005 f8a5 	bl	8012820 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f005 f8e8 	bl	80128b0 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800d6e0:	69bb      	ldr	r3, [r7, #24]
 800d6e2:	005b      	lsls	r3, r3, #1
 800d6e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6ea:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800d6ec:	4a27      	ldr	r2, [pc, #156]	; (800d78c <HAL_SD_InitCard+0x13c>)
 800d6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6f4:	3301      	adds	r3, #1
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f7f9 ff20 	bl	800753c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f000 ffd3 	bl	800e6a8 <SD_PowerON>
 800d702:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d704:	6a3b      	ldr	r3, [r7, #32]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d00b      	beq.n	800d722 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2201      	movs	r2, #1
 800d70e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d716:	6a3b      	ldr	r3, [r7, #32]
 800d718:	431a      	orrs	r2, r3
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d71e:	2301      	movs	r3, #1
 800d720:	e02e      	b.n	800d780 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	f000 ff00 	bl	800e528 <SD_InitCard>
 800d728:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d72a:	6a3b      	ldr	r3, [r7, #32]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d00b      	beq.n	800d748 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2201      	movs	r2, #1
 800d734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d73c:	6a3b      	ldr	r3, [r7, #32]
 800d73e:	431a      	orrs	r2, r3
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d744:	2301      	movs	r3, #1
 800d746:	e01b      	b.n	800d780 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d750:	4618      	mov	r0, r3
 800d752:	f005 f943 	bl	80129dc <SDMMC_CmdBlockLength>
 800d756:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d758:	6a3b      	ldr	r3, [r7, #32]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d00f      	beq.n	800d77e <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	4a0b      	ldr	r2, [pc, #44]	; (800d790 <HAL_SD_InitCard+0x140>)
 800d764:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d76a:	6a3b      	ldr	r3, [r7, #32]
 800d76c:	431a      	orrs	r2, r3
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2201      	movs	r2, #1
 800d776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d77a:	2301      	movs	r3, #1
 800d77c:	e000      	b.n	800d780 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 800d77e:	2300      	movs	r3, #0
}
 800d780:	4618      	mov	r0, r3
 800d782:	3728      	adds	r7, #40	; 0x28
 800d784:	46bd      	mov	sp, r7
 800d786:	bdb0      	pop	{r4, r5, r7, pc}
 800d788:	014f8b59 	.word	0x014f8b59
 800d78c:	00012110 	.word	0x00012110
 800d790:	1fe00fff 	.word	0x1fe00fff

0800d794 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b08c      	sub	sp, #48	; 0x30
 800d798:	af00      	add	r7, sp, #0
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	60b9      	str	r1, [r7, #8]
 800d79e:	607a      	str	r2, [r7, #4]
 800d7a0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d107      	bne.n	800d7bc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d7b8:	2301      	movs	r3, #1
 800d7ba:	e08d      	b.n	800d8d8 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d7c2:	b2db      	uxtb	r3, r3
 800d7c4:	2b01      	cmp	r3, #1
 800d7c6:	f040 8086 	bne.w	800d8d6 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d7d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	441a      	add	r2, r3
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7da:	429a      	cmp	r2, r3
 800d7dc:	d907      	bls.n	800d7ee <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	e074      	b.n	800d8d8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	2203      	movs	r2, #3
 800d7f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	68ba      	ldr	r2, [r7, #8]
 800d802:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	025a      	lsls	r2, r3, #9
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d810:	2b01      	cmp	r3, #1
 800d812:	d002      	beq.n	800d81a <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 800d814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d816:	025b      	lsls	r3, r3, #9
 800d818:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d81a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d81e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	025b      	lsls	r3, r3, #9
 800d824:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d826:	2390      	movs	r3, #144	; 0x90
 800d828:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d82a:	2302      	movs	r3, #2
 800d82c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d82e:	2300      	movs	r3, #0
 800d830:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 800d832:	2300      	movs	r3, #0
 800d834:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	f107 0210 	add.w	r2, r7, #16
 800d83e:	4611      	mov	r1, r2
 800d840:	4618      	mov	r0, r3
 800d842:	f005 f89f 	bl	8012984 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	68da      	ldr	r2, [r3, #12]
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d854:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	68ba      	ldr	r2, [r7, #8]
 800d85c:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	2201      	movs	r2, #1
 800d864:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	2b01      	cmp	r3, #1
 800d86a:	d90a      	bls.n	800d882 <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	2282      	movs	r2, #130	; 0x82
 800d870:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d878:	4618      	mov	r0, r3
 800d87a:	f005 f8f5 	bl	8012a68 <SDMMC_CmdReadMultiBlock>
 800d87e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d880:	e009      	b.n	800d896 <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	2281      	movs	r2, #129	; 0x81
 800d886:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d88e:	4618      	mov	r0, r3
 800d890:	f005 f8c7 	bl	8012a22 <SDMMC_CmdReadSingleBlock>
 800d894:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d012      	beq.n	800d8c2 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4a0f      	ldr	r2, [pc, #60]	; (800d8e0 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d8a2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8aa:	431a      	orrs	r2, r3
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d8be:	2301      	movs	r3, #1
 800d8c0:	e00a      	b.n	800d8d8 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d8d0:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	e000      	b.n	800d8d8 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800d8d6:	2302      	movs	r3, #2
  }
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3730      	adds	r7, #48	; 0x30
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}
 800d8e0:	1fe00fff 	.word	0x1fe00fff

0800d8e4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b08c      	sub	sp, #48	; 0x30
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	60f8      	str	r0, [r7, #12]
 800d8ec:	60b9      	str	r1, [r7, #8]
 800d8ee:	607a      	str	r2, [r7, #4]
 800d8f0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d107      	bne.n	800d90c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d900:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d908:	2301      	movs	r3, #1
 800d90a:	e08d      	b.n	800da28 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d912:	b2db      	uxtb	r3, r3
 800d914:	2b01      	cmp	r3, #1
 800d916:	f040 8086 	bne.w	800da26 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	2200      	movs	r2, #0
 800d91e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	441a      	add	r2, r3
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d92a:	429a      	cmp	r2, r3
 800d92c:	d907      	bls.n	800d93e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d932:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d93a:	2301      	movs	r3, #1
 800d93c:	e074      	b.n	800da28 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	2203      	movs	r2, #3
 800d942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	2200      	movs	r2, #0
 800d94c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	68ba      	ldr	r2, [r7, #8]
 800d952:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	025a      	lsls	r2, r3, #9
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d960:	2b01      	cmp	r3, #1
 800d962:	d002      	beq.n	800d96a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d966:	025b      	lsls	r3, r3, #9
 800d968:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d96a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d96e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	025b      	lsls	r3, r3, #9
 800d974:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d976:	2390      	movs	r3, #144	; 0x90
 800d978:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d97a:	2300      	movs	r3, #0
 800d97c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d97e:	2300      	movs	r3, #0
 800d980:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d982:	2300      	movs	r3, #0
 800d984:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f107 0210 	add.w	r2, r7, #16
 800d98e:	4611      	mov	r1, r2
 800d990:	4618      	mov	r0, r3
 800d992:	f004 fff7 	bl	8012984 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	68da      	ldr	r2, [r3, #12]
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d9a4:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	68ba      	ldr	r2, [r7, #8]
 800d9ac:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	2b01      	cmp	r3, #1
 800d9ba:	d90a      	bls.n	800d9d2 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	22a0      	movs	r2, #160	; 0xa0
 800d9c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f005 f893 	bl	8012af4 <SDMMC_CmdWriteMultiBlock>
 800d9ce:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d9d0:	e009      	b.n	800d9e6 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	2290      	movs	r2, #144	; 0x90
 800d9d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f005 f865 	bl	8012aae <SDMMC_CmdWriteSingleBlock>
 800d9e4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d012      	beq.n	800da12 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	4a0f      	ldr	r2, [pc, #60]	; (800da30 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d9f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9fa:	431a      	orrs	r2, r3
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	2201      	movs	r2, #1
 800da04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	2200      	movs	r2, #0
 800da0c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800da0e:	2301      	movs	r3, #1
 800da10:	e00a      	b.n	800da28 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800da20:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 800da22:	2300      	movs	r3, #0
 800da24:	e000      	b.n	800da28 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800da26:	2302      	movs	r3, #2
  }
}
 800da28:	4618      	mov	r0, r3
 800da2a:	3730      	adds	r7, #48	; 0x30
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}
 800da30:	1fe00fff 	.word	0x1fe00fff

0800da34 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b084      	sub	sp, #16
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da40:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d008      	beq.n	800da62 <HAL_SD_IRQHandler+0x2e>
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	f003 0308 	and.w	r3, r3, #8
 800da56:	2b00      	cmp	r3, #0
 800da58:	d003      	beq.n	800da62 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f001 f98e 	bl	800ed7c <SD_Read_IT>
 800da60:	e199      	b.n	800dd96 <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	f000 80ae 	beq.w	800dbce <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	f44f 7280 	mov.w	r2, #256	; 0x100
 800da7a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da82:	687a      	ldr	r2, [r7, #4]
 800da84:	6812      	ldr	r2, [r2, #0]
 800da86:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800da8a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800da8e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800da9e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	68da      	ldr	r2, [r3, #12]
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800daae:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	f003 0308 	and.w	r3, r3, #8
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d038      	beq.n	800db2c <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	f003 0302 	and.w	r3, r3, #2
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d104      	bne.n	800dace <HAL_SD_IRQHandler+0x9a>
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	f003 0320 	and.w	r3, r3, #32
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d011      	beq.n	800daf2 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	4618      	mov	r0, r3
 800dad4:	f005 f832 	bl	8012b3c <SDMMC_CmdStopTransfer>
 800dad8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d008      	beq.n	800daf2 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	431a      	orrs	r2, r3
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f000 f957 	bl	800dda0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	4a90      	ldr	r2, [pc, #576]	; (800dd38 <HAL_SD_IRQHandler+0x304>)
 800daf8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2201      	movs	r2, #1
 800dafe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2200      	movs	r2, #0
 800db06:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	f003 0301 	and.w	r3, r3, #1
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d104      	bne.n	800db1c <HAL_SD_IRQHandler+0xe8>
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	f003 0302 	and.w	r3, r3, #2
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d003      	beq.n	800db24 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f006 ff63 	bl	80149e8 <HAL_SD_RxCpltCallback>
 800db22:	e138      	b.n	800dd96 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f006 ff55 	bl	80149d4 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 800db2a:	e134      	b.n	800dd96 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db32:	2b00      	cmp	r3, #0
 800db34:	f000 812f 	beq.w	800dd96 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	2200      	movs	r2, #0
 800db3e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	2200      	movs	r2, #0
 800db46:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	2200      	movs	r2, #0
 800db4e:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	f003 0302 	and.w	r3, r3, #2
 800db56:	2b00      	cmp	r3, #0
 800db58:	d104      	bne.n	800db64 <HAL_SD_IRQHandler+0x130>
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	f003 0320 	and.w	r3, r3, #32
 800db60:	2b00      	cmp	r3, #0
 800db62:	d011      	beq.n	800db88 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	4618      	mov	r0, r3
 800db6a:	f004 ffe7 	bl	8012b3c <SDMMC_CmdStopTransfer>
 800db6e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d008      	beq.n	800db88 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	431a      	orrs	r2, r3
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800db82:	6878      	ldr	r0, [r7, #4]
 800db84:	f000 f90c 	bl	800dda0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2201      	movs	r2, #1
 800db8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2200      	movs	r2, #0
 800db94:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	f003 0310 	and.w	r3, r3, #16
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d104      	bne.n	800dbaa <HAL_SD_IRQHandler+0x176>
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	f003 0320 	and.w	r3, r3, #32
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d002      	beq.n	800dbb0 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f006 ff12 	bl	80149d4 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	f003 0301 	and.w	r3, r3, #1
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d105      	bne.n	800dbc6 <HAL_SD_IRQHandler+0x192>
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	f003 0302 	and.w	r3, r3, #2
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	f000 80e8 	beq.w	800dd96 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f006 ff0e 	bl	80149e8 <HAL_SD_RxCpltCallback>
}
 800dbcc:	e0e3      	b.n	800dd96 <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d008      	beq.n	800dbee <HAL_SD_IRQHandler+0x1ba>
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	f003 0308 	and.w	r3, r3, #8
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d003      	beq.n	800dbee <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f001 f919 	bl	800ee1e <SD_Write_IT>
 800dbec:	e0d3      	b.n	800dd96 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbf4:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	f000 809f 	beq.w	800dd3c <HAL_SD_IRQHandler+0x308>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc04:	f003 0302 	and.w	r3, r3, #2
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d005      	beq.n	800dc18 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc10:	f043 0202 	orr.w	r2, r3, #2
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc1e:	f003 0308 	and.w	r3, r3, #8
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d005      	beq.n	800dc32 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc2a:	f043 0208 	orr.w	r2, r3, #8
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc38:	f003 0320 	and.w	r3, r3, #32
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d005      	beq.n	800dc4c <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc44:	f043 0220 	orr.w	r2, r3, #32
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc52:	f003 0310 	and.w	r3, r3, #16
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d005      	beq.n	800dc66 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc5e:	f043 0210 	orr.w	r2, r3, #16
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	4a33      	ldr	r2, [pc, #204]	; (800dd38 <HAL_SD_IRQHandler+0x304>)
 800dc6c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800dc7c:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	68da      	ldr	r2, [r3, #12]
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dc8c:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dc9c:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	68da      	ldr	r2, [r3, #12]
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800dcac:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f004 ff42 	bl	8012b3c <SDMMC_CmdStopTransfer>
 800dcb8:	4602      	mov	r2, r0
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcbe:	431a      	orrs	r2, r3
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	68da      	ldr	r2, [r3, #12]
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dcd2:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dcdc:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	f003 0308 	and.w	r3, r3, #8
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d00a      	beq.n	800dcfe <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2201      	movs	r2, #1
 800dcec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f000 f852 	bl	800dda0 <HAL_SD_ErrorCallback>
}
 800dcfc:	e04b      	b.n	800dd96 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d046      	beq.n	800dd96 <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d042      	beq.n	800dd96 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800dd1e:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	2200      	movs	r2, #0
 800dd26:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2201      	movs	r2, #1
 800dd2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f000 f835 	bl	800dda0 <HAL_SD_ErrorCallback>
}
 800dd36:	e02e      	b.n	800dd96 <HAL_SD_IRQHandler+0x362>
 800dd38:	18000f3a 	.word	0x18000f3a
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d025      	beq.n	800dd96 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd52:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd5a:	f003 0304 	and.w	r3, r3, #4
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d10c      	bne.n	800dd7c <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	f003 0320 	and.w	r3, r3, #32
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d003      	beq.n	800dd74 <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f001 f8d4 	bl	800ef1a <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 800dd72:	e010      	b.n	800dd96 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f001 f8bc 	bl	800eef2 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 800dd7a:	e00c      	b.n	800dd96 <HAL_SD_IRQHandler+0x362>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	f003 0320 	and.w	r3, r3, #32
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d003      	beq.n	800dd8e <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f001 f8bd 	bl	800ef06 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 800dd8c:	e003      	b.n	800dd96 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f001 f8a5 	bl	800eede <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 800dd94:	e7ff      	b.n	800dd96 <HAL_SD_IRQHandler+0x362>
 800dd96:	bf00      	nop
 800dd98:	3710      	adds	r7, #16
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}
 800dd9e:	bf00      	nop

0800dda0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800dda0:	b480      	push	{r7}
 800dda2:	b083      	sub	sp, #12
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800dda8:	bf00      	nop
 800ddaa:	370c      	adds	r7, #12
 800ddac:	46bd      	mov	sp, r7
 800ddae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb2:	4770      	bx	lr

0800ddb4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	b083      	sub	sp, #12
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
 800ddbc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ddc2:	0f9b      	lsrs	r3, r3, #30
 800ddc4:	b2da      	uxtb	r2, r3
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ddce:	0e9b      	lsrs	r3, r3, #26
 800ddd0:	b2db      	uxtb	r3, r3
 800ddd2:	f003 030f 	and.w	r3, r3, #15
 800ddd6:	b2da      	uxtb	r2, r3
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dde0:	0e1b      	lsrs	r3, r3, #24
 800dde2:	b2db      	uxtb	r3, r3
 800dde4:	f003 0303 	and.w	r3, r3, #3
 800dde8:	b2da      	uxtb	r2, r3
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ddf2:	0c1b      	lsrs	r3, r3, #16
 800ddf4:	b2da      	uxtb	r2, r3
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ddfe:	0a1b      	lsrs	r3, r3, #8
 800de00:	b2da      	uxtb	r2, r3
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de0a:	b2da      	uxtb	r2, r3
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de14:	0d1b      	lsrs	r3, r3, #20
 800de16:	b29a      	uxth	r2, r3
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de20:	0c1b      	lsrs	r3, r3, #16
 800de22:	b2db      	uxtb	r3, r3
 800de24:	f003 030f 	and.w	r3, r3, #15
 800de28:	b2da      	uxtb	r2, r3
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de32:	0bdb      	lsrs	r3, r3, #15
 800de34:	b2db      	uxtb	r3, r3
 800de36:	f003 0301 	and.w	r3, r3, #1
 800de3a:	b2da      	uxtb	r2, r3
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de44:	0b9b      	lsrs	r3, r3, #14
 800de46:	b2db      	uxtb	r3, r3
 800de48:	f003 0301 	and.w	r3, r3, #1
 800de4c:	b2da      	uxtb	r2, r3
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de56:	0b5b      	lsrs	r3, r3, #13
 800de58:	b2db      	uxtb	r3, r3
 800de5a:	f003 0301 	and.w	r3, r3, #1
 800de5e:	b2da      	uxtb	r2, r3
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de68:	0b1b      	lsrs	r3, r3, #12
 800de6a:	b2db      	uxtb	r3, r3
 800de6c:	f003 0301 	and.w	r3, r3, #1
 800de70:	b2da      	uxtb	r2, r3
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	2200      	movs	r2, #0
 800de7a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de80:	2b00      	cmp	r3, #0
 800de82:	d163      	bne.n	800df4c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de88:	009a      	lsls	r2, r3, #2
 800de8a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800de8e:	4013      	ands	r3, r2
 800de90:	687a      	ldr	r2, [r7, #4]
 800de92:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800de94:	0f92      	lsrs	r2, r2, #30
 800de96:	431a      	orrs	r2, r3
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dea0:	0edb      	lsrs	r3, r3, #27
 800dea2:	b2db      	uxtb	r3, r3
 800dea4:	f003 0307 	and.w	r3, r3, #7
 800dea8:	b2da      	uxtb	r2, r3
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800deb2:	0e1b      	lsrs	r3, r3, #24
 800deb4:	b2db      	uxtb	r3, r3
 800deb6:	f003 0307 	and.w	r3, r3, #7
 800deba:	b2da      	uxtb	r2, r3
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dec4:	0d5b      	lsrs	r3, r3, #21
 800dec6:	b2db      	uxtb	r3, r3
 800dec8:	f003 0307 	and.w	r3, r3, #7
 800decc:	b2da      	uxtb	r2, r3
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ded6:	0c9b      	lsrs	r3, r3, #18
 800ded8:	b2db      	uxtb	r3, r3
 800deda:	f003 0307 	and.w	r3, r3, #7
 800dede:	b2da      	uxtb	r2, r3
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dee8:	0bdb      	lsrs	r3, r3, #15
 800deea:	b2db      	uxtb	r3, r3
 800deec:	f003 0307 	and.w	r3, r3, #7
 800def0:	b2da      	uxtb	r2, r3
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	691b      	ldr	r3, [r3, #16]
 800defa:	1c5a      	adds	r2, r3, #1
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	7e1b      	ldrb	r3, [r3, #24]
 800df04:	b2db      	uxtb	r3, r3
 800df06:	f003 0307 	and.w	r3, r3, #7
 800df0a:	3302      	adds	r3, #2
 800df0c:	2201      	movs	r2, #1
 800df0e:	fa02 f303 	lsl.w	r3, r2, r3
 800df12:	687a      	ldr	r2, [r7, #4]
 800df14:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800df16:	fb03 f202 	mul.w	r2, r3, r2
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	7a1b      	ldrb	r3, [r3, #8]
 800df22:	b2db      	uxtb	r3, r3
 800df24:	f003 030f 	and.w	r3, r3, #15
 800df28:	2201      	movs	r2, #1
 800df2a:	409a      	lsls	r2, r3
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df34:	687a      	ldr	r2, [r7, #4]
 800df36:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800df38:	0a52      	lsrs	r2, r2, #9
 800df3a:	fb03 f202 	mul.w	r2, r3, r2
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df48:	659a      	str	r2, [r3, #88]	; 0x58
 800df4a:	e031      	b.n	800dfb0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df50:	2b01      	cmp	r3, #1
 800df52:	d11d      	bne.n	800df90 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df58:	041b      	lsls	r3, r3, #16
 800df5a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df62:	0c1b      	lsrs	r3, r3, #16
 800df64:	431a      	orrs	r2, r3
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	691b      	ldr	r3, [r3, #16]
 800df6e:	3301      	adds	r3, #1
 800df70:	029a      	lsls	r2, r3, #10
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df84:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	659a      	str	r2, [r3, #88]	; 0x58
 800df8e:	e00f      	b.n	800dfb0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	4a58      	ldr	r2, [pc, #352]	; (800e0f8 <HAL_SD_GetCardCSD+0x344>)
 800df96:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df9c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2201      	movs	r2, #1
 800dfa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dfac:	2301      	movs	r3, #1
 800dfae:	e09d      	b.n	800e0ec <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfb4:	0b9b      	lsrs	r3, r3, #14
 800dfb6:	b2db      	uxtb	r3, r3
 800dfb8:	f003 0301 	and.w	r3, r3, #1
 800dfbc:	b2da      	uxtb	r2, r3
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfc6:	09db      	lsrs	r3, r3, #7
 800dfc8:	b2db      	uxtb	r3, r3
 800dfca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfce:	b2da      	uxtb	r2, r3
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfd8:	b2db      	uxtb	r3, r3
 800dfda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfde:	b2da      	uxtb	r2, r3
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfe8:	0fdb      	lsrs	r3, r3, #31
 800dfea:	b2da      	uxtb	r2, r3
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dff4:	0f5b      	lsrs	r3, r3, #29
 800dff6:	b2db      	uxtb	r3, r3
 800dff8:	f003 0303 	and.w	r3, r3, #3
 800dffc:	b2da      	uxtb	r2, r3
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e006:	0e9b      	lsrs	r3, r3, #26
 800e008:	b2db      	uxtb	r3, r3
 800e00a:	f003 0307 	and.w	r3, r3, #7
 800e00e:	b2da      	uxtb	r2, r3
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e018:	0d9b      	lsrs	r3, r3, #22
 800e01a:	b2db      	uxtb	r3, r3
 800e01c:	f003 030f 	and.w	r3, r3, #15
 800e020:	b2da      	uxtb	r2, r3
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e02a:	0d5b      	lsrs	r3, r3, #21
 800e02c:	b2db      	uxtb	r3, r3
 800e02e:	f003 0301 	and.w	r3, r3, #1
 800e032:	b2da      	uxtb	r2, r3
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	2200      	movs	r2, #0
 800e03e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e046:	0c1b      	lsrs	r3, r3, #16
 800e048:	b2db      	uxtb	r3, r3
 800e04a:	f003 0301 	and.w	r3, r3, #1
 800e04e:	b2da      	uxtb	r2, r3
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e05a:	0bdb      	lsrs	r3, r3, #15
 800e05c:	b2db      	uxtb	r3, r3
 800e05e:	f003 0301 	and.w	r3, r3, #1
 800e062:	b2da      	uxtb	r2, r3
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e06e:	0b9b      	lsrs	r3, r3, #14
 800e070:	b2db      	uxtb	r3, r3
 800e072:	f003 0301 	and.w	r3, r3, #1
 800e076:	b2da      	uxtb	r2, r3
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e082:	0b5b      	lsrs	r3, r3, #13
 800e084:	b2db      	uxtb	r3, r3
 800e086:	f003 0301 	and.w	r3, r3, #1
 800e08a:	b2da      	uxtb	r2, r3
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e096:	0b1b      	lsrs	r3, r3, #12
 800e098:	b2db      	uxtb	r3, r3
 800e09a:	f003 0301 	and.w	r3, r3, #1
 800e09e:	b2da      	uxtb	r2, r3
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0aa:	0a9b      	lsrs	r3, r3, #10
 800e0ac:	b2db      	uxtb	r3, r3
 800e0ae:	f003 0303 	and.w	r3, r3, #3
 800e0b2:	b2da      	uxtb	r2, r3
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0be:	0a1b      	lsrs	r3, r3, #8
 800e0c0:	b2db      	uxtb	r3, r3
 800e0c2:	f003 0303 	and.w	r3, r3, #3
 800e0c6:	b2da      	uxtb	r2, r3
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0d2:	085b      	lsrs	r3, r3, #1
 800e0d4:	b2db      	uxtb	r3, r3
 800e0d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0da:	b2da      	uxtb	r2, r3
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	2201      	movs	r2, #1
 800e0e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e0ea:	2300      	movs	r3, #0
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	370c      	adds	r7, #12
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f6:	4770      	bx	lr
 800e0f8:	1fe00fff 	.word	0x1fe00fff

0800e0fc <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b094      	sub	sp, #80	; 0x50
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e106:	2300      	movs	r3, #0
 800e108:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800e10c:	f107 0308 	add.w	r3, r7, #8
 800e110:	4619      	mov	r1, r3
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	f000 fbd4 	bl	800e8c0 <SD_SendSDStatus>
 800e118:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800e11a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d011      	beq.n	800e144 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	4a4f      	ldr	r2, [pc, #316]	; (800e264 <HAL_SD_GetCardStatus+0x168>)
 800e126:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e12c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e12e:	431a      	orrs	r2, r3
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2201      	movs	r2, #1
 800e138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e13c:	2301      	movs	r3, #1
 800e13e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e142:	e070      	b.n	800e226 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	099b      	lsrs	r3, r3, #6
 800e148:	b2db      	uxtb	r3, r3
 800e14a:	f003 0303 	and.w	r3, r3, #3
 800e14e:	b2da      	uxtb	r2, r3
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	095b      	lsrs	r3, r3, #5
 800e158:	b2db      	uxtb	r3, r3
 800e15a:	f003 0301 	and.w	r3, r3, #1
 800e15e:	b2da      	uxtb	r2, r3
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	0a1b      	lsrs	r3, r3, #8
 800e168:	b29b      	uxth	r3, r3
 800e16a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e16e:	b29a      	uxth	r2, r3
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	0e1b      	lsrs	r3, r3, #24
 800e174:	b29b      	uxth	r3, r3
 800e176:	4313      	orrs	r3, r2
 800e178:	b29a      	uxth	r2, r3
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	061a      	lsls	r2, r3, #24
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	021b      	lsls	r3, r3, #8
 800e186:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e18a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	0a1b      	lsrs	r3, r3, #8
 800e190:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e194:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	0e1b      	lsrs	r3, r3, #24
 800e19a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e1a0:	693b      	ldr	r3, [r7, #16]
 800e1a2:	b2da      	uxtb	r2, r3
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	0a1b      	lsrs	r3, r3, #8
 800e1ac:	b2da      	uxtb	r2, r3
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e1b2:	693b      	ldr	r3, [r7, #16]
 800e1b4:	0d1b      	lsrs	r3, r3, #20
 800e1b6:	b2db      	uxtb	r3, r3
 800e1b8:	f003 030f 	and.w	r3, r3, #15
 800e1bc:	b2da      	uxtb	r2, r3
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	0c1b      	lsrs	r3, r3, #16
 800e1c6:	b29b      	uxth	r3, r3
 800e1c8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e1cc:	b29a      	uxth	r2, r3
 800e1ce:	697b      	ldr	r3, [r7, #20]
 800e1d0:	b29b      	uxth	r3, r3
 800e1d2:	b2db      	uxtb	r3, r3
 800e1d4:	b29b      	uxth	r3, r3
 800e1d6:	4313      	orrs	r3, r2
 800e1d8:	b29a      	uxth	r2, r3
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	0a9b      	lsrs	r3, r3, #10
 800e1e2:	b2db      	uxtb	r3, r3
 800e1e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e1e8:	b2da      	uxtb	r2, r3
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	0a1b      	lsrs	r3, r3, #8
 800e1f2:	b2db      	uxtb	r3, r3
 800e1f4:	f003 0303 	and.w	r3, r3, #3
 800e1f8:	b2da      	uxtb	r2, r3
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	091b      	lsrs	r3, r3, #4
 800e202:	b2db      	uxtb	r3, r3
 800e204:	f003 030f 	and.w	r3, r3, #15
 800e208:	b2da      	uxtb	r2, r3
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	b2db      	uxtb	r3, r3
 800e212:	f003 030f 	and.w	r3, r3, #15
 800e216:	b2da      	uxtb	r2, r3
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e21c:	69bb      	ldr	r3, [r7, #24]
 800e21e:	0e1b      	lsrs	r3, r3, #24
 800e220:	b2da      	uxtb	r2, r3
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e22e:	4618      	mov	r0, r3
 800e230:	f004 fbd4 	bl	80129dc <SDMMC_CmdBlockLength>
 800e234:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800e236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d00d      	beq.n	800e258 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	4a08      	ldr	r2, [pc, #32]	; (800e264 <HAL_SD_GetCardStatus+0x168>)
 800e242:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e248:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2201      	movs	r2, #1
 800e24e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e252:	2301      	movs	r3, #1
 800e254:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800e258:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800e25c:	4618      	mov	r0, r3
 800e25e:	3750      	adds	r7, #80	; 0x50
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}
 800e264:	1fe00fff 	.word	0x1fe00fff

0800e268 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e268:	b480      	push	{r7}
 800e26a:	b083      	sub	sp, #12
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
 800e270:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e2b2:	2300      	movs	r3, #0
}
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	370c      	adds	r7, #12
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2be:	4770      	bx	lr

0800e2c0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e2c0:	b5b0      	push	{r4, r5, r7, lr}
 800e2c2:	b090      	sub	sp, #64	; 0x40
 800e2c4:	af04      	add	r7, sp, #16
 800e2c6:	6078      	str	r0, [r7, #4]
 800e2c8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2203      	movs	r2, #3
 800e2d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2dc:	2b03      	cmp	r3, #3
 800e2de:	d02e      	beq.n	800e33e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e2e6:	d106      	bne.n	800e2f6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	639a      	str	r2, [r3, #56]	; 0x38
 800e2f4:	e029      	b.n	800e34a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e2fc:	d10a      	bne.n	800e314 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f000 fbd6 	bl	800eab0 <SD_WideBus_Enable>
 800e304:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e30c:	431a      	orrs	r2, r3
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	639a      	str	r2, [r3, #56]	; 0x38
 800e312:	e01a      	b.n	800e34a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d10a      	bne.n	800e330 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f000 fc13 	bl	800eb46 <SD_WideBus_Disable>
 800e320:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e328:	431a      	orrs	r2, r3
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	639a      	str	r2, [r3, #56]	; 0x38
 800e32e:	e00c      	b.n	800e34a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e334:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	639a      	str	r2, [r3, #56]	; 0x38
 800e33c:	e005      	b.n	800e34a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e342:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d007      	beq.n	800e362 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	4a60      	ldr	r2, [pc, #384]	; (800e4d8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e358:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e35a:	2301      	movs	r3, #1
 800e35c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e360:	e097      	b.n	800e492 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800e362:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800e366:	f7fd fed1 	bl	800c10c <HAL_RCCEx_GetPeriphCLKFreq>
 800e36a:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800e36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e36e:	2b00      	cmp	r3, #0
 800e370:	f000 8086 	beq.w	800e480 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	685b      	ldr	r3, [r3, #4]
 800e378:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	689b      	ldr	r3, [r3, #8]
 800e37e:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	691b      	ldr	r3, [r3, #16]
 800e388:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	695a      	ldr	r2, [r3, #20]
 800e38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e390:	4952      	ldr	r1, [pc, #328]	; (800e4dc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e392:	fba1 1303 	umull	r1, r3, r1, r3
 800e396:	0e1b      	lsrs	r3, r3, #24
 800e398:	429a      	cmp	r2, r3
 800e39a:	d303      	bcc.n	800e3a4 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	695b      	ldr	r3, [r3, #20]
 800e3a0:	61fb      	str	r3, [r7, #28]
 800e3a2:	e05a      	b.n	800e45a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3ac:	d103      	bne.n	800e3b6 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	695b      	ldr	r3, [r3, #20]
 800e3b2:	61fb      	str	r3, [r7, #28]
 800e3b4:	e051      	b.n	800e45a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3be:	d126      	bne.n	800e40e <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	695b      	ldr	r3, [r3, #20]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d10e      	bne.n	800e3e6 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800e3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ca:	4a45      	ldr	r2, [pc, #276]	; (800e4e0 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e3cc:	4293      	cmp	r3, r2
 800e3ce:	d906      	bls.n	800e3de <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d2:	4a42      	ldr	r2, [pc, #264]	; (800e4dc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e3d4:	fba2 2303 	umull	r2, r3, r2, r3
 800e3d8:	0e5b      	lsrs	r3, r3, #25
 800e3da:	61fb      	str	r3, [r7, #28]
 800e3dc:	e03d      	b.n	800e45a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	695b      	ldr	r3, [r3, #20]
 800e3e2:	61fb      	str	r3, [r7, #28]
 800e3e4:	e039      	b.n	800e45a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	695b      	ldr	r3, [r3, #20]
 800e3ea:	005b      	lsls	r3, r3, #1
 800e3ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3f2:	4a3b      	ldr	r2, [pc, #236]	; (800e4e0 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e3f4:	4293      	cmp	r3, r2
 800e3f6:	d906      	bls.n	800e406 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3fa:	4a38      	ldr	r2, [pc, #224]	; (800e4dc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e3fc:	fba2 2303 	umull	r2, r3, r2, r3
 800e400:	0e5b      	lsrs	r3, r3, #25
 800e402:	61fb      	str	r3, [r7, #28]
 800e404:	e029      	b.n	800e45a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	695b      	ldr	r3, [r3, #20]
 800e40a:	61fb      	str	r3, [r7, #28]
 800e40c:	e025      	b.n	800e45a <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	695b      	ldr	r3, [r3, #20]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d10e      	bne.n	800e434 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800e416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e418:	4a32      	ldr	r2, [pc, #200]	; (800e4e4 <HAL_SD_ConfigWideBusOperation+0x224>)
 800e41a:	4293      	cmp	r3, r2
 800e41c:	d906      	bls.n	800e42c <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e420:	4a2e      	ldr	r2, [pc, #184]	; (800e4dc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e422:	fba2 2303 	umull	r2, r3, r2, r3
 800e426:	0e1b      	lsrs	r3, r3, #24
 800e428:	61fb      	str	r3, [r7, #28]
 800e42a:	e016      	b.n	800e45a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	695b      	ldr	r3, [r3, #20]
 800e430:	61fb      	str	r3, [r7, #28]
 800e432:	e012      	b.n	800e45a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	695b      	ldr	r3, [r3, #20]
 800e438:	005b      	lsls	r3, r3, #1
 800e43a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e43c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e440:	4a28      	ldr	r2, [pc, #160]	; (800e4e4 <HAL_SD_ConfigWideBusOperation+0x224>)
 800e442:	4293      	cmp	r3, r2
 800e444:	d906      	bls.n	800e454 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e448:	4a24      	ldr	r2, [pc, #144]	; (800e4dc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e44a:	fba2 2303 	umull	r2, r3, r2, r3
 800e44e:	0e1b      	lsrs	r3, r3, #24
 800e450:	61fb      	str	r3, [r7, #28]
 800e452:	e002      	b.n	800e45a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	695b      	ldr	r3, [r3, #20]
 800e458:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	699b      	ldr	r3, [r3, #24]
 800e45e:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681d      	ldr	r5, [r3, #0]
 800e464:	466c      	mov	r4, sp
 800e466:	f107 0318 	add.w	r3, r7, #24
 800e46a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e46e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e472:	f107 030c 	add.w	r3, r7, #12
 800e476:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e478:	4628      	mov	r0, r5
 800e47a:	f004 f9d1 	bl	8012820 <SDMMC_Init>
 800e47e:	e008      	b.n	800e492 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e484:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800e48c:	2301      	movs	r3, #1
 800e48e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e49a:	4618      	mov	r0, r3
 800e49c:	f004 fa9e 	bl	80129dc <SDMMC_CmdBlockLength>
 800e4a0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d00c      	beq.n	800e4c2 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	4a0a      	ldr	r2, [pc, #40]	; (800e4d8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e4ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b6:	431a      	orrs	r2, r3
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e4bc:	2301      	movs	r3, #1
 800e4be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	2201      	movs	r2, #1
 800e4c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800e4ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	3730      	adds	r7, #48	; 0x30
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bdb0      	pop	{r4, r5, r7, pc}
 800e4d6:	bf00      	nop
 800e4d8:	1fe00fff 	.word	0x1fe00fff
 800e4dc:	55e63b89 	.word	0x55e63b89
 800e4e0:	02faf080 	.word	0x02faf080
 800e4e4:	017d7840 	.word	0x017d7840

0800e4e8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b086      	sub	sp, #24
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e4f4:	f107 030c 	add.w	r3, r7, #12
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f000 fab0 	bl	800ea60 <SD_SendStatus>
 800e500:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d005      	beq.n	800e514 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	431a      	orrs	r2, r3
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	0a5b      	lsrs	r3, r3, #9
 800e518:	f003 030f 	and.w	r3, r3, #15
 800e51c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e51e:	693b      	ldr	r3, [r7, #16]
}
 800e520:	4618      	mov	r0, r3
 800e522:	3718      	adds	r7, #24
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}

0800e528 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e528:	b5b0      	push	{r4, r5, r7, lr}
 800e52a:	b090      	sub	sp, #64	; 0x40
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e530:	2301      	movs	r3, #1
 800e532:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	4618      	mov	r0, r3
 800e53a:	f004 f9cb 	bl	80128d4 <SDMMC_GetPowerState>
 800e53e:	4603      	mov	r3, r0
 800e540:	2b00      	cmp	r3, #0
 800e542:	d102      	bne.n	800e54a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e544:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e548:	e0a9      	b.n	800e69e <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e54e:	2b03      	cmp	r3, #3
 800e550:	d02e      	beq.n	800e5b0 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	4618      	mov	r0, r3
 800e558:	f004 fc10 	bl	8012d7c <SDMMC_CmdSendCID>
 800e55c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e55e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e560:	2b00      	cmp	r3, #0
 800e562:	d001      	beq.n	800e568 <SD_InitCard+0x40>
    {
      return errorstate;
 800e564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e566:	e09a      	b.n	800e69e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	2100      	movs	r1, #0
 800e56e:	4618      	mov	r0, r3
 800e570:	f004 f9f5 	bl	801295e <SDMMC_GetResponse>
 800e574:	4602      	mov	r2, r0
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	2104      	movs	r1, #4
 800e580:	4618      	mov	r0, r3
 800e582:	f004 f9ec 	bl	801295e <SDMMC_GetResponse>
 800e586:	4602      	mov	r2, r0
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	2108      	movs	r1, #8
 800e592:	4618      	mov	r0, r3
 800e594:	f004 f9e3 	bl	801295e <SDMMC_GetResponse>
 800e598:	4602      	mov	r2, r0
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	210c      	movs	r1, #12
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f004 f9da 	bl	801295e <SDMMC_GetResponse>
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5b4:	2b03      	cmp	r3, #3
 800e5b6:	d00d      	beq.n	800e5d4 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	f107 020e 	add.w	r2, r7, #14
 800e5c0:	4611      	mov	r1, r2
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f004 fc19 	bl	8012dfa <SDMMC_CmdSetRelAdd>
 800e5c8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d001      	beq.n	800e5d4 <SD_InitCard+0xac>
    {
      return errorstate;
 800e5d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5d2:	e064      	b.n	800e69e <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5d8:	2b03      	cmp	r3, #3
 800e5da:	d036      	beq.n	800e64a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e5dc:	89fb      	ldrh	r3, [r7, #14]
 800e5de:	461a      	mov	r2, r3
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681a      	ldr	r2, [r3, #0]
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5ec:	041b      	lsls	r3, r3, #16
 800e5ee:	4619      	mov	r1, r3
 800e5f0:	4610      	mov	r0, r2
 800e5f2:	f004 fbe2 	bl	8012dba <SDMMC_CmdSendCSD>
 800e5f6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d001      	beq.n	800e602 <SD_InitCard+0xda>
    {
      return errorstate;
 800e5fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e600:	e04d      	b.n	800e69e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	2100      	movs	r1, #0
 800e608:	4618      	mov	r0, r3
 800e60a:	f004 f9a8 	bl	801295e <SDMMC_GetResponse>
 800e60e:	4602      	mov	r2, r0
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	2104      	movs	r1, #4
 800e61a:	4618      	mov	r0, r3
 800e61c:	f004 f99f 	bl	801295e <SDMMC_GetResponse>
 800e620:	4602      	mov	r2, r0
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	2108      	movs	r1, #8
 800e62c:	4618      	mov	r0, r3
 800e62e:	f004 f996 	bl	801295e <SDMMC_GetResponse>
 800e632:	4602      	mov	r2, r0
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	210c      	movs	r1, #12
 800e63e:	4618      	mov	r0, r3
 800e640:	f004 f98d 	bl	801295e <SDMMC_GetResponse>
 800e644:	4602      	mov	r2, r0
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	2104      	movs	r1, #4
 800e650:	4618      	mov	r0, r3
 800e652:	f004 f984 	bl	801295e <SDMMC_GetResponse>
 800e656:	4603      	mov	r3, r0
 800e658:	0d1a      	lsrs	r2, r3, #20
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e65e:	f107 0310 	add.w	r3, r7, #16
 800e662:	4619      	mov	r1, r3
 800e664:	6878      	ldr	r0, [r7, #4]
 800e666:	f7ff fba5 	bl	800ddb4 <HAL_SD_GetCardCSD>
 800e66a:	4603      	mov	r3, r0
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d002      	beq.n	800e676 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e670:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e674:	e013      	b.n	800e69e <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6819      	ldr	r1, [r3, #0]
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e67e:	041b      	lsls	r3, r3, #16
 800e680:	2200      	movs	r2, #0
 800e682:	461c      	mov	r4, r3
 800e684:	4615      	mov	r5, r2
 800e686:	4622      	mov	r2, r4
 800e688:	462b      	mov	r3, r5
 800e68a:	4608      	mov	r0, r1
 800e68c:	f004 fa8c 	bl	8012ba8 <SDMMC_CmdSelDesel>
 800e690:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e694:	2b00      	cmp	r3, #0
 800e696:	d001      	beq.n	800e69c <SD_InitCard+0x174>
  {
    return errorstate;
 800e698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e69a:	e000      	b.n	800e69e <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e69c:	2300      	movs	r3, #0
}
 800e69e:	4618      	mov	r0, r3
 800e6a0:	3740      	adds	r7, #64	; 0x40
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e6a8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b088      	sub	sp, #32
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	61fb      	str	r3, [r7, #28]
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 800e6bc:	f7f8 ff32 	bl	8007524 <HAL_GetTick>
 800e6c0:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f004 fa92 	bl	8012bf0 <SDMMC_CmdGoIdleState>
 800e6cc:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e6ce:	693b      	ldr	r3, [r7, #16]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d001      	beq.n	800e6d8 <SD_PowerON+0x30>
  {
    return errorstate;
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	e0ed      	b.n	800e8b4 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f004 faa5 	bl	8012c2c <SDMMC_CmdOperCond>
 800e6e2:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d00d      	beq.n	800e706 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f004 fa7b 	bl	8012bf0 <SDMMC_CmdGoIdleState>
 800e6fa:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e6fc:	693b      	ldr	r3, [r7, #16]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d004      	beq.n	800e70c <SD_PowerON+0x64>
    {
      return errorstate;
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	e0d6      	b.n	800e8b4 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2201      	movs	r2, #1
 800e70a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e710:	2b01      	cmp	r3, #1
 800e712:	d137      	bne.n	800e784 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	2100      	movs	r1, #0
 800e71a:	4618      	mov	r0, r3
 800e71c:	f004 faa6 	bl	8012c6c <SDMMC_CmdAppCommand>
 800e720:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e722:	693b      	ldr	r3, [r7, #16]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d02d      	beq.n	800e784 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e728:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e72c:	e0c2      	b.n	800e8b4 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	2100      	movs	r1, #0
 800e734:	4618      	mov	r0, r3
 800e736:	f004 fa99 	bl	8012c6c <SDMMC_CmdAppCommand>
 800e73a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e73c:	693b      	ldr	r3, [r7, #16]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d001      	beq.n	800e746 <SD_PowerON+0x9e>
    {
      return errorstate;
 800e742:	693b      	ldr	r3, [r7, #16]
 800e744:	e0b6      	b.n	800e8b4 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	495c      	ldr	r1, [pc, #368]	; (800e8bc <SD_PowerON+0x214>)
 800e74c:	4618      	mov	r0, r3
 800e74e:	f004 fab0 	bl	8012cb2 <SDMMC_CmdAppOperCommand>
 800e752:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e754:	693b      	ldr	r3, [r7, #16]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d002      	beq.n	800e760 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e75a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e75e:	e0a9      	b.n	800e8b4 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	2100      	movs	r1, #0
 800e766:	4618      	mov	r0, r3
 800e768:	f004 f8f9 	bl	801295e <SDMMC_GetResponse>
 800e76c:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e76e:	69fb      	ldr	r3, [r7, #28]
 800e770:	0fdb      	lsrs	r3, r3, #31
 800e772:	2b01      	cmp	r3, #1
 800e774:	d101      	bne.n	800e77a <SD_PowerON+0xd2>
 800e776:	2301      	movs	r3, #1
 800e778:	e000      	b.n	800e77c <SD_PowerON+0xd4>
 800e77a:	2300      	movs	r3, #0
 800e77c:	61bb      	str	r3, [r7, #24]

    count++;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	3301      	adds	r3, #1
 800e782:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e78a:	4293      	cmp	r3, r2
 800e78c:	d802      	bhi.n	800e794 <SD_PowerON+0xec>
 800e78e:	69bb      	ldr	r3, [r7, #24]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d0cc      	beq.n	800e72e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e79a:	4293      	cmp	r3, r2
 800e79c:	d902      	bls.n	800e7a4 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e79e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e7a2:	e087      	b.n	800e8b4 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e7a4:	69fb      	ldr	r3, [r7, #28]
 800e7a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d07e      	beq.n	800e8ac <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2201      	movs	r2, #1
 800e7b2:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	699b      	ldr	r3, [r3, #24]
 800e7b8:	2b01      	cmp	r3, #1
 800e7ba:	d17a      	bne.n	800e8b2 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800e7bc:	69fb      	ldr	r3, [r7, #28]
 800e7be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d075      	beq.n	800e8b2 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e7cc:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	681a      	ldr	r2, [r3, #0]
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f042 0208 	orr.w	r2, r2, #8
 800e7dc:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f004 fb70 	bl	8012ec8 <SDMMC_CmdVoltageSwitch>
 800e7e8:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800e7ea:	693b      	ldr	r3, [r7, #16]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d00c      	beq.n	800e80a <SD_PowerON+0x162>
        {
          return errorstate;
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	e05f      	b.n	800e8b4 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e7f4:	f7f8 fe96 	bl	8007524 <HAL_GetTick>
 800e7f8:	4602      	mov	r2, r0
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	1ad3      	subs	r3, r2, r3
 800e7fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e802:	d102      	bne.n	800e80a <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800e804:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e808:	e054      	b.n	800e8b4 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e810:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e814:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e818:	d1ec      	bne.n	800e7f4 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800e822:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e82a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e82e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e832:	d002      	beq.n	800e83a <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800e834:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e838:	e03c      	b.n	800e8b4 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800e83a:	2001      	movs	r0, #1
 800e83c:	f000 fb44 	bl	800eec8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	681a      	ldr	r2, [r3, #0]
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	f042 0204 	orr.w	r2, r2, #4
 800e84e:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800e850:	e00a      	b.n	800e868 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e852:	f7f8 fe67 	bl	8007524 <HAL_GetTick>
 800e856:	4602      	mov	r2, r0
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	1ad3      	subs	r3, r2, r3
 800e85c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e860:	d102      	bne.n	800e868 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800e862:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e866:	e025      	b.n	800e8b4 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e86e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e872:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e876:	d1ec      	bne.n	800e852 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e880:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e888:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e88c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e890:	d102      	bne.n	800e898 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e892:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e896:	e00d      	b.n	800e8b4 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	2213      	movs	r2, #19
 800e89e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e8a8:	639a      	str	r2, [r3, #56]	; 0x38
 800e8aa:	e002      	b.n	800e8b2 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800e8b2:	2300      	movs	r3, #0
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3720      	adds	r7, #32
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}
 800e8bc:	c1100000 	.word	0xc1100000

0800e8c0 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b08c      	sub	sp, #48	; 0x30
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
 800e8c8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e8ca:	f7f8 fe2b 	bl	8007524 <HAL_GetTick>
 800e8ce:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	2100      	movs	r1, #0
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f004 f83f 	bl	801295e <SDMMC_GetResponse>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e8e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e8ea:	d102      	bne.n	800e8f2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e8ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e8f0:	e0b0      	b.n	800ea54 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	2140      	movs	r1, #64	; 0x40
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f004 f86f 	bl	80129dc <SDMMC_CmdBlockLength>
 800e8fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e900:	6a3b      	ldr	r3, [r7, #32]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d005      	beq.n	800e912 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e90e:	6a3b      	ldr	r3, [r7, #32]
 800e910:	e0a0      	b.n	800ea54 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681a      	ldr	r2, [r3, #0]
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e91a:	041b      	lsls	r3, r3, #16
 800e91c:	4619      	mov	r1, r3
 800e91e:	4610      	mov	r0, r2
 800e920:	f004 f9a4 	bl	8012c6c <SDMMC_CmdAppCommand>
 800e924:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e926:	6a3b      	ldr	r3, [r7, #32]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d005      	beq.n	800e938 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e934:	6a3b      	ldr	r3, [r7, #32]
 800e936:	e08d      	b.n	800ea54 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e93c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e93e:	2340      	movs	r3, #64	; 0x40
 800e940:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e942:	2360      	movs	r3, #96	; 0x60
 800e944:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e946:	2302      	movs	r3, #2
 800e948:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e94a:	2300      	movs	r3, #0
 800e94c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e94e:	2301      	movs	r3, #1
 800e950:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	f107 0208 	add.w	r2, r7, #8
 800e95a:	4611      	mov	r1, r2
 800e95c:	4618      	mov	r0, r3
 800e95e:	f004 f811 	bl	8012984 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	4618      	mov	r0, r3
 800e968:	f004 fa8c 	bl	8012e84 <SDMMC_CmdStatusRegister>
 800e96c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e96e:	6a3b      	ldr	r3, [r7, #32]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d02b      	beq.n	800e9cc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e97c:	6a3b      	ldr	r3, [r7, #32]
 800e97e:	e069      	b.n	800ea54 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e986:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d013      	beq.n	800e9b6 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800e98e:	2300      	movs	r3, #0
 800e990:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e992:	e00d      	b.n	800e9b0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	4618      	mov	r0, r3
 800e99a:	f003 ff6b 	bl	8012874 <SDMMC_ReadFIFO>
 800e99e:	4602      	mov	r2, r0
 800e9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a2:	601a      	str	r2, [r3, #0]
        pData++;
 800e9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a6:	3304      	adds	r3, #4
 800e9a8:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800e9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ac:	3301      	adds	r3, #1
 800e9ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9b2:	2b07      	cmp	r3, #7
 800e9b4:	d9ee      	bls.n	800e994 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e9b6:	f7f8 fdb5 	bl	8007524 <HAL_GetTick>
 800e9ba:	4602      	mov	r2, r0
 800e9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9be:	1ad3      	subs	r3, r2, r3
 800e9c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e9c4:	d102      	bne.n	800e9cc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e9c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e9ca:	e043      	b.n	800ea54 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9d2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d0d2      	beq.n	800e980 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9e0:	f003 0308 	and.w	r3, r3, #8
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d001      	beq.n	800e9ec <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e9e8:	2308      	movs	r3, #8
 800e9ea:	e033      	b.n	800ea54 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9f2:	f003 0302 	and.w	r3, r3, #2
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d001      	beq.n	800e9fe <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e9fa:	2302      	movs	r3, #2
 800e9fc:	e02a      	b.n	800ea54 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea04:	f003 0320 	and.w	r3, r3, #32
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d017      	beq.n	800ea3c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800ea0c:	2320      	movs	r3, #32
 800ea0e:	e021      	b.n	800ea54 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	4618      	mov	r0, r3
 800ea16:	f003 ff2d 	bl	8012874 <SDMMC_ReadFIFO>
 800ea1a:	4602      	mov	r2, r0
 800ea1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea1e:	601a      	str	r2, [r3, #0]
    pData++;
 800ea20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea22:	3304      	adds	r3, #4
 800ea24:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ea26:	f7f8 fd7d 	bl	8007524 <HAL_GetTick>
 800ea2a:	4602      	mov	r2, r0
 800ea2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea2e:	1ad3      	subs	r3, r2, r3
 800ea30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea34:	d102      	bne.n	800ea3c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ea36:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ea3a:	e00b      	b.n	800ea54 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d1e2      	bne.n	800ea10 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	4a03      	ldr	r2, [pc, #12]	; (800ea5c <SD_SendSDStatus+0x19c>)
 800ea50:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800ea52:	2300      	movs	r3, #0
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	3730      	adds	r7, #48	; 0x30
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}
 800ea5c:	18000f3a 	.word	0x18000f3a

0800ea60 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b084      	sub	sp, #16
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d102      	bne.n	800ea76 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ea70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ea74:	e018      	b.n	800eaa8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681a      	ldr	r2, [r3, #0]
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea7e:	041b      	lsls	r3, r3, #16
 800ea80:	4619      	mov	r1, r3
 800ea82:	4610      	mov	r0, r2
 800ea84:	f004 f9db 	bl	8012e3e <SDMMC_CmdSendStatus>
 800ea88:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d001      	beq.n	800ea94 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	e009      	b.n	800eaa8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	2100      	movs	r1, #0
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f003 ff5f 	bl	801295e <SDMMC_GetResponse>
 800eaa0:	4602      	mov	r2, r0
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800eaa6:	2300      	movs	r3, #0
}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	3710      	adds	r7, #16
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}

0800eab0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b086      	sub	sp, #24
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800eab8:	2300      	movs	r3, #0
 800eaba:	60fb      	str	r3, [r7, #12]
 800eabc:	2300      	movs	r3, #0
 800eabe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	2100      	movs	r1, #0
 800eac6:	4618      	mov	r0, r3
 800eac8:	f003 ff49 	bl	801295e <SDMMC_GetResponse>
 800eacc:	4603      	mov	r3, r0
 800eace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ead2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ead6:	d102      	bne.n	800eade <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ead8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eadc:	e02f      	b.n	800eb3e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800eade:	f107 030c 	add.w	r3, r7, #12
 800eae2:	4619      	mov	r1, r3
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f000 f879 	bl	800ebdc <SD_FindSCR>
 800eaea:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800eaec:	697b      	ldr	r3, [r7, #20]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d001      	beq.n	800eaf6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	e023      	b.n	800eb3e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800eaf6:	693b      	ldr	r3, [r7, #16]
 800eaf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d01c      	beq.n	800eb3a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681a      	ldr	r2, [r3, #0]
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb08:	041b      	lsls	r3, r3, #16
 800eb0a:	4619      	mov	r1, r3
 800eb0c:	4610      	mov	r0, r2
 800eb0e:	f004 f8ad 	bl	8012c6c <SDMMC_CmdAppCommand>
 800eb12:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800eb14:	697b      	ldr	r3, [r7, #20]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d001      	beq.n	800eb1e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800eb1a:	697b      	ldr	r3, [r7, #20]
 800eb1c:	e00f      	b.n	800eb3e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	2102      	movs	r1, #2
 800eb24:	4618      	mov	r0, r3
 800eb26:	f004 f8e4 	bl	8012cf2 <SDMMC_CmdBusWidth>
 800eb2a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800eb2c:	697b      	ldr	r3, [r7, #20]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d001      	beq.n	800eb36 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800eb32:	697b      	ldr	r3, [r7, #20]
 800eb34:	e003      	b.n	800eb3e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800eb36:	2300      	movs	r3, #0
 800eb38:	e001      	b.n	800eb3e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eb3a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3718      	adds	r7, #24
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}

0800eb46 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800eb46:	b580      	push	{r7, lr}
 800eb48:	b086      	sub	sp, #24
 800eb4a:	af00      	add	r7, sp, #0
 800eb4c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800eb4e:	2300      	movs	r3, #0
 800eb50:	60fb      	str	r3, [r7, #12]
 800eb52:	2300      	movs	r3, #0
 800eb54:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	2100      	movs	r1, #0
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f003 fefe 	bl	801295e <SDMMC_GetResponse>
 800eb62:	4603      	mov	r3, r0
 800eb64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eb68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eb6c:	d102      	bne.n	800eb74 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800eb6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eb72:	e02f      	b.n	800ebd4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800eb74:	f107 030c 	add.w	r3, r7, #12
 800eb78:	4619      	mov	r1, r3
 800eb7a:	6878      	ldr	r0, [r7, #4]
 800eb7c:	f000 f82e 	bl	800ebdc <SD_FindSCR>
 800eb80:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800eb82:	697b      	ldr	r3, [r7, #20]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d001      	beq.n	800eb8c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800eb88:	697b      	ldr	r3, [r7, #20]
 800eb8a:	e023      	b.n	800ebd4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800eb8c:	693b      	ldr	r3, [r7, #16]
 800eb8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d01c      	beq.n	800ebd0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681a      	ldr	r2, [r3, #0]
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb9e:	041b      	lsls	r3, r3, #16
 800eba0:	4619      	mov	r1, r3
 800eba2:	4610      	mov	r0, r2
 800eba4:	f004 f862 	bl	8012c6c <SDMMC_CmdAppCommand>
 800eba8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ebaa:	697b      	ldr	r3, [r7, #20]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d001      	beq.n	800ebb4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	e00f      	b.n	800ebd4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	2100      	movs	r1, #0
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f004 f899 	bl	8012cf2 <SDMMC_CmdBusWidth>
 800ebc0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d001      	beq.n	800ebcc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ebc8:	697b      	ldr	r3, [r7, #20]
 800ebca:	e003      	b.n	800ebd4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ebcc:	2300      	movs	r3, #0
 800ebce:	e001      	b.n	800ebd4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ebd0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3718      	adds	r7, #24
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}

0800ebdc <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b08e      	sub	sp, #56	; 0x38
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ebe6:	f7f8 fc9d 	bl	8007524 <HAL_GetTick>
 800ebea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800ebec:	2300      	movs	r3, #0
 800ebee:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	60bb      	str	r3, [r7, #8]
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	2108      	movs	r1, #8
 800ec02:	4618      	mov	r0, r3
 800ec04:	f003 feea 	bl	80129dc <SDMMC_CmdBlockLength>
 800ec08:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ec0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d001      	beq.n	800ec14 <SD_FindSCR+0x38>
  {
    return errorstate;
 800ec10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec12:	e0ad      	b.n	800ed70 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681a      	ldr	r2, [r3, #0]
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ec1c:	041b      	lsls	r3, r3, #16
 800ec1e:	4619      	mov	r1, r3
 800ec20:	4610      	mov	r0, r2
 800ec22:	f004 f823 	bl	8012c6c <SDMMC_CmdAppCommand>
 800ec26:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ec28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d001      	beq.n	800ec32 <SD_FindSCR+0x56>
  {
    return errorstate;
 800ec2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec30:	e09e      	b.n	800ed70 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ec32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ec36:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ec38:	2308      	movs	r3, #8
 800ec3a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ec3c:	2330      	movs	r3, #48	; 0x30
 800ec3e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ec40:	2302      	movs	r3, #2
 800ec42:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ec44:	2300      	movs	r3, #0
 800ec46:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ec48:	2301      	movs	r3, #1
 800ec4a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	f107 0210 	add.w	r2, r7, #16
 800ec54:	4611      	mov	r1, r2
 800ec56:	4618      	mov	r0, r3
 800ec58:	f003 fe94 	bl	8012984 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	4618      	mov	r0, r3
 800ec62:	f004 f869 	bl	8012d38 <SDMMC_CmdSendSCR>
 800ec66:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ec68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d027      	beq.n	800ecbe <SD_FindSCR+0xe2>
  {
    return errorstate;
 800ec6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec70:	e07e      	b.n	800ed70 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d113      	bne.n	800eca8 <SD_FindSCR+0xcc>
 800ec80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d110      	bne.n	800eca8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f003 fdf2 	bl	8012874 <SDMMC_ReadFIFO>
 800ec90:	4603      	mov	r3, r0
 800ec92:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f003 fdeb 	bl	8012874 <SDMMC_ReadFIFO>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	60fb      	str	r3, [r7, #12]
      index++;
 800eca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eca4:	3301      	adds	r3, #1
 800eca6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800eca8:	f7f8 fc3c 	bl	8007524 <HAL_GetTick>
 800ecac:	4602      	mov	r2, r0
 800ecae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb0:	1ad3      	subs	r3, r2, r3
 800ecb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ecb6:	d102      	bne.n	800ecbe <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ecb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ecbc:	e058      	b.n	800ed70 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ecc4:	f240 532a 	movw	r3, #1322	; 0x52a
 800ecc8:	4013      	ands	r3, r2
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d0d1      	beq.n	800ec72 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecd4:	f003 0308 	and.w	r3, r3, #8
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d005      	beq.n	800ece8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	2208      	movs	r2, #8
 800ece2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ece4:	2308      	movs	r3, #8
 800ece6:	e043      	b.n	800ed70 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecee:	f003 0302 	and.w	r3, r3, #2
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d005      	beq.n	800ed02 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	2202      	movs	r2, #2
 800ecfc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ecfe:	2302      	movs	r3, #2
 800ed00:	e036      	b.n	800ed70 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed08:	f003 0320 	and.w	r3, r3, #32
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d005      	beq.n	800ed1c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	2220      	movs	r2, #32
 800ed16:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ed18:	2320      	movs	r3, #32
 800ed1a:	e029      	b.n	800ed70 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	4a15      	ldr	r2, [pc, #84]	; (800ed78 <SD_FindSCR+0x19c>)
 800ed22:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	061a      	lsls	r2, r3, #24
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	021b      	lsls	r3, r3, #8
 800ed2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ed30:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	0a1b      	lsrs	r3, r3, #8
 800ed36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ed3a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	0e1b      	lsrs	r3, r3, #24
 800ed40:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ed42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed44:	601a      	str	r2, [r3, #0]
    scr++;
 800ed46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed48:	3304      	adds	r3, #4
 800ed4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	061a      	lsls	r2, r3, #24
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	021b      	lsls	r3, r3, #8
 800ed54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ed58:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ed5a:	68bb      	ldr	r3, [r7, #8]
 800ed5c:	0a1b      	lsrs	r3, r3, #8
 800ed5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ed62:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	0e1b      	lsrs	r3, r3, #24
 800ed68:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ed6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed6c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ed6e:	2300      	movs	r3, #0
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	3738      	adds	r7, #56	; 0x38
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}
 800ed78:	18000f3a 	.word	0x18000f3a

0800ed7c <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b086      	sub	sp, #24
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed88:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed8e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d03f      	beq.n	800ee16 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800ed96:	2300      	movs	r3, #0
 800ed98:	617b      	str	r3, [r7, #20]
 800ed9a:	e033      	b.n	800ee04 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	4618      	mov	r0, r3
 800eda2:	f003 fd67 	bl	8012874 <SDMMC_ReadFIFO>
 800eda6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	b2da      	uxtb	r2, r3
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	701a      	strb	r2, [r3, #0]
      tmp++;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	3301      	adds	r3, #1
 800edb4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800edb6:	693b      	ldr	r3, [r7, #16]
 800edb8:	3b01      	subs	r3, #1
 800edba:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800edbc:	68bb      	ldr	r3, [r7, #8]
 800edbe:	0a1b      	lsrs	r3, r3, #8
 800edc0:	b2da      	uxtb	r2, r3
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	3301      	adds	r3, #1
 800edca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800edcc:	693b      	ldr	r3, [r7, #16]
 800edce:	3b01      	subs	r3, #1
 800edd0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	0c1b      	lsrs	r3, r3, #16
 800edd6:	b2da      	uxtb	r2, r3
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	701a      	strb	r2, [r3, #0]
      tmp++;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	3301      	adds	r3, #1
 800ede0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ede2:	693b      	ldr	r3, [r7, #16]
 800ede4:	3b01      	subs	r3, #1
 800ede6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	0e1b      	lsrs	r3, r3, #24
 800edec:	b2da      	uxtb	r2, r3
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	3301      	adds	r3, #1
 800edf6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800edf8:	693b      	ldr	r3, [r7, #16]
 800edfa:	3b01      	subs	r3, #1
 800edfc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	3301      	adds	r3, #1
 800ee02:	617b      	str	r3, [r7, #20]
 800ee04:	697b      	ldr	r3, [r7, #20]
 800ee06:	2b07      	cmp	r3, #7
 800ee08:	d9c8      	bls.n	800ed9c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	68fa      	ldr	r2, [r7, #12]
 800ee0e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	693a      	ldr	r2, [r7, #16]
 800ee14:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800ee16:	bf00      	nop
 800ee18:	3718      	adds	r7, #24
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}

0800ee1e <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ee1e:	b580      	push	{r7, lr}
 800ee20:	b086      	sub	sp, #24
 800ee22:	af00      	add	r7, sp, #0
 800ee24:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	6a1b      	ldr	r3, [r3, #32]
 800ee2a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee30:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800ee32:	693b      	ldr	r3, [r7, #16]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d043      	beq.n	800eec0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800ee38:	2300      	movs	r3, #0
 800ee3a:	617b      	str	r3, [r7, #20]
 800ee3c:	e037      	b.n	800eeae <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	781b      	ldrb	r3, [r3, #0]
 800ee42:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	3301      	adds	r3, #1
 800ee48:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ee4a:	693b      	ldr	r3, [r7, #16]
 800ee4c:	3b01      	subs	r3, #1
 800ee4e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	781b      	ldrb	r3, [r3, #0]
 800ee54:	021a      	lsls	r2, r3, #8
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	4313      	orrs	r3, r2
 800ee5a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	3301      	adds	r3, #1
 800ee60:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ee62:	693b      	ldr	r3, [r7, #16]
 800ee64:	3b01      	subs	r3, #1
 800ee66:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	781b      	ldrb	r3, [r3, #0]
 800ee6c:	041a      	lsls	r2, r3, #16
 800ee6e:	68bb      	ldr	r3, [r7, #8]
 800ee70:	4313      	orrs	r3, r2
 800ee72:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	3301      	adds	r3, #1
 800ee78:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ee7a:	693b      	ldr	r3, [r7, #16]
 800ee7c:	3b01      	subs	r3, #1
 800ee7e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	781b      	ldrb	r3, [r3, #0]
 800ee84:	061a      	lsls	r2, r3, #24
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	4313      	orrs	r3, r2
 800ee8a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	3301      	adds	r3, #1
 800ee90:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ee92:	693b      	ldr	r3, [r7, #16]
 800ee94:	3b01      	subs	r3, #1
 800ee96:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	f107 0208 	add.w	r2, r7, #8
 800eea0:	4611      	mov	r1, r2
 800eea2:	4618      	mov	r0, r3
 800eea4:	f003 fcf3 	bl	801288e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800eea8:	697b      	ldr	r3, [r7, #20]
 800eeaa:	3301      	adds	r3, #1
 800eeac:	617b      	str	r3, [r7, #20]
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	2b07      	cmp	r3, #7
 800eeb2:	d9c4      	bls.n	800ee3e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	68fa      	ldr	r2, [r7, #12]
 800eeb8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	693a      	ldr	r2, [r7, #16]
 800eebe:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800eec0:	bf00      	nop
 800eec2:	3718      	adds	r7, #24
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}

0800eec8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800eec8:	b480      	push	{r7}
 800eeca:	b083      	sub	sp, #12
 800eecc:	af00      	add	r7, sp, #0
 800eece:	4603      	mov	r3, r0
 800eed0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800eed2:	bf00      	nop
 800eed4:	370c      	adds	r7, #12
 800eed6:	46bd      	mov	sp, r7
 800eed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eedc:	4770      	bx	lr

0800eede <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800eede:	b480      	push	{r7}
 800eee0:	b083      	sub	sp, #12
 800eee2:	af00      	add	r7, sp, #0
 800eee4:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800eee6:	bf00      	nop
 800eee8:	370c      	adds	r7, #12
 800eeea:	46bd      	mov	sp, r7
 800eeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef0:	4770      	bx	lr

0800eef2 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800eef2:	b480      	push	{r7}
 800eef4:	b083      	sub	sp, #12
 800eef6:	af00      	add	r7, sp, #0
 800eef8:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 800eefa:	bf00      	nop
 800eefc:	370c      	adds	r7, #12
 800eefe:	46bd      	mov	sp, r7
 800ef00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef04:	4770      	bx	lr

0800ef06 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ef06:	b480      	push	{r7}
 800ef08:	b083      	sub	sp, #12
 800ef0a:	af00      	add	r7, sp, #0
 800ef0c:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800ef0e:	bf00      	nop
 800ef10:	370c      	adds	r7, #12
 800ef12:	46bd      	mov	sp, r7
 800ef14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef18:	4770      	bx	lr

0800ef1a <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ef1a:	b480      	push	{r7}
 800ef1c:	b083      	sub	sp, #12
 800ef1e:	af00      	add	r7, sp, #0
 800ef20:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800ef22:	bf00      	nop
 800ef24:	370c      	adds	r7, #12
 800ef26:	46bd      	mov	sp, r7
 800ef28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2c:	4770      	bx	lr

0800ef2e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ef2e:	b580      	push	{r7, lr}
 800ef30:	b084      	sub	sp, #16
 800ef32:	af00      	add	r7, sp, #0
 800ef34:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d101      	bne.n	800ef40 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	e095      	b.n	800f06c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d108      	bne.n	800ef5a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	685b      	ldr	r3, [r3, #4]
 800ef4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ef50:	d009      	beq.n	800ef66 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	2200      	movs	r2, #0
 800ef56:	61da      	str	r2, [r3, #28]
 800ef58:	e005      	b.n	800ef66 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	2200      	movs	r2, #0
 800ef64:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2200      	movs	r2, #0
 800ef6a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ef72:	b2db      	uxtb	r3, r3
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d106      	bne.n	800ef86 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f7f6 fb3b 	bl	80055fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2202      	movs	r2, #2
 800ef8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	681a      	ldr	r2, [r3, #0]
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ef9c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	68db      	ldr	r3, [r3, #12]
 800efa2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800efa6:	d902      	bls.n	800efae <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800efa8:	2300      	movs	r3, #0
 800efaa:	60fb      	str	r3, [r7, #12]
 800efac:	e002      	b.n	800efb4 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800efae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800efb2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	68db      	ldr	r3, [r3, #12]
 800efb8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800efbc:	d007      	beq.n	800efce <HAL_SPI_Init+0xa0>
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	68db      	ldr	r3, [r3, #12]
 800efc2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800efc6:	d002      	beq.n	800efce <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	2200      	movs	r2, #0
 800efcc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	685b      	ldr	r3, [r3, #4]
 800efd2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	689b      	ldr	r3, [r3, #8]
 800efda:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800efde:	431a      	orrs	r2, r3
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	691b      	ldr	r3, [r3, #16]
 800efe4:	f003 0302 	and.w	r3, r3, #2
 800efe8:	431a      	orrs	r2, r3
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	695b      	ldr	r3, [r3, #20]
 800efee:	f003 0301 	and.w	r3, r3, #1
 800eff2:	431a      	orrs	r2, r3
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	699b      	ldr	r3, [r3, #24]
 800eff8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800effc:	431a      	orrs	r2, r3
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	69db      	ldr	r3, [r3, #28]
 800f002:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f006:	431a      	orrs	r2, r3
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	6a1b      	ldr	r3, [r3, #32]
 800f00c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f010:	ea42 0103 	orr.w	r1, r2, r3
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f018:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	430a      	orrs	r2, r1
 800f022:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	699b      	ldr	r3, [r3, #24]
 800f028:	0c1b      	lsrs	r3, r3, #16
 800f02a:	f003 0204 	and.w	r2, r3, #4
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f032:	f003 0310 	and.w	r3, r3, #16
 800f036:	431a      	orrs	r2, r3
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f03c:	f003 0308 	and.w	r3, r3, #8
 800f040:	431a      	orrs	r2, r3
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	68db      	ldr	r3, [r3, #12]
 800f046:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800f04a:	ea42 0103 	orr.w	r1, r2, r3
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	430a      	orrs	r2, r1
 800f05a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2200      	movs	r2, #0
 800f060:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	2201      	movs	r2, #1
 800f066:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800f06a:	2300      	movs	r3, #0
}
 800f06c:	4618      	mov	r0, r3
 800f06e:	3710      	adds	r7, #16
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}

0800f074 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b088      	sub	sp, #32
 800f078:	af00      	add	r7, sp, #0
 800f07a:	60f8      	str	r0, [r7, #12]
 800f07c:	60b9      	str	r1, [r7, #8]
 800f07e:	603b      	str	r3, [r7, #0]
 800f080:	4613      	mov	r3, r2
 800f082:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f084:	2300      	movs	r3, #0
 800f086:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f08e:	2b01      	cmp	r3, #1
 800f090:	d101      	bne.n	800f096 <HAL_SPI_Transmit+0x22>
 800f092:	2302      	movs	r3, #2
 800f094:	e15f      	b.n	800f356 <HAL_SPI_Transmit+0x2e2>
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	2201      	movs	r2, #1
 800f09a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f09e:	f7f8 fa41 	bl	8007524 <HAL_GetTick>
 800f0a2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800f0a4:	88fb      	ldrh	r3, [r7, #6]
 800f0a6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f0ae:	b2db      	uxtb	r3, r3
 800f0b0:	2b01      	cmp	r3, #1
 800f0b2:	d002      	beq.n	800f0ba <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800f0b4:	2302      	movs	r3, #2
 800f0b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f0b8:	e148      	b.n	800f34c <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800f0ba:	68bb      	ldr	r3, [r7, #8]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d002      	beq.n	800f0c6 <HAL_SPI_Transmit+0x52>
 800f0c0:	88fb      	ldrh	r3, [r7, #6]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d102      	bne.n	800f0cc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800f0c6:	2301      	movs	r3, #1
 800f0c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f0ca:	e13f      	b.n	800f34c <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	2203      	movs	r2, #3
 800f0d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	68ba      	ldr	r2, [r7, #8]
 800f0de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	88fa      	ldrh	r2, [r7, #6]
 800f0e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	88fa      	ldrh	r2, [r7, #6]
 800f0ea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	2200      	movs	r2, #0
 800f106:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	2200      	movs	r2, #0
 800f10c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	689b      	ldr	r3, [r3, #8]
 800f112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f116:	d10f      	bne.n	800f138 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	681a      	ldr	r2, [r3, #0]
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f126:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	681a      	ldr	r2, [r3, #0]
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f136:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f142:	2b40      	cmp	r3, #64	; 0x40
 800f144:	d007      	beq.n	800f156 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	681a      	ldr	r2, [r3, #0]
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f154:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	68db      	ldr	r3, [r3, #12]
 800f15a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f15e:	d94f      	bls.n	800f200 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	685b      	ldr	r3, [r3, #4]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d002      	beq.n	800f16e <HAL_SPI_Transmit+0xfa>
 800f168:	8afb      	ldrh	r3, [r7, #22]
 800f16a:	2b01      	cmp	r3, #1
 800f16c:	d142      	bne.n	800f1f4 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f172:	881a      	ldrh	r2, [r3, #0]
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f17e:	1c9a      	adds	r2, r3, #2
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f188:	b29b      	uxth	r3, r3
 800f18a:	3b01      	subs	r3, #1
 800f18c:	b29a      	uxth	r2, r3
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f192:	e02f      	b.n	800f1f4 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	689b      	ldr	r3, [r3, #8]
 800f19a:	f003 0302 	and.w	r3, r3, #2
 800f19e:	2b02      	cmp	r3, #2
 800f1a0:	d112      	bne.n	800f1c8 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1a6:	881a      	ldrh	r2, [r3, #0]
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1b2:	1c9a      	adds	r2, r3, #2
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f1bc:	b29b      	uxth	r3, r3
 800f1be:	3b01      	subs	r3, #1
 800f1c0:	b29a      	uxth	r2, r3
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f1c6:	e015      	b.n	800f1f4 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f1c8:	f7f8 f9ac 	bl	8007524 <HAL_GetTick>
 800f1cc:	4602      	mov	r2, r0
 800f1ce:	69bb      	ldr	r3, [r7, #24]
 800f1d0:	1ad3      	subs	r3, r2, r3
 800f1d2:	683a      	ldr	r2, [r7, #0]
 800f1d4:	429a      	cmp	r2, r3
 800f1d6:	d803      	bhi.n	800f1e0 <HAL_SPI_Transmit+0x16c>
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f1de:	d102      	bne.n	800f1e6 <HAL_SPI_Transmit+0x172>
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d106      	bne.n	800f1f4 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800f1e6:	2303      	movs	r3, #3
 800f1e8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	2201      	movs	r2, #1
 800f1ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800f1f2:	e0ab      	b.n	800f34c <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f1f8:	b29b      	uxth	r3, r3
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d1ca      	bne.n	800f194 <HAL_SPI_Transmit+0x120>
 800f1fe:	e080      	b.n	800f302 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	685b      	ldr	r3, [r3, #4]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d002      	beq.n	800f20e <HAL_SPI_Transmit+0x19a>
 800f208:	8afb      	ldrh	r3, [r7, #22]
 800f20a:	2b01      	cmp	r3, #1
 800f20c:	d174      	bne.n	800f2f8 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f212:	b29b      	uxth	r3, r3
 800f214:	2b01      	cmp	r3, #1
 800f216:	d912      	bls.n	800f23e <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f21c:	881a      	ldrh	r2, [r3, #0]
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f228:	1c9a      	adds	r2, r3, #2
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f232:	b29b      	uxth	r3, r3
 800f234:	3b02      	subs	r3, #2
 800f236:	b29a      	uxth	r2, r3
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f23c:	e05c      	b.n	800f2f8 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	330c      	adds	r3, #12
 800f248:	7812      	ldrb	r2, [r2, #0]
 800f24a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f250:	1c5a      	adds	r2, r3, #1
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f25a:	b29b      	uxth	r3, r3
 800f25c:	3b01      	subs	r3, #1
 800f25e:	b29a      	uxth	r2, r3
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800f264:	e048      	b.n	800f2f8 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	689b      	ldr	r3, [r3, #8]
 800f26c:	f003 0302 	and.w	r3, r3, #2
 800f270:	2b02      	cmp	r3, #2
 800f272:	d12b      	bne.n	800f2cc <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f278:	b29b      	uxth	r3, r3
 800f27a:	2b01      	cmp	r3, #1
 800f27c:	d912      	bls.n	800f2a4 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f282:	881a      	ldrh	r2, [r3, #0]
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f28e:	1c9a      	adds	r2, r3, #2
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f298:	b29b      	uxth	r3, r3
 800f29a:	3b02      	subs	r3, #2
 800f29c:	b29a      	uxth	r2, r3
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f2a2:	e029      	b.n	800f2f8 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	330c      	adds	r3, #12
 800f2ae:	7812      	ldrb	r2, [r2, #0]
 800f2b0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2b6:	1c5a      	adds	r2, r3, #1
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f2c0:	b29b      	uxth	r3, r3
 800f2c2:	3b01      	subs	r3, #1
 800f2c4:	b29a      	uxth	r2, r3
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f2ca:	e015      	b.n	800f2f8 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f2cc:	f7f8 f92a 	bl	8007524 <HAL_GetTick>
 800f2d0:	4602      	mov	r2, r0
 800f2d2:	69bb      	ldr	r3, [r7, #24]
 800f2d4:	1ad3      	subs	r3, r2, r3
 800f2d6:	683a      	ldr	r2, [r7, #0]
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d803      	bhi.n	800f2e4 <HAL_SPI_Transmit+0x270>
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f2e2:	d102      	bne.n	800f2ea <HAL_SPI_Transmit+0x276>
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d106      	bne.n	800f2f8 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800f2ea:	2303      	movs	r3, #3
 800f2ec:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	2201      	movs	r2, #1
 800f2f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800f2f6:	e029      	b.n	800f34c <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f2fc:	b29b      	uxth	r3, r3
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d1b1      	bne.n	800f266 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f302:	69ba      	ldr	r2, [r7, #24]
 800f304:	6839      	ldr	r1, [r7, #0]
 800f306:	68f8      	ldr	r0, [r7, #12]
 800f308:	f000 fe88 	bl	801001c <SPI_EndRxTxTransaction>
 800f30c:	4603      	mov	r3, r0
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d002      	beq.n	800f318 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	2220      	movs	r2, #32
 800f316:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	689b      	ldr	r3, [r3, #8]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d10a      	bne.n	800f336 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f320:	2300      	movs	r3, #0
 800f322:	613b      	str	r3, [r7, #16]
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	68db      	ldr	r3, [r3, #12]
 800f32a:	613b      	str	r3, [r7, #16]
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	689b      	ldr	r3, [r3, #8]
 800f332:	613b      	str	r3, [r7, #16]
 800f334:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d002      	beq.n	800f344 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800f33e:	2301      	movs	r3, #1
 800f340:	77fb      	strb	r3, [r7, #31]
 800f342:	e003      	b.n	800f34c <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	2201      	movs	r2, #1
 800f348:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	2200      	movs	r2, #0
 800f350:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800f354:	7ffb      	ldrb	r3, [r7, #31]
}
 800f356:	4618      	mov	r0, r3
 800f358:	3720      	adds	r7, #32
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}

0800f35e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f35e:	b580      	push	{r7, lr}
 800f360:	b088      	sub	sp, #32
 800f362:	af02      	add	r7, sp, #8
 800f364:	60f8      	str	r0, [r7, #12]
 800f366:	60b9      	str	r1, [r7, #8]
 800f368:	603b      	str	r3, [r7, #0]
 800f36a:	4613      	mov	r3, r2
 800f36c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f36e:	2300      	movs	r3, #0
 800f370:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f378:	b2db      	uxtb	r3, r3
 800f37a:	2b01      	cmp	r3, #1
 800f37c:	d002      	beq.n	800f384 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800f37e:	2302      	movs	r3, #2
 800f380:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f382:	e11a      	b.n	800f5ba <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	685b      	ldr	r3, [r3, #4]
 800f388:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f38c:	d112      	bne.n	800f3b4 <HAL_SPI_Receive+0x56>
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	689b      	ldr	r3, [r3, #8]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d10e      	bne.n	800f3b4 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	2204      	movs	r2, #4
 800f39a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800f39e:	88fa      	ldrh	r2, [r7, #6]
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	9300      	str	r3, [sp, #0]
 800f3a4:	4613      	mov	r3, r2
 800f3a6:	68ba      	ldr	r2, [r7, #8]
 800f3a8:	68b9      	ldr	r1, [r7, #8]
 800f3aa:	68f8      	ldr	r0, [r7, #12]
 800f3ac:	f000 f90e 	bl	800f5cc <HAL_SPI_TransmitReceive>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	e107      	b.n	800f5c4 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f3ba:	2b01      	cmp	r3, #1
 800f3bc:	d101      	bne.n	800f3c2 <HAL_SPI_Receive+0x64>
 800f3be:	2302      	movs	r3, #2
 800f3c0:	e100      	b.n	800f5c4 <HAL_SPI_Receive+0x266>
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	2201      	movs	r2, #1
 800f3c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f3ca:	f7f8 f8ab 	bl	8007524 <HAL_GetTick>
 800f3ce:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d002      	beq.n	800f3dc <HAL_SPI_Receive+0x7e>
 800f3d6:	88fb      	ldrh	r3, [r7, #6]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d102      	bne.n	800f3e2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800f3dc:	2301      	movs	r3, #1
 800f3de:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f3e0:	e0eb      	b.n	800f5ba <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	2204      	movs	r2, #4
 800f3e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	68ba      	ldr	r2, [r7, #8]
 800f3f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	88fa      	ldrh	r2, [r7, #6]
 800f3fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	88fa      	ldrh	r2, [r7, #6]
 800f402:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	2200      	movs	r2, #0
 800f40a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	2200      	movs	r2, #0
 800f410:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	2200      	movs	r2, #0
 800f416:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	2200      	movs	r2, #0
 800f41c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	2200      	movs	r2, #0
 800f422:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	68db      	ldr	r3, [r3, #12]
 800f428:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f42c:	d908      	bls.n	800f440 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	685a      	ldr	r2, [r3, #4]
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f43c:	605a      	str	r2, [r3, #4]
 800f43e:	e007      	b.n	800f450 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	685a      	ldr	r2, [r3, #4]
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f44e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	689b      	ldr	r3, [r3, #8]
 800f454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f458:	d10f      	bne.n	800f47a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	681a      	ldr	r2, [r3, #0]
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f468:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	681a      	ldr	r2, [r3, #0]
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800f478:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f484:	2b40      	cmp	r3, #64	; 0x40
 800f486:	d007      	beq.n	800f498 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	681a      	ldr	r2, [r3, #0]
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f496:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	68db      	ldr	r3, [r3, #12]
 800f49c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f4a0:	d86f      	bhi.n	800f582 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800f4a2:	e034      	b.n	800f50e <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	689b      	ldr	r3, [r3, #8]
 800f4aa:	f003 0301 	and.w	r3, r3, #1
 800f4ae:	2b01      	cmp	r3, #1
 800f4b0:	d117      	bne.n	800f4e2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	f103 020c 	add.w	r2, r3, #12
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4be:	7812      	ldrb	r2, [r2, #0]
 800f4c0:	b2d2      	uxtb	r2, r2
 800f4c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4c8:	1c5a      	adds	r2, r3, #1
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f4d4:	b29b      	uxth	r3, r3
 800f4d6:	3b01      	subs	r3, #1
 800f4d8:	b29a      	uxth	r2, r3
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800f4e0:	e015      	b.n	800f50e <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f4e2:	f7f8 f81f 	bl	8007524 <HAL_GetTick>
 800f4e6:	4602      	mov	r2, r0
 800f4e8:	693b      	ldr	r3, [r7, #16]
 800f4ea:	1ad3      	subs	r3, r2, r3
 800f4ec:	683a      	ldr	r2, [r7, #0]
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	d803      	bhi.n	800f4fa <HAL_SPI_Receive+0x19c>
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f4f8:	d102      	bne.n	800f500 <HAL_SPI_Receive+0x1a2>
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d106      	bne.n	800f50e <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800f500:	2303      	movs	r3, #3
 800f502:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	2201      	movs	r2, #1
 800f508:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800f50c:	e055      	b.n	800f5ba <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f514:	b29b      	uxth	r3, r3
 800f516:	2b00      	cmp	r3, #0
 800f518:	d1c4      	bne.n	800f4a4 <HAL_SPI_Receive+0x146>
 800f51a:	e038      	b.n	800f58e <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	689b      	ldr	r3, [r3, #8]
 800f522:	f003 0301 	and.w	r3, r3, #1
 800f526:	2b01      	cmp	r3, #1
 800f528:	d115      	bne.n	800f556 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	68da      	ldr	r2, [r3, #12]
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f534:	b292      	uxth	r2, r2
 800f536:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f53c:	1c9a      	adds	r2, r3, #2
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f548:	b29b      	uxth	r3, r3
 800f54a:	3b01      	subs	r3, #1
 800f54c:	b29a      	uxth	r2, r3
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800f554:	e015      	b.n	800f582 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f556:	f7f7 ffe5 	bl	8007524 <HAL_GetTick>
 800f55a:	4602      	mov	r2, r0
 800f55c:	693b      	ldr	r3, [r7, #16]
 800f55e:	1ad3      	subs	r3, r2, r3
 800f560:	683a      	ldr	r2, [r7, #0]
 800f562:	429a      	cmp	r2, r3
 800f564:	d803      	bhi.n	800f56e <HAL_SPI_Receive+0x210>
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f56c:	d102      	bne.n	800f574 <HAL_SPI_Receive+0x216>
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d106      	bne.n	800f582 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800f574:	2303      	movs	r3, #3
 800f576:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	2201      	movs	r2, #1
 800f57c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800f580:	e01b      	b.n	800f5ba <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f588:	b29b      	uxth	r3, r3
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d1c6      	bne.n	800f51c <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f58e:	693a      	ldr	r2, [r7, #16]
 800f590:	6839      	ldr	r1, [r7, #0]
 800f592:	68f8      	ldr	r0, [r7, #12]
 800f594:	f000 fcea 	bl	800ff6c <SPI_EndRxTransaction>
 800f598:	4603      	mov	r3, r0
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d002      	beq.n	800f5a4 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	2220      	movs	r2, #32
 800f5a2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d002      	beq.n	800f5b2 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800f5ac:	2301      	movs	r3, #1
 800f5ae:	75fb      	strb	r3, [r7, #23]
 800f5b0:	e003      	b.n	800f5ba <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	2201      	movs	r2, #1
 800f5b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	2200      	movs	r2, #0
 800f5be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800f5c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	3718      	adds	r7, #24
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bd80      	pop	{r7, pc}

0800f5cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b08a      	sub	sp, #40	; 0x28
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	60f8      	str	r0, [r7, #12]
 800f5d4:	60b9      	str	r1, [r7, #8]
 800f5d6:	607a      	str	r2, [r7, #4]
 800f5d8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f5da:	2301      	movs	r3, #1
 800f5dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800f5de:	2300      	movs	r3, #0
 800f5e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f5ea:	2b01      	cmp	r3, #1
 800f5ec:	d101      	bne.n	800f5f2 <HAL_SPI_TransmitReceive+0x26>
 800f5ee:	2302      	movs	r3, #2
 800f5f0:	e20a      	b.n	800fa08 <HAL_SPI_TransmitReceive+0x43c>
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	2201      	movs	r2, #1
 800f5f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f5fa:	f7f7 ff93 	bl	8007524 <HAL_GetTick>
 800f5fe:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f606:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	685b      	ldr	r3, [r3, #4]
 800f60c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800f60e:	887b      	ldrh	r3, [r7, #2]
 800f610:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800f612:	887b      	ldrh	r3, [r7, #2]
 800f614:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f616:	7efb      	ldrb	r3, [r7, #27]
 800f618:	2b01      	cmp	r3, #1
 800f61a:	d00e      	beq.n	800f63a <HAL_SPI_TransmitReceive+0x6e>
 800f61c:	697b      	ldr	r3, [r7, #20]
 800f61e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f622:	d106      	bne.n	800f632 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	689b      	ldr	r3, [r3, #8]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d102      	bne.n	800f632 <HAL_SPI_TransmitReceive+0x66>
 800f62c:	7efb      	ldrb	r3, [r7, #27]
 800f62e:	2b04      	cmp	r3, #4
 800f630:	d003      	beq.n	800f63a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800f632:	2302      	movs	r3, #2
 800f634:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800f638:	e1e0      	b.n	800f9fc <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d005      	beq.n	800f64c <HAL_SPI_TransmitReceive+0x80>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d002      	beq.n	800f64c <HAL_SPI_TransmitReceive+0x80>
 800f646:	887b      	ldrh	r3, [r7, #2]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d103      	bne.n	800f654 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800f64c:	2301      	movs	r3, #1
 800f64e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800f652:	e1d3      	b.n	800f9fc <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f65a:	b2db      	uxtb	r3, r3
 800f65c:	2b04      	cmp	r3, #4
 800f65e:	d003      	beq.n	800f668 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	2205      	movs	r2, #5
 800f664:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	2200      	movs	r2, #0
 800f66c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	687a      	ldr	r2, [r7, #4]
 800f672:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	887a      	ldrh	r2, [r7, #2]
 800f678:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	887a      	ldrh	r2, [r7, #2]
 800f680:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	68ba      	ldr	r2, [r7, #8]
 800f688:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	887a      	ldrh	r2, [r7, #2]
 800f68e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	887a      	ldrh	r2, [r7, #2]
 800f694:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	2200      	movs	r2, #0
 800f69a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	2200      	movs	r2, #0
 800f6a0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	68db      	ldr	r3, [r3, #12]
 800f6a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f6aa:	d802      	bhi.n	800f6b2 <HAL_SPI_TransmitReceive+0xe6>
 800f6ac:	8a3b      	ldrh	r3, [r7, #16]
 800f6ae:	2b01      	cmp	r3, #1
 800f6b0:	d908      	bls.n	800f6c4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	685a      	ldr	r2, [r3, #4]
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f6c0:	605a      	str	r2, [r3, #4]
 800f6c2:	e007      	b.n	800f6d4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	685a      	ldr	r2, [r3, #4]
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f6d2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6de:	2b40      	cmp	r3, #64	; 0x40
 800f6e0:	d007      	beq.n	800f6f2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	681a      	ldr	r2, [r3, #0]
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f6f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	68db      	ldr	r3, [r3, #12]
 800f6f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f6fa:	f240 8081 	bls.w	800f800 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	685b      	ldr	r3, [r3, #4]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d002      	beq.n	800f70c <HAL_SPI_TransmitReceive+0x140>
 800f706:	8a7b      	ldrh	r3, [r7, #18]
 800f708:	2b01      	cmp	r3, #1
 800f70a:	d16d      	bne.n	800f7e8 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f710:	881a      	ldrh	r2, [r3, #0]
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f71c:	1c9a      	adds	r2, r3, #2
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f726:	b29b      	uxth	r3, r3
 800f728:	3b01      	subs	r3, #1
 800f72a:	b29a      	uxth	r2, r3
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f730:	e05a      	b.n	800f7e8 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	689b      	ldr	r3, [r3, #8]
 800f738:	f003 0302 	and.w	r3, r3, #2
 800f73c:	2b02      	cmp	r3, #2
 800f73e:	d11b      	bne.n	800f778 <HAL_SPI_TransmitReceive+0x1ac>
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f744:	b29b      	uxth	r3, r3
 800f746:	2b00      	cmp	r3, #0
 800f748:	d016      	beq.n	800f778 <HAL_SPI_TransmitReceive+0x1ac>
 800f74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f74c:	2b01      	cmp	r3, #1
 800f74e:	d113      	bne.n	800f778 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f754:	881a      	ldrh	r2, [r3, #0]
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f760:	1c9a      	adds	r2, r3, #2
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f76a:	b29b      	uxth	r3, r3
 800f76c:	3b01      	subs	r3, #1
 800f76e:	b29a      	uxth	r2, r3
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f774:	2300      	movs	r3, #0
 800f776:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	689b      	ldr	r3, [r3, #8]
 800f77e:	f003 0301 	and.w	r3, r3, #1
 800f782:	2b01      	cmp	r3, #1
 800f784:	d11c      	bne.n	800f7c0 <HAL_SPI_TransmitReceive+0x1f4>
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f78c:	b29b      	uxth	r3, r3
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d016      	beq.n	800f7c0 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	68da      	ldr	r2, [r3, #12]
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f79c:	b292      	uxth	r2, r2
 800f79e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7a4:	1c9a      	adds	r2, r3, #2
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f7b0:	b29b      	uxth	r3, r3
 800f7b2:	3b01      	subs	r3, #1
 800f7b4:	b29a      	uxth	r2, r3
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f7bc:	2301      	movs	r3, #1
 800f7be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f7c0:	f7f7 feb0 	bl	8007524 <HAL_GetTick>
 800f7c4:	4602      	mov	r2, r0
 800f7c6:	69fb      	ldr	r3, [r7, #28]
 800f7c8:	1ad3      	subs	r3, r2, r3
 800f7ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7cc:	429a      	cmp	r2, r3
 800f7ce:	d80b      	bhi.n	800f7e8 <HAL_SPI_TransmitReceive+0x21c>
 800f7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f7d6:	d007      	beq.n	800f7e8 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800f7d8:	2303      	movs	r3, #3
 800f7da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	2201      	movs	r2, #1
 800f7e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800f7e6:	e109      	b.n	800f9fc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f7ec:	b29b      	uxth	r3, r3
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d19f      	bne.n	800f732 <HAL_SPI_TransmitReceive+0x166>
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f7f8:	b29b      	uxth	r3, r3
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d199      	bne.n	800f732 <HAL_SPI_TransmitReceive+0x166>
 800f7fe:	e0e3      	b.n	800f9c8 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	685b      	ldr	r3, [r3, #4]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d003      	beq.n	800f810 <HAL_SPI_TransmitReceive+0x244>
 800f808:	8a7b      	ldrh	r3, [r7, #18]
 800f80a:	2b01      	cmp	r3, #1
 800f80c:	f040 80cf 	bne.w	800f9ae <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f814:	b29b      	uxth	r3, r3
 800f816:	2b01      	cmp	r3, #1
 800f818:	d912      	bls.n	800f840 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f81e:	881a      	ldrh	r2, [r3, #0]
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f82a:	1c9a      	adds	r2, r3, #2
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f834:	b29b      	uxth	r3, r3
 800f836:	3b02      	subs	r3, #2
 800f838:	b29a      	uxth	r2, r3
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f83e:	e0b6      	b.n	800f9ae <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	330c      	adds	r3, #12
 800f84a:	7812      	ldrb	r2, [r2, #0]
 800f84c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f852:	1c5a      	adds	r2, r3, #1
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f85c:	b29b      	uxth	r3, r3
 800f85e:	3b01      	subs	r3, #1
 800f860:	b29a      	uxth	r2, r3
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f866:	e0a2      	b.n	800f9ae <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	689b      	ldr	r3, [r3, #8]
 800f86e:	f003 0302 	and.w	r3, r3, #2
 800f872:	2b02      	cmp	r3, #2
 800f874:	d134      	bne.n	800f8e0 <HAL_SPI_TransmitReceive+0x314>
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f87a:	b29b      	uxth	r3, r3
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d02f      	beq.n	800f8e0 <HAL_SPI_TransmitReceive+0x314>
 800f880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f882:	2b01      	cmp	r3, #1
 800f884:	d12c      	bne.n	800f8e0 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f88a:	b29b      	uxth	r3, r3
 800f88c:	2b01      	cmp	r3, #1
 800f88e:	d912      	bls.n	800f8b6 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f894:	881a      	ldrh	r2, [r3, #0]
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8a0:	1c9a      	adds	r2, r3, #2
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f8aa:	b29b      	uxth	r3, r3
 800f8ac:	3b02      	subs	r3, #2
 800f8ae:	b29a      	uxth	r2, r3
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f8b4:	e012      	b.n	800f8dc <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	330c      	adds	r3, #12
 800f8c0:	7812      	ldrb	r2, [r2, #0]
 800f8c2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8c8:	1c5a      	adds	r2, r3, #1
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f8d2:	b29b      	uxth	r3, r3
 800f8d4:	3b01      	subs	r3, #1
 800f8d6:	b29a      	uxth	r2, r3
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f8dc:	2300      	movs	r3, #0
 800f8de:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	689b      	ldr	r3, [r3, #8]
 800f8e6:	f003 0301 	and.w	r3, r3, #1
 800f8ea:	2b01      	cmp	r3, #1
 800f8ec:	d148      	bne.n	800f980 <HAL_SPI_TransmitReceive+0x3b4>
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f8f4:	b29b      	uxth	r3, r3
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d042      	beq.n	800f980 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f900:	b29b      	uxth	r3, r3
 800f902:	2b01      	cmp	r3, #1
 800f904:	d923      	bls.n	800f94e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	68da      	ldr	r2, [r3, #12]
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f910:	b292      	uxth	r2, r2
 800f912:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f918:	1c9a      	adds	r2, r3, #2
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f924:	b29b      	uxth	r3, r3
 800f926:	3b02      	subs	r3, #2
 800f928:	b29a      	uxth	r2, r3
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f936:	b29b      	uxth	r3, r3
 800f938:	2b01      	cmp	r3, #1
 800f93a:	d81f      	bhi.n	800f97c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	685a      	ldr	r2, [r3, #4]
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f94a:	605a      	str	r2, [r3, #4]
 800f94c:	e016      	b.n	800f97c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	f103 020c 	add.w	r2, r3, #12
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f95a:	7812      	ldrb	r2, [r2, #0]
 800f95c:	b2d2      	uxtb	r2, r2
 800f95e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f964:	1c5a      	adds	r2, r3, #1
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f970:	b29b      	uxth	r3, r3
 800f972:	3b01      	subs	r3, #1
 800f974:	b29a      	uxth	r2, r3
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f97c:	2301      	movs	r3, #1
 800f97e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f980:	f7f7 fdd0 	bl	8007524 <HAL_GetTick>
 800f984:	4602      	mov	r2, r0
 800f986:	69fb      	ldr	r3, [r7, #28]
 800f988:	1ad3      	subs	r3, r2, r3
 800f98a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f98c:	429a      	cmp	r2, r3
 800f98e:	d803      	bhi.n	800f998 <HAL_SPI_TransmitReceive+0x3cc>
 800f990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f992:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f996:	d102      	bne.n	800f99e <HAL_SPI_TransmitReceive+0x3d2>
 800f998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d107      	bne.n	800f9ae <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800f99e:	2303      	movs	r3, #3
 800f9a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	2201      	movs	r2, #1
 800f9a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800f9ac:	e026      	b.n	800f9fc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f9b2:	b29b      	uxth	r3, r3
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	f47f af57 	bne.w	800f868 <HAL_SPI_TransmitReceive+0x29c>
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f9c0:	b29b      	uxth	r3, r3
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	f47f af50 	bne.w	800f868 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f9c8:	69fa      	ldr	r2, [r7, #28]
 800f9ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f9cc:	68f8      	ldr	r0, [r7, #12]
 800f9ce:	f000 fb25 	bl	801001c <SPI_EndRxTxTransaction>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d005      	beq.n	800f9e4 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800f9d8:	2301      	movs	r3, #1
 800f9da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	2220      	movs	r2, #32
 800f9e2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d003      	beq.n	800f9f4 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800f9ec:	2301      	movs	r3, #1
 800f9ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f9f2:	e003      	b.n	800f9fc <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	2201      	movs	r2, #1
 800f9f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	2200      	movs	r2, #0
 800fa00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800fa04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800fa08:	4618      	mov	r0, r3
 800fa0a:	3728      	adds	r7, #40	; 0x28
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd80      	pop	{r7, pc}

0800fa10 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b086      	sub	sp, #24
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	60f8      	str	r0, [r7, #12]
 800fa18:	60b9      	str	r1, [r7, #8]
 800fa1a:	4613      	mov	r3, r2
 800fa1c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fa28:	2b01      	cmp	r3, #1
 800fa2a:	d101      	bne.n	800fa30 <HAL_SPI_Transmit_DMA+0x20>
 800fa2c:	2302      	movs	r3, #2
 800fa2e:	e0d4      	b.n	800fbda <HAL_SPI_Transmit_DMA+0x1ca>
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	2201      	movs	r2, #1
 800fa34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fa3e:	b2db      	uxtb	r3, r3
 800fa40:	2b01      	cmp	r3, #1
 800fa42:	d002      	beq.n	800fa4a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800fa44:	2302      	movs	r3, #2
 800fa46:	75fb      	strb	r3, [r7, #23]
    goto error;
 800fa48:	e0c2      	b.n	800fbd0 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800fa4a:	68bb      	ldr	r3, [r7, #8]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d002      	beq.n	800fa56 <HAL_SPI_Transmit_DMA+0x46>
 800fa50:	88fb      	ldrh	r3, [r7, #6]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d102      	bne.n	800fa5c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800fa56:	2301      	movs	r3, #1
 800fa58:	75fb      	strb	r3, [r7, #23]
    goto error;
 800fa5a:	e0b9      	b.n	800fbd0 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	2203      	movs	r2, #3
 800fa60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	2200      	movs	r2, #0
 800fa68:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	68ba      	ldr	r2, [r7, #8]
 800fa6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	88fa      	ldrh	r2, [r7, #6]
 800fa74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	88fa      	ldrh	r2, [r7, #6]
 800fa7a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	2200      	movs	r2, #0
 800fa80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	2200      	movs	r2, #0
 800fa86:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	2200      	movs	r2, #0
 800fa92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	2200      	movs	r2, #0
 800fa9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	689b      	ldr	r3, [r3, #8]
 800faa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800faa6:	d10f      	bne.n	800fac8 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	681a      	ldr	r2, [r3, #0]
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fab6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	681a      	ldr	r2, [r3, #0]
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fac6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800facc:	4a45      	ldr	r2, [pc, #276]	; (800fbe4 <HAL_SPI_Transmit_DMA+0x1d4>)
 800face:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fad4:	4a44      	ldr	r2, [pc, #272]	; (800fbe8 <HAL_SPI_Transmit_DMA+0x1d8>)
 800fad6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fadc:	4a43      	ldr	r2, [pc, #268]	; (800fbec <HAL_SPI_Transmit_DMA+0x1dc>)
 800fade:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fae4:	2200      	movs	r2, #0
 800fae6:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	685a      	ldr	r2, [r3, #4]
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800faf6:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	68db      	ldr	r3, [r3, #12]
 800fafc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800fb00:	d82d      	bhi.n	800fb5e <HAL_SPI_Transmit_DMA+0x14e>
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb06:	699b      	ldr	r3, [r3, #24]
 800fb08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fb0c:	d127      	bne.n	800fb5e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fb12:	b29b      	uxth	r3, r3
 800fb14:	f003 0301 	and.w	r3, r3, #1
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d10f      	bne.n	800fb3c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	685a      	ldr	r2, [r3, #4]
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800fb2a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fb30:	b29b      	uxth	r3, r3
 800fb32:	085b      	lsrs	r3, r3, #1
 800fb34:	b29a      	uxth	r2, r3
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	87da      	strh	r2, [r3, #62]	; 0x3e
 800fb3a:	e010      	b.n	800fb5e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	685a      	ldr	r2, [r3, #4]
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fb4a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fb50:	b29b      	uxth	r3, r3
 800fb52:	085b      	lsrs	r3, r3, #1
 800fb54:	b29b      	uxth	r3, r3
 800fb56:	3301      	adds	r3, #1
 800fb58:	b29a      	uxth	r2, r3
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb66:	4619      	mov	r1, r3
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	330c      	adds	r3, #12
 800fb6e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fb74:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800fb76:	f7f7 febf 	bl	80078f8 <HAL_DMA_Start_IT>
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d008      	beq.n	800fb92 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fb84:	f043 0210 	orr.w	r2, r3, #16
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800fb8c:	2301      	movs	r3, #1
 800fb8e:	75fb      	strb	r3, [r7, #23]

    goto error;
 800fb90:	e01e      	b.n	800fbd0 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb9c:	2b40      	cmp	r3, #64	; 0x40
 800fb9e:	d007      	beq.n	800fbb0 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	681a      	ldr	r2, [r3, #0]
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fbae:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	685a      	ldr	r2, [r3, #4]
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	f042 0220 	orr.w	r2, r2, #32
 800fbbe:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	685a      	ldr	r2, [r3, #4]
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	f042 0202 	orr.w	r2, r2, #2
 800fbce:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800fbd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	3718      	adds	r7, #24
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}
 800fbe2:	bf00      	nop
 800fbe4:	0800fcd3 	.word	0x0800fcd3
 800fbe8:	0800fc2d 	.word	0x0800fc2d
 800fbec:	0800fcef 	.word	0x0800fcef

0800fbf0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800fbf0:	b480      	push	{r7}
 800fbf2:	b083      	sub	sp, #12
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800fbf8:	bf00      	nop
 800fbfa:	370c      	adds	r7, #12
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc02:	4770      	bx	lr

0800fc04 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800fc04:	b480      	push	{r7}
 800fc06:	b083      	sub	sp, #12
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800fc0c:	bf00      	nop
 800fc0e:	370c      	adds	r7, #12
 800fc10:	46bd      	mov	sp, r7
 800fc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc16:	4770      	bx	lr

0800fc18 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800fc18:	b480      	push	{r7}
 800fc1a:	b083      	sub	sp, #12
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800fc20:	bf00      	nop
 800fc22:	370c      	adds	r7, #12
 800fc24:	46bd      	mov	sp, r7
 800fc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2a:	4770      	bx	lr

0800fc2c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b086      	sub	sp, #24
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc38:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fc3a:	f7f7 fc73 	bl	8007524 <HAL_GetTick>
 800fc3e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	f003 0320 	and.w	r3, r3, #32
 800fc4a:	2b20      	cmp	r3, #32
 800fc4c:	d03b      	beq.n	800fcc6 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800fc4e:	697b      	ldr	r3, [r7, #20]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	685a      	ldr	r2, [r3, #4]
 800fc54:	697b      	ldr	r3, [r7, #20]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	f022 0220 	bic.w	r2, r2, #32
 800fc5c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800fc5e:	697b      	ldr	r3, [r7, #20]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	685a      	ldr	r2, [r3, #4]
 800fc64:	697b      	ldr	r3, [r7, #20]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	f022 0202 	bic.w	r2, r2, #2
 800fc6c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800fc6e:	693a      	ldr	r2, [r7, #16]
 800fc70:	2164      	movs	r1, #100	; 0x64
 800fc72:	6978      	ldr	r0, [r7, #20]
 800fc74:	f000 f9d2 	bl	801001c <SPI_EndRxTxTransaction>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d005      	beq.n	800fc8a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fc82:	f043 0220 	orr.w	r2, r3, #32
 800fc86:	697b      	ldr	r3, [r7, #20]
 800fc88:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800fc8a:	697b      	ldr	r3, [r7, #20]
 800fc8c:	689b      	ldr	r3, [r3, #8]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d10a      	bne.n	800fca8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fc92:	2300      	movs	r3, #0
 800fc94:	60fb      	str	r3, [r7, #12]
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	68db      	ldr	r3, [r3, #12]
 800fc9c:	60fb      	str	r3, [r7, #12]
 800fc9e:	697b      	ldr	r3, [r7, #20]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	689b      	ldr	r3, [r3, #8]
 800fca4:	60fb      	str	r3, [r7, #12]
 800fca6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800fca8:	697b      	ldr	r3, [r7, #20]
 800fcaa:	2200      	movs	r2, #0
 800fcac:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800fcae:	697b      	ldr	r3, [r7, #20]
 800fcb0:	2201      	movs	r2, #1
 800fcb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fcb6:	697b      	ldr	r3, [r7, #20]
 800fcb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d003      	beq.n	800fcc6 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800fcbe:	6978      	ldr	r0, [r7, #20]
 800fcc0:	f7ff ffaa 	bl	800fc18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800fcc4:	e002      	b.n	800fccc <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800fcc6:	6978      	ldr	r0, [r7, #20]
 800fcc8:	f7ff ff92 	bl	800fbf0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800fccc:	3718      	adds	r7, #24
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	bd80      	pop	{r7, pc}

0800fcd2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fcd2:	b580      	push	{r7, lr}
 800fcd4:	b084      	sub	sp, #16
 800fcd6:	af00      	add	r7, sp, #0
 800fcd8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcde:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800fce0:	68f8      	ldr	r0, [r7, #12]
 800fce2:	f7ff ff8f 	bl	800fc04 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800fce6:	bf00      	nop
 800fce8:	3710      	adds	r7, #16
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}

0800fcee <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800fcee:	b580      	push	{r7, lr}
 800fcf0:	b084      	sub	sp, #16
 800fcf2:	af00      	add	r7, sp, #0
 800fcf4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcfa:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	685a      	ldr	r2, [r3, #4]
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	f022 0203 	bic.w	r2, r2, #3
 800fd0a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fd10:	f043 0210 	orr.w	r2, r3, #16
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	2201      	movs	r2, #1
 800fd1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800fd20:	68f8      	ldr	r0, [r7, #12]
 800fd22:	f7ff ff79 	bl	800fc18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800fd26:	bf00      	nop
 800fd28:	3710      	adds	r7, #16
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}
	...

0800fd30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b088      	sub	sp, #32
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	60f8      	str	r0, [r7, #12]
 800fd38:	60b9      	str	r1, [r7, #8]
 800fd3a:	603b      	str	r3, [r7, #0]
 800fd3c:	4613      	mov	r3, r2
 800fd3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800fd40:	f7f7 fbf0 	bl	8007524 <HAL_GetTick>
 800fd44:	4602      	mov	r2, r0
 800fd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd48:	1a9b      	subs	r3, r3, r2
 800fd4a:	683a      	ldr	r2, [r7, #0]
 800fd4c:	4413      	add	r3, r2
 800fd4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800fd50:	f7f7 fbe8 	bl	8007524 <HAL_GetTick>
 800fd54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800fd56:	4b39      	ldr	r3, [pc, #228]	; (800fe3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	015b      	lsls	r3, r3, #5
 800fd5c:	0d1b      	lsrs	r3, r3, #20
 800fd5e:	69fa      	ldr	r2, [r7, #28]
 800fd60:	fb02 f303 	mul.w	r3, r2, r3
 800fd64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fd66:	e054      	b.n	800fe12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd6e:	d050      	beq.n	800fe12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800fd70:	f7f7 fbd8 	bl	8007524 <HAL_GetTick>
 800fd74:	4602      	mov	r2, r0
 800fd76:	69bb      	ldr	r3, [r7, #24]
 800fd78:	1ad3      	subs	r3, r2, r3
 800fd7a:	69fa      	ldr	r2, [r7, #28]
 800fd7c:	429a      	cmp	r2, r3
 800fd7e:	d902      	bls.n	800fd86 <SPI_WaitFlagStateUntilTimeout+0x56>
 800fd80:	69fb      	ldr	r3, [r7, #28]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d13d      	bne.n	800fe02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	685a      	ldr	r2, [r3, #4]
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800fd94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	685b      	ldr	r3, [r3, #4]
 800fd9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fd9e:	d111      	bne.n	800fdc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	689b      	ldr	r3, [r3, #8]
 800fda4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fda8:	d004      	beq.n	800fdb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	689b      	ldr	r3, [r3, #8]
 800fdae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fdb2:	d107      	bne.n	800fdc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	681a      	ldr	r2, [r3, #0]
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fdc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fdcc:	d10f      	bne.n	800fdee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	681a      	ldr	r2, [r3, #0]
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fddc:	601a      	str	r2, [r3, #0]
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	681a      	ldr	r2, [r3, #0]
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fdec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	2201      	movs	r2, #1
 800fdf2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800fdfe:	2303      	movs	r3, #3
 800fe00:	e017      	b.n	800fe32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800fe02:	697b      	ldr	r3, [r7, #20]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d101      	bne.n	800fe0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800fe08:	2300      	movs	r3, #0
 800fe0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800fe0c:	697b      	ldr	r3, [r7, #20]
 800fe0e:	3b01      	subs	r3, #1
 800fe10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	689a      	ldr	r2, [r3, #8]
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	4013      	ands	r3, r2
 800fe1c:	68ba      	ldr	r2, [r7, #8]
 800fe1e:	429a      	cmp	r2, r3
 800fe20:	bf0c      	ite	eq
 800fe22:	2301      	moveq	r3, #1
 800fe24:	2300      	movne	r3, #0
 800fe26:	b2db      	uxtb	r3, r3
 800fe28:	461a      	mov	r2, r3
 800fe2a:	79fb      	ldrb	r3, [r7, #7]
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	d19b      	bne.n	800fd68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800fe30:	2300      	movs	r3, #0
}
 800fe32:	4618      	mov	r0, r3
 800fe34:	3720      	adds	r7, #32
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}
 800fe3a:	bf00      	nop
 800fe3c:	20000004 	.word	0x20000004

0800fe40 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b08a      	sub	sp, #40	; 0x28
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	60f8      	str	r0, [r7, #12]
 800fe48:	60b9      	str	r1, [r7, #8]
 800fe4a:	607a      	str	r2, [r7, #4]
 800fe4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800fe4e:	2300      	movs	r3, #0
 800fe50:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800fe52:	f7f7 fb67 	bl	8007524 <HAL_GetTick>
 800fe56:	4602      	mov	r2, r0
 800fe58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe5a:	1a9b      	subs	r3, r3, r2
 800fe5c:	683a      	ldr	r2, [r7, #0]
 800fe5e:	4413      	add	r3, r2
 800fe60:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800fe62:	f7f7 fb5f 	bl	8007524 <HAL_GetTick>
 800fe66:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	330c      	adds	r3, #12
 800fe6e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800fe70:	4b3d      	ldr	r3, [pc, #244]	; (800ff68 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800fe72:	681a      	ldr	r2, [r3, #0]
 800fe74:	4613      	mov	r3, r2
 800fe76:	009b      	lsls	r3, r3, #2
 800fe78:	4413      	add	r3, r2
 800fe7a:	00da      	lsls	r2, r3, #3
 800fe7c:	1ad3      	subs	r3, r2, r3
 800fe7e:	0d1b      	lsrs	r3, r3, #20
 800fe80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe82:	fb02 f303 	mul.w	r3, r2, r3
 800fe86:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800fe88:	e060      	b.n	800ff4c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800fe8a:	68bb      	ldr	r3, [r7, #8]
 800fe8c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800fe90:	d107      	bne.n	800fea2 <SPI_WaitFifoStateUntilTimeout+0x62>
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d104      	bne.n	800fea2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800fe98:	69fb      	ldr	r3, [r7, #28]
 800fe9a:	781b      	ldrb	r3, [r3, #0]
 800fe9c:	b2db      	uxtb	r3, r3
 800fe9e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800fea0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800fea2:	683b      	ldr	r3, [r7, #0]
 800fea4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fea8:	d050      	beq.n	800ff4c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800feaa:	f7f7 fb3b 	bl	8007524 <HAL_GetTick>
 800feae:	4602      	mov	r2, r0
 800feb0:	6a3b      	ldr	r3, [r7, #32]
 800feb2:	1ad3      	subs	r3, r2, r3
 800feb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800feb6:	429a      	cmp	r2, r3
 800feb8:	d902      	bls.n	800fec0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800feba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800febc:	2b00      	cmp	r3, #0
 800febe:	d13d      	bne.n	800ff3c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	685a      	ldr	r2, [r3, #4]
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800fece:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	685b      	ldr	r3, [r3, #4]
 800fed4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fed8:	d111      	bne.n	800fefe <SPI_WaitFifoStateUntilTimeout+0xbe>
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	689b      	ldr	r3, [r3, #8]
 800fede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fee2:	d004      	beq.n	800feee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	689b      	ldr	r3, [r3, #8]
 800fee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800feec:	d107      	bne.n	800fefe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	681a      	ldr	r2, [r3, #0]
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fefc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ff06:	d10f      	bne.n	800ff28 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	681a      	ldr	r2, [r3, #0]
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ff16:	601a      	str	r2, [r3, #0]
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	681a      	ldr	r2, [r3, #0]
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ff26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	2201      	movs	r2, #1
 800ff2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	2200      	movs	r2, #0
 800ff34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ff38:	2303      	movs	r3, #3
 800ff3a:	e010      	b.n	800ff5e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ff3c:	69bb      	ldr	r3, [r7, #24]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d101      	bne.n	800ff46 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800ff42:	2300      	movs	r3, #0
 800ff44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800ff46:	69bb      	ldr	r3, [r7, #24]
 800ff48:	3b01      	subs	r3, #1
 800ff4a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	689a      	ldr	r2, [r3, #8]
 800ff52:	68bb      	ldr	r3, [r7, #8]
 800ff54:	4013      	ands	r3, r2
 800ff56:	687a      	ldr	r2, [r7, #4]
 800ff58:	429a      	cmp	r2, r3
 800ff5a:	d196      	bne.n	800fe8a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800ff5c:	2300      	movs	r3, #0
}
 800ff5e:	4618      	mov	r0, r3
 800ff60:	3728      	adds	r7, #40	; 0x28
 800ff62:	46bd      	mov	sp, r7
 800ff64:	bd80      	pop	{r7, pc}
 800ff66:	bf00      	nop
 800ff68:	20000004 	.word	0x20000004

0800ff6c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b086      	sub	sp, #24
 800ff70:	af02      	add	r7, sp, #8
 800ff72:	60f8      	str	r0, [r7, #12]
 800ff74:	60b9      	str	r1, [r7, #8]
 800ff76:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	685b      	ldr	r3, [r3, #4]
 800ff7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ff80:	d111      	bne.n	800ffa6 <SPI_EndRxTransaction+0x3a>
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	689b      	ldr	r3, [r3, #8]
 800ff86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff8a:	d004      	beq.n	800ff96 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	689b      	ldr	r3, [r3, #8]
 800ff90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ff94:	d107      	bne.n	800ffa6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	681a      	ldr	r2, [r3, #0]
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ffa4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	9300      	str	r3, [sp, #0]
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	2200      	movs	r2, #0
 800ffae:	2180      	movs	r1, #128	; 0x80
 800ffb0:	68f8      	ldr	r0, [r7, #12]
 800ffb2:	f7ff febd 	bl	800fd30 <SPI_WaitFlagStateUntilTimeout>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d007      	beq.n	800ffcc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ffc0:	f043 0220 	orr.w	r2, r3, #32
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ffc8:	2303      	movs	r3, #3
 800ffca:	e023      	b.n	8010014 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	685b      	ldr	r3, [r3, #4]
 800ffd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ffd4:	d11d      	bne.n	8010012 <SPI_EndRxTransaction+0xa6>
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	689b      	ldr	r3, [r3, #8]
 800ffda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ffde:	d004      	beq.n	800ffea <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	689b      	ldr	r3, [r3, #8]
 800ffe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ffe8:	d113      	bne.n	8010012 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	9300      	str	r3, [sp, #0]
 800ffee:	68bb      	ldr	r3, [r7, #8]
 800fff0:	2200      	movs	r2, #0
 800fff2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800fff6:	68f8      	ldr	r0, [r7, #12]
 800fff8:	f7ff ff22 	bl	800fe40 <SPI_WaitFifoStateUntilTimeout>
 800fffc:	4603      	mov	r3, r0
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d007      	beq.n	8010012 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010006:	f043 0220 	orr.w	r2, r3, #32
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801000e:	2303      	movs	r3, #3
 8010010:	e000      	b.n	8010014 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8010012:	2300      	movs	r3, #0
}
 8010014:	4618      	mov	r0, r3
 8010016:	3710      	adds	r7, #16
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}

0801001c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b086      	sub	sp, #24
 8010020:	af02      	add	r7, sp, #8
 8010022:	60f8      	str	r0, [r7, #12]
 8010024:	60b9      	str	r1, [r7, #8]
 8010026:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	9300      	str	r3, [sp, #0]
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	2200      	movs	r2, #0
 8010030:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8010034:	68f8      	ldr	r0, [r7, #12]
 8010036:	f7ff ff03 	bl	800fe40 <SPI_WaitFifoStateUntilTimeout>
 801003a:	4603      	mov	r3, r0
 801003c:	2b00      	cmp	r3, #0
 801003e:	d007      	beq.n	8010050 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010044:	f043 0220 	orr.w	r2, r3, #32
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801004c:	2303      	movs	r3, #3
 801004e:	e027      	b.n	80100a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	9300      	str	r3, [sp, #0]
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	2200      	movs	r2, #0
 8010058:	2180      	movs	r1, #128	; 0x80
 801005a:	68f8      	ldr	r0, [r7, #12]
 801005c:	f7ff fe68 	bl	800fd30 <SPI_WaitFlagStateUntilTimeout>
 8010060:	4603      	mov	r3, r0
 8010062:	2b00      	cmp	r3, #0
 8010064:	d007      	beq.n	8010076 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801006a:	f043 0220 	orr.w	r2, r3, #32
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8010072:	2303      	movs	r3, #3
 8010074:	e014      	b.n	80100a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	9300      	str	r3, [sp, #0]
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	2200      	movs	r2, #0
 801007e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8010082:	68f8      	ldr	r0, [r7, #12]
 8010084:	f7ff fedc 	bl	800fe40 <SPI_WaitFifoStateUntilTimeout>
 8010088:	4603      	mov	r3, r0
 801008a:	2b00      	cmp	r3, #0
 801008c:	d007      	beq.n	801009e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010092:	f043 0220 	orr.w	r2, r3, #32
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801009a:	2303      	movs	r3, #3
 801009c:	e000      	b.n	80100a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801009e:	2300      	movs	r3, #0
}
 80100a0:	4618      	mov	r0, r3
 80100a2:	3710      	adds	r7, #16
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}

080100a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b082      	sub	sp, #8
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d101      	bne.n	80100ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80100b6:	2301      	movs	r3, #1
 80100b8:	e049      	b.n	801014e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80100c0:	b2db      	uxtb	r3, r3
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d106      	bne.n	80100d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	2200      	movs	r2, #0
 80100ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80100ce:	6878      	ldr	r0, [r7, #4]
 80100d0:	f7f5 fad6 	bl	8005680 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2202      	movs	r2, #2
 80100d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681a      	ldr	r2, [r3, #0]
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	3304      	adds	r3, #4
 80100e4:	4619      	mov	r1, r3
 80100e6:	4610      	mov	r0, r2
 80100e8:	f000 fab6 	bl	8010658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	2201      	movs	r2, #1
 80100f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2201      	movs	r2, #1
 80100f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2201      	movs	r2, #1
 8010100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2201      	movs	r2, #1
 8010108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2201      	movs	r2, #1
 8010110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2201      	movs	r2, #1
 8010118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	2201      	movs	r2, #1
 8010120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2201      	movs	r2, #1
 8010128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	2201      	movs	r2, #1
 8010130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2201      	movs	r2, #1
 8010138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	2201      	movs	r2, #1
 8010140:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	2201      	movs	r2, #1
 8010148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801014c:	2300      	movs	r3, #0
}
 801014e:	4618      	mov	r0, r3
 8010150:	3708      	adds	r7, #8
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}
	...

08010158 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010158:	b480      	push	{r7}
 801015a:	b085      	sub	sp, #20
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010166:	b2db      	uxtb	r3, r3
 8010168:	2b01      	cmp	r3, #1
 801016a:	d001      	beq.n	8010170 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801016c:	2301      	movs	r3, #1
 801016e:	e04f      	b.n	8010210 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2202      	movs	r2, #2
 8010174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	68da      	ldr	r2, [r3, #12]
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	f042 0201 	orr.w	r2, r2, #1
 8010186:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	4a23      	ldr	r2, [pc, #140]	; (801021c <HAL_TIM_Base_Start_IT+0xc4>)
 801018e:	4293      	cmp	r3, r2
 8010190:	d01d      	beq.n	80101ce <HAL_TIM_Base_Start_IT+0x76>
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801019a:	d018      	beq.n	80101ce <HAL_TIM_Base_Start_IT+0x76>
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	4a1f      	ldr	r2, [pc, #124]	; (8010220 <HAL_TIM_Base_Start_IT+0xc8>)
 80101a2:	4293      	cmp	r3, r2
 80101a4:	d013      	beq.n	80101ce <HAL_TIM_Base_Start_IT+0x76>
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	4a1e      	ldr	r2, [pc, #120]	; (8010224 <HAL_TIM_Base_Start_IT+0xcc>)
 80101ac:	4293      	cmp	r3, r2
 80101ae:	d00e      	beq.n	80101ce <HAL_TIM_Base_Start_IT+0x76>
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	4a1c      	ldr	r2, [pc, #112]	; (8010228 <HAL_TIM_Base_Start_IT+0xd0>)
 80101b6:	4293      	cmp	r3, r2
 80101b8:	d009      	beq.n	80101ce <HAL_TIM_Base_Start_IT+0x76>
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	4a1b      	ldr	r2, [pc, #108]	; (801022c <HAL_TIM_Base_Start_IT+0xd4>)
 80101c0:	4293      	cmp	r3, r2
 80101c2:	d004      	beq.n	80101ce <HAL_TIM_Base_Start_IT+0x76>
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	4a19      	ldr	r2, [pc, #100]	; (8010230 <HAL_TIM_Base_Start_IT+0xd8>)
 80101ca:	4293      	cmp	r3, r2
 80101cc:	d115      	bne.n	80101fa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	689a      	ldr	r2, [r3, #8]
 80101d4:	4b17      	ldr	r3, [pc, #92]	; (8010234 <HAL_TIM_Base_Start_IT+0xdc>)
 80101d6:	4013      	ands	r3, r2
 80101d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	2b06      	cmp	r3, #6
 80101de:	d015      	beq.n	801020c <HAL_TIM_Base_Start_IT+0xb4>
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80101e6:	d011      	beq.n	801020c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	681a      	ldr	r2, [r3, #0]
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	f042 0201 	orr.w	r2, r2, #1
 80101f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80101f8:	e008      	b.n	801020c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	681a      	ldr	r2, [r3, #0]
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	f042 0201 	orr.w	r2, r2, #1
 8010208:	601a      	str	r2, [r3, #0]
 801020a:	e000      	b.n	801020e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801020c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801020e:	2300      	movs	r3, #0
}
 8010210:	4618      	mov	r0, r3
 8010212:	3714      	adds	r7, #20
 8010214:	46bd      	mov	sp, r7
 8010216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021a:	4770      	bx	lr
 801021c:	40012c00 	.word	0x40012c00
 8010220:	40000400 	.word	0x40000400
 8010224:	40000800 	.word	0x40000800
 8010228:	40000c00 	.word	0x40000c00
 801022c:	40013400 	.word	0x40013400
 8010230:	40014000 	.word	0x40014000
 8010234:	00010007 	.word	0x00010007

08010238 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b082      	sub	sp, #8
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d101      	bne.n	801024a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8010246:	2301      	movs	r3, #1
 8010248:	e049      	b.n	80102de <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010250:	b2db      	uxtb	r3, r3
 8010252:	2b00      	cmp	r3, #0
 8010254:	d106      	bne.n	8010264 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	2200      	movs	r2, #0
 801025a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 801025e:	6878      	ldr	r0, [r7, #4]
 8010260:	f000 f841 	bl	80102e6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2202      	movs	r2, #2
 8010268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	681a      	ldr	r2, [r3, #0]
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	3304      	adds	r3, #4
 8010274:	4619      	mov	r1, r3
 8010276:	4610      	mov	r0, r2
 8010278:	f000 f9ee 	bl	8010658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2201      	movs	r2, #1
 8010280:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	2201      	movs	r2, #1
 8010288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	2201      	movs	r2, #1
 8010290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2201      	movs	r2, #1
 8010298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2201      	movs	r2, #1
 80102a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	2201      	movs	r2, #1
 80102a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2201      	movs	r2, #1
 80102b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	2201      	movs	r2, #1
 80102b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2201      	movs	r2, #1
 80102c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	2201      	movs	r2, #1
 80102c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2201      	movs	r2, #1
 80102d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2201      	movs	r2, #1
 80102d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80102dc:	2300      	movs	r3, #0
}
 80102de:	4618      	mov	r0, r3
 80102e0:	3708      	adds	r7, #8
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bd80      	pop	{r7, pc}

080102e6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80102e6:	b480      	push	{r7}
 80102e8:	b083      	sub	sp, #12
 80102ea:	af00      	add	r7, sp, #0
 80102ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80102ee:	bf00      	nop
 80102f0:	370c      	adds	r7, #12
 80102f2:	46bd      	mov	sp, r7
 80102f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f8:	4770      	bx	lr

080102fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80102fa:	b580      	push	{r7, lr}
 80102fc:	b084      	sub	sp, #16
 80102fe:	af00      	add	r7, sp, #0
 8010300:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	68db      	ldr	r3, [r3, #12]
 8010308:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	691b      	ldr	r3, [r3, #16]
 8010310:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8010312:	68bb      	ldr	r3, [r7, #8]
 8010314:	f003 0302 	and.w	r3, r3, #2
 8010318:	2b00      	cmp	r3, #0
 801031a:	d020      	beq.n	801035e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	f003 0302 	and.w	r3, r3, #2
 8010322:	2b00      	cmp	r3, #0
 8010324:	d01b      	beq.n	801035e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	f06f 0202 	mvn.w	r2, #2
 801032e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	2201      	movs	r2, #1
 8010334:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	699b      	ldr	r3, [r3, #24]
 801033c:	f003 0303 	and.w	r3, r3, #3
 8010340:	2b00      	cmp	r3, #0
 8010342:	d003      	beq.n	801034c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010344:	6878      	ldr	r0, [r7, #4]
 8010346:	f000 f969 	bl	801061c <HAL_TIM_IC_CaptureCallback>
 801034a:	e005      	b.n	8010358 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801034c:	6878      	ldr	r0, [r7, #4]
 801034e:	f000 f95b 	bl	8010608 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f000 f96c 	bl	8010630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	2200      	movs	r2, #0
 801035c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	f003 0304 	and.w	r3, r3, #4
 8010364:	2b00      	cmp	r3, #0
 8010366:	d020      	beq.n	80103aa <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	f003 0304 	and.w	r3, r3, #4
 801036e:	2b00      	cmp	r3, #0
 8010370:	d01b      	beq.n	80103aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	f06f 0204 	mvn.w	r2, #4
 801037a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2202      	movs	r2, #2
 8010380:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	699b      	ldr	r3, [r3, #24]
 8010388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801038c:	2b00      	cmp	r3, #0
 801038e:	d003      	beq.n	8010398 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010390:	6878      	ldr	r0, [r7, #4]
 8010392:	f000 f943 	bl	801061c <HAL_TIM_IC_CaptureCallback>
 8010396:	e005      	b.n	80103a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f000 f935 	bl	8010608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801039e:	6878      	ldr	r0, [r7, #4]
 80103a0:	f000 f946 	bl	8010630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	2200      	movs	r2, #0
 80103a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	f003 0308 	and.w	r3, r3, #8
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d020      	beq.n	80103f6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	f003 0308 	and.w	r3, r3, #8
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d01b      	beq.n	80103f6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	f06f 0208 	mvn.w	r2, #8
 80103c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	2204      	movs	r2, #4
 80103cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	69db      	ldr	r3, [r3, #28]
 80103d4:	f003 0303 	and.w	r3, r3, #3
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d003      	beq.n	80103e4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80103dc:	6878      	ldr	r0, [r7, #4]
 80103de:	f000 f91d 	bl	801061c <HAL_TIM_IC_CaptureCallback>
 80103e2:	e005      	b.n	80103f0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f000 f90f 	bl	8010608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80103ea:	6878      	ldr	r0, [r7, #4]
 80103ec:	f000 f920 	bl	8010630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	2200      	movs	r2, #0
 80103f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80103f6:	68bb      	ldr	r3, [r7, #8]
 80103f8:	f003 0310 	and.w	r3, r3, #16
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d020      	beq.n	8010442 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	f003 0310 	and.w	r3, r3, #16
 8010406:	2b00      	cmp	r3, #0
 8010408:	d01b      	beq.n	8010442 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	f06f 0210 	mvn.w	r2, #16
 8010412:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2208      	movs	r2, #8
 8010418:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	69db      	ldr	r3, [r3, #28]
 8010420:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010424:	2b00      	cmp	r3, #0
 8010426:	d003      	beq.n	8010430 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f000 f8f7 	bl	801061c <HAL_TIM_IC_CaptureCallback>
 801042e:	e005      	b.n	801043c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010430:	6878      	ldr	r0, [r7, #4]
 8010432:	f000 f8e9 	bl	8010608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	f000 f8fa 	bl	8010630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2200      	movs	r2, #0
 8010440:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8010442:	68bb      	ldr	r3, [r7, #8]
 8010444:	f003 0301 	and.w	r3, r3, #1
 8010448:	2b00      	cmp	r3, #0
 801044a:	d00c      	beq.n	8010466 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	f003 0301 	and.w	r3, r3, #1
 8010452:	2b00      	cmp	r3, #0
 8010454:	d007      	beq.n	8010466 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	f06f 0201 	mvn.w	r2, #1
 801045e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010460:	6878      	ldr	r0, [r7, #4]
 8010462:	f000 f8c7 	bl	80105f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801046c:	2b00      	cmp	r3, #0
 801046e:	d00c      	beq.n	801048a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010476:	2b00      	cmp	r3, #0
 8010478:	d007      	beq.n	801048a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010484:	6878      	ldr	r0, [r7, #4]
 8010486:	f000 fcdf 	bl	8010e48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 801048a:	68bb      	ldr	r3, [r7, #8]
 801048c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010490:	2b00      	cmp	r3, #0
 8010492:	d00c      	beq.n	80104ae <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801049a:	2b00      	cmp	r3, #0
 801049c:	d007      	beq.n	80104ae <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80104a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f000 fcd7 	bl	8010e5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80104ae:	68bb      	ldr	r3, [r7, #8]
 80104b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d00c      	beq.n	80104d2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d007      	beq.n	80104d2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80104ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80104cc:	6878      	ldr	r0, [r7, #4]
 80104ce:	f000 f8b9 	bl	8010644 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80104d2:	68bb      	ldr	r3, [r7, #8]
 80104d4:	f003 0320 	and.w	r3, r3, #32
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d00c      	beq.n	80104f6 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	f003 0320 	and.w	r3, r3, #32
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d007      	beq.n	80104f6 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	f06f 0220 	mvn.w	r2, #32
 80104ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80104f0:	6878      	ldr	r0, [r7, #4]
 80104f2:	f000 fc9f 	bl	8010e34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80104f6:	bf00      	nop
 80104f8:	3710      	adds	r7, #16
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}
	...

08010500 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b086      	sub	sp, #24
 8010504:	af00      	add	r7, sp, #0
 8010506:	60f8      	str	r0, [r7, #12]
 8010508:	60b9      	str	r1, [r7, #8]
 801050a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801050c:	2300      	movs	r3, #0
 801050e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010516:	2b01      	cmp	r3, #1
 8010518:	d101      	bne.n	801051e <HAL_TIM_OC_ConfigChannel+0x1e>
 801051a:	2302      	movs	r3, #2
 801051c:	e066      	b.n	80105ec <HAL_TIM_OC_ConfigChannel+0xec>
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	2201      	movs	r2, #1
 8010522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	2b14      	cmp	r3, #20
 801052a:	d857      	bhi.n	80105dc <HAL_TIM_OC_ConfigChannel+0xdc>
 801052c:	a201      	add	r2, pc, #4	; (adr r2, 8010534 <HAL_TIM_OC_ConfigChannel+0x34>)
 801052e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010532:	bf00      	nop
 8010534:	08010589 	.word	0x08010589
 8010538:	080105dd 	.word	0x080105dd
 801053c:	080105dd 	.word	0x080105dd
 8010540:	080105dd 	.word	0x080105dd
 8010544:	08010597 	.word	0x08010597
 8010548:	080105dd 	.word	0x080105dd
 801054c:	080105dd 	.word	0x080105dd
 8010550:	080105dd 	.word	0x080105dd
 8010554:	080105a5 	.word	0x080105a5
 8010558:	080105dd 	.word	0x080105dd
 801055c:	080105dd 	.word	0x080105dd
 8010560:	080105dd 	.word	0x080105dd
 8010564:	080105b3 	.word	0x080105b3
 8010568:	080105dd 	.word	0x080105dd
 801056c:	080105dd 	.word	0x080105dd
 8010570:	080105dd 	.word	0x080105dd
 8010574:	080105c1 	.word	0x080105c1
 8010578:	080105dd 	.word	0x080105dd
 801057c:	080105dd 	.word	0x080105dd
 8010580:	080105dd 	.word	0x080105dd
 8010584:	080105cf 	.word	0x080105cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	68b9      	ldr	r1, [r7, #8]
 801058e:	4618      	mov	r0, r3
 8010590:	f000 f8fc 	bl	801078c <TIM_OC1_SetConfig>
      break;
 8010594:	e025      	b.n	80105e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	68b9      	ldr	r1, [r7, #8]
 801059c:	4618      	mov	r0, r3
 801059e:	f000 f985 	bl	80108ac <TIM_OC2_SetConfig>
      break;
 80105a2:	e01e      	b.n	80105e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	68b9      	ldr	r1, [r7, #8]
 80105aa:	4618      	mov	r0, r3
 80105ac:	f000 fa08 	bl	80109c0 <TIM_OC3_SetConfig>
      break;
 80105b0:	e017      	b.n	80105e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	68b9      	ldr	r1, [r7, #8]
 80105b8:	4618      	mov	r0, r3
 80105ba:	f000 fa89 	bl	8010ad0 <TIM_OC4_SetConfig>
      break;
 80105be:	e010      	b.n	80105e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	68b9      	ldr	r1, [r7, #8]
 80105c6:	4618      	mov	r0, r3
 80105c8:	f000 faec 	bl	8010ba4 <TIM_OC5_SetConfig>
      break;
 80105cc:	e009      	b.n	80105e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	68b9      	ldr	r1, [r7, #8]
 80105d4:	4618      	mov	r0, r3
 80105d6:	f000 fb49 	bl	8010c6c <TIM_OC6_SetConfig>
      break;
 80105da:	e002      	b.n	80105e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80105dc:	2301      	movs	r3, #1
 80105de:	75fb      	strb	r3, [r7, #23]
      break;
 80105e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	2200      	movs	r2, #0
 80105e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80105ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80105ec:	4618      	mov	r0, r3
 80105ee:	3718      	adds	r7, #24
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}

080105f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80105f4:	b480      	push	{r7}
 80105f6:	b083      	sub	sp, #12
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80105fc:	bf00      	nop
 80105fe:	370c      	adds	r7, #12
 8010600:	46bd      	mov	sp, r7
 8010602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010606:	4770      	bx	lr

08010608 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010608:	b480      	push	{r7}
 801060a:	b083      	sub	sp, #12
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010610:	bf00      	nop
 8010612:	370c      	adds	r7, #12
 8010614:	46bd      	mov	sp, r7
 8010616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061a:	4770      	bx	lr

0801061c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801061c:	b480      	push	{r7}
 801061e:	b083      	sub	sp, #12
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010624:	bf00      	nop
 8010626:	370c      	adds	r7, #12
 8010628:	46bd      	mov	sp, r7
 801062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062e:	4770      	bx	lr

08010630 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010630:	b480      	push	{r7}
 8010632:	b083      	sub	sp, #12
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010638:	bf00      	nop
 801063a:	370c      	adds	r7, #12
 801063c:	46bd      	mov	sp, r7
 801063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010642:	4770      	bx	lr

08010644 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010644:	b480      	push	{r7}
 8010646:	b083      	sub	sp, #12
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801064c:	bf00      	nop
 801064e:	370c      	adds	r7, #12
 8010650:	46bd      	mov	sp, r7
 8010652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010656:	4770      	bx	lr

08010658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010658:	b480      	push	{r7}
 801065a:	b085      	sub	sp, #20
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
 8010660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	4a40      	ldr	r2, [pc, #256]	; (801076c <TIM_Base_SetConfig+0x114>)
 801066c:	4293      	cmp	r3, r2
 801066e:	d013      	beq.n	8010698 <TIM_Base_SetConfig+0x40>
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010676:	d00f      	beq.n	8010698 <TIM_Base_SetConfig+0x40>
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	4a3d      	ldr	r2, [pc, #244]	; (8010770 <TIM_Base_SetConfig+0x118>)
 801067c:	4293      	cmp	r3, r2
 801067e:	d00b      	beq.n	8010698 <TIM_Base_SetConfig+0x40>
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	4a3c      	ldr	r2, [pc, #240]	; (8010774 <TIM_Base_SetConfig+0x11c>)
 8010684:	4293      	cmp	r3, r2
 8010686:	d007      	beq.n	8010698 <TIM_Base_SetConfig+0x40>
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	4a3b      	ldr	r2, [pc, #236]	; (8010778 <TIM_Base_SetConfig+0x120>)
 801068c:	4293      	cmp	r3, r2
 801068e:	d003      	beq.n	8010698 <TIM_Base_SetConfig+0x40>
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	4a3a      	ldr	r2, [pc, #232]	; (801077c <TIM_Base_SetConfig+0x124>)
 8010694:	4293      	cmp	r3, r2
 8010696:	d108      	bne.n	80106aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801069e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80106a0:	683b      	ldr	r3, [r7, #0]
 80106a2:	685b      	ldr	r3, [r3, #4]
 80106a4:	68fa      	ldr	r2, [r7, #12]
 80106a6:	4313      	orrs	r3, r2
 80106a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	4a2f      	ldr	r2, [pc, #188]	; (801076c <TIM_Base_SetConfig+0x114>)
 80106ae:	4293      	cmp	r3, r2
 80106b0:	d01f      	beq.n	80106f2 <TIM_Base_SetConfig+0x9a>
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80106b8:	d01b      	beq.n	80106f2 <TIM_Base_SetConfig+0x9a>
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	4a2c      	ldr	r2, [pc, #176]	; (8010770 <TIM_Base_SetConfig+0x118>)
 80106be:	4293      	cmp	r3, r2
 80106c0:	d017      	beq.n	80106f2 <TIM_Base_SetConfig+0x9a>
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	4a2b      	ldr	r2, [pc, #172]	; (8010774 <TIM_Base_SetConfig+0x11c>)
 80106c6:	4293      	cmp	r3, r2
 80106c8:	d013      	beq.n	80106f2 <TIM_Base_SetConfig+0x9a>
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	4a2a      	ldr	r2, [pc, #168]	; (8010778 <TIM_Base_SetConfig+0x120>)
 80106ce:	4293      	cmp	r3, r2
 80106d0:	d00f      	beq.n	80106f2 <TIM_Base_SetConfig+0x9a>
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	4a29      	ldr	r2, [pc, #164]	; (801077c <TIM_Base_SetConfig+0x124>)
 80106d6:	4293      	cmp	r3, r2
 80106d8:	d00b      	beq.n	80106f2 <TIM_Base_SetConfig+0x9a>
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	4a28      	ldr	r2, [pc, #160]	; (8010780 <TIM_Base_SetConfig+0x128>)
 80106de:	4293      	cmp	r3, r2
 80106e0:	d007      	beq.n	80106f2 <TIM_Base_SetConfig+0x9a>
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	4a27      	ldr	r2, [pc, #156]	; (8010784 <TIM_Base_SetConfig+0x12c>)
 80106e6:	4293      	cmp	r3, r2
 80106e8:	d003      	beq.n	80106f2 <TIM_Base_SetConfig+0x9a>
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	4a26      	ldr	r2, [pc, #152]	; (8010788 <TIM_Base_SetConfig+0x130>)
 80106ee:	4293      	cmp	r3, r2
 80106f0:	d108      	bne.n	8010704 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80106f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	68db      	ldr	r3, [r3, #12]
 80106fe:	68fa      	ldr	r2, [r7, #12]
 8010700:	4313      	orrs	r3, r2
 8010702:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801070a:	683b      	ldr	r3, [r7, #0]
 801070c:	695b      	ldr	r3, [r3, #20]
 801070e:	4313      	orrs	r3, r2
 8010710:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	68fa      	ldr	r2, [r7, #12]
 8010716:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010718:	683b      	ldr	r3, [r7, #0]
 801071a:	689a      	ldr	r2, [r3, #8]
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	681a      	ldr	r2, [r3, #0]
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	4a10      	ldr	r2, [pc, #64]	; (801076c <TIM_Base_SetConfig+0x114>)
 801072c:	4293      	cmp	r3, r2
 801072e:	d00f      	beq.n	8010750 <TIM_Base_SetConfig+0xf8>
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	4a12      	ldr	r2, [pc, #72]	; (801077c <TIM_Base_SetConfig+0x124>)
 8010734:	4293      	cmp	r3, r2
 8010736:	d00b      	beq.n	8010750 <TIM_Base_SetConfig+0xf8>
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	4a11      	ldr	r2, [pc, #68]	; (8010780 <TIM_Base_SetConfig+0x128>)
 801073c:	4293      	cmp	r3, r2
 801073e:	d007      	beq.n	8010750 <TIM_Base_SetConfig+0xf8>
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	4a10      	ldr	r2, [pc, #64]	; (8010784 <TIM_Base_SetConfig+0x12c>)
 8010744:	4293      	cmp	r3, r2
 8010746:	d003      	beq.n	8010750 <TIM_Base_SetConfig+0xf8>
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	4a0f      	ldr	r2, [pc, #60]	; (8010788 <TIM_Base_SetConfig+0x130>)
 801074c:	4293      	cmp	r3, r2
 801074e:	d103      	bne.n	8010758 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010750:	683b      	ldr	r3, [r7, #0]
 8010752:	691a      	ldr	r2, [r3, #16]
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2201      	movs	r2, #1
 801075c:	615a      	str	r2, [r3, #20]
}
 801075e:	bf00      	nop
 8010760:	3714      	adds	r7, #20
 8010762:	46bd      	mov	sp, r7
 8010764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010768:	4770      	bx	lr
 801076a:	bf00      	nop
 801076c:	40012c00 	.word	0x40012c00
 8010770:	40000400 	.word	0x40000400
 8010774:	40000800 	.word	0x40000800
 8010778:	40000c00 	.word	0x40000c00
 801077c:	40013400 	.word	0x40013400
 8010780:	40014000 	.word	0x40014000
 8010784:	40014400 	.word	0x40014400
 8010788:	40014800 	.word	0x40014800

0801078c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801078c:	b480      	push	{r7}
 801078e:	b087      	sub	sp, #28
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
 8010794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	6a1b      	ldr	r3, [r3, #32]
 801079a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6a1b      	ldr	r3, [r3, #32]
 80107a0:	f023 0201 	bic.w	r2, r3, #1
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	685b      	ldr	r3, [r3, #4]
 80107ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	699b      	ldr	r3, [r3, #24]
 80107b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80107ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80107be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	f023 0303 	bic.w	r3, r3, #3
 80107c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80107c8:	683b      	ldr	r3, [r7, #0]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	68fa      	ldr	r2, [r7, #12]
 80107ce:	4313      	orrs	r3, r2
 80107d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80107d2:	697b      	ldr	r3, [r7, #20]
 80107d4:	f023 0302 	bic.w	r3, r3, #2
 80107d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	689b      	ldr	r3, [r3, #8]
 80107de:	697a      	ldr	r2, [r7, #20]
 80107e0:	4313      	orrs	r3, r2
 80107e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	4a2c      	ldr	r2, [pc, #176]	; (8010898 <TIM_OC1_SetConfig+0x10c>)
 80107e8:	4293      	cmp	r3, r2
 80107ea:	d00f      	beq.n	801080c <TIM_OC1_SetConfig+0x80>
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	4a2b      	ldr	r2, [pc, #172]	; (801089c <TIM_OC1_SetConfig+0x110>)
 80107f0:	4293      	cmp	r3, r2
 80107f2:	d00b      	beq.n	801080c <TIM_OC1_SetConfig+0x80>
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	4a2a      	ldr	r2, [pc, #168]	; (80108a0 <TIM_OC1_SetConfig+0x114>)
 80107f8:	4293      	cmp	r3, r2
 80107fa:	d007      	beq.n	801080c <TIM_OC1_SetConfig+0x80>
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	4a29      	ldr	r2, [pc, #164]	; (80108a4 <TIM_OC1_SetConfig+0x118>)
 8010800:	4293      	cmp	r3, r2
 8010802:	d003      	beq.n	801080c <TIM_OC1_SetConfig+0x80>
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	4a28      	ldr	r2, [pc, #160]	; (80108a8 <TIM_OC1_SetConfig+0x11c>)
 8010808:	4293      	cmp	r3, r2
 801080a:	d10c      	bne.n	8010826 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801080c:	697b      	ldr	r3, [r7, #20]
 801080e:	f023 0308 	bic.w	r3, r3, #8
 8010812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010814:	683b      	ldr	r3, [r7, #0]
 8010816:	68db      	ldr	r3, [r3, #12]
 8010818:	697a      	ldr	r2, [r7, #20]
 801081a:	4313      	orrs	r3, r2
 801081c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801081e:	697b      	ldr	r3, [r7, #20]
 8010820:	f023 0304 	bic.w	r3, r3, #4
 8010824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	4a1b      	ldr	r2, [pc, #108]	; (8010898 <TIM_OC1_SetConfig+0x10c>)
 801082a:	4293      	cmp	r3, r2
 801082c:	d00f      	beq.n	801084e <TIM_OC1_SetConfig+0xc2>
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	4a1a      	ldr	r2, [pc, #104]	; (801089c <TIM_OC1_SetConfig+0x110>)
 8010832:	4293      	cmp	r3, r2
 8010834:	d00b      	beq.n	801084e <TIM_OC1_SetConfig+0xc2>
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	4a19      	ldr	r2, [pc, #100]	; (80108a0 <TIM_OC1_SetConfig+0x114>)
 801083a:	4293      	cmp	r3, r2
 801083c:	d007      	beq.n	801084e <TIM_OC1_SetConfig+0xc2>
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	4a18      	ldr	r2, [pc, #96]	; (80108a4 <TIM_OC1_SetConfig+0x118>)
 8010842:	4293      	cmp	r3, r2
 8010844:	d003      	beq.n	801084e <TIM_OC1_SetConfig+0xc2>
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	4a17      	ldr	r2, [pc, #92]	; (80108a8 <TIM_OC1_SetConfig+0x11c>)
 801084a:	4293      	cmp	r3, r2
 801084c:	d111      	bne.n	8010872 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801084e:	693b      	ldr	r3, [r7, #16]
 8010850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010856:	693b      	ldr	r3, [r7, #16]
 8010858:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801085c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	695b      	ldr	r3, [r3, #20]
 8010862:	693a      	ldr	r2, [r7, #16]
 8010864:	4313      	orrs	r3, r2
 8010866:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	699b      	ldr	r3, [r3, #24]
 801086c:	693a      	ldr	r2, [r7, #16]
 801086e:	4313      	orrs	r3, r2
 8010870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	693a      	ldr	r2, [r7, #16]
 8010876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	68fa      	ldr	r2, [r7, #12]
 801087c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801087e:	683b      	ldr	r3, [r7, #0]
 8010880:	685a      	ldr	r2, [r3, #4]
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	697a      	ldr	r2, [r7, #20]
 801088a:	621a      	str	r2, [r3, #32]
}
 801088c:	bf00      	nop
 801088e:	371c      	adds	r7, #28
 8010890:	46bd      	mov	sp, r7
 8010892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010896:	4770      	bx	lr
 8010898:	40012c00 	.word	0x40012c00
 801089c:	40013400 	.word	0x40013400
 80108a0:	40014000 	.word	0x40014000
 80108a4:	40014400 	.word	0x40014400
 80108a8:	40014800 	.word	0x40014800

080108ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80108ac:	b480      	push	{r7}
 80108ae:	b087      	sub	sp, #28
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
 80108b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	6a1b      	ldr	r3, [r3, #32]
 80108ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	6a1b      	ldr	r3, [r3, #32]
 80108c0:	f023 0210 	bic.w	r2, r3, #16
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	685b      	ldr	r3, [r3, #4]
 80108cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	699b      	ldr	r3, [r3, #24]
 80108d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80108da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80108de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80108e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	021b      	lsls	r3, r3, #8
 80108ee:	68fa      	ldr	r2, [r7, #12]
 80108f0:	4313      	orrs	r3, r2
 80108f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80108f4:	697b      	ldr	r3, [r7, #20]
 80108f6:	f023 0320 	bic.w	r3, r3, #32
 80108fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80108fc:	683b      	ldr	r3, [r7, #0]
 80108fe:	689b      	ldr	r3, [r3, #8]
 8010900:	011b      	lsls	r3, r3, #4
 8010902:	697a      	ldr	r2, [r7, #20]
 8010904:	4313      	orrs	r3, r2
 8010906:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	4a28      	ldr	r2, [pc, #160]	; (80109ac <TIM_OC2_SetConfig+0x100>)
 801090c:	4293      	cmp	r3, r2
 801090e:	d003      	beq.n	8010918 <TIM_OC2_SetConfig+0x6c>
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	4a27      	ldr	r2, [pc, #156]	; (80109b0 <TIM_OC2_SetConfig+0x104>)
 8010914:	4293      	cmp	r3, r2
 8010916:	d10d      	bne.n	8010934 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010918:	697b      	ldr	r3, [r7, #20]
 801091a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801091e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010920:	683b      	ldr	r3, [r7, #0]
 8010922:	68db      	ldr	r3, [r3, #12]
 8010924:	011b      	lsls	r3, r3, #4
 8010926:	697a      	ldr	r2, [r7, #20]
 8010928:	4313      	orrs	r3, r2
 801092a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801092c:	697b      	ldr	r3, [r7, #20]
 801092e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010932:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	4a1d      	ldr	r2, [pc, #116]	; (80109ac <TIM_OC2_SetConfig+0x100>)
 8010938:	4293      	cmp	r3, r2
 801093a:	d00f      	beq.n	801095c <TIM_OC2_SetConfig+0xb0>
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	4a1c      	ldr	r2, [pc, #112]	; (80109b0 <TIM_OC2_SetConfig+0x104>)
 8010940:	4293      	cmp	r3, r2
 8010942:	d00b      	beq.n	801095c <TIM_OC2_SetConfig+0xb0>
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	4a1b      	ldr	r2, [pc, #108]	; (80109b4 <TIM_OC2_SetConfig+0x108>)
 8010948:	4293      	cmp	r3, r2
 801094a:	d007      	beq.n	801095c <TIM_OC2_SetConfig+0xb0>
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	4a1a      	ldr	r2, [pc, #104]	; (80109b8 <TIM_OC2_SetConfig+0x10c>)
 8010950:	4293      	cmp	r3, r2
 8010952:	d003      	beq.n	801095c <TIM_OC2_SetConfig+0xb0>
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	4a19      	ldr	r2, [pc, #100]	; (80109bc <TIM_OC2_SetConfig+0x110>)
 8010958:	4293      	cmp	r3, r2
 801095a:	d113      	bne.n	8010984 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801095c:	693b      	ldr	r3, [r7, #16]
 801095e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010962:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010964:	693b      	ldr	r3, [r7, #16]
 8010966:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801096a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801096c:	683b      	ldr	r3, [r7, #0]
 801096e:	695b      	ldr	r3, [r3, #20]
 8010970:	009b      	lsls	r3, r3, #2
 8010972:	693a      	ldr	r2, [r7, #16]
 8010974:	4313      	orrs	r3, r2
 8010976:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010978:	683b      	ldr	r3, [r7, #0]
 801097a:	699b      	ldr	r3, [r3, #24]
 801097c:	009b      	lsls	r3, r3, #2
 801097e:	693a      	ldr	r2, [r7, #16]
 8010980:	4313      	orrs	r3, r2
 8010982:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	693a      	ldr	r2, [r7, #16]
 8010988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	68fa      	ldr	r2, [r7, #12]
 801098e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010990:	683b      	ldr	r3, [r7, #0]
 8010992:	685a      	ldr	r2, [r3, #4]
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	697a      	ldr	r2, [r7, #20]
 801099c:	621a      	str	r2, [r3, #32]
}
 801099e:	bf00      	nop
 80109a0:	371c      	adds	r7, #28
 80109a2:	46bd      	mov	sp, r7
 80109a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a8:	4770      	bx	lr
 80109aa:	bf00      	nop
 80109ac:	40012c00 	.word	0x40012c00
 80109b0:	40013400 	.word	0x40013400
 80109b4:	40014000 	.word	0x40014000
 80109b8:	40014400 	.word	0x40014400
 80109bc:	40014800 	.word	0x40014800

080109c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80109c0:	b480      	push	{r7}
 80109c2:	b087      	sub	sp, #28
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
 80109c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	6a1b      	ldr	r3, [r3, #32]
 80109ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	6a1b      	ldr	r3, [r3, #32]
 80109d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	685b      	ldr	r3, [r3, #4]
 80109e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	69db      	ldr	r3, [r3, #28]
 80109e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80109ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80109f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	f023 0303 	bic.w	r3, r3, #3
 80109fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80109fc:	683b      	ldr	r3, [r7, #0]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	68fa      	ldr	r2, [r7, #12]
 8010a02:	4313      	orrs	r3, r2
 8010a04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010a06:	697b      	ldr	r3, [r7, #20]
 8010a08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010a0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010a0e:	683b      	ldr	r3, [r7, #0]
 8010a10:	689b      	ldr	r3, [r3, #8]
 8010a12:	021b      	lsls	r3, r3, #8
 8010a14:	697a      	ldr	r2, [r7, #20]
 8010a16:	4313      	orrs	r3, r2
 8010a18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	4a27      	ldr	r2, [pc, #156]	; (8010abc <TIM_OC3_SetConfig+0xfc>)
 8010a1e:	4293      	cmp	r3, r2
 8010a20:	d003      	beq.n	8010a2a <TIM_OC3_SetConfig+0x6a>
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	4a26      	ldr	r2, [pc, #152]	; (8010ac0 <TIM_OC3_SetConfig+0x100>)
 8010a26:	4293      	cmp	r3, r2
 8010a28:	d10d      	bne.n	8010a46 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010a2a:	697b      	ldr	r3, [r7, #20]
 8010a2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010a30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010a32:	683b      	ldr	r3, [r7, #0]
 8010a34:	68db      	ldr	r3, [r3, #12]
 8010a36:	021b      	lsls	r3, r3, #8
 8010a38:	697a      	ldr	r2, [r7, #20]
 8010a3a:	4313      	orrs	r3, r2
 8010a3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010a3e:	697b      	ldr	r3, [r7, #20]
 8010a40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010a44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	4a1c      	ldr	r2, [pc, #112]	; (8010abc <TIM_OC3_SetConfig+0xfc>)
 8010a4a:	4293      	cmp	r3, r2
 8010a4c:	d00f      	beq.n	8010a6e <TIM_OC3_SetConfig+0xae>
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	4a1b      	ldr	r2, [pc, #108]	; (8010ac0 <TIM_OC3_SetConfig+0x100>)
 8010a52:	4293      	cmp	r3, r2
 8010a54:	d00b      	beq.n	8010a6e <TIM_OC3_SetConfig+0xae>
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	4a1a      	ldr	r2, [pc, #104]	; (8010ac4 <TIM_OC3_SetConfig+0x104>)
 8010a5a:	4293      	cmp	r3, r2
 8010a5c:	d007      	beq.n	8010a6e <TIM_OC3_SetConfig+0xae>
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	4a19      	ldr	r2, [pc, #100]	; (8010ac8 <TIM_OC3_SetConfig+0x108>)
 8010a62:	4293      	cmp	r3, r2
 8010a64:	d003      	beq.n	8010a6e <TIM_OC3_SetConfig+0xae>
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	4a18      	ldr	r2, [pc, #96]	; (8010acc <TIM_OC3_SetConfig+0x10c>)
 8010a6a:	4293      	cmp	r3, r2
 8010a6c:	d113      	bne.n	8010a96 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010a6e:	693b      	ldr	r3, [r7, #16]
 8010a70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010a76:	693b      	ldr	r3, [r7, #16]
 8010a78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010a7e:	683b      	ldr	r3, [r7, #0]
 8010a80:	695b      	ldr	r3, [r3, #20]
 8010a82:	011b      	lsls	r3, r3, #4
 8010a84:	693a      	ldr	r2, [r7, #16]
 8010a86:	4313      	orrs	r3, r2
 8010a88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010a8a:	683b      	ldr	r3, [r7, #0]
 8010a8c:	699b      	ldr	r3, [r3, #24]
 8010a8e:	011b      	lsls	r3, r3, #4
 8010a90:	693a      	ldr	r2, [r7, #16]
 8010a92:	4313      	orrs	r3, r2
 8010a94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	693a      	ldr	r2, [r7, #16]
 8010a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	68fa      	ldr	r2, [r7, #12]
 8010aa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010aa2:	683b      	ldr	r3, [r7, #0]
 8010aa4:	685a      	ldr	r2, [r3, #4]
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	697a      	ldr	r2, [r7, #20]
 8010aae:	621a      	str	r2, [r3, #32]
}
 8010ab0:	bf00      	nop
 8010ab2:	371c      	adds	r7, #28
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aba:	4770      	bx	lr
 8010abc:	40012c00 	.word	0x40012c00
 8010ac0:	40013400 	.word	0x40013400
 8010ac4:	40014000 	.word	0x40014000
 8010ac8:	40014400 	.word	0x40014400
 8010acc:	40014800 	.word	0x40014800

08010ad0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010ad0:	b480      	push	{r7}
 8010ad2:	b087      	sub	sp, #28
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
 8010ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	6a1b      	ldr	r3, [r3, #32]
 8010ade:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	6a1b      	ldr	r3, [r3, #32]
 8010ae4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	685b      	ldr	r3, [r3, #4]
 8010af0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	69db      	ldr	r3, [r3, #28]
 8010af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010b0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010b0c:	683b      	ldr	r3, [r7, #0]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	021b      	lsls	r3, r3, #8
 8010b12:	68fa      	ldr	r2, [r7, #12]
 8010b14:	4313      	orrs	r3, r2
 8010b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010b18:	693b      	ldr	r3, [r7, #16]
 8010b1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010b1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010b20:	683b      	ldr	r3, [r7, #0]
 8010b22:	689b      	ldr	r3, [r3, #8]
 8010b24:	031b      	lsls	r3, r3, #12
 8010b26:	693a      	ldr	r2, [r7, #16]
 8010b28:	4313      	orrs	r3, r2
 8010b2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	4a18      	ldr	r2, [pc, #96]	; (8010b90 <TIM_OC4_SetConfig+0xc0>)
 8010b30:	4293      	cmp	r3, r2
 8010b32:	d00f      	beq.n	8010b54 <TIM_OC4_SetConfig+0x84>
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	4a17      	ldr	r2, [pc, #92]	; (8010b94 <TIM_OC4_SetConfig+0xc4>)
 8010b38:	4293      	cmp	r3, r2
 8010b3a:	d00b      	beq.n	8010b54 <TIM_OC4_SetConfig+0x84>
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	4a16      	ldr	r2, [pc, #88]	; (8010b98 <TIM_OC4_SetConfig+0xc8>)
 8010b40:	4293      	cmp	r3, r2
 8010b42:	d007      	beq.n	8010b54 <TIM_OC4_SetConfig+0x84>
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	4a15      	ldr	r2, [pc, #84]	; (8010b9c <TIM_OC4_SetConfig+0xcc>)
 8010b48:	4293      	cmp	r3, r2
 8010b4a:	d003      	beq.n	8010b54 <TIM_OC4_SetConfig+0x84>
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	4a14      	ldr	r2, [pc, #80]	; (8010ba0 <TIM_OC4_SetConfig+0xd0>)
 8010b50:	4293      	cmp	r3, r2
 8010b52:	d109      	bne.n	8010b68 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010b54:	697b      	ldr	r3, [r7, #20]
 8010b56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010b5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010b5c:	683b      	ldr	r3, [r7, #0]
 8010b5e:	695b      	ldr	r3, [r3, #20]
 8010b60:	019b      	lsls	r3, r3, #6
 8010b62:	697a      	ldr	r2, [r7, #20]
 8010b64:	4313      	orrs	r3, r2
 8010b66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	697a      	ldr	r2, [r7, #20]
 8010b6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	68fa      	ldr	r2, [r7, #12]
 8010b72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010b74:	683b      	ldr	r3, [r7, #0]
 8010b76:	685a      	ldr	r2, [r3, #4]
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	693a      	ldr	r2, [r7, #16]
 8010b80:	621a      	str	r2, [r3, #32]
}
 8010b82:	bf00      	nop
 8010b84:	371c      	adds	r7, #28
 8010b86:	46bd      	mov	sp, r7
 8010b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8c:	4770      	bx	lr
 8010b8e:	bf00      	nop
 8010b90:	40012c00 	.word	0x40012c00
 8010b94:	40013400 	.word	0x40013400
 8010b98:	40014000 	.word	0x40014000
 8010b9c:	40014400 	.word	0x40014400
 8010ba0:	40014800 	.word	0x40014800

08010ba4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010ba4:	b480      	push	{r7}
 8010ba6:	b087      	sub	sp, #28
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
 8010bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	6a1b      	ldr	r3, [r3, #32]
 8010bb2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	6a1b      	ldr	r3, [r3, #32]
 8010bb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	685b      	ldr	r3, [r3, #4]
 8010bc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010bd8:	683b      	ldr	r3, [r7, #0]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	68fa      	ldr	r2, [r7, #12]
 8010bde:	4313      	orrs	r3, r2
 8010be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010be2:	693b      	ldr	r3, [r7, #16]
 8010be4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010be8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010bea:	683b      	ldr	r3, [r7, #0]
 8010bec:	689b      	ldr	r3, [r3, #8]
 8010bee:	041b      	lsls	r3, r3, #16
 8010bf0:	693a      	ldr	r2, [r7, #16]
 8010bf2:	4313      	orrs	r3, r2
 8010bf4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	4a17      	ldr	r2, [pc, #92]	; (8010c58 <TIM_OC5_SetConfig+0xb4>)
 8010bfa:	4293      	cmp	r3, r2
 8010bfc:	d00f      	beq.n	8010c1e <TIM_OC5_SetConfig+0x7a>
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	4a16      	ldr	r2, [pc, #88]	; (8010c5c <TIM_OC5_SetConfig+0xb8>)
 8010c02:	4293      	cmp	r3, r2
 8010c04:	d00b      	beq.n	8010c1e <TIM_OC5_SetConfig+0x7a>
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	4a15      	ldr	r2, [pc, #84]	; (8010c60 <TIM_OC5_SetConfig+0xbc>)
 8010c0a:	4293      	cmp	r3, r2
 8010c0c:	d007      	beq.n	8010c1e <TIM_OC5_SetConfig+0x7a>
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	4a14      	ldr	r2, [pc, #80]	; (8010c64 <TIM_OC5_SetConfig+0xc0>)
 8010c12:	4293      	cmp	r3, r2
 8010c14:	d003      	beq.n	8010c1e <TIM_OC5_SetConfig+0x7a>
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	4a13      	ldr	r2, [pc, #76]	; (8010c68 <TIM_OC5_SetConfig+0xc4>)
 8010c1a:	4293      	cmp	r3, r2
 8010c1c:	d109      	bne.n	8010c32 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010c1e:	697b      	ldr	r3, [r7, #20]
 8010c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010c24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	695b      	ldr	r3, [r3, #20]
 8010c2a:	021b      	lsls	r3, r3, #8
 8010c2c:	697a      	ldr	r2, [r7, #20]
 8010c2e:	4313      	orrs	r3, r2
 8010c30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	697a      	ldr	r2, [r7, #20]
 8010c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	68fa      	ldr	r2, [r7, #12]
 8010c3c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010c3e:	683b      	ldr	r3, [r7, #0]
 8010c40:	685a      	ldr	r2, [r3, #4]
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	693a      	ldr	r2, [r7, #16]
 8010c4a:	621a      	str	r2, [r3, #32]
}
 8010c4c:	bf00      	nop
 8010c4e:	371c      	adds	r7, #28
 8010c50:	46bd      	mov	sp, r7
 8010c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c56:	4770      	bx	lr
 8010c58:	40012c00 	.word	0x40012c00
 8010c5c:	40013400 	.word	0x40013400
 8010c60:	40014000 	.word	0x40014000
 8010c64:	40014400 	.word	0x40014400
 8010c68:	40014800 	.word	0x40014800

08010c6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010c6c:	b480      	push	{r7}
 8010c6e:	b087      	sub	sp, #28
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
 8010c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	6a1b      	ldr	r3, [r3, #32]
 8010c7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	6a1b      	ldr	r3, [r3, #32]
 8010c80:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	685b      	ldr	r3, [r3, #4]
 8010c8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010ca0:	683b      	ldr	r3, [r7, #0]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	021b      	lsls	r3, r3, #8
 8010ca6:	68fa      	ldr	r2, [r7, #12]
 8010ca8:	4313      	orrs	r3, r2
 8010caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010cac:	693b      	ldr	r3, [r7, #16]
 8010cae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010cb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	689b      	ldr	r3, [r3, #8]
 8010cb8:	051b      	lsls	r3, r3, #20
 8010cba:	693a      	ldr	r2, [r7, #16]
 8010cbc:	4313      	orrs	r3, r2
 8010cbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	4a18      	ldr	r2, [pc, #96]	; (8010d24 <TIM_OC6_SetConfig+0xb8>)
 8010cc4:	4293      	cmp	r3, r2
 8010cc6:	d00f      	beq.n	8010ce8 <TIM_OC6_SetConfig+0x7c>
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	4a17      	ldr	r2, [pc, #92]	; (8010d28 <TIM_OC6_SetConfig+0xbc>)
 8010ccc:	4293      	cmp	r3, r2
 8010cce:	d00b      	beq.n	8010ce8 <TIM_OC6_SetConfig+0x7c>
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	4a16      	ldr	r2, [pc, #88]	; (8010d2c <TIM_OC6_SetConfig+0xc0>)
 8010cd4:	4293      	cmp	r3, r2
 8010cd6:	d007      	beq.n	8010ce8 <TIM_OC6_SetConfig+0x7c>
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	4a15      	ldr	r2, [pc, #84]	; (8010d30 <TIM_OC6_SetConfig+0xc4>)
 8010cdc:	4293      	cmp	r3, r2
 8010cde:	d003      	beq.n	8010ce8 <TIM_OC6_SetConfig+0x7c>
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	4a14      	ldr	r2, [pc, #80]	; (8010d34 <TIM_OC6_SetConfig+0xc8>)
 8010ce4:	4293      	cmp	r3, r2
 8010ce6:	d109      	bne.n	8010cfc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010ce8:	697b      	ldr	r3, [r7, #20]
 8010cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010cee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010cf0:	683b      	ldr	r3, [r7, #0]
 8010cf2:	695b      	ldr	r3, [r3, #20]
 8010cf4:	029b      	lsls	r3, r3, #10
 8010cf6:	697a      	ldr	r2, [r7, #20]
 8010cf8:	4313      	orrs	r3, r2
 8010cfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	697a      	ldr	r2, [r7, #20]
 8010d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	68fa      	ldr	r2, [r7, #12]
 8010d06:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010d08:	683b      	ldr	r3, [r7, #0]
 8010d0a:	685a      	ldr	r2, [r3, #4]
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	693a      	ldr	r2, [r7, #16]
 8010d14:	621a      	str	r2, [r3, #32]
}
 8010d16:	bf00      	nop
 8010d18:	371c      	adds	r7, #28
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d20:	4770      	bx	lr
 8010d22:	bf00      	nop
 8010d24:	40012c00 	.word	0x40012c00
 8010d28:	40013400 	.word	0x40013400
 8010d2c:	40014000 	.word	0x40014000
 8010d30:	40014400 	.word	0x40014400
 8010d34:	40014800 	.word	0x40014800

08010d38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010d38:	b480      	push	{r7}
 8010d3a:	b085      	sub	sp, #20
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
 8010d40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010d42:	2300      	movs	r3, #0
 8010d44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010d4c:	2b01      	cmp	r3, #1
 8010d4e:	d101      	bne.n	8010d54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010d50:	2302      	movs	r3, #2
 8010d52:	e065      	b.n	8010e20 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	2201      	movs	r2, #1
 8010d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	68db      	ldr	r3, [r3, #12]
 8010d66:	4313      	orrs	r3, r2
 8010d68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	689b      	ldr	r3, [r3, #8]
 8010d74:	4313      	orrs	r3, r2
 8010d76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8010d7e:	683b      	ldr	r3, [r7, #0]
 8010d80:	685b      	ldr	r3, [r3, #4]
 8010d82:	4313      	orrs	r3, r2
 8010d84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010d8c:	683b      	ldr	r3, [r7, #0]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	4313      	orrs	r3, r2
 8010d92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010d9a:	683b      	ldr	r3, [r7, #0]
 8010d9c:	691b      	ldr	r3, [r3, #16]
 8010d9e:	4313      	orrs	r3, r2
 8010da0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010da8:	683b      	ldr	r3, [r7, #0]
 8010daa:	695b      	ldr	r3, [r3, #20]
 8010dac:	4313      	orrs	r3, r2
 8010dae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8010db6:	683b      	ldr	r3, [r7, #0]
 8010db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dba:	4313      	orrs	r3, r2
 8010dbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8010dc4:	683b      	ldr	r3, [r7, #0]
 8010dc6:	699b      	ldr	r3, [r3, #24]
 8010dc8:	041b      	lsls	r3, r3, #16
 8010dca:	4313      	orrs	r3, r2
 8010dcc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	4a16      	ldr	r2, [pc, #88]	; (8010e2c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8010dd4:	4293      	cmp	r3, r2
 8010dd6:	d004      	beq.n	8010de2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	4a14      	ldr	r2, [pc, #80]	; (8010e30 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8010dde:	4293      	cmp	r3, r2
 8010de0:	d115      	bne.n	8010e0e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010de8:	683b      	ldr	r3, [r7, #0]
 8010dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dec:	051b      	lsls	r3, r3, #20
 8010dee:	4313      	orrs	r3, r2
 8010df0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	69db      	ldr	r3, [r3, #28]
 8010dfc:	4313      	orrs	r3, r2
 8010dfe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8010e06:	683b      	ldr	r3, [r7, #0]
 8010e08:	6a1b      	ldr	r3, [r3, #32]
 8010e0a:	4313      	orrs	r3, r2
 8010e0c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	68fa      	ldr	r2, [r7, #12]
 8010e14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	2200      	movs	r2, #0
 8010e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010e1e:	2300      	movs	r3, #0
}
 8010e20:	4618      	mov	r0, r3
 8010e22:	3714      	adds	r7, #20
 8010e24:	46bd      	mov	sp, r7
 8010e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2a:	4770      	bx	lr
 8010e2c:	40012c00 	.word	0x40012c00
 8010e30:	40013400 	.word	0x40013400

08010e34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010e34:	b480      	push	{r7}
 8010e36:	b083      	sub	sp, #12
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010e3c:	bf00      	nop
 8010e3e:	370c      	adds	r7, #12
 8010e40:	46bd      	mov	sp, r7
 8010e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e46:	4770      	bx	lr

08010e48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010e48:	b480      	push	{r7}
 8010e4a:	b083      	sub	sp, #12
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010e50:	bf00      	nop
 8010e52:	370c      	adds	r7, #12
 8010e54:	46bd      	mov	sp, r7
 8010e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5a:	4770      	bx	lr

08010e5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010e5c:	b480      	push	{r7}
 8010e5e:	b083      	sub	sp, #12
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010e64:	bf00      	nop
 8010e66:	370c      	adds	r7, #12
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6e:	4770      	bx	lr

08010e70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b082      	sub	sp, #8
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d101      	bne.n	8010e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010e7e:	2301      	movs	r3, #1
 8010e80:	e042      	b.n	8010f08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d106      	bne.n	8010e9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	2200      	movs	r2, #0
 8010e90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010e94:	6878      	ldr	r0, [r7, #4]
 8010e96:	f7f4 fc13 	bl	80056c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	2224      	movs	r2, #36	; 0x24
 8010e9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	681a      	ldr	r2, [r3, #0]
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	f022 0201 	bic.w	r2, r2, #1
 8010eb0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d002      	beq.n	8010ec0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8010eba:	6878      	ldr	r0, [r7, #4]
 8010ebc:	f000 ff58 	bl	8011d70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010ec0:	6878      	ldr	r0, [r7, #4]
 8010ec2:	f000 fc59 	bl	8011778 <UART_SetConfig>
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	2b01      	cmp	r3, #1
 8010eca:	d101      	bne.n	8010ed0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010ecc:	2301      	movs	r3, #1
 8010ece:	e01b      	b.n	8010f08 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	685a      	ldr	r2, [r3, #4]
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010ede:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	689a      	ldr	r2, [r3, #8]
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010eee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	681a      	ldr	r2, [r3, #0]
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	f042 0201 	orr.w	r2, r2, #1
 8010efe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010f00:	6878      	ldr	r0, [r7, #4]
 8010f02:	f000 ffd7 	bl	8011eb4 <UART_CheckIdleState>
 8010f06:	4603      	mov	r3, r0
}
 8010f08:	4618      	mov	r0, r3
 8010f0a:	3708      	adds	r7, #8
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	bd80      	pop	{r7, pc}

08010f10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b08a      	sub	sp, #40	; 0x28
 8010f14:	af02      	add	r7, sp, #8
 8010f16:	60f8      	str	r0, [r7, #12]
 8010f18:	60b9      	str	r1, [r7, #8]
 8010f1a:	603b      	str	r3, [r7, #0]
 8010f1c:	4613      	mov	r3, r2
 8010f1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010f26:	2b20      	cmp	r3, #32
 8010f28:	d17c      	bne.n	8011024 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8010f2a:	68bb      	ldr	r3, [r7, #8]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d002      	beq.n	8010f36 <HAL_UART_Transmit+0x26>
 8010f30:	88fb      	ldrh	r3, [r7, #6]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d101      	bne.n	8010f3a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8010f36:	2301      	movs	r3, #1
 8010f38:	e075      	b.n	8011026 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	2221      	movs	r2, #33	; 0x21
 8010f46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010f4a:	f7f6 faeb 	bl	8007524 <HAL_GetTick>
 8010f4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	88fa      	ldrh	r2, [r7, #6]
 8010f54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	88fa      	ldrh	r2, [r7, #6]
 8010f5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	689b      	ldr	r3, [r3, #8]
 8010f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010f68:	d108      	bne.n	8010f7c <HAL_UART_Transmit+0x6c>
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	691b      	ldr	r3, [r3, #16]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d104      	bne.n	8010f7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8010f72:	2300      	movs	r3, #0
 8010f74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010f76:	68bb      	ldr	r3, [r7, #8]
 8010f78:	61bb      	str	r3, [r7, #24]
 8010f7a:	e003      	b.n	8010f84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8010f7c:	68bb      	ldr	r3, [r7, #8]
 8010f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010f80:	2300      	movs	r3, #0
 8010f82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010f84:	e031      	b.n	8010fea <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010f86:	683b      	ldr	r3, [r7, #0]
 8010f88:	9300      	str	r3, [sp, #0]
 8010f8a:	697b      	ldr	r3, [r7, #20]
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	2180      	movs	r1, #128	; 0x80
 8010f90:	68f8      	ldr	r0, [r7, #12]
 8010f92:	f001 f839 	bl	8012008 <UART_WaitOnFlagUntilTimeout>
 8010f96:	4603      	mov	r3, r0
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d005      	beq.n	8010fa8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	2220      	movs	r2, #32
 8010fa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8010fa4:	2303      	movs	r3, #3
 8010fa6:	e03e      	b.n	8011026 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8010fa8:	69fb      	ldr	r3, [r7, #28]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d10b      	bne.n	8010fc6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010fae:	69bb      	ldr	r3, [r7, #24]
 8010fb0:	881a      	ldrh	r2, [r3, #0]
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010fba:	b292      	uxth	r2, r2
 8010fbc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8010fbe:	69bb      	ldr	r3, [r7, #24]
 8010fc0:	3302      	adds	r3, #2
 8010fc2:	61bb      	str	r3, [r7, #24]
 8010fc4:	e008      	b.n	8010fd8 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010fc6:	69fb      	ldr	r3, [r7, #28]
 8010fc8:	781a      	ldrb	r2, [r3, #0]
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	b292      	uxth	r2, r2
 8010fd0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010fd2:	69fb      	ldr	r3, [r7, #28]
 8010fd4:	3301      	adds	r3, #1
 8010fd6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010fde:	b29b      	uxth	r3, r3
 8010fe0:	3b01      	subs	r3, #1
 8010fe2:	b29a      	uxth	r2, r3
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010ff0:	b29b      	uxth	r3, r3
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d1c7      	bne.n	8010f86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010ff6:	683b      	ldr	r3, [r7, #0]
 8010ff8:	9300      	str	r3, [sp, #0]
 8010ffa:	697b      	ldr	r3, [r7, #20]
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	2140      	movs	r1, #64	; 0x40
 8011000:	68f8      	ldr	r0, [r7, #12]
 8011002:	f001 f801 	bl	8012008 <UART_WaitOnFlagUntilTimeout>
 8011006:	4603      	mov	r3, r0
 8011008:	2b00      	cmp	r3, #0
 801100a:	d005      	beq.n	8011018 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	2220      	movs	r2, #32
 8011010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8011014:	2303      	movs	r3, #3
 8011016:	e006      	b.n	8011026 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	2220      	movs	r2, #32
 801101c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8011020:	2300      	movs	r3, #0
 8011022:	e000      	b.n	8011026 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8011024:	2302      	movs	r3, #2
  }
}
 8011026:	4618      	mov	r0, r3
 8011028:	3720      	adds	r7, #32
 801102a:	46bd      	mov	sp, r7
 801102c:	bd80      	pop	{r7, pc}
	...

08011030 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011030:	b580      	push	{r7, lr}
 8011032:	b08a      	sub	sp, #40	; 0x28
 8011034:	af00      	add	r7, sp, #0
 8011036:	60f8      	str	r0, [r7, #12]
 8011038:	60b9      	str	r1, [r7, #8]
 801103a:	4613      	mov	r3, r2
 801103c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011044:	2b20      	cmp	r3, #32
 8011046:	d137      	bne.n	80110b8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8011048:	68bb      	ldr	r3, [r7, #8]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d002      	beq.n	8011054 <HAL_UART_Receive_DMA+0x24>
 801104e:	88fb      	ldrh	r3, [r7, #6]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d101      	bne.n	8011058 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8011054:	2301      	movs	r3, #1
 8011056:	e030      	b.n	80110ba <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	2200      	movs	r2, #0
 801105c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	4a18      	ldr	r2, [pc, #96]	; (80110c4 <HAL_UART_Receive_DMA+0x94>)
 8011064:	4293      	cmp	r3, r2
 8011066:	d01f      	beq.n	80110a8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	685b      	ldr	r3, [r3, #4]
 801106e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011072:	2b00      	cmp	r3, #0
 8011074:	d018      	beq.n	80110a8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801107c:	697b      	ldr	r3, [r7, #20]
 801107e:	e853 3f00 	ldrex	r3, [r3]
 8011082:	613b      	str	r3, [r7, #16]
   return(result);
 8011084:	693b      	ldr	r3, [r7, #16]
 8011086:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801108a:	627b      	str	r3, [r7, #36]	; 0x24
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	461a      	mov	r2, r3
 8011092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011094:	623b      	str	r3, [r7, #32]
 8011096:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011098:	69f9      	ldr	r1, [r7, #28]
 801109a:	6a3a      	ldr	r2, [r7, #32]
 801109c:	e841 2300 	strex	r3, r2, [r1]
 80110a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80110a2:	69bb      	ldr	r3, [r7, #24]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d1e6      	bne.n	8011076 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80110a8:	88fb      	ldrh	r3, [r7, #6]
 80110aa:	461a      	mov	r2, r3
 80110ac:	68b9      	ldr	r1, [r7, #8]
 80110ae:	68f8      	ldr	r0, [r7, #12]
 80110b0:	f001 f812 	bl	80120d8 <UART_Start_Receive_DMA>
 80110b4:	4603      	mov	r3, r0
 80110b6:	e000      	b.n	80110ba <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80110b8:	2302      	movs	r3, #2
  }
}
 80110ba:	4618      	mov	r0, r3
 80110bc:	3728      	adds	r7, #40	; 0x28
 80110be:	46bd      	mov	sp, r7
 80110c0:	bd80      	pop	{r7, pc}
 80110c2:	bf00      	nop
 80110c4:	40008000 	.word	0x40008000

080110c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b0ba      	sub	sp, #232	; 0xe8
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	69db      	ldr	r3, [r3, #28]
 80110d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	689b      	ldr	r3, [r3, #8]
 80110ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80110ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80110f2:	f640 030f 	movw	r3, #2063	; 0x80f
 80110f6:	4013      	ands	r3, r2
 80110f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80110fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011100:	2b00      	cmp	r3, #0
 8011102:	d11b      	bne.n	801113c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011108:	f003 0320 	and.w	r3, r3, #32
 801110c:	2b00      	cmp	r3, #0
 801110e:	d015      	beq.n	801113c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011114:	f003 0320 	and.w	r3, r3, #32
 8011118:	2b00      	cmp	r3, #0
 801111a:	d105      	bne.n	8011128 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801111c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011124:	2b00      	cmp	r3, #0
 8011126:	d009      	beq.n	801113c <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801112c:	2b00      	cmp	r3, #0
 801112e:	f000 82e3 	beq.w	80116f8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011136:	6878      	ldr	r0, [r7, #4]
 8011138:	4798      	blx	r3
      }
      return;
 801113a:	e2dd      	b.n	80116f8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 801113c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011140:	2b00      	cmp	r3, #0
 8011142:	f000 8123 	beq.w	801138c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8011146:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801114a:	4b8d      	ldr	r3, [pc, #564]	; (8011380 <HAL_UART_IRQHandler+0x2b8>)
 801114c:	4013      	ands	r3, r2
 801114e:	2b00      	cmp	r3, #0
 8011150:	d106      	bne.n	8011160 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8011152:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8011156:	4b8b      	ldr	r3, [pc, #556]	; (8011384 <HAL_UART_IRQHandler+0x2bc>)
 8011158:	4013      	ands	r3, r2
 801115a:	2b00      	cmp	r3, #0
 801115c:	f000 8116 	beq.w	801138c <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011164:	f003 0301 	and.w	r3, r3, #1
 8011168:	2b00      	cmp	r3, #0
 801116a:	d011      	beq.n	8011190 <HAL_UART_IRQHandler+0xc8>
 801116c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011174:	2b00      	cmp	r3, #0
 8011176:	d00b      	beq.n	8011190 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	2201      	movs	r2, #1
 801117e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011186:	f043 0201 	orr.w	r2, r3, #1
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011194:	f003 0302 	and.w	r3, r3, #2
 8011198:	2b00      	cmp	r3, #0
 801119a:	d011      	beq.n	80111c0 <HAL_UART_IRQHandler+0xf8>
 801119c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80111a0:	f003 0301 	and.w	r3, r3, #1
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d00b      	beq.n	80111c0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	2202      	movs	r2, #2
 80111ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80111b6:	f043 0204 	orr.w	r2, r3, #4
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80111c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80111c4:	f003 0304 	and.w	r3, r3, #4
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d011      	beq.n	80111f0 <HAL_UART_IRQHandler+0x128>
 80111cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80111d0:	f003 0301 	and.w	r3, r3, #1
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d00b      	beq.n	80111f0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	2204      	movs	r2, #4
 80111de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80111e6:	f043 0202 	orr.w	r2, r3, #2
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80111f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80111f4:	f003 0308 	and.w	r3, r3, #8
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d017      	beq.n	801122c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80111fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011200:	f003 0320 	and.w	r3, r3, #32
 8011204:	2b00      	cmp	r3, #0
 8011206:	d105      	bne.n	8011214 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8011208:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801120c:	4b5c      	ldr	r3, [pc, #368]	; (8011380 <HAL_UART_IRQHandler+0x2b8>)
 801120e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011210:	2b00      	cmp	r3, #0
 8011212:	d00b      	beq.n	801122c <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	2208      	movs	r2, #8
 801121a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011222:	f043 0208 	orr.w	r2, r3, #8
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801122c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011230:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011234:	2b00      	cmp	r3, #0
 8011236:	d012      	beq.n	801125e <HAL_UART_IRQHandler+0x196>
 8011238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801123c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011240:	2b00      	cmp	r3, #0
 8011242:	d00c      	beq.n	801125e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801124c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011254:	f043 0220 	orr.w	r2, r3, #32
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011264:	2b00      	cmp	r3, #0
 8011266:	f000 8249 	beq.w	80116fc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801126a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801126e:	f003 0320 	and.w	r3, r3, #32
 8011272:	2b00      	cmp	r3, #0
 8011274:	d013      	beq.n	801129e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801127a:	f003 0320 	and.w	r3, r3, #32
 801127e:	2b00      	cmp	r3, #0
 8011280:	d105      	bne.n	801128e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011282:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801128a:	2b00      	cmp	r3, #0
 801128c:	d007      	beq.n	801129e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011292:	2b00      	cmp	r3, #0
 8011294:	d003      	beq.n	801129e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801129a:	6878      	ldr	r0, [r7, #4]
 801129c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80112a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	689b      	ldr	r3, [r3, #8]
 80112ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80112b2:	2b40      	cmp	r3, #64	; 0x40
 80112b4:	d005      	beq.n	80112c2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80112b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80112ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d054      	beq.n	801136c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80112c2:	6878      	ldr	r0, [r7, #4]
 80112c4:	f000 ffef 	bl	80122a6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	689b      	ldr	r3, [r3, #8]
 80112ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80112d2:	2b40      	cmp	r3, #64	; 0x40
 80112d4:	d146      	bne.n	8011364 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	3308      	adds	r3, #8
 80112dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80112e4:	e853 3f00 	ldrex	r3, [r3]
 80112e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80112ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80112f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80112f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	3308      	adds	r3, #8
 80112fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8011302:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8011306:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801130a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801130e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011312:	e841 2300 	strex	r3, r2, [r1]
 8011316:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801131a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801131e:	2b00      	cmp	r3, #0
 8011320:	d1d9      	bne.n	80112d6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011328:	2b00      	cmp	r3, #0
 801132a:	d017      	beq.n	801135c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011332:	4a15      	ldr	r2, [pc, #84]	; (8011388 <HAL_UART_IRQHandler+0x2c0>)
 8011334:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801133c:	4618      	mov	r0, r3
 801133e:	f7f6 fbb2 	bl	8007aa6 <HAL_DMA_Abort_IT>
 8011342:	4603      	mov	r3, r0
 8011344:	2b00      	cmp	r3, #0
 8011346:	d019      	beq.n	801137c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801134e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011350:	687a      	ldr	r2, [r7, #4]
 8011352:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8011356:	4610      	mov	r0, r2
 8011358:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801135a:	e00f      	b.n	801137c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	f000 f9f5 	bl	801174c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011362:	e00b      	b.n	801137c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011364:	6878      	ldr	r0, [r7, #4]
 8011366:	f000 f9f1 	bl	801174c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801136a:	e007      	b.n	801137c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801136c:	6878      	ldr	r0, [r7, #4]
 801136e:	f000 f9ed 	bl	801174c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	2200      	movs	r2, #0
 8011376:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 801137a:	e1bf      	b.n	80116fc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801137c:	bf00      	nop
    return;
 801137e:	e1bd      	b.n	80116fc <HAL_UART_IRQHandler+0x634>
 8011380:	10000001 	.word	0x10000001
 8011384:	04000120 	.word	0x04000120
 8011388:	0801255d 	.word	0x0801255d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011390:	2b01      	cmp	r3, #1
 8011392:	f040 8153 	bne.w	801163c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8011396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801139a:	f003 0310 	and.w	r3, r3, #16
 801139e:	2b00      	cmp	r3, #0
 80113a0:	f000 814c 	beq.w	801163c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80113a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80113a8:	f003 0310 	and.w	r3, r3, #16
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	f000 8145 	beq.w	801163c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	2210      	movs	r2, #16
 80113b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	689b      	ldr	r3, [r3, #8]
 80113c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80113c4:	2b40      	cmp	r3, #64	; 0x40
 80113c6:	f040 80bb 	bne.w	8011540 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	685b      	ldr	r3, [r3, #4]
 80113d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80113d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80113dc:	2b00      	cmp	r3, #0
 80113de:	f000 818f 	beq.w	8011700 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80113e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80113ec:	429a      	cmp	r2, r3
 80113ee:	f080 8187 	bcs.w	8011700 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80113f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	f003 0320 	and.w	r3, r3, #32
 801140a:	2b00      	cmp	r3, #0
 801140c:	f040 8087 	bne.w	801151e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011418:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801141c:	e853 3f00 	ldrex	r3, [r3]
 8011420:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8011424:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801142c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	461a      	mov	r2, r3
 8011436:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801143a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801143e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011442:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8011446:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801144a:	e841 2300 	strex	r3, r2, [r1]
 801144e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8011452:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011456:	2b00      	cmp	r3, #0
 8011458:	d1da      	bne.n	8011410 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	3308      	adds	r3, #8
 8011460:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011464:	e853 3f00 	ldrex	r3, [r3]
 8011468:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801146a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801146c:	f023 0301 	bic.w	r3, r3, #1
 8011470:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	3308      	adds	r3, #8
 801147a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801147e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8011482:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011484:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011486:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801148a:	e841 2300 	strex	r3, r2, [r1]
 801148e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8011490:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011492:	2b00      	cmp	r3, #0
 8011494:	d1e1      	bne.n	801145a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	3308      	adds	r3, #8
 801149c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801149e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80114a0:	e853 3f00 	ldrex	r3, [r3]
 80114a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80114a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80114a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80114ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	3308      	adds	r3, #8
 80114b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80114ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80114bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80114c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80114c2:	e841 2300 	strex	r3, r2, [r1]
 80114c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80114c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d1e3      	bne.n	8011496 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	2220      	movs	r2, #32
 80114d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	2200      	movs	r2, #0
 80114da:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114e4:	e853 3f00 	ldrex	r3, [r3]
 80114e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80114ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80114ec:	f023 0310 	bic.w	r3, r3, #16
 80114f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	461a      	mov	r2, r3
 80114fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80114fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8011500:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011502:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011504:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011506:	e841 2300 	strex	r3, r2, [r1]
 801150a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801150c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801150e:	2b00      	cmp	r3, #0
 8011510:	d1e4      	bne.n	80114dc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011518:	4618      	mov	r0, r3
 801151a:	f7f6 fa68 	bl	80079ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	2202      	movs	r2, #2
 8011522:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011530:	b29b      	uxth	r3, r3
 8011532:	1ad3      	subs	r3, r2, r3
 8011534:	b29b      	uxth	r3, r3
 8011536:	4619      	mov	r1, r3
 8011538:	6878      	ldr	r0, [r7, #4]
 801153a:	f000 f911 	bl	8011760 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801153e:	e0df      	b.n	8011700 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801154c:	b29b      	uxth	r3, r3
 801154e:	1ad3      	subs	r3, r2, r3
 8011550:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801155a:	b29b      	uxth	r3, r3
 801155c:	2b00      	cmp	r3, #0
 801155e:	f000 80d1 	beq.w	8011704 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8011562:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011566:	2b00      	cmp	r3, #0
 8011568:	f000 80cc 	beq.w	8011704 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011574:	e853 3f00 	ldrex	r3, [r3]
 8011578:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801157a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801157c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011580:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	461a      	mov	r2, r3
 801158a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801158e:	647b      	str	r3, [r7, #68]	; 0x44
 8011590:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011592:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011594:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011596:	e841 2300 	strex	r3, r2, [r1]
 801159a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801159c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d1e4      	bne.n	801156c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	3308      	adds	r3, #8
 80115a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ac:	e853 3f00 	ldrex	r3, [r3]
 80115b0:	623b      	str	r3, [r7, #32]
   return(result);
 80115b2:	6a3b      	ldr	r3, [r7, #32]
 80115b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80115b8:	f023 0301 	bic.w	r3, r3, #1
 80115bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	3308      	adds	r3, #8
 80115c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80115ca:	633a      	str	r2, [r7, #48]	; 0x30
 80115cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80115d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115d2:	e841 2300 	strex	r3, r2, [r1]
 80115d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80115d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d1e1      	bne.n	80115a2 <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	2220      	movs	r2, #32
 80115e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	2200      	movs	r2, #0
 80115ea:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	2200      	movs	r2, #0
 80115f0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115f8:	693b      	ldr	r3, [r7, #16]
 80115fa:	e853 3f00 	ldrex	r3, [r3]
 80115fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	f023 0310 	bic.w	r3, r3, #16
 8011606:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	461a      	mov	r2, r3
 8011610:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011614:	61fb      	str	r3, [r7, #28]
 8011616:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011618:	69b9      	ldr	r1, [r7, #24]
 801161a:	69fa      	ldr	r2, [r7, #28]
 801161c:	e841 2300 	strex	r3, r2, [r1]
 8011620:	617b      	str	r3, [r7, #20]
   return(result);
 8011622:	697b      	ldr	r3, [r7, #20]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d1e4      	bne.n	80115f2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	2202      	movs	r2, #2
 801162c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801162e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011632:	4619      	mov	r1, r3
 8011634:	6878      	ldr	r0, [r7, #4]
 8011636:	f000 f893 	bl	8011760 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801163a:	e063      	b.n	8011704 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801163c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011640:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011644:	2b00      	cmp	r3, #0
 8011646:	d00e      	beq.n	8011666 <HAL_UART_IRQHandler+0x59e>
 8011648:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801164c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011650:	2b00      	cmp	r3, #0
 8011652:	d008      	beq.n	8011666 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801165c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801165e:	6878      	ldr	r0, [r7, #4]
 8011660:	f000 ffbd 	bl	80125de <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011664:	e051      	b.n	801170a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8011666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801166a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801166e:	2b00      	cmp	r3, #0
 8011670:	d014      	beq.n	801169c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8011672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801167a:	2b00      	cmp	r3, #0
 801167c:	d105      	bne.n	801168a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801167e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011682:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011686:	2b00      	cmp	r3, #0
 8011688:	d008      	beq.n	801169c <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801168e:	2b00      	cmp	r3, #0
 8011690:	d03a      	beq.n	8011708 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011696:	6878      	ldr	r0, [r7, #4]
 8011698:	4798      	blx	r3
    }
    return;
 801169a:	e035      	b.n	8011708 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801169c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80116a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d009      	beq.n	80116bc <HAL_UART_IRQHandler+0x5f4>
 80116a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80116ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d003      	beq.n	80116bc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80116b4:	6878      	ldr	r0, [r7, #4]
 80116b6:	f000 ff67 	bl	8012588 <UART_EndTransmit_IT>
    return;
 80116ba:	e026      	b.n	801170a <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80116bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80116c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d009      	beq.n	80116dc <HAL_UART_IRQHandler+0x614>
 80116c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80116cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d003      	beq.n	80116dc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80116d4:	6878      	ldr	r0, [r7, #4]
 80116d6:	f000 ff96 	bl	8012606 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80116da:	e016      	b.n	801170a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80116dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80116e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d010      	beq.n	801170a <HAL_UART_IRQHandler+0x642>
 80116e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	da0c      	bge.n	801170a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80116f0:	6878      	ldr	r0, [r7, #4]
 80116f2:	f000 ff7e 	bl	80125f2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80116f6:	e008      	b.n	801170a <HAL_UART_IRQHandler+0x642>
      return;
 80116f8:	bf00      	nop
 80116fa:	e006      	b.n	801170a <HAL_UART_IRQHandler+0x642>
    return;
 80116fc:	bf00      	nop
 80116fe:	e004      	b.n	801170a <HAL_UART_IRQHandler+0x642>
      return;
 8011700:	bf00      	nop
 8011702:	e002      	b.n	801170a <HAL_UART_IRQHandler+0x642>
      return;
 8011704:	bf00      	nop
 8011706:	e000      	b.n	801170a <HAL_UART_IRQHandler+0x642>
    return;
 8011708:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 801170a:	37e8      	adds	r7, #232	; 0xe8
 801170c:	46bd      	mov	sp, r7
 801170e:	bd80      	pop	{r7, pc}

08011710 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011710:	b480      	push	{r7}
 8011712:	b083      	sub	sp, #12
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011718:	bf00      	nop
 801171a:	370c      	adds	r7, #12
 801171c:	46bd      	mov	sp, r7
 801171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011722:	4770      	bx	lr

08011724 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8011724:	b480      	push	{r7}
 8011726:	b083      	sub	sp, #12
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 801172c:	bf00      	nop
 801172e:	370c      	adds	r7, #12
 8011730:	46bd      	mov	sp, r7
 8011732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011736:	4770      	bx	lr

08011738 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011738:	b480      	push	{r7}
 801173a:	b083      	sub	sp, #12
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8011740:	bf00      	nop
 8011742:	370c      	adds	r7, #12
 8011744:	46bd      	mov	sp, r7
 8011746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174a:	4770      	bx	lr

0801174c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801174c:	b480      	push	{r7}
 801174e:	b083      	sub	sp, #12
 8011750:	af00      	add	r7, sp, #0
 8011752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011754:	bf00      	nop
 8011756:	370c      	adds	r7, #12
 8011758:	46bd      	mov	sp, r7
 801175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175e:	4770      	bx	lr

08011760 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011760:	b480      	push	{r7}
 8011762:	b083      	sub	sp, #12
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
 8011768:	460b      	mov	r3, r1
 801176a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801176c:	bf00      	nop
 801176e:	370c      	adds	r7, #12
 8011770:	46bd      	mov	sp, r7
 8011772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011776:	4770      	bx	lr

08011778 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801177c:	b08c      	sub	sp, #48	; 0x30
 801177e:	af00      	add	r7, sp, #0
 8011780:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011782:	2300      	movs	r3, #0
 8011784:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011788:	697b      	ldr	r3, [r7, #20]
 801178a:	689a      	ldr	r2, [r3, #8]
 801178c:	697b      	ldr	r3, [r7, #20]
 801178e:	691b      	ldr	r3, [r3, #16]
 8011790:	431a      	orrs	r2, r3
 8011792:	697b      	ldr	r3, [r7, #20]
 8011794:	695b      	ldr	r3, [r3, #20]
 8011796:	431a      	orrs	r2, r3
 8011798:	697b      	ldr	r3, [r7, #20]
 801179a:	69db      	ldr	r3, [r3, #28]
 801179c:	4313      	orrs	r3, r2
 801179e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80117a0:	697b      	ldr	r3, [r7, #20]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	681a      	ldr	r2, [r3, #0]
 80117a6:	4baa      	ldr	r3, [pc, #680]	; (8011a50 <UART_SetConfig+0x2d8>)
 80117a8:	4013      	ands	r3, r2
 80117aa:	697a      	ldr	r2, [r7, #20]
 80117ac:	6812      	ldr	r2, [r2, #0]
 80117ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80117b0:	430b      	orrs	r3, r1
 80117b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80117b4:	697b      	ldr	r3, [r7, #20]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	685b      	ldr	r3, [r3, #4]
 80117ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80117be:	697b      	ldr	r3, [r7, #20]
 80117c0:	68da      	ldr	r2, [r3, #12]
 80117c2:	697b      	ldr	r3, [r7, #20]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	430a      	orrs	r2, r1
 80117c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80117ca:	697b      	ldr	r3, [r7, #20]
 80117cc:	699b      	ldr	r3, [r3, #24]
 80117ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80117d0:	697b      	ldr	r3, [r7, #20]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	4a9f      	ldr	r2, [pc, #636]	; (8011a54 <UART_SetConfig+0x2dc>)
 80117d6:	4293      	cmp	r3, r2
 80117d8:	d004      	beq.n	80117e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80117da:	697b      	ldr	r3, [r7, #20]
 80117dc:	6a1b      	ldr	r3, [r3, #32]
 80117de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117e0:	4313      	orrs	r3, r2
 80117e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80117e4:	697b      	ldr	r3, [r7, #20]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	689b      	ldr	r3, [r3, #8]
 80117ea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80117ee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80117f2:	697a      	ldr	r2, [r7, #20]
 80117f4:	6812      	ldr	r2, [r2, #0]
 80117f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80117f8:	430b      	orrs	r3, r1
 80117fa:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80117fc:	697b      	ldr	r3, [r7, #20]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011802:	f023 010f 	bic.w	r1, r3, #15
 8011806:	697b      	ldr	r3, [r7, #20]
 8011808:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801180a:	697b      	ldr	r3, [r7, #20]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	430a      	orrs	r2, r1
 8011810:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011812:	697b      	ldr	r3, [r7, #20]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	4a90      	ldr	r2, [pc, #576]	; (8011a58 <UART_SetConfig+0x2e0>)
 8011818:	4293      	cmp	r3, r2
 801181a:	d125      	bne.n	8011868 <UART_SetConfig+0xf0>
 801181c:	4b8f      	ldr	r3, [pc, #572]	; (8011a5c <UART_SetConfig+0x2e4>)
 801181e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011822:	f003 0303 	and.w	r3, r3, #3
 8011826:	2b03      	cmp	r3, #3
 8011828:	d81a      	bhi.n	8011860 <UART_SetConfig+0xe8>
 801182a:	a201      	add	r2, pc, #4	; (adr r2, 8011830 <UART_SetConfig+0xb8>)
 801182c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011830:	08011841 	.word	0x08011841
 8011834:	08011851 	.word	0x08011851
 8011838:	08011849 	.word	0x08011849
 801183c:	08011859 	.word	0x08011859
 8011840:	2301      	movs	r3, #1
 8011842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011846:	e116      	b.n	8011a76 <UART_SetConfig+0x2fe>
 8011848:	2302      	movs	r3, #2
 801184a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801184e:	e112      	b.n	8011a76 <UART_SetConfig+0x2fe>
 8011850:	2304      	movs	r3, #4
 8011852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011856:	e10e      	b.n	8011a76 <UART_SetConfig+0x2fe>
 8011858:	2308      	movs	r3, #8
 801185a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801185e:	e10a      	b.n	8011a76 <UART_SetConfig+0x2fe>
 8011860:	2310      	movs	r3, #16
 8011862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011866:	e106      	b.n	8011a76 <UART_SetConfig+0x2fe>
 8011868:	697b      	ldr	r3, [r7, #20]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	4a7c      	ldr	r2, [pc, #496]	; (8011a60 <UART_SetConfig+0x2e8>)
 801186e:	4293      	cmp	r3, r2
 8011870:	d138      	bne.n	80118e4 <UART_SetConfig+0x16c>
 8011872:	4b7a      	ldr	r3, [pc, #488]	; (8011a5c <UART_SetConfig+0x2e4>)
 8011874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011878:	f003 030c 	and.w	r3, r3, #12
 801187c:	2b0c      	cmp	r3, #12
 801187e:	d82d      	bhi.n	80118dc <UART_SetConfig+0x164>
 8011880:	a201      	add	r2, pc, #4	; (adr r2, 8011888 <UART_SetConfig+0x110>)
 8011882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011886:	bf00      	nop
 8011888:	080118bd 	.word	0x080118bd
 801188c:	080118dd 	.word	0x080118dd
 8011890:	080118dd 	.word	0x080118dd
 8011894:	080118dd 	.word	0x080118dd
 8011898:	080118cd 	.word	0x080118cd
 801189c:	080118dd 	.word	0x080118dd
 80118a0:	080118dd 	.word	0x080118dd
 80118a4:	080118dd 	.word	0x080118dd
 80118a8:	080118c5 	.word	0x080118c5
 80118ac:	080118dd 	.word	0x080118dd
 80118b0:	080118dd 	.word	0x080118dd
 80118b4:	080118dd 	.word	0x080118dd
 80118b8:	080118d5 	.word	0x080118d5
 80118bc:	2300      	movs	r3, #0
 80118be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80118c2:	e0d8      	b.n	8011a76 <UART_SetConfig+0x2fe>
 80118c4:	2302      	movs	r3, #2
 80118c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80118ca:	e0d4      	b.n	8011a76 <UART_SetConfig+0x2fe>
 80118cc:	2304      	movs	r3, #4
 80118ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80118d2:	e0d0      	b.n	8011a76 <UART_SetConfig+0x2fe>
 80118d4:	2308      	movs	r3, #8
 80118d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80118da:	e0cc      	b.n	8011a76 <UART_SetConfig+0x2fe>
 80118dc:	2310      	movs	r3, #16
 80118de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80118e2:	e0c8      	b.n	8011a76 <UART_SetConfig+0x2fe>
 80118e4:	697b      	ldr	r3, [r7, #20]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	4a5e      	ldr	r2, [pc, #376]	; (8011a64 <UART_SetConfig+0x2ec>)
 80118ea:	4293      	cmp	r3, r2
 80118ec:	d125      	bne.n	801193a <UART_SetConfig+0x1c2>
 80118ee:	4b5b      	ldr	r3, [pc, #364]	; (8011a5c <UART_SetConfig+0x2e4>)
 80118f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80118f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80118f8:	2b30      	cmp	r3, #48	; 0x30
 80118fa:	d016      	beq.n	801192a <UART_SetConfig+0x1b2>
 80118fc:	2b30      	cmp	r3, #48	; 0x30
 80118fe:	d818      	bhi.n	8011932 <UART_SetConfig+0x1ba>
 8011900:	2b20      	cmp	r3, #32
 8011902:	d00a      	beq.n	801191a <UART_SetConfig+0x1a2>
 8011904:	2b20      	cmp	r3, #32
 8011906:	d814      	bhi.n	8011932 <UART_SetConfig+0x1ba>
 8011908:	2b00      	cmp	r3, #0
 801190a:	d002      	beq.n	8011912 <UART_SetConfig+0x19a>
 801190c:	2b10      	cmp	r3, #16
 801190e:	d008      	beq.n	8011922 <UART_SetConfig+0x1aa>
 8011910:	e00f      	b.n	8011932 <UART_SetConfig+0x1ba>
 8011912:	2300      	movs	r3, #0
 8011914:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011918:	e0ad      	b.n	8011a76 <UART_SetConfig+0x2fe>
 801191a:	2302      	movs	r3, #2
 801191c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011920:	e0a9      	b.n	8011a76 <UART_SetConfig+0x2fe>
 8011922:	2304      	movs	r3, #4
 8011924:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011928:	e0a5      	b.n	8011a76 <UART_SetConfig+0x2fe>
 801192a:	2308      	movs	r3, #8
 801192c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011930:	e0a1      	b.n	8011a76 <UART_SetConfig+0x2fe>
 8011932:	2310      	movs	r3, #16
 8011934:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011938:	e09d      	b.n	8011a76 <UART_SetConfig+0x2fe>
 801193a:	697b      	ldr	r3, [r7, #20]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	4a4a      	ldr	r2, [pc, #296]	; (8011a68 <UART_SetConfig+0x2f0>)
 8011940:	4293      	cmp	r3, r2
 8011942:	d125      	bne.n	8011990 <UART_SetConfig+0x218>
 8011944:	4b45      	ldr	r3, [pc, #276]	; (8011a5c <UART_SetConfig+0x2e4>)
 8011946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801194a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801194e:	2bc0      	cmp	r3, #192	; 0xc0
 8011950:	d016      	beq.n	8011980 <UART_SetConfig+0x208>
 8011952:	2bc0      	cmp	r3, #192	; 0xc0
 8011954:	d818      	bhi.n	8011988 <UART_SetConfig+0x210>
 8011956:	2b80      	cmp	r3, #128	; 0x80
 8011958:	d00a      	beq.n	8011970 <UART_SetConfig+0x1f8>
 801195a:	2b80      	cmp	r3, #128	; 0x80
 801195c:	d814      	bhi.n	8011988 <UART_SetConfig+0x210>
 801195e:	2b00      	cmp	r3, #0
 8011960:	d002      	beq.n	8011968 <UART_SetConfig+0x1f0>
 8011962:	2b40      	cmp	r3, #64	; 0x40
 8011964:	d008      	beq.n	8011978 <UART_SetConfig+0x200>
 8011966:	e00f      	b.n	8011988 <UART_SetConfig+0x210>
 8011968:	2300      	movs	r3, #0
 801196a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801196e:	e082      	b.n	8011a76 <UART_SetConfig+0x2fe>
 8011970:	2302      	movs	r3, #2
 8011972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011976:	e07e      	b.n	8011a76 <UART_SetConfig+0x2fe>
 8011978:	2304      	movs	r3, #4
 801197a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801197e:	e07a      	b.n	8011a76 <UART_SetConfig+0x2fe>
 8011980:	2308      	movs	r3, #8
 8011982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011986:	e076      	b.n	8011a76 <UART_SetConfig+0x2fe>
 8011988:	2310      	movs	r3, #16
 801198a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801198e:	e072      	b.n	8011a76 <UART_SetConfig+0x2fe>
 8011990:	697b      	ldr	r3, [r7, #20]
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	4a35      	ldr	r2, [pc, #212]	; (8011a6c <UART_SetConfig+0x2f4>)
 8011996:	4293      	cmp	r3, r2
 8011998:	d12a      	bne.n	80119f0 <UART_SetConfig+0x278>
 801199a:	4b30      	ldr	r3, [pc, #192]	; (8011a5c <UART_SetConfig+0x2e4>)
 801199c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80119a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80119a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80119a8:	d01a      	beq.n	80119e0 <UART_SetConfig+0x268>
 80119aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80119ae:	d81b      	bhi.n	80119e8 <UART_SetConfig+0x270>
 80119b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80119b4:	d00c      	beq.n	80119d0 <UART_SetConfig+0x258>
 80119b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80119ba:	d815      	bhi.n	80119e8 <UART_SetConfig+0x270>
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d003      	beq.n	80119c8 <UART_SetConfig+0x250>
 80119c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80119c4:	d008      	beq.n	80119d8 <UART_SetConfig+0x260>
 80119c6:	e00f      	b.n	80119e8 <UART_SetConfig+0x270>
 80119c8:	2300      	movs	r3, #0
 80119ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80119ce:	e052      	b.n	8011a76 <UART_SetConfig+0x2fe>
 80119d0:	2302      	movs	r3, #2
 80119d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80119d6:	e04e      	b.n	8011a76 <UART_SetConfig+0x2fe>
 80119d8:	2304      	movs	r3, #4
 80119da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80119de:	e04a      	b.n	8011a76 <UART_SetConfig+0x2fe>
 80119e0:	2308      	movs	r3, #8
 80119e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80119e6:	e046      	b.n	8011a76 <UART_SetConfig+0x2fe>
 80119e8:	2310      	movs	r3, #16
 80119ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80119ee:	e042      	b.n	8011a76 <UART_SetConfig+0x2fe>
 80119f0:	697b      	ldr	r3, [r7, #20]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	4a17      	ldr	r2, [pc, #92]	; (8011a54 <UART_SetConfig+0x2dc>)
 80119f6:	4293      	cmp	r3, r2
 80119f8:	d13a      	bne.n	8011a70 <UART_SetConfig+0x2f8>
 80119fa:	4b18      	ldr	r3, [pc, #96]	; (8011a5c <UART_SetConfig+0x2e4>)
 80119fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011a00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8011a04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011a08:	d01a      	beq.n	8011a40 <UART_SetConfig+0x2c8>
 8011a0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011a0e:	d81b      	bhi.n	8011a48 <UART_SetConfig+0x2d0>
 8011a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011a14:	d00c      	beq.n	8011a30 <UART_SetConfig+0x2b8>
 8011a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011a1a:	d815      	bhi.n	8011a48 <UART_SetConfig+0x2d0>
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d003      	beq.n	8011a28 <UART_SetConfig+0x2b0>
 8011a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011a24:	d008      	beq.n	8011a38 <UART_SetConfig+0x2c0>
 8011a26:	e00f      	b.n	8011a48 <UART_SetConfig+0x2d0>
 8011a28:	2300      	movs	r3, #0
 8011a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011a2e:	e022      	b.n	8011a76 <UART_SetConfig+0x2fe>
 8011a30:	2302      	movs	r3, #2
 8011a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011a36:	e01e      	b.n	8011a76 <UART_SetConfig+0x2fe>
 8011a38:	2304      	movs	r3, #4
 8011a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011a3e:	e01a      	b.n	8011a76 <UART_SetConfig+0x2fe>
 8011a40:	2308      	movs	r3, #8
 8011a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011a46:	e016      	b.n	8011a76 <UART_SetConfig+0x2fe>
 8011a48:	2310      	movs	r3, #16
 8011a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011a4e:	e012      	b.n	8011a76 <UART_SetConfig+0x2fe>
 8011a50:	cfff69f3 	.word	0xcfff69f3
 8011a54:	40008000 	.word	0x40008000
 8011a58:	40013800 	.word	0x40013800
 8011a5c:	40021000 	.word	0x40021000
 8011a60:	40004400 	.word	0x40004400
 8011a64:	40004800 	.word	0x40004800
 8011a68:	40004c00 	.word	0x40004c00
 8011a6c:	40005000 	.word	0x40005000
 8011a70:	2310      	movs	r3, #16
 8011a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011a76:	697b      	ldr	r3, [r7, #20]
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	4aae      	ldr	r2, [pc, #696]	; (8011d34 <UART_SetConfig+0x5bc>)
 8011a7c:	4293      	cmp	r3, r2
 8011a7e:	f040 8097 	bne.w	8011bb0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011a82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011a86:	2b08      	cmp	r3, #8
 8011a88:	d823      	bhi.n	8011ad2 <UART_SetConfig+0x35a>
 8011a8a:	a201      	add	r2, pc, #4	; (adr r2, 8011a90 <UART_SetConfig+0x318>)
 8011a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a90:	08011ab5 	.word	0x08011ab5
 8011a94:	08011ad3 	.word	0x08011ad3
 8011a98:	08011abd 	.word	0x08011abd
 8011a9c:	08011ad3 	.word	0x08011ad3
 8011aa0:	08011ac3 	.word	0x08011ac3
 8011aa4:	08011ad3 	.word	0x08011ad3
 8011aa8:	08011ad3 	.word	0x08011ad3
 8011aac:	08011ad3 	.word	0x08011ad3
 8011ab0:	08011acb 	.word	0x08011acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011ab4:	f7f9 fee2 	bl	800b87c <HAL_RCC_GetPCLK1Freq>
 8011ab8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011aba:	e010      	b.n	8011ade <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011abc:	4b9e      	ldr	r3, [pc, #632]	; (8011d38 <UART_SetConfig+0x5c0>)
 8011abe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011ac0:	e00d      	b.n	8011ade <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011ac2:	f7f9 fe43 	bl	800b74c <HAL_RCC_GetSysClockFreq>
 8011ac6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011ac8:	e009      	b.n	8011ade <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011ace:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011ad0:	e005      	b.n	8011ade <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8011ad6:	2301      	movs	r3, #1
 8011ad8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8011adc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	f000 8130 	beq.w	8011d46 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011ae6:	697b      	ldr	r3, [r7, #20]
 8011ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011aea:	4a94      	ldr	r2, [pc, #592]	; (8011d3c <UART_SetConfig+0x5c4>)
 8011aec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011af0:	461a      	mov	r2, r3
 8011af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af4:	fbb3 f3f2 	udiv	r3, r3, r2
 8011af8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011afa:	697b      	ldr	r3, [r7, #20]
 8011afc:	685a      	ldr	r2, [r3, #4]
 8011afe:	4613      	mov	r3, r2
 8011b00:	005b      	lsls	r3, r3, #1
 8011b02:	4413      	add	r3, r2
 8011b04:	69ba      	ldr	r2, [r7, #24]
 8011b06:	429a      	cmp	r2, r3
 8011b08:	d305      	bcc.n	8011b16 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011b0a:	697b      	ldr	r3, [r7, #20]
 8011b0c:	685b      	ldr	r3, [r3, #4]
 8011b0e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011b10:	69ba      	ldr	r2, [r7, #24]
 8011b12:	429a      	cmp	r2, r3
 8011b14:	d903      	bls.n	8011b1e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8011b16:	2301      	movs	r3, #1
 8011b18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8011b1c:	e113      	b.n	8011d46 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b20:	2200      	movs	r2, #0
 8011b22:	60bb      	str	r3, [r7, #8]
 8011b24:	60fa      	str	r2, [r7, #12]
 8011b26:	697b      	ldr	r3, [r7, #20]
 8011b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b2a:	4a84      	ldr	r2, [pc, #528]	; (8011d3c <UART_SetConfig+0x5c4>)
 8011b2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011b30:	b29b      	uxth	r3, r3
 8011b32:	2200      	movs	r2, #0
 8011b34:	603b      	str	r3, [r7, #0]
 8011b36:	607a      	str	r2, [r7, #4]
 8011b38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011b3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011b40:	f7ef f89a 	bl	8000c78 <__aeabi_uldivmod>
 8011b44:	4602      	mov	r2, r0
 8011b46:	460b      	mov	r3, r1
 8011b48:	4610      	mov	r0, r2
 8011b4a:	4619      	mov	r1, r3
 8011b4c:	f04f 0200 	mov.w	r2, #0
 8011b50:	f04f 0300 	mov.w	r3, #0
 8011b54:	020b      	lsls	r3, r1, #8
 8011b56:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011b5a:	0202      	lsls	r2, r0, #8
 8011b5c:	6979      	ldr	r1, [r7, #20]
 8011b5e:	6849      	ldr	r1, [r1, #4]
 8011b60:	0849      	lsrs	r1, r1, #1
 8011b62:	2000      	movs	r0, #0
 8011b64:	460c      	mov	r4, r1
 8011b66:	4605      	mov	r5, r0
 8011b68:	eb12 0804 	adds.w	r8, r2, r4
 8011b6c:	eb43 0905 	adc.w	r9, r3, r5
 8011b70:	697b      	ldr	r3, [r7, #20]
 8011b72:	685b      	ldr	r3, [r3, #4]
 8011b74:	2200      	movs	r2, #0
 8011b76:	469a      	mov	sl, r3
 8011b78:	4693      	mov	fp, r2
 8011b7a:	4652      	mov	r2, sl
 8011b7c:	465b      	mov	r3, fp
 8011b7e:	4640      	mov	r0, r8
 8011b80:	4649      	mov	r1, r9
 8011b82:	f7ef f879 	bl	8000c78 <__aeabi_uldivmod>
 8011b86:	4602      	mov	r2, r0
 8011b88:	460b      	mov	r3, r1
 8011b8a:	4613      	mov	r3, r2
 8011b8c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011b8e:	6a3b      	ldr	r3, [r7, #32]
 8011b90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011b94:	d308      	bcc.n	8011ba8 <UART_SetConfig+0x430>
 8011b96:	6a3b      	ldr	r3, [r7, #32]
 8011b98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011b9c:	d204      	bcs.n	8011ba8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8011b9e:	697b      	ldr	r3, [r7, #20]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	6a3a      	ldr	r2, [r7, #32]
 8011ba4:	60da      	str	r2, [r3, #12]
 8011ba6:	e0ce      	b.n	8011d46 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8011ba8:	2301      	movs	r3, #1
 8011baa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8011bae:	e0ca      	b.n	8011d46 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011bb0:	697b      	ldr	r3, [r7, #20]
 8011bb2:	69db      	ldr	r3, [r3, #28]
 8011bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011bb8:	d166      	bne.n	8011c88 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8011bba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011bbe:	2b08      	cmp	r3, #8
 8011bc0:	d827      	bhi.n	8011c12 <UART_SetConfig+0x49a>
 8011bc2:	a201      	add	r2, pc, #4	; (adr r2, 8011bc8 <UART_SetConfig+0x450>)
 8011bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bc8:	08011bed 	.word	0x08011bed
 8011bcc:	08011bf5 	.word	0x08011bf5
 8011bd0:	08011bfd 	.word	0x08011bfd
 8011bd4:	08011c13 	.word	0x08011c13
 8011bd8:	08011c03 	.word	0x08011c03
 8011bdc:	08011c13 	.word	0x08011c13
 8011be0:	08011c13 	.word	0x08011c13
 8011be4:	08011c13 	.word	0x08011c13
 8011be8:	08011c0b 	.word	0x08011c0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011bec:	f7f9 fe46 	bl	800b87c <HAL_RCC_GetPCLK1Freq>
 8011bf0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011bf2:	e014      	b.n	8011c1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011bf4:	f7f9 fe58 	bl	800b8a8 <HAL_RCC_GetPCLK2Freq>
 8011bf8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011bfa:	e010      	b.n	8011c1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011bfc:	4b4e      	ldr	r3, [pc, #312]	; (8011d38 <UART_SetConfig+0x5c0>)
 8011bfe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011c00:	e00d      	b.n	8011c1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011c02:	f7f9 fda3 	bl	800b74c <HAL_RCC_GetSysClockFreq>
 8011c06:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011c08:	e009      	b.n	8011c1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011c0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011c10:	e005      	b.n	8011c1e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8011c12:	2300      	movs	r3, #0
 8011c14:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8011c16:	2301      	movs	r3, #1
 8011c18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8011c1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	f000 8090 	beq.w	8011d46 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011c26:	697b      	ldr	r3, [r7, #20]
 8011c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c2a:	4a44      	ldr	r2, [pc, #272]	; (8011d3c <UART_SetConfig+0x5c4>)
 8011c2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011c30:	461a      	mov	r2, r3
 8011c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c34:	fbb3 f3f2 	udiv	r3, r3, r2
 8011c38:	005a      	lsls	r2, r3, #1
 8011c3a:	697b      	ldr	r3, [r7, #20]
 8011c3c:	685b      	ldr	r3, [r3, #4]
 8011c3e:	085b      	lsrs	r3, r3, #1
 8011c40:	441a      	add	r2, r3
 8011c42:	697b      	ldr	r3, [r7, #20]
 8011c44:	685b      	ldr	r3, [r3, #4]
 8011c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8011c4a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011c4c:	6a3b      	ldr	r3, [r7, #32]
 8011c4e:	2b0f      	cmp	r3, #15
 8011c50:	d916      	bls.n	8011c80 <UART_SetConfig+0x508>
 8011c52:	6a3b      	ldr	r3, [r7, #32]
 8011c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011c58:	d212      	bcs.n	8011c80 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011c5a:	6a3b      	ldr	r3, [r7, #32]
 8011c5c:	b29b      	uxth	r3, r3
 8011c5e:	f023 030f 	bic.w	r3, r3, #15
 8011c62:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011c64:	6a3b      	ldr	r3, [r7, #32]
 8011c66:	085b      	lsrs	r3, r3, #1
 8011c68:	b29b      	uxth	r3, r3
 8011c6a:	f003 0307 	and.w	r3, r3, #7
 8011c6e:	b29a      	uxth	r2, r3
 8011c70:	8bfb      	ldrh	r3, [r7, #30]
 8011c72:	4313      	orrs	r3, r2
 8011c74:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8011c76:	697b      	ldr	r3, [r7, #20]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	8bfa      	ldrh	r2, [r7, #30]
 8011c7c:	60da      	str	r2, [r3, #12]
 8011c7e:	e062      	b.n	8011d46 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8011c80:	2301      	movs	r3, #1
 8011c82:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8011c86:	e05e      	b.n	8011d46 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011c88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011c8c:	2b08      	cmp	r3, #8
 8011c8e:	d828      	bhi.n	8011ce2 <UART_SetConfig+0x56a>
 8011c90:	a201      	add	r2, pc, #4	; (adr r2, 8011c98 <UART_SetConfig+0x520>)
 8011c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c96:	bf00      	nop
 8011c98:	08011cbd 	.word	0x08011cbd
 8011c9c:	08011cc5 	.word	0x08011cc5
 8011ca0:	08011ccd 	.word	0x08011ccd
 8011ca4:	08011ce3 	.word	0x08011ce3
 8011ca8:	08011cd3 	.word	0x08011cd3
 8011cac:	08011ce3 	.word	0x08011ce3
 8011cb0:	08011ce3 	.word	0x08011ce3
 8011cb4:	08011ce3 	.word	0x08011ce3
 8011cb8:	08011cdb 	.word	0x08011cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011cbc:	f7f9 fdde 	bl	800b87c <HAL_RCC_GetPCLK1Freq>
 8011cc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011cc2:	e014      	b.n	8011cee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011cc4:	f7f9 fdf0 	bl	800b8a8 <HAL_RCC_GetPCLK2Freq>
 8011cc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011cca:	e010      	b.n	8011cee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011ccc:	4b1a      	ldr	r3, [pc, #104]	; (8011d38 <UART_SetConfig+0x5c0>)
 8011cce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011cd0:	e00d      	b.n	8011cee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011cd2:	f7f9 fd3b 	bl	800b74c <HAL_RCC_GetSysClockFreq>
 8011cd6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011cd8:	e009      	b.n	8011cee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011cde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011ce0:	e005      	b.n	8011cee <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8011ce6:	2301      	movs	r3, #1
 8011ce8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8011cec:	bf00      	nop
    }

    if (pclk != 0U)
 8011cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d028      	beq.n	8011d46 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011cf4:	697b      	ldr	r3, [r7, #20]
 8011cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cf8:	4a10      	ldr	r2, [pc, #64]	; (8011d3c <UART_SetConfig+0x5c4>)
 8011cfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011cfe:	461a      	mov	r2, r3
 8011d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d02:	fbb3 f2f2 	udiv	r2, r3, r2
 8011d06:	697b      	ldr	r3, [r7, #20]
 8011d08:	685b      	ldr	r3, [r3, #4]
 8011d0a:	085b      	lsrs	r3, r3, #1
 8011d0c:	441a      	add	r2, r3
 8011d0e:	697b      	ldr	r3, [r7, #20]
 8011d10:	685b      	ldr	r3, [r3, #4]
 8011d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d16:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011d18:	6a3b      	ldr	r3, [r7, #32]
 8011d1a:	2b0f      	cmp	r3, #15
 8011d1c:	d910      	bls.n	8011d40 <UART_SetConfig+0x5c8>
 8011d1e:	6a3b      	ldr	r3, [r7, #32]
 8011d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011d24:	d20c      	bcs.n	8011d40 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011d26:	6a3b      	ldr	r3, [r7, #32]
 8011d28:	b29a      	uxth	r2, r3
 8011d2a:	697b      	ldr	r3, [r7, #20]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	60da      	str	r2, [r3, #12]
 8011d30:	e009      	b.n	8011d46 <UART_SetConfig+0x5ce>
 8011d32:	bf00      	nop
 8011d34:	40008000 	.word	0x40008000
 8011d38:	00f42400 	.word	0x00f42400
 8011d3c:	0801d178 	.word	0x0801d178
      }
      else
      {
        ret = HAL_ERROR;
 8011d40:	2301      	movs	r3, #1
 8011d42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011d46:	697b      	ldr	r3, [r7, #20]
 8011d48:	2201      	movs	r2, #1
 8011d4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011d4e:	697b      	ldr	r3, [r7, #20]
 8011d50:	2201      	movs	r2, #1
 8011d52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011d56:	697b      	ldr	r3, [r7, #20]
 8011d58:	2200      	movs	r2, #0
 8011d5a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011d5c:	697b      	ldr	r3, [r7, #20]
 8011d5e:	2200      	movs	r2, #0
 8011d60:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011d62:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8011d66:	4618      	mov	r0, r3
 8011d68:	3730      	adds	r7, #48	; 0x30
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011d70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011d70:	b480      	push	{r7}
 8011d72:	b083      	sub	sp, #12
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d7c:	f003 0308 	and.w	r3, r3, #8
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d00a      	beq.n	8011d9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	685b      	ldr	r3, [r3, #4]
 8011d8a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	430a      	orrs	r2, r1
 8011d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d9e:	f003 0301 	and.w	r3, r3, #1
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d00a      	beq.n	8011dbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	685b      	ldr	r3, [r3, #4]
 8011dac:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	430a      	orrs	r2, r1
 8011dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011dc0:	f003 0302 	and.w	r3, r3, #2
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d00a      	beq.n	8011dde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	685b      	ldr	r3, [r3, #4]
 8011dce:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	430a      	orrs	r2, r1
 8011ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011de2:	f003 0304 	and.w	r3, r3, #4
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d00a      	beq.n	8011e00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	685b      	ldr	r3, [r3, #4]
 8011df0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	430a      	orrs	r2, r1
 8011dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e04:	f003 0310 	and.w	r3, r3, #16
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d00a      	beq.n	8011e22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	689b      	ldr	r3, [r3, #8]
 8011e12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	430a      	orrs	r2, r1
 8011e20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e26:	f003 0320 	and.w	r3, r3, #32
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d00a      	beq.n	8011e44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	689b      	ldr	r3, [r3, #8]
 8011e34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	430a      	orrs	r2, r1
 8011e42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d01a      	beq.n	8011e86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	685b      	ldr	r3, [r3, #4]
 8011e56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	430a      	orrs	r2, r1
 8011e64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011e6e:	d10a      	bne.n	8011e86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	685b      	ldr	r3, [r3, #4]
 8011e76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	430a      	orrs	r2, r1
 8011e84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d00a      	beq.n	8011ea8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	685b      	ldr	r3, [r3, #4]
 8011e98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	430a      	orrs	r2, r1
 8011ea6:	605a      	str	r2, [r3, #4]
  }
}
 8011ea8:	bf00      	nop
 8011eaa:	370c      	adds	r7, #12
 8011eac:	46bd      	mov	sp, r7
 8011eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb2:	4770      	bx	lr

08011eb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b098      	sub	sp, #96	; 0x60
 8011eb8:	af02      	add	r7, sp, #8
 8011eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011ec4:	f7f5 fb2e 	bl	8007524 <HAL_GetTick>
 8011ec8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	f003 0308 	and.w	r3, r3, #8
 8011ed4:	2b08      	cmp	r3, #8
 8011ed6:	d12f      	bne.n	8011f38 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011ed8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011edc:	9300      	str	r3, [sp, #0]
 8011ede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011ee6:	6878      	ldr	r0, [r7, #4]
 8011ee8:	f000 f88e 	bl	8012008 <UART_WaitOnFlagUntilTimeout>
 8011eec:	4603      	mov	r3, r0
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d022      	beq.n	8011f38 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011efa:	e853 3f00 	ldrex	r3, [r3]
 8011efe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011f06:	653b      	str	r3, [r7, #80]	; 0x50
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	461a      	mov	r2, r3
 8011f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f10:	647b      	str	r3, [r7, #68]	; 0x44
 8011f12:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011f16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011f18:	e841 2300 	strex	r3, r2, [r1]
 8011f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d1e6      	bne.n	8011ef2 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	2220      	movs	r2, #32
 8011f28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	2200      	movs	r2, #0
 8011f30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011f34:	2303      	movs	r3, #3
 8011f36:	e063      	b.n	8012000 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	f003 0304 	and.w	r3, r3, #4
 8011f42:	2b04      	cmp	r3, #4
 8011f44:	d149      	bne.n	8011fda <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011f46:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011f4a:	9300      	str	r3, [sp, #0]
 8011f4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f4e:	2200      	movs	r2, #0
 8011f50:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011f54:	6878      	ldr	r0, [r7, #4]
 8011f56:	f000 f857 	bl	8012008 <UART_WaitOnFlagUntilTimeout>
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d03c      	beq.n	8011fda <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f68:	e853 3f00 	ldrex	r3, [r3]
 8011f6c:	623b      	str	r3, [r7, #32]
   return(result);
 8011f6e:	6a3b      	ldr	r3, [r7, #32]
 8011f70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011f74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	461a      	mov	r2, r3
 8011f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f7e:	633b      	str	r3, [r7, #48]	; 0x30
 8011f80:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f86:	e841 2300 	strex	r3, r2, [r1]
 8011f8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d1e6      	bne.n	8011f60 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	3308      	adds	r3, #8
 8011f98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f9a:	693b      	ldr	r3, [r7, #16]
 8011f9c:	e853 3f00 	ldrex	r3, [r3]
 8011fa0:	60fb      	str	r3, [r7, #12]
   return(result);
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	f023 0301 	bic.w	r3, r3, #1
 8011fa8:	64bb      	str	r3, [r7, #72]	; 0x48
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	3308      	adds	r3, #8
 8011fb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011fb2:	61fa      	str	r2, [r7, #28]
 8011fb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fb6:	69b9      	ldr	r1, [r7, #24]
 8011fb8:	69fa      	ldr	r2, [r7, #28]
 8011fba:	e841 2300 	strex	r3, r2, [r1]
 8011fbe:	617b      	str	r3, [r7, #20]
   return(result);
 8011fc0:	697b      	ldr	r3, [r7, #20]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d1e5      	bne.n	8011f92 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	2220      	movs	r2, #32
 8011fca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	2200      	movs	r2, #0
 8011fd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011fd6:	2303      	movs	r3, #3
 8011fd8:	e012      	b.n	8012000 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	2220      	movs	r2, #32
 8011fde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	2220      	movs	r2, #32
 8011fe6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	2200      	movs	r2, #0
 8011fee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	2200      	movs	r2, #0
 8011ffa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011ffe:	2300      	movs	r3, #0
}
 8012000:	4618      	mov	r0, r3
 8012002:	3758      	adds	r7, #88	; 0x58
 8012004:	46bd      	mov	sp, r7
 8012006:	bd80      	pop	{r7, pc}

08012008 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b084      	sub	sp, #16
 801200c:	af00      	add	r7, sp, #0
 801200e:	60f8      	str	r0, [r7, #12]
 8012010:	60b9      	str	r1, [r7, #8]
 8012012:	603b      	str	r3, [r7, #0]
 8012014:	4613      	mov	r3, r2
 8012016:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012018:	e049      	b.n	80120ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801201a:	69bb      	ldr	r3, [r7, #24]
 801201c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012020:	d045      	beq.n	80120ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012022:	f7f5 fa7f 	bl	8007524 <HAL_GetTick>
 8012026:	4602      	mov	r2, r0
 8012028:	683b      	ldr	r3, [r7, #0]
 801202a:	1ad3      	subs	r3, r2, r3
 801202c:	69ba      	ldr	r2, [r7, #24]
 801202e:	429a      	cmp	r2, r3
 8012030:	d302      	bcc.n	8012038 <UART_WaitOnFlagUntilTimeout+0x30>
 8012032:	69bb      	ldr	r3, [r7, #24]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d101      	bne.n	801203c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012038:	2303      	movs	r3, #3
 801203a:	e048      	b.n	80120ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	f003 0304 	and.w	r3, r3, #4
 8012046:	2b00      	cmp	r3, #0
 8012048:	d031      	beq.n	80120ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	69db      	ldr	r3, [r3, #28]
 8012050:	f003 0308 	and.w	r3, r3, #8
 8012054:	2b08      	cmp	r3, #8
 8012056:	d110      	bne.n	801207a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	2208      	movs	r2, #8
 801205e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012060:	68f8      	ldr	r0, [r7, #12]
 8012062:	f000 f920 	bl	80122a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	2208      	movs	r2, #8
 801206a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	2200      	movs	r2, #0
 8012072:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8012076:	2301      	movs	r3, #1
 8012078:	e029      	b.n	80120ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	69db      	ldr	r3, [r3, #28]
 8012080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012088:	d111      	bne.n	80120ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012092:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012094:	68f8      	ldr	r0, [r7, #12]
 8012096:	f000 f906 	bl	80122a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	2220      	movs	r2, #32
 801209e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	2200      	movs	r2, #0
 80120a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80120aa:	2303      	movs	r3, #3
 80120ac:	e00f      	b.n	80120ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	69da      	ldr	r2, [r3, #28]
 80120b4:	68bb      	ldr	r3, [r7, #8]
 80120b6:	4013      	ands	r3, r2
 80120b8:	68ba      	ldr	r2, [r7, #8]
 80120ba:	429a      	cmp	r2, r3
 80120bc:	bf0c      	ite	eq
 80120be:	2301      	moveq	r3, #1
 80120c0:	2300      	movne	r3, #0
 80120c2:	b2db      	uxtb	r3, r3
 80120c4:	461a      	mov	r2, r3
 80120c6:	79fb      	ldrb	r3, [r7, #7]
 80120c8:	429a      	cmp	r2, r3
 80120ca:	d0a6      	beq.n	801201a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80120cc:	2300      	movs	r3, #0
}
 80120ce:	4618      	mov	r0, r3
 80120d0:	3710      	adds	r7, #16
 80120d2:	46bd      	mov	sp, r7
 80120d4:	bd80      	pop	{r7, pc}
	...

080120d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80120d8:	b580      	push	{r7, lr}
 80120da:	b096      	sub	sp, #88	; 0x58
 80120dc:	af00      	add	r7, sp, #0
 80120de:	60f8      	str	r0, [r7, #12]
 80120e0:	60b9      	str	r1, [r7, #8]
 80120e2:	4613      	mov	r3, r2
 80120e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	68ba      	ldr	r2, [r7, #8]
 80120ea:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	88fa      	ldrh	r2, [r7, #6]
 80120f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	2200      	movs	r2, #0
 80120f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	2222      	movs	r2, #34	; 0x22
 8012100:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801210a:	2b00      	cmp	r3, #0
 801210c:	d02d      	beq.n	801216a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012114:	4a40      	ldr	r2, [pc, #256]	; (8012218 <UART_Start_Receive_DMA+0x140>)
 8012116:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801211e:	4a3f      	ldr	r2, [pc, #252]	; (801221c <UART_Start_Receive_DMA+0x144>)
 8012120:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012128:	4a3d      	ldr	r2, [pc, #244]	; (8012220 <UART_Start_Receive_DMA+0x148>)
 801212a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012132:	2200      	movs	r2, #0
 8012134:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	3324      	adds	r3, #36	; 0x24
 8012142:	4619      	mov	r1, r3
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012148:	461a      	mov	r2, r3
 801214a:	88fb      	ldrh	r3, [r7, #6]
 801214c:	f7f5 fbd4 	bl	80078f8 <HAL_DMA_Start_IT>
 8012150:	4603      	mov	r3, r0
 8012152:	2b00      	cmp	r3, #0
 8012154:	d009      	beq.n	801216a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	2210      	movs	r2, #16
 801215a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	2220      	movs	r2, #32
 8012162:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8012166:	2301      	movs	r3, #1
 8012168:	e051      	b.n	801220e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	691b      	ldr	r3, [r3, #16]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d018      	beq.n	80121a4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801217a:	e853 3f00 	ldrex	r3, [r3]
 801217e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012186:	657b      	str	r3, [r7, #84]	; 0x54
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	461a      	mov	r2, r3
 801218e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012190:	64bb      	str	r3, [r7, #72]	; 0x48
 8012192:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012194:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012196:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012198:	e841 2300 	strex	r3, r2, [r1]
 801219c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801219e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d1e6      	bne.n	8012172 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	3308      	adds	r3, #8
 80121aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121ae:	e853 3f00 	ldrex	r3, [r3]
 80121b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80121b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121b6:	f043 0301 	orr.w	r3, r3, #1
 80121ba:	653b      	str	r3, [r7, #80]	; 0x50
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	3308      	adds	r3, #8
 80121c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80121c4:	637a      	str	r2, [r7, #52]	; 0x34
 80121c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80121ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80121cc:	e841 2300 	strex	r3, r2, [r1]
 80121d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80121d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d1e5      	bne.n	80121a4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	3308      	adds	r3, #8
 80121de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121e0:	697b      	ldr	r3, [r7, #20]
 80121e2:	e853 3f00 	ldrex	r3, [r3]
 80121e6:	613b      	str	r3, [r7, #16]
   return(result);
 80121e8:	693b      	ldr	r3, [r7, #16]
 80121ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	3308      	adds	r3, #8
 80121f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80121f8:	623a      	str	r2, [r7, #32]
 80121fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121fc:	69f9      	ldr	r1, [r7, #28]
 80121fe:	6a3a      	ldr	r2, [r7, #32]
 8012200:	e841 2300 	strex	r3, r2, [r1]
 8012204:	61bb      	str	r3, [r7, #24]
   return(result);
 8012206:	69bb      	ldr	r3, [r7, #24]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d1e5      	bne.n	80121d8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 801220c:	2300      	movs	r3, #0
}
 801220e:	4618      	mov	r0, r3
 8012210:	3758      	adds	r7, #88	; 0x58
 8012212:	46bd      	mov	sp, r7
 8012214:	bd80      	pop	{r7, pc}
 8012216:	bf00      	nop
 8012218:	08012373 	.word	0x08012373
 801221c:	0801249f 	.word	0x0801249f
 8012220:	080124dd 	.word	0x080124dd

08012224 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8012224:	b480      	push	{r7}
 8012226:	b08f      	sub	sp, #60	; 0x3c
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012232:	6a3b      	ldr	r3, [r7, #32]
 8012234:	e853 3f00 	ldrex	r3, [r3]
 8012238:	61fb      	str	r3, [r7, #28]
   return(result);
 801223a:	69fb      	ldr	r3, [r7, #28]
 801223c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8012240:	637b      	str	r3, [r7, #52]	; 0x34
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	461a      	mov	r2, r3
 8012248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801224a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801224c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801224e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012252:	e841 2300 	strex	r3, r2, [r1]
 8012256:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801225a:	2b00      	cmp	r3, #0
 801225c:	d1e6      	bne.n	801222c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	3308      	adds	r3, #8
 8012264:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	e853 3f00 	ldrex	r3, [r3]
 801226c:	60bb      	str	r3, [r7, #8]
   return(result);
 801226e:	68bb      	ldr	r3, [r7, #8]
 8012270:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8012274:	633b      	str	r3, [r7, #48]	; 0x30
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	3308      	adds	r3, #8
 801227c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801227e:	61ba      	str	r2, [r7, #24]
 8012280:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012282:	6979      	ldr	r1, [r7, #20]
 8012284:	69ba      	ldr	r2, [r7, #24]
 8012286:	e841 2300 	strex	r3, r2, [r1]
 801228a:	613b      	str	r3, [r7, #16]
   return(result);
 801228c:	693b      	ldr	r3, [r7, #16]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d1e5      	bne.n	801225e <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	2220      	movs	r2, #32
 8012296:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 801229a:	bf00      	nop
 801229c:	373c      	adds	r7, #60	; 0x3c
 801229e:	46bd      	mov	sp, r7
 80122a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a4:	4770      	bx	lr

080122a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80122a6:	b480      	push	{r7}
 80122a8:	b095      	sub	sp, #84	; 0x54
 80122aa:	af00      	add	r7, sp, #0
 80122ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122b6:	e853 3f00 	ldrex	r3, [r3]
 80122ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80122bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80122c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	461a      	mov	r2, r3
 80122ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122cc:	643b      	str	r3, [r7, #64]	; 0x40
 80122ce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80122d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80122d4:	e841 2300 	strex	r3, r2, [r1]
 80122d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80122da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d1e6      	bne.n	80122ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	3308      	adds	r3, #8
 80122e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122e8:	6a3b      	ldr	r3, [r7, #32]
 80122ea:	e853 3f00 	ldrex	r3, [r3]
 80122ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80122f0:	69fb      	ldr	r3, [r7, #28]
 80122f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80122f6:	f023 0301 	bic.w	r3, r3, #1
 80122fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	3308      	adds	r3, #8
 8012302:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012304:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012306:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012308:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801230a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801230c:	e841 2300 	strex	r3, r2, [r1]
 8012310:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012314:	2b00      	cmp	r3, #0
 8012316:	d1e3      	bne.n	80122e0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801231c:	2b01      	cmp	r3, #1
 801231e:	d118      	bne.n	8012352 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	e853 3f00 	ldrex	r3, [r3]
 801232c:	60bb      	str	r3, [r7, #8]
   return(result);
 801232e:	68bb      	ldr	r3, [r7, #8]
 8012330:	f023 0310 	bic.w	r3, r3, #16
 8012334:	647b      	str	r3, [r7, #68]	; 0x44
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	461a      	mov	r2, r3
 801233c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801233e:	61bb      	str	r3, [r7, #24]
 8012340:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012342:	6979      	ldr	r1, [r7, #20]
 8012344:	69ba      	ldr	r2, [r7, #24]
 8012346:	e841 2300 	strex	r3, r2, [r1]
 801234a:	613b      	str	r3, [r7, #16]
   return(result);
 801234c:	693b      	ldr	r3, [r7, #16]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d1e6      	bne.n	8012320 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	2220      	movs	r2, #32
 8012356:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	2200      	movs	r2, #0
 801235e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	2200      	movs	r2, #0
 8012364:	675a      	str	r2, [r3, #116]	; 0x74
}
 8012366:	bf00      	nop
 8012368:	3754      	adds	r7, #84	; 0x54
 801236a:	46bd      	mov	sp, r7
 801236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012370:	4770      	bx	lr

08012372 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012372:	b580      	push	{r7, lr}
 8012374:	b09c      	sub	sp, #112	; 0x70
 8012376:	af00      	add	r7, sp, #0
 8012378:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801237e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	f003 0320 	and.w	r3, r3, #32
 801238a:	2b00      	cmp	r3, #0
 801238c:	d171      	bne.n	8012472 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 801238e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012390:	2200      	movs	r2, #0
 8012392:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801239c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801239e:	e853 3f00 	ldrex	r3, [r3]
 80123a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80123a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80123a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80123aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80123ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	461a      	mov	r2, r3
 80123b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80123b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80123b6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80123ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80123bc:	e841 2300 	strex	r3, r2, [r1]
 80123c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80123c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d1e6      	bne.n	8012396 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80123c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	3308      	adds	r3, #8
 80123ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123d2:	e853 3f00 	ldrex	r3, [r3]
 80123d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80123d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123da:	f023 0301 	bic.w	r3, r3, #1
 80123de:	667b      	str	r3, [r7, #100]	; 0x64
 80123e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	3308      	adds	r3, #8
 80123e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80123e8:	647a      	str	r2, [r7, #68]	; 0x44
 80123ea:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80123ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80123f0:	e841 2300 	strex	r3, r2, [r1]
 80123f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80123f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d1e5      	bne.n	80123c8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80123fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	3308      	adds	r3, #8
 8012402:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012406:	e853 3f00 	ldrex	r3, [r3]
 801240a:	623b      	str	r3, [r7, #32]
   return(result);
 801240c:	6a3b      	ldr	r3, [r7, #32]
 801240e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012412:	663b      	str	r3, [r7, #96]	; 0x60
 8012414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	3308      	adds	r3, #8
 801241a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801241c:	633a      	str	r2, [r7, #48]	; 0x30
 801241e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012420:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012422:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012424:	e841 2300 	strex	r3, r2, [r1]
 8012428:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801242a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801242c:	2b00      	cmp	r3, #0
 801242e:	d1e5      	bne.n	80123fc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012432:	2220      	movs	r2, #32
 8012434:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801243a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801243c:	2b01      	cmp	r3, #1
 801243e:	d118      	bne.n	8012472 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012446:	693b      	ldr	r3, [r7, #16]
 8012448:	e853 3f00 	ldrex	r3, [r3]
 801244c:	60fb      	str	r3, [r7, #12]
   return(result);
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	f023 0310 	bic.w	r3, r3, #16
 8012454:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	461a      	mov	r2, r3
 801245c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801245e:	61fb      	str	r3, [r7, #28]
 8012460:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012462:	69b9      	ldr	r1, [r7, #24]
 8012464:	69fa      	ldr	r2, [r7, #28]
 8012466:	e841 2300 	strex	r3, r2, [r1]
 801246a:	617b      	str	r3, [r7, #20]
   return(result);
 801246c:	697b      	ldr	r3, [r7, #20]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d1e6      	bne.n	8012440 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012474:	2200      	movs	r2, #0
 8012476:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801247a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801247c:	2b01      	cmp	r3, #1
 801247e:	d107      	bne.n	8012490 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012482:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012486:	4619      	mov	r1, r3
 8012488:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801248a:	f7ff f969 	bl	8011760 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801248e:	e002      	b.n	8012496 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8012490:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8012492:	f7ff f947 	bl	8011724 <HAL_UART_RxCpltCallback>
}
 8012496:	bf00      	nop
 8012498:	3770      	adds	r7, #112	; 0x70
 801249a:	46bd      	mov	sp, r7
 801249c:	bd80      	pop	{r7, pc}

0801249e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801249e:	b580      	push	{r7, lr}
 80124a0:	b084      	sub	sp, #16
 80124a2:	af00      	add	r7, sp, #0
 80124a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124aa:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	2201      	movs	r2, #1
 80124b0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124b6:	2b01      	cmp	r3, #1
 80124b8:	d109      	bne.n	80124ce <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80124c0:	085b      	lsrs	r3, r3, #1
 80124c2:	b29b      	uxth	r3, r3
 80124c4:	4619      	mov	r1, r3
 80124c6:	68f8      	ldr	r0, [r7, #12]
 80124c8:	f7ff f94a 	bl	8011760 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80124cc:	e002      	b.n	80124d4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80124ce:	68f8      	ldr	r0, [r7, #12]
 80124d0:	f7ff f932 	bl	8011738 <HAL_UART_RxHalfCpltCallback>
}
 80124d4:	bf00      	nop
 80124d6:	3710      	adds	r7, #16
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}

080124dc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b086      	sub	sp, #24
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124e8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80124ea:	697b      	ldr	r3, [r7, #20]
 80124ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80124f0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80124f2:	697b      	ldr	r3, [r7, #20]
 80124f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80124f8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80124fa:	697b      	ldr	r3, [r7, #20]
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	689b      	ldr	r3, [r3, #8]
 8012500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012504:	2b80      	cmp	r3, #128	; 0x80
 8012506:	d109      	bne.n	801251c <UART_DMAError+0x40>
 8012508:	693b      	ldr	r3, [r7, #16]
 801250a:	2b21      	cmp	r3, #33	; 0x21
 801250c:	d106      	bne.n	801251c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801250e:	697b      	ldr	r3, [r7, #20]
 8012510:	2200      	movs	r2, #0
 8012512:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8012516:	6978      	ldr	r0, [r7, #20]
 8012518:	f7ff fe84 	bl	8012224 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801251c:	697b      	ldr	r3, [r7, #20]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	689b      	ldr	r3, [r3, #8]
 8012522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012526:	2b40      	cmp	r3, #64	; 0x40
 8012528:	d109      	bne.n	801253e <UART_DMAError+0x62>
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	2b22      	cmp	r3, #34	; 0x22
 801252e:	d106      	bne.n	801253e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8012530:	697b      	ldr	r3, [r7, #20]
 8012532:	2200      	movs	r2, #0
 8012534:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8012538:	6978      	ldr	r0, [r7, #20]
 801253a:	f7ff feb4 	bl	80122a6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801253e:	697b      	ldr	r3, [r7, #20]
 8012540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012544:	f043 0210 	orr.w	r2, r3, #16
 8012548:	697b      	ldr	r3, [r7, #20]
 801254a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801254e:	6978      	ldr	r0, [r7, #20]
 8012550:	f7ff f8fc 	bl	801174c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012554:	bf00      	nop
 8012556:	3718      	adds	r7, #24
 8012558:	46bd      	mov	sp, r7
 801255a:	bd80      	pop	{r7, pc}

0801255c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b084      	sub	sp, #16
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012568:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	2200      	movs	r2, #0
 801256e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	2200      	movs	r2, #0
 8012576:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801257a:	68f8      	ldr	r0, [r7, #12]
 801257c:	f7ff f8e6 	bl	801174c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012580:	bf00      	nop
 8012582:	3710      	adds	r7, #16
 8012584:	46bd      	mov	sp, r7
 8012586:	bd80      	pop	{r7, pc}

08012588 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b088      	sub	sp, #32
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	e853 3f00 	ldrex	r3, [r3]
 801259c:	60bb      	str	r3, [r7, #8]
   return(result);
 801259e:	68bb      	ldr	r3, [r7, #8]
 80125a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80125a4:	61fb      	str	r3, [r7, #28]
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	461a      	mov	r2, r3
 80125ac:	69fb      	ldr	r3, [r7, #28]
 80125ae:	61bb      	str	r3, [r7, #24]
 80125b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125b2:	6979      	ldr	r1, [r7, #20]
 80125b4:	69ba      	ldr	r2, [r7, #24]
 80125b6:	e841 2300 	strex	r3, r2, [r1]
 80125ba:	613b      	str	r3, [r7, #16]
   return(result);
 80125bc:	693b      	ldr	r3, [r7, #16]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d1e6      	bne.n	8012590 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	2220      	movs	r2, #32
 80125c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	2200      	movs	r2, #0
 80125ce:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80125d0:	6878      	ldr	r0, [r7, #4]
 80125d2:	f7ff f89d 	bl	8011710 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80125d6:	bf00      	nop
 80125d8:	3720      	adds	r7, #32
 80125da:	46bd      	mov	sp, r7
 80125dc:	bd80      	pop	{r7, pc}

080125de <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80125de:	b480      	push	{r7}
 80125e0:	b083      	sub	sp, #12
 80125e2:	af00      	add	r7, sp, #0
 80125e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80125e6:	bf00      	nop
 80125e8:	370c      	adds	r7, #12
 80125ea:	46bd      	mov	sp, r7
 80125ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f0:	4770      	bx	lr

080125f2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80125f2:	b480      	push	{r7}
 80125f4:	b083      	sub	sp, #12
 80125f6:	af00      	add	r7, sp, #0
 80125f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80125fa:	bf00      	nop
 80125fc:	370c      	adds	r7, #12
 80125fe:	46bd      	mov	sp, r7
 8012600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012604:	4770      	bx	lr

08012606 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012606:	b480      	push	{r7}
 8012608:	b083      	sub	sp, #12
 801260a:	af00      	add	r7, sp, #0
 801260c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801260e:	bf00      	nop
 8012610:	370c      	adds	r7, #12
 8012612:	46bd      	mov	sp, r7
 8012614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012618:	4770      	bx	lr

0801261a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801261a:	b480      	push	{r7}
 801261c:	b085      	sub	sp, #20
 801261e:	af00      	add	r7, sp, #0
 8012620:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012628:	2b01      	cmp	r3, #1
 801262a:	d101      	bne.n	8012630 <HAL_UARTEx_DisableFifoMode+0x16>
 801262c:	2302      	movs	r3, #2
 801262e:	e027      	b.n	8012680 <HAL_UARTEx_DisableFifoMode+0x66>
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	2201      	movs	r2, #1
 8012634:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	2224      	movs	r2, #36	; 0x24
 801263c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	681a      	ldr	r2, [r3, #0]
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	f022 0201 	bic.w	r2, r2, #1
 8012656:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801265e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	2200      	movs	r2, #0
 8012664:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	68fa      	ldr	r2, [r7, #12]
 801266c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	2220      	movs	r2, #32
 8012672:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	2200      	movs	r2, #0
 801267a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801267e:	2300      	movs	r3, #0
}
 8012680:	4618      	mov	r0, r3
 8012682:	3714      	adds	r7, #20
 8012684:	46bd      	mov	sp, r7
 8012686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801268a:	4770      	bx	lr

0801268c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801268c:	b580      	push	{r7, lr}
 801268e:	b084      	sub	sp, #16
 8012690:	af00      	add	r7, sp, #0
 8012692:	6078      	str	r0, [r7, #4]
 8012694:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801269c:	2b01      	cmp	r3, #1
 801269e:	d101      	bne.n	80126a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80126a0:	2302      	movs	r3, #2
 80126a2:	e02d      	b.n	8012700 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	2201      	movs	r2, #1
 80126a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	2224      	movs	r2, #36	; 0x24
 80126b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	681a      	ldr	r2, [r3, #0]
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	f022 0201 	bic.w	r2, r2, #1
 80126ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	689b      	ldr	r3, [r3, #8]
 80126d2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	683a      	ldr	r2, [r7, #0]
 80126dc:	430a      	orrs	r2, r1
 80126de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80126e0:	6878      	ldr	r0, [r7, #4]
 80126e2:	f000 f84f 	bl	8012784 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	68fa      	ldr	r2, [r7, #12]
 80126ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	2220      	movs	r2, #32
 80126f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	2200      	movs	r2, #0
 80126fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80126fe:	2300      	movs	r3, #0
}
 8012700:	4618      	mov	r0, r3
 8012702:	3710      	adds	r7, #16
 8012704:	46bd      	mov	sp, r7
 8012706:	bd80      	pop	{r7, pc}

08012708 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012708:	b580      	push	{r7, lr}
 801270a:	b084      	sub	sp, #16
 801270c:	af00      	add	r7, sp, #0
 801270e:	6078      	str	r0, [r7, #4]
 8012710:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012718:	2b01      	cmp	r3, #1
 801271a:	d101      	bne.n	8012720 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801271c:	2302      	movs	r3, #2
 801271e:	e02d      	b.n	801277c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	2201      	movs	r2, #1
 8012724:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	2224      	movs	r2, #36	; 0x24
 801272c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	681a      	ldr	r2, [r3, #0]
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	f022 0201 	bic.w	r2, r2, #1
 8012746:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	689b      	ldr	r3, [r3, #8]
 801274e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	683a      	ldr	r2, [r7, #0]
 8012758:	430a      	orrs	r2, r1
 801275a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801275c:	6878      	ldr	r0, [r7, #4]
 801275e:	f000 f811 	bl	8012784 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	68fa      	ldr	r2, [r7, #12]
 8012768:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	2220      	movs	r2, #32
 801276e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	2200      	movs	r2, #0
 8012776:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801277a:	2300      	movs	r3, #0
}
 801277c:	4618      	mov	r0, r3
 801277e:	3710      	adds	r7, #16
 8012780:	46bd      	mov	sp, r7
 8012782:	bd80      	pop	{r7, pc}

08012784 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012784:	b480      	push	{r7}
 8012786:	b085      	sub	sp, #20
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012790:	2b00      	cmp	r3, #0
 8012792:	d108      	bne.n	80127a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	2201      	movs	r2, #1
 8012798:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	2201      	movs	r2, #1
 80127a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80127a4:	e031      	b.n	801280a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80127a6:	2308      	movs	r3, #8
 80127a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80127aa:	2308      	movs	r3, #8
 80127ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	689b      	ldr	r3, [r3, #8]
 80127b4:	0e5b      	lsrs	r3, r3, #25
 80127b6:	b2db      	uxtb	r3, r3
 80127b8:	f003 0307 	and.w	r3, r3, #7
 80127bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	689b      	ldr	r3, [r3, #8]
 80127c4:	0f5b      	lsrs	r3, r3, #29
 80127c6:	b2db      	uxtb	r3, r3
 80127c8:	f003 0307 	and.w	r3, r3, #7
 80127cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80127ce:	7bbb      	ldrb	r3, [r7, #14]
 80127d0:	7b3a      	ldrb	r2, [r7, #12]
 80127d2:	4911      	ldr	r1, [pc, #68]	; (8012818 <UARTEx_SetNbDataToProcess+0x94>)
 80127d4:	5c8a      	ldrb	r2, [r1, r2]
 80127d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80127da:	7b3a      	ldrb	r2, [r7, #12]
 80127dc:	490f      	ldr	r1, [pc, #60]	; (801281c <UARTEx_SetNbDataToProcess+0x98>)
 80127de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80127e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80127e4:	b29a      	uxth	r2, r3
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80127ec:	7bfb      	ldrb	r3, [r7, #15]
 80127ee:	7b7a      	ldrb	r2, [r7, #13]
 80127f0:	4909      	ldr	r1, [pc, #36]	; (8012818 <UARTEx_SetNbDataToProcess+0x94>)
 80127f2:	5c8a      	ldrb	r2, [r1, r2]
 80127f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80127f8:	7b7a      	ldrb	r2, [r7, #13]
 80127fa:	4908      	ldr	r1, [pc, #32]	; (801281c <UARTEx_SetNbDataToProcess+0x98>)
 80127fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80127fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8012802:	b29a      	uxth	r2, r3
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801280a:	bf00      	nop
 801280c:	3714      	adds	r7, #20
 801280e:	46bd      	mov	sp, r7
 8012810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012814:	4770      	bx	lr
 8012816:	bf00      	nop
 8012818:	0801d190 	.word	0x0801d190
 801281c:	0801d198 	.word	0x0801d198

08012820 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012820:	b084      	sub	sp, #16
 8012822:	b480      	push	{r7}
 8012824:	b085      	sub	sp, #20
 8012826:	af00      	add	r7, sp, #0
 8012828:	6078      	str	r0, [r7, #4]
 801282a:	f107 001c 	add.w	r0, r7, #28
 801282e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012832:	2300      	movs	r3, #0
 8012834:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8012836:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8012838:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 801283a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 801283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 801283e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8012840:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8012842:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8012846:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8012848:	68fa      	ldr	r2, [r7, #12]
 801284a:	4313      	orrs	r3, r2
 801284c:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	685a      	ldr	r2, [r3, #4]
 8012852:	4b07      	ldr	r3, [pc, #28]	; (8012870 <SDMMC_Init+0x50>)
 8012854:	4013      	ands	r3, r2
 8012856:	68fa      	ldr	r2, [r7, #12]
 8012858:	431a      	orrs	r2, r3
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801285e:	2300      	movs	r3, #0
}
 8012860:	4618      	mov	r0, r3
 8012862:	3714      	adds	r7, #20
 8012864:	46bd      	mov	sp, r7
 8012866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286a:	b004      	add	sp, #16
 801286c:	4770      	bx	lr
 801286e:	bf00      	nop
 8012870:	ffc02c00 	.word	0xffc02c00

08012874 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8012874:	b480      	push	{r7}
 8012876:	b083      	sub	sp, #12
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8012882:	4618      	mov	r0, r3
 8012884:	370c      	adds	r7, #12
 8012886:	46bd      	mov	sp, r7
 8012888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288c:	4770      	bx	lr

0801288e <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 801288e:	b480      	push	{r7}
 8012890:	b083      	sub	sp, #12
 8012892:	af00      	add	r7, sp, #0
 8012894:	6078      	str	r0, [r7, #4]
 8012896:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8012898:	683b      	ldr	r3, [r7, #0]
 801289a:	681a      	ldr	r2, [r3, #0]
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80128a2:	2300      	movs	r3, #0
}
 80128a4:	4618      	mov	r0, r3
 80128a6:	370c      	adds	r7, #12
 80128a8:	46bd      	mov	sp, r7
 80128aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ae:	4770      	bx	lr

080128b0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b082      	sub	sp, #8
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	f043 0203 	orr.w	r2, r3, #3
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80128c4:	2002      	movs	r0, #2
 80128c6:	f7f4 fe39 	bl	800753c <HAL_Delay>

  return HAL_OK;
 80128ca:	2300      	movs	r3, #0
}
 80128cc:	4618      	mov	r0, r3
 80128ce:	3708      	adds	r7, #8
 80128d0:	46bd      	mov	sp, r7
 80128d2:	bd80      	pop	{r7, pc}

080128d4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80128d4:	b480      	push	{r7}
 80128d6:	b083      	sub	sp, #12
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	f003 0303 	and.w	r3, r3, #3
}
 80128e4:	4618      	mov	r0, r3
 80128e6:	370c      	adds	r7, #12
 80128e8:	46bd      	mov	sp, r7
 80128ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ee:	4770      	bx	lr

080128f0 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80128f0:	b480      	push	{r7}
 80128f2:	b085      	sub	sp, #20
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]
 80128f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80128fa:	2300      	movs	r3, #0
 80128fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80128fe:	683b      	ldr	r3, [r7, #0]
 8012900:	681a      	ldr	r2, [r3, #0]
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012906:	683b      	ldr	r3, [r7, #0]
 8012908:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 801290a:	683b      	ldr	r3, [r7, #0]
 801290c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801290e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8012910:	683b      	ldr	r3, [r7, #0]
 8012912:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8012914:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012916:	683b      	ldr	r3, [r7, #0]
 8012918:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801291a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801291c:	68fa      	ldr	r2, [r7, #12]
 801291e:	4313      	orrs	r3, r2
 8012920:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	68da      	ldr	r2, [r3, #12]
 8012926:	4b06      	ldr	r3, [pc, #24]	; (8012940 <SDMMC_SendCommand+0x50>)
 8012928:	4013      	ands	r3, r2
 801292a:	68fa      	ldr	r2, [r7, #12]
 801292c:	431a      	orrs	r2, r3
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012932:	2300      	movs	r3, #0
}
 8012934:	4618      	mov	r0, r3
 8012936:	3714      	adds	r7, #20
 8012938:	46bd      	mov	sp, r7
 801293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293e:	4770      	bx	lr
 8012940:	fffee0c0 	.word	0xfffee0c0

08012944 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012944:	b480      	push	{r7}
 8012946:	b083      	sub	sp, #12
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	691b      	ldr	r3, [r3, #16]
 8012950:	b2db      	uxtb	r3, r3
}
 8012952:	4618      	mov	r0, r3
 8012954:	370c      	adds	r7, #12
 8012956:	46bd      	mov	sp, r7
 8012958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295c:	4770      	bx	lr

0801295e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801295e:	b480      	push	{r7}
 8012960:	b085      	sub	sp, #20
 8012962:	af00      	add	r7, sp, #0
 8012964:	6078      	str	r0, [r7, #4]
 8012966:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	3314      	adds	r3, #20
 801296c:	461a      	mov	r2, r3
 801296e:	683b      	ldr	r3, [r7, #0]
 8012970:	4413      	add	r3, r2
 8012972:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	681b      	ldr	r3, [r3, #0]
}
 8012978:	4618      	mov	r0, r3
 801297a:	3714      	adds	r7, #20
 801297c:	46bd      	mov	sp, r7
 801297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012982:	4770      	bx	lr

08012984 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8012984:	b480      	push	{r7}
 8012986:	b085      	sub	sp, #20
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
 801298c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801298e:	2300      	movs	r3, #0
 8012990:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012992:	683b      	ldr	r3, [r7, #0]
 8012994:	681a      	ldr	r2, [r3, #0]
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801299a:	683b      	ldr	r3, [r7, #0]
 801299c:	685a      	ldr	r2, [r3, #4]
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80129a2:	683b      	ldr	r3, [r7, #0]
 80129a4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80129a6:	683b      	ldr	r3, [r7, #0]
 80129a8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80129aa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80129ac:	683b      	ldr	r3, [r7, #0]
 80129ae:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80129b0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80129b2:	683b      	ldr	r3, [r7, #0]
 80129b4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80129b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80129b8:	68fa      	ldr	r2, [r7, #12]
 80129ba:	4313      	orrs	r3, r2
 80129bc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	431a      	orrs	r2, r3
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80129ce:	2300      	movs	r3, #0

}
 80129d0:	4618      	mov	r0, r3
 80129d2:	3714      	adds	r7, #20
 80129d4:	46bd      	mov	sp, r7
 80129d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129da:	4770      	bx	lr

080129dc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80129dc:	b580      	push	{r7, lr}
 80129de:	b088      	sub	sp, #32
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	6078      	str	r0, [r7, #4]
 80129e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80129e6:	683b      	ldr	r3, [r7, #0]
 80129e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80129ea:	2310      	movs	r3, #16
 80129ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80129ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80129f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80129f4:	2300      	movs	r3, #0
 80129f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80129f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80129fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80129fe:	f107 0308 	add.w	r3, r7, #8
 8012a02:	4619      	mov	r1, r3
 8012a04:	6878      	ldr	r0, [r7, #4]
 8012a06:	f7ff ff73 	bl	80128f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8012a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a0e:	2110      	movs	r1, #16
 8012a10:	6878      	ldr	r0, [r7, #4]
 8012a12:	f000 fa7b 	bl	8012f0c <SDMMC_GetCmdResp1>
 8012a16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012a18:	69fb      	ldr	r3, [r7, #28]
}
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	3720      	adds	r7, #32
 8012a1e:	46bd      	mov	sp, r7
 8012a20:	bd80      	pop	{r7, pc}

08012a22 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012a22:	b580      	push	{r7, lr}
 8012a24:	b088      	sub	sp, #32
 8012a26:	af00      	add	r7, sp, #0
 8012a28:	6078      	str	r0, [r7, #4]
 8012a2a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012a2c:	683b      	ldr	r3, [r7, #0]
 8012a2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012a30:	2311      	movs	r3, #17
 8012a32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012a34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012a38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012a3a:	2300      	movs	r3, #0
 8012a3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012a3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012a44:	f107 0308 	add.w	r3, r7, #8
 8012a48:	4619      	mov	r1, r3
 8012a4a:	6878      	ldr	r0, [r7, #4]
 8012a4c:	f7ff ff50 	bl	80128f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a54:	2111      	movs	r1, #17
 8012a56:	6878      	ldr	r0, [r7, #4]
 8012a58:	f000 fa58 	bl	8012f0c <SDMMC_GetCmdResp1>
 8012a5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012a5e:	69fb      	ldr	r3, [r7, #28]
}
 8012a60:	4618      	mov	r0, r3
 8012a62:	3720      	adds	r7, #32
 8012a64:	46bd      	mov	sp, r7
 8012a66:	bd80      	pop	{r7, pc}

08012a68 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b088      	sub	sp, #32
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	6078      	str	r0, [r7, #4]
 8012a70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012a72:	683b      	ldr	r3, [r7, #0]
 8012a74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8012a76:	2312      	movs	r3, #18
 8012a78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012a7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012a80:	2300      	movs	r3, #0
 8012a82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012a8a:	f107 0308 	add.w	r3, r7, #8
 8012a8e:	4619      	mov	r1, r3
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	f7ff ff2d 	bl	80128f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a9a:	2112      	movs	r1, #18
 8012a9c:	6878      	ldr	r0, [r7, #4]
 8012a9e:	f000 fa35 	bl	8012f0c <SDMMC_GetCmdResp1>
 8012aa2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012aa4:	69fb      	ldr	r3, [r7, #28]
}
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	3720      	adds	r7, #32
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	bd80      	pop	{r7, pc}

08012aae <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012aae:	b580      	push	{r7, lr}
 8012ab0:	b088      	sub	sp, #32
 8012ab2:	af00      	add	r7, sp, #0
 8012ab4:	6078      	str	r0, [r7, #4]
 8012ab6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012ab8:	683b      	ldr	r3, [r7, #0]
 8012aba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8012abc:	2318      	movs	r3, #24
 8012abe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012ac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012ac4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012aca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012ace:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012ad0:	f107 0308 	add.w	r3, r7, #8
 8012ad4:	4619      	mov	r1, r3
 8012ad6:	6878      	ldr	r0, [r7, #4]
 8012ad8:	f7ff ff0a 	bl	80128f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ae0:	2118      	movs	r1, #24
 8012ae2:	6878      	ldr	r0, [r7, #4]
 8012ae4:	f000 fa12 	bl	8012f0c <SDMMC_GetCmdResp1>
 8012ae8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012aea:	69fb      	ldr	r3, [r7, #28]
}
 8012aec:	4618      	mov	r0, r3
 8012aee:	3720      	adds	r7, #32
 8012af0:	46bd      	mov	sp, r7
 8012af2:	bd80      	pop	{r7, pc}

08012af4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b088      	sub	sp, #32
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	6078      	str	r0, [r7, #4]
 8012afc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012afe:	683b      	ldr	r3, [r7, #0]
 8012b00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012b02:	2319      	movs	r3, #25
 8012b04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012b06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012b0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012b14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012b16:	f107 0308 	add.w	r3, r7, #8
 8012b1a:	4619      	mov	r1, r3
 8012b1c:	6878      	ldr	r0, [r7, #4]
 8012b1e:	f7ff fee7 	bl	80128f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8012b26:	2119      	movs	r1, #25
 8012b28:	6878      	ldr	r0, [r7, #4]
 8012b2a:	f000 f9ef 	bl	8012f0c <SDMMC_GetCmdResp1>
 8012b2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012b30:	69fb      	ldr	r3, [r7, #28]
}
 8012b32:	4618      	mov	r0, r3
 8012b34:	3720      	adds	r7, #32
 8012b36:	46bd      	mov	sp, r7
 8012b38:	bd80      	pop	{r7, pc}
	...

08012b3c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b088      	sub	sp, #32
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012b44:	2300      	movs	r3, #0
 8012b46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012b48:	230c      	movs	r3, #12
 8012b4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012b4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012b50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012b52:	2300      	movs	r3, #0
 8012b54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012b5a:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	68db      	ldr	r3, [r3, #12]
 8012b60:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	68db      	ldr	r3, [r3, #12]
 8012b6c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012b74:	f107 0308 	add.w	r3, r7, #8
 8012b78:	4619      	mov	r1, r3
 8012b7a:	6878      	ldr	r0, [r7, #4]
 8012b7c:	f7ff feb8 	bl	80128f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8012b80:	4a08      	ldr	r2, [pc, #32]	; (8012ba4 <SDMMC_CmdStopTransfer+0x68>)
 8012b82:	210c      	movs	r1, #12
 8012b84:	6878      	ldr	r0, [r7, #4]
 8012b86:	f000 f9c1 	bl	8012f0c <SDMMC_GetCmdResp1>
 8012b8a:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	68db      	ldr	r3, [r3, #12]
 8012b90:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8012b98:	69fb      	ldr	r3, [r7, #28]
}
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	3720      	adds	r7, #32
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	bd80      	pop	{r7, pc}
 8012ba2:	bf00      	nop
 8012ba4:	05f5e100 	.word	0x05f5e100

08012ba8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	b08a      	sub	sp, #40	; 0x28
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	60f8      	str	r0, [r7, #12]
 8012bb0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012bb4:	683b      	ldr	r3, [r7, #0]
 8012bb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8012bb8:	2307      	movs	r3, #7
 8012bba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012bbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012bc0:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012bc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012bca:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012bcc:	f107 0310 	add.w	r3, r7, #16
 8012bd0:	4619      	mov	r1, r3
 8012bd2:	68f8      	ldr	r0, [r7, #12]
 8012bd4:	f7ff fe8c 	bl	80128f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8012bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8012bdc:	2107      	movs	r1, #7
 8012bde:	68f8      	ldr	r0, [r7, #12]
 8012be0:	f000 f994 	bl	8012f0c <SDMMC_GetCmdResp1>
 8012be4:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8012be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012be8:	4618      	mov	r0, r3
 8012bea:	3728      	adds	r7, #40	; 0x28
 8012bec:	46bd      	mov	sp, r7
 8012bee:	bd80      	pop	{r7, pc}

08012bf0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8012bf0:	b580      	push	{r7, lr}
 8012bf2:	b088      	sub	sp, #32
 8012bf4:	af00      	add	r7, sp, #0
 8012bf6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8012c00:	2300      	movs	r3, #0
 8012c02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012c04:	2300      	movs	r3, #0
 8012c06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012c0c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c0e:	f107 0308 	add.w	r3, r7, #8
 8012c12:	4619      	mov	r1, r3
 8012c14:	6878      	ldr	r0, [r7, #4]
 8012c16:	f7ff fe6b 	bl	80128f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012c1a:	6878      	ldr	r0, [r7, #4]
 8012c1c:	f000 fbb8 	bl	8013390 <SDMMC_GetCmdError>
 8012c20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012c22:	69fb      	ldr	r3, [r7, #28]
}
 8012c24:	4618      	mov	r0, r3
 8012c26:	3720      	adds	r7, #32
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	bd80      	pop	{r7, pc}

08012c2c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b088      	sub	sp, #32
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8012c34:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8012c38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012c3a:	2308      	movs	r3, #8
 8012c3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012c3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012c42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012c44:	2300      	movs	r3, #0
 8012c46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012c4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c4e:	f107 0308 	add.w	r3, r7, #8
 8012c52:	4619      	mov	r1, r3
 8012c54:	6878      	ldr	r0, [r7, #4]
 8012c56:	f7ff fe4b 	bl	80128f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8012c5a:	6878      	ldr	r0, [r7, #4]
 8012c5c:	f000 fb4a 	bl	80132f4 <SDMMC_GetCmdResp7>
 8012c60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012c62:	69fb      	ldr	r3, [r7, #28]
}
 8012c64:	4618      	mov	r0, r3
 8012c66:	3720      	adds	r7, #32
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	bd80      	pop	{r7, pc}

08012c6c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b088      	sub	sp, #32
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
 8012c74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012c76:	683b      	ldr	r3, [r7, #0]
 8012c78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8012c7a:	2337      	movs	r3, #55	; 0x37
 8012c7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012c7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012c82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012c84:	2300      	movs	r3, #0
 8012c86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012c8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c8e:	f107 0308 	add.w	r3, r7, #8
 8012c92:	4619      	mov	r1, r3
 8012c94:	6878      	ldr	r0, [r7, #4]
 8012c96:	f7ff fe2b 	bl	80128f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8012c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c9e:	2137      	movs	r1, #55	; 0x37
 8012ca0:	6878      	ldr	r0, [r7, #4]
 8012ca2:	f000 f933 	bl	8012f0c <SDMMC_GetCmdResp1>
 8012ca6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ca8:	69fb      	ldr	r3, [r7, #28]
}
 8012caa:	4618      	mov	r0, r3
 8012cac:	3720      	adds	r7, #32
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	bd80      	pop	{r7, pc}

08012cb2 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012cb2:	b580      	push	{r7, lr}
 8012cb4:	b088      	sub	sp, #32
 8012cb6:	af00      	add	r7, sp, #0
 8012cb8:	6078      	str	r0, [r7, #4]
 8012cba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8012cbc:	683b      	ldr	r3, [r7, #0]
 8012cbe:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012cc0:	2329      	movs	r3, #41	; 0x29
 8012cc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012cc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012cc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012cca:	2300      	movs	r3, #0
 8012ccc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012cd2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012cd4:	f107 0308 	add.w	r3, r7, #8
 8012cd8:	4619      	mov	r1, r3
 8012cda:	6878      	ldr	r0, [r7, #4]
 8012cdc:	f7ff fe08 	bl	80128f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8012ce0:	6878      	ldr	r0, [r7, #4]
 8012ce2:	f000 fa4f 	bl	8013184 <SDMMC_GetCmdResp3>
 8012ce6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ce8:	69fb      	ldr	r3, [r7, #28]
}
 8012cea:	4618      	mov	r0, r3
 8012cec:	3720      	adds	r7, #32
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	bd80      	pop	{r7, pc}

08012cf2 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012cf2:	b580      	push	{r7, lr}
 8012cf4:	b088      	sub	sp, #32
 8012cf6:	af00      	add	r7, sp, #0
 8012cf8:	6078      	str	r0, [r7, #4]
 8012cfa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012cfc:	683b      	ldr	r3, [r7, #0]
 8012cfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012d00:	2306      	movs	r3, #6
 8012d02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012d04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012d08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012d0a:	2300      	movs	r3, #0
 8012d0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012d12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012d14:	f107 0308 	add.w	r3, r7, #8
 8012d18:	4619      	mov	r1, r3
 8012d1a:	6878      	ldr	r0, [r7, #4]
 8012d1c:	f7ff fde8 	bl	80128f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8012d24:	2106      	movs	r1, #6
 8012d26:	6878      	ldr	r0, [r7, #4]
 8012d28:	f000 f8f0 	bl	8012f0c <SDMMC_GetCmdResp1>
 8012d2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012d2e:	69fb      	ldr	r3, [r7, #28]
}
 8012d30:	4618      	mov	r0, r3
 8012d32:	3720      	adds	r7, #32
 8012d34:	46bd      	mov	sp, r7
 8012d36:	bd80      	pop	{r7, pc}

08012d38 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b088      	sub	sp, #32
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012d40:	2300      	movs	r3, #0
 8012d42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012d44:	2333      	movs	r3, #51	; 0x33
 8012d46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012d48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012d4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012d4e:	2300      	movs	r3, #0
 8012d50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012d52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012d56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012d58:	f107 0308 	add.w	r3, r7, #8
 8012d5c:	4619      	mov	r1, r3
 8012d5e:	6878      	ldr	r0, [r7, #4]
 8012d60:	f7ff fdc6 	bl	80128f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8012d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8012d68:	2133      	movs	r1, #51	; 0x33
 8012d6a:	6878      	ldr	r0, [r7, #4]
 8012d6c:	f000 f8ce 	bl	8012f0c <SDMMC_GetCmdResp1>
 8012d70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012d72:	69fb      	ldr	r3, [r7, #28]
}
 8012d74:	4618      	mov	r0, r3
 8012d76:	3720      	adds	r7, #32
 8012d78:	46bd      	mov	sp, r7
 8012d7a:	bd80      	pop	{r7, pc}

08012d7c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b088      	sub	sp, #32
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8012d84:	2300      	movs	r3, #0
 8012d86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012d88:	2302      	movs	r3, #2
 8012d8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012d8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012d90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012d92:	2300      	movs	r3, #0
 8012d94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012d9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012d9c:	f107 0308 	add.w	r3, r7, #8
 8012da0:	4619      	mov	r1, r3
 8012da2:	6878      	ldr	r0, [r7, #4]
 8012da4:	f7ff fda4 	bl	80128f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012da8:	6878      	ldr	r0, [r7, #4]
 8012daa:	f000 f9a1 	bl	80130f0 <SDMMC_GetCmdResp2>
 8012dae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012db0:	69fb      	ldr	r3, [r7, #28]
}
 8012db2:	4618      	mov	r0, r3
 8012db4:	3720      	adds	r7, #32
 8012db6:	46bd      	mov	sp, r7
 8012db8:	bd80      	pop	{r7, pc}

08012dba <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012dba:	b580      	push	{r7, lr}
 8012dbc:	b088      	sub	sp, #32
 8012dbe:	af00      	add	r7, sp, #0
 8012dc0:	6078      	str	r0, [r7, #4]
 8012dc2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012dc4:	683b      	ldr	r3, [r7, #0]
 8012dc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012dc8:	2309      	movs	r3, #9
 8012dca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012dcc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012dd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012dda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012ddc:	f107 0308 	add.w	r3, r7, #8
 8012de0:	4619      	mov	r1, r3
 8012de2:	6878      	ldr	r0, [r7, #4]
 8012de4:	f7ff fd84 	bl	80128f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012de8:	6878      	ldr	r0, [r7, #4]
 8012dea:	f000 f981 	bl	80130f0 <SDMMC_GetCmdResp2>
 8012dee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012df0:	69fb      	ldr	r3, [r7, #28]
}
 8012df2:	4618      	mov	r0, r3
 8012df4:	3720      	adds	r7, #32
 8012df6:	46bd      	mov	sp, r7
 8012df8:	bd80      	pop	{r7, pc}

08012dfa <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012dfa:	b580      	push	{r7, lr}
 8012dfc:	b088      	sub	sp, #32
 8012dfe:	af00      	add	r7, sp, #0
 8012e00:	6078      	str	r0, [r7, #4]
 8012e02:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012e04:	2300      	movs	r3, #0
 8012e06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012e08:	2303      	movs	r3, #3
 8012e0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012e0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012e10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012e12:	2300      	movs	r3, #0
 8012e14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012e1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012e1c:	f107 0308 	add.w	r3, r7, #8
 8012e20:	4619      	mov	r1, r3
 8012e22:	6878      	ldr	r0, [r7, #4]
 8012e24:	f7ff fd64 	bl	80128f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8012e28:	683a      	ldr	r2, [r7, #0]
 8012e2a:	2103      	movs	r1, #3
 8012e2c:	6878      	ldr	r0, [r7, #4]
 8012e2e:	f000 f9e9 	bl	8013204 <SDMMC_GetCmdResp6>
 8012e32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012e34:	69fb      	ldr	r3, [r7, #28]
}
 8012e36:	4618      	mov	r0, r3
 8012e38:	3720      	adds	r7, #32
 8012e3a:	46bd      	mov	sp, r7
 8012e3c:	bd80      	pop	{r7, pc}

08012e3e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012e3e:	b580      	push	{r7, lr}
 8012e40:	b088      	sub	sp, #32
 8012e42:	af00      	add	r7, sp, #0
 8012e44:	6078      	str	r0, [r7, #4]
 8012e46:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012e48:	683b      	ldr	r3, [r7, #0]
 8012e4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8012e4c:	230d      	movs	r3, #13
 8012e4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012e50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012e54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012e56:	2300      	movs	r3, #0
 8012e58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012e5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012e5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012e60:	f107 0308 	add.w	r3, r7, #8
 8012e64:	4619      	mov	r1, r3
 8012e66:	6878      	ldr	r0, [r7, #4]
 8012e68:	f7ff fd42 	bl	80128f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8012e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e70:	210d      	movs	r1, #13
 8012e72:	6878      	ldr	r0, [r7, #4]
 8012e74:	f000 f84a 	bl	8012f0c <SDMMC_GetCmdResp1>
 8012e78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012e7a:	69fb      	ldr	r3, [r7, #28]
}
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	3720      	adds	r7, #32
 8012e80:	46bd      	mov	sp, r7
 8012e82:	bd80      	pop	{r7, pc}

08012e84 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8012e84:	b580      	push	{r7, lr}
 8012e86:	b088      	sub	sp, #32
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8012e90:	230d      	movs	r3, #13
 8012e92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012e94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012e98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012ea2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012ea4:	f107 0308 	add.w	r3, r7, #8
 8012ea8:	4619      	mov	r1, r3
 8012eaa:	6878      	ldr	r0, [r7, #4]
 8012eac:	f7ff fd20 	bl	80128f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8012eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8012eb4:	210d      	movs	r1, #13
 8012eb6:	6878      	ldr	r0, [r7, #4]
 8012eb8:	f000 f828 	bl	8012f0c <SDMMC_GetCmdResp1>
 8012ebc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ebe:	69fb      	ldr	r3, [r7, #28]
}
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	3720      	adds	r7, #32
 8012ec4:	46bd      	mov	sp, r7
 8012ec6:	bd80      	pop	{r7, pc}

08012ec8 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b088      	sub	sp, #32
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8012ed4:	230b      	movs	r3, #11
 8012ed6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012ed8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012edc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012ede:	2300      	movs	r3, #0
 8012ee0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012ee6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012ee8:	f107 0308 	add.w	r3, r7, #8
 8012eec:	4619      	mov	r1, r3
 8012eee:	6878      	ldr	r0, [r7, #4]
 8012ef0:	f7ff fcfe 	bl	80128f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8012ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ef8:	210b      	movs	r1, #11
 8012efa:	6878      	ldr	r0, [r7, #4]
 8012efc:	f000 f806 	bl	8012f0c <SDMMC_GetCmdResp1>
 8012f00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f02:	69fb      	ldr	r3, [r7, #28]
}
 8012f04:	4618      	mov	r0, r3
 8012f06:	3720      	adds	r7, #32
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	bd80      	pop	{r7, pc}

08012f0c <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	b088      	sub	sp, #32
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	60f8      	str	r0, [r7, #12]
 8012f14:	460b      	mov	r3, r1
 8012f16:	607a      	str	r2, [r7, #4]
 8012f18:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012f1a:	4b70      	ldr	r3, [pc, #448]	; (80130dc <SDMMC_GetCmdResp1+0x1d0>)
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	4a70      	ldr	r2, [pc, #448]	; (80130e0 <SDMMC_GetCmdResp1+0x1d4>)
 8012f20:	fba2 2303 	umull	r2, r3, r2, r3
 8012f24:	0a5a      	lsrs	r2, r3, #9
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	fb02 f303 	mul.w	r3, r2, r3
 8012f2c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012f2e:	69fb      	ldr	r3, [r7, #28]
 8012f30:	1e5a      	subs	r2, r3, #1
 8012f32:	61fa      	str	r2, [r7, #28]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d102      	bne.n	8012f3e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012f38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012f3c:	e0c9      	b.n	80130d2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f42:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012f44:	69ba      	ldr	r2, [r7, #24]
 8012f46:	4b67      	ldr	r3, [pc, #412]	; (80130e4 <SDMMC_GetCmdResp1+0x1d8>)
 8012f48:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d0ef      	beq.n	8012f2e <SDMMC_GetCmdResp1+0x22>
 8012f4e:	69bb      	ldr	r3, [r7, #24]
 8012f50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d1ea      	bne.n	8012f2e <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f5c:	f003 0304 	and.w	r3, r3, #4
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d004      	beq.n	8012f6e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	2204      	movs	r2, #4
 8012f68:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012f6a:	2304      	movs	r3, #4
 8012f6c:	e0b1      	b.n	80130d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f72:	f003 0301 	and.w	r3, r3, #1
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d004      	beq.n	8012f84 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	2201      	movs	r2, #1
 8012f7e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012f80:	2301      	movs	r3, #1
 8012f82:	e0a6      	b.n	80130d2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	4a58      	ldr	r2, [pc, #352]	; (80130e8 <SDMMC_GetCmdResp1+0x1dc>)
 8012f88:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012f8a:	68f8      	ldr	r0, [r7, #12]
 8012f8c:	f7ff fcda 	bl	8012944 <SDMMC_GetCommandResponse>
 8012f90:	4603      	mov	r3, r0
 8012f92:	461a      	mov	r2, r3
 8012f94:	7afb      	ldrb	r3, [r7, #11]
 8012f96:	4293      	cmp	r3, r2
 8012f98:	d001      	beq.n	8012f9e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012f9a:	2301      	movs	r3, #1
 8012f9c:	e099      	b.n	80130d2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012f9e:	2100      	movs	r1, #0
 8012fa0:	68f8      	ldr	r0, [r7, #12]
 8012fa2:	f7ff fcdc 	bl	801295e <SDMMC_GetResponse>
 8012fa6:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012fa8:	697a      	ldr	r2, [r7, #20]
 8012faa:	4b50      	ldr	r3, [pc, #320]	; (80130ec <SDMMC_GetCmdResp1+0x1e0>)
 8012fac:	4013      	ands	r3, r2
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d101      	bne.n	8012fb6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	e08d      	b.n	80130d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012fb6:	697b      	ldr	r3, [r7, #20]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	da02      	bge.n	8012fc2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012fbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012fc0:	e087      	b.n	80130d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012fc2:	697b      	ldr	r3, [r7, #20]
 8012fc4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d001      	beq.n	8012fd0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012fcc:	2340      	movs	r3, #64	; 0x40
 8012fce:	e080      	b.n	80130d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012fd0:	697b      	ldr	r3, [r7, #20]
 8012fd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d001      	beq.n	8012fde <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012fda:	2380      	movs	r3, #128	; 0x80
 8012fdc:	e079      	b.n	80130d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012fde:	697b      	ldr	r3, [r7, #20]
 8012fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d002      	beq.n	8012fee <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012fec:	e071      	b.n	80130d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012fee:	697b      	ldr	r3, [r7, #20]
 8012ff0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d002      	beq.n	8012ffe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012ff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012ffc:	e069      	b.n	80130d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012ffe:	697b      	ldr	r3, [r7, #20]
 8013000:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013004:	2b00      	cmp	r3, #0
 8013006:	d002      	beq.n	801300e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801300c:	e061      	b.n	80130d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801300e:	697b      	ldr	r3, [r7, #20]
 8013010:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013014:	2b00      	cmp	r3, #0
 8013016:	d002      	beq.n	801301e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013018:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801301c:	e059      	b.n	80130d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801301e:	697b      	ldr	r3, [r7, #20]
 8013020:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013024:	2b00      	cmp	r3, #0
 8013026:	d002      	beq.n	801302e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801302c:	e051      	b.n	80130d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801302e:	697b      	ldr	r3, [r7, #20]
 8013030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013034:	2b00      	cmp	r3, #0
 8013036:	d002      	beq.n	801303e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013038:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801303c:	e049      	b.n	80130d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801303e:	697b      	ldr	r3, [r7, #20]
 8013040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013044:	2b00      	cmp	r3, #0
 8013046:	d002      	beq.n	801304e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013048:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801304c:	e041      	b.n	80130d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801304e:	697b      	ldr	r3, [r7, #20]
 8013050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013054:	2b00      	cmp	r3, #0
 8013056:	d002      	beq.n	801305e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8013058:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801305c:	e039      	b.n	80130d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801305e:	697b      	ldr	r3, [r7, #20]
 8013060:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013064:	2b00      	cmp	r3, #0
 8013066:	d002      	beq.n	801306e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013068:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801306c:	e031      	b.n	80130d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801306e:	697b      	ldr	r3, [r7, #20]
 8013070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013074:	2b00      	cmp	r3, #0
 8013076:	d002      	beq.n	801307e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013078:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801307c:	e029      	b.n	80130d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801307e:	697b      	ldr	r3, [r7, #20]
 8013080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013084:	2b00      	cmp	r3, #0
 8013086:	d002      	beq.n	801308e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013088:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801308c:	e021      	b.n	80130d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801308e:	697b      	ldr	r3, [r7, #20]
 8013090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013094:	2b00      	cmp	r3, #0
 8013096:	d002      	beq.n	801309e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013098:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801309c:	e019      	b.n	80130d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801309e:	697b      	ldr	r3, [r7, #20]
 80130a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d002      	beq.n	80130ae <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80130a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80130ac:	e011      	b.n	80130d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80130ae:	697b      	ldr	r3, [r7, #20]
 80130b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d002      	beq.n	80130be <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80130b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80130bc:	e009      	b.n	80130d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80130be:	697b      	ldr	r3, [r7, #20]
 80130c0:	f003 0308 	and.w	r3, r3, #8
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d002      	beq.n	80130ce <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80130c8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80130cc:	e001      	b.n	80130d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80130ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80130d2:	4618      	mov	r0, r3
 80130d4:	3720      	adds	r7, #32
 80130d6:	46bd      	mov	sp, r7
 80130d8:	bd80      	pop	{r7, pc}
 80130da:	bf00      	nop
 80130dc:	20000004 	.word	0x20000004
 80130e0:	10624dd3 	.word	0x10624dd3
 80130e4:	00200045 	.word	0x00200045
 80130e8:	002000c5 	.word	0x002000c5
 80130ec:	fdffe008 	.word	0xfdffe008

080130f0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80130f0:	b480      	push	{r7}
 80130f2:	b085      	sub	sp, #20
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80130f8:	4b1f      	ldr	r3, [pc, #124]	; (8013178 <SDMMC_GetCmdResp2+0x88>)
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	4a1f      	ldr	r2, [pc, #124]	; (801317c <SDMMC_GetCmdResp2+0x8c>)
 80130fe:	fba2 2303 	umull	r2, r3, r2, r3
 8013102:	0a5b      	lsrs	r3, r3, #9
 8013104:	f241 3288 	movw	r2, #5000	; 0x1388
 8013108:	fb02 f303 	mul.w	r3, r2, r3
 801310c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	1e5a      	subs	r2, r3, #1
 8013112:	60fa      	str	r2, [r7, #12]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d102      	bne.n	801311e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013118:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801311c:	e026      	b.n	801316c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013122:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013124:	68bb      	ldr	r3, [r7, #8]
 8013126:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801312a:	2b00      	cmp	r3, #0
 801312c:	d0ef      	beq.n	801310e <SDMMC_GetCmdResp2+0x1e>
 801312e:	68bb      	ldr	r3, [r7, #8]
 8013130:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013134:	2b00      	cmp	r3, #0
 8013136:	d1ea      	bne.n	801310e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801313c:	f003 0304 	and.w	r3, r3, #4
 8013140:	2b00      	cmp	r3, #0
 8013142:	d004      	beq.n	801314e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	2204      	movs	r2, #4
 8013148:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801314a:	2304      	movs	r3, #4
 801314c:	e00e      	b.n	801316c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013152:	f003 0301 	and.w	r3, r3, #1
 8013156:	2b00      	cmp	r3, #0
 8013158:	d004      	beq.n	8013164 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	2201      	movs	r2, #1
 801315e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013160:	2301      	movs	r3, #1
 8013162:	e003      	b.n	801316c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	4a06      	ldr	r2, [pc, #24]	; (8013180 <SDMMC_GetCmdResp2+0x90>)
 8013168:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801316a:	2300      	movs	r3, #0
}
 801316c:	4618      	mov	r0, r3
 801316e:	3714      	adds	r7, #20
 8013170:	46bd      	mov	sp, r7
 8013172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013176:	4770      	bx	lr
 8013178:	20000004 	.word	0x20000004
 801317c:	10624dd3 	.word	0x10624dd3
 8013180:	002000c5 	.word	0x002000c5

08013184 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8013184:	b480      	push	{r7}
 8013186:	b085      	sub	sp, #20
 8013188:	af00      	add	r7, sp, #0
 801318a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801318c:	4b1a      	ldr	r3, [pc, #104]	; (80131f8 <SDMMC_GetCmdResp3+0x74>)
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	4a1a      	ldr	r2, [pc, #104]	; (80131fc <SDMMC_GetCmdResp3+0x78>)
 8013192:	fba2 2303 	umull	r2, r3, r2, r3
 8013196:	0a5b      	lsrs	r3, r3, #9
 8013198:	f241 3288 	movw	r2, #5000	; 0x1388
 801319c:	fb02 f303 	mul.w	r3, r2, r3
 80131a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	1e5a      	subs	r2, r3, #1
 80131a6:	60fa      	str	r2, [r7, #12]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d102      	bne.n	80131b2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80131ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80131b0:	e01b      	b.n	80131ea <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80131b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80131b8:	68bb      	ldr	r3, [r7, #8]
 80131ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d0ef      	beq.n	80131a2 <SDMMC_GetCmdResp3+0x1e>
 80131c2:	68bb      	ldr	r3, [r7, #8]
 80131c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d1ea      	bne.n	80131a2 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80131d0:	f003 0304 	and.w	r3, r3, #4
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d004      	beq.n	80131e2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	2204      	movs	r2, #4
 80131dc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80131de:	2304      	movs	r3, #4
 80131e0:	e003      	b.n	80131ea <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	4a06      	ldr	r2, [pc, #24]	; (8013200 <SDMMC_GetCmdResp3+0x7c>)
 80131e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80131e8:	2300      	movs	r3, #0
}
 80131ea:	4618      	mov	r0, r3
 80131ec:	3714      	adds	r7, #20
 80131ee:	46bd      	mov	sp, r7
 80131f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f4:	4770      	bx	lr
 80131f6:	bf00      	nop
 80131f8:	20000004 	.word	0x20000004
 80131fc:	10624dd3 	.word	0x10624dd3
 8013200:	002000c5 	.word	0x002000c5

08013204 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8013204:	b580      	push	{r7, lr}
 8013206:	b088      	sub	sp, #32
 8013208:	af00      	add	r7, sp, #0
 801320a:	60f8      	str	r0, [r7, #12]
 801320c:	460b      	mov	r3, r1
 801320e:	607a      	str	r2, [r7, #4]
 8013210:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013212:	4b35      	ldr	r3, [pc, #212]	; (80132e8 <SDMMC_GetCmdResp6+0xe4>)
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	4a35      	ldr	r2, [pc, #212]	; (80132ec <SDMMC_GetCmdResp6+0xe8>)
 8013218:	fba2 2303 	umull	r2, r3, r2, r3
 801321c:	0a5b      	lsrs	r3, r3, #9
 801321e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013222:	fb02 f303 	mul.w	r3, r2, r3
 8013226:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8013228:	69fb      	ldr	r3, [r7, #28]
 801322a:	1e5a      	subs	r2, r3, #1
 801322c:	61fa      	str	r2, [r7, #28]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d102      	bne.n	8013238 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013232:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013236:	e052      	b.n	80132de <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801323c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801323e:	69bb      	ldr	r3, [r7, #24]
 8013240:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013244:	2b00      	cmp	r3, #0
 8013246:	d0ef      	beq.n	8013228 <SDMMC_GetCmdResp6+0x24>
 8013248:	69bb      	ldr	r3, [r7, #24]
 801324a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801324e:	2b00      	cmp	r3, #0
 8013250:	d1ea      	bne.n	8013228 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013256:	f003 0304 	and.w	r3, r3, #4
 801325a:	2b00      	cmp	r3, #0
 801325c:	d004      	beq.n	8013268 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	2204      	movs	r2, #4
 8013262:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013264:	2304      	movs	r3, #4
 8013266:	e03a      	b.n	80132de <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801326c:	f003 0301 	and.w	r3, r3, #1
 8013270:	2b00      	cmp	r3, #0
 8013272:	d004      	beq.n	801327e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	2201      	movs	r2, #1
 8013278:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801327a:	2301      	movs	r3, #1
 801327c:	e02f      	b.n	80132de <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801327e:	68f8      	ldr	r0, [r7, #12]
 8013280:	f7ff fb60 	bl	8012944 <SDMMC_GetCommandResponse>
 8013284:	4603      	mov	r3, r0
 8013286:	461a      	mov	r2, r3
 8013288:	7afb      	ldrb	r3, [r7, #11]
 801328a:	4293      	cmp	r3, r2
 801328c:	d001      	beq.n	8013292 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801328e:	2301      	movs	r3, #1
 8013290:	e025      	b.n	80132de <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	4a16      	ldr	r2, [pc, #88]	; (80132f0 <SDMMC_GetCmdResp6+0xec>)
 8013296:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013298:	2100      	movs	r1, #0
 801329a:	68f8      	ldr	r0, [r7, #12]
 801329c:	f7ff fb5f 	bl	801295e <SDMMC_GetResponse>
 80132a0:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80132a2:	697b      	ldr	r3, [r7, #20]
 80132a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d106      	bne.n	80132ba <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80132ac:	697b      	ldr	r3, [r7, #20]
 80132ae:	0c1b      	lsrs	r3, r3, #16
 80132b0:	b29a      	uxth	r2, r3
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80132b6:	2300      	movs	r3, #0
 80132b8:	e011      	b.n	80132de <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80132ba:	697b      	ldr	r3, [r7, #20]
 80132bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d002      	beq.n	80132ca <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80132c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80132c8:	e009      	b.n	80132de <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80132ca:	697b      	ldr	r3, [r7, #20]
 80132cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d002      	beq.n	80132da <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80132d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80132d8:	e001      	b.n	80132de <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80132da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80132de:	4618      	mov	r0, r3
 80132e0:	3720      	adds	r7, #32
 80132e2:	46bd      	mov	sp, r7
 80132e4:	bd80      	pop	{r7, pc}
 80132e6:	bf00      	nop
 80132e8:	20000004 	.word	0x20000004
 80132ec:	10624dd3 	.word	0x10624dd3
 80132f0:	002000c5 	.word	0x002000c5

080132f4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80132f4:	b480      	push	{r7}
 80132f6:	b085      	sub	sp, #20
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80132fc:	4b22      	ldr	r3, [pc, #136]	; (8013388 <SDMMC_GetCmdResp7+0x94>)
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	4a22      	ldr	r2, [pc, #136]	; (801338c <SDMMC_GetCmdResp7+0x98>)
 8013302:	fba2 2303 	umull	r2, r3, r2, r3
 8013306:	0a5b      	lsrs	r3, r3, #9
 8013308:	f241 3288 	movw	r2, #5000	; 0x1388
 801330c:	fb02 f303 	mul.w	r3, r2, r3
 8013310:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	1e5a      	subs	r2, r3, #1
 8013316:	60fa      	str	r2, [r7, #12]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d102      	bne.n	8013322 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801331c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013320:	e02c      	b.n	801337c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013326:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013328:	68bb      	ldr	r3, [r7, #8]
 801332a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801332e:	2b00      	cmp	r3, #0
 8013330:	d0ef      	beq.n	8013312 <SDMMC_GetCmdResp7+0x1e>
 8013332:	68bb      	ldr	r3, [r7, #8]
 8013334:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013338:	2b00      	cmp	r3, #0
 801333a:	d1ea      	bne.n	8013312 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013340:	f003 0304 	and.w	r3, r3, #4
 8013344:	2b00      	cmp	r3, #0
 8013346:	d004      	beq.n	8013352 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	2204      	movs	r2, #4
 801334c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801334e:	2304      	movs	r3, #4
 8013350:	e014      	b.n	801337c <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013356:	f003 0301 	and.w	r3, r3, #1
 801335a:	2b00      	cmp	r3, #0
 801335c:	d004      	beq.n	8013368 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	2201      	movs	r2, #1
 8013362:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013364:	2301      	movs	r3, #1
 8013366:	e009      	b.n	801337c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801336c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013370:	2b00      	cmp	r3, #0
 8013372:	d002      	beq.n	801337a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	2240      	movs	r2, #64	; 0x40
 8013378:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801337a:	2300      	movs	r3, #0

}
 801337c:	4618      	mov	r0, r3
 801337e:	3714      	adds	r7, #20
 8013380:	46bd      	mov	sp, r7
 8013382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013386:	4770      	bx	lr
 8013388:	20000004 	.word	0x20000004
 801338c:	10624dd3 	.word	0x10624dd3

08013390 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8013390:	b480      	push	{r7}
 8013392:	b085      	sub	sp, #20
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013398:	4b11      	ldr	r3, [pc, #68]	; (80133e0 <SDMMC_GetCmdError+0x50>)
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	4a11      	ldr	r2, [pc, #68]	; (80133e4 <SDMMC_GetCmdError+0x54>)
 801339e:	fba2 2303 	umull	r2, r3, r2, r3
 80133a2:	0a5b      	lsrs	r3, r3, #9
 80133a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80133a8:	fb02 f303 	mul.w	r3, r2, r3
 80133ac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	1e5a      	subs	r2, r3, #1
 80133b2:	60fa      	str	r2, [r7, #12]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d102      	bne.n	80133be <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80133b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80133bc:	e009      	b.n	80133d2 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d0f1      	beq.n	80133ae <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	4a06      	ldr	r2, [pc, #24]	; (80133e8 <SDMMC_GetCmdError+0x58>)
 80133ce:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80133d0:	2300      	movs	r3, #0
}
 80133d2:	4618      	mov	r0, r3
 80133d4:	3714      	adds	r7, #20
 80133d6:	46bd      	mov	sp, r7
 80133d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133dc:	4770      	bx	lr
 80133de:	bf00      	nop
 80133e0:	20000004 	.word	0x20000004
 80133e4:	10624dd3 	.word	0x10624dd3
 80133e8:	002000c5 	.word	0x002000c5

080133ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80133ec:	b084      	sub	sp, #16
 80133ee:	b580      	push	{r7, lr}
 80133f0:	b084      	sub	sp, #16
 80133f2:	af00      	add	r7, sp, #0
 80133f4:	6078      	str	r0, [r7, #4]
 80133f6:	f107 001c 	add.w	r0, r7, #28
 80133fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	68db      	ldr	r3, [r3, #12]
 8013402:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 801340a:	6878      	ldr	r0, [r7, #4]
 801340c:	f001 fa1c 	bl	8014848 <USB_CoreReset>
 8013410:	4603      	mov	r3, r0
 8013412:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8013414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013416:	2b00      	cmp	r3, #0
 8013418:	d106      	bne.n	8013428 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801341e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	639a      	str	r2, [r3, #56]	; 0x38
 8013426:	e005      	b.n	8013434 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801342c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8013434:	7bfb      	ldrb	r3, [r7, #15]
}
 8013436:	4618      	mov	r0, r3
 8013438:	3710      	adds	r7, #16
 801343a:	46bd      	mov	sp, r7
 801343c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013440:	b004      	add	sp, #16
 8013442:	4770      	bx	lr

08013444 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8013444:	b480      	push	{r7}
 8013446:	b087      	sub	sp, #28
 8013448:	af00      	add	r7, sp, #0
 801344a:	60f8      	str	r0, [r7, #12]
 801344c:	60b9      	str	r1, [r7, #8]
 801344e:	4613      	mov	r3, r2
 8013450:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8013452:	79fb      	ldrb	r3, [r7, #7]
 8013454:	2b02      	cmp	r3, #2
 8013456:	d165      	bne.n	8013524 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8013458:	68bb      	ldr	r3, [r7, #8]
 801345a:	4a3e      	ldr	r2, [pc, #248]	; (8013554 <USB_SetTurnaroundTime+0x110>)
 801345c:	4293      	cmp	r3, r2
 801345e:	d906      	bls.n	801346e <USB_SetTurnaroundTime+0x2a>
 8013460:	68bb      	ldr	r3, [r7, #8]
 8013462:	4a3d      	ldr	r2, [pc, #244]	; (8013558 <USB_SetTurnaroundTime+0x114>)
 8013464:	4293      	cmp	r3, r2
 8013466:	d202      	bcs.n	801346e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8013468:	230f      	movs	r3, #15
 801346a:	617b      	str	r3, [r7, #20]
 801346c:	e05c      	b.n	8013528 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801346e:	68bb      	ldr	r3, [r7, #8]
 8013470:	4a39      	ldr	r2, [pc, #228]	; (8013558 <USB_SetTurnaroundTime+0x114>)
 8013472:	4293      	cmp	r3, r2
 8013474:	d306      	bcc.n	8013484 <USB_SetTurnaroundTime+0x40>
 8013476:	68bb      	ldr	r3, [r7, #8]
 8013478:	4a38      	ldr	r2, [pc, #224]	; (801355c <USB_SetTurnaroundTime+0x118>)
 801347a:	4293      	cmp	r3, r2
 801347c:	d202      	bcs.n	8013484 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801347e:	230e      	movs	r3, #14
 8013480:	617b      	str	r3, [r7, #20]
 8013482:	e051      	b.n	8013528 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8013484:	68bb      	ldr	r3, [r7, #8]
 8013486:	4a35      	ldr	r2, [pc, #212]	; (801355c <USB_SetTurnaroundTime+0x118>)
 8013488:	4293      	cmp	r3, r2
 801348a:	d306      	bcc.n	801349a <USB_SetTurnaroundTime+0x56>
 801348c:	68bb      	ldr	r3, [r7, #8]
 801348e:	4a34      	ldr	r2, [pc, #208]	; (8013560 <USB_SetTurnaroundTime+0x11c>)
 8013490:	4293      	cmp	r3, r2
 8013492:	d202      	bcs.n	801349a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8013494:	230d      	movs	r3, #13
 8013496:	617b      	str	r3, [r7, #20]
 8013498:	e046      	b.n	8013528 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801349a:	68bb      	ldr	r3, [r7, #8]
 801349c:	4a30      	ldr	r2, [pc, #192]	; (8013560 <USB_SetTurnaroundTime+0x11c>)
 801349e:	4293      	cmp	r3, r2
 80134a0:	d306      	bcc.n	80134b0 <USB_SetTurnaroundTime+0x6c>
 80134a2:	68bb      	ldr	r3, [r7, #8]
 80134a4:	4a2f      	ldr	r2, [pc, #188]	; (8013564 <USB_SetTurnaroundTime+0x120>)
 80134a6:	4293      	cmp	r3, r2
 80134a8:	d802      	bhi.n	80134b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80134aa:	230c      	movs	r3, #12
 80134ac:	617b      	str	r3, [r7, #20]
 80134ae:	e03b      	b.n	8013528 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80134b0:	68bb      	ldr	r3, [r7, #8]
 80134b2:	4a2c      	ldr	r2, [pc, #176]	; (8013564 <USB_SetTurnaroundTime+0x120>)
 80134b4:	4293      	cmp	r3, r2
 80134b6:	d906      	bls.n	80134c6 <USB_SetTurnaroundTime+0x82>
 80134b8:	68bb      	ldr	r3, [r7, #8]
 80134ba:	4a2b      	ldr	r2, [pc, #172]	; (8013568 <USB_SetTurnaroundTime+0x124>)
 80134bc:	4293      	cmp	r3, r2
 80134be:	d802      	bhi.n	80134c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80134c0:	230b      	movs	r3, #11
 80134c2:	617b      	str	r3, [r7, #20]
 80134c4:	e030      	b.n	8013528 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80134c6:	68bb      	ldr	r3, [r7, #8]
 80134c8:	4a27      	ldr	r2, [pc, #156]	; (8013568 <USB_SetTurnaroundTime+0x124>)
 80134ca:	4293      	cmp	r3, r2
 80134cc:	d906      	bls.n	80134dc <USB_SetTurnaroundTime+0x98>
 80134ce:	68bb      	ldr	r3, [r7, #8]
 80134d0:	4a26      	ldr	r2, [pc, #152]	; (801356c <USB_SetTurnaroundTime+0x128>)
 80134d2:	4293      	cmp	r3, r2
 80134d4:	d802      	bhi.n	80134dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80134d6:	230a      	movs	r3, #10
 80134d8:	617b      	str	r3, [r7, #20]
 80134da:	e025      	b.n	8013528 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80134dc:	68bb      	ldr	r3, [r7, #8]
 80134de:	4a23      	ldr	r2, [pc, #140]	; (801356c <USB_SetTurnaroundTime+0x128>)
 80134e0:	4293      	cmp	r3, r2
 80134e2:	d906      	bls.n	80134f2 <USB_SetTurnaroundTime+0xae>
 80134e4:	68bb      	ldr	r3, [r7, #8]
 80134e6:	4a22      	ldr	r2, [pc, #136]	; (8013570 <USB_SetTurnaroundTime+0x12c>)
 80134e8:	4293      	cmp	r3, r2
 80134ea:	d202      	bcs.n	80134f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80134ec:	2309      	movs	r3, #9
 80134ee:	617b      	str	r3, [r7, #20]
 80134f0:	e01a      	b.n	8013528 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80134f2:	68bb      	ldr	r3, [r7, #8]
 80134f4:	4a1e      	ldr	r2, [pc, #120]	; (8013570 <USB_SetTurnaroundTime+0x12c>)
 80134f6:	4293      	cmp	r3, r2
 80134f8:	d306      	bcc.n	8013508 <USB_SetTurnaroundTime+0xc4>
 80134fa:	68bb      	ldr	r3, [r7, #8]
 80134fc:	4a1d      	ldr	r2, [pc, #116]	; (8013574 <USB_SetTurnaroundTime+0x130>)
 80134fe:	4293      	cmp	r3, r2
 8013500:	d802      	bhi.n	8013508 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8013502:	2308      	movs	r3, #8
 8013504:	617b      	str	r3, [r7, #20]
 8013506:	e00f      	b.n	8013528 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8013508:	68bb      	ldr	r3, [r7, #8]
 801350a:	4a1a      	ldr	r2, [pc, #104]	; (8013574 <USB_SetTurnaroundTime+0x130>)
 801350c:	4293      	cmp	r3, r2
 801350e:	d906      	bls.n	801351e <USB_SetTurnaroundTime+0xda>
 8013510:	68bb      	ldr	r3, [r7, #8]
 8013512:	4a19      	ldr	r2, [pc, #100]	; (8013578 <USB_SetTurnaroundTime+0x134>)
 8013514:	4293      	cmp	r3, r2
 8013516:	d202      	bcs.n	801351e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8013518:	2307      	movs	r3, #7
 801351a:	617b      	str	r3, [r7, #20]
 801351c:	e004      	b.n	8013528 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801351e:	2306      	movs	r3, #6
 8013520:	617b      	str	r3, [r7, #20]
 8013522:	e001      	b.n	8013528 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8013524:	2309      	movs	r3, #9
 8013526:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	68db      	ldr	r3, [r3, #12]
 801352c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	68da      	ldr	r2, [r3, #12]
 8013538:	697b      	ldr	r3, [r7, #20]
 801353a:	029b      	lsls	r3, r3, #10
 801353c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8013540:	431a      	orrs	r2, r3
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013546:	2300      	movs	r3, #0
}
 8013548:	4618      	mov	r0, r3
 801354a:	371c      	adds	r7, #28
 801354c:	46bd      	mov	sp, r7
 801354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013552:	4770      	bx	lr
 8013554:	00d8acbf 	.word	0x00d8acbf
 8013558:	00e4e1c0 	.word	0x00e4e1c0
 801355c:	00f42400 	.word	0x00f42400
 8013560:	01067380 	.word	0x01067380
 8013564:	011a499f 	.word	0x011a499f
 8013568:	01312cff 	.word	0x01312cff
 801356c:	014ca43f 	.word	0x014ca43f
 8013570:	016e3600 	.word	0x016e3600
 8013574:	01a6ab1f 	.word	0x01a6ab1f
 8013578:	01e84800 	.word	0x01e84800

0801357c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801357c:	b480      	push	{r7}
 801357e:	b083      	sub	sp, #12
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	689b      	ldr	r3, [r3, #8]
 8013588:	f043 0201 	orr.w	r2, r3, #1
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013590:	2300      	movs	r3, #0
}
 8013592:	4618      	mov	r0, r3
 8013594:	370c      	adds	r7, #12
 8013596:	46bd      	mov	sp, r7
 8013598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801359c:	4770      	bx	lr

0801359e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801359e:	b480      	push	{r7}
 80135a0:	b083      	sub	sp, #12
 80135a2:	af00      	add	r7, sp, #0
 80135a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	689b      	ldr	r3, [r3, #8]
 80135aa:	f023 0201 	bic.w	r2, r3, #1
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80135b2:	2300      	movs	r3, #0
}
 80135b4:	4618      	mov	r0, r3
 80135b6:	370c      	adds	r7, #12
 80135b8:	46bd      	mov	sp, r7
 80135ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135be:	4770      	bx	lr

080135c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b084      	sub	sp, #16
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	6078      	str	r0, [r7, #4]
 80135c8:	460b      	mov	r3, r1
 80135ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80135cc:	2300      	movs	r3, #0
 80135ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	68db      	ldr	r3, [r3, #12]
 80135d4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80135dc:	78fb      	ldrb	r3, [r7, #3]
 80135de:	2b01      	cmp	r3, #1
 80135e0:	d115      	bne.n	801360e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	68db      	ldr	r3, [r3, #12]
 80135e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80135ee:	2001      	movs	r0, #1
 80135f0:	f7f3 ffa4 	bl	800753c <HAL_Delay>
      ms++;
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	3301      	adds	r3, #1
 80135f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80135fa:	6878      	ldr	r0, [r7, #4]
 80135fc:	f001 f8ab 	bl	8014756 <USB_GetMode>
 8013600:	4603      	mov	r3, r0
 8013602:	2b01      	cmp	r3, #1
 8013604:	d01e      	beq.n	8013644 <USB_SetCurrentMode+0x84>
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	2b31      	cmp	r3, #49	; 0x31
 801360a:	d9f0      	bls.n	80135ee <USB_SetCurrentMode+0x2e>
 801360c:	e01a      	b.n	8013644 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801360e:	78fb      	ldrb	r3, [r7, #3]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d115      	bne.n	8013640 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	68db      	ldr	r3, [r3, #12]
 8013618:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013620:	2001      	movs	r0, #1
 8013622:	f7f3 ff8b 	bl	800753c <HAL_Delay>
      ms++;
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	3301      	adds	r3, #1
 801362a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801362c:	6878      	ldr	r0, [r7, #4]
 801362e:	f001 f892 	bl	8014756 <USB_GetMode>
 8013632:	4603      	mov	r3, r0
 8013634:	2b00      	cmp	r3, #0
 8013636:	d005      	beq.n	8013644 <USB_SetCurrentMode+0x84>
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	2b31      	cmp	r3, #49	; 0x31
 801363c:	d9f0      	bls.n	8013620 <USB_SetCurrentMode+0x60>
 801363e:	e001      	b.n	8013644 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8013640:	2301      	movs	r3, #1
 8013642:	e005      	b.n	8013650 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	2b32      	cmp	r3, #50	; 0x32
 8013648:	d101      	bne.n	801364e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801364a:	2301      	movs	r3, #1
 801364c:	e000      	b.n	8013650 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801364e:	2300      	movs	r3, #0
}
 8013650:	4618      	mov	r0, r3
 8013652:	3710      	adds	r7, #16
 8013654:	46bd      	mov	sp, r7
 8013656:	bd80      	pop	{r7, pc}

08013658 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013658:	b084      	sub	sp, #16
 801365a:	b580      	push	{r7, lr}
 801365c:	b086      	sub	sp, #24
 801365e:	af00      	add	r7, sp, #0
 8013660:	6078      	str	r0, [r7, #4]
 8013662:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801366a:	2300      	movs	r3, #0
 801366c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8013672:	2300      	movs	r3, #0
 8013674:	613b      	str	r3, [r7, #16]
 8013676:	e009      	b.n	801368c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013678:	687a      	ldr	r2, [r7, #4]
 801367a:	693b      	ldr	r3, [r7, #16]
 801367c:	3340      	adds	r3, #64	; 0x40
 801367e:	009b      	lsls	r3, r3, #2
 8013680:	4413      	add	r3, r2
 8013682:	2200      	movs	r2, #0
 8013684:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8013686:	693b      	ldr	r3, [r7, #16]
 8013688:	3301      	adds	r3, #1
 801368a:	613b      	str	r3, [r7, #16]
 801368c:	693b      	ldr	r3, [r7, #16]
 801368e:	2b0e      	cmp	r3, #14
 8013690:	d9f2      	bls.n	8013678 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8013692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013694:	2b00      	cmp	r3, #0
 8013696:	d11c      	bne.n	80136d2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801369e:	685b      	ldr	r3, [r3, #4]
 80136a0:	68fa      	ldr	r2, [r7, #12]
 80136a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80136a6:	f043 0302 	orr.w	r3, r3, #2
 80136aa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136b0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	601a      	str	r2, [r3, #0]
 80136d0:	e005      	b.n	80136de <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80136e4:	461a      	mov	r2, r3
 80136e6:	2300      	movs	r3, #0
 80136e8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80136ea:	2103      	movs	r1, #3
 80136ec:	6878      	ldr	r0, [r7, #4]
 80136ee:	f000 f959 	bl	80139a4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80136f2:	2110      	movs	r1, #16
 80136f4:	6878      	ldr	r0, [r7, #4]
 80136f6:	f000 f8f1 	bl	80138dc <USB_FlushTxFifo>
 80136fa:	4603      	mov	r3, r0
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d001      	beq.n	8013704 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8013700:	2301      	movs	r3, #1
 8013702:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013704:	6878      	ldr	r0, [r7, #4]
 8013706:	f000 f91d 	bl	8013944 <USB_FlushRxFifo>
 801370a:	4603      	mov	r3, r0
 801370c:	2b00      	cmp	r3, #0
 801370e:	d001      	beq.n	8013714 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8013710:	2301      	movs	r3, #1
 8013712:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801371a:	461a      	mov	r2, r3
 801371c:	2300      	movs	r3, #0
 801371e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013726:	461a      	mov	r2, r3
 8013728:	2300      	movs	r3, #0
 801372a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013732:	461a      	mov	r2, r3
 8013734:	2300      	movs	r3, #0
 8013736:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013738:	2300      	movs	r3, #0
 801373a:	613b      	str	r3, [r7, #16]
 801373c:	e043      	b.n	80137c6 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801373e:	693b      	ldr	r3, [r7, #16]
 8013740:	015a      	lsls	r2, r3, #5
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	4413      	add	r3, r2
 8013746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013750:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013754:	d118      	bne.n	8013788 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8013756:	693b      	ldr	r3, [r7, #16]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d10a      	bne.n	8013772 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801375c:	693b      	ldr	r3, [r7, #16]
 801375e:	015a      	lsls	r2, r3, #5
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	4413      	add	r3, r2
 8013764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013768:	461a      	mov	r2, r3
 801376a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801376e:	6013      	str	r3, [r2, #0]
 8013770:	e013      	b.n	801379a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013772:	693b      	ldr	r3, [r7, #16]
 8013774:	015a      	lsls	r2, r3, #5
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	4413      	add	r3, r2
 801377a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801377e:	461a      	mov	r2, r3
 8013780:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013784:	6013      	str	r3, [r2, #0]
 8013786:	e008      	b.n	801379a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013788:	693b      	ldr	r3, [r7, #16]
 801378a:	015a      	lsls	r2, r3, #5
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	4413      	add	r3, r2
 8013790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013794:	461a      	mov	r2, r3
 8013796:	2300      	movs	r3, #0
 8013798:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801379a:	693b      	ldr	r3, [r7, #16]
 801379c:	015a      	lsls	r2, r3, #5
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	4413      	add	r3, r2
 80137a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137a6:	461a      	mov	r2, r3
 80137a8:	2300      	movs	r3, #0
 80137aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80137ac:	693b      	ldr	r3, [r7, #16]
 80137ae:	015a      	lsls	r2, r3, #5
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	4413      	add	r3, r2
 80137b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137b8:	461a      	mov	r2, r3
 80137ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80137be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80137c0:	693b      	ldr	r3, [r7, #16]
 80137c2:	3301      	adds	r3, #1
 80137c4:	613b      	str	r3, [r7, #16]
 80137c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137c8:	693a      	ldr	r2, [r7, #16]
 80137ca:	429a      	cmp	r2, r3
 80137cc:	d3b7      	bcc.n	801373e <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80137ce:	2300      	movs	r3, #0
 80137d0:	613b      	str	r3, [r7, #16]
 80137d2:	e043      	b.n	801385c <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80137d4:	693b      	ldr	r3, [r7, #16]
 80137d6:	015a      	lsls	r2, r3, #5
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	4413      	add	r3, r2
 80137dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80137e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80137ea:	d118      	bne.n	801381e <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 80137ec:	693b      	ldr	r3, [r7, #16]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d10a      	bne.n	8013808 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80137f2:	693b      	ldr	r3, [r7, #16]
 80137f4:	015a      	lsls	r2, r3, #5
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	4413      	add	r3, r2
 80137fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137fe:	461a      	mov	r2, r3
 8013800:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013804:	6013      	str	r3, [r2, #0]
 8013806:	e013      	b.n	8013830 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013808:	693b      	ldr	r3, [r7, #16]
 801380a:	015a      	lsls	r2, r3, #5
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	4413      	add	r3, r2
 8013810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013814:	461a      	mov	r2, r3
 8013816:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801381a:	6013      	str	r3, [r2, #0]
 801381c:	e008      	b.n	8013830 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801381e:	693b      	ldr	r3, [r7, #16]
 8013820:	015a      	lsls	r2, r3, #5
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	4413      	add	r3, r2
 8013826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801382a:	461a      	mov	r2, r3
 801382c:	2300      	movs	r3, #0
 801382e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013830:	693b      	ldr	r3, [r7, #16]
 8013832:	015a      	lsls	r2, r3, #5
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	4413      	add	r3, r2
 8013838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801383c:	461a      	mov	r2, r3
 801383e:	2300      	movs	r3, #0
 8013840:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013842:	693b      	ldr	r3, [r7, #16]
 8013844:	015a      	lsls	r2, r3, #5
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	4413      	add	r3, r2
 801384a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801384e:	461a      	mov	r2, r3
 8013850:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013854:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013856:	693b      	ldr	r3, [r7, #16]
 8013858:	3301      	adds	r3, #1
 801385a:	613b      	str	r3, [r7, #16]
 801385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801385e:	693a      	ldr	r2, [r7, #16]
 8013860:	429a      	cmp	r2, r3
 8013862:	d3b7      	bcc.n	80137d4 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801386a:	691b      	ldr	r3, [r3, #16]
 801386c:	68fa      	ldr	r2, [r7, #12]
 801386e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013872:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013876:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	2200      	movs	r2, #0
 801387c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013884:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	699b      	ldr	r3, [r3, #24]
 801388a:	f043 0210 	orr.w	r2, r3, #16
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	699a      	ldr	r2, [r3, #24]
 8013896:	4b10      	ldr	r3, [pc, #64]	; (80138d8 <USB_DevInit+0x280>)
 8013898:	4313      	orrs	r3, r2
 801389a:	687a      	ldr	r2, [r7, #4]
 801389c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801389e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d005      	beq.n	80138b0 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	699b      	ldr	r3, [r3, #24]
 80138a8:	f043 0208 	orr.w	r2, r3, #8
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80138b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138b2:	2b01      	cmp	r3, #1
 80138b4:	d107      	bne.n	80138c6 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	699b      	ldr	r3, [r3, #24]
 80138ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80138be:	f043 0304 	orr.w	r3, r3, #4
 80138c2:	687a      	ldr	r2, [r7, #4]
 80138c4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80138c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80138c8:	4618      	mov	r0, r3
 80138ca:	3718      	adds	r7, #24
 80138cc:	46bd      	mov	sp, r7
 80138ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80138d2:	b004      	add	sp, #16
 80138d4:	4770      	bx	lr
 80138d6:	bf00      	nop
 80138d8:	803c3800 	.word	0x803c3800

080138dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80138dc:	b480      	push	{r7}
 80138de:	b085      	sub	sp, #20
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	6078      	str	r0, [r7, #4]
 80138e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80138e6:	2300      	movs	r3, #0
 80138e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	3301      	adds	r3, #1
 80138ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	4a13      	ldr	r2, [pc, #76]	; (8013940 <USB_FlushTxFifo+0x64>)
 80138f4:	4293      	cmp	r3, r2
 80138f6:	d901      	bls.n	80138fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80138f8:	2303      	movs	r3, #3
 80138fa:	e01b      	b.n	8013934 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	691b      	ldr	r3, [r3, #16]
 8013900:	2b00      	cmp	r3, #0
 8013902:	daf2      	bge.n	80138ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8013904:	2300      	movs	r3, #0
 8013906:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013908:	683b      	ldr	r3, [r7, #0]
 801390a:	019b      	lsls	r3, r3, #6
 801390c:	f043 0220 	orr.w	r2, r3, #32
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	3301      	adds	r3, #1
 8013918:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	4a08      	ldr	r2, [pc, #32]	; (8013940 <USB_FlushTxFifo+0x64>)
 801391e:	4293      	cmp	r3, r2
 8013920:	d901      	bls.n	8013926 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8013922:	2303      	movs	r3, #3
 8013924:	e006      	b.n	8013934 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	691b      	ldr	r3, [r3, #16]
 801392a:	f003 0320 	and.w	r3, r3, #32
 801392e:	2b20      	cmp	r3, #32
 8013930:	d0f0      	beq.n	8013914 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8013932:	2300      	movs	r3, #0
}
 8013934:	4618      	mov	r0, r3
 8013936:	3714      	adds	r7, #20
 8013938:	46bd      	mov	sp, r7
 801393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801393e:	4770      	bx	lr
 8013940:	00030d40 	.word	0x00030d40

08013944 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013944:	b480      	push	{r7}
 8013946:	b085      	sub	sp, #20
 8013948:	af00      	add	r7, sp, #0
 801394a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801394c:	2300      	movs	r3, #0
 801394e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	3301      	adds	r3, #1
 8013954:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	4a11      	ldr	r2, [pc, #68]	; (80139a0 <USB_FlushRxFifo+0x5c>)
 801395a:	4293      	cmp	r3, r2
 801395c:	d901      	bls.n	8013962 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801395e:	2303      	movs	r3, #3
 8013960:	e018      	b.n	8013994 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	691b      	ldr	r3, [r3, #16]
 8013966:	2b00      	cmp	r3, #0
 8013968:	daf2      	bge.n	8013950 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801396a:	2300      	movs	r3, #0
 801396c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	2210      	movs	r2, #16
 8013972:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	3301      	adds	r3, #1
 8013978:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	4a08      	ldr	r2, [pc, #32]	; (80139a0 <USB_FlushRxFifo+0x5c>)
 801397e:	4293      	cmp	r3, r2
 8013980:	d901      	bls.n	8013986 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8013982:	2303      	movs	r3, #3
 8013984:	e006      	b.n	8013994 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	691b      	ldr	r3, [r3, #16]
 801398a:	f003 0310 	and.w	r3, r3, #16
 801398e:	2b10      	cmp	r3, #16
 8013990:	d0f0      	beq.n	8013974 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8013992:	2300      	movs	r3, #0
}
 8013994:	4618      	mov	r0, r3
 8013996:	3714      	adds	r7, #20
 8013998:	46bd      	mov	sp, r7
 801399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801399e:	4770      	bx	lr
 80139a0:	00030d40 	.word	0x00030d40

080139a4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80139a4:	b480      	push	{r7}
 80139a6:	b085      	sub	sp, #20
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	6078      	str	r0, [r7, #4]
 80139ac:	460b      	mov	r3, r1
 80139ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80139ba:	681a      	ldr	r2, [r3, #0]
 80139bc:	78fb      	ldrb	r3, [r7, #3]
 80139be:	68f9      	ldr	r1, [r7, #12]
 80139c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80139c4:	4313      	orrs	r3, r2
 80139c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80139c8:	2300      	movs	r3, #0
}
 80139ca:	4618      	mov	r0, r3
 80139cc:	3714      	adds	r7, #20
 80139ce:	46bd      	mov	sp, r7
 80139d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d4:	4770      	bx	lr

080139d6 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80139d6:	b480      	push	{r7}
 80139d8:	b087      	sub	sp, #28
 80139da:	af00      	add	r7, sp, #0
 80139dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80139e2:	693b      	ldr	r3, [r7, #16]
 80139e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80139e8:	689b      	ldr	r3, [r3, #8]
 80139ea:	f003 0306 	and.w	r3, r3, #6
 80139ee:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	2b02      	cmp	r3, #2
 80139f4:	d002      	beq.n	80139fc <USB_GetDevSpeed+0x26>
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	2b06      	cmp	r3, #6
 80139fa:	d102      	bne.n	8013a02 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80139fc:	2302      	movs	r3, #2
 80139fe:	75fb      	strb	r3, [r7, #23]
 8013a00:	e001      	b.n	8013a06 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8013a02:	230f      	movs	r3, #15
 8013a04:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8013a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a08:	4618      	mov	r0, r3
 8013a0a:	371c      	adds	r7, #28
 8013a0c:	46bd      	mov	sp, r7
 8013a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a12:	4770      	bx	lr

08013a14 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013a14:	b480      	push	{r7}
 8013a16:	b085      	sub	sp, #20
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	6078      	str	r0, [r7, #4]
 8013a1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013a22:	683b      	ldr	r3, [r7, #0]
 8013a24:	781b      	ldrb	r3, [r3, #0]
 8013a26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013a28:	683b      	ldr	r3, [r7, #0]
 8013a2a:	785b      	ldrb	r3, [r3, #1]
 8013a2c:	2b01      	cmp	r3, #1
 8013a2e:	d13a      	bne.n	8013aa6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a36:	69da      	ldr	r2, [r3, #28]
 8013a38:	683b      	ldr	r3, [r7, #0]
 8013a3a:	781b      	ldrb	r3, [r3, #0]
 8013a3c:	f003 030f 	and.w	r3, r3, #15
 8013a40:	2101      	movs	r1, #1
 8013a42:	fa01 f303 	lsl.w	r3, r1, r3
 8013a46:	b29b      	uxth	r3, r3
 8013a48:	68f9      	ldr	r1, [r7, #12]
 8013a4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013a4e:	4313      	orrs	r3, r2
 8013a50:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013a52:	68bb      	ldr	r3, [r7, #8]
 8013a54:	015a      	lsls	r2, r3, #5
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	4413      	add	r3, r2
 8013a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d155      	bne.n	8013b14 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013a68:	68bb      	ldr	r3, [r7, #8]
 8013a6a:	015a      	lsls	r2, r3, #5
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	4413      	add	r3, r2
 8013a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a74:	681a      	ldr	r2, [r3, #0]
 8013a76:	683b      	ldr	r3, [r7, #0]
 8013a78:	689b      	ldr	r3, [r3, #8]
 8013a7a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013a7e:	683b      	ldr	r3, [r7, #0]
 8013a80:	791b      	ldrb	r3, [r3, #4]
 8013a82:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013a84:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013a86:	68bb      	ldr	r3, [r7, #8]
 8013a88:	059b      	lsls	r3, r3, #22
 8013a8a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013a8c:	4313      	orrs	r3, r2
 8013a8e:	68ba      	ldr	r2, [r7, #8]
 8013a90:	0151      	lsls	r1, r2, #5
 8013a92:	68fa      	ldr	r2, [r7, #12]
 8013a94:	440a      	add	r2, r1
 8013a96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013aa2:	6013      	str	r3, [r2, #0]
 8013aa4:	e036      	b.n	8013b14 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013aac:	69da      	ldr	r2, [r3, #28]
 8013aae:	683b      	ldr	r3, [r7, #0]
 8013ab0:	781b      	ldrb	r3, [r3, #0]
 8013ab2:	f003 030f 	and.w	r3, r3, #15
 8013ab6:	2101      	movs	r1, #1
 8013ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8013abc:	041b      	lsls	r3, r3, #16
 8013abe:	68f9      	ldr	r1, [r7, #12]
 8013ac0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013ac4:	4313      	orrs	r3, r2
 8013ac6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8013ac8:	68bb      	ldr	r3, [r7, #8]
 8013aca:	015a      	lsls	r2, r3, #5
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	4413      	add	r3, r2
 8013ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d11a      	bne.n	8013b14 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013ade:	68bb      	ldr	r3, [r7, #8]
 8013ae0:	015a      	lsls	r2, r3, #5
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	4413      	add	r3, r2
 8013ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013aea:	681a      	ldr	r2, [r3, #0]
 8013aec:	683b      	ldr	r3, [r7, #0]
 8013aee:	689b      	ldr	r3, [r3, #8]
 8013af0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8013af4:	683b      	ldr	r3, [r7, #0]
 8013af6:	791b      	ldrb	r3, [r3, #4]
 8013af8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013afa:	430b      	orrs	r3, r1
 8013afc:	4313      	orrs	r3, r2
 8013afe:	68ba      	ldr	r2, [r7, #8]
 8013b00:	0151      	lsls	r1, r2, #5
 8013b02:	68fa      	ldr	r2, [r7, #12]
 8013b04:	440a      	add	r2, r1
 8013b06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013b12:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8013b14:	2300      	movs	r3, #0
}
 8013b16:	4618      	mov	r0, r3
 8013b18:	3714      	adds	r7, #20
 8013b1a:	46bd      	mov	sp, r7
 8013b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b20:	4770      	bx	lr
	...

08013b24 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013b24:	b480      	push	{r7}
 8013b26:	b085      	sub	sp, #20
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	6078      	str	r0, [r7, #4]
 8013b2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013b32:	683b      	ldr	r3, [r7, #0]
 8013b34:	781b      	ldrb	r3, [r3, #0]
 8013b36:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8013b38:	683b      	ldr	r3, [r7, #0]
 8013b3a:	785b      	ldrb	r3, [r3, #1]
 8013b3c:	2b01      	cmp	r3, #1
 8013b3e:	d161      	bne.n	8013c04 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013b40:	68bb      	ldr	r3, [r7, #8]
 8013b42:	015a      	lsls	r2, r3, #5
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	4413      	add	r3, r2
 8013b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013b52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013b56:	d11f      	bne.n	8013b98 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013b58:	68bb      	ldr	r3, [r7, #8]
 8013b5a:	015a      	lsls	r2, r3, #5
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	4413      	add	r3, r2
 8013b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	68ba      	ldr	r2, [r7, #8]
 8013b68:	0151      	lsls	r1, r2, #5
 8013b6a:	68fa      	ldr	r2, [r7, #12]
 8013b6c:	440a      	add	r2, r1
 8013b6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013b72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013b76:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013b78:	68bb      	ldr	r3, [r7, #8]
 8013b7a:	015a      	lsls	r2, r3, #5
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	4413      	add	r3, r2
 8013b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	68ba      	ldr	r2, [r7, #8]
 8013b88:	0151      	lsls	r1, r2, #5
 8013b8a:	68fa      	ldr	r2, [r7, #12]
 8013b8c:	440a      	add	r2, r1
 8013b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013b92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013b96:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013ba0:	683b      	ldr	r3, [r7, #0]
 8013ba2:	781b      	ldrb	r3, [r3, #0]
 8013ba4:	f003 030f 	and.w	r3, r3, #15
 8013ba8:	2101      	movs	r1, #1
 8013baa:	fa01 f303 	lsl.w	r3, r1, r3
 8013bae:	b29b      	uxth	r3, r3
 8013bb0:	43db      	mvns	r3, r3
 8013bb2:	68f9      	ldr	r1, [r7, #12]
 8013bb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013bb8:	4013      	ands	r3, r2
 8013bba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013bc2:	69da      	ldr	r2, [r3, #28]
 8013bc4:	683b      	ldr	r3, [r7, #0]
 8013bc6:	781b      	ldrb	r3, [r3, #0]
 8013bc8:	f003 030f 	and.w	r3, r3, #15
 8013bcc:	2101      	movs	r1, #1
 8013bce:	fa01 f303 	lsl.w	r3, r1, r3
 8013bd2:	b29b      	uxth	r3, r3
 8013bd4:	43db      	mvns	r3, r3
 8013bd6:	68f9      	ldr	r1, [r7, #12]
 8013bd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013bdc:	4013      	ands	r3, r2
 8013bde:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013be0:	68bb      	ldr	r3, [r7, #8]
 8013be2:	015a      	lsls	r2, r3, #5
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	4413      	add	r3, r2
 8013be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bec:	681a      	ldr	r2, [r3, #0]
 8013bee:	68bb      	ldr	r3, [r7, #8]
 8013bf0:	0159      	lsls	r1, r3, #5
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	440b      	add	r3, r1
 8013bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bfa:	4619      	mov	r1, r3
 8013bfc:	4b35      	ldr	r3, [pc, #212]	; (8013cd4 <USB_DeactivateEndpoint+0x1b0>)
 8013bfe:	4013      	ands	r3, r2
 8013c00:	600b      	str	r3, [r1, #0]
 8013c02:	e060      	b.n	8013cc6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013c04:	68bb      	ldr	r3, [r7, #8]
 8013c06:	015a      	lsls	r2, r3, #5
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	4413      	add	r3, r2
 8013c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013c16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013c1a:	d11f      	bne.n	8013c5c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013c1c:	68bb      	ldr	r3, [r7, #8]
 8013c1e:	015a      	lsls	r2, r3, #5
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	4413      	add	r3, r2
 8013c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	68ba      	ldr	r2, [r7, #8]
 8013c2c:	0151      	lsls	r1, r2, #5
 8013c2e:	68fa      	ldr	r2, [r7, #12]
 8013c30:	440a      	add	r2, r1
 8013c32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013c3a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013c3c:	68bb      	ldr	r3, [r7, #8]
 8013c3e:	015a      	lsls	r2, r3, #5
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	4413      	add	r3, r2
 8013c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	68ba      	ldr	r2, [r7, #8]
 8013c4c:	0151      	lsls	r1, r2, #5
 8013c4e:	68fa      	ldr	r2, [r7, #12]
 8013c50:	440a      	add	r2, r1
 8013c52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013c5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013c64:	683b      	ldr	r3, [r7, #0]
 8013c66:	781b      	ldrb	r3, [r3, #0]
 8013c68:	f003 030f 	and.w	r3, r3, #15
 8013c6c:	2101      	movs	r1, #1
 8013c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8013c72:	041b      	lsls	r3, r3, #16
 8013c74:	43db      	mvns	r3, r3
 8013c76:	68f9      	ldr	r1, [r7, #12]
 8013c78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013c7c:	4013      	ands	r3, r2
 8013c7e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c86:	69da      	ldr	r2, [r3, #28]
 8013c88:	683b      	ldr	r3, [r7, #0]
 8013c8a:	781b      	ldrb	r3, [r3, #0]
 8013c8c:	f003 030f 	and.w	r3, r3, #15
 8013c90:	2101      	movs	r1, #1
 8013c92:	fa01 f303 	lsl.w	r3, r1, r3
 8013c96:	041b      	lsls	r3, r3, #16
 8013c98:	43db      	mvns	r3, r3
 8013c9a:	68f9      	ldr	r1, [r7, #12]
 8013c9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013ca0:	4013      	ands	r3, r2
 8013ca2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013ca4:	68bb      	ldr	r3, [r7, #8]
 8013ca6:	015a      	lsls	r2, r3, #5
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	4413      	add	r3, r2
 8013cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cb0:	681a      	ldr	r2, [r3, #0]
 8013cb2:	68bb      	ldr	r3, [r7, #8]
 8013cb4:	0159      	lsls	r1, r3, #5
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	440b      	add	r3, r1
 8013cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cbe:	4619      	mov	r1, r3
 8013cc0:	4b05      	ldr	r3, [pc, #20]	; (8013cd8 <USB_DeactivateEndpoint+0x1b4>)
 8013cc2:	4013      	ands	r3, r2
 8013cc4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8013cc6:	2300      	movs	r3, #0
}
 8013cc8:	4618      	mov	r0, r3
 8013cca:	3714      	adds	r7, #20
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd2:	4770      	bx	lr
 8013cd4:	ec337800 	.word	0xec337800
 8013cd8:	eff37800 	.word	0xeff37800

08013cdc <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b086      	sub	sp, #24
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	6078      	str	r0, [r7, #4]
 8013ce4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8013cea:	683b      	ldr	r3, [r7, #0]
 8013cec:	781b      	ldrb	r3, [r3, #0]
 8013cee:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013cf0:	683b      	ldr	r3, [r7, #0]
 8013cf2:	785b      	ldrb	r3, [r3, #1]
 8013cf4:	2b01      	cmp	r3, #1
 8013cf6:	f040 8128 	bne.w	8013f4a <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8013cfa:	683b      	ldr	r3, [r7, #0]
 8013cfc:	691b      	ldr	r3, [r3, #16]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d132      	bne.n	8013d68 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013d02:	693b      	ldr	r3, [r7, #16]
 8013d04:	015a      	lsls	r2, r3, #5
 8013d06:	697b      	ldr	r3, [r7, #20]
 8013d08:	4413      	add	r3, r2
 8013d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d0e:	691b      	ldr	r3, [r3, #16]
 8013d10:	693a      	ldr	r2, [r7, #16]
 8013d12:	0151      	lsls	r1, r2, #5
 8013d14:	697a      	ldr	r2, [r7, #20]
 8013d16:	440a      	add	r2, r1
 8013d18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8013d20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8013d24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013d26:	693b      	ldr	r3, [r7, #16]
 8013d28:	015a      	lsls	r2, r3, #5
 8013d2a:	697b      	ldr	r3, [r7, #20]
 8013d2c:	4413      	add	r3, r2
 8013d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d32:	691b      	ldr	r3, [r3, #16]
 8013d34:	693a      	ldr	r2, [r7, #16]
 8013d36:	0151      	lsls	r1, r2, #5
 8013d38:	697a      	ldr	r2, [r7, #20]
 8013d3a:	440a      	add	r2, r1
 8013d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013d44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013d46:	693b      	ldr	r3, [r7, #16]
 8013d48:	015a      	lsls	r2, r3, #5
 8013d4a:	697b      	ldr	r3, [r7, #20]
 8013d4c:	4413      	add	r3, r2
 8013d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d52:	691b      	ldr	r3, [r3, #16]
 8013d54:	693a      	ldr	r2, [r7, #16]
 8013d56:	0151      	lsls	r1, r2, #5
 8013d58:	697a      	ldr	r2, [r7, #20]
 8013d5a:	440a      	add	r2, r1
 8013d5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d60:	0cdb      	lsrs	r3, r3, #19
 8013d62:	04db      	lsls	r3, r3, #19
 8013d64:	6113      	str	r3, [r2, #16]
 8013d66:	e092      	b.n	8013e8e <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013d68:	693b      	ldr	r3, [r7, #16]
 8013d6a:	015a      	lsls	r2, r3, #5
 8013d6c:	697b      	ldr	r3, [r7, #20]
 8013d6e:	4413      	add	r3, r2
 8013d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d74:	691b      	ldr	r3, [r3, #16]
 8013d76:	693a      	ldr	r2, [r7, #16]
 8013d78:	0151      	lsls	r1, r2, #5
 8013d7a:	697a      	ldr	r2, [r7, #20]
 8013d7c:	440a      	add	r2, r1
 8013d7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d82:	0cdb      	lsrs	r3, r3, #19
 8013d84:	04db      	lsls	r3, r3, #19
 8013d86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013d88:	693b      	ldr	r3, [r7, #16]
 8013d8a:	015a      	lsls	r2, r3, #5
 8013d8c:	697b      	ldr	r3, [r7, #20]
 8013d8e:	4413      	add	r3, r2
 8013d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d94:	691b      	ldr	r3, [r3, #16]
 8013d96:	693a      	ldr	r2, [r7, #16]
 8013d98:	0151      	lsls	r1, r2, #5
 8013d9a:	697a      	ldr	r2, [r7, #20]
 8013d9c:	440a      	add	r2, r1
 8013d9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013da2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8013da6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8013daa:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8013dac:	693b      	ldr	r3, [r7, #16]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d11a      	bne.n	8013de8 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8013db2:	683b      	ldr	r3, [r7, #0]
 8013db4:	691a      	ldr	r2, [r3, #16]
 8013db6:	683b      	ldr	r3, [r7, #0]
 8013db8:	689b      	ldr	r3, [r3, #8]
 8013dba:	429a      	cmp	r2, r3
 8013dbc:	d903      	bls.n	8013dc6 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8013dbe:	683b      	ldr	r3, [r7, #0]
 8013dc0:	689a      	ldr	r2, [r3, #8]
 8013dc2:	683b      	ldr	r3, [r7, #0]
 8013dc4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013dc6:	693b      	ldr	r3, [r7, #16]
 8013dc8:	015a      	lsls	r2, r3, #5
 8013dca:	697b      	ldr	r3, [r7, #20]
 8013dcc:	4413      	add	r3, r2
 8013dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013dd2:	691b      	ldr	r3, [r3, #16]
 8013dd4:	693a      	ldr	r2, [r7, #16]
 8013dd6:	0151      	lsls	r1, r2, #5
 8013dd8:	697a      	ldr	r2, [r7, #20]
 8013dda:	440a      	add	r2, r1
 8013ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013de0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013de4:	6113      	str	r3, [r2, #16]
 8013de6:	e01b      	b.n	8013e20 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013de8:	693b      	ldr	r3, [r7, #16]
 8013dea:	015a      	lsls	r2, r3, #5
 8013dec:	697b      	ldr	r3, [r7, #20]
 8013dee:	4413      	add	r3, r2
 8013df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013df4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8013df6:	683b      	ldr	r3, [r7, #0]
 8013df8:	6919      	ldr	r1, [r3, #16]
 8013dfa:	683b      	ldr	r3, [r7, #0]
 8013dfc:	689b      	ldr	r3, [r3, #8]
 8013dfe:	440b      	add	r3, r1
 8013e00:	1e59      	subs	r1, r3, #1
 8013e02:	683b      	ldr	r3, [r7, #0]
 8013e04:	689b      	ldr	r3, [r3, #8]
 8013e06:	fbb1 f3f3 	udiv	r3, r1, r3
 8013e0a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013e0c:	4b8d      	ldr	r3, [pc, #564]	; (8014044 <USB_EPStartXfer+0x368>)
 8013e0e:	400b      	ands	r3, r1
 8013e10:	6939      	ldr	r1, [r7, #16]
 8013e12:	0148      	lsls	r0, r1, #5
 8013e14:	6979      	ldr	r1, [r7, #20]
 8013e16:	4401      	add	r1, r0
 8013e18:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013e1c:	4313      	orrs	r3, r2
 8013e1e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013e20:	693b      	ldr	r3, [r7, #16]
 8013e22:	015a      	lsls	r2, r3, #5
 8013e24:	697b      	ldr	r3, [r7, #20]
 8013e26:	4413      	add	r3, r2
 8013e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e2c:	691a      	ldr	r2, [r3, #16]
 8013e2e:	683b      	ldr	r3, [r7, #0]
 8013e30:	691b      	ldr	r3, [r3, #16]
 8013e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013e36:	6939      	ldr	r1, [r7, #16]
 8013e38:	0148      	lsls	r0, r1, #5
 8013e3a:	6979      	ldr	r1, [r7, #20]
 8013e3c:	4401      	add	r1, r0
 8013e3e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013e42:	4313      	orrs	r3, r2
 8013e44:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8013e46:	683b      	ldr	r3, [r7, #0]
 8013e48:	791b      	ldrb	r3, [r3, #4]
 8013e4a:	2b01      	cmp	r3, #1
 8013e4c:	d11f      	bne.n	8013e8e <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013e4e:	693b      	ldr	r3, [r7, #16]
 8013e50:	015a      	lsls	r2, r3, #5
 8013e52:	697b      	ldr	r3, [r7, #20]
 8013e54:	4413      	add	r3, r2
 8013e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e5a:	691b      	ldr	r3, [r3, #16]
 8013e5c:	693a      	ldr	r2, [r7, #16]
 8013e5e:	0151      	lsls	r1, r2, #5
 8013e60:	697a      	ldr	r2, [r7, #20]
 8013e62:	440a      	add	r2, r1
 8013e64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013e68:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013e6c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8013e6e:	693b      	ldr	r3, [r7, #16]
 8013e70:	015a      	lsls	r2, r3, #5
 8013e72:	697b      	ldr	r3, [r7, #20]
 8013e74:	4413      	add	r3, r2
 8013e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e7a:	691b      	ldr	r3, [r3, #16]
 8013e7c:	693a      	ldr	r2, [r7, #16]
 8013e7e:	0151      	lsls	r1, r2, #5
 8013e80:	697a      	ldr	r2, [r7, #20]
 8013e82:	440a      	add	r2, r1
 8013e84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013e88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013e8c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013e8e:	693b      	ldr	r3, [r7, #16]
 8013e90:	015a      	lsls	r2, r3, #5
 8013e92:	697b      	ldr	r3, [r7, #20]
 8013e94:	4413      	add	r3, r2
 8013e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	693a      	ldr	r2, [r7, #16]
 8013e9e:	0151      	lsls	r1, r2, #5
 8013ea0:	697a      	ldr	r2, [r7, #20]
 8013ea2:	440a      	add	r2, r1
 8013ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ea8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013eac:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8013eae:	683b      	ldr	r3, [r7, #0]
 8013eb0:	791b      	ldrb	r3, [r3, #4]
 8013eb2:	2b01      	cmp	r3, #1
 8013eb4:	d015      	beq.n	8013ee2 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8013eb6:	683b      	ldr	r3, [r7, #0]
 8013eb8:	691b      	ldr	r3, [r3, #16]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	f000 8139 	beq.w	8014132 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013ec0:	697b      	ldr	r3, [r7, #20]
 8013ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ec6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013ec8:	683b      	ldr	r3, [r7, #0]
 8013eca:	781b      	ldrb	r3, [r3, #0]
 8013ecc:	f003 030f 	and.w	r3, r3, #15
 8013ed0:	2101      	movs	r1, #1
 8013ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8013ed6:	6979      	ldr	r1, [r7, #20]
 8013ed8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013edc:	4313      	orrs	r3, r2
 8013ede:	634b      	str	r3, [r1, #52]	; 0x34
 8013ee0:	e127      	b.n	8014132 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013ee2:	697b      	ldr	r3, [r7, #20]
 8013ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ee8:	689b      	ldr	r3, [r3, #8]
 8013eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d110      	bne.n	8013f14 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013ef2:	693b      	ldr	r3, [r7, #16]
 8013ef4:	015a      	lsls	r2, r3, #5
 8013ef6:	697b      	ldr	r3, [r7, #20]
 8013ef8:	4413      	add	r3, r2
 8013efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	693a      	ldr	r2, [r7, #16]
 8013f02:	0151      	lsls	r1, r2, #5
 8013f04:	697a      	ldr	r2, [r7, #20]
 8013f06:	440a      	add	r2, r1
 8013f08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013f0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013f10:	6013      	str	r3, [r2, #0]
 8013f12:	e00f      	b.n	8013f34 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013f14:	693b      	ldr	r3, [r7, #16]
 8013f16:	015a      	lsls	r2, r3, #5
 8013f18:	697b      	ldr	r3, [r7, #20]
 8013f1a:	4413      	add	r3, r2
 8013f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	693a      	ldr	r2, [r7, #16]
 8013f24:	0151      	lsls	r1, r2, #5
 8013f26:	697a      	ldr	r2, [r7, #20]
 8013f28:	440a      	add	r2, r1
 8013f2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013f32:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8013f34:	683b      	ldr	r3, [r7, #0]
 8013f36:	68d9      	ldr	r1, [r3, #12]
 8013f38:	683b      	ldr	r3, [r7, #0]
 8013f3a:	781a      	ldrb	r2, [r3, #0]
 8013f3c:	683b      	ldr	r3, [r7, #0]
 8013f3e:	691b      	ldr	r3, [r3, #16]
 8013f40:	b29b      	uxth	r3, r3
 8013f42:	6878      	ldr	r0, [r7, #4]
 8013f44:	f000 f9a6 	bl	8014294 <USB_WritePacket>
 8013f48:	e0f3      	b.n	8014132 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013f4a:	693b      	ldr	r3, [r7, #16]
 8013f4c:	015a      	lsls	r2, r3, #5
 8013f4e:	697b      	ldr	r3, [r7, #20]
 8013f50:	4413      	add	r3, r2
 8013f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f56:	691b      	ldr	r3, [r3, #16]
 8013f58:	693a      	ldr	r2, [r7, #16]
 8013f5a:	0151      	lsls	r1, r2, #5
 8013f5c:	697a      	ldr	r2, [r7, #20]
 8013f5e:	440a      	add	r2, r1
 8013f60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013f64:	0cdb      	lsrs	r3, r3, #19
 8013f66:	04db      	lsls	r3, r3, #19
 8013f68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013f6a:	693b      	ldr	r3, [r7, #16]
 8013f6c:	015a      	lsls	r2, r3, #5
 8013f6e:	697b      	ldr	r3, [r7, #20]
 8013f70:	4413      	add	r3, r2
 8013f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f76:	691b      	ldr	r3, [r3, #16]
 8013f78:	693a      	ldr	r2, [r7, #16]
 8013f7a:	0151      	lsls	r1, r2, #5
 8013f7c:	697a      	ldr	r2, [r7, #20]
 8013f7e:	440a      	add	r2, r1
 8013f80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013f84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8013f88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8013f8c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8013f8e:	693b      	ldr	r3, [r7, #16]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d12f      	bne.n	8013ff4 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8013f94:	683b      	ldr	r3, [r7, #0]
 8013f96:	691b      	ldr	r3, [r3, #16]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d003      	beq.n	8013fa4 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8013f9c:	683b      	ldr	r3, [r7, #0]
 8013f9e:	689a      	ldr	r2, [r3, #8]
 8013fa0:	683b      	ldr	r3, [r7, #0]
 8013fa2:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8013fa4:	683b      	ldr	r3, [r7, #0]
 8013fa6:	689a      	ldr	r2, [r3, #8]
 8013fa8:	683b      	ldr	r3, [r7, #0]
 8013faa:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8013fac:	693b      	ldr	r3, [r7, #16]
 8013fae:	015a      	lsls	r2, r3, #5
 8013fb0:	697b      	ldr	r3, [r7, #20]
 8013fb2:	4413      	add	r3, r2
 8013fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fb8:	691a      	ldr	r2, [r3, #16]
 8013fba:	683b      	ldr	r3, [r7, #0]
 8013fbc:	6a1b      	ldr	r3, [r3, #32]
 8013fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013fc2:	6939      	ldr	r1, [r7, #16]
 8013fc4:	0148      	lsls	r0, r1, #5
 8013fc6:	6979      	ldr	r1, [r7, #20]
 8013fc8:	4401      	add	r1, r0
 8013fca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013fce:	4313      	orrs	r3, r2
 8013fd0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013fd2:	693b      	ldr	r3, [r7, #16]
 8013fd4:	015a      	lsls	r2, r3, #5
 8013fd6:	697b      	ldr	r3, [r7, #20]
 8013fd8:	4413      	add	r3, r2
 8013fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fde:	691b      	ldr	r3, [r3, #16]
 8013fe0:	693a      	ldr	r2, [r7, #16]
 8013fe2:	0151      	lsls	r1, r2, #5
 8013fe4:	697a      	ldr	r2, [r7, #20]
 8013fe6:	440a      	add	r2, r1
 8013fe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013fec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013ff0:	6113      	str	r3, [r2, #16]
 8013ff2:	e061      	b.n	80140b8 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8013ff4:	683b      	ldr	r3, [r7, #0]
 8013ff6:	691b      	ldr	r3, [r3, #16]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d125      	bne.n	8014048 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013ffc:	693b      	ldr	r3, [r7, #16]
 8013ffe:	015a      	lsls	r2, r3, #5
 8014000:	697b      	ldr	r3, [r7, #20]
 8014002:	4413      	add	r3, r2
 8014004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014008:	691a      	ldr	r2, [r3, #16]
 801400a:	683b      	ldr	r3, [r7, #0]
 801400c:	689b      	ldr	r3, [r3, #8]
 801400e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014012:	6939      	ldr	r1, [r7, #16]
 8014014:	0148      	lsls	r0, r1, #5
 8014016:	6979      	ldr	r1, [r7, #20]
 8014018:	4401      	add	r1, r0
 801401a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801401e:	4313      	orrs	r3, r2
 8014020:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014022:	693b      	ldr	r3, [r7, #16]
 8014024:	015a      	lsls	r2, r3, #5
 8014026:	697b      	ldr	r3, [r7, #20]
 8014028:	4413      	add	r3, r2
 801402a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801402e:	691b      	ldr	r3, [r3, #16]
 8014030:	693a      	ldr	r2, [r7, #16]
 8014032:	0151      	lsls	r1, r2, #5
 8014034:	697a      	ldr	r2, [r7, #20]
 8014036:	440a      	add	r2, r1
 8014038:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801403c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014040:	6113      	str	r3, [r2, #16]
 8014042:	e039      	b.n	80140b8 <USB_EPStartXfer+0x3dc>
 8014044:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014048:	683b      	ldr	r3, [r7, #0]
 801404a:	691a      	ldr	r2, [r3, #16]
 801404c:	683b      	ldr	r3, [r7, #0]
 801404e:	689b      	ldr	r3, [r3, #8]
 8014050:	4413      	add	r3, r2
 8014052:	1e5a      	subs	r2, r3, #1
 8014054:	683b      	ldr	r3, [r7, #0]
 8014056:	689b      	ldr	r3, [r3, #8]
 8014058:	fbb2 f3f3 	udiv	r3, r2, r3
 801405c:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 801405e:	683b      	ldr	r3, [r7, #0]
 8014060:	689b      	ldr	r3, [r3, #8]
 8014062:	89fa      	ldrh	r2, [r7, #14]
 8014064:	fb03 f202 	mul.w	r2, r3, r2
 8014068:	683b      	ldr	r3, [r7, #0]
 801406a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801406c:	693b      	ldr	r3, [r7, #16]
 801406e:	015a      	lsls	r2, r3, #5
 8014070:	697b      	ldr	r3, [r7, #20]
 8014072:	4413      	add	r3, r2
 8014074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014078:	691a      	ldr	r2, [r3, #16]
 801407a:	89fb      	ldrh	r3, [r7, #14]
 801407c:	04d9      	lsls	r1, r3, #19
 801407e:	4b2f      	ldr	r3, [pc, #188]	; (801413c <USB_EPStartXfer+0x460>)
 8014080:	400b      	ands	r3, r1
 8014082:	6939      	ldr	r1, [r7, #16]
 8014084:	0148      	lsls	r0, r1, #5
 8014086:	6979      	ldr	r1, [r7, #20]
 8014088:	4401      	add	r1, r0
 801408a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801408e:	4313      	orrs	r3, r2
 8014090:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8014092:	693b      	ldr	r3, [r7, #16]
 8014094:	015a      	lsls	r2, r3, #5
 8014096:	697b      	ldr	r3, [r7, #20]
 8014098:	4413      	add	r3, r2
 801409a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801409e:	691a      	ldr	r2, [r3, #16]
 80140a0:	683b      	ldr	r3, [r7, #0]
 80140a2:	6a1b      	ldr	r3, [r3, #32]
 80140a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80140a8:	6939      	ldr	r1, [r7, #16]
 80140aa:	0148      	lsls	r0, r1, #5
 80140ac:	6979      	ldr	r1, [r7, #20]
 80140ae:	4401      	add	r1, r0
 80140b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80140b4:	4313      	orrs	r3, r2
 80140b6:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80140b8:	683b      	ldr	r3, [r7, #0]
 80140ba:	791b      	ldrb	r3, [r3, #4]
 80140bc:	2b01      	cmp	r3, #1
 80140be:	d128      	bne.n	8014112 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80140c0:	697b      	ldr	r3, [r7, #20]
 80140c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80140c6:	689b      	ldr	r3, [r3, #8]
 80140c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d110      	bne.n	80140f2 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80140d0:	693b      	ldr	r3, [r7, #16]
 80140d2:	015a      	lsls	r2, r3, #5
 80140d4:	697b      	ldr	r3, [r7, #20]
 80140d6:	4413      	add	r3, r2
 80140d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	693a      	ldr	r2, [r7, #16]
 80140e0:	0151      	lsls	r1, r2, #5
 80140e2:	697a      	ldr	r2, [r7, #20]
 80140e4:	440a      	add	r2, r1
 80140e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80140ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80140ee:	6013      	str	r3, [r2, #0]
 80140f0:	e00f      	b.n	8014112 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80140f2:	693b      	ldr	r3, [r7, #16]
 80140f4:	015a      	lsls	r2, r3, #5
 80140f6:	697b      	ldr	r3, [r7, #20]
 80140f8:	4413      	add	r3, r2
 80140fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	693a      	ldr	r2, [r7, #16]
 8014102:	0151      	lsls	r1, r2, #5
 8014104:	697a      	ldr	r2, [r7, #20]
 8014106:	440a      	add	r2, r1
 8014108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801410c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014110:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014112:	693b      	ldr	r3, [r7, #16]
 8014114:	015a      	lsls	r2, r3, #5
 8014116:	697b      	ldr	r3, [r7, #20]
 8014118:	4413      	add	r3, r2
 801411a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	693a      	ldr	r2, [r7, #16]
 8014122:	0151      	lsls	r1, r2, #5
 8014124:	697a      	ldr	r2, [r7, #20]
 8014126:	440a      	add	r2, r1
 8014128:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801412c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014130:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014132:	2300      	movs	r3, #0
}
 8014134:	4618      	mov	r0, r3
 8014136:	3718      	adds	r7, #24
 8014138:	46bd      	mov	sp, r7
 801413a:	bd80      	pop	{r7, pc}
 801413c:	1ff80000 	.word	0x1ff80000

08014140 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014140:	b480      	push	{r7}
 8014142:	b087      	sub	sp, #28
 8014144:	af00      	add	r7, sp, #0
 8014146:	6078      	str	r0, [r7, #4]
 8014148:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801414a:	2300      	movs	r3, #0
 801414c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801414e:	2300      	movs	r3, #0
 8014150:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014156:	683b      	ldr	r3, [r7, #0]
 8014158:	785b      	ldrb	r3, [r3, #1]
 801415a:	2b01      	cmp	r3, #1
 801415c:	d14a      	bne.n	80141f4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801415e:	683b      	ldr	r3, [r7, #0]
 8014160:	781b      	ldrb	r3, [r3, #0]
 8014162:	015a      	lsls	r2, r3, #5
 8014164:	693b      	ldr	r3, [r7, #16]
 8014166:	4413      	add	r3, r2
 8014168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014172:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014176:	f040 8086 	bne.w	8014286 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801417a:	683b      	ldr	r3, [r7, #0]
 801417c:	781b      	ldrb	r3, [r3, #0]
 801417e:	015a      	lsls	r2, r3, #5
 8014180:	693b      	ldr	r3, [r7, #16]
 8014182:	4413      	add	r3, r2
 8014184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	683a      	ldr	r2, [r7, #0]
 801418c:	7812      	ldrb	r2, [r2, #0]
 801418e:	0151      	lsls	r1, r2, #5
 8014190:	693a      	ldr	r2, [r7, #16]
 8014192:	440a      	add	r2, r1
 8014194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014198:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801419c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801419e:	683b      	ldr	r3, [r7, #0]
 80141a0:	781b      	ldrb	r3, [r3, #0]
 80141a2:	015a      	lsls	r2, r3, #5
 80141a4:	693b      	ldr	r3, [r7, #16]
 80141a6:	4413      	add	r3, r2
 80141a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	683a      	ldr	r2, [r7, #0]
 80141b0:	7812      	ldrb	r2, [r2, #0]
 80141b2:	0151      	lsls	r1, r2, #5
 80141b4:	693a      	ldr	r2, [r7, #16]
 80141b6:	440a      	add	r2, r1
 80141b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80141bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80141c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	3301      	adds	r3, #1
 80141c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80141ce:	4293      	cmp	r3, r2
 80141d0:	d902      	bls.n	80141d8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80141d2:	2301      	movs	r3, #1
 80141d4:	75fb      	strb	r3, [r7, #23]
          break;
 80141d6:	e056      	b.n	8014286 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80141d8:	683b      	ldr	r3, [r7, #0]
 80141da:	781b      	ldrb	r3, [r3, #0]
 80141dc:	015a      	lsls	r2, r3, #5
 80141de:	693b      	ldr	r3, [r7, #16]
 80141e0:	4413      	add	r3, r2
 80141e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80141ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80141f0:	d0e7      	beq.n	80141c2 <USB_EPStopXfer+0x82>
 80141f2:	e048      	b.n	8014286 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80141f4:	683b      	ldr	r3, [r7, #0]
 80141f6:	781b      	ldrb	r3, [r3, #0]
 80141f8:	015a      	lsls	r2, r3, #5
 80141fa:	693b      	ldr	r3, [r7, #16]
 80141fc:	4413      	add	r3, r2
 80141fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014208:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801420c:	d13b      	bne.n	8014286 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801420e:	683b      	ldr	r3, [r7, #0]
 8014210:	781b      	ldrb	r3, [r3, #0]
 8014212:	015a      	lsls	r2, r3, #5
 8014214:	693b      	ldr	r3, [r7, #16]
 8014216:	4413      	add	r3, r2
 8014218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	683a      	ldr	r2, [r7, #0]
 8014220:	7812      	ldrb	r2, [r2, #0]
 8014222:	0151      	lsls	r1, r2, #5
 8014224:	693a      	ldr	r2, [r7, #16]
 8014226:	440a      	add	r2, r1
 8014228:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801422c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014230:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8014232:	683b      	ldr	r3, [r7, #0]
 8014234:	781b      	ldrb	r3, [r3, #0]
 8014236:	015a      	lsls	r2, r3, #5
 8014238:	693b      	ldr	r3, [r7, #16]
 801423a:	4413      	add	r3, r2
 801423c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	683a      	ldr	r2, [r7, #0]
 8014244:	7812      	ldrb	r2, [r2, #0]
 8014246:	0151      	lsls	r1, r2, #5
 8014248:	693a      	ldr	r2, [r7, #16]
 801424a:	440a      	add	r2, r1
 801424c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014250:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014254:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	3301      	adds	r3, #1
 801425a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	f242 7210 	movw	r2, #10000	; 0x2710
 8014262:	4293      	cmp	r3, r2
 8014264:	d902      	bls.n	801426c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8014266:	2301      	movs	r3, #1
 8014268:	75fb      	strb	r3, [r7, #23]
          break;
 801426a:	e00c      	b.n	8014286 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801426c:	683b      	ldr	r3, [r7, #0]
 801426e:	781b      	ldrb	r3, [r3, #0]
 8014270:	015a      	lsls	r2, r3, #5
 8014272:	693b      	ldr	r3, [r7, #16]
 8014274:	4413      	add	r3, r2
 8014276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014280:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014284:	d0e7      	beq.n	8014256 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8014286:	7dfb      	ldrb	r3, [r7, #23]
}
 8014288:	4618      	mov	r0, r3
 801428a:	371c      	adds	r7, #28
 801428c:	46bd      	mov	sp, r7
 801428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014292:	4770      	bx	lr

08014294 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8014294:	b480      	push	{r7}
 8014296:	b089      	sub	sp, #36	; 0x24
 8014298:	af00      	add	r7, sp, #0
 801429a:	60f8      	str	r0, [r7, #12]
 801429c:	60b9      	str	r1, [r7, #8]
 801429e:	4611      	mov	r1, r2
 80142a0:	461a      	mov	r2, r3
 80142a2:	460b      	mov	r3, r1
 80142a4:	71fb      	strb	r3, [r7, #7]
 80142a6:	4613      	mov	r3, r2
 80142a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80142ae:	68bb      	ldr	r3, [r7, #8]
 80142b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80142b2:	88bb      	ldrh	r3, [r7, #4]
 80142b4:	3303      	adds	r3, #3
 80142b6:	089b      	lsrs	r3, r3, #2
 80142b8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80142ba:	2300      	movs	r3, #0
 80142bc:	61bb      	str	r3, [r7, #24]
 80142be:	e018      	b.n	80142f2 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80142c0:	79fb      	ldrb	r3, [r7, #7]
 80142c2:	031a      	lsls	r2, r3, #12
 80142c4:	697b      	ldr	r3, [r7, #20]
 80142c6:	4413      	add	r3, r2
 80142c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80142cc:	461a      	mov	r2, r3
 80142ce:	69fb      	ldr	r3, [r7, #28]
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	6013      	str	r3, [r2, #0]
    pSrc++;
 80142d4:	69fb      	ldr	r3, [r7, #28]
 80142d6:	3301      	adds	r3, #1
 80142d8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80142da:	69fb      	ldr	r3, [r7, #28]
 80142dc:	3301      	adds	r3, #1
 80142de:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80142e0:	69fb      	ldr	r3, [r7, #28]
 80142e2:	3301      	adds	r3, #1
 80142e4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80142e6:	69fb      	ldr	r3, [r7, #28]
 80142e8:	3301      	adds	r3, #1
 80142ea:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80142ec:	69bb      	ldr	r3, [r7, #24]
 80142ee:	3301      	adds	r3, #1
 80142f0:	61bb      	str	r3, [r7, #24]
 80142f2:	69ba      	ldr	r2, [r7, #24]
 80142f4:	693b      	ldr	r3, [r7, #16]
 80142f6:	429a      	cmp	r2, r3
 80142f8:	d3e2      	bcc.n	80142c0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80142fa:	2300      	movs	r3, #0
}
 80142fc:	4618      	mov	r0, r3
 80142fe:	3724      	adds	r7, #36	; 0x24
 8014300:	46bd      	mov	sp, r7
 8014302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014306:	4770      	bx	lr

08014308 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8014308:	b480      	push	{r7}
 801430a:	b08b      	sub	sp, #44	; 0x2c
 801430c:	af00      	add	r7, sp, #0
 801430e:	60f8      	str	r0, [r7, #12]
 8014310:	60b9      	str	r1, [r7, #8]
 8014312:	4613      	mov	r3, r2
 8014314:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801431a:	68bb      	ldr	r3, [r7, #8]
 801431c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801431e:	88fb      	ldrh	r3, [r7, #6]
 8014320:	089b      	lsrs	r3, r3, #2
 8014322:	b29b      	uxth	r3, r3
 8014324:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8014326:	88fb      	ldrh	r3, [r7, #6]
 8014328:	f003 0303 	and.w	r3, r3, #3
 801432c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801432e:	2300      	movs	r3, #0
 8014330:	623b      	str	r3, [r7, #32]
 8014332:	e014      	b.n	801435e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014334:	69bb      	ldr	r3, [r7, #24]
 8014336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801433a:	681a      	ldr	r2, [r3, #0]
 801433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801433e:	601a      	str	r2, [r3, #0]
    pDest++;
 8014340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014342:	3301      	adds	r3, #1
 8014344:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014348:	3301      	adds	r3, #1
 801434a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801434e:	3301      	adds	r3, #1
 8014350:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014354:	3301      	adds	r3, #1
 8014356:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8014358:	6a3b      	ldr	r3, [r7, #32]
 801435a:	3301      	adds	r3, #1
 801435c:	623b      	str	r3, [r7, #32]
 801435e:	6a3a      	ldr	r2, [r7, #32]
 8014360:	697b      	ldr	r3, [r7, #20]
 8014362:	429a      	cmp	r2, r3
 8014364:	d3e6      	bcc.n	8014334 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8014366:	8bfb      	ldrh	r3, [r7, #30]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d01e      	beq.n	80143aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801436c:	2300      	movs	r3, #0
 801436e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014370:	69bb      	ldr	r3, [r7, #24]
 8014372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014376:	461a      	mov	r2, r3
 8014378:	f107 0310 	add.w	r3, r7, #16
 801437c:	6812      	ldr	r2, [r2, #0]
 801437e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8014380:	693a      	ldr	r2, [r7, #16]
 8014382:	6a3b      	ldr	r3, [r7, #32]
 8014384:	b2db      	uxtb	r3, r3
 8014386:	00db      	lsls	r3, r3, #3
 8014388:	fa22 f303 	lsr.w	r3, r2, r3
 801438c:	b2da      	uxtb	r2, r3
 801438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014390:	701a      	strb	r2, [r3, #0]
      i++;
 8014392:	6a3b      	ldr	r3, [r7, #32]
 8014394:	3301      	adds	r3, #1
 8014396:	623b      	str	r3, [r7, #32]
      pDest++;
 8014398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801439a:	3301      	adds	r3, #1
 801439c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801439e:	8bfb      	ldrh	r3, [r7, #30]
 80143a0:	3b01      	subs	r3, #1
 80143a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80143a4:	8bfb      	ldrh	r3, [r7, #30]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d1ea      	bne.n	8014380 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80143aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80143ac:	4618      	mov	r0, r3
 80143ae:	372c      	adds	r7, #44	; 0x2c
 80143b0:	46bd      	mov	sp, r7
 80143b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143b6:	4770      	bx	lr

080143b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80143b8:	b480      	push	{r7}
 80143ba:	b085      	sub	sp, #20
 80143bc:	af00      	add	r7, sp, #0
 80143be:	6078      	str	r0, [r7, #4]
 80143c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80143c6:	683b      	ldr	r3, [r7, #0]
 80143c8:	781b      	ldrb	r3, [r3, #0]
 80143ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80143cc:	683b      	ldr	r3, [r7, #0]
 80143ce:	785b      	ldrb	r3, [r3, #1]
 80143d0:	2b01      	cmp	r3, #1
 80143d2:	d12c      	bne.n	801442e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80143d4:	68bb      	ldr	r3, [r7, #8]
 80143d6:	015a      	lsls	r2, r3, #5
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	4413      	add	r3, r2
 80143dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	db12      	blt.n	801440c <USB_EPSetStall+0x54>
 80143e6:	68bb      	ldr	r3, [r7, #8]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d00f      	beq.n	801440c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80143ec:	68bb      	ldr	r3, [r7, #8]
 80143ee:	015a      	lsls	r2, r3, #5
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	4413      	add	r3, r2
 80143f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	68ba      	ldr	r2, [r7, #8]
 80143fc:	0151      	lsls	r1, r2, #5
 80143fe:	68fa      	ldr	r2, [r7, #12]
 8014400:	440a      	add	r2, r1
 8014402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014406:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801440a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801440c:	68bb      	ldr	r3, [r7, #8]
 801440e:	015a      	lsls	r2, r3, #5
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	4413      	add	r3, r2
 8014414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	68ba      	ldr	r2, [r7, #8]
 801441c:	0151      	lsls	r1, r2, #5
 801441e:	68fa      	ldr	r2, [r7, #12]
 8014420:	440a      	add	r2, r1
 8014422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014426:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801442a:	6013      	str	r3, [r2, #0]
 801442c:	e02b      	b.n	8014486 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801442e:	68bb      	ldr	r3, [r7, #8]
 8014430:	015a      	lsls	r2, r3, #5
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	4413      	add	r3, r2
 8014436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	2b00      	cmp	r3, #0
 801443e:	db12      	blt.n	8014466 <USB_EPSetStall+0xae>
 8014440:	68bb      	ldr	r3, [r7, #8]
 8014442:	2b00      	cmp	r3, #0
 8014444:	d00f      	beq.n	8014466 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8014446:	68bb      	ldr	r3, [r7, #8]
 8014448:	015a      	lsls	r2, r3, #5
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	4413      	add	r3, r2
 801444e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	68ba      	ldr	r2, [r7, #8]
 8014456:	0151      	lsls	r1, r2, #5
 8014458:	68fa      	ldr	r2, [r7, #12]
 801445a:	440a      	add	r2, r1
 801445c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014460:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014464:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8014466:	68bb      	ldr	r3, [r7, #8]
 8014468:	015a      	lsls	r2, r3, #5
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	4413      	add	r3, r2
 801446e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	68ba      	ldr	r2, [r7, #8]
 8014476:	0151      	lsls	r1, r2, #5
 8014478:	68fa      	ldr	r2, [r7, #12]
 801447a:	440a      	add	r2, r1
 801447c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014480:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014484:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014486:	2300      	movs	r3, #0
}
 8014488:	4618      	mov	r0, r3
 801448a:	3714      	adds	r7, #20
 801448c:	46bd      	mov	sp, r7
 801448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014492:	4770      	bx	lr

08014494 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014494:	b480      	push	{r7}
 8014496:	b085      	sub	sp, #20
 8014498:	af00      	add	r7, sp, #0
 801449a:	6078      	str	r0, [r7, #4]
 801449c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80144a2:	683b      	ldr	r3, [r7, #0]
 80144a4:	781b      	ldrb	r3, [r3, #0]
 80144a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80144a8:	683b      	ldr	r3, [r7, #0]
 80144aa:	785b      	ldrb	r3, [r3, #1]
 80144ac:	2b01      	cmp	r3, #1
 80144ae:	d128      	bne.n	8014502 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80144b0:	68bb      	ldr	r3, [r7, #8]
 80144b2:	015a      	lsls	r2, r3, #5
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	4413      	add	r3, r2
 80144b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	68ba      	ldr	r2, [r7, #8]
 80144c0:	0151      	lsls	r1, r2, #5
 80144c2:	68fa      	ldr	r2, [r7, #12]
 80144c4:	440a      	add	r2, r1
 80144c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80144ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80144ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80144d0:	683b      	ldr	r3, [r7, #0]
 80144d2:	791b      	ldrb	r3, [r3, #4]
 80144d4:	2b03      	cmp	r3, #3
 80144d6:	d003      	beq.n	80144e0 <USB_EPClearStall+0x4c>
 80144d8:	683b      	ldr	r3, [r7, #0]
 80144da:	791b      	ldrb	r3, [r3, #4]
 80144dc:	2b02      	cmp	r3, #2
 80144de:	d138      	bne.n	8014552 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80144e0:	68bb      	ldr	r3, [r7, #8]
 80144e2:	015a      	lsls	r2, r3, #5
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	4413      	add	r3, r2
 80144e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	68ba      	ldr	r2, [r7, #8]
 80144f0:	0151      	lsls	r1, r2, #5
 80144f2:	68fa      	ldr	r2, [r7, #12]
 80144f4:	440a      	add	r2, r1
 80144f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80144fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80144fe:	6013      	str	r3, [r2, #0]
 8014500:	e027      	b.n	8014552 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8014502:	68bb      	ldr	r3, [r7, #8]
 8014504:	015a      	lsls	r2, r3, #5
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	4413      	add	r3, r2
 801450a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	68ba      	ldr	r2, [r7, #8]
 8014512:	0151      	lsls	r1, r2, #5
 8014514:	68fa      	ldr	r2, [r7, #12]
 8014516:	440a      	add	r2, r1
 8014518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801451c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014520:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014522:	683b      	ldr	r3, [r7, #0]
 8014524:	791b      	ldrb	r3, [r3, #4]
 8014526:	2b03      	cmp	r3, #3
 8014528:	d003      	beq.n	8014532 <USB_EPClearStall+0x9e>
 801452a:	683b      	ldr	r3, [r7, #0]
 801452c:	791b      	ldrb	r3, [r3, #4]
 801452e:	2b02      	cmp	r3, #2
 8014530:	d10f      	bne.n	8014552 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014532:	68bb      	ldr	r3, [r7, #8]
 8014534:	015a      	lsls	r2, r3, #5
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	4413      	add	r3, r2
 801453a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	68ba      	ldr	r2, [r7, #8]
 8014542:	0151      	lsls	r1, r2, #5
 8014544:	68fa      	ldr	r2, [r7, #12]
 8014546:	440a      	add	r2, r1
 8014548:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801454c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014550:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8014552:	2300      	movs	r3, #0
}
 8014554:	4618      	mov	r0, r3
 8014556:	3714      	adds	r7, #20
 8014558:	46bd      	mov	sp, r7
 801455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801455e:	4770      	bx	lr

08014560 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8014560:	b480      	push	{r7}
 8014562:	b085      	sub	sp, #20
 8014564:	af00      	add	r7, sp, #0
 8014566:	6078      	str	r0, [r7, #4]
 8014568:	460b      	mov	r3, r1
 801456a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	68fa      	ldr	r2, [r7, #12]
 801457a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801457e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8014582:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801458a:	681a      	ldr	r2, [r3, #0]
 801458c:	78fb      	ldrb	r3, [r7, #3]
 801458e:	011b      	lsls	r3, r3, #4
 8014590:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8014594:	68f9      	ldr	r1, [r7, #12]
 8014596:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801459a:	4313      	orrs	r3, r2
 801459c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801459e:	2300      	movs	r3, #0
}
 80145a0:	4618      	mov	r0, r3
 80145a2:	3714      	adds	r7, #20
 80145a4:	46bd      	mov	sp, r7
 80145a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145aa:	4770      	bx	lr

080145ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80145ac:	b480      	push	{r7}
 80145ae:	b085      	sub	sp, #20
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	68fa      	ldr	r2, [r7, #12]
 80145c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80145c6:	f023 0303 	bic.w	r3, r3, #3
 80145ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80145d2:	685b      	ldr	r3, [r3, #4]
 80145d4:	68fa      	ldr	r2, [r7, #12]
 80145d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80145da:	f023 0302 	bic.w	r3, r3, #2
 80145de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80145e0:	2300      	movs	r3, #0
}
 80145e2:	4618      	mov	r0, r3
 80145e4:	3714      	adds	r7, #20
 80145e6:	46bd      	mov	sp, r7
 80145e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ec:	4770      	bx	lr

080145ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80145ee:	b480      	push	{r7}
 80145f0:	b085      	sub	sp, #20
 80145f2:	af00      	add	r7, sp, #0
 80145f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	68fa      	ldr	r2, [r7, #12]
 8014604:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014608:	f023 0303 	bic.w	r3, r3, #3
 801460c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014614:	685b      	ldr	r3, [r3, #4]
 8014616:	68fa      	ldr	r2, [r7, #12]
 8014618:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801461c:	f043 0302 	orr.w	r3, r3, #2
 8014620:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014622:	2300      	movs	r3, #0
}
 8014624:	4618      	mov	r0, r3
 8014626:	3714      	adds	r7, #20
 8014628:	46bd      	mov	sp, r7
 801462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801462e:	4770      	bx	lr

08014630 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8014630:	b480      	push	{r7}
 8014632:	b085      	sub	sp, #20
 8014634:	af00      	add	r7, sp, #0
 8014636:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	695b      	ldr	r3, [r3, #20]
 801463c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	699b      	ldr	r3, [r3, #24]
 8014642:	68fa      	ldr	r2, [r7, #12]
 8014644:	4013      	ands	r3, r2
 8014646:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014648:	68fb      	ldr	r3, [r7, #12]
}
 801464a:	4618      	mov	r0, r3
 801464c:	3714      	adds	r7, #20
 801464e:	46bd      	mov	sp, r7
 8014650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014654:	4770      	bx	lr

08014656 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014656:	b480      	push	{r7}
 8014658:	b085      	sub	sp, #20
 801465a:	af00      	add	r7, sp, #0
 801465c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014668:	699b      	ldr	r3, [r3, #24]
 801466a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014672:	69db      	ldr	r3, [r3, #28]
 8014674:	68ba      	ldr	r2, [r7, #8]
 8014676:	4013      	ands	r3, r2
 8014678:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801467a:	68bb      	ldr	r3, [r7, #8]
 801467c:	0c1b      	lsrs	r3, r3, #16
}
 801467e:	4618      	mov	r0, r3
 8014680:	3714      	adds	r7, #20
 8014682:	46bd      	mov	sp, r7
 8014684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014688:	4770      	bx	lr

0801468a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801468a:	b480      	push	{r7}
 801468c:	b085      	sub	sp, #20
 801468e:	af00      	add	r7, sp, #0
 8014690:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801469c:	699b      	ldr	r3, [r3, #24]
 801469e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80146a6:	69db      	ldr	r3, [r3, #28]
 80146a8:	68ba      	ldr	r2, [r7, #8]
 80146aa:	4013      	ands	r3, r2
 80146ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80146ae:	68bb      	ldr	r3, [r7, #8]
 80146b0:	b29b      	uxth	r3, r3
}
 80146b2:	4618      	mov	r0, r3
 80146b4:	3714      	adds	r7, #20
 80146b6:	46bd      	mov	sp, r7
 80146b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146bc:	4770      	bx	lr

080146be <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80146be:	b480      	push	{r7}
 80146c0:	b085      	sub	sp, #20
 80146c2:	af00      	add	r7, sp, #0
 80146c4:	6078      	str	r0, [r7, #4]
 80146c6:	460b      	mov	r3, r1
 80146c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80146ce:	78fb      	ldrb	r3, [r7, #3]
 80146d0:	015a      	lsls	r2, r3, #5
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	4413      	add	r3, r2
 80146d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146da:	689b      	ldr	r3, [r3, #8]
 80146dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80146e4:	695b      	ldr	r3, [r3, #20]
 80146e6:	68ba      	ldr	r2, [r7, #8]
 80146e8:	4013      	ands	r3, r2
 80146ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80146ec:	68bb      	ldr	r3, [r7, #8]
}
 80146ee:	4618      	mov	r0, r3
 80146f0:	3714      	adds	r7, #20
 80146f2:	46bd      	mov	sp, r7
 80146f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f8:	4770      	bx	lr

080146fa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80146fa:	b480      	push	{r7}
 80146fc:	b087      	sub	sp, #28
 80146fe:	af00      	add	r7, sp, #0
 8014700:	6078      	str	r0, [r7, #4]
 8014702:	460b      	mov	r3, r1
 8014704:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801470a:	697b      	ldr	r3, [r7, #20]
 801470c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014710:	691b      	ldr	r3, [r3, #16]
 8014712:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014714:	697b      	ldr	r3, [r7, #20]
 8014716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801471a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801471c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801471e:	78fb      	ldrb	r3, [r7, #3]
 8014720:	f003 030f 	and.w	r3, r3, #15
 8014724:	68fa      	ldr	r2, [r7, #12]
 8014726:	fa22 f303 	lsr.w	r3, r2, r3
 801472a:	01db      	lsls	r3, r3, #7
 801472c:	b2db      	uxtb	r3, r3
 801472e:	693a      	ldr	r2, [r7, #16]
 8014730:	4313      	orrs	r3, r2
 8014732:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014734:	78fb      	ldrb	r3, [r7, #3]
 8014736:	015a      	lsls	r2, r3, #5
 8014738:	697b      	ldr	r3, [r7, #20]
 801473a:	4413      	add	r3, r2
 801473c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014740:	689b      	ldr	r3, [r3, #8]
 8014742:	693a      	ldr	r2, [r7, #16]
 8014744:	4013      	ands	r3, r2
 8014746:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014748:	68bb      	ldr	r3, [r7, #8]
}
 801474a:	4618      	mov	r0, r3
 801474c:	371c      	adds	r7, #28
 801474e:	46bd      	mov	sp, r7
 8014750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014754:	4770      	bx	lr

08014756 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8014756:	b480      	push	{r7}
 8014758:	b083      	sub	sp, #12
 801475a:	af00      	add	r7, sp, #0
 801475c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	695b      	ldr	r3, [r3, #20]
 8014762:	f003 0301 	and.w	r3, r3, #1
}
 8014766:	4618      	mov	r0, r3
 8014768:	370c      	adds	r7, #12
 801476a:	46bd      	mov	sp, r7
 801476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014770:	4770      	bx	lr

08014772 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014772:	b480      	push	{r7}
 8014774:	b085      	sub	sp, #20
 8014776:	af00      	add	r7, sp, #0
 8014778:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	68fa      	ldr	r2, [r7, #12]
 8014788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801478c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8014790:	f023 0307 	bic.w	r3, r3, #7
 8014794:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801479c:	685b      	ldr	r3, [r3, #4]
 801479e:	68fa      	ldr	r2, [r7, #12]
 80147a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80147a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80147a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80147aa:	2300      	movs	r3, #0
}
 80147ac:	4618      	mov	r0, r3
 80147ae:	3714      	adds	r7, #20
 80147b0:	46bd      	mov	sp, r7
 80147b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b6:	4770      	bx	lr

080147b8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 80147b8:	b480      	push	{r7}
 80147ba:	b085      	sub	sp, #20
 80147bc:	af00      	add	r7, sp, #0
 80147be:	6078      	str	r0, [r7, #4]
 80147c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	333c      	adds	r3, #60	; 0x3c
 80147ca:	3304      	adds	r3, #4
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80147d0:	68bb      	ldr	r3, [r7, #8]
 80147d2:	4a1c      	ldr	r2, [pc, #112]	; (8014844 <USB_EP0_OutStart+0x8c>)
 80147d4:	4293      	cmp	r3, r2
 80147d6:	d90a      	bls.n	80147ee <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80147e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80147e8:	d101      	bne.n	80147ee <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80147ea:	2300      	movs	r3, #0
 80147ec:	e024      	b.n	8014838 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80147f4:	461a      	mov	r2, r3
 80147f6:	2300      	movs	r3, #0
 80147f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014800:	691b      	ldr	r3, [r3, #16]
 8014802:	68fa      	ldr	r2, [r7, #12]
 8014804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014808:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801480c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014814:	691b      	ldr	r3, [r3, #16]
 8014816:	68fa      	ldr	r2, [r7, #12]
 8014818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801481c:	f043 0318 	orr.w	r3, r3, #24
 8014820:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014828:	691b      	ldr	r3, [r3, #16]
 801482a:	68fa      	ldr	r2, [r7, #12]
 801482c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014830:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8014834:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8014836:	2300      	movs	r3, #0
}
 8014838:	4618      	mov	r0, r3
 801483a:	3714      	adds	r7, #20
 801483c:	46bd      	mov	sp, r7
 801483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014842:	4770      	bx	lr
 8014844:	4f54300a 	.word	0x4f54300a

08014848 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014848:	b480      	push	{r7}
 801484a:	b085      	sub	sp, #20
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014850:	2300      	movs	r3, #0
 8014852:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	3301      	adds	r3, #1
 8014858:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	4a13      	ldr	r2, [pc, #76]	; (80148ac <USB_CoreReset+0x64>)
 801485e:	4293      	cmp	r3, r2
 8014860:	d901      	bls.n	8014866 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014862:	2303      	movs	r3, #3
 8014864:	e01b      	b.n	801489e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	691b      	ldr	r3, [r3, #16]
 801486a:	2b00      	cmp	r3, #0
 801486c:	daf2      	bge.n	8014854 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801486e:	2300      	movs	r3, #0
 8014870:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	691b      	ldr	r3, [r3, #16]
 8014876:	f043 0201 	orr.w	r2, r3, #1
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	3301      	adds	r3, #1
 8014882:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	4a09      	ldr	r2, [pc, #36]	; (80148ac <USB_CoreReset+0x64>)
 8014888:	4293      	cmp	r3, r2
 801488a:	d901      	bls.n	8014890 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801488c:	2303      	movs	r3, #3
 801488e:	e006      	b.n	801489e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	691b      	ldr	r3, [r3, #16]
 8014894:	f003 0301 	and.w	r3, r3, #1
 8014898:	2b01      	cmp	r3, #1
 801489a:	d0f0      	beq.n	801487e <USB_CoreReset+0x36>

  return HAL_OK;
 801489c:	2300      	movs	r3, #0
}
 801489e:	4618      	mov	r0, r3
 80148a0:	3714      	adds	r7, #20
 80148a2:	46bd      	mov	sp, r7
 80148a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148a8:	4770      	bx	lr
 80148aa:	bf00      	nop
 80148ac:	00030d40 	.word	0x00030d40

080148b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80148b0:	b580      	push	{r7, lr}
 80148b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80148b4:	4904      	ldr	r1, [pc, #16]	; (80148c8 <MX_FATFS_Init+0x18>)
 80148b6:	4805      	ldr	r0, [pc, #20]	; (80148cc <MX_FATFS_Init+0x1c>)
 80148b8:	f004 fb56 	bl	8018f68 <FATFS_LinkDriver>
 80148bc:	4603      	mov	r3, r0
 80148be:	461a      	mov	r2, r3
 80148c0:	4b03      	ldr	r3, [pc, #12]	; (80148d0 <MX_FATFS_Init+0x20>)
 80148c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80148c4:	bf00      	nop
 80148c6:	bd80      	pop	{r7, pc}
 80148c8:	20000f0c 	.word	0x20000f0c
 80148cc:	0801d1a0 	.word	0x0801d1a0
 80148d0:	20000f08 	.word	0x20000f08

080148d4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80148d4:	b480      	push	{r7}
 80148d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80148d8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80148da:	4618      	mov	r0, r3
 80148dc:	46bd      	mov	sp, r7
 80148de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e2:	4770      	bx	lr

080148e4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b082      	sub	sp, #8
 80148e8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80148ea:	2300      	movs	r3, #0
 80148ec:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80148ee:	f000 f885 	bl	80149fc <BSP_SD_IsDetected>
 80148f2:	4603      	mov	r3, r0
 80148f4:	2b01      	cmp	r3, #1
 80148f6:	d001      	beq.n	80148fc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80148f8:	2302      	movs	r3, #2
 80148fa:	e012      	b.n	8014922 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80148fc:	480b      	ldr	r0, [pc, #44]	; (801492c <BSP_SD_Init+0x48>)
 80148fe:	f7f8 fe21 	bl	800d544 <HAL_SD_Init>
 8014902:	4603      	mov	r3, r0
 8014904:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8014906:	79fb      	ldrb	r3, [r7, #7]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d109      	bne.n	8014920 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801490c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8014910:	4806      	ldr	r0, [pc, #24]	; (801492c <BSP_SD_Init+0x48>)
 8014912:	f7f9 fcd5 	bl	800e2c0 <HAL_SD_ConfigWideBusOperation>
 8014916:	4603      	mov	r3, r0
 8014918:	2b00      	cmp	r3, #0
 801491a:	d001      	beq.n	8014920 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801491c:	2301      	movs	r3, #1
 801491e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8014920:	79fb      	ldrb	r3, [r7, #7]
}
 8014922:	4618      	mov	r0, r3
 8014924:	3708      	adds	r7, #8
 8014926:	46bd      	mov	sp, r7
 8014928:	bd80      	pop	{r7, pc}
 801492a:	bf00      	nop
 801492c:	2000059c 	.word	0x2000059c

08014930 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8014930:	b580      	push	{r7, lr}
 8014932:	b086      	sub	sp, #24
 8014934:	af00      	add	r7, sp, #0
 8014936:	60f8      	str	r0, [r7, #12]
 8014938:	60b9      	str	r1, [r7, #8]
 801493a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801493c:	2300      	movs	r3, #0
 801493e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	68ba      	ldr	r2, [r7, #8]
 8014944:	68f9      	ldr	r1, [r7, #12]
 8014946:	4806      	ldr	r0, [pc, #24]	; (8014960 <BSP_SD_ReadBlocks_DMA+0x30>)
 8014948:	f7f8 ff24 	bl	800d794 <HAL_SD_ReadBlocks_DMA>
 801494c:	4603      	mov	r3, r0
 801494e:	2b00      	cmp	r3, #0
 8014950:	d001      	beq.n	8014956 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014952:	2301      	movs	r3, #1
 8014954:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014956:	7dfb      	ldrb	r3, [r7, #23]
}
 8014958:	4618      	mov	r0, r3
 801495a:	3718      	adds	r7, #24
 801495c:	46bd      	mov	sp, r7
 801495e:	bd80      	pop	{r7, pc}
 8014960:	2000059c 	.word	0x2000059c

08014964 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8014964:	b580      	push	{r7, lr}
 8014966:	b086      	sub	sp, #24
 8014968:	af00      	add	r7, sp, #0
 801496a:	60f8      	str	r0, [r7, #12]
 801496c:	60b9      	str	r1, [r7, #8]
 801496e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014970:	2300      	movs	r3, #0
 8014972:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	68ba      	ldr	r2, [r7, #8]
 8014978:	68f9      	ldr	r1, [r7, #12]
 801497a:	4806      	ldr	r0, [pc, #24]	; (8014994 <BSP_SD_WriteBlocks_DMA+0x30>)
 801497c:	f7f8 ffb2 	bl	800d8e4 <HAL_SD_WriteBlocks_DMA>
 8014980:	4603      	mov	r3, r0
 8014982:	2b00      	cmp	r3, #0
 8014984:	d001      	beq.n	801498a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014986:	2301      	movs	r3, #1
 8014988:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801498a:	7dfb      	ldrb	r3, [r7, #23]
}
 801498c:	4618      	mov	r0, r3
 801498e:	3718      	adds	r7, #24
 8014990:	46bd      	mov	sp, r7
 8014992:	bd80      	pop	{r7, pc}
 8014994:	2000059c 	.word	0x2000059c

08014998 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8014998:	b580      	push	{r7, lr}
 801499a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801499c:	4805      	ldr	r0, [pc, #20]	; (80149b4 <BSP_SD_GetCardState+0x1c>)
 801499e:	f7f9 fda3 	bl	800e4e8 <HAL_SD_GetCardState>
 80149a2:	4603      	mov	r3, r0
 80149a4:	2b04      	cmp	r3, #4
 80149a6:	bf14      	ite	ne
 80149a8:	2301      	movne	r3, #1
 80149aa:	2300      	moveq	r3, #0
 80149ac:	b2db      	uxtb	r3, r3
}
 80149ae:	4618      	mov	r0, r3
 80149b0:	bd80      	pop	{r7, pc}
 80149b2:	bf00      	nop
 80149b4:	2000059c 	.word	0x2000059c

080149b8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 80149b8:	b580      	push	{r7, lr}
 80149ba:	b082      	sub	sp, #8
 80149bc:	af00      	add	r7, sp, #0
 80149be:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80149c0:	6879      	ldr	r1, [r7, #4]
 80149c2:	4803      	ldr	r0, [pc, #12]	; (80149d0 <BSP_SD_GetCardInfo+0x18>)
 80149c4:	f7f9 fc50 	bl	800e268 <HAL_SD_GetCardInfo>
}
 80149c8:	bf00      	nop
 80149ca:	3708      	adds	r7, #8
 80149cc:	46bd      	mov	sp, r7
 80149ce:	bd80      	pop	{r7, pc}
 80149d0:	2000059c 	.word	0x2000059c

080149d4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80149d4:	b580      	push	{r7, lr}
 80149d6:	b082      	sub	sp, #8
 80149d8:	af00      	add	r7, sp, #0
 80149da:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80149dc:	f000 f99e 	bl	8014d1c <BSP_SD_WriteCpltCallback>
}
 80149e0:	bf00      	nop
 80149e2:	3708      	adds	r7, #8
 80149e4:	46bd      	mov	sp, r7
 80149e6:	bd80      	pop	{r7, pc}

080149e8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80149e8:	b580      	push	{r7, lr}
 80149ea:	b082      	sub	sp, #8
 80149ec:	af00      	add	r7, sp, #0
 80149ee:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80149f0:	f000 f9a0 	bl	8014d34 <BSP_SD_ReadCpltCallback>
}
 80149f4:	bf00      	nop
 80149f6:	3708      	adds	r7, #8
 80149f8:	46bd      	mov	sp, r7
 80149fa:	bd80      	pop	{r7, pc}

080149fc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b082      	sub	sp, #8
 8014a00:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8014a02:	2301      	movs	r3, #1
 8014a04:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8014a06:	f000 f80b 	bl	8014a20 <BSP_PlatformIsDetected>
 8014a0a:	4603      	mov	r3, r0
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d101      	bne.n	8014a14 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8014a10:	2300      	movs	r3, #0
 8014a12:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8014a14:	79fb      	ldrb	r3, [r7, #7]
 8014a16:	b2db      	uxtb	r3, r3
}
 8014a18:	4618      	mov	r0, r3
 8014a1a:	3708      	adds	r7, #8
 8014a1c:	46bd      	mov	sp, r7
 8014a1e:	bd80      	pop	{r7, pc}

08014a20 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8014a20:	b580      	push	{r7, lr}
 8014a22:	b082      	sub	sp, #8
 8014a24:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8014a26:	2301      	movs	r3, #1
 8014a28:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 8014a2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8014a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8014a32:	f7f3 fc6b 	bl	800830c <HAL_GPIO_ReadPin>
 8014a36:	4603      	mov	r3, r0
 8014a38:	2b01      	cmp	r3, #1
 8014a3a:	d001      	beq.n	8014a40 <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8014a40:	79fb      	ldrb	r3, [r7, #7]
}
 8014a42:	4618      	mov	r0, r3
 8014a44:	3708      	adds	r7, #8
 8014a46:	46bd      	mov	sp, r7
 8014a48:	bd80      	pop	{r7, pc}

08014a4a <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8014a4a:	b580      	push	{r7, lr}
 8014a4c:	b084      	sub	sp, #16
 8014a4e:	af00      	add	r7, sp, #0
 8014a50:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8014a52:	f7f2 fd67 	bl	8007524 <HAL_GetTick>
 8014a56:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8014a58:	e006      	b.n	8014a68 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014a5a:	f7ff ff9d 	bl	8014998 <BSP_SD_GetCardState>
 8014a5e:	4603      	mov	r3, r0
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d101      	bne.n	8014a68 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8014a64:	2300      	movs	r3, #0
 8014a66:	e009      	b.n	8014a7c <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8014a68:	f7f2 fd5c 	bl	8007524 <HAL_GetTick>
 8014a6c:	4602      	mov	r2, r0
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	1ad3      	subs	r3, r2, r3
 8014a72:	687a      	ldr	r2, [r7, #4]
 8014a74:	429a      	cmp	r2, r3
 8014a76:	d8f0      	bhi.n	8014a5a <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8014a78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	3710      	adds	r7, #16
 8014a80:	46bd      	mov	sp, r7
 8014a82:	bd80      	pop	{r7, pc}

08014a84 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014a84:	b580      	push	{r7, lr}
 8014a86:	b082      	sub	sp, #8
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8014a8e:	4b0b      	ldr	r3, [pc, #44]	; (8014abc <SD_CheckStatus+0x38>)
 8014a90:	2201      	movs	r2, #1
 8014a92:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8014a94:	f7ff ff80 	bl	8014998 <BSP_SD_GetCardState>
 8014a98:	4603      	mov	r3, r0
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d107      	bne.n	8014aae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8014a9e:	4b07      	ldr	r3, [pc, #28]	; (8014abc <SD_CheckStatus+0x38>)
 8014aa0:	781b      	ldrb	r3, [r3, #0]
 8014aa2:	b2db      	uxtb	r3, r3
 8014aa4:	f023 0301 	bic.w	r3, r3, #1
 8014aa8:	b2da      	uxtb	r2, r3
 8014aaa:	4b04      	ldr	r3, [pc, #16]	; (8014abc <SD_CheckStatus+0x38>)
 8014aac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8014aae:	4b03      	ldr	r3, [pc, #12]	; (8014abc <SD_CheckStatus+0x38>)
 8014ab0:	781b      	ldrb	r3, [r3, #0]
 8014ab2:	b2db      	uxtb	r3, r3
}
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	3708      	adds	r7, #8
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	bd80      	pop	{r7, pc}
 8014abc:	2000000d 	.word	0x2000000d

08014ac0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8014ac0:	b580      	push	{r7, lr}
 8014ac2:	b082      	sub	sp, #8
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	4603      	mov	r3, r0
 8014ac8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8014aca:	f7ff ff0b 	bl	80148e4 <BSP_SD_Init>
 8014ace:	4603      	mov	r3, r0
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d107      	bne.n	8014ae4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8014ad4:	79fb      	ldrb	r3, [r7, #7]
 8014ad6:	4618      	mov	r0, r3
 8014ad8:	f7ff ffd4 	bl	8014a84 <SD_CheckStatus>
 8014adc:	4603      	mov	r3, r0
 8014ade:	461a      	mov	r2, r3
 8014ae0:	4b04      	ldr	r3, [pc, #16]	; (8014af4 <SD_initialize+0x34>)
 8014ae2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8014ae4:	4b03      	ldr	r3, [pc, #12]	; (8014af4 <SD_initialize+0x34>)
 8014ae6:	781b      	ldrb	r3, [r3, #0]
 8014ae8:	b2db      	uxtb	r3, r3
}
 8014aea:	4618      	mov	r0, r3
 8014aec:	3708      	adds	r7, #8
 8014aee:	46bd      	mov	sp, r7
 8014af0:	bd80      	pop	{r7, pc}
 8014af2:	bf00      	nop
 8014af4:	2000000d 	.word	0x2000000d

08014af8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8014af8:	b580      	push	{r7, lr}
 8014afa:	b082      	sub	sp, #8
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	4603      	mov	r3, r0
 8014b00:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8014b02:	79fb      	ldrb	r3, [r7, #7]
 8014b04:	4618      	mov	r0, r3
 8014b06:	f7ff ffbd 	bl	8014a84 <SD_CheckStatus>
 8014b0a:	4603      	mov	r3, r0
}
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	3708      	adds	r7, #8
 8014b10:	46bd      	mov	sp, r7
 8014b12:	bd80      	pop	{r7, pc}

08014b14 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014b14:	b580      	push	{r7, lr}
 8014b16:	b086      	sub	sp, #24
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	60b9      	str	r1, [r7, #8]
 8014b1c:	607a      	str	r2, [r7, #4]
 8014b1e:	603b      	str	r3, [r7, #0]
 8014b20:	4603      	mov	r3, r0
 8014b22:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014b24:	2301      	movs	r3, #1
 8014b26:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014b28:	f247 5030 	movw	r0, #30000	; 0x7530
 8014b2c:	f7ff ff8d 	bl	8014a4a <SD_CheckStatusWithTimeout>
 8014b30:	4603      	mov	r3, r0
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	da01      	bge.n	8014b3a <SD_read+0x26>
  {
    return res;
 8014b36:	7dfb      	ldrb	r3, [r7, #23]
 8014b38:	e03b      	b.n	8014bb2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8014b3a:	683a      	ldr	r2, [r7, #0]
 8014b3c:	6879      	ldr	r1, [r7, #4]
 8014b3e:	68b8      	ldr	r0, [r7, #8]
 8014b40:	f7ff fef6 	bl	8014930 <BSP_SD_ReadBlocks_DMA>
 8014b44:	4603      	mov	r3, r0
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d132      	bne.n	8014bb0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8014b4a:	4b1c      	ldr	r3, [pc, #112]	; (8014bbc <SD_read+0xa8>)
 8014b4c:	2200      	movs	r2, #0
 8014b4e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8014b50:	f7f2 fce8 	bl	8007524 <HAL_GetTick>
 8014b54:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014b56:	bf00      	nop
 8014b58:	4b18      	ldr	r3, [pc, #96]	; (8014bbc <SD_read+0xa8>)
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d108      	bne.n	8014b72 <SD_read+0x5e>
 8014b60:	f7f2 fce0 	bl	8007524 <HAL_GetTick>
 8014b64:	4602      	mov	r2, r0
 8014b66:	693b      	ldr	r3, [r7, #16]
 8014b68:	1ad3      	subs	r3, r2, r3
 8014b6a:	f247 522f 	movw	r2, #29999	; 0x752f
 8014b6e:	4293      	cmp	r3, r2
 8014b70:	d9f2      	bls.n	8014b58 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8014b72:	4b12      	ldr	r3, [pc, #72]	; (8014bbc <SD_read+0xa8>)
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d102      	bne.n	8014b80 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8014b7a:	2301      	movs	r3, #1
 8014b7c:	75fb      	strb	r3, [r7, #23]
 8014b7e:	e017      	b.n	8014bb0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8014b80:	4b0e      	ldr	r3, [pc, #56]	; (8014bbc <SD_read+0xa8>)
 8014b82:	2200      	movs	r2, #0
 8014b84:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014b86:	f7f2 fccd 	bl	8007524 <HAL_GetTick>
 8014b8a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014b8c:	e007      	b.n	8014b9e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014b8e:	f7ff ff03 	bl	8014998 <BSP_SD_GetCardState>
 8014b92:	4603      	mov	r3, r0
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d102      	bne.n	8014b9e <SD_read+0x8a>
          {
            res = RES_OK;
 8014b98:	2300      	movs	r3, #0
 8014b9a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8014b9c:	e008      	b.n	8014bb0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014b9e:	f7f2 fcc1 	bl	8007524 <HAL_GetTick>
 8014ba2:	4602      	mov	r2, r0
 8014ba4:	693b      	ldr	r3, [r7, #16]
 8014ba6:	1ad3      	subs	r3, r2, r3
 8014ba8:	f247 522f 	movw	r2, #29999	; 0x752f
 8014bac:	4293      	cmp	r3, r2
 8014bae:	d9ee      	bls.n	8014b8e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8014bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8014bb2:	4618      	mov	r0, r3
 8014bb4:	3718      	adds	r7, #24
 8014bb6:	46bd      	mov	sp, r7
 8014bb8:	bd80      	pop	{r7, pc}
 8014bba:	bf00      	nop
 8014bbc:	20001374 	.word	0x20001374

08014bc0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8014bc0:	b580      	push	{r7, lr}
 8014bc2:	b086      	sub	sp, #24
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	60b9      	str	r1, [r7, #8]
 8014bc8:	607a      	str	r2, [r7, #4]
 8014bca:	603b      	str	r3, [r7, #0]
 8014bcc:	4603      	mov	r3, r0
 8014bce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014bd0:	2301      	movs	r3, #1
 8014bd2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8014bd4:	4b24      	ldr	r3, [pc, #144]	; (8014c68 <SD_write+0xa8>)
 8014bd6:	2200      	movs	r2, #0
 8014bd8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014bda:	f247 5030 	movw	r0, #30000	; 0x7530
 8014bde:	f7ff ff34 	bl	8014a4a <SD_CheckStatusWithTimeout>
 8014be2:	4603      	mov	r3, r0
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	da01      	bge.n	8014bec <SD_write+0x2c>
  {
    return res;
 8014be8:	7dfb      	ldrb	r3, [r7, #23]
 8014bea:	e038      	b.n	8014c5e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8014bec:	683a      	ldr	r2, [r7, #0]
 8014bee:	6879      	ldr	r1, [r7, #4]
 8014bf0:	68b8      	ldr	r0, [r7, #8]
 8014bf2:	f7ff feb7 	bl	8014964 <BSP_SD_WriteBlocks_DMA>
 8014bf6:	4603      	mov	r3, r0
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d12f      	bne.n	8014c5c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8014bfc:	f7f2 fc92 	bl	8007524 <HAL_GetTick>
 8014c00:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014c02:	bf00      	nop
 8014c04:	4b18      	ldr	r3, [pc, #96]	; (8014c68 <SD_write+0xa8>)
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d108      	bne.n	8014c1e <SD_write+0x5e>
 8014c0c:	f7f2 fc8a 	bl	8007524 <HAL_GetTick>
 8014c10:	4602      	mov	r2, r0
 8014c12:	693b      	ldr	r3, [r7, #16]
 8014c14:	1ad3      	subs	r3, r2, r3
 8014c16:	f247 522f 	movw	r2, #29999	; 0x752f
 8014c1a:	4293      	cmp	r3, r2
 8014c1c:	d9f2      	bls.n	8014c04 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8014c1e:	4b12      	ldr	r3, [pc, #72]	; (8014c68 <SD_write+0xa8>)
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d102      	bne.n	8014c2c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8014c26:	2301      	movs	r3, #1
 8014c28:	75fb      	strb	r3, [r7, #23]
 8014c2a:	e017      	b.n	8014c5c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8014c2c:	4b0e      	ldr	r3, [pc, #56]	; (8014c68 <SD_write+0xa8>)
 8014c2e:	2200      	movs	r2, #0
 8014c30:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014c32:	f7f2 fc77 	bl	8007524 <HAL_GetTick>
 8014c36:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014c38:	e007      	b.n	8014c4a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014c3a:	f7ff fead 	bl	8014998 <BSP_SD_GetCardState>
 8014c3e:	4603      	mov	r3, r0
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d102      	bne.n	8014c4a <SD_write+0x8a>
          {
            res = RES_OK;
 8014c44:	2300      	movs	r3, #0
 8014c46:	75fb      	strb	r3, [r7, #23]
            break;
 8014c48:	e008      	b.n	8014c5c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014c4a:	f7f2 fc6b 	bl	8007524 <HAL_GetTick>
 8014c4e:	4602      	mov	r2, r0
 8014c50:	693b      	ldr	r3, [r7, #16]
 8014c52:	1ad3      	subs	r3, r2, r3
 8014c54:	f247 522f 	movw	r2, #29999	; 0x752f
 8014c58:	4293      	cmp	r3, r2
 8014c5a:	d9ee      	bls.n	8014c3a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8014c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c5e:	4618      	mov	r0, r3
 8014c60:	3718      	adds	r7, #24
 8014c62:	46bd      	mov	sp, r7
 8014c64:	bd80      	pop	{r7, pc}
 8014c66:	bf00      	nop
 8014c68:	20001370 	.word	0x20001370

08014c6c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b08c      	sub	sp, #48	; 0x30
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	4603      	mov	r3, r0
 8014c74:	603a      	str	r2, [r7, #0]
 8014c76:	71fb      	strb	r3, [r7, #7]
 8014c78:	460b      	mov	r3, r1
 8014c7a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014c7c:	2301      	movs	r3, #1
 8014c7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8014c82:	4b25      	ldr	r3, [pc, #148]	; (8014d18 <SD_ioctl+0xac>)
 8014c84:	781b      	ldrb	r3, [r3, #0]
 8014c86:	b2db      	uxtb	r3, r3
 8014c88:	f003 0301 	and.w	r3, r3, #1
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d001      	beq.n	8014c94 <SD_ioctl+0x28>
 8014c90:	2303      	movs	r3, #3
 8014c92:	e03c      	b.n	8014d0e <SD_ioctl+0xa2>

  switch (cmd)
 8014c94:	79bb      	ldrb	r3, [r7, #6]
 8014c96:	2b03      	cmp	r3, #3
 8014c98:	d834      	bhi.n	8014d04 <SD_ioctl+0x98>
 8014c9a:	a201      	add	r2, pc, #4	; (adr r2, 8014ca0 <SD_ioctl+0x34>)
 8014c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ca0:	08014cb1 	.word	0x08014cb1
 8014ca4:	08014cb9 	.word	0x08014cb9
 8014ca8:	08014cd1 	.word	0x08014cd1
 8014cac:	08014ceb 	.word	0x08014ceb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8014cb0:	2300      	movs	r3, #0
 8014cb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014cb6:	e028      	b.n	8014d0a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8014cb8:	f107 0308 	add.w	r3, r7, #8
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	f7ff fe7b 	bl	80149b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8014cc2:	6a3a      	ldr	r2, [r7, #32]
 8014cc4:	683b      	ldr	r3, [r7, #0]
 8014cc6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014cc8:	2300      	movs	r3, #0
 8014cca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014cce:	e01c      	b.n	8014d0a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014cd0:	f107 0308 	add.w	r3, r7, #8
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	f7ff fe6f 	bl	80149b8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8014cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cdc:	b29a      	uxth	r2, r3
 8014cde:	683b      	ldr	r3, [r7, #0]
 8014ce0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8014ce2:	2300      	movs	r3, #0
 8014ce4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014ce8:	e00f      	b.n	8014d0a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014cea:	f107 0308 	add.w	r3, r7, #8
 8014cee:	4618      	mov	r0, r3
 8014cf0:	f7ff fe62 	bl	80149b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cf6:	0a5a      	lsrs	r2, r3, #9
 8014cf8:	683b      	ldr	r3, [r7, #0]
 8014cfa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014cfc:	2300      	movs	r3, #0
 8014cfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014d02:	e002      	b.n	8014d0a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014d04:	2304      	movs	r3, #4
 8014d06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8014d0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014d0e:	4618      	mov	r0, r3
 8014d10:	3730      	adds	r7, #48	; 0x30
 8014d12:	46bd      	mov	sp, r7
 8014d14:	bd80      	pop	{r7, pc}
 8014d16:	bf00      	nop
 8014d18:	2000000d 	.word	0x2000000d

08014d1c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8014d1c:	b480      	push	{r7}
 8014d1e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8014d20:	4b03      	ldr	r3, [pc, #12]	; (8014d30 <BSP_SD_WriteCpltCallback+0x14>)
 8014d22:	2201      	movs	r2, #1
 8014d24:	601a      	str	r2, [r3, #0]
}
 8014d26:	bf00      	nop
 8014d28:	46bd      	mov	sp, r7
 8014d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d2e:	4770      	bx	lr
 8014d30:	20001370 	.word	0x20001370

08014d34 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014d34:	b480      	push	{r7}
 8014d36:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8014d38:	4b03      	ldr	r3, [pc, #12]	; (8014d48 <BSP_SD_ReadCpltCallback+0x14>)
 8014d3a:	2201      	movs	r2, #1
 8014d3c:	601a      	str	r2, [r3, #0]
}
 8014d3e:	bf00      	nop
 8014d40:	46bd      	mov	sp, r7
 8014d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d46:	4770      	bx	lr
 8014d48:	20001374 	.word	0x20001374

08014d4c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014d4c:	b580      	push	{r7, lr}
 8014d4e:	b084      	sub	sp, #16
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	6078      	str	r0, [r7, #4]
 8014d54:	460b      	mov	r3, r1
 8014d56:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014d58:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014d5c:	f004 fef2 	bl	8019b44 <USBD_static_malloc>
 8014d60:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d109      	bne.n	8014d7c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	32b0      	adds	r2, #176	; 0xb0
 8014d72:	2100      	movs	r1, #0
 8014d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014d78:	2302      	movs	r3, #2
 8014d7a:	e0d4      	b.n	8014f26 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014d7c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8014d80:	2100      	movs	r1, #0
 8014d82:	68f8      	ldr	r0, [r7, #12]
 8014d84:	f004 ff3e 	bl	8019c04 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	32b0      	adds	r2, #176	; 0xb0
 8014d92:	68f9      	ldr	r1, [r7, #12]
 8014d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	32b0      	adds	r2, #176	; 0xb0
 8014da2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	7c1b      	ldrb	r3, [r3, #16]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d138      	bne.n	8014e26 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014db4:	4b5e      	ldr	r3, [pc, #376]	; (8014f30 <USBD_CDC_Init+0x1e4>)
 8014db6:	7819      	ldrb	r1, [r3, #0]
 8014db8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014dbc:	2202      	movs	r2, #2
 8014dbe:	6878      	ldr	r0, [r7, #4]
 8014dc0:	f004 fcfa 	bl	80197b8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014dc4:	4b5a      	ldr	r3, [pc, #360]	; (8014f30 <USBD_CDC_Init+0x1e4>)
 8014dc6:	781b      	ldrb	r3, [r3, #0]
 8014dc8:	f003 020f 	and.w	r2, r3, #15
 8014dcc:	6879      	ldr	r1, [r7, #4]
 8014dce:	4613      	mov	r3, r2
 8014dd0:	009b      	lsls	r3, r3, #2
 8014dd2:	4413      	add	r3, r2
 8014dd4:	009b      	lsls	r3, r3, #2
 8014dd6:	440b      	add	r3, r1
 8014dd8:	3324      	adds	r3, #36	; 0x24
 8014dda:	2201      	movs	r2, #1
 8014ddc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014dde:	4b55      	ldr	r3, [pc, #340]	; (8014f34 <USBD_CDC_Init+0x1e8>)
 8014de0:	7819      	ldrb	r1, [r3, #0]
 8014de2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014de6:	2202      	movs	r2, #2
 8014de8:	6878      	ldr	r0, [r7, #4]
 8014dea:	f004 fce5 	bl	80197b8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014dee:	4b51      	ldr	r3, [pc, #324]	; (8014f34 <USBD_CDC_Init+0x1e8>)
 8014df0:	781b      	ldrb	r3, [r3, #0]
 8014df2:	f003 020f 	and.w	r2, r3, #15
 8014df6:	6879      	ldr	r1, [r7, #4]
 8014df8:	4613      	mov	r3, r2
 8014dfa:	009b      	lsls	r3, r3, #2
 8014dfc:	4413      	add	r3, r2
 8014dfe:	009b      	lsls	r3, r3, #2
 8014e00:	440b      	add	r3, r1
 8014e02:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014e06:	2201      	movs	r2, #1
 8014e08:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014e0a:	4b4b      	ldr	r3, [pc, #300]	; (8014f38 <USBD_CDC_Init+0x1ec>)
 8014e0c:	781b      	ldrb	r3, [r3, #0]
 8014e0e:	f003 020f 	and.w	r2, r3, #15
 8014e12:	6879      	ldr	r1, [r7, #4]
 8014e14:	4613      	mov	r3, r2
 8014e16:	009b      	lsls	r3, r3, #2
 8014e18:	4413      	add	r3, r2
 8014e1a:	009b      	lsls	r3, r3, #2
 8014e1c:	440b      	add	r3, r1
 8014e1e:	3326      	adds	r3, #38	; 0x26
 8014e20:	2210      	movs	r2, #16
 8014e22:	801a      	strh	r2, [r3, #0]
 8014e24:	e035      	b.n	8014e92 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014e26:	4b42      	ldr	r3, [pc, #264]	; (8014f30 <USBD_CDC_Init+0x1e4>)
 8014e28:	7819      	ldrb	r1, [r3, #0]
 8014e2a:	2340      	movs	r3, #64	; 0x40
 8014e2c:	2202      	movs	r2, #2
 8014e2e:	6878      	ldr	r0, [r7, #4]
 8014e30:	f004 fcc2 	bl	80197b8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014e34:	4b3e      	ldr	r3, [pc, #248]	; (8014f30 <USBD_CDC_Init+0x1e4>)
 8014e36:	781b      	ldrb	r3, [r3, #0]
 8014e38:	f003 020f 	and.w	r2, r3, #15
 8014e3c:	6879      	ldr	r1, [r7, #4]
 8014e3e:	4613      	mov	r3, r2
 8014e40:	009b      	lsls	r3, r3, #2
 8014e42:	4413      	add	r3, r2
 8014e44:	009b      	lsls	r3, r3, #2
 8014e46:	440b      	add	r3, r1
 8014e48:	3324      	adds	r3, #36	; 0x24
 8014e4a:	2201      	movs	r2, #1
 8014e4c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014e4e:	4b39      	ldr	r3, [pc, #228]	; (8014f34 <USBD_CDC_Init+0x1e8>)
 8014e50:	7819      	ldrb	r1, [r3, #0]
 8014e52:	2340      	movs	r3, #64	; 0x40
 8014e54:	2202      	movs	r2, #2
 8014e56:	6878      	ldr	r0, [r7, #4]
 8014e58:	f004 fcae 	bl	80197b8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014e5c:	4b35      	ldr	r3, [pc, #212]	; (8014f34 <USBD_CDC_Init+0x1e8>)
 8014e5e:	781b      	ldrb	r3, [r3, #0]
 8014e60:	f003 020f 	and.w	r2, r3, #15
 8014e64:	6879      	ldr	r1, [r7, #4]
 8014e66:	4613      	mov	r3, r2
 8014e68:	009b      	lsls	r3, r3, #2
 8014e6a:	4413      	add	r3, r2
 8014e6c:	009b      	lsls	r3, r3, #2
 8014e6e:	440b      	add	r3, r1
 8014e70:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014e74:	2201      	movs	r2, #1
 8014e76:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014e78:	4b2f      	ldr	r3, [pc, #188]	; (8014f38 <USBD_CDC_Init+0x1ec>)
 8014e7a:	781b      	ldrb	r3, [r3, #0]
 8014e7c:	f003 020f 	and.w	r2, r3, #15
 8014e80:	6879      	ldr	r1, [r7, #4]
 8014e82:	4613      	mov	r3, r2
 8014e84:	009b      	lsls	r3, r3, #2
 8014e86:	4413      	add	r3, r2
 8014e88:	009b      	lsls	r3, r3, #2
 8014e8a:	440b      	add	r3, r1
 8014e8c:	3326      	adds	r3, #38	; 0x26
 8014e8e:	2210      	movs	r2, #16
 8014e90:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014e92:	4b29      	ldr	r3, [pc, #164]	; (8014f38 <USBD_CDC_Init+0x1ec>)
 8014e94:	7819      	ldrb	r1, [r3, #0]
 8014e96:	2308      	movs	r3, #8
 8014e98:	2203      	movs	r2, #3
 8014e9a:	6878      	ldr	r0, [r7, #4]
 8014e9c:	f004 fc8c 	bl	80197b8 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8014ea0:	4b25      	ldr	r3, [pc, #148]	; (8014f38 <USBD_CDC_Init+0x1ec>)
 8014ea2:	781b      	ldrb	r3, [r3, #0]
 8014ea4:	f003 020f 	and.w	r2, r3, #15
 8014ea8:	6879      	ldr	r1, [r7, #4]
 8014eaa:	4613      	mov	r3, r2
 8014eac:	009b      	lsls	r3, r3, #2
 8014eae:	4413      	add	r3, r2
 8014eb0:	009b      	lsls	r3, r3, #2
 8014eb2:	440b      	add	r3, r1
 8014eb4:	3324      	adds	r3, #36	; 0x24
 8014eb6:	2201      	movs	r2, #1
 8014eb8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	2200      	movs	r2, #0
 8014ebe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014ec8:	687a      	ldr	r2, [r7, #4]
 8014eca:	33b0      	adds	r3, #176	; 0xb0
 8014ecc:	009b      	lsls	r3, r3, #2
 8014ece:	4413      	add	r3, r2
 8014ed0:	685b      	ldr	r3, [r3, #4]
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	2200      	movs	r2, #0
 8014eda:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	2200      	movs	r2, #0
 8014ee2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d101      	bne.n	8014ef4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8014ef0:	2302      	movs	r3, #2
 8014ef2:	e018      	b.n	8014f26 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	7c1b      	ldrb	r3, [r3, #16]
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d10a      	bne.n	8014f12 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014efc:	4b0d      	ldr	r3, [pc, #52]	; (8014f34 <USBD_CDC_Init+0x1e8>)
 8014efe:	7819      	ldrb	r1, [r3, #0]
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014f06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014f0a:	6878      	ldr	r0, [r7, #4]
 8014f0c:	f004 fdce 	bl	8019aac <USBD_LL_PrepareReceive>
 8014f10:	e008      	b.n	8014f24 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014f12:	4b08      	ldr	r3, [pc, #32]	; (8014f34 <USBD_CDC_Init+0x1e8>)
 8014f14:	7819      	ldrb	r1, [r3, #0]
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014f1c:	2340      	movs	r3, #64	; 0x40
 8014f1e:	6878      	ldr	r0, [r7, #4]
 8014f20:	f004 fdc4 	bl	8019aac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014f24:	2300      	movs	r3, #0
}
 8014f26:	4618      	mov	r0, r3
 8014f28:	3710      	adds	r7, #16
 8014f2a:	46bd      	mov	sp, r7
 8014f2c:	bd80      	pop	{r7, pc}
 8014f2e:	bf00      	nop
 8014f30:	20000097 	.word	0x20000097
 8014f34:	20000098 	.word	0x20000098
 8014f38:	20000099 	.word	0x20000099

08014f3c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b082      	sub	sp, #8
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	6078      	str	r0, [r7, #4]
 8014f44:	460b      	mov	r3, r1
 8014f46:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014f48:	4b3a      	ldr	r3, [pc, #232]	; (8015034 <USBD_CDC_DeInit+0xf8>)
 8014f4a:	781b      	ldrb	r3, [r3, #0]
 8014f4c:	4619      	mov	r1, r3
 8014f4e:	6878      	ldr	r0, [r7, #4]
 8014f50:	f004 fc70 	bl	8019834 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014f54:	4b37      	ldr	r3, [pc, #220]	; (8015034 <USBD_CDC_DeInit+0xf8>)
 8014f56:	781b      	ldrb	r3, [r3, #0]
 8014f58:	f003 020f 	and.w	r2, r3, #15
 8014f5c:	6879      	ldr	r1, [r7, #4]
 8014f5e:	4613      	mov	r3, r2
 8014f60:	009b      	lsls	r3, r3, #2
 8014f62:	4413      	add	r3, r2
 8014f64:	009b      	lsls	r3, r3, #2
 8014f66:	440b      	add	r3, r1
 8014f68:	3324      	adds	r3, #36	; 0x24
 8014f6a:	2200      	movs	r2, #0
 8014f6c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8014f6e:	4b32      	ldr	r3, [pc, #200]	; (8015038 <USBD_CDC_DeInit+0xfc>)
 8014f70:	781b      	ldrb	r3, [r3, #0]
 8014f72:	4619      	mov	r1, r3
 8014f74:	6878      	ldr	r0, [r7, #4]
 8014f76:	f004 fc5d 	bl	8019834 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014f7a:	4b2f      	ldr	r3, [pc, #188]	; (8015038 <USBD_CDC_DeInit+0xfc>)
 8014f7c:	781b      	ldrb	r3, [r3, #0]
 8014f7e:	f003 020f 	and.w	r2, r3, #15
 8014f82:	6879      	ldr	r1, [r7, #4]
 8014f84:	4613      	mov	r3, r2
 8014f86:	009b      	lsls	r3, r3, #2
 8014f88:	4413      	add	r3, r2
 8014f8a:	009b      	lsls	r3, r3, #2
 8014f8c:	440b      	add	r3, r1
 8014f8e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014f92:	2200      	movs	r2, #0
 8014f94:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014f96:	4b29      	ldr	r3, [pc, #164]	; (801503c <USBD_CDC_DeInit+0x100>)
 8014f98:	781b      	ldrb	r3, [r3, #0]
 8014f9a:	4619      	mov	r1, r3
 8014f9c:	6878      	ldr	r0, [r7, #4]
 8014f9e:	f004 fc49 	bl	8019834 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8014fa2:	4b26      	ldr	r3, [pc, #152]	; (801503c <USBD_CDC_DeInit+0x100>)
 8014fa4:	781b      	ldrb	r3, [r3, #0]
 8014fa6:	f003 020f 	and.w	r2, r3, #15
 8014faa:	6879      	ldr	r1, [r7, #4]
 8014fac:	4613      	mov	r3, r2
 8014fae:	009b      	lsls	r3, r3, #2
 8014fb0:	4413      	add	r3, r2
 8014fb2:	009b      	lsls	r3, r3, #2
 8014fb4:	440b      	add	r3, r1
 8014fb6:	3324      	adds	r3, #36	; 0x24
 8014fb8:	2200      	movs	r2, #0
 8014fba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014fbc:	4b1f      	ldr	r3, [pc, #124]	; (801503c <USBD_CDC_DeInit+0x100>)
 8014fbe:	781b      	ldrb	r3, [r3, #0]
 8014fc0:	f003 020f 	and.w	r2, r3, #15
 8014fc4:	6879      	ldr	r1, [r7, #4]
 8014fc6:	4613      	mov	r3, r2
 8014fc8:	009b      	lsls	r3, r3, #2
 8014fca:	4413      	add	r3, r2
 8014fcc:	009b      	lsls	r3, r3, #2
 8014fce:	440b      	add	r3, r1
 8014fd0:	3326      	adds	r3, #38	; 0x26
 8014fd2:	2200      	movs	r2, #0
 8014fd4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	32b0      	adds	r2, #176	; 0xb0
 8014fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d01f      	beq.n	8015028 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014fee:	687a      	ldr	r2, [r7, #4]
 8014ff0:	33b0      	adds	r3, #176	; 0xb0
 8014ff2:	009b      	lsls	r3, r3, #2
 8014ff4:	4413      	add	r3, r2
 8014ff6:	685b      	ldr	r3, [r3, #4]
 8014ff8:	685b      	ldr	r3, [r3, #4]
 8014ffa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	32b0      	adds	r2, #176	; 0xb0
 8015006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801500a:	4618      	mov	r0, r3
 801500c:	f004 fda8 	bl	8019b60 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	32b0      	adds	r2, #176	; 0xb0
 801501a:	2100      	movs	r1, #0
 801501c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	2200      	movs	r2, #0
 8015024:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8015028:	2300      	movs	r3, #0
}
 801502a:	4618      	mov	r0, r3
 801502c:	3708      	adds	r7, #8
 801502e:	46bd      	mov	sp, r7
 8015030:	bd80      	pop	{r7, pc}
 8015032:	bf00      	nop
 8015034:	20000097 	.word	0x20000097
 8015038:	20000098 	.word	0x20000098
 801503c:	20000099 	.word	0x20000099

08015040 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8015040:	b580      	push	{r7, lr}
 8015042:	b086      	sub	sp, #24
 8015044:	af00      	add	r7, sp, #0
 8015046:	6078      	str	r0, [r7, #4]
 8015048:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	32b0      	adds	r2, #176	; 0xb0
 8015054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015058:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801505a:	2300      	movs	r3, #0
 801505c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801505e:	2300      	movs	r3, #0
 8015060:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8015062:	2300      	movs	r3, #0
 8015064:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8015066:	693b      	ldr	r3, [r7, #16]
 8015068:	2b00      	cmp	r3, #0
 801506a:	d101      	bne.n	8015070 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801506c:	2303      	movs	r3, #3
 801506e:	e0bf      	b.n	80151f0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015070:	683b      	ldr	r3, [r7, #0]
 8015072:	781b      	ldrb	r3, [r3, #0]
 8015074:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015078:	2b00      	cmp	r3, #0
 801507a:	d050      	beq.n	801511e <USBD_CDC_Setup+0xde>
 801507c:	2b20      	cmp	r3, #32
 801507e:	f040 80af 	bne.w	80151e0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8015082:	683b      	ldr	r3, [r7, #0]
 8015084:	88db      	ldrh	r3, [r3, #6]
 8015086:	2b00      	cmp	r3, #0
 8015088:	d03a      	beq.n	8015100 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801508a:	683b      	ldr	r3, [r7, #0]
 801508c:	781b      	ldrb	r3, [r3, #0]
 801508e:	b25b      	sxtb	r3, r3
 8015090:	2b00      	cmp	r3, #0
 8015092:	da1b      	bge.n	80150cc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801509a:	687a      	ldr	r2, [r7, #4]
 801509c:	33b0      	adds	r3, #176	; 0xb0
 801509e:	009b      	lsls	r3, r3, #2
 80150a0:	4413      	add	r3, r2
 80150a2:	685b      	ldr	r3, [r3, #4]
 80150a4:	689b      	ldr	r3, [r3, #8]
 80150a6:	683a      	ldr	r2, [r7, #0]
 80150a8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80150aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80150ac:	683a      	ldr	r2, [r7, #0]
 80150ae:	88d2      	ldrh	r2, [r2, #6]
 80150b0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80150b2:	683b      	ldr	r3, [r7, #0]
 80150b4:	88db      	ldrh	r3, [r3, #6]
 80150b6:	2b07      	cmp	r3, #7
 80150b8:	bf28      	it	cs
 80150ba:	2307      	movcs	r3, #7
 80150bc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80150be:	693b      	ldr	r3, [r7, #16]
 80150c0:	89fa      	ldrh	r2, [r7, #14]
 80150c2:	4619      	mov	r1, r3
 80150c4:	6878      	ldr	r0, [r7, #4]
 80150c6:	f001 fd89 	bl	8016bdc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80150ca:	e090      	b.n	80151ee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80150cc:	683b      	ldr	r3, [r7, #0]
 80150ce:	785a      	ldrb	r2, [r3, #1]
 80150d0:	693b      	ldr	r3, [r7, #16]
 80150d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80150d6:	683b      	ldr	r3, [r7, #0]
 80150d8:	88db      	ldrh	r3, [r3, #6]
 80150da:	2b3f      	cmp	r3, #63	; 0x3f
 80150dc:	d803      	bhi.n	80150e6 <USBD_CDC_Setup+0xa6>
 80150de:	683b      	ldr	r3, [r7, #0]
 80150e0:	88db      	ldrh	r3, [r3, #6]
 80150e2:	b2da      	uxtb	r2, r3
 80150e4:	e000      	b.n	80150e8 <USBD_CDC_Setup+0xa8>
 80150e6:	2240      	movs	r2, #64	; 0x40
 80150e8:	693b      	ldr	r3, [r7, #16]
 80150ea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80150ee:	6939      	ldr	r1, [r7, #16]
 80150f0:	693b      	ldr	r3, [r7, #16]
 80150f2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80150f6:	461a      	mov	r2, r3
 80150f8:	6878      	ldr	r0, [r7, #4]
 80150fa:	f001 fd9b 	bl	8016c34 <USBD_CtlPrepareRx>
      break;
 80150fe:	e076      	b.n	80151ee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015106:	687a      	ldr	r2, [r7, #4]
 8015108:	33b0      	adds	r3, #176	; 0xb0
 801510a:	009b      	lsls	r3, r3, #2
 801510c:	4413      	add	r3, r2
 801510e:	685b      	ldr	r3, [r3, #4]
 8015110:	689b      	ldr	r3, [r3, #8]
 8015112:	683a      	ldr	r2, [r7, #0]
 8015114:	7850      	ldrb	r0, [r2, #1]
 8015116:	2200      	movs	r2, #0
 8015118:	6839      	ldr	r1, [r7, #0]
 801511a:	4798      	blx	r3
      break;
 801511c:	e067      	b.n	80151ee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801511e:	683b      	ldr	r3, [r7, #0]
 8015120:	785b      	ldrb	r3, [r3, #1]
 8015122:	2b0b      	cmp	r3, #11
 8015124:	d851      	bhi.n	80151ca <USBD_CDC_Setup+0x18a>
 8015126:	a201      	add	r2, pc, #4	; (adr r2, 801512c <USBD_CDC_Setup+0xec>)
 8015128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801512c:	0801515d 	.word	0x0801515d
 8015130:	080151d9 	.word	0x080151d9
 8015134:	080151cb 	.word	0x080151cb
 8015138:	080151cb 	.word	0x080151cb
 801513c:	080151cb 	.word	0x080151cb
 8015140:	080151cb 	.word	0x080151cb
 8015144:	080151cb 	.word	0x080151cb
 8015148:	080151cb 	.word	0x080151cb
 801514c:	080151cb 	.word	0x080151cb
 8015150:	080151cb 	.word	0x080151cb
 8015154:	08015187 	.word	0x08015187
 8015158:	080151b1 	.word	0x080151b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015162:	b2db      	uxtb	r3, r3
 8015164:	2b03      	cmp	r3, #3
 8015166:	d107      	bne.n	8015178 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015168:	f107 030a 	add.w	r3, r7, #10
 801516c:	2202      	movs	r2, #2
 801516e:	4619      	mov	r1, r3
 8015170:	6878      	ldr	r0, [r7, #4]
 8015172:	f001 fd33 	bl	8016bdc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015176:	e032      	b.n	80151de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015178:	6839      	ldr	r1, [r7, #0]
 801517a:	6878      	ldr	r0, [r7, #4]
 801517c:	f001 fcbd 	bl	8016afa <USBD_CtlError>
            ret = USBD_FAIL;
 8015180:	2303      	movs	r3, #3
 8015182:	75fb      	strb	r3, [r7, #23]
          break;
 8015184:	e02b      	b.n	80151de <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801518c:	b2db      	uxtb	r3, r3
 801518e:	2b03      	cmp	r3, #3
 8015190:	d107      	bne.n	80151a2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015192:	f107 030d 	add.w	r3, r7, #13
 8015196:	2201      	movs	r2, #1
 8015198:	4619      	mov	r1, r3
 801519a:	6878      	ldr	r0, [r7, #4]
 801519c:	f001 fd1e 	bl	8016bdc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80151a0:	e01d      	b.n	80151de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80151a2:	6839      	ldr	r1, [r7, #0]
 80151a4:	6878      	ldr	r0, [r7, #4]
 80151a6:	f001 fca8 	bl	8016afa <USBD_CtlError>
            ret = USBD_FAIL;
 80151aa:	2303      	movs	r3, #3
 80151ac:	75fb      	strb	r3, [r7, #23]
          break;
 80151ae:	e016      	b.n	80151de <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80151b6:	b2db      	uxtb	r3, r3
 80151b8:	2b03      	cmp	r3, #3
 80151ba:	d00f      	beq.n	80151dc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80151bc:	6839      	ldr	r1, [r7, #0]
 80151be:	6878      	ldr	r0, [r7, #4]
 80151c0:	f001 fc9b 	bl	8016afa <USBD_CtlError>
            ret = USBD_FAIL;
 80151c4:	2303      	movs	r3, #3
 80151c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80151c8:	e008      	b.n	80151dc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80151ca:	6839      	ldr	r1, [r7, #0]
 80151cc:	6878      	ldr	r0, [r7, #4]
 80151ce:	f001 fc94 	bl	8016afa <USBD_CtlError>
          ret = USBD_FAIL;
 80151d2:	2303      	movs	r3, #3
 80151d4:	75fb      	strb	r3, [r7, #23]
          break;
 80151d6:	e002      	b.n	80151de <USBD_CDC_Setup+0x19e>
          break;
 80151d8:	bf00      	nop
 80151da:	e008      	b.n	80151ee <USBD_CDC_Setup+0x1ae>
          break;
 80151dc:	bf00      	nop
      }
      break;
 80151de:	e006      	b.n	80151ee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80151e0:	6839      	ldr	r1, [r7, #0]
 80151e2:	6878      	ldr	r0, [r7, #4]
 80151e4:	f001 fc89 	bl	8016afa <USBD_CtlError>
      ret = USBD_FAIL;
 80151e8:	2303      	movs	r3, #3
 80151ea:	75fb      	strb	r3, [r7, #23]
      break;
 80151ec:	bf00      	nop
  }

  return (uint8_t)ret;
 80151ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80151f0:	4618      	mov	r0, r3
 80151f2:	3718      	adds	r7, #24
 80151f4:	46bd      	mov	sp, r7
 80151f6:	bd80      	pop	{r7, pc}

080151f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80151f8:	b580      	push	{r7, lr}
 80151fa:	b084      	sub	sp, #16
 80151fc:	af00      	add	r7, sp, #0
 80151fe:	6078      	str	r0, [r7, #4]
 8015200:	460b      	mov	r3, r1
 8015202:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801520a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	32b0      	adds	r2, #176	; 0xb0
 8015216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d101      	bne.n	8015222 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801521e:	2303      	movs	r3, #3
 8015220:	e065      	b.n	80152ee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	32b0      	adds	r2, #176	; 0xb0
 801522c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015230:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015232:	78fb      	ldrb	r3, [r7, #3]
 8015234:	f003 020f 	and.w	r2, r3, #15
 8015238:	6879      	ldr	r1, [r7, #4]
 801523a:	4613      	mov	r3, r2
 801523c:	009b      	lsls	r3, r3, #2
 801523e:	4413      	add	r3, r2
 8015240:	009b      	lsls	r3, r3, #2
 8015242:	440b      	add	r3, r1
 8015244:	3318      	adds	r3, #24
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	2b00      	cmp	r3, #0
 801524a:	d02f      	beq.n	80152ac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801524c:	78fb      	ldrb	r3, [r7, #3]
 801524e:	f003 020f 	and.w	r2, r3, #15
 8015252:	6879      	ldr	r1, [r7, #4]
 8015254:	4613      	mov	r3, r2
 8015256:	009b      	lsls	r3, r3, #2
 8015258:	4413      	add	r3, r2
 801525a:	009b      	lsls	r3, r3, #2
 801525c:	440b      	add	r3, r1
 801525e:	3318      	adds	r3, #24
 8015260:	681a      	ldr	r2, [r3, #0]
 8015262:	78fb      	ldrb	r3, [r7, #3]
 8015264:	f003 010f 	and.w	r1, r3, #15
 8015268:	68f8      	ldr	r0, [r7, #12]
 801526a:	460b      	mov	r3, r1
 801526c:	00db      	lsls	r3, r3, #3
 801526e:	440b      	add	r3, r1
 8015270:	009b      	lsls	r3, r3, #2
 8015272:	4403      	add	r3, r0
 8015274:	3344      	adds	r3, #68	; 0x44
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	fbb2 f1f3 	udiv	r1, r2, r3
 801527c:	fb01 f303 	mul.w	r3, r1, r3
 8015280:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015282:	2b00      	cmp	r3, #0
 8015284:	d112      	bne.n	80152ac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015286:	78fb      	ldrb	r3, [r7, #3]
 8015288:	f003 020f 	and.w	r2, r3, #15
 801528c:	6879      	ldr	r1, [r7, #4]
 801528e:	4613      	mov	r3, r2
 8015290:	009b      	lsls	r3, r3, #2
 8015292:	4413      	add	r3, r2
 8015294:	009b      	lsls	r3, r3, #2
 8015296:	440b      	add	r3, r1
 8015298:	3318      	adds	r3, #24
 801529a:	2200      	movs	r2, #0
 801529c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801529e:	78f9      	ldrb	r1, [r7, #3]
 80152a0:	2300      	movs	r3, #0
 80152a2:	2200      	movs	r2, #0
 80152a4:	6878      	ldr	r0, [r7, #4]
 80152a6:	f004 fbc9 	bl	8019a3c <USBD_LL_Transmit>
 80152aa:	e01f      	b.n	80152ec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80152ac:	68bb      	ldr	r3, [r7, #8]
 80152ae:	2200      	movs	r2, #0
 80152b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80152ba:	687a      	ldr	r2, [r7, #4]
 80152bc:	33b0      	adds	r3, #176	; 0xb0
 80152be:	009b      	lsls	r3, r3, #2
 80152c0:	4413      	add	r3, r2
 80152c2:	685b      	ldr	r3, [r3, #4]
 80152c4:	691b      	ldr	r3, [r3, #16]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d010      	beq.n	80152ec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80152d0:	687a      	ldr	r2, [r7, #4]
 80152d2:	33b0      	adds	r3, #176	; 0xb0
 80152d4:	009b      	lsls	r3, r3, #2
 80152d6:	4413      	add	r3, r2
 80152d8:	685b      	ldr	r3, [r3, #4]
 80152da:	691b      	ldr	r3, [r3, #16]
 80152dc:	68ba      	ldr	r2, [r7, #8]
 80152de:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80152e2:	68ba      	ldr	r2, [r7, #8]
 80152e4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80152e8:	78fa      	ldrb	r2, [r7, #3]
 80152ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80152ec:	2300      	movs	r3, #0
}
 80152ee:	4618      	mov	r0, r3
 80152f0:	3710      	adds	r7, #16
 80152f2:	46bd      	mov	sp, r7
 80152f4:	bd80      	pop	{r7, pc}

080152f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80152f6:	b580      	push	{r7, lr}
 80152f8:	b084      	sub	sp, #16
 80152fa:	af00      	add	r7, sp, #0
 80152fc:	6078      	str	r0, [r7, #4]
 80152fe:	460b      	mov	r3, r1
 8015300:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	32b0      	adds	r2, #176	; 0xb0
 801530c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015310:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	32b0      	adds	r2, #176	; 0xb0
 801531c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015320:	2b00      	cmp	r3, #0
 8015322:	d101      	bne.n	8015328 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8015324:	2303      	movs	r3, #3
 8015326:	e01a      	b.n	801535e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015328:	78fb      	ldrb	r3, [r7, #3]
 801532a:	4619      	mov	r1, r3
 801532c:	6878      	ldr	r0, [r7, #4]
 801532e:	f004 fbf5 	bl	8019b1c <USBD_LL_GetRxDataSize>
 8015332:	4602      	mov	r2, r0
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015340:	687a      	ldr	r2, [r7, #4]
 8015342:	33b0      	adds	r3, #176	; 0xb0
 8015344:	009b      	lsls	r3, r3, #2
 8015346:	4413      	add	r3, r2
 8015348:	685b      	ldr	r3, [r3, #4]
 801534a:	68db      	ldr	r3, [r3, #12]
 801534c:	68fa      	ldr	r2, [r7, #12]
 801534e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8015352:	68fa      	ldr	r2, [r7, #12]
 8015354:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8015358:	4611      	mov	r1, r2
 801535a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801535c:	2300      	movs	r3, #0
}
 801535e:	4618      	mov	r0, r3
 8015360:	3710      	adds	r7, #16
 8015362:	46bd      	mov	sp, r7
 8015364:	bd80      	pop	{r7, pc}

08015366 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015366:	b580      	push	{r7, lr}
 8015368:	b084      	sub	sp, #16
 801536a:	af00      	add	r7, sp, #0
 801536c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	32b0      	adds	r2, #176	; 0xb0
 8015378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801537c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	2b00      	cmp	r3, #0
 8015382:	d101      	bne.n	8015388 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015384:	2303      	movs	r3, #3
 8015386:	e025      	b.n	80153d4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801538e:	687a      	ldr	r2, [r7, #4]
 8015390:	33b0      	adds	r3, #176	; 0xb0
 8015392:	009b      	lsls	r3, r3, #2
 8015394:	4413      	add	r3, r2
 8015396:	685b      	ldr	r3, [r3, #4]
 8015398:	2b00      	cmp	r3, #0
 801539a:	d01a      	beq.n	80153d2 <USBD_CDC_EP0_RxReady+0x6c>
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80153a2:	2bff      	cmp	r3, #255	; 0xff
 80153a4:	d015      	beq.n	80153d2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80153ac:	687a      	ldr	r2, [r7, #4]
 80153ae:	33b0      	adds	r3, #176	; 0xb0
 80153b0:	009b      	lsls	r3, r3, #2
 80153b2:	4413      	add	r3, r2
 80153b4:	685b      	ldr	r3, [r3, #4]
 80153b6:	689b      	ldr	r3, [r3, #8]
 80153b8:	68fa      	ldr	r2, [r7, #12]
 80153ba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80153be:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80153c0:	68fa      	ldr	r2, [r7, #12]
 80153c2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80153c6:	b292      	uxth	r2, r2
 80153c8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	22ff      	movs	r2, #255	; 0xff
 80153ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80153d2:	2300      	movs	r3, #0
}
 80153d4:	4618      	mov	r0, r3
 80153d6:	3710      	adds	r7, #16
 80153d8:	46bd      	mov	sp, r7
 80153da:	bd80      	pop	{r7, pc}

080153dc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80153dc:	b580      	push	{r7, lr}
 80153de:	b086      	sub	sp, #24
 80153e0:	af00      	add	r7, sp, #0
 80153e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80153e4:	2182      	movs	r1, #130	; 0x82
 80153e6:	4818      	ldr	r0, [pc, #96]	; (8015448 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80153e8:	f000 fd4f 	bl	8015e8a <USBD_GetEpDesc>
 80153ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80153ee:	2101      	movs	r1, #1
 80153f0:	4815      	ldr	r0, [pc, #84]	; (8015448 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80153f2:	f000 fd4a 	bl	8015e8a <USBD_GetEpDesc>
 80153f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80153f8:	2181      	movs	r1, #129	; 0x81
 80153fa:	4813      	ldr	r0, [pc, #76]	; (8015448 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80153fc:	f000 fd45 	bl	8015e8a <USBD_GetEpDesc>
 8015400:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015402:	697b      	ldr	r3, [r7, #20]
 8015404:	2b00      	cmp	r3, #0
 8015406:	d002      	beq.n	801540e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015408:	697b      	ldr	r3, [r7, #20]
 801540a:	2210      	movs	r2, #16
 801540c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801540e:	693b      	ldr	r3, [r7, #16]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d006      	beq.n	8015422 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015414:	693b      	ldr	r3, [r7, #16]
 8015416:	2200      	movs	r2, #0
 8015418:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801541c:	711a      	strb	r2, [r3, #4]
 801541e:	2200      	movs	r2, #0
 8015420:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015422:	68fb      	ldr	r3, [r7, #12]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d006      	beq.n	8015436 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	2200      	movs	r2, #0
 801542c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015430:	711a      	strb	r2, [r3, #4]
 8015432:	2200      	movs	r2, #0
 8015434:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	2243      	movs	r2, #67	; 0x43
 801543a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801543c:	4b02      	ldr	r3, [pc, #8]	; (8015448 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801543e:	4618      	mov	r0, r3
 8015440:	3718      	adds	r7, #24
 8015442:	46bd      	mov	sp, r7
 8015444:	bd80      	pop	{r7, pc}
 8015446:	bf00      	nop
 8015448:	20000054 	.word	0x20000054

0801544c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801544c:	b580      	push	{r7, lr}
 801544e:	b086      	sub	sp, #24
 8015450:	af00      	add	r7, sp, #0
 8015452:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015454:	2182      	movs	r1, #130	; 0x82
 8015456:	4818      	ldr	r0, [pc, #96]	; (80154b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015458:	f000 fd17 	bl	8015e8a <USBD_GetEpDesc>
 801545c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801545e:	2101      	movs	r1, #1
 8015460:	4815      	ldr	r0, [pc, #84]	; (80154b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015462:	f000 fd12 	bl	8015e8a <USBD_GetEpDesc>
 8015466:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015468:	2181      	movs	r1, #129	; 0x81
 801546a:	4813      	ldr	r0, [pc, #76]	; (80154b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801546c:	f000 fd0d 	bl	8015e8a <USBD_GetEpDesc>
 8015470:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015472:	697b      	ldr	r3, [r7, #20]
 8015474:	2b00      	cmp	r3, #0
 8015476:	d002      	beq.n	801547e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015478:	697b      	ldr	r3, [r7, #20]
 801547a:	2210      	movs	r2, #16
 801547c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801547e:	693b      	ldr	r3, [r7, #16]
 8015480:	2b00      	cmp	r3, #0
 8015482:	d006      	beq.n	8015492 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015484:	693b      	ldr	r3, [r7, #16]
 8015486:	2200      	movs	r2, #0
 8015488:	711a      	strb	r2, [r3, #4]
 801548a:	2200      	movs	r2, #0
 801548c:	f042 0202 	orr.w	r2, r2, #2
 8015490:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d006      	beq.n	80154a6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	2200      	movs	r2, #0
 801549c:	711a      	strb	r2, [r3, #4]
 801549e:	2200      	movs	r2, #0
 80154a0:	f042 0202 	orr.w	r2, r2, #2
 80154a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	2243      	movs	r2, #67	; 0x43
 80154aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80154ac:	4b02      	ldr	r3, [pc, #8]	; (80154b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80154ae:	4618      	mov	r0, r3
 80154b0:	3718      	adds	r7, #24
 80154b2:	46bd      	mov	sp, r7
 80154b4:	bd80      	pop	{r7, pc}
 80154b6:	bf00      	nop
 80154b8:	20000054 	.word	0x20000054

080154bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80154bc:	b580      	push	{r7, lr}
 80154be:	b086      	sub	sp, #24
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80154c4:	2182      	movs	r1, #130	; 0x82
 80154c6:	4818      	ldr	r0, [pc, #96]	; (8015528 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80154c8:	f000 fcdf 	bl	8015e8a <USBD_GetEpDesc>
 80154cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80154ce:	2101      	movs	r1, #1
 80154d0:	4815      	ldr	r0, [pc, #84]	; (8015528 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80154d2:	f000 fcda 	bl	8015e8a <USBD_GetEpDesc>
 80154d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80154d8:	2181      	movs	r1, #129	; 0x81
 80154da:	4813      	ldr	r0, [pc, #76]	; (8015528 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80154dc:	f000 fcd5 	bl	8015e8a <USBD_GetEpDesc>
 80154e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80154e2:	697b      	ldr	r3, [r7, #20]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d002      	beq.n	80154ee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80154e8:	697b      	ldr	r3, [r7, #20]
 80154ea:	2210      	movs	r2, #16
 80154ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80154ee:	693b      	ldr	r3, [r7, #16]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d006      	beq.n	8015502 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80154f4:	693b      	ldr	r3, [r7, #16]
 80154f6:	2200      	movs	r2, #0
 80154f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80154fc:	711a      	strb	r2, [r3, #4]
 80154fe:	2200      	movs	r2, #0
 8015500:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d006      	beq.n	8015516 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	2200      	movs	r2, #0
 801550c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015510:	711a      	strb	r2, [r3, #4]
 8015512:	2200      	movs	r2, #0
 8015514:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	2243      	movs	r2, #67	; 0x43
 801551a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801551c:	4b02      	ldr	r3, [pc, #8]	; (8015528 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801551e:	4618      	mov	r0, r3
 8015520:	3718      	adds	r7, #24
 8015522:	46bd      	mov	sp, r7
 8015524:	bd80      	pop	{r7, pc}
 8015526:	bf00      	nop
 8015528:	20000054 	.word	0x20000054

0801552c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801552c:	b480      	push	{r7}
 801552e:	b083      	sub	sp, #12
 8015530:	af00      	add	r7, sp, #0
 8015532:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	220a      	movs	r2, #10
 8015538:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801553a:	4b03      	ldr	r3, [pc, #12]	; (8015548 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801553c:	4618      	mov	r0, r3
 801553e:	370c      	adds	r7, #12
 8015540:	46bd      	mov	sp, r7
 8015542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015546:	4770      	bx	lr
 8015548:	20000010 	.word	0x20000010

0801554c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801554c:	b480      	push	{r7}
 801554e:	b083      	sub	sp, #12
 8015550:	af00      	add	r7, sp, #0
 8015552:	6078      	str	r0, [r7, #4]
 8015554:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8015556:	683b      	ldr	r3, [r7, #0]
 8015558:	2b00      	cmp	r3, #0
 801555a:	d101      	bne.n	8015560 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801555c:	2303      	movs	r3, #3
 801555e:	e009      	b.n	8015574 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015566:	687a      	ldr	r2, [r7, #4]
 8015568:	33b0      	adds	r3, #176	; 0xb0
 801556a:	009b      	lsls	r3, r3, #2
 801556c:	4413      	add	r3, r2
 801556e:	683a      	ldr	r2, [r7, #0]
 8015570:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8015572:	2300      	movs	r3, #0
}
 8015574:	4618      	mov	r0, r3
 8015576:	370c      	adds	r7, #12
 8015578:	46bd      	mov	sp, r7
 801557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801557e:	4770      	bx	lr

08015580 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015580:	b480      	push	{r7}
 8015582:	b087      	sub	sp, #28
 8015584:	af00      	add	r7, sp, #0
 8015586:	60f8      	str	r0, [r7, #12]
 8015588:	60b9      	str	r1, [r7, #8]
 801558a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	32b0      	adds	r2, #176	; 0xb0
 8015596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801559a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801559c:	697b      	ldr	r3, [r7, #20]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d101      	bne.n	80155a6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80155a2:	2303      	movs	r3, #3
 80155a4:	e008      	b.n	80155b8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80155a6:	697b      	ldr	r3, [r7, #20]
 80155a8:	68ba      	ldr	r2, [r7, #8]
 80155aa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80155ae:	697b      	ldr	r3, [r7, #20]
 80155b0:	687a      	ldr	r2, [r7, #4]
 80155b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80155b6:	2300      	movs	r3, #0
}
 80155b8:	4618      	mov	r0, r3
 80155ba:	371c      	adds	r7, #28
 80155bc:	46bd      	mov	sp, r7
 80155be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c2:	4770      	bx	lr

080155c4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80155c4:	b480      	push	{r7}
 80155c6:	b085      	sub	sp, #20
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	6078      	str	r0, [r7, #4]
 80155cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	32b0      	adds	r2, #176	; 0xb0
 80155d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d101      	bne.n	80155e8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80155e4:	2303      	movs	r3, #3
 80155e6:	e004      	b.n	80155f2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	683a      	ldr	r2, [r7, #0]
 80155ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80155f0:	2300      	movs	r3, #0
}
 80155f2:	4618      	mov	r0, r3
 80155f4:	3714      	adds	r7, #20
 80155f6:	46bd      	mov	sp, r7
 80155f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155fc:	4770      	bx	lr
	...

08015600 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8015600:	b580      	push	{r7, lr}
 8015602:	b084      	sub	sp, #16
 8015604:	af00      	add	r7, sp, #0
 8015606:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	32b0      	adds	r2, #176	; 0xb0
 8015612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015616:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8015618:	2301      	movs	r3, #1
 801561a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801561c:	68bb      	ldr	r3, [r7, #8]
 801561e:	2b00      	cmp	r3, #0
 8015620:	d101      	bne.n	8015626 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015622:	2303      	movs	r3, #3
 8015624:	e025      	b.n	8015672 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8015626:	68bb      	ldr	r3, [r7, #8]
 8015628:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801562c:	2b00      	cmp	r3, #0
 801562e:	d11f      	bne.n	8015670 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8015630:	68bb      	ldr	r3, [r7, #8]
 8015632:	2201      	movs	r2, #1
 8015634:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8015638:	4b10      	ldr	r3, [pc, #64]	; (801567c <USBD_CDC_TransmitPacket+0x7c>)
 801563a:	781b      	ldrb	r3, [r3, #0]
 801563c:	f003 020f 	and.w	r2, r3, #15
 8015640:	68bb      	ldr	r3, [r7, #8]
 8015642:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8015646:	6878      	ldr	r0, [r7, #4]
 8015648:	4613      	mov	r3, r2
 801564a:	009b      	lsls	r3, r3, #2
 801564c:	4413      	add	r3, r2
 801564e:	009b      	lsls	r3, r3, #2
 8015650:	4403      	add	r3, r0
 8015652:	3318      	adds	r3, #24
 8015654:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8015656:	4b09      	ldr	r3, [pc, #36]	; (801567c <USBD_CDC_TransmitPacket+0x7c>)
 8015658:	7819      	ldrb	r1, [r3, #0]
 801565a:	68bb      	ldr	r3, [r7, #8]
 801565c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8015660:	68bb      	ldr	r3, [r7, #8]
 8015662:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8015666:	6878      	ldr	r0, [r7, #4]
 8015668:	f004 f9e8 	bl	8019a3c <USBD_LL_Transmit>

    ret = USBD_OK;
 801566c:	2300      	movs	r3, #0
 801566e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8015670:	7bfb      	ldrb	r3, [r7, #15]
}
 8015672:	4618      	mov	r0, r3
 8015674:	3710      	adds	r7, #16
 8015676:	46bd      	mov	sp, r7
 8015678:	bd80      	pop	{r7, pc}
 801567a:	bf00      	nop
 801567c:	20000097 	.word	0x20000097

08015680 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015680:	b580      	push	{r7, lr}
 8015682:	b084      	sub	sp, #16
 8015684:	af00      	add	r7, sp, #0
 8015686:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	32b0      	adds	r2, #176	; 0xb0
 8015692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015696:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	32b0      	adds	r2, #176	; 0xb0
 80156a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d101      	bne.n	80156ae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80156aa:	2303      	movs	r3, #3
 80156ac:	e018      	b.n	80156e0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	7c1b      	ldrb	r3, [r3, #16]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d10a      	bne.n	80156cc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80156b6:	4b0c      	ldr	r3, [pc, #48]	; (80156e8 <USBD_CDC_ReceivePacket+0x68>)
 80156b8:	7819      	ldrb	r1, [r3, #0]
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80156c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80156c4:	6878      	ldr	r0, [r7, #4]
 80156c6:	f004 f9f1 	bl	8019aac <USBD_LL_PrepareReceive>
 80156ca:	e008      	b.n	80156de <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80156cc:	4b06      	ldr	r3, [pc, #24]	; (80156e8 <USBD_CDC_ReceivePacket+0x68>)
 80156ce:	7819      	ldrb	r1, [r3, #0]
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80156d6:	2340      	movs	r3, #64	; 0x40
 80156d8:	6878      	ldr	r0, [r7, #4]
 80156da:	f004 f9e7 	bl	8019aac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80156de:	2300      	movs	r3, #0
}
 80156e0:	4618      	mov	r0, r3
 80156e2:	3710      	adds	r7, #16
 80156e4:	46bd      	mov	sp, r7
 80156e6:	bd80      	pop	{r7, pc}
 80156e8:	20000098 	.word	0x20000098

080156ec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80156ec:	b580      	push	{r7, lr}
 80156ee:	b086      	sub	sp, #24
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	60f8      	str	r0, [r7, #12]
 80156f4:	60b9      	str	r1, [r7, #8]
 80156f6:	4613      	mov	r3, r2
 80156f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d101      	bne.n	8015704 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015700:	2303      	movs	r3, #3
 8015702:	e01f      	b.n	8015744 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	2200      	movs	r2, #0
 8015708:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	2200      	movs	r2, #0
 8015710:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	2200      	movs	r2, #0
 8015718:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801571c:	68bb      	ldr	r3, [r7, #8]
 801571e:	2b00      	cmp	r3, #0
 8015720:	d003      	beq.n	801572a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	68ba      	ldr	r2, [r7, #8]
 8015726:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	2201      	movs	r2, #1
 801572e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	79fa      	ldrb	r2, [r7, #7]
 8015736:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015738:	68f8      	ldr	r0, [r7, #12]
 801573a:	f003 ffbf 	bl	80196bc <USBD_LL_Init>
 801573e:	4603      	mov	r3, r0
 8015740:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015742:	7dfb      	ldrb	r3, [r7, #23]
}
 8015744:	4618      	mov	r0, r3
 8015746:	3718      	adds	r7, #24
 8015748:	46bd      	mov	sp, r7
 801574a:	bd80      	pop	{r7, pc}

0801574c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801574c:	b580      	push	{r7, lr}
 801574e:	b084      	sub	sp, #16
 8015750:	af00      	add	r7, sp, #0
 8015752:	6078      	str	r0, [r7, #4]
 8015754:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015756:	2300      	movs	r3, #0
 8015758:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801575a:	683b      	ldr	r3, [r7, #0]
 801575c:	2b00      	cmp	r3, #0
 801575e:	d101      	bne.n	8015764 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015760:	2303      	movs	r3, #3
 8015762:	e025      	b.n	80157b0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	683a      	ldr	r2, [r7, #0]
 8015768:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	32ae      	adds	r2, #174	; 0xae
 8015776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801577a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801577c:	2b00      	cmp	r3, #0
 801577e:	d00f      	beq.n	80157a0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	32ae      	adds	r2, #174	; 0xae
 801578a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801578e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015790:	f107 020e 	add.w	r2, r7, #14
 8015794:	4610      	mov	r0, r2
 8015796:	4798      	blx	r3
 8015798:	4602      	mov	r2, r0
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80157a6:	1c5a      	adds	r2, r3, #1
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80157ae:	2300      	movs	r3, #0
}
 80157b0:	4618      	mov	r0, r3
 80157b2:	3710      	adds	r7, #16
 80157b4:	46bd      	mov	sp, r7
 80157b6:	bd80      	pop	{r7, pc}

080157b8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b082      	sub	sp, #8
 80157bc:	af00      	add	r7, sp, #0
 80157be:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80157c0:	6878      	ldr	r0, [r7, #4]
 80157c2:	f003 ffc7 	bl	8019754 <USBD_LL_Start>
 80157c6:	4603      	mov	r3, r0
}
 80157c8:	4618      	mov	r0, r3
 80157ca:	3708      	adds	r7, #8
 80157cc:	46bd      	mov	sp, r7
 80157ce:	bd80      	pop	{r7, pc}

080157d0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80157d0:	b480      	push	{r7}
 80157d2:	b083      	sub	sp, #12
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80157d8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80157da:	4618      	mov	r0, r3
 80157dc:	370c      	adds	r7, #12
 80157de:	46bd      	mov	sp, r7
 80157e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e4:	4770      	bx	lr

080157e6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80157e6:	b580      	push	{r7, lr}
 80157e8:	b084      	sub	sp, #16
 80157ea:	af00      	add	r7, sp, #0
 80157ec:	6078      	str	r0, [r7, #4]
 80157ee:	460b      	mov	r3, r1
 80157f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80157f2:	2300      	movs	r3, #0
 80157f4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d009      	beq.n	8015814 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	78fa      	ldrb	r2, [r7, #3]
 801580a:	4611      	mov	r1, r2
 801580c:	6878      	ldr	r0, [r7, #4]
 801580e:	4798      	blx	r3
 8015810:	4603      	mov	r3, r0
 8015812:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015814:	7bfb      	ldrb	r3, [r7, #15]
}
 8015816:	4618      	mov	r0, r3
 8015818:	3710      	adds	r7, #16
 801581a:	46bd      	mov	sp, r7
 801581c:	bd80      	pop	{r7, pc}

0801581e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801581e:	b580      	push	{r7, lr}
 8015820:	b084      	sub	sp, #16
 8015822:	af00      	add	r7, sp, #0
 8015824:	6078      	str	r0, [r7, #4]
 8015826:	460b      	mov	r3, r1
 8015828:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801582a:	2300      	movs	r3, #0
 801582c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015834:	685b      	ldr	r3, [r3, #4]
 8015836:	78fa      	ldrb	r2, [r7, #3]
 8015838:	4611      	mov	r1, r2
 801583a:	6878      	ldr	r0, [r7, #4]
 801583c:	4798      	blx	r3
 801583e:	4603      	mov	r3, r0
 8015840:	2b00      	cmp	r3, #0
 8015842:	d001      	beq.n	8015848 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015844:	2303      	movs	r3, #3
 8015846:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015848:	7bfb      	ldrb	r3, [r7, #15]
}
 801584a:	4618      	mov	r0, r3
 801584c:	3710      	adds	r7, #16
 801584e:	46bd      	mov	sp, r7
 8015850:	bd80      	pop	{r7, pc}

08015852 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015852:	b580      	push	{r7, lr}
 8015854:	b084      	sub	sp, #16
 8015856:	af00      	add	r7, sp, #0
 8015858:	6078      	str	r0, [r7, #4]
 801585a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015862:	6839      	ldr	r1, [r7, #0]
 8015864:	4618      	mov	r0, r3
 8015866:	f001 f90e 	bl	8016a86 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	2201      	movs	r2, #1
 801586e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015878:	461a      	mov	r2, r3
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015886:	f003 031f 	and.w	r3, r3, #31
 801588a:	2b02      	cmp	r3, #2
 801588c:	d01a      	beq.n	80158c4 <USBD_LL_SetupStage+0x72>
 801588e:	2b02      	cmp	r3, #2
 8015890:	d822      	bhi.n	80158d8 <USBD_LL_SetupStage+0x86>
 8015892:	2b00      	cmp	r3, #0
 8015894:	d002      	beq.n	801589c <USBD_LL_SetupStage+0x4a>
 8015896:	2b01      	cmp	r3, #1
 8015898:	d00a      	beq.n	80158b0 <USBD_LL_SetupStage+0x5e>
 801589a:	e01d      	b.n	80158d8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80158a2:	4619      	mov	r1, r3
 80158a4:	6878      	ldr	r0, [r7, #4]
 80158a6:	f000 fb65 	bl	8015f74 <USBD_StdDevReq>
 80158aa:	4603      	mov	r3, r0
 80158ac:	73fb      	strb	r3, [r7, #15]
      break;
 80158ae:	e020      	b.n	80158f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80158b6:	4619      	mov	r1, r3
 80158b8:	6878      	ldr	r0, [r7, #4]
 80158ba:	f000 fbcd 	bl	8016058 <USBD_StdItfReq>
 80158be:	4603      	mov	r3, r0
 80158c0:	73fb      	strb	r3, [r7, #15]
      break;
 80158c2:	e016      	b.n	80158f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80158ca:	4619      	mov	r1, r3
 80158cc:	6878      	ldr	r0, [r7, #4]
 80158ce:	f000 fc2f 	bl	8016130 <USBD_StdEPReq>
 80158d2:	4603      	mov	r3, r0
 80158d4:	73fb      	strb	r3, [r7, #15]
      break;
 80158d6:	e00c      	b.n	80158f2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80158de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80158e2:	b2db      	uxtb	r3, r3
 80158e4:	4619      	mov	r1, r3
 80158e6:	6878      	ldr	r0, [r7, #4]
 80158e8:	f003 ffda 	bl	80198a0 <USBD_LL_StallEP>
 80158ec:	4603      	mov	r3, r0
 80158ee:	73fb      	strb	r3, [r7, #15]
      break;
 80158f0:	bf00      	nop
  }

  return ret;
 80158f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80158f4:	4618      	mov	r0, r3
 80158f6:	3710      	adds	r7, #16
 80158f8:	46bd      	mov	sp, r7
 80158fa:	bd80      	pop	{r7, pc}

080158fc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80158fc:	b580      	push	{r7, lr}
 80158fe:	b086      	sub	sp, #24
 8015900:	af00      	add	r7, sp, #0
 8015902:	60f8      	str	r0, [r7, #12]
 8015904:	460b      	mov	r3, r1
 8015906:	607a      	str	r2, [r7, #4]
 8015908:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801590a:	2300      	movs	r3, #0
 801590c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801590e:	7afb      	ldrb	r3, [r7, #11]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d16e      	bne.n	80159f2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801591a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015922:	2b03      	cmp	r3, #3
 8015924:	f040 8098 	bne.w	8015a58 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015928:	693b      	ldr	r3, [r7, #16]
 801592a:	689a      	ldr	r2, [r3, #8]
 801592c:	693b      	ldr	r3, [r7, #16]
 801592e:	68db      	ldr	r3, [r3, #12]
 8015930:	429a      	cmp	r2, r3
 8015932:	d913      	bls.n	801595c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8015934:	693b      	ldr	r3, [r7, #16]
 8015936:	689a      	ldr	r2, [r3, #8]
 8015938:	693b      	ldr	r3, [r7, #16]
 801593a:	68db      	ldr	r3, [r3, #12]
 801593c:	1ad2      	subs	r2, r2, r3
 801593e:	693b      	ldr	r3, [r7, #16]
 8015940:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015942:	693b      	ldr	r3, [r7, #16]
 8015944:	68da      	ldr	r2, [r3, #12]
 8015946:	693b      	ldr	r3, [r7, #16]
 8015948:	689b      	ldr	r3, [r3, #8]
 801594a:	4293      	cmp	r3, r2
 801594c:	bf28      	it	cs
 801594e:	4613      	movcs	r3, r2
 8015950:	461a      	mov	r2, r3
 8015952:	6879      	ldr	r1, [r7, #4]
 8015954:	68f8      	ldr	r0, [r7, #12]
 8015956:	f001 f98a 	bl	8016c6e <USBD_CtlContinueRx>
 801595a:	e07d      	b.n	8015a58 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015962:	f003 031f 	and.w	r3, r3, #31
 8015966:	2b02      	cmp	r3, #2
 8015968:	d014      	beq.n	8015994 <USBD_LL_DataOutStage+0x98>
 801596a:	2b02      	cmp	r3, #2
 801596c:	d81d      	bhi.n	80159aa <USBD_LL_DataOutStage+0xae>
 801596e:	2b00      	cmp	r3, #0
 8015970:	d002      	beq.n	8015978 <USBD_LL_DataOutStage+0x7c>
 8015972:	2b01      	cmp	r3, #1
 8015974:	d003      	beq.n	801597e <USBD_LL_DataOutStage+0x82>
 8015976:	e018      	b.n	80159aa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015978:	2300      	movs	r3, #0
 801597a:	75bb      	strb	r3, [r7, #22]
            break;
 801597c:	e018      	b.n	80159b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015984:	b2db      	uxtb	r3, r3
 8015986:	4619      	mov	r1, r3
 8015988:	68f8      	ldr	r0, [r7, #12]
 801598a:	f000 fa64 	bl	8015e56 <USBD_CoreFindIF>
 801598e:	4603      	mov	r3, r0
 8015990:	75bb      	strb	r3, [r7, #22]
            break;
 8015992:	e00d      	b.n	80159b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801599a:	b2db      	uxtb	r3, r3
 801599c:	4619      	mov	r1, r3
 801599e:	68f8      	ldr	r0, [r7, #12]
 80159a0:	f000 fa66 	bl	8015e70 <USBD_CoreFindEP>
 80159a4:	4603      	mov	r3, r0
 80159a6:	75bb      	strb	r3, [r7, #22]
            break;
 80159a8:	e002      	b.n	80159b0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80159aa:	2300      	movs	r3, #0
 80159ac:	75bb      	strb	r3, [r7, #22]
            break;
 80159ae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80159b0:	7dbb      	ldrb	r3, [r7, #22]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d119      	bne.n	80159ea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80159b6:	68fb      	ldr	r3, [r7, #12]
 80159b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159bc:	b2db      	uxtb	r3, r3
 80159be:	2b03      	cmp	r3, #3
 80159c0:	d113      	bne.n	80159ea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80159c2:	7dba      	ldrb	r2, [r7, #22]
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	32ae      	adds	r2, #174	; 0xae
 80159c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159cc:	691b      	ldr	r3, [r3, #16]
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d00b      	beq.n	80159ea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80159d2:	7dba      	ldrb	r2, [r7, #22]
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80159da:	7dba      	ldrb	r2, [r7, #22]
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	32ae      	adds	r2, #174	; 0xae
 80159e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159e4:	691b      	ldr	r3, [r3, #16]
 80159e6:	68f8      	ldr	r0, [r7, #12]
 80159e8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80159ea:	68f8      	ldr	r0, [r7, #12]
 80159ec:	f001 f950 	bl	8016c90 <USBD_CtlSendStatus>
 80159f0:	e032      	b.n	8015a58 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80159f2:	7afb      	ldrb	r3, [r7, #11]
 80159f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80159f8:	b2db      	uxtb	r3, r3
 80159fa:	4619      	mov	r1, r3
 80159fc:	68f8      	ldr	r0, [r7, #12]
 80159fe:	f000 fa37 	bl	8015e70 <USBD_CoreFindEP>
 8015a02:	4603      	mov	r3, r0
 8015a04:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015a06:	7dbb      	ldrb	r3, [r7, #22]
 8015a08:	2bff      	cmp	r3, #255	; 0xff
 8015a0a:	d025      	beq.n	8015a58 <USBD_LL_DataOutStage+0x15c>
 8015a0c:	7dbb      	ldrb	r3, [r7, #22]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d122      	bne.n	8015a58 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a18:	b2db      	uxtb	r3, r3
 8015a1a:	2b03      	cmp	r3, #3
 8015a1c:	d117      	bne.n	8015a4e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8015a1e:	7dba      	ldrb	r2, [r7, #22]
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	32ae      	adds	r2, #174	; 0xae
 8015a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a28:	699b      	ldr	r3, [r3, #24]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d00f      	beq.n	8015a4e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8015a2e:	7dba      	ldrb	r2, [r7, #22]
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8015a36:	7dba      	ldrb	r2, [r7, #22]
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	32ae      	adds	r2, #174	; 0xae
 8015a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a40:	699b      	ldr	r3, [r3, #24]
 8015a42:	7afa      	ldrb	r2, [r7, #11]
 8015a44:	4611      	mov	r1, r2
 8015a46:	68f8      	ldr	r0, [r7, #12]
 8015a48:	4798      	blx	r3
 8015a4a:	4603      	mov	r3, r0
 8015a4c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8015a4e:	7dfb      	ldrb	r3, [r7, #23]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d001      	beq.n	8015a58 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8015a54:	7dfb      	ldrb	r3, [r7, #23]
 8015a56:	e000      	b.n	8015a5a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015a58:	2300      	movs	r3, #0
}
 8015a5a:	4618      	mov	r0, r3
 8015a5c:	3718      	adds	r7, #24
 8015a5e:	46bd      	mov	sp, r7
 8015a60:	bd80      	pop	{r7, pc}

08015a62 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015a62:	b580      	push	{r7, lr}
 8015a64:	b086      	sub	sp, #24
 8015a66:	af00      	add	r7, sp, #0
 8015a68:	60f8      	str	r0, [r7, #12]
 8015a6a:	460b      	mov	r3, r1
 8015a6c:	607a      	str	r2, [r7, #4]
 8015a6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015a70:	7afb      	ldrb	r3, [r7, #11]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d16f      	bne.n	8015b56 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	3314      	adds	r3, #20
 8015a7a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015a82:	2b02      	cmp	r3, #2
 8015a84:	d15a      	bne.n	8015b3c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8015a86:	693b      	ldr	r3, [r7, #16]
 8015a88:	689a      	ldr	r2, [r3, #8]
 8015a8a:	693b      	ldr	r3, [r7, #16]
 8015a8c:	68db      	ldr	r3, [r3, #12]
 8015a8e:	429a      	cmp	r2, r3
 8015a90:	d914      	bls.n	8015abc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015a92:	693b      	ldr	r3, [r7, #16]
 8015a94:	689a      	ldr	r2, [r3, #8]
 8015a96:	693b      	ldr	r3, [r7, #16]
 8015a98:	68db      	ldr	r3, [r3, #12]
 8015a9a:	1ad2      	subs	r2, r2, r3
 8015a9c:	693b      	ldr	r3, [r7, #16]
 8015a9e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015aa0:	693b      	ldr	r3, [r7, #16]
 8015aa2:	689b      	ldr	r3, [r3, #8]
 8015aa4:	461a      	mov	r2, r3
 8015aa6:	6879      	ldr	r1, [r7, #4]
 8015aa8:	68f8      	ldr	r0, [r7, #12]
 8015aaa:	f001 f8b2 	bl	8016c12 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015aae:	2300      	movs	r3, #0
 8015ab0:	2200      	movs	r2, #0
 8015ab2:	2100      	movs	r1, #0
 8015ab4:	68f8      	ldr	r0, [r7, #12]
 8015ab6:	f003 fff9 	bl	8019aac <USBD_LL_PrepareReceive>
 8015aba:	e03f      	b.n	8015b3c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015abc:	693b      	ldr	r3, [r7, #16]
 8015abe:	68da      	ldr	r2, [r3, #12]
 8015ac0:	693b      	ldr	r3, [r7, #16]
 8015ac2:	689b      	ldr	r3, [r3, #8]
 8015ac4:	429a      	cmp	r2, r3
 8015ac6:	d11c      	bne.n	8015b02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015ac8:	693b      	ldr	r3, [r7, #16]
 8015aca:	685a      	ldr	r2, [r3, #4]
 8015acc:	693b      	ldr	r3, [r7, #16]
 8015ace:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015ad0:	429a      	cmp	r2, r3
 8015ad2:	d316      	bcc.n	8015b02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015ad4:	693b      	ldr	r3, [r7, #16]
 8015ad6:	685a      	ldr	r2, [r3, #4]
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015ade:	429a      	cmp	r2, r3
 8015ae0:	d20f      	bcs.n	8015b02 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015ae2:	2200      	movs	r2, #0
 8015ae4:	2100      	movs	r1, #0
 8015ae6:	68f8      	ldr	r0, [r7, #12]
 8015ae8:	f001 f893 	bl	8016c12 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	2200      	movs	r2, #0
 8015af0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015af4:	2300      	movs	r3, #0
 8015af6:	2200      	movs	r2, #0
 8015af8:	2100      	movs	r1, #0
 8015afa:	68f8      	ldr	r0, [r7, #12]
 8015afc:	f003 ffd6 	bl	8019aac <USBD_LL_PrepareReceive>
 8015b00:	e01c      	b.n	8015b3c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b08:	b2db      	uxtb	r3, r3
 8015b0a:	2b03      	cmp	r3, #3
 8015b0c:	d10f      	bne.n	8015b2e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b14:	68db      	ldr	r3, [r3, #12]
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d009      	beq.n	8015b2e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	2200      	movs	r2, #0
 8015b1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b28:	68db      	ldr	r3, [r3, #12]
 8015b2a:	68f8      	ldr	r0, [r7, #12]
 8015b2c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015b2e:	2180      	movs	r1, #128	; 0x80
 8015b30:	68f8      	ldr	r0, [r7, #12]
 8015b32:	f003 feb5 	bl	80198a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015b36:	68f8      	ldr	r0, [r7, #12]
 8015b38:	f001 f8bd 	bl	8016cb6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d03a      	beq.n	8015bbc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8015b46:	68f8      	ldr	r0, [r7, #12]
 8015b48:	f7ff fe42 	bl	80157d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	2200      	movs	r2, #0
 8015b50:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015b54:	e032      	b.n	8015bbc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8015b56:	7afb      	ldrb	r3, [r7, #11]
 8015b58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015b5c:	b2db      	uxtb	r3, r3
 8015b5e:	4619      	mov	r1, r3
 8015b60:	68f8      	ldr	r0, [r7, #12]
 8015b62:	f000 f985 	bl	8015e70 <USBD_CoreFindEP>
 8015b66:	4603      	mov	r3, r0
 8015b68:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015b6a:	7dfb      	ldrb	r3, [r7, #23]
 8015b6c:	2bff      	cmp	r3, #255	; 0xff
 8015b6e:	d025      	beq.n	8015bbc <USBD_LL_DataInStage+0x15a>
 8015b70:	7dfb      	ldrb	r3, [r7, #23]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d122      	bne.n	8015bbc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b7c:	b2db      	uxtb	r3, r3
 8015b7e:	2b03      	cmp	r3, #3
 8015b80:	d11c      	bne.n	8015bbc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015b82:	7dfa      	ldrb	r2, [r7, #23]
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	32ae      	adds	r2, #174	; 0xae
 8015b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b8c:	695b      	ldr	r3, [r3, #20]
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d014      	beq.n	8015bbc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8015b92:	7dfa      	ldrb	r2, [r7, #23]
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015b9a:	7dfa      	ldrb	r2, [r7, #23]
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	32ae      	adds	r2, #174	; 0xae
 8015ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ba4:	695b      	ldr	r3, [r3, #20]
 8015ba6:	7afa      	ldrb	r2, [r7, #11]
 8015ba8:	4611      	mov	r1, r2
 8015baa:	68f8      	ldr	r0, [r7, #12]
 8015bac:	4798      	blx	r3
 8015bae:	4603      	mov	r3, r0
 8015bb0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8015bb2:	7dbb      	ldrb	r3, [r7, #22]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d001      	beq.n	8015bbc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015bb8:	7dbb      	ldrb	r3, [r7, #22]
 8015bba:	e000      	b.n	8015bbe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015bbc:	2300      	movs	r3, #0
}
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	3718      	adds	r7, #24
 8015bc2:	46bd      	mov	sp, r7
 8015bc4:	bd80      	pop	{r7, pc}

08015bc6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015bc6:	b580      	push	{r7, lr}
 8015bc8:	b084      	sub	sp, #16
 8015bca:	af00      	add	r7, sp, #0
 8015bcc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015bce:	2300      	movs	r3, #0
 8015bd0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	2201      	movs	r2, #1
 8015bd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	2200      	movs	r2, #0
 8015bde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	2200      	movs	r2, #0
 8015be6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	2200      	movs	r2, #0
 8015bec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	2200      	movs	r2, #0
 8015bf4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d014      	beq.n	8015c2c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c08:	685b      	ldr	r3, [r3, #4]
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d00e      	beq.n	8015c2c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c14:	685b      	ldr	r3, [r3, #4]
 8015c16:	687a      	ldr	r2, [r7, #4]
 8015c18:	6852      	ldr	r2, [r2, #4]
 8015c1a:	b2d2      	uxtb	r2, r2
 8015c1c:	4611      	mov	r1, r2
 8015c1e:	6878      	ldr	r0, [r7, #4]
 8015c20:	4798      	blx	r3
 8015c22:	4603      	mov	r3, r0
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d001      	beq.n	8015c2c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015c28:	2303      	movs	r3, #3
 8015c2a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015c2c:	2340      	movs	r3, #64	; 0x40
 8015c2e:	2200      	movs	r2, #0
 8015c30:	2100      	movs	r1, #0
 8015c32:	6878      	ldr	r0, [r7, #4]
 8015c34:	f003 fdc0 	bl	80197b8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	2201      	movs	r2, #1
 8015c3c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	2240      	movs	r2, #64	; 0x40
 8015c44:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015c48:	2340      	movs	r3, #64	; 0x40
 8015c4a:	2200      	movs	r2, #0
 8015c4c:	2180      	movs	r1, #128	; 0x80
 8015c4e:	6878      	ldr	r0, [r7, #4]
 8015c50:	f003 fdb2 	bl	80197b8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	2201      	movs	r2, #1
 8015c58:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	2240      	movs	r2, #64	; 0x40
 8015c5e:	621a      	str	r2, [r3, #32]

  return ret;
 8015c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c62:	4618      	mov	r0, r3
 8015c64:	3710      	adds	r7, #16
 8015c66:	46bd      	mov	sp, r7
 8015c68:	bd80      	pop	{r7, pc}

08015c6a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015c6a:	b480      	push	{r7}
 8015c6c:	b083      	sub	sp, #12
 8015c6e:	af00      	add	r7, sp, #0
 8015c70:	6078      	str	r0, [r7, #4]
 8015c72:	460b      	mov	r3, r1
 8015c74:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	78fa      	ldrb	r2, [r7, #3]
 8015c7a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015c7c:	2300      	movs	r3, #0
}
 8015c7e:	4618      	mov	r0, r3
 8015c80:	370c      	adds	r7, #12
 8015c82:	46bd      	mov	sp, r7
 8015c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c88:	4770      	bx	lr

08015c8a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015c8a:	b480      	push	{r7}
 8015c8c:	b083      	sub	sp, #12
 8015c8e:	af00      	add	r7, sp, #0
 8015c90:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c98:	b2db      	uxtb	r3, r3
 8015c9a:	2b04      	cmp	r3, #4
 8015c9c:	d006      	beq.n	8015cac <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ca4:	b2da      	uxtb	r2, r3
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	2204      	movs	r2, #4
 8015cb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015cb4:	2300      	movs	r3, #0
}
 8015cb6:	4618      	mov	r0, r3
 8015cb8:	370c      	adds	r7, #12
 8015cba:	46bd      	mov	sp, r7
 8015cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cc0:	4770      	bx	lr

08015cc2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015cc2:	b480      	push	{r7}
 8015cc4:	b083      	sub	sp, #12
 8015cc6:	af00      	add	r7, sp, #0
 8015cc8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015cd0:	b2db      	uxtb	r3, r3
 8015cd2:	2b04      	cmp	r3, #4
 8015cd4:	d106      	bne.n	8015ce4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8015cdc:	b2da      	uxtb	r2, r3
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015ce4:	2300      	movs	r3, #0
}
 8015ce6:	4618      	mov	r0, r3
 8015ce8:	370c      	adds	r7, #12
 8015cea:	46bd      	mov	sp, r7
 8015cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cf0:	4770      	bx	lr

08015cf2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015cf2:	b580      	push	{r7, lr}
 8015cf4:	b082      	sub	sp, #8
 8015cf6:	af00      	add	r7, sp, #0
 8015cf8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015d00:	b2db      	uxtb	r3, r3
 8015d02:	2b03      	cmp	r3, #3
 8015d04:	d110      	bne.n	8015d28 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d00b      	beq.n	8015d28 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d16:	69db      	ldr	r3, [r3, #28]
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d005      	beq.n	8015d28 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d22:	69db      	ldr	r3, [r3, #28]
 8015d24:	6878      	ldr	r0, [r7, #4]
 8015d26:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015d28:	2300      	movs	r3, #0
}
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	3708      	adds	r7, #8
 8015d2e:	46bd      	mov	sp, r7
 8015d30:	bd80      	pop	{r7, pc}

08015d32 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8015d32:	b580      	push	{r7, lr}
 8015d34:	b082      	sub	sp, #8
 8015d36:	af00      	add	r7, sp, #0
 8015d38:	6078      	str	r0, [r7, #4]
 8015d3a:	460b      	mov	r3, r1
 8015d3c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	32ae      	adds	r2, #174	; 0xae
 8015d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d101      	bne.n	8015d54 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015d50:	2303      	movs	r3, #3
 8015d52:	e01c      	b.n	8015d8e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015d5a:	b2db      	uxtb	r3, r3
 8015d5c:	2b03      	cmp	r3, #3
 8015d5e:	d115      	bne.n	8015d8c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	32ae      	adds	r2, #174	; 0xae
 8015d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d6e:	6a1b      	ldr	r3, [r3, #32]
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d00b      	beq.n	8015d8c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	32ae      	adds	r2, #174	; 0xae
 8015d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d82:	6a1b      	ldr	r3, [r3, #32]
 8015d84:	78fa      	ldrb	r2, [r7, #3]
 8015d86:	4611      	mov	r1, r2
 8015d88:	6878      	ldr	r0, [r7, #4]
 8015d8a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015d8c:	2300      	movs	r3, #0
}
 8015d8e:	4618      	mov	r0, r3
 8015d90:	3708      	adds	r7, #8
 8015d92:	46bd      	mov	sp, r7
 8015d94:	bd80      	pop	{r7, pc}

08015d96 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015d96:	b580      	push	{r7, lr}
 8015d98:	b082      	sub	sp, #8
 8015d9a:	af00      	add	r7, sp, #0
 8015d9c:	6078      	str	r0, [r7, #4]
 8015d9e:	460b      	mov	r3, r1
 8015da0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	32ae      	adds	r2, #174	; 0xae
 8015dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d101      	bne.n	8015db8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015db4:	2303      	movs	r3, #3
 8015db6:	e01c      	b.n	8015df2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015dbe:	b2db      	uxtb	r3, r3
 8015dc0:	2b03      	cmp	r3, #3
 8015dc2:	d115      	bne.n	8015df0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	32ae      	adds	r2, #174	; 0xae
 8015dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d00b      	beq.n	8015df0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	32ae      	adds	r2, #174	; 0xae
 8015de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015de8:	78fa      	ldrb	r2, [r7, #3]
 8015dea:	4611      	mov	r1, r2
 8015dec:	6878      	ldr	r0, [r7, #4]
 8015dee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015df0:	2300      	movs	r3, #0
}
 8015df2:	4618      	mov	r0, r3
 8015df4:	3708      	adds	r7, #8
 8015df6:	46bd      	mov	sp, r7
 8015df8:	bd80      	pop	{r7, pc}

08015dfa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015dfa:	b480      	push	{r7}
 8015dfc:	b083      	sub	sp, #12
 8015dfe:	af00      	add	r7, sp, #0
 8015e00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015e02:	2300      	movs	r3, #0
}
 8015e04:	4618      	mov	r0, r3
 8015e06:	370c      	adds	r7, #12
 8015e08:	46bd      	mov	sp, r7
 8015e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e0e:	4770      	bx	lr

08015e10 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015e10:	b580      	push	{r7, lr}
 8015e12:	b084      	sub	sp, #16
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015e18:	2300      	movs	r3, #0
 8015e1a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	2201      	movs	r2, #1
 8015e20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d00e      	beq.n	8015e4c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e34:	685b      	ldr	r3, [r3, #4]
 8015e36:	687a      	ldr	r2, [r7, #4]
 8015e38:	6852      	ldr	r2, [r2, #4]
 8015e3a:	b2d2      	uxtb	r2, r2
 8015e3c:	4611      	mov	r1, r2
 8015e3e:	6878      	ldr	r0, [r7, #4]
 8015e40:	4798      	blx	r3
 8015e42:	4603      	mov	r3, r0
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d001      	beq.n	8015e4c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015e48:	2303      	movs	r3, #3
 8015e4a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e4e:	4618      	mov	r0, r3
 8015e50:	3710      	adds	r7, #16
 8015e52:	46bd      	mov	sp, r7
 8015e54:	bd80      	pop	{r7, pc}

08015e56 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015e56:	b480      	push	{r7}
 8015e58:	b083      	sub	sp, #12
 8015e5a:	af00      	add	r7, sp, #0
 8015e5c:	6078      	str	r0, [r7, #4]
 8015e5e:	460b      	mov	r3, r1
 8015e60:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015e62:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015e64:	4618      	mov	r0, r3
 8015e66:	370c      	adds	r7, #12
 8015e68:	46bd      	mov	sp, r7
 8015e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e6e:	4770      	bx	lr

08015e70 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015e70:	b480      	push	{r7}
 8015e72:	b083      	sub	sp, #12
 8015e74:	af00      	add	r7, sp, #0
 8015e76:	6078      	str	r0, [r7, #4]
 8015e78:	460b      	mov	r3, r1
 8015e7a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015e7c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015e7e:	4618      	mov	r0, r3
 8015e80:	370c      	adds	r7, #12
 8015e82:	46bd      	mov	sp, r7
 8015e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e88:	4770      	bx	lr

08015e8a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015e8a:	b580      	push	{r7, lr}
 8015e8c:	b086      	sub	sp, #24
 8015e8e:	af00      	add	r7, sp, #0
 8015e90:	6078      	str	r0, [r7, #4]
 8015e92:	460b      	mov	r3, r1
 8015e94:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015e9e:	2300      	movs	r3, #0
 8015ea0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	885b      	ldrh	r3, [r3, #2]
 8015ea6:	b29a      	uxth	r2, r3
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	781b      	ldrb	r3, [r3, #0]
 8015eac:	b29b      	uxth	r3, r3
 8015eae:	429a      	cmp	r2, r3
 8015eb0:	d920      	bls.n	8015ef4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8015eb2:	68fb      	ldr	r3, [r7, #12]
 8015eb4:	781b      	ldrb	r3, [r3, #0]
 8015eb6:	b29b      	uxth	r3, r3
 8015eb8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015eba:	e013      	b.n	8015ee4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015ebc:	f107 030a 	add.w	r3, r7, #10
 8015ec0:	4619      	mov	r1, r3
 8015ec2:	6978      	ldr	r0, [r7, #20]
 8015ec4:	f000 f81b 	bl	8015efe <USBD_GetNextDesc>
 8015ec8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015eca:	697b      	ldr	r3, [r7, #20]
 8015ecc:	785b      	ldrb	r3, [r3, #1]
 8015ece:	2b05      	cmp	r3, #5
 8015ed0:	d108      	bne.n	8015ee4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8015ed2:	697b      	ldr	r3, [r7, #20]
 8015ed4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015ed6:	693b      	ldr	r3, [r7, #16]
 8015ed8:	789b      	ldrb	r3, [r3, #2]
 8015eda:	78fa      	ldrb	r2, [r7, #3]
 8015edc:	429a      	cmp	r2, r3
 8015ede:	d008      	beq.n	8015ef2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015ee0:	2300      	movs	r3, #0
 8015ee2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	885b      	ldrh	r3, [r3, #2]
 8015ee8:	b29a      	uxth	r2, r3
 8015eea:	897b      	ldrh	r3, [r7, #10]
 8015eec:	429a      	cmp	r2, r3
 8015eee:	d8e5      	bhi.n	8015ebc <USBD_GetEpDesc+0x32>
 8015ef0:	e000      	b.n	8015ef4 <USBD_GetEpDesc+0x6a>
          break;
 8015ef2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015ef4:	693b      	ldr	r3, [r7, #16]
}
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	3718      	adds	r7, #24
 8015efa:	46bd      	mov	sp, r7
 8015efc:	bd80      	pop	{r7, pc}

08015efe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8015efe:	b480      	push	{r7}
 8015f00:	b085      	sub	sp, #20
 8015f02:	af00      	add	r7, sp, #0
 8015f04:	6078      	str	r0, [r7, #4]
 8015f06:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015f0c:	683b      	ldr	r3, [r7, #0]
 8015f0e:	881a      	ldrh	r2, [r3, #0]
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	781b      	ldrb	r3, [r3, #0]
 8015f14:	b29b      	uxth	r3, r3
 8015f16:	4413      	add	r3, r2
 8015f18:	b29a      	uxth	r2, r3
 8015f1a:	683b      	ldr	r3, [r7, #0]
 8015f1c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	781b      	ldrb	r3, [r3, #0]
 8015f22:	461a      	mov	r2, r3
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	4413      	add	r3, r2
 8015f28:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015f2a:	68fb      	ldr	r3, [r7, #12]
}
 8015f2c:	4618      	mov	r0, r3
 8015f2e:	3714      	adds	r7, #20
 8015f30:	46bd      	mov	sp, r7
 8015f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f36:	4770      	bx	lr

08015f38 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015f38:	b480      	push	{r7}
 8015f3a:	b087      	sub	sp, #28
 8015f3c:	af00      	add	r7, sp, #0
 8015f3e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015f44:	697b      	ldr	r3, [r7, #20]
 8015f46:	781b      	ldrb	r3, [r3, #0]
 8015f48:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015f4a:	697b      	ldr	r3, [r7, #20]
 8015f4c:	3301      	adds	r3, #1
 8015f4e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015f50:	697b      	ldr	r3, [r7, #20]
 8015f52:	781b      	ldrb	r3, [r3, #0]
 8015f54:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015f56:	8a3b      	ldrh	r3, [r7, #16]
 8015f58:	021b      	lsls	r3, r3, #8
 8015f5a:	b21a      	sxth	r2, r3
 8015f5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015f60:	4313      	orrs	r3, r2
 8015f62:	b21b      	sxth	r3, r3
 8015f64:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015f66:	89fb      	ldrh	r3, [r7, #14]
}
 8015f68:	4618      	mov	r0, r3
 8015f6a:	371c      	adds	r7, #28
 8015f6c:	46bd      	mov	sp, r7
 8015f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f72:	4770      	bx	lr

08015f74 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f74:	b580      	push	{r7, lr}
 8015f76:	b084      	sub	sp, #16
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	6078      	str	r0, [r7, #4]
 8015f7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015f7e:	2300      	movs	r3, #0
 8015f80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015f82:	683b      	ldr	r3, [r7, #0]
 8015f84:	781b      	ldrb	r3, [r3, #0]
 8015f86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015f8a:	2b40      	cmp	r3, #64	; 0x40
 8015f8c:	d005      	beq.n	8015f9a <USBD_StdDevReq+0x26>
 8015f8e:	2b40      	cmp	r3, #64	; 0x40
 8015f90:	d857      	bhi.n	8016042 <USBD_StdDevReq+0xce>
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d00f      	beq.n	8015fb6 <USBD_StdDevReq+0x42>
 8015f96:	2b20      	cmp	r3, #32
 8015f98:	d153      	bne.n	8016042 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	32ae      	adds	r2, #174	; 0xae
 8015fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fa8:	689b      	ldr	r3, [r3, #8]
 8015faa:	6839      	ldr	r1, [r7, #0]
 8015fac:	6878      	ldr	r0, [r7, #4]
 8015fae:	4798      	blx	r3
 8015fb0:	4603      	mov	r3, r0
 8015fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8015fb4:	e04a      	b.n	801604c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015fb6:	683b      	ldr	r3, [r7, #0]
 8015fb8:	785b      	ldrb	r3, [r3, #1]
 8015fba:	2b09      	cmp	r3, #9
 8015fbc:	d83b      	bhi.n	8016036 <USBD_StdDevReq+0xc2>
 8015fbe:	a201      	add	r2, pc, #4	; (adr r2, 8015fc4 <USBD_StdDevReq+0x50>)
 8015fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015fc4:	08016019 	.word	0x08016019
 8015fc8:	0801602d 	.word	0x0801602d
 8015fcc:	08016037 	.word	0x08016037
 8015fd0:	08016023 	.word	0x08016023
 8015fd4:	08016037 	.word	0x08016037
 8015fd8:	08015ff7 	.word	0x08015ff7
 8015fdc:	08015fed 	.word	0x08015fed
 8015fe0:	08016037 	.word	0x08016037
 8015fe4:	0801600f 	.word	0x0801600f
 8015fe8:	08016001 	.word	0x08016001
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015fec:	6839      	ldr	r1, [r7, #0]
 8015fee:	6878      	ldr	r0, [r7, #4]
 8015ff0:	f000 fa3c 	bl	801646c <USBD_GetDescriptor>
          break;
 8015ff4:	e024      	b.n	8016040 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015ff6:	6839      	ldr	r1, [r7, #0]
 8015ff8:	6878      	ldr	r0, [r7, #4]
 8015ffa:	f000 fba1 	bl	8016740 <USBD_SetAddress>
          break;
 8015ffe:	e01f      	b.n	8016040 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8016000:	6839      	ldr	r1, [r7, #0]
 8016002:	6878      	ldr	r0, [r7, #4]
 8016004:	f000 fbe0 	bl	80167c8 <USBD_SetConfig>
 8016008:	4603      	mov	r3, r0
 801600a:	73fb      	strb	r3, [r7, #15]
          break;
 801600c:	e018      	b.n	8016040 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801600e:	6839      	ldr	r1, [r7, #0]
 8016010:	6878      	ldr	r0, [r7, #4]
 8016012:	f000 fc83 	bl	801691c <USBD_GetConfig>
          break;
 8016016:	e013      	b.n	8016040 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016018:	6839      	ldr	r1, [r7, #0]
 801601a:	6878      	ldr	r0, [r7, #4]
 801601c:	f000 fcb4 	bl	8016988 <USBD_GetStatus>
          break;
 8016020:	e00e      	b.n	8016040 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8016022:	6839      	ldr	r1, [r7, #0]
 8016024:	6878      	ldr	r0, [r7, #4]
 8016026:	f000 fce3 	bl	80169f0 <USBD_SetFeature>
          break;
 801602a:	e009      	b.n	8016040 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801602c:	6839      	ldr	r1, [r7, #0]
 801602e:	6878      	ldr	r0, [r7, #4]
 8016030:	f000 fd07 	bl	8016a42 <USBD_ClrFeature>
          break;
 8016034:	e004      	b.n	8016040 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8016036:	6839      	ldr	r1, [r7, #0]
 8016038:	6878      	ldr	r0, [r7, #4]
 801603a:	f000 fd5e 	bl	8016afa <USBD_CtlError>
          break;
 801603e:	bf00      	nop
      }
      break;
 8016040:	e004      	b.n	801604c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8016042:	6839      	ldr	r1, [r7, #0]
 8016044:	6878      	ldr	r0, [r7, #4]
 8016046:	f000 fd58 	bl	8016afa <USBD_CtlError>
      break;
 801604a:	bf00      	nop
  }

  return ret;
 801604c:	7bfb      	ldrb	r3, [r7, #15]
}
 801604e:	4618      	mov	r0, r3
 8016050:	3710      	adds	r7, #16
 8016052:	46bd      	mov	sp, r7
 8016054:	bd80      	pop	{r7, pc}
 8016056:	bf00      	nop

08016058 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b084      	sub	sp, #16
 801605c:	af00      	add	r7, sp, #0
 801605e:	6078      	str	r0, [r7, #4]
 8016060:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016062:	2300      	movs	r3, #0
 8016064:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016066:	683b      	ldr	r3, [r7, #0]
 8016068:	781b      	ldrb	r3, [r3, #0]
 801606a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801606e:	2b40      	cmp	r3, #64	; 0x40
 8016070:	d005      	beq.n	801607e <USBD_StdItfReq+0x26>
 8016072:	2b40      	cmp	r3, #64	; 0x40
 8016074:	d852      	bhi.n	801611c <USBD_StdItfReq+0xc4>
 8016076:	2b00      	cmp	r3, #0
 8016078:	d001      	beq.n	801607e <USBD_StdItfReq+0x26>
 801607a:	2b20      	cmp	r3, #32
 801607c:	d14e      	bne.n	801611c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016084:	b2db      	uxtb	r3, r3
 8016086:	3b01      	subs	r3, #1
 8016088:	2b02      	cmp	r3, #2
 801608a:	d840      	bhi.n	801610e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801608c:	683b      	ldr	r3, [r7, #0]
 801608e:	889b      	ldrh	r3, [r3, #4]
 8016090:	b2db      	uxtb	r3, r3
 8016092:	2b01      	cmp	r3, #1
 8016094:	d836      	bhi.n	8016104 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8016096:	683b      	ldr	r3, [r7, #0]
 8016098:	889b      	ldrh	r3, [r3, #4]
 801609a:	b2db      	uxtb	r3, r3
 801609c:	4619      	mov	r1, r3
 801609e:	6878      	ldr	r0, [r7, #4]
 80160a0:	f7ff fed9 	bl	8015e56 <USBD_CoreFindIF>
 80160a4:	4603      	mov	r3, r0
 80160a6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80160a8:	7bbb      	ldrb	r3, [r7, #14]
 80160aa:	2bff      	cmp	r3, #255	; 0xff
 80160ac:	d01d      	beq.n	80160ea <USBD_StdItfReq+0x92>
 80160ae:	7bbb      	ldrb	r3, [r7, #14]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d11a      	bne.n	80160ea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80160b4:	7bba      	ldrb	r2, [r7, #14]
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	32ae      	adds	r2, #174	; 0xae
 80160ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160be:	689b      	ldr	r3, [r3, #8]
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d00f      	beq.n	80160e4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80160c4:	7bba      	ldrb	r2, [r7, #14]
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80160cc:	7bba      	ldrb	r2, [r7, #14]
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	32ae      	adds	r2, #174	; 0xae
 80160d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160d6:	689b      	ldr	r3, [r3, #8]
 80160d8:	6839      	ldr	r1, [r7, #0]
 80160da:	6878      	ldr	r0, [r7, #4]
 80160dc:	4798      	blx	r3
 80160de:	4603      	mov	r3, r0
 80160e0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80160e2:	e004      	b.n	80160ee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80160e4:	2303      	movs	r3, #3
 80160e6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80160e8:	e001      	b.n	80160ee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80160ea:	2303      	movs	r3, #3
 80160ec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80160ee:	683b      	ldr	r3, [r7, #0]
 80160f0:	88db      	ldrh	r3, [r3, #6]
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d110      	bne.n	8016118 <USBD_StdItfReq+0xc0>
 80160f6:	7bfb      	ldrb	r3, [r7, #15]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d10d      	bne.n	8016118 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80160fc:	6878      	ldr	r0, [r7, #4]
 80160fe:	f000 fdc7 	bl	8016c90 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016102:	e009      	b.n	8016118 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8016104:	6839      	ldr	r1, [r7, #0]
 8016106:	6878      	ldr	r0, [r7, #4]
 8016108:	f000 fcf7 	bl	8016afa <USBD_CtlError>
          break;
 801610c:	e004      	b.n	8016118 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801610e:	6839      	ldr	r1, [r7, #0]
 8016110:	6878      	ldr	r0, [r7, #4]
 8016112:	f000 fcf2 	bl	8016afa <USBD_CtlError>
          break;
 8016116:	e000      	b.n	801611a <USBD_StdItfReq+0xc2>
          break;
 8016118:	bf00      	nop
      }
      break;
 801611a:	e004      	b.n	8016126 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801611c:	6839      	ldr	r1, [r7, #0]
 801611e:	6878      	ldr	r0, [r7, #4]
 8016120:	f000 fceb 	bl	8016afa <USBD_CtlError>
      break;
 8016124:	bf00      	nop
  }

  return ret;
 8016126:	7bfb      	ldrb	r3, [r7, #15]
}
 8016128:	4618      	mov	r0, r3
 801612a:	3710      	adds	r7, #16
 801612c:	46bd      	mov	sp, r7
 801612e:	bd80      	pop	{r7, pc}

08016130 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016130:	b580      	push	{r7, lr}
 8016132:	b084      	sub	sp, #16
 8016134:	af00      	add	r7, sp, #0
 8016136:	6078      	str	r0, [r7, #4]
 8016138:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801613a:	2300      	movs	r3, #0
 801613c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801613e:	683b      	ldr	r3, [r7, #0]
 8016140:	889b      	ldrh	r3, [r3, #4]
 8016142:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016144:	683b      	ldr	r3, [r7, #0]
 8016146:	781b      	ldrb	r3, [r3, #0]
 8016148:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801614c:	2b40      	cmp	r3, #64	; 0x40
 801614e:	d007      	beq.n	8016160 <USBD_StdEPReq+0x30>
 8016150:	2b40      	cmp	r3, #64	; 0x40
 8016152:	f200 817f 	bhi.w	8016454 <USBD_StdEPReq+0x324>
 8016156:	2b00      	cmp	r3, #0
 8016158:	d02a      	beq.n	80161b0 <USBD_StdEPReq+0x80>
 801615a:	2b20      	cmp	r3, #32
 801615c:	f040 817a 	bne.w	8016454 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016160:	7bbb      	ldrb	r3, [r7, #14]
 8016162:	4619      	mov	r1, r3
 8016164:	6878      	ldr	r0, [r7, #4]
 8016166:	f7ff fe83 	bl	8015e70 <USBD_CoreFindEP>
 801616a:	4603      	mov	r3, r0
 801616c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801616e:	7b7b      	ldrb	r3, [r7, #13]
 8016170:	2bff      	cmp	r3, #255	; 0xff
 8016172:	f000 8174 	beq.w	801645e <USBD_StdEPReq+0x32e>
 8016176:	7b7b      	ldrb	r3, [r7, #13]
 8016178:	2b00      	cmp	r3, #0
 801617a:	f040 8170 	bne.w	801645e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801617e:	7b7a      	ldrb	r2, [r7, #13]
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016186:	7b7a      	ldrb	r2, [r7, #13]
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	32ae      	adds	r2, #174	; 0xae
 801618c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016190:	689b      	ldr	r3, [r3, #8]
 8016192:	2b00      	cmp	r3, #0
 8016194:	f000 8163 	beq.w	801645e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016198:	7b7a      	ldrb	r2, [r7, #13]
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	32ae      	adds	r2, #174	; 0xae
 801619e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161a2:	689b      	ldr	r3, [r3, #8]
 80161a4:	6839      	ldr	r1, [r7, #0]
 80161a6:	6878      	ldr	r0, [r7, #4]
 80161a8:	4798      	blx	r3
 80161aa:	4603      	mov	r3, r0
 80161ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80161ae:	e156      	b.n	801645e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80161b0:	683b      	ldr	r3, [r7, #0]
 80161b2:	785b      	ldrb	r3, [r3, #1]
 80161b4:	2b03      	cmp	r3, #3
 80161b6:	d008      	beq.n	80161ca <USBD_StdEPReq+0x9a>
 80161b8:	2b03      	cmp	r3, #3
 80161ba:	f300 8145 	bgt.w	8016448 <USBD_StdEPReq+0x318>
 80161be:	2b00      	cmp	r3, #0
 80161c0:	f000 809b 	beq.w	80162fa <USBD_StdEPReq+0x1ca>
 80161c4:	2b01      	cmp	r3, #1
 80161c6:	d03c      	beq.n	8016242 <USBD_StdEPReq+0x112>
 80161c8:	e13e      	b.n	8016448 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161d0:	b2db      	uxtb	r3, r3
 80161d2:	2b02      	cmp	r3, #2
 80161d4:	d002      	beq.n	80161dc <USBD_StdEPReq+0xac>
 80161d6:	2b03      	cmp	r3, #3
 80161d8:	d016      	beq.n	8016208 <USBD_StdEPReq+0xd8>
 80161da:	e02c      	b.n	8016236 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80161dc:	7bbb      	ldrb	r3, [r7, #14]
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d00d      	beq.n	80161fe <USBD_StdEPReq+0xce>
 80161e2:	7bbb      	ldrb	r3, [r7, #14]
 80161e4:	2b80      	cmp	r3, #128	; 0x80
 80161e6:	d00a      	beq.n	80161fe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80161e8:	7bbb      	ldrb	r3, [r7, #14]
 80161ea:	4619      	mov	r1, r3
 80161ec:	6878      	ldr	r0, [r7, #4]
 80161ee:	f003 fb57 	bl	80198a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80161f2:	2180      	movs	r1, #128	; 0x80
 80161f4:	6878      	ldr	r0, [r7, #4]
 80161f6:	f003 fb53 	bl	80198a0 <USBD_LL_StallEP>
 80161fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80161fc:	e020      	b.n	8016240 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80161fe:	6839      	ldr	r1, [r7, #0]
 8016200:	6878      	ldr	r0, [r7, #4]
 8016202:	f000 fc7a 	bl	8016afa <USBD_CtlError>
              break;
 8016206:	e01b      	b.n	8016240 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016208:	683b      	ldr	r3, [r7, #0]
 801620a:	885b      	ldrh	r3, [r3, #2]
 801620c:	2b00      	cmp	r3, #0
 801620e:	d10e      	bne.n	801622e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016210:	7bbb      	ldrb	r3, [r7, #14]
 8016212:	2b00      	cmp	r3, #0
 8016214:	d00b      	beq.n	801622e <USBD_StdEPReq+0xfe>
 8016216:	7bbb      	ldrb	r3, [r7, #14]
 8016218:	2b80      	cmp	r3, #128	; 0x80
 801621a:	d008      	beq.n	801622e <USBD_StdEPReq+0xfe>
 801621c:	683b      	ldr	r3, [r7, #0]
 801621e:	88db      	ldrh	r3, [r3, #6]
 8016220:	2b00      	cmp	r3, #0
 8016222:	d104      	bne.n	801622e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016224:	7bbb      	ldrb	r3, [r7, #14]
 8016226:	4619      	mov	r1, r3
 8016228:	6878      	ldr	r0, [r7, #4]
 801622a:	f003 fb39 	bl	80198a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801622e:	6878      	ldr	r0, [r7, #4]
 8016230:	f000 fd2e 	bl	8016c90 <USBD_CtlSendStatus>

              break;
 8016234:	e004      	b.n	8016240 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016236:	6839      	ldr	r1, [r7, #0]
 8016238:	6878      	ldr	r0, [r7, #4]
 801623a:	f000 fc5e 	bl	8016afa <USBD_CtlError>
              break;
 801623e:	bf00      	nop
          }
          break;
 8016240:	e107      	b.n	8016452 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016248:	b2db      	uxtb	r3, r3
 801624a:	2b02      	cmp	r3, #2
 801624c:	d002      	beq.n	8016254 <USBD_StdEPReq+0x124>
 801624e:	2b03      	cmp	r3, #3
 8016250:	d016      	beq.n	8016280 <USBD_StdEPReq+0x150>
 8016252:	e04b      	b.n	80162ec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016254:	7bbb      	ldrb	r3, [r7, #14]
 8016256:	2b00      	cmp	r3, #0
 8016258:	d00d      	beq.n	8016276 <USBD_StdEPReq+0x146>
 801625a:	7bbb      	ldrb	r3, [r7, #14]
 801625c:	2b80      	cmp	r3, #128	; 0x80
 801625e:	d00a      	beq.n	8016276 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016260:	7bbb      	ldrb	r3, [r7, #14]
 8016262:	4619      	mov	r1, r3
 8016264:	6878      	ldr	r0, [r7, #4]
 8016266:	f003 fb1b 	bl	80198a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801626a:	2180      	movs	r1, #128	; 0x80
 801626c:	6878      	ldr	r0, [r7, #4]
 801626e:	f003 fb17 	bl	80198a0 <USBD_LL_StallEP>
 8016272:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016274:	e040      	b.n	80162f8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016276:	6839      	ldr	r1, [r7, #0]
 8016278:	6878      	ldr	r0, [r7, #4]
 801627a:	f000 fc3e 	bl	8016afa <USBD_CtlError>
              break;
 801627e:	e03b      	b.n	80162f8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016280:	683b      	ldr	r3, [r7, #0]
 8016282:	885b      	ldrh	r3, [r3, #2]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d136      	bne.n	80162f6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016288:	7bbb      	ldrb	r3, [r7, #14]
 801628a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801628e:	2b00      	cmp	r3, #0
 8016290:	d004      	beq.n	801629c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016292:	7bbb      	ldrb	r3, [r7, #14]
 8016294:	4619      	mov	r1, r3
 8016296:	6878      	ldr	r0, [r7, #4]
 8016298:	f003 fb38 	bl	801990c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801629c:	6878      	ldr	r0, [r7, #4]
 801629e:	f000 fcf7 	bl	8016c90 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80162a2:	7bbb      	ldrb	r3, [r7, #14]
 80162a4:	4619      	mov	r1, r3
 80162a6:	6878      	ldr	r0, [r7, #4]
 80162a8:	f7ff fde2 	bl	8015e70 <USBD_CoreFindEP>
 80162ac:	4603      	mov	r3, r0
 80162ae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80162b0:	7b7b      	ldrb	r3, [r7, #13]
 80162b2:	2bff      	cmp	r3, #255	; 0xff
 80162b4:	d01f      	beq.n	80162f6 <USBD_StdEPReq+0x1c6>
 80162b6:	7b7b      	ldrb	r3, [r7, #13]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d11c      	bne.n	80162f6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80162bc:	7b7a      	ldrb	r2, [r7, #13]
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80162c4:	7b7a      	ldrb	r2, [r7, #13]
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	32ae      	adds	r2, #174	; 0xae
 80162ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80162ce:	689b      	ldr	r3, [r3, #8]
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d010      	beq.n	80162f6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80162d4:	7b7a      	ldrb	r2, [r7, #13]
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	32ae      	adds	r2, #174	; 0xae
 80162da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80162de:	689b      	ldr	r3, [r3, #8]
 80162e0:	6839      	ldr	r1, [r7, #0]
 80162e2:	6878      	ldr	r0, [r7, #4]
 80162e4:	4798      	blx	r3
 80162e6:	4603      	mov	r3, r0
 80162e8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80162ea:	e004      	b.n	80162f6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80162ec:	6839      	ldr	r1, [r7, #0]
 80162ee:	6878      	ldr	r0, [r7, #4]
 80162f0:	f000 fc03 	bl	8016afa <USBD_CtlError>
              break;
 80162f4:	e000      	b.n	80162f8 <USBD_StdEPReq+0x1c8>
              break;
 80162f6:	bf00      	nop
          }
          break;
 80162f8:	e0ab      	b.n	8016452 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016300:	b2db      	uxtb	r3, r3
 8016302:	2b02      	cmp	r3, #2
 8016304:	d002      	beq.n	801630c <USBD_StdEPReq+0x1dc>
 8016306:	2b03      	cmp	r3, #3
 8016308:	d032      	beq.n	8016370 <USBD_StdEPReq+0x240>
 801630a:	e097      	b.n	801643c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801630c:	7bbb      	ldrb	r3, [r7, #14]
 801630e:	2b00      	cmp	r3, #0
 8016310:	d007      	beq.n	8016322 <USBD_StdEPReq+0x1f2>
 8016312:	7bbb      	ldrb	r3, [r7, #14]
 8016314:	2b80      	cmp	r3, #128	; 0x80
 8016316:	d004      	beq.n	8016322 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016318:	6839      	ldr	r1, [r7, #0]
 801631a:	6878      	ldr	r0, [r7, #4]
 801631c:	f000 fbed 	bl	8016afa <USBD_CtlError>
                break;
 8016320:	e091      	b.n	8016446 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016322:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016326:	2b00      	cmp	r3, #0
 8016328:	da0b      	bge.n	8016342 <USBD_StdEPReq+0x212>
 801632a:	7bbb      	ldrb	r3, [r7, #14]
 801632c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016330:	4613      	mov	r3, r2
 8016332:	009b      	lsls	r3, r3, #2
 8016334:	4413      	add	r3, r2
 8016336:	009b      	lsls	r3, r3, #2
 8016338:	3310      	adds	r3, #16
 801633a:	687a      	ldr	r2, [r7, #4]
 801633c:	4413      	add	r3, r2
 801633e:	3304      	adds	r3, #4
 8016340:	e00b      	b.n	801635a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016342:	7bbb      	ldrb	r3, [r7, #14]
 8016344:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016348:	4613      	mov	r3, r2
 801634a:	009b      	lsls	r3, r3, #2
 801634c:	4413      	add	r3, r2
 801634e:	009b      	lsls	r3, r3, #2
 8016350:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016354:	687a      	ldr	r2, [r7, #4]
 8016356:	4413      	add	r3, r2
 8016358:	3304      	adds	r3, #4
 801635a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801635c:	68bb      	ldr	r3, [r7, #8]
 801635e:	2200      	movs	r2, #0
 8016360:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016362:	68bb      	ldr	r3, [r7, #8]
 8016364:	2202      	movs	r2, #2
 8016366:	4619      	mov	r1, r3
 8016368:	6878      	ldr	r0, [r7, #4]
 801636a:	f000 fc37 	bl	8016bdc <USBD_CtlSendData>
              break;
 801636e:	e06a      	b.n	8016446 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016370:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016374:	2b00      	cmp	r3, #0
 8016376:	da11      	bge.n	801639c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016378:	7bbb      	ldrb	r3, [r7, #14]
 801637a:	f003 020f 	and.w	r2, r3, #15
 801637e:	6879      	ldr	r1, [r7, #4]
 8016380:	4613      	mov	r3, r2
 8016382:	009b      	lsls	r3, r3, #2
 8016384:	4413      	add	r3, r2
 8016386:	009b      	lsls	r3, r3, #2
 8016388:	440b      	add	r3, r1
 801638a:	3324      	adds	r3, #36	; 0x24
 801638c:	881b      	ldrh	r3, [r3, #0]
 801638e:	2b00      	cmp	r3, #0
 8016390:	d117      	bne.n	80163c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016392:	6839      	ldr	r1, [r7, #0]
 8016394:	6878      	ldr	r0, [r7, #4]
 8016396:	f000 fbb0 	bl	8016afa <USBD_CtlError>
                  break;
 801639a:	e054      	b.n	8016446 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801639c:	7bbb      	ldrb	r3, [r7, #14]
 801639e:	f003 020f 	and.w	r2, r3, #15
 80163a2:	6879      	ldr	r1, [r7, #4]
 80163a4:	4613      	mov	r3, r2
 80163a6:	009b      	lsls	r3, r3, #2
 80163a8:	4413      	add	r3, r2
 80163aa:	009b      	lsls	r3, r3, #2
 80163ac:	440b      	add	r3, r1
 80163ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80163b2:	881b      	ldrh	r3, [r3, #0]
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d104      	bne.n	80163c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80163b8:	6839      	ldr	r1, [r7, #0]
 80163ba:	6878      	ldr	r0, [r7, #4]
 80163bc:	f000 fb9d 	bl	8016afa <USBD_CtlError>
                  break;
 80163c0:	e041      	b.n	8016446 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80163c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	da0b      	bge.n	80163e2 <USBD_StdEPReq+0x2b2>
 80163ca:	7bbb      	ldrb	r3, [r7, #14]
 80163cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80163d0:	4613      	mov	r3, r2
 80163d2:	009b      	lsls	r3, r3, #2
 80163d4:	4413      	add	r3, r2
 80163d6:	009b      	lsls	r3, r3, #2
 80163d8:	3310      	adds	r3, #16
 80163da:	687a      	ldr	r2, [r7, #4]
 80163dc:	4413      	add	r3, r2
 80163de:	3304      	adds	r3, #4
 80163e0:	e00b      	b.n	80163fa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80163e2:	7bbb      	ldrb	r3, [r7, #14]
 80163e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80163e8:	4613      	mov	r3, r2
 80163ea:	009b      	lsls	r3, r3, #2
 80163ec:	4413      	add	r3, r2
 80163ee:	009b      	lsls	r3, r3, #2
 80163f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80163f4:	687a      	ldr	r2, [r7, #4]
 80163f6:	4413      	add	r3, r2
 80163f8:	3304      	adds	r3, #4
 80163fa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80163fc:	7bbb      	ldrb	r3, [r7, #14]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d002      	beq.n	8016408 <USBD_StdEPReq+0x2d8>
 8016402:	7bbb      	ldrb	r3, [r7, #14]
 8016404:	2b80      	cmp	r3, #128	; 0x80
 8016406:	d103      	bne.n	8016410 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016408:	68bb      	ldr	r3, [r7, #8]
 801640a:	2200      	movs	r2, #0
 801640c:	601a      	str	r2, [r3, #0]
 801640e:	e00e      	b.n	801642e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016410:	7bbb      	ldrb	r3, [r7, #14]
 8016412:	4619      	mov	r1, r3
 8016414:	6878      	ldr	r0, [r7, #4]
 8016416:	f003 faaf 	bl	8019978 <USBD_LL_IsStallEP>
 801641a:	4603      	mov	r3, r0
 801641c:	2b00      	cmp	r3, #0
 801641e:	d003      	beq.n	8016428 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016420:	68bb      	ldr	r3, [r7, #8]
 8016422:	2201      	movs	r2, #1
 8016424:	601a      	str	r2, [r3, #0]
 8016426:	e002      	b.n	801642e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016428:	68bb      	ldr	r3, [r7, #8]
 801642a:	2200      	movs	r2, #0
 801642c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801642e:	68bb      	ldr	r3, [r7, #8]
 8016430:	2202      	movs	r2, #2
 8016432:	4619      	mov	r1, r3
 8016434:	6878      	ldr	r0, [r7, #4]
 8016436:	f000 fbd1 	bl	8016bdc <USBD_CtlSendData>
              break;
 801643a:	e004      	b.n	8016446 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801643c:	6839      	ldr	r1, [r7, #0]
 801643e:	6878      	ldr	r0, [r7, #4]
 8016440:	f000 fb5b 	bl	8016afa <USBD_CtlError>
              break;
 8016444:	bf00      	nop
          }
          break;
 8016446:	e004      	b.n	8016452 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016448:	6839      	ldr	r1, [r7, #0]
 801644a:	6878      	ldr	r0, [r7, #4]
 801644c:	f000 fb55 	bl	8016afa <USBD_CtlError>
          break;
 8016450:	bf00      	nop
      }
      break;
 8016452:	e005      	b.n	8016460 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016454:	6839      	ldr	r1, [r7, #0]
 8016456:	6878      	ldr	r0, [r7, #4]
 8016458:	f000 fb4f 	bl	8016afa <USBD_CtlError>
      break;
 801645c:	e000      	b.n	8016460 <USBD_StdEPReq+0x330>
      break;
 801645e:	bf00      	nop
  }

  return ret;
 8016460:	7bfb      	ldrb	r3, [r7, #15]
}
 8016462:	4618      	mov	r0, r3
 8016464:	3710      	adds	r7, #16
 8016466:	46bd      	mov	sp, r7
 8016468:	bd80      	pop	{r7, pc}
	...

0801646c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801646c:	b580      	push	{r7, lr}
 801646e:	b084      	sub	sp, #16
 8016470:	af00      	add	r7, sp, #0
 8016472:	6078      	str	r0, [r7, #4]
 8016474:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016476:	2300      	movs	r3, #0
 8016478:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801647a:	2300      	movs	r3, #0
 801647c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801647e:	2300      	movs	r3, #0
 8016480:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016482:	683b      	ldr	r3, [r7, #0]
 8016484:	885b      	ldrh	r3, [r3, #2]
 8016486:	0a1b      	lsrs	r3, r3, #8
 8016488:	b29b      	uxth	r3, r3
 801648a:	3b01      	subs	r3, #1
 801648c:	2b06      	cmp	r3, #6
 801648e:	f200 8128 	bhi.w	80166e2 <USBD_GetDescriptor+0x276>
 8016492:	a201      	add	r2, pc, #4	; (adr r2, 8016498 <USBD_GetDescriptor+0x2c>)
 8016494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016498:	080164b5 	.word	0x080164b5
 801649c:	080164cd 	.word	0x080164cd
 80164a0:	0801650d 	.word	0x0801650d
 80164a4:	080166e3 	.word	0x080166e3
 80164a8:	080166e3 	.word	0x080166e3
 80164ac:	08016683 	.word	0x08016683
 80164b0:	080166af 	.word	0x080166af
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	687a      	ldr	r2, [r7, #4]
 80164be:	7c12      	ldrb	r2, [r2, #16]
 80164c0:	f107 0108 	add.w	r1, r7, #8
 80164c4:	4610      	mov	r0, r2
 80164c6:	4798      	blx	r3
 80164c8:	60f8      	str	r0, [r7, #12]
      break;
 80164ca:	e112      	b.n	80166f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	7c1b      	ldrb	r3, [r3, #16]
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d10d      	bne.n	80164f0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80164da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80164dc:	f107 0208 	add.w	r2, r7, #8
 80164e0:	4610      	mov	r0, r2
 80164e2:	4798      	blx	r3
 80164e4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	3301      	adds	r3, #1
 80164ea:	2202      	movs	r2, #2
 80164ec:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80164ee:	e100      	b.n	80166f2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80164f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164f8:	f107 0208 	add.w	r2, r7, #8
 80164fc:	4610      	mov	r0, r2
 80164fe:	4798      	blx	r3
 8016500:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	3301      	adds	r3, #1
 8016506:	2202      	movs	r2, #2
 8016508:	701a      	strb	r2, [r3, #0]
      break;
 801650a:	e0f2      	b.n	80166f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801650c:	683b      	ldr	r3, [r7, #0]
 801650e:	885b      	ldrh	r3, [r3, #2]
 8016510:	b2db      	uxtb	r3, r3
 8016512:	2b05      	cmp	r3, #5
 8016514:	f200 80ac 	bhi.w	8016670 <USBD_GetDescriptor+0x204>
 8016518:	a201      	add	r2, pc, #4	; (adr r2, 8016520 <USBD_GetDescriptor+0xb4>)
 801651a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801651e:	bf00      	nop
 8016520:	08016539 	.word	0x08016539
 8016524:	0801656d 	.word	0x0801656d
 8016528:	080165a1 	.word	0x080165a1
 801652c:	080165d5 	.word	0x080165d5
 8016530:	08016609 	.word	0x08016609
 8016534:	0801663d 	.word	0x0801663d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801653e:	685b      	ldr	r3, [r3, #4]
 8016540:	2b00      	cmp	r3, #0
 8016542:	d00b      	beq.n	801655c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801654a:	685b      	ldr	r3, [r3, #4]
 801654c:	687a      	ldr	r2, [r7, #4]
 801654e:	7c12      	ldrb	r2, [r2, #16]
 8016550:	f107 0108 	add.w	r1, r7, #8
 8016554:	4610      	mov	r0, r2
 8016556:	4798      	blx	r3
 8016558:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801655a:	e091      	b.n	8016680 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801655c:	6839      	ldr	r1, [r7, #0]
 801655e:	6878      	ldr	r0, [r7, #4]
 8016560:	f000 facb 	bl	8016afa <USBD_CtlError>
            err++;
 8016564:	7afb      	ldrb	r3, [r7, #11]
 8016566:	3301      	adds	r3, #1
 8016568:	72fb      	strb	r3, [r7, #11]
          break;
 801656a:	e089      	b.n	8016680 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016572:	689b      	ldr	r3, [r3, #8]
 8016574:	2b00      	cmp	r3, #0
 8016576:	d00b      	beq.n	8016590 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801657e:	689b      	ldr	r3, [r3, #8]
 8016580:	687a      	ldr	r2, [r7, #4]
 8016582:	7c12      	ldrb	r2, [r2, #16]
 8016584:	f107 0108 	add.w	r1, r7, #8
 8016588:	4610      	mov	r0, r2
 801658a:	4798      	blx	r3
 801658c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801658e:	e077      	b.n	8016680 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016590:	6839      	ldr	r1, [r7, #0]
 8016592:	6878      	ldr	r0, [r7, #4]
 8016594:	f000 fab1 	bl	8016afa <USBD_CtlError>
            err++;
 8016598:	7afb      	ldrb	r3, [r7, #11]
 801659a:	3301      	adds	r3, #1
 801659c:	72fb      	strb	r3, [r7, #11]
          break;
 801659e:	e06f      	b.n	8016680 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80165a6:	68db      	ldr	r3, [r3, #12]
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d00b      	beq.n	80165c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80165b2:	68db      	ldr	r3, [r3, #12]
 80165b4:	687a      	ldr	r2, [r7, #4]
 80165b6:	7c12      	ldrb	r2, [r2, #16]
 80165b8:	f107 0108 	add.w	r1, r7, #8
 80165bc:	4610      	mov	r0, r2
 80165be:	4798      	blx	r3
 80165c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80165c2:	e05d      	b.n	8016680 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80165c4:	6839      	ldr	r1, [r7, #0]
 80165c6:	6878      	ldr	r0, [r7, #4]
 80165c8:	f000 fa97 	bl	8016afa <USBD_CtlError>
            err++;
 80165cc:	7afb      	ldrb	r3, [r7, #11]
 80165ce:	3301      	adds	r3, #1
 80165d0:	72fb      	strb	r3, [r7, #11]
          break;
 80165d2:	e055      	b.n	8016680 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80165da:	691b      	ldr	r3, [r3, #16]
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d00b      	beq.n	80165f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80165e6:	691b      	ldr	r3, [r3, #16]
 80165e8:	687a      	ldr	r2, [r7, #4]
 80165ea:	7c12      	ldrb	r2, [r2, #16]
 80165ec:	f107 0108 	add.w	r1, r7, #8
 80165f0:	4610      	mov	r0, r2
 80165f2:	4798      	blx	r3
 80165f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80165f6:	e043      	b.n	8016680 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80165f8:	6839      	ldr	r1, [r7, #0]
 80165fa:	6878      	ldr	r0, [r7, #4]
 80165fc:	f000 fa7d 	bl	8016afa <USBD_CtlError>
            err++;
 8016600:	7afb      	ldrb	r3, [r7, #11]
 8016602:	3301      	adds	r3, #1
 8016604:	72fb      	strb	r3, [r7, #11]
          break;
 8016606:	e03b      	b.n	8016680 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801660e:	695b      	ldr	r3, [r3, #20]
 8016610:	2b00      	cmp	r3, #0
 8016612:	d00b      	beq.n	801662c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801661a:	695b      	ldr	r3, [r3, #20]
 801661c:	687a      	ldr	r2, [r7, #4]
 801661e:	7c12      	ldrb	r2, [r2, #16]
 8016620:	f107 0108 	add.w	r1, r7, #8
 8016624:	4610      	mov	r0, r2
 8016626:	4798      	blx	r3
 8016628:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801662a:	e029      	b.n	8016680 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801662c:	6839      	ldr	r1, [r7, #0]
 801662e:	6878      	ldr	r0, [r7, #4]
 8016630:	f000 fa63 	bl	8016afa <USBD_CtlError>
            err++;
 8016634:	7afb      	ldrb	r3, [r7, #11]
 8016636:	3301      	adds	r3, #1
 8016638:	72fb      	strb	r3, [r7, #11]
          break;
 801663a:	e021      	b.n	8016680 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016642:	699b      	ldr	r3, [r3, #24]
 8016644:	2b00      	cmp	r3, #0
 8016646:	d00b      	beq.n	8016660 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801664e:	699b      	ldr	r3, [r3, #24]
 8016650:	687a      	ldr	r2, [r7, #4]
 8016652:	7c12      	ldrb	r2, [r2, #16]
 8016654:	f107 0108 	add.w	r1, r7, #8
 8016658:	4610      	mov	r0, r2
 801665a:	4798      	blx	r3
 801665c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801665e:	e00f      	b.n	8016680 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016660:	6839      	ldr	r1, [r7, #0]
 8016662:	6878      	ldr	r0, [r7, #4]
 8016664:	f000 fa49 	bl	8016afa <USBD_CtlError>
            err++;
 8016668:	7afb      	ldrb	r3, [r7, #11]
 801666a:	3301      	adds	r3, #1
 801666c:	72fb      	strb	r3, [r7, #11]
          break;
 801666e:	e007      	b.n	8016680 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016670:	6839      	ldr	r1, [r7, #0]
 8016672:	6878      	ldr	r0, [r7, #4]
 8016674:	f000 fa41 	bl	8016afa <USBD_CtlError>
          err++;
 8016678:	7afb      	ldrb	r3, [r7, #11]
 801667a:	3301      	adds	r3, #1
 801667c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801667e:	bf00      	nop
      }
      break;
 8016680:	e037      	b.n	80166f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	7c1b      	ldrb	r3, [r3, #16]
 8016686:	2b00      	cmp	r3, #0
 8016688:	d109      	bne.n	801669e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016692:	f107 0208 	add.w	r2, r7, #8
 8016696:	4610      	mov	r0, r2
 8016698:	4798      	blx	r3
 801669a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801669c:	e029      	b.n	80166f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801669e:	6839      	ldr	r1, [r7, #0]
 80166a0:	6878      	ldr	r0, [r7, #4]
 80166a2:	f000 fa2a 	bl	8016afa <USBD_CtlError>
        err++;
 80166a6:	7afb      	ldrb	r3, [r7, #11]
 80166a8:	3301      	adds	r3, #1
 80166aa:	72fb      	strb	r3, [r7, #11]
      break;
 80166ac:	e021      	b.n	80166f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	7c1b      	ldrb	r3, [r3, #16]
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d10d      	bne.n	80166d2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80166bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80166be:	f107 0208 	add.w	r2, r7, #8
 80166c2:	4610      	mov	r0, r2
 80166c4:	4798      	blx	r3
 80166c6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80166c8:	68fb      	ldr	r3, [r7, #12]
 80166ca:	3301      	adds	r3, #1
 80166cc:	2207      	movs	r2, #7
 80166ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80166d0:	e00f      	b.n	80166f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80166d2:	6839      	ldr	r1, [r7, #0]
 80166d4:	6878      	ldr	r0, [r7, #4]
 80166d6:	f000 fa10 	bl	8016afa <USBD_CtlError>
        err++;
 80166da:	7afb      	ldrb	r3, [r7, #11]
 80166dc:	3301      	adds	r3, #1
 80166de:	72fb      	strb	r3, [r7, #11]
      break;
 80166e0:	e007      	b.n	80166f2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80166e2:	6839      	ldr	r1, [r7, #0]
 80166e4:	6878      	ldr	r0, [r7, #4]
 80166e6:	f000 fa08 	bl	8016afa <USBD_CtlError>
      err++;
 80166ea:	7afb      	ldrb	r3, [r7, #11]
 80166ec:	3301      	adds	r3, #1
 80166ee:	72fb      	strb	r3, [r7, #11]
      break;
 80166f0:	bf00      	nop
  }

  if (err != 0U)
 80166f2:	7afb      	ldrb	r3, [r7, #11]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d11e      	bne.n	8016736 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80166f8:	683b      	ldr	r3, [r7, #0]
 80166fa:	88db      	ldrh	r3, [r3, #6]
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d016      	beq.n	801672e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8016700:	893b      	ldrh	r3, [r7, #8]
 8016702:	2b00      	cmp	r3, #0
 8016704:	d00e      	beq.n	8016724 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8016706:	683b      	ldr	r3, [r7, #0]
 8016708:	88da      	ldrh	r2, [r3, #6]
 801670a:	893b      	ldrh	r3, [r7, #8]
 801670c:	4293      	cmp	r3, r2
 801670e:	bf28      	it	cs
 8016710:	4613      	movcs	r3, r2
 8016712:	b29b      	uxth	r3, r3
 8016714:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8016716:	893b      	ldrh	r3, [r7, #8]
 8016718:	461a      	mov	r2, r3
 801671a:	68f9      	ldr	r1, [r7, #12]
 801671c:	6878      	ldr	r0, [r7, #4]
 801671e:	f000 fa5d 	bl	8016bdc <USBD_CtlSendData>
 8016722:	e009      	b.n	8016738 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016724:	6839      	ldr	r1, [r7, #0]
 8016726:	6878      	ldr	r0, [r7, #4]
 8016728:	f000 f9e7 	bl	8016afa <USBD_CtlError>
 801672c:	e004      	b.n	8016738 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801672e:	6878      	ldr	r0, [r7, #4]
 8016730:	f000 faae 	bl	8016c90 <USBD_CtlSendStatus>
 8016734:	e000      	b.n	8016738 <USBD_GetDescriptor+0x2cc>
    return;
 8016736:	bf00      	nop
  }
}
 8016738:	3710      	adds	r7, #16
 801673a:	46bd      	mov	sp, r7
 801673c:	bd80      	pop	{r7, pc}
 801673e:	bf00      	nop

08016740 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016740:	b580      	push	{r7, lr}
 8016742:	b084      	sub	sp, #16
 8016744:	af00      	add	r7, sp, #0
 8016746:	6078      	str	r0, [r7, #4]
 8016748:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801674a:	683b      	ldr	r3, [r7, #0]
 801674c:	889b      	ldrh	r3, [r3, #4]
 801674e:	2b00      	cmp	r3, #0
 8016750:	d131      	bne.n	80167b6 <USBD_SetAddress+0x76>
 8016752:	683b      	ldr	r3, [r7, #0]
 8016754:	88db      	ldrh	r3, [r3, #6]
 8016756:	2b00      	cmp	r3, #0
 8016758:	d12d      	bne.n	80167b6 <USBD_SetAddress+0x76>
 801675a:	683b      	ldr	r3, [r7, #0]
 801675c:	885b      	ldrh	r3, [r3, #2]
 801675e:	2b7f      	cmp	r3, #127	; 0x7f
 8016760:	d829      	bhi.n	80167b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016762:	683b      	ldr	r3, [r7, #0]
 8016764:	885b      	ldrh	r3, [r3, #2]
 8016766:	b2db      	uxtb	r3, r3
 8016768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801676c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016774:	b2db      	uxtb	r3, r3
 8016776:	2b03      	cmp	r3, #3
 8016778:	d104      	bne.n	8016784 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801677a:	6839      	ldr	r1, [r7, #0]
 801677c:	6878      	ldr	r0, [r7, #4]
 801677e:	f000 f9bc 	bl	8016afa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016782:	e01d      	b.n	80167c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	7bfa      	ldrb	r2, [r7, #15]
 8016788:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801678c:	7bfb      	ldrb	r3, [r7, #15]
 801678e:	4619      	mov	r1, r3
 8016790:	6878      	ldr	r0, [r7, #4]
 8016792:	f003 f91d 	bl	80199d0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016796:	6878      	ldr	r0, [r7, #4]
 8016798:	f000 fa7a 	bl	8016c90 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801679c:	7bfb      	ldrb	r3, [r7, #15]
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d004      	beq.n	80167ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	2202      	movs	r2, #2
 80167a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80167aa:	e009      	b.n	80167c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	2201      	movs	r2, #1
 80167b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80167b4:	e004      	b.n	80167c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80167b6:	6839      	ldr	r1, [r7, #0]
 80167b8:	6878      	ldr	r0, [r7, #4]
 80167ba:	f000 f99e 	bl	8016afa <USBD_CtlError>
  }
}
 80167be:	bf00      	nop
 80167c0:	bf00      	nop
 80167c2:	3710      	adds	r7, #16
 80167c4:	46bd      	mov	sp, r7
 80167c6:	bd80      	pop	{r7, pc}

080167c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80167c8:	b580      	push	{r7, lr}
 80167ca:	b084      	sub	sp, #16
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	6078      	str	r0, [r7, #4]
 80167d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80167d2:	2300      	movs	r3, #0
 80167d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80167d6:	683b      	ldr	r3, [r7, #0]
 80167d8:	885b      	ldrh	r3, [r3, #2]
 80167da:	b2da      	uxtb	r2, r3
 80167dc:	4b4e      	ldr	r3, [pc, #312]	; (8016918 <USBD_SetConfig+0x150>)
 80167de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80167e0:	4b4d      	ldr	r3, [pc, #308]	; (8016918 <USBD_SetConfig+0x150>)
 80167e2:	781b      	ldrb	r3, [r3, #0]
 80167e4:	2b01      	cmp	r3, #1
 80167e6:	d905      	bls.n	80167f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80167e8:	6839      	ldr	r1, [r7, #0]
 80167ea:	6878      	ldr	r0, [r7, #4]
 80167ec:	f000 f985 	bl	8016afa <USBD_CtlError>
    return USBD_FAIL;
 80167f0:	2303      	movs	r3, #3
 80167f2:	e08c      	b.n	801690e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80167fa:	b2db      	uxtb	r3, r3
 80167fc:	2b02      	cmp	r3, #2
 80167fe:	d002      	beq.n	8016806 <USBD_SetConfig+0x3e>
 8016800:	2b03      	cmp	r3, #3
 8016802:	d029      	beq.n	8016858 <USBD_SetConfig+0x90>
 8016804:	e075      	b.n	80168f2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8016806:	4b44      	ldr	r3, [pc, #272]	; (8016918 <USBD_SetConfig+0x150>)
 8016808:	781b      	ldrb	r3, [r3, #0]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d020      	beq.n	8016850 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801680e:	4b42      	ldr	r3, [pc, #264]	; (8016918 <USBD_SetConfig+0x150>)
 8016810:	781b      	ldrb	r3, [r3, #0]
 8016812:	461a      	mov	r2, r3
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016818:	4b3f      	ldr	r3, [pc, #252]	; (8016918 <USBD_SetConfig+0x150>)
 801681a:	781b      	ldrb	r3, [r3, #0]
 801681c:	4619      	mov	r1, r3
 801681e:	6878      	ldr	r0, [r7, #4]
 8016820:	f7fe ffe1 	bl	80157e6 <USBD_SetClassConfig>
 8016824:	4603      	mov	r3, r0
 8016826:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016828:	7bfb      	ldrb	r3, [r7, #15]
 801682a:	2b00      	cmp	r3, #0
 801682c:	d008      	beq.n	8016840 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801682e:	6839      	ldr	r1, [r7, #0]
 8016830:	6878      	ldr	r0, [r7, #4]
 8016832:	f000 f962 	bl	8016afa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	2202      	movs	r2, #2
 801683a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801683e:	e065      	b.n	801690c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016840:	6878      	ldr	r0, [r7, #4]
 8016842:	f000 fa25 	bl	8016c90 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	2203      	movs	r2, #3
 801684a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801684e:	e05d      	b.n	801690c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016850:	6878      	ldr	r0, [r7, #4]
 8016852:	f000 fa1d 	bl	8016c90 <USBD_CtlSendStatus>
      break;
 8016856:	e059      	b.n	801690c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016858:	4b2f      	ldr	r3, [pc, #188]	; (8016918 <USBD_SetConfig+0x150>)
 801685a:	781b      	ldrb	r3, [r3, #0]
 801685c:	2b00      	cmp	r3, #0
 801685e:	d112      	bne.n	8016886 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	2202      	movs	r2, #2
 8016864:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016868:	4b2b      	ldr	r3, [pc, #172]	; (8016918 <USBD_SetConfig+0x150>)
 801686a:	781b      	ldrb	r3, [r3, #0]
 801686c:	461a      	mov	r2, r3
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016872:	4b29      	ldr	r3, [pc, #164]	; (8016918 <USBD_SetConfig+0x150>)
 8016874:	781b      	ldrb	r3, [r3, #0]
 8016876:	4619      	mov	r1, r3
 8016878:	6878      	ldr	r0, [r7, #4]
 801687a:	f7fe ffd0 	bl	801581e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801687e:	6878      	ldr	r0, [r7, #4]
 8016880:	f000 fa06 	bl	8016c90 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016884:	e042      	b.n	801690c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8016886:	4b24      	ldr	r3, [pc, #144]	; (8016918 <USBD_SetConfig+0x150>)
 8016888:	781b      	ldrb	r3, [r3, #0]
 801688a:	461a      	mov	r2, r3
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	685b      	ldr	r3, [r3, #4]
 8016890:	429a      	cmp	r2, r3
 8016892:	d02a      	beq.n	80168ea <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	685b      	ldr	r3, [r3, #4]
 8016898:	b2db      	uxtb	r3, r3
 801689a:	4619      	mov	r1, r3
 801689c:	6878      	ldr	r0, [r7, #4]
 801689e:	f7fe ffbe 	bl	801581e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80168a2:	4b1d      	ldr	r3, [pc, #116]	; (8016918 <USBD_SetConfig+0x150>)
 80168a4:	781b      	ldrb	r3, [r3, #0]
 80168a6:	461a      	mov	r2, r3
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80168ac:	4b1a      	ldr	r3, [pc, #104]	; (8016918 <USBD_SetConfig+0x150>)
 80168ae:	781b      	ldrb	r3, [r3, #0]
 80168b0:	4619      	mov	r1, r3
 80168b2:	6878      	ldr	r0, [r7, #4]
 80168b4:	f7fe ff97 	bl	80157e6 <USBD_SetClassConfig>
 80168b8:	4603      	mov	r3, r0
 80168ba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80168bc:	7bfb      	ldrb	r3, [r7, #15]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d00f      	beq.n	80168e2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80168c2:	6839      	ldr	r1, [r7, #0]
 80168c4:	6878      	ldr	r0, [r7, #4]
 80168c6:	f000 f918 	bl	8016afa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	685b      	ldr	r3, [r3, #4]
 80168ce:	b2db      	uxtb	r3, r3
 80168d0:	4619      	mov	r1, r3
 80168d2:	6878      	ldr	r0, [r7, #4]
 80168d4:	f7fe ffa3 	bl	801581e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	2202      	movs	r2, #2
 80168dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80168e0:	e014      	b.n	801690c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80168e2:	6878      	ldr	r0, [r7, #4]
 80168e4:	f000 f9d4 	bl	8016c90 <USBD_CtlSendStatus>
      break;
 80168e8:	e010      	b.n	801690c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80168ea:	6878      	ldr	r0, [r7, #4]
 80168ec:	f000 f9d0 	bl	8016c90 <USBD_CtlSendStatus>
      break;
 80168f0:	e00c      	b.n	801690c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80168f2:	6839      	ldr	r1, [r7, #0]
 80168f4:	6878      	ldr	r0, [r7, #4]
 80168f6:	f000 f900 	bl	8016afa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80168fa:	4b07      	ldr	r3, [pc, #28]	; (8016918 <USBD_SetConfig+0x150>)
 80168fc:	781b      	ldrb	r3, [r3, #0]
 80168fe:	4619      	mov	r1, r3
 8016900:	6878      	ldr	r0, [r7, #4]
 8016902:	f7fe ff8c 	bl	801581e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016906:	2303      	movs	r3, #3
 8016908:	73fb      	strb	r3, [r7, #15]
      break;
 801690a:	bf00      	nop
  }

  return ret;
 801690c:	7bfb      	ldrb	r3, [r7, #15]
}
 801690e:	4618      	mov	r0, r3
 8016910:	3710      	adds	r7, #16
 8016912:	46bd      	mov	sp, r7
 8016914:	bd80      	pop	{r7, pc}
 8016916:	bf00      	nop
 8016918:	20001378 	.word	0x20001378

0801691c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801691c:	b580      	push	{r7, lr}
 801691e:	b082      	sub	sp, #8
 8016920:	af00      	add	r7, sp, #0
 8016922:	6078      	str	r0, [r7, #4]
 8016924:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016926:	683b      	ldr	r3, [r7, #0]
 8016928:	88db      	ldrh	r3, [r3, #6]
 801692a:	2b01      	cmp	r3, #1
 801692c:	d004      	beq.n	8016938 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801692e:	6839      	ldr	r1, [r7, #0]
 8016930:	6878      	ldr	r0, [r7, #4]
 8016932:	f000 f8e2 	bl	8016afa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016936:	e023      	b.n	8016980 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801693e:	b2db      	uxtb	r3, r3
 8016940:	2b02      	cmp	r3, #2
 8016942:	dc02      	bgt.n	801694a <USBD_GetConfig+0x2e>
 8016944:	2b00      	cmp	r3, #0
 8016946:	dc03      	bgt.n	8016950 <USBD_GetConfig+0x34>
 8016948:	e015      	b.n	8016976 <USBD_GetConfig+0x5a>
 801694a:	2b03      	cmp	r3, #3
 801694c:	d00b      	beq.n	8016966 <USBD_GetConfig+0x4a>
 801694e:	e012      	b.n	8016976 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	2200      	movs	r2, #0
 8016954:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	3308      	adds	r3, #8
 801695a:	2201      	movs	r2, #1
 801695c:	4619      	mov	r1, r3
 801695e:	6878      	ldr	r0, [r7, #4]
 8016960:	f000 f93c 	bl	8016bdc <USBD_CtlSendData>
        break;
 8016964:	e00c      	b.n	8016980 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	3304      	adds	r3, #4
 801696a:	2201      	movs	r2, #1
 801696c:	4619      	mov	r1, r3
 801696e:	6878      	ldr	r0, [r7, #4]
 8016970:	f000 f934 	bl	8016bdc <USBD_CtlSendData>
        break;
 8016974:	e004      	b.n	8016980 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8016976:	6839      	ldr	r1, [r7, #0]
 8016978:	6878      	ldr	r0, [r7, #4]
 801697a:	f000 f8be 	bl	8016afa <USBD_CtlError>
        break;
 801697e:	bf00      	nop
}
 8016980:	bf00      	nop
 8016982:	3708      	adds	r7, #8
 8016984:	46bd      	mov	sp, r7
 8016986:	bd80      	pop	{r7, pc}

08016988 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016988:	b580      	push	{r7, lr}
 801698a:	b082      	sub	sp, #8
 801698c:	af00      	add	r7, sp, #0
 801698e:	6078      	str	r0, [r7, #4]
 8016990:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016998:	b2db      	uxtb	r3, r3
 801699a:	3b01      	subs	r3, #1
 801699c:	2b02      	cmp	r3, #2
 801699e:	d81e      	bhi.n	80169de <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80169a0:	683b      	ldr	r3, [r7, #0]
 80169a2:	88db      	ldrh	r3, [r3, #6]
 80169a4:	2b02      	cmp	r3, #2
 80169a6:	d004      	beq.n	80169b2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80169a8:	6839      	ldr	r1, [r7, #0]
 80169aa:	6878      	ldr	r0, [r7, #4]
 80169ac:	f000 f8a5 	bl	8016afa <USBD_CtlError>
        break;
 80169b0:	e01a      	b.n	80169e8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	2201      	movs	r2, #1
 80169b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d005      	beq.n	80169ce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	68db      	ldr	r3, [r3, #12]
 80169c6:	f043 0202 	orr.w	r2, r3, #2
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	330c      	adds	r3, #12
 80169d2:	2202      	movs	r2, #2
 80169d4:	4619      	mov	r1, r3
 80169d6:	6878      	ldr	r0, [r7, #4]
 80169d8:	f000 f900 	bl	8016bdc <USBD_CtlSendData>
      break;
 80169dc:	e004      	b.n	80169e8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80169de:	6839      	ldr	r1, [r7, #0]
 80169e0:	6878      	ldr	r0, [r7, #4]
 80169e2:	f000 f88a 	bl	8016afa <USBD_CtlError>
      break;
 80169e6:	bf00      	nop
  }
}
 80169e8:	bf00      	nop
 80169ea:	3708      	adds	r7, #8
 80169ec:	46bd      	mov	sp, r7
 80169ee:	bd80      	pop	{r7, pc}

080169f0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80169f0:	b580      	push	{r7, lr}
 80169f2:	b082      	sub	sp, #8
 80169f4:	af00      	add	r7, sp, #0
 80169f6:	6078      	str	r0, [r7, #4]
 80169f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80169fa:	683b      	ldr	r3, [r7, #0]
 80169fc:	885b      	ldrh	r3, [r3, #2]
 80169fe:	2b01      	cmp	r3, #1
 8016a00:	d107      	bne.n	8016a12 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	2201      	movs	r2, #1
 8016a06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8016a0a:	6878      	ldr	r0, [r7, #4]
 8016a0c:	f000 f940 	bl	8016c90 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8016a10:	e013      	b.n	8016a3a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8016a12:	683b      	ldr	r3, [r7, #0]
 8016a14:	885b      	ldrh	r3, [r3, #2]
 8016a16:	2b02      	cmp	r3, #2
 8016a18:	d10b      	bne.n	8016a32 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8016a1a:	683b      	ldr	r3, [r7, #0]
 8016a1c:	889b      	ldrh	r3, [r3, #4]
 8016a1e:	0a1b      	lsrs	r3, r3, #8
 8016a20:	b29b      	uxth	r3, r3
 8016a22:	b2da      	uxtb	r2, r3
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8016a2a:	6878      	ldr	r0, [r7, #4]
 8016a2c:	f000 f930 	bl	8016c90 <USBD_CtlSendStatus>
}
 8016a30:	e003      	b.n	8016a3a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8016a32:	6839      	ldr	r1, [r7, #0]
 8016a34:	6878      	ldr	r0, [r7, #4]
 8016a36:	f000 f860 	bl	8016afa <USBD_CtlError>
}
 8016a3a:	bf00      	nop
 8016a3c:	3708      	adds	r7, #8
 8016a3e:	46bd      	mov	sp, r7
 8016a40:	bd80      	pop	{r7, pc}

08016a42 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016a42:	b580      	push	{r7, lr}
 8016a44:	b082      	sub	sp, #8
 8016a46:	af00      	add	r7, sp, #0
 8016a48:	6078      	str	r0, [r7, #4]
 8016a4a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016a52:	b2db      	uxtb	r3, r3
 8016a54:	3b01      	subs	r3, #1
 8016a56:	2b02      	cmp	r3, #2
 8016a58:	d80b      	bhi.n	8016a72 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016a5a:	683b      	ldr	r3, [r7, #0]
 8016a5c:	885b      	ldrh	r3, [r3, #2]
 8016a5e:	2b01      	cmp	r3, #1
 8016a60:	d10c      	bne.n	8016a7c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	2200      	movs	r2, #0
 8016a66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016a6a:	6878      	ldr	r0, [r7, #4]
 8016a6c:	f000 f910 	bl	8016c90 <USBD_CtlSendStatus>
      }
      break;
 8016a70:	e004      	b.n	8016a7c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8016a72:	6839      	ldr	r1, [r7, #0]
 8016a74:	6878      	ldr	r0, [r7, #4]
 8016a76:	f000 f840 	bl	8016afa <USBD_CtlError>
      break;
 8016a7a:	e000      	b.n	8016a7e <USBD_ClrFeature+0x3c>
      break;
 8016a7c:	bf00      	nop
  }
}
 8016a7e:	bf00      	nop
 8016a80:	3708      	adds	r7, #8
 8016a82:	46bd      	mov	sp, r7
 8016a84:	bd80      	pop	{r7, pc}

08016a86 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016a86:	b580      	push	{r7, lr}
 8016a88:	b084      	sub	sp, #16
 8016a8a:	af00      	add	r7, sp, #0
 8016a8c:	6078      	str	r0, [r7, #4]
 8016a8e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016a90:	683b      	ldr	r3, [r7, #0]
 8016a92:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	781a      	ldrb	r2, [r3, #0]
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016a9c:	68fb      	ldr	r3, [r7, #12]
 8016a9e:	3301      	adds	r3, #1
 8016aa0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	781a      	ldrb	r2, [r3, #0]
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016aaa:	68fb      	ldr	r3, [r7, #12]
 8016aac:	3301      	adds	r3, #1
 8016aae:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016ab0:	68f8      	ldr	r0, [r7, #12]
 8016ab2:	f7ff fa41 	bl	8015f38 <SWAPBYTE>
 8016ab6:	4603      	mov	r3, r0
 8016ab8:	461a      	mov	r2, r3
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	3301      	adds	r3, #1
 8016ac2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	3301      	adds	r3, #1
 8016ac8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016aca:	68f8      	ldr	r0, [r7, #12]
 8016acc:	f7ff fa34 	bl	8015f38 <SWAPBYTE>
 8016ad0:	4603      	mov	r3, r0
 8016ad2:	461a      	mov	r2, r3
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016ad8:	68fb      	ldr	r3, [r7, #12]
 8016ada:	3301      	adds	r3, #1
 8016adc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	3301      	adds	r3, #1
 8016ae2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016ae4:	68f8      	ldr	r0, [r7, #12]
 8016ae6:	f7ff fa27 	bl	8015f38 <SWAPBYTE>
 8016aea:	4603      	mov	r3, r0
 8016aec:	461a      	mov	r2, r3
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	80da      	strh	r2, [r3, #6]
}
 8016af2:	bf00      	nop
 8016af4:	3710      	adds	r7, #16
 8016af6:	46bd      	mov	sp, r7
 8016af8:	bd80      	pop	{r7, pc}

08016afa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016afa:	b580      	push	{r7, lr}
 8016afc:	b082      	sub	sp, #8
 8016afe:	af00      	add	r7, sp, #0
 8016b00:	6078      	str	r0, [r7, #4]
 8016b02:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016b04:	2180      	movs	r1, #128	; 0x80
 8016b06:	6878      	ldr	r0, [r7, #4]
 8016b08:	f002 feca 	bl	80198a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016b0c:	2100      	movs	r1, #0
 8016b0e:	6878      	ldr	r0, [r7, #4]
 8016b10:	f002 fec6 	bl	80198a0 <USBD_LL_StallEP>
}
 8016b14:	bf00      	nop
 8016b16:	3708      	adds	r7, #8
 8016b18:	46bd      	mov	sp, r7
 8016b1a:	bd80      	pop	{r7, pc}

08016b1c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016b1c:	b580      	push	{r7, lr}
 8016b1e:	b086      	sub	sp, #24
 8016b20:	af00      	add	r7, sp, #0
 8016b22:	60f8      	str	r0, [r7, #12]
 8016b24:	60b9      	str	r1, [r7, #8]
 8016b26:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016b28:	2300      	movs	r3, #0
 8016b2a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d036      	beq.n	8016ba0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8016b32:	68fb      	ldr	r3, [r7, #12]
 8016b34:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016b36:	6938      	ldr	r0, [r7, #16]
 8016b38:	f000 f836 	bl	8016ba8 <USBD_GetLen>
 8016b3c:	4603      	mov	r3, r0
 8016b3e:	3301      	adds	r3, #1
 8016b40:	b29b      	uxth	r3, r3
 8016b42:	005b      	lsls	r3, r3, #1
 8016b44:	b29a      	uxth	r2, r3
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016b4a:	7dfb      	ldrb	r3, [r7, #23]
 8016b4c:	68ba      	ldr	r2, [r7, #8]
 8016b4e:	4413      	add	r3, r2
 8016b50:	687a      	ldr	r2, [r7, #4]
 8016b52:	7812      	ldrb	r2, [r2, #0]
 8016b54:	701a      	strb	r2, [r3, #0]
  idx++;
 8016b56:	7dfb      	ldrb	r3, [r7, #23]
 8016b58:	3301      	adds	r3, #1
 8016b5a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016b5c:	7dfb      	ldrb	r3, [r7, #23]
 8016b5e:	68ba      	ldr	r2, [r7, #8]
 8016b60:	4413      	add	r3, r2
 8016b62:	2203      	movs	r2, #3
 8016b64:	701a      	strb	r2, [r3, #0]
  idx++;
 8016b66:	7dfb      	ldrb	r3, [r7, #23]
 8016b68:	3301      	adds	r3, #1
 8016b6a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016b6c:	e013      	b.n	8016b96 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016b6e:	7dfb      	ldrb	r3, [r7, #23]
 8016b70:	68ba      	ldr	r2, [r7, #8]
 8016b72:	4413      	add	r3, r2
 8016b74:	693a      	ldr	r2, [r7, #16]
 8016b76:	7812      	ldrb	r2, [r2, #0]
 8016b78:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016b7a:	693b      	ldr	r3, [r7, #16]
 8016b7c:	3301      	adds	r3, #1
 8016b7e:	613b      	str	r3, [r7, #16]
    idx++;
 8016b80:	7dfb      	ldrb	r3, [r7, #23]
 8016b82:	3301      	adds	r3, #1
 8016b84:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016b86:	7dfb      	ldrb	r3, [r7, #23]
 8016b88:	68ba      	ldr	r2, [r7, #8]
 8016b8a:	4413      	add	r3, r2
 8016b8c:	2200      	movs	r2, #0
 8016b8e:	701a      	strb	r2, [r3, #0]
    idx++;
 8016b90:	7dfb      	ldrb	r3, [r7, #23]
 8016b92:	3301      	adds	r3, #1
 8016b94:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016b96:	693b      	ldr	r3, [r7, #16]
 8016b98:	781b      	ldrb	r3, [r3, #0]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d1e7      	bne.n	8016b6e <USBD_GetString+0x52>
 8016b9e:	e000      	b.n	8016ba2 <USBD_GetString+0x86>
    return;
 8016ba0:	bf00      	nop
  }
}
 8016ba2:	3718      	adds	r7, #24
 8016ba4:	46bd      	mov	sp, r7
 8016ba6:	bd80      	pop	{r7, pc}

08016ba8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016ba8:	b480      	push	{r7}
 8016baa:	b085      	sub	sp, #20
 8016bac:	af00      	add	r7, sp, #0
 8016bae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016bb0:	2300      	movs	r3, #0
 8016bb2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016bb8:	e005      	b.n	8016bc6 <USBD_GetLen+0x1e>
  {
    len++;
 8016bba:	7bfb      	ldrb	r3, [r7, #15]
 8016bbc:	3301      	adds	r3, #1
 8016bbe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016bc0:	68bb      	ldr	r3, [r7, #8]
 8016bc2:	3301      	adds	r3, #1
 8016bc4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016bc6:	68bb      	ldr	r3, [r7, #8]
 8016bc8:	781b      	ldrb	r3, [r3, #0]
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d1f5      	bne.n	8016bba <USBD_GetLen+0x12>
  }

  return len;
 8016bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8016bd0:	4618      	mov	r0, r3
 8016bd2:	3714      	adds	r7, #20
 8016bd4:	46bd      	mov	sp, r7
 8016bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bda:	4770      	bx	lr

08016bdc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016bdc:	b580      	push	{r7, lr}
 8016bde:	b084      	sub	sp, #16
 8016be0:	af00      	add	r7, sp, #0
 8016be2:	60f8      	str	r0, [r7, #12]
 8016be4:	60b9      	str	r1, [r7, #8]
 8016be6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	2202      	movs	r2, #2
 8016bec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	687a      	ldr	r2, [r7, #4]
 8016bf4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	687a      	ldr	r2, [r7, #4]
 8016bfa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	68ba      	ldr	r2, [r7, #8]
 8016c00:	2100      	movs	r1, #0
 8016c02:	68f8      	ldr	r0, [r7, #12]
 8016c04:	f002 ff1a 	bl	8019a3c <USBD_LL_Transmit>

  return USBD_OK;
 8016c08:	2300      	movs	r3, #0
}
 8016c0a:	4618      	mov	r0, r3
 8016c0c:	3710      	adds	r7, #16
 8016c0e:	46bd      	mov	sp, r7
 8016c10:	bd80      	pop	{r7, pc}

08016c12 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016c12:	b580      	push	{r7, lr}
 8016c14:	b084      	sub	sp, #16
 8016c16:	af00      	add	r7, sp, #0
 8016c18:	60f8      	str	r0, [r7, #12]
 8016c1a:	60b9      	str	r1, [r7, #8]
 8016c1c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	68ba      	ldr	r2, [r7, #8]
 8016c22:	2100      	movs	r1, #0
 8016c24:	68f8      	ldr	r0, [r7, #12]
 8016c26:	f002 ff09 	bl	8019a3c <USBD_LL_Transmit>

  return USBD_OK;
 8016c2a:	2300      	movs	r3, #0
}
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	3710      	adds	r7, #16
 8016c30:	46bd      	mov	sp, r7
 8016c32:	bd80      	pop	{r7, pc}

08016c34 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016c34:	b580      	push	{r7, lr}
 8016c36:	b084      	sub	sp, #16
 8016c38:	af00      	add	r7, sp, #0
 8016c3a:	60f8      	str	r0, [r7, #12]
 8016c3c:	60b9      	str	r1, [r7, #8]
 8016c3e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016c40:	68fb      	ldr	r3, [r7, #12]
 8016c42:	2203      	movs	r2, #3
 8016c44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016c48:	68fb      	ldr	r3, [r7, #12]
 8016c4a:	687a      	ldr	r2, [r7, #4]
 8016c4c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016c50:	68fb      	ldr	r3, [r7, #12]
 8016c52:	687a      	ldr	r2, [r7, #4]
 8016c54:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	68ba      	ldr	r2, [r7, #8]
 8016c5c:	2100      	movs	r1, #0
 8016c5e:	68f8      	ldr	r0, [r7, #12]
 8016c60:	f002 ff24 	bl	8019aac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016c64:	2300      	movs	r3, #0
}
 8016c66:	4618      	mov	r0, r3
 8016c68:	3710      	adds	r7, #16
 8016c6a:	46bd      	mov	sp, r7
 8016c6c:	bd80      	pop	{r7, pc}

08016c6e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016c6e:	b580      	push	{r7, lr}
 8016c70:	b084      	sub	sp, #16
 8016c72:	af00      	add	r7, sp, #0
 8016c74:	60f8      	str	r0, [r7, #12]
 8016c76:	60b9      	str	r1, [r7, #8]
 8016c78:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	68ba      	ldr	r2, [r7, #8]
 8016c7e:	2100      	movs	r1, #0
 8016c80:	68f8      	ldr	r0, [r7, #12]
 8016c82:	f002 ff13 	bl	8019aac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016c86:	2300      	movs	r3, #0
}
 8016c88:	4618      	mov	r0, r3
 8016c8a:	3710      	adds	r7, #16
 8016c8c:	46bd      	mov	sp, r7
 8016c8e:	bd80      	pop	{r7, pc}

08016c90 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016c90:	b580      	push	{r7, lr}
 8016c92:	b082      	sub	sp, #8
 8016c94:	af00      	add	r7, sp, #0
 8016c96:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	2204      	movs	r2, #4
 8016c9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016ca0:	2300      	movs	r3, #0
 8016ca2:	2200      	movs	r2, #0
 8016ca4:	2100      	movs	r1, #0
 8016ca6:	6878      	ldr	r0, [r7, #4]
 8016ca8:	f002 fec8 	bl	8019a3c <USBD_LL_Transmit>

  return USBD_OK;
 8016cac:	2300      	movs	r3, #0
}
 8016cae:	4618      	mov	r0, r3
 8016cb0:	3708      	adds	r7, #8
 8016cb2:	46bd      	mov	sp, r7
 8016cb4:	bd80      	pop	{r7, pc}

08016cb6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016cb6:	b580      	push	{r7, lr}
 8016cb8:	b082      	sub	sp, #8
 8016cba:	af00      	add	r7, sp, #0
 8016cbc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	2205      	movs	r2, #5
 8016cc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016cc6:	2300      	movs	r3, #0
 8016cc8:	2200      	movs	r2, #0
 8016cca:	2100      	movs	r1, #0
 8016ccc:	6878      	ldr	r0, [r7, #4]
 8016cce:	f002 feed 	bl	8019aac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016cd2:	2300      	movs	r3, #0
}
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	3708      	adds	r7, #8
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	bd80      	pop	{r7, pc}

08016cdc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8016cdc:	b580      	push	{r7, lr}
 8016cde:	b084      	sub	sp, #16
 8016ce0:	af00      	add	r7, sp, #0
 8016ce2:	4603      	mov	r3, r0
 8016ce4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8016ce6:	79fb      	ldrb	r3, [r7, #7]
 8016ce8:	4a08      	ldr	r2, [pc, #32]	; (8016d0c <disk_status+0x30>)
 8016cea:	009b      	lsls	r3, r3, #2
 8016cec:	4413      	add	r3, r2
 8016cee:	685b      	ldr	r3, [r3, #4]
 8016cf0:	685b      	ldr	r3, [r3, #4]
 8016cf2:	79fa      	ldrb	r2, [r7, #7]
 8016cf4:	4905      	ldr	r1, [pc, #20]	; (8016d0c <disk_status+0x30>)
 8016cf6:	440a      	add	r2, r1
 8016cf8:	7a12      	ldrb	r2, [r2, #8]
 8016cfa:	4610      	mov	r0, r2
 8016cfc:	4798      	blx	r3
 8016cfe:	4603      	mov	r3, r0
 8016d00:	73fb      	strb	r3, [r7, #15]
  return stat;
 8016d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d04:	4618      	mov	r0, r3
 8016d06:	3710      	adds	r7, #16
 8016d08:	46bd      	mov	sp, r7
 8016d0a:	bd80      	pop	{r7, pc}
 8016d0c:	200013a4 	.word	0x200013a4

08016d10 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8016d10:	b580      	push	{r7, lr}
 8016d12:	b084      	sub	sp, #16
 8016d14:	af00      	add	r7, sp, #0
 8016d16:	4603      	mov	r3, r0
 8016d18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8016d1a:	2300      	movs	r3, #0
 8016d1c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8016d1e:	79fb      	ldrb	r3, [r7, #7]
 8016d20:	4a0d      	ldr	r2, [pc, #52]	; (8016d58 <disk_initialize+0x48>)
 8016d22:	5cd3      	ldrb	r3, [r2, r3]
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d111      	bne.n	8016d4c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8016d28:	79fb      	ldrb	r3, [r7, #7]
 8016d2a:	4a0b      	ldr	r2, [pc, #44]	; (8016d58 <disk_initialize+0x48>)
 8016d2c:	2101      	movs	r1, #1
 8016d2e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8016d30:	79fb      	ldrb	r3, [r7, #7]
 8016d32:	4a09      	ldr	r2, [pc, #36]	; (8016d58 <disk_initialize+0x48>)
 8016d34:	009b      	lsls	r3, r3, #2
 8016d36:	4413      	add	r3, r2
 8016d38:	685b      	ldr	r3, [r3, #4]
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	79fa      	ldrb	r2, [r7, #7]
 8016d3e:	4906      	ldr	r1, [pc, #24]	; (8016d58 <disk_initialize+0x48>)
 8016d40:	440a      	add	r2, r1
 8016d42:	7a12      	ldrb	r2, [r2, #8]
 8016d44:	4610      	mov	r0, r2
 8016d46:	4798      	blx	r3
 8016d48:	4603      	mov	r3, r0
 8016d4a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8016d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d4e:	4618      	mov	r0, r3
 8016d50:	3710      	adds	r7, #16
 8016d52:	46bd      	mov	sp, r7
 8016d54:	bd80      	pop	{r7, pc}
 8016d56:	bf00      	nop
 8016d58:	200013a4 	.word	0x200013a4

08016d5c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8016d5c:	b590      	push	{r4, r7, lr}
 8016d5e:	b087      	sub	sp, #28
 8016d60:	af00      	add	r7, sp, #0
 8016d62:	60b9      	str	r1, [r7, #8]
 8016d64:	607a      	str	r2, [r7, #4]
 8016d66:	603b      	str	r3, [r7, #0]
 8016d68:	4603      	mov	r3, r0
 8016d6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8016d6c:	7bfb      	ldrb	r3, [r7, #15]
 8016d6e:	4a0a      	ldr	r2, [pc, #40]	; (8016d98 <disk_read+0x3c>)
 8016d70:	009b      	lsls	r3, r3, #2
 8016d72:	4413      	add	r3, r2
 8016d74:	685b      	ldr	r3, [r3, #4]
 8016d76:	689c      	ldr	r4, [r3, #8]
 8016d78:	7bfb      	ldrb	r3, [r7, #15]
 8016d7a:	4a07      	ldr	r2, [pc, #28]	; (8016d98 <disk_read+0x3c>)
 8016d7c:	4413      	add	r3, r2
 8016d7e:	7a18      	ldrb	r0, [r3, #8]
 8016d80:	683b      	ldr	r3, [r7, #0]
 8016d82:	687a      	ldr	r2, [r7, #4]
 8016d84:	68b9      	ldr	r1, [r7, #8]
 8016d86:	47a0      	blx	r4
 8016d88:	4603      	mov	r3, r0
 8016d8a:	75fb      	strb	r3, [r7, #23]
  return res;
 8016d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8016d8e:	4618      	mov	r0, r3
 8016d90:	371c      	adds	r7, #28
 8016d92:	46bd      	mov	sp, r7
 8016d94:	bd90      	pop	{r4, r7, pc}
 8016d96:	bf00      	nop
 8016d98:	200013a4 	.word	0x200013a4

08016d9c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8016d9c:	b590      	push	{r4, r7, lr}
 8016d9e:	b087      	sub	sp, #28
 8016da0:	af00      	add	r7, sp, #0
 8016da2:	60b9      	str	r1, [r7, #8]
 8016da4:	607a      	str	r2, [r7, #4]
 8016da6:	603b      	str	r3, [r7, #0]
 8016da8:	4603      	mov	r3, r0
 8016daa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8016dac:	7bfb      	ldrb	r3, [r7, #15]
 8016dae:	4a0a      	ldr	r2, [pc, #40]	; (8016dd8 <disk_write+0x3c>)
 8016db0:	009b      	lsls	r3, r3, #2
 8016db2:	4413      	add	r3, r2
 8016db4:	685b      	ldr	r3, [r3, #4]
 8016db6:	68dc      	ldr	r4, [r3, #12]
 8016db8:	7bfb      	ldrb	r3, [r7, #15]
 8016dba:	4a07      	ldr	r2, [pc, #28]	; (8016dd8 <disk_write+0x3c>)
 8016dbc:	4413      	add	r3, r2
 8016dbe:	7a18      	ldrb	r0, [r3, #8]
 8016dc0:	683b      	ldr	r3, [r7, #0]
 8016dc2:	687a      	ldr	r2, [r7, #4]
 8016dc4:	68b9      	ldr	r1, [r7, #8]
 8016dc6:	47a0      	blx	r4
 8016dc8:	4603      	mov	r3, r0
 8016dca:	75fb      	strb	r3, [r7, #23]
  return res;
 8016dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8016dce:	4618      	mov	r0, r3
 8016dd0:	371c      	adds	r7, #28
 8016dd2:	46bd      	mov	sp, r7
 8016dd4:	bd90      	pop	{r4, r7, pc}
 8016dd6:	bf00      	nop
 8016dd8:	200013a4 	.word	0x200013a4

08016ddc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8016ddc:	b580      	push	{r7, lr}
 8016dde:	b084      	sub	sp, #16
 8016de0:	af00      	add	r7, sp, #0
 8016de2:	4603      	mov	r3, r0
 8016de4:	603a      	str	r2, [r7, #0]
 8016de6:	71fb      	strb	r3, [r7, #7]
 8016de8:	460b      	mov	r3, r1
 8016dea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8016dec:	79fb      	ldrb	r3, [r7, #7]
 8016dee:	4a09      	ldr	r2, [pc, #36]	; (8016e14 <disk_ioctl+0x38>)
 8016df0:	009b      	lsls	r3, r3, #2
 8016df2:	4413      	add	r3, r2
 8016df4:	685b      	ldr	r3, [r3, #4]
 8016df6:	691b      	ldr	r3, [r3, #16]
 8016df8:	79fa      	ldrb	r2, [r7, #7]
 8016dfa:	4906      	ldr	r1, [pc, #24]	; (8016e14 <disk_ioctl+0x38>)
 8016dfc:	440a      	add	r2, r1
 8016dfe:	7a10      	ldrb	r0, [r2, #8]
 8016e00:	79b9      	ldrb	r1, [r7, #6]
 8016e02:	683a      	ldr	r2, [r7, #0]
 8016e04:	4798      	blx	r3
 8016e06:	4603      	mov	r3, r0
 8016e08:	73fb      	strb	r3, [r7, #15]
  return res;
 8016e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e0c:	4618      	mov	r0, r3
 8016e0e:	3710      	adds	r7, #16
 8016e10:	46bd      	mov	sp, r7
 8016e12:	bd80      	pop	{r7, pc}
 8016e14:	200013a4 	.word	0x200013a4

08016e18 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8016e18:	b480      	push	{r7}
 8016e1a:	b085      	sub	sp, #20
 8016e1c:	af00      	add	r7, sp, #0
 8016e1e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	3301      	adds	r3, #1
 8016e24:	781b      	ldrb	r3, [r3, #0]
 8016e26:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8016e28:	89fb      	ldrh	r3, [r7, #14]
 8016e2a:	021b      	lsls	r3, r3, #8
 8016e2c:	b21a      	sxth	r2, r3
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	781b      	ldrb	r3, [r3, #0]
 8016e32:	b21b      	sxth	r3, r3
 8016e34:	4313      	orrs	r3, r2
 8016e36:	b21b      	sxth	r3, r3
 8016e38:	81fb      	strh	r3, [r7, #14]
	return rv;
 8016e3a:	89fb      	ldrh	r3, [r7, #14]
}
 8016e3c:	4618      	mov	r0, r3
 8016e3e:	3714      	adds	r7, #20
 8016e40:	46bd      	mov	sp, r7
 8016e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e46:	4770      	bx	lr

08016e48 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8016e48:	b480      	push	{r7}
 8016e4a:	b085      	sub	sp, #20
 8016e4c:	af00      	add	r7, sp, #0
 8016e4e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	3303      	adds	r3, #3
 8016e54:	781b      	ldrb	r3, [r3, #0]
 8016e56:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8016e58:	68fb      	ldr	r3, [r7, #12]
 8016e5a:	021b      	lsls	r3, r3, #8
 8016e5c:	687a      	ldr	r2, [r7, #4]
 8016e5e:	3202      	adds	r2, #2
 8016e60:	7812      	ldrb	r2, [r2, #0]
 8016e62:	4313      	orrs	r3, r2
 8016e64:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	021b      	lsls	r3, r3, #8
 8016e6a:	687a      	ldr	r2, [r7, #4]
 8016e6c:	3201      	adds	r2, #1
 8016e6e:	7812      	ldrb	r2, [r2, #0]
 8016e70:	4313      	orrs	r3, r2
 8016e72:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8016e74:	68fb      	ldr	r3, [r7, #12]
 8016e76:	021b      	lsls	r3, r3, #8
 8016e78:	687a      	ldr	r2, [r7, #4]
 8016e7a:	7812      	ldrb	r2, [r2, #0]
 8016e7c:	4313      	orrs	r3, r2
 8016e7e:	60fb      	str	r3, [r7, #12]
	return rv;
 8016e80:	68fb      	ldr	r3, [r7, #12]
}
 8016e82:	4618      	mov	r0, r3
 8016e84:	3714      	adds	r7, #20
 8016e86:	46bd      	mov	sp, r7
 8016e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e8c:	4770      	bx	lr

08016e8e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8016e8e:	b480      	push	{r7}
 8016e90:	b083      	sub	sp, #12
 8016e92:	af00      	add	r7, sp, #0
 8016e94:	6078      	str	r0, [r7, #4]
 8016e96:	460b      	mov	r3, r1
 8016e98:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	1c5a      	adds	r2, r3, #1
 8016e9e:	607a      	str	r2, [r7, #4]
 8016ea0:	887a      	ldrh	r2, [r7, #2]
 8016ea2:	b2d2      	uxtb	r2, r2
 8016ea4:	701a      	strb	r2, [r3, #0]
 8016ea6:	887b      	ldrh	r3, [r7, #2]
 8016ea8:	0a1b      	lsrs	r3, r3, #8
 8016eaa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	1c5a      	adds	r2, r3, #1
 8016eb0:	607a      	str	r2, [r7, #4]
 8016eb2:	887a      	ldrh	r2, [r7, #2]
 8016eb4:	b2d2      	uxtb	r2, r2
 8016eb6:	701a      	strb	r2, [r3, #0]
}
 8016eb8:	bf00      	nop
 8016eba:	370c      	adds	r7, #12
 8016ebc:	46bd      	mov	sp, r7
 8016ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ec2:	4770      	bx	lr

08016ec4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8016ec4:	b480      	push	{r7}
 8016ec6:	b083      	sub	sp, #12
 8016ec8:	af00      	add	r7, sp, #0
 8016eca:	6078      	str	r0, [r7, #4]
 8016ecc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	1c5a      	adds	r2, r3, #1
 8016ed2:	607a      	str	r2, [r7, #4]
 8016ed4:	683a      	ldr	r2, [r7, #0]
 8016ed6:	b2d2      	uxtb	r2, r2
 8016ed8:	701a      	strb	r2, [r3, #0]
 8016eda:	683b      	ldr	r3, [r7, #0]
 8016edc:	0a1b      	lsrs	r3, r3, #8
 8016ede:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	1c5a      	adds	r2, r3, #1
 8016ee4:	607a      	str	r2, [r7, #4]
 8016ee6:	683a      	ldr	r2, [r7, #0]
 8016ee8:	b2d2      	uxtb	r2, r2
 8016eea:	701a      	strb	r2, [r3, #0]
 8016eec:	683b      	ldr	r3, [r7, #0]
 8016eee:	0a1b      	lsrs	r3, r3, #8
 8016ef0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	1c5a      	adds	r2, r3, #1
 8016ef6:	607a      	str	r2, [r7, #4]
 8016ef8:	683a      	ldr	r2, [r7, #0]
 8016efa:	b2d2      	uxtb	r2, r2
 8016efc:	701a      	strb	r2, [r3, #0]
 8016efe:	683b      	ldr	r3, [r7, #0]
 8016f00:	0a1b      	lsrs	r3, r3, #8
 8016f02:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	1c5a      	adds	r2, r3, #1
 8016f08:	607a      	str	r2, [r7, #4]
 8016f0a:	683a      	ldr	r2, [r7, #0]
 8016f0c:	b2d2      	uxtb	r2, r2
 8016f0e:	701a      	strb	r2, [r3, #0]
}
 8016f10:	bf00      	nop
 8016f12:	370c      	adds	r7, #12
 8016f14:	46bd      	mov	sp, r7
 8016f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f1a:	4770      	bx	lr

08016f1c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8016f1c:	b480      	push	{r7}
 8016f1e:	b087      	sub	sp, #28
 8016f20:	af00      	add	r7, sp, #0
 8016f22:	60f8      	str	r0, [r7, #12]
 8016f24:	60b9      	str	r1, [r7, #8]
 8016f26:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8016f28:	68fb      	ldr	r3, [r7, #12]
 8016f2a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8016f2c:	68bb      	ldr	r3, [r7, #8]
 8016f2e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d00d      	beq.n	8016f52 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8016f36:	693a      	ldr	r2, [r7, #16]
 8016f38:	1c53      	adds	r3, r2, #1
 8016f3a:	613b      	str	r3, [r7, #16]
 8016f3c:	697b      	ldr	r3, [r7, #20]
 8016f3e:	1c59      	adds	r1, r3, #1
 8016f40:	6179      	str	r1, [r7, #20]
 8016f42:	7812      	ldrb	r2, [r2, #0]
 8016f44:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	3b01      	subs	r3, #1
 8016f4a:	607b      	str	r3, [r7, #4]
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d1f1      	bne.n	8016f36 <mem_cpy+0x1a>
	}
}
 8016f52:	bf00      	nop
 8016f54:	371c      	adds	r7, #28
 8016f56:	46bd      	mov	sp, r7
 8016f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f5c:	4770      	bx	lr

08016f5e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8016f5e:	b480      	push	{r7}
 8016f60:	b087      	sub	sp, #28
 8016f62:	af00      	add	r7, sp, #0
 8016f64:	60f8      	str	r0, [r7, #12]
 8016f66:	60b9      	str	r1, [r7, #8]
 8016f68:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8016f6e:	697b      	ldr	r3, [r7, #20]
 8016f70:	1c5a      	adds	r2, r3, #1
 8016f72:	617a      	str	r2, [r7, #20]
 8016f74:	68ba      	ldr	r2, [r7, #8]
 8016f76:	b2d2      	uxtb	r2, r2
 8016f78:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	3b01      	subs	r3, #1
 8016f7e:	607b      	str	r3, [r7, #4]
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d1f3      	bne.n	8016f6e <mem_set+0x10>
}
 8016f86:	bf00      	nop
 8016f88:	bf00      	nop
 8016f8a:	371c      	adds	r7, #28
 8016f8c:	46bd      	mov	sp, r7
 8016f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f92:	4770      	bx	lr

08016f94 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8016f94:	b480      	push	{r7}
 8016f96:	b089      	sub	sp, #36	; 0x24
 8016f98:	af00      	add	r7, sp, #0
 8016f9a:	60f8      	str	r0, [r7, #12]
 8016f9c:	60b9      	str	r1, [r7, #8]
 8016f9e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8016fa0:	68fb      	ldr	r3, [r7, #12]
 8016fa2:	61fb      	str	r3, [r7, #28]
 8016fa4:	68bb      	ldr	r3, [r7, #8]
 8016fa6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8016fa8:	2300      	movs	r3, #0
 8016faa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8016fac:	69fb      	ldr	r3, [r7, #28]
 8016fae:	1c5a      	adds	r2, r3, #1
 8016fb0:	61fa      	str	r2, [r7, #28]
 8016fb2:	781b      	ldrb	r3, [r3, #0]
 8016fb4:	4619      	mov	r1, r3
 8016fb6:	69bb      	ldr	r3, [r7, #24]
 8016fb8:	1c5a      	adds	r2, r3, #1
 8016fba:	61ba      	str	r2, [r7, #24]
 8016fbc:	781b      	ldrb	r3, [r3, #0]
 8016fbe:	1acb      	subs	r3, r1, r3
 8016fc0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	3b01      	subs	r3, #1
 8016fc6:	607b      	str	r3, [r7, #4]
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d002      	beq.n	8016fd4 <mem_cmp+0x40>
 8016fce:	697b      	ldr	r3, [r7, #20]
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d0eb      	beq.n	8016fac <mem_cmp+0x18>

	return r;
 8016fd4:	697b      	ldr	r3, [r7, #20]
}
 8016fd6:	4618      	mov	r0, r3
 8016fd8:	3724      	adds	r7, #36	; 0x24
 8016fda:	46bd      	mov	sp, r7
 8016fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fe0:	4770      	bx	lr

08016fe2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8016fe2:	b480      	push	{r7}
 8016fe4:	b083      	sub	sp, #12
 8016fe6:	af00      	add	r7, sp, #0
 8016fe8:	6078      	str	r0, [r7, #4]
 8016fea:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8016fec:	e002      	b.n	8016ff4 <chk_chr+0x12>
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	3301      	adds	r3, #1
 8016ff2:	607b      	str	r3, [r7, #4]
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	781b      	ldrb	r3, [r3, #0]
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d005      	beq.n	8017008 <chk_chr+0x26>
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	781b      	ldrb	r3, [r3, #0]
 8017000:	461a      	mov	r2, r3
 8017002:	683b      	ldr	r3, [r7, #0]
 8017004:	4293      	cmp	r3, r2
 8017006:	d1f2      	bne.n	8016fee <chk_chr+0xc>
	return *str;
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	781b      	ldrb	r3, [r3, #0]
}
 801700c:	4618      	mov	r0, r3
 801700e:	370c      	adds	r7, #12
 8017010:	46bd      	mov	sp, r7
 8017012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017016:	4770      	bx	lr

08017018 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8017018:	b480      	push	{r7}
 801701a:	b085      	sub	sp, #20
 801701c:	af00      	add	r7, sp, #0
 801701e:	6078      	str	r0, [r7, #4]
 8017020:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8017022:	2300      	movs	r3, #0
 8017024:	60bb      	str	r3, [r7, #8]
 8017026:	68bb      	ldr	r3, [r7, #8]
 8017028:	60fb      	str	r3, [r7, #12]
 801702a:	e029      	b.n	8017080 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801702c:	4a27      	ldr	r2, [pc, #156]	; (80170cc <chk_lock+0xb4>)
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	011b      	lsls	r3, r3, #4
 8017032:	4413      	add	r3, r2
 8017034:	681b      	ldr	r3, [r3, #0]
 8017036:	2b00      	cmp	r3, #0
 8017038:	d01d      	beq.n	8017076 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801703a:	4a24      	ldr	r2, [pc, #144]	; (80170cc <chk_lock+0xb4>)
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	011b      	lsls	r3, r3, #4
 8017040:	4413      	add	r3, r2
 8017042:	681a      	ldr	r2, [r3, #0]
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	681b      	ldr	r3, [r3, #0]
 8017048:	429a      	cmp	r2, r3
 801704a:	d116      	bne.n	801707a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801704c:	4a1f      	ldr	r2, [pc, #124]	; (80170cc <chk_lock+0xb4>)
 801704e:	68fb      	ldr	r3, [r7, #12]
 8017050:	011b      	lsls	r3, r3, #4
 8017052:	4413      	add	r3, r2
 8017054:	3304      	adds	r3, #4
 8017056:	681a      	ldr	r2, [r3, #0]
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801705c:	429a      	cmp	r2, r3
 801705e:	d10c      	bne.n	801707a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017060:	4a1a      	ldr	r2, [pc, #104]	; (80170cc <chk_lock+0xb4>)
 8017062:	68fb      	ldr	r3, [r7, #12]
 8017064:	011b      	lsls	r3, r3, #4
 8017066:	4413      	add	r3, r2
 8017068:	3308      	adds	r3, #8
 801706a:	681a      	ldr	r2, [r3, #0]
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8017070:	429a      	cmp	r2, r3
 8017072:	d102      	bne.n	801707a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017074:	e007      	b.n	8017086 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8017076:	2301      	movs	r3, #1
 8017078:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801707a:	68fb      	ldr	r3, [r7, #12]
 801707c:	3301      	adds	r3, #1
 801707e:	60fb      	str	r3, [r7, #12]
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	2b01      	cmp	r3, #1
 8017084:	d9d2      	bls.n	801702c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	2b02      	cmp	r3, #2
 801708a:	d109      	bne.n	80170a0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801708c:	68bb      	ldr	r3, [r7, #8]
 801708e:	2b00      	cmp	r3, #0
 8017090:	d102      	bne.n	8017098 <chk_lock+0x80>
 8017092:	683b      	ldr	r3, [r7, #0]
 8017094:	2b02      	cmp	r3, #2
 8017096:	d101      	bne.n	801709c <chk_lock+0x84>
 8017098:	2300      	movs	r3, #0
 801709a:	e010      	b.n	80170be <chk_lock+0xa6>
 801709c:	2312      	movs	r3, #18
 801709e:	e00e      	b.n	80170be <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80170a0:	683b      	ldr	r3, [r7, #0]
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d108      	bne.n	80170b8 <chk_lock+0xa0>
 80170a6:	4a09      	ldr	r2, [pc, #36]	; (80170cc <chk_lock+0xb4>)
 80170a8:	68fb      	ldr	r3, [r7, #12]
 80170aa:	011b      	lsls	r3, r3, #4
 80170ac:	4413      	add	r3, r2
 80170ae:	330c      	adds	r3, #12
 80170b0:	881b      	ldrh	r3, [r3, #0]
 80170b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80170b6:	d101      	bne.n	80170bc <chk_lock+0xa4>
 80170b8:	2310      	movs	r3, #16
 80170ba:	e000      	b.n	80170be <chk_lock+0xa6>
 80170bc:	2300      	movs	r3, #0
}
 80170be:	4618      	mov	r0, r3
 80170c0:	3714      	adds	r7, #20
 80170c2:	46bd      	mov	sp, r7
 80170c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170c8:	4770      	bx	lr
 80170ca:	bf00      	nop
 80170cc:	20001384 	.word	0x20001384

080170d0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80170d0:	b480      	push	{r7}
 80170d2:	b083      	sub	sp, #12
 80170d4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80170d6:	2300      	movs	r3, #0
 80170d8:	607b      	str	r3, [r7, #4]
 80170da:	e002      	b.n	80170e2 <enq_lock+0x12>
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	3301      	adds	r3, #1
 80170e0:	607b      	str	r3, [r7, #4]
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	2b01      	cmp	r3, #1
 80170e6:	d806      	bhi.n	80170f6 <enq_lock+0x26>
 80170e8:	4a09      	ldr	r2, [pc, #36]	; (8017110 <enq_lock+0x40>)
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	011b      	lsls	r3, r3, #4
 80170ee:	4413      	add	r3, r2
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d1f2      	bne.n	80170dc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	2b02      	cmp	r3, #2
 80170fa:	bf14      	ite	ne
 80170fc:	2301      	movne	r3, #1
 80170fe:	2300      	moveq	r3, #0
 8017100:	b2db      	uxtb	r3, r3
}
 8017102:	4618      	mov	r0, r3
 8017104:	370c      	adds	r7, #12
 8017106:	46bd      	mov	sp, r7
 8017108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801710c:	4770      	bx	lr
 801710e:	bf00      	nop
 8017110:	20001384 	.word	0x20001384

08017114 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8017114:	b480      	push	{r7}
 8017116:	b085      	sub	sp, #20
 8017118:	af00      	add	r7, sp, #0
 801711a:	6078      	str	r0, [r7, #4]
 801711c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801711e:	2300      	movs	r3, #0
 8017120:	60fb      	str	r3, [r7, #12]
 8017122:	e01f      	b.n	8017164 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8017124:	4a41      	ldr	r2, [pc, #260]	; (801722c <inc_lock+0x118>)
 8017126:	68fb      	ldr	r3, [r7, #12]
 8017128:	011b      	lsls	r3, r3, #4
 801712a:	4413      	add	r3, r2
 801712c:	681a      	ldr	r2, [r3, #0]
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	681b      	ldr	r3, [r3, #0]
 8017132:	429a      	cmp	r2, r3
 8017134:	d113      	bne.n	801715e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8017136:	4a3d      	ldr	r2, [pc, #244]	; (801722c <inc_lock+0x118>)
 8017138:	68fb      	ldr	r3, [r7, #12]
 801713a:	011b      	lsls	r3, r3, #4
 801713c:	4413      	add	r3, r2
 801713e:	3304      	adds	r3, #4
 8017140:	681a      	ldr	r2, [r3, #0]
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8017146:	429a      	cmp	r2, r3
 8017148:	d109      	bne.n	801715e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801714a:	4a38      	ldr	r2, [pc, #224]	; (801722c <inc_lock+0x118>)
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	011b      	lsls	r3, r3, #4
 8017150:	4413      	add	r3, r2
 8017152:	3308      	adds	r3, #8
 8017154:	681a      	ldr	r2, [r3, #0]
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801715a:	429a      	cmp	r2, r3
 801715c:	d006      	beq.n	801716c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801715e:	68fb      	ldr	r3, [r7, #12]
 8017160:	3301      	adds	r3, #1
 8017162:	60fb      	str	r3, [r7, #12]
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	2b01      	cmp	r3, #1
 8017168:	d9dc      	bls.n	8017124 <inc_lock+0x10>
 801716a:	e000      	b.n	801716e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801716c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	2b02      	cmp	r3, #2
 8017172:	d132      	bne.n	80171da <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017174:	2300      	movs	r3, #0
 8017176:	60fb      	str	r3, [r7, #12]
 8017178:	e002      	b.n	8017180 <inc_lock+0x6c>
 801717a:	68fb      	ldr	r3, [r7, #12]
 801717c:	3301      	adds	r3, #1
 801717e:	60fb      	str	r3, [r7, #12]
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	2b01      	cmp	r3, #1
 8017184:	d806      	bhi.n	8017194 <inc_lock+0x80>
 8017186:	4a29      	ldr	r2, [pc, #164]	; (801722c <inc_lock+0x118>)
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	011b      	lsls	r3, r3, #4
 801718c:	4413      	add	r3, r2
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	2b00      	cmp	r3, #0
 8017192:	d1f2      	bne.n	801717a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8017194:	68fb      	ldr	r3, [r7, #12]
 8017196:	2b02      	cmp	r3, #2
 8017198:	d101      	bne.n	801719e <inc_lock+0x8a>
 801719a:	2300      	movs	r3, #0
 801719c:	e040      	b.n	8017220 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	681a      	ldr	r2, [r3, #0]
 80171a2:	4922      	ldr	r1, [pc, #136]	; (801722c <inc_lock+0x118>)
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	011b      	lsls	r3, r3, #4
 80171a8:	440b      	add	r3, r1
 80171aa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	689a      	ldr	r2, [r3, #8]
 80171b0:	491e      	ldr	r1, [pc, #120]	; (801722c <inc_lock+0x118>)
 80171b2:	68fb      	ldr	r3, [r7, #12]
 80171b4:	011b      	lsls	r3, r3, #4
 80171b6:	440b      	add	r3, r1
 80171b8:	3304      	adds	r3, #4
 80171ba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	695a      	ldr	r2, [r3, #20]
 80171c0:	491a      	ldr	r1, [pc, #104]	; (801722c <inc_lock+0x118>)
 80171c2:	68fb      	ldr	r3, [r7, #12]
 80171c4:	011b      	lsls	r3, r3, #4
 80171c6:	440b      	add	r3, r1
 80171c8:	3308      	adds	r3, #8
 80171ca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80171cc:	4a17      	ldr	r2, [pc, #92]	; (801722c <inc_lock+0x118>)
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	011b      	lsls	r3, r3, #4
 80171d2:	4413      	add	r3, r2
 80171d4:	330c      	adds	r3, #12
 80171d6:	2200      	movs	r2, #0
 80171d8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80171da:	683b      	ldr	r3, [r7, #0]
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d009      	beq.n	80171f4 <inc_lock+0xe0>
 80171e0:	4a12      	ldr	r2, [pc, #72]	; (801722c <inc_lock+0x118>)
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	011b      	lsls	r3, r3, #4
 80171e6:	4413      	add	r3, r2
 80171e8:	330c      	adds	r3, #12
 80171ea:	881b      	ldrh	r3, [r3, #0]
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d001      	beq.n	80171f4 <inc_lock+0xe0>
 80171f0:	2300      	movs	r3, #0
 80171f2:	e015      	b.n	8017220 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80171f4:	683b      	ldr	r3, [r7, #0]
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d108      	bne.n	801720c <inc_lock+0xf8>
 80171fa:	4a0c      	ldr	r2, [pc, #48]	; (801722c <inc_lock+0x118>)
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	011b      	lsls	r3, r3, #4
 8017200:	4413      	add	r3, r2
 8017202:	330c      	adds	r3, #12
 8017204:	881b      	ldrh	r3, [r3, #0]
 8017206:	3301      	adds	r3, #1
 8017208:	b29a      	uxth	r2, r3
 801720a:	e001      	b.n	8017210 <inc_lock+0xfc>
 801720c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017210:	4906      	ldr	r1, [pc, #24]	; (801722c <inc_lock+0x118>)
 8017212:	68fb      	ldr	r3, [r7, #12]
 8017214:	011b      	lsls	r3, r3, #4
 8017216:	440b      	add	r3, r1
 8017218:	330c      	adds	r3, #12
 801721a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801721c:	68fb      	ldr	r3, [r7, #12]
 801721e:	3301      	adds	r3, #1
}
 8017220:	4618      	mov	r0, r3
 8017222:	3714      	adds	r7, #20
 8017224:	46bd      	mov	sp, r7
 8017226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801722a:	4770      	bx	lr
 801722c:	20001384 	.word	0x20001384

08017230 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8017230:	b480      	push	{r7}
 8017232:	b085      	sub	sp, #20
 8017234:	af00      	add	r7, sp, #0
 8017236:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8017238:	2300      	movs	r3, #0
 801723a:	60fb      	str	r3, [r7, #12]
 801723c:	e010      	b.n	8017260 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801723e:	4a0d      	ldr	r2, [pc, #52]	; (8017274 <clear_lock+0x44>)
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	011b      	lsls	r3, r3, #4
 8017244:	4413      	add	r3, r2
 8017246:	681b      	ldr	r3, [r3, #0]
 8017248:	687a      	ldr	r2, [r7, #4]
 801724a:	429a      	cmp	r2, r3
 801724c:	d105      	bne.n	801725a <clear_lock+0x2a>
 801724e:	4a09      	ldr	r2, [pc, #36]	; (8017274 <clear_lock+0x44>)
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	011b      	lsls	r3, r3, #4
 8017254:	4413      	add	r3, r2
 8017256:	2200      	movs	r2, #0
 8017258:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	3301      	adds	r3, #1
 801725e:	60fb      	str	r3, [r7, #12]
 8017260:	68fb      	ldr	r3, [r7, #12]
 8017262:	2b01      	cmp	r3, #1
 8017264:	d9eb      	bls.n	801723e <clear_lock+0xe>
	}
}
 8017266:	bf00      	nop
 8017268:	bf00      	nop
 801726a:	3714      	adds	r7, #20
 801726c:	46bd      	mov	sp, r7
 801726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017272:	4770      	bx	lr
 8017274:	20001384 	.word	0x20001384

08017278 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8017278:	b580      	push	{r7, lr}
 801727a:	b086      	sub	sp, #24
 801727c:	af00      	add	r7, sp, #0
 801727e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8017280:	2300      	movs	r3, #0
 8017282:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	78db      	ldrb	r3, [r3, #3]
 8017288:	2b00      	cmp	r3, #0
 801728a:	d034      	beq.n	80172f6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017290:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	7858      	ldrb	r0, [r3, #1]
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801729c:	2301      	movs	r3, #1
 801729e:	697a      	ldr	r2, [r7, #20]
 80172a0:	f7ff fd7c 	bl	8016d9c <disk_write>
 80172a4:	4603      	mov	r3, r0
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d002      	beq.n	80172b0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80172aa:	2301      	movs	r3, #1
 80172ac:	73fb      	strb	r3, [r7, #15]
 80172ae:	e022      	b.n	80172f6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	2200      	movs	r2, #0
 80172b4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	6a1b      	ldr	r3, [r3, #32]
 80172ba:	697a      	ldr	r2, [r7, #20]
 80172bc:	1ad2      	subs	r2, r2, r3
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	699b      	ldr	r3, [r3, #24]
 80172c2:	429a      	cmp	r2, r3
 80172c4:	d217      	bcs.n	80172f6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	789b      	ldrb	r3, [r3, #2]
 80172ca:	613b      	str	r3, [r7, #16]
 80172cc:	e010      	b.n	80172f0 <sync_window+0x78>
					wsect += fs->fsize;
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	699b      	ldr	r3, [r3, #24]
 80172d2:	697a      	ldr	r2, [r7, #20]
 80172d4:	4413      	add	r3, r2
 80172d6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	7858      	ldrb	r0, [r3, #1]
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80172e2:	2301      	movs	r3, #1
 80172e4:	697a      	ldr	r2, [r7, #20]
 80172e6:	f7ff fd59 	bl	8016d9c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80172ea:	693b      	ldr	r3, [r7, #16]
 80172ec:	3b01      	subs	r3, #1
 80172ee:	613b      	str	r3, [r7, #16]
 80172f0:	693b      	ldr	r3, [r7, #16]
 80172f2:	2b01      	cmp	r3, #1
 80172f4:	d8eb      	bhi.n	80172ce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80172f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80172f8:	4618      	mov	r0, r3
 80172fa:	3718      	adds	r7, #24
 80172fc:	46bd      	mov	sp, r7
 80172fe:	bd80      	pop	{r7, pc}

08017300 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8017300:	b580      	push	{r7, lr}
 8017302:	b084      	sub	sp, #16
 8017304:	af00      	add	r7, sp, #0
 8017306:	6078      	str	r0, [r7, #4]
 8017308:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801730a:	2300      	movs	r3, #0
 801730c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017312:	683a      	ldr	r2, [r7, #0]
 8017314:	429a      	cmp	r2, r3
 8017316:	d01b      	beq.n	8017350 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8017318:	6878      	ldr	r0, [r7, #4]
 801731a:	f7ff ffad 	bl	8017278 <sync_window>
 801731e:	4603      	mov	r3, r0
 8017320:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8017322:	7bfb      	ldrb	r3, [r7, #15]
 8017324:	2b00      	cmp	r3, #0
 8017326:	d113      	bne.n	8017350 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	7858      	ldrb	r0, [r3, #1]
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017332:	2301      	movs	r3, #1
 8017334:	683a      	ldr	r2, [r7, #0]
 8017336:	f7ff fd11 	bl	8016d5c <disk_read>
 801733a:	4603      	mov	r3, r0
 801733c:	2b00      	cmp	r3, #0
 801733e:	d004      	beq.n	801734a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8017340:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017344:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8017346:	2301      	movs	r3, #1
 8017348:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	683a      	ldr	r2, [r7, #0]
 801734e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8017350:	7bfb      	ldrb	r3, [r7, #15]
}
 8017352:	4618      	mov	r0, r3
 8017354:	3710      	adds	r7, #16
 8017356:	46bd      	mov	sp, r7
 8017358:	bd80      	pop	{r7, pc}
	...

0801735c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801735c:	b580      	push	{r7, lr}
 801735e:	b084      	sub	sp, #16
 8017360:	af00      	add	r7, sp, #0
 8017362:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8017364:	6878      	ldr	r0, [r7, #4]
 8017366:	f7ff ff87 	bl	8017278 <sync_window>
 801736a:	4603      	mov	r3, r0
 801736c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801736e:	7bfb      	ldrb	r3, [r7, #15]
 8017370:	2b00      	cmp	r3, #0
 8017372:	d158      	bne.n	8017426 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	781b      	ldrb	r3, [r3, #0]
 8017378:	2b03      	cmp	r3, #3
 801737a:	d148      	bne.n	801740e <sync_fs+0xb2>
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	791b      	ldrb	r3, [r3, #4]
 8017380:	2b01      	cmp	r3, #1
 8017382:	d144      	bne.n	801740e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	3330      	adds	r3, #48	; 0x30
 8017388:	f44f 7200 	mov.w	r2, #512	; 0x200
 801738c:	2100      	movs	r1, #0
 801738e:	4618      	mov	r0, r3
 8017390:	f7ff fde5 	bl	8016f5e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	3330      	adds	r3, #48	; 0x30
 8017398:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801739c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80173a0:	4618      	mov	r0, r3
 80173a2:	f7ff fd74 	bl	8016e8e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	3330      	adds	r3, #48	; 0x30
 80173aa:	4921      	ldr	r1, [pc, #132]	; (8017430 <sync_fs+0xd4>)
 80173ac:	4618      	mov	r0, r3
 80173ae:	f7ff fd89 	bl	8016ec4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	3330      	adds	r3, #48	; 0x30
 80173b6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80173ba:	491e      	ldr	r1, [pc, #120]	; (8017434 <sync_fs+0xd8>)
 80173bc:	4618      	mov	r0, r3
 80173be:	f7ff fd81 	bl	8016ec4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	3330      	adds	r3, #48	; 0x30
 80173c6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	691b      	ldr	r3, [r3, #16]
 80173ce:	4619      	mov	r1, r3
 80173d0:	4610      	mov	r0, r2
 80173d2:	f7ff fd77 	bl	8016ec4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	3330      	adds	r3, #48	; 0x30
 80173da:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	68db      	ldr	r3, [r3, #12]
 80173e2:	4619      	mov	r1, r3
 80173e4:	4610      	mov	r0, r2
 80173e6:	f7ff fd6d 	bl	8016ec4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	69db      	ldr	r3, [r3, #28]
 80173ee:	1c5a      	adds	r2, r3, #1
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	7858      	ldrb	r0, [r3, #1]
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017402:	2301      	movs	r3, #1
 8017404:	f7ff fcca 	bl	8016d9c <disk_write>
			fs->fsi_flag = 0;
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	2200      	movs	r2, #0
 801740c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	785b      	ldrb	r3, [r3, #1]
 8017412:	2200      	movs	r2, #0
 8017414:	2100      	movs	r1, #0
 8017416:	4618      	mov	r0, r3
 8017418:	f7ff fce0 	bl	8016ddc <disk_ioctl>
 801741c:	4603      	mov	r3, r0
 801741e:	2b00      	cmp	r3, #0
 8017420:	d001      	beq.n	8017426 <sync_fs+0xca>
 8017422:	2301      	movs	r3, #1
 8017424:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8017426:	7bfb      	ldrb	r3, [r7, #15]
}
 8017428:	4618      	mov	r0, r3
 801742a:	3710      	adds	r7, #16
 801742c:	46bd      	mov	sp, r7
 801742e:	bd80      	pop	{r7, pc}
 8017430:	41615252 	.word	0x41615252
 8017434:	61417272 	.word	0x61417272

08017438 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8017438:	b480      	push	{r7}
 801743a:	b083      	sub	sp, #12
 801743c:	af00      	add	r7, sp, #0
 801743e:	6078      	str	r0, [r7, #4]
 8017440:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8017442:	683b      	ldr	r3, [r7, #0]
 8017444:	3b02      	subs	r3, #2
 8017446:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	695b      	ldr	r3, [r3, #20]
 801744c:	3b02      	subs	r3, #2
 801744e:	683a      	ldr	r2, [r7, #0]
 8017450:	429a      	cmp	r2, r3
 8017452:	d301      	bcc.n	8017458 <clust2sect+0x20>
 8017454:	2300      	movs	r3, #0
 8017456:	e008      	b.n	801746a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	895b      	ldrh	r3, [r3, #10]
 801745c:	461a      	mov	r2, r3
 801745e:	683b      	ldr	r3, [r7, #0]
 8017460:	fb03 f202 	mul.w	r2, r3, r2
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017468:	4413      	add	r3, r2
}
 801746a:	4618      	mov	r0, r3
 801746c:	370c      	adds	r7, #12
 801746e:	46bd      	mov	sp, r7
 8017470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017474:	4770      	bx	lr

08017476 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8017476:	b580      	push	{r7, lr}
 8017478:	b086      	sub	sp, #24
 801747a:	af00      	add	r7, sp, #0
 801747c:	6078      	str	r0, [r7, #4]
 801747e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	681b      	ldr	r3, [r3, #0]
 8017484:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8017486:	683b      	ldr	r3, [r7, #0]
 8017488:	2b01      	cmp	r3, #1
 801748a:	d904      	bls.n	8017496 <get_fat+0x20>
 801748c:	693b      	ldr	r3, [r7, #16]
 801748e:	695b      	ldr	r3, [r3, #20]
 8017490:	683a      	ldr	r2, [r7, #0]
 8017492:	429a      	cmp	r2, r3
 8017494:	d302      	bcc.n	801749c <get_fat+0x26>
		val = 1;	/* Internal error */
 8017496:	2301      	movs	r3, #1
 8017498:	617b      	str	r3, [r7, #20]
 801749a:	e08f      	b.n	80175bc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801749c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80174a0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80174a2:	693b      	ldr	r3, [r7, #16]
 80174a4:	781b      	ldrb	r3, [r3, #0]
 80174a6:	2b03      	cmp	r3, #3
 80174a8:	d062      	beq.n	8017570 <get_fat+0xfa>
 80174aa:	2b03      	cmp	r3, #3
 80174ac:	dc7c      	bgt.n	80175a8 <get_fat+0x132>
 80174ae:	2b01      	cmp	r3, #1
 80174b0:	d002      	beq.n	80174b8 <get_fat+0x42>
 80174b2:	2b02      	cmp	r3, #2
 80174b4:	d042      	beq.n	801753c <get_fat+0xc6>
 80174b6:	e077      	b.n	80175a8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80174b8:	683b      	ldr	r3, [r7, #0]
 80174ba:	60fb      	str	r3, [r7, #12]
 80174bc:	68fb      	ldr	r3, [r7, #12]
 80174be:	085b      	lsrs	r3, r3, #1
 80174c0:	68fa      	ldr	r2, [r7, #12]
 80174c2:	4413      	add	r3, r2
 80174c4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80174c6:	693b      	ldr	r3, [r7, #16]
 80174c8:	6a1a      	ldr	r2, [r3, #32]
 80174ca:	68fb      	ldr	r3, [r7, #12]
 80174cc:	0a5b      	lsrs	r3, r3, #9
 80174ce:	4413      	add	r3, r2
 80174d0:	4619      	mov	r1, r3
 80174d2:	6938      	ldr	r0, [r7, #16]
 80174d4:	f7ff ff14 	bl	8017300 <move_window>
 80174d8:	4603      	mov	r3, r0
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d167      	bne.n	80175ae <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80174de:	68fb      	ldr	r3, [r7, #12]
 80174e0:	1c5a      	adds	r2, r3, #1
 80174e2:	60fa      	str	r2, [r7, #12]
 80174e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80174e8:	693a      	ldr	r2, [r7, #16]
 80174ea:	4413      	add	r3, r2
 80174ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80174f0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80174f2:	693b      	ldr	r3, [r7, #16]
 80174f4:	6a1a      	ldr	r2, [r3, #32]
 80174f6:	68fb      	ldr	r3, [r7, #12]
 80174f8:	0a5b      	lsrs	r3, r3, #9
 80174fa:	4413      	add	r3, r2
 80174fc:	4619      	mov	r1, r3
 80174fe:	6938      	ldr	r0, [r7, #16]
 8017500:	f7ff fefe 	bl	8017300 <move_window>
 8017504:	4603      	mov	r3, r0
 8017506:	2b00      	cmp	r3, #0
 8017508:	d153      	bne.n	80175b2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 801750a:	68fb      	ldr	r3, [r7, #12]
 801750c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017510:	693a      	ldr	r2, [r7, #16]
 8017512:	4413      	add	r3, r2
 8017514:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017518:	021b      	lsls	r3, r3, #8
 801751a:	461a      	mov	r2, r3
 801751c:	68bb      	ldr	r3, [r7, #8]
 801751e:	4313      	orrs	r3, r2
 8017520:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8017522:	683b      	ldr	r3, [r7, #0]
 8017524:	f003 0301 	and.w	r3, r3, #1
 8017528:	2b00      	cmp	r3, #0
 801752a:	d002      	beq.n	8017532 <get_fat+0xbc>
 801752c:	68bb      	ldr	r3, [r7, #8]
 801752e:	091b      	lsrs	r3, r3, #4
 8017530:	e002      	b.n	8017538 <get_fat+0xc2>
 8017532:	68bb      	ldr	r3, [r7, #8]
 8017534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017538:	617b      	str	r3, [r7, #20]
			break;
 801753a:	e03f      	b.n	80175bc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801753c:	693b      	ldr	r3, [r7, #16]
 801753e:	6a1a      	ldr	r2, [r3, #32]
 8017540:	683b      	ldr	r3, [r7, #0]
 8017542:	0a1b      	lsrs	r3, r3, #8
 8017544:	4413      	add	r3, r2
 8017546:	4619      	mov	r1, r3
 8017548:	6938      	ldr	r0, [r7, #16]
 801754a:	f7ff fed9 	bl	8017300 <move_window>
 801754e:	4603      	mov	r3, r0
 8017550:	2b00      	cmp	r3, #0
 8017552:	d130      	bne.n	80175b6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8017554:	693b      	ldr	r3, [r7, #16]
 8017556:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801755a:	683b      	ldr	r3, [r7, #0]
 801755c:	005b      	lsls	r3, r3, #1
 801755e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8017562:	4413      	add	r3, r2
 8017564:	4618      	mov	r0, r3
 8017566:	f7ff fc57 	bl	8016e18 <ld_word>
 801756a:	4603      	mov	r3, r0
 801756c:	617b      	str	r3, [r7, #20]
			break;
 801756e:	e025      	b.n	80175bc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017570:	693b      	ldr	r3, [r7, #16]
 8017572:	6a1a      	ldr	r2, [r3, #32]
 8017574:	683b      	ldr	r3, [r7, #0]
 8017576:	09db      	lsrs	r3, r3, #7
 8017578:	4413      	add	r3, r2
 801757a:	4619      	mov	r1, r3
 801757c:	6938      	ldr	r0, [r7, #16]
 801757e:	f7ff febf 	bl	8017300 <move_window>
 8017582:	4603      	mov	r3, r0
 8017584:	2b00      	cmp	r3, #0
 8017586:	d118      	bne.n	80175ba <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8017588:	693b      	ldr	r3, [r7, #16]
 801758a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801758e:	683b      	ldr	r3, [r7, #0]
 8017590:	009b      	lsls	r3, r3, #2
 8017592:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8017596:	4413      	add	r3, r2
 8017598:	4618      	mov	r0, r3
 801759a:	f7ff fc55 	bl	8016e48 <ld_dword>
 801759e:	4603      	mov	r3, r0
 80175a0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80175a4:	617b      	str	r3, [r7, #20]
			break;
 80175a6:	e009      	b.n	80175bc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80175a8:	2301      	movs	r3, #1
 80175aa:	617b      	str	r3, [r7, #20]
 80175ac:	e006      	b.n	80175bc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80175ae:	bf00      	nop
 80175b0:	e004      	b.n	80175bc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80175b2:	bf00      	nop
 80175b4:	e002      	b.n	80175bc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80175b6:	bf00      	nop
 80175b8:	e000      	b.n	80175bc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80175ba:	bf00      	nop
		}
	}

	return val;
 80175bc:	697b      	ldr	r3, [r7, #20]
}
 80175be:	4618      	mov	r0, r3
 80175c0:	3718      	adds	r7, #24
 80175c2:	46bd      	mov	sp, r7
 80175c4:	bd80      	pop	{r7, pc}

080175c6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80175c6:	b590      	push	{r4, r7, lr}
 80175c8:	b089      	sub	sp, #36	; 0x24
 80175ca:	af00      	add	r7, sp, #0
 80175cc:	60f8      	str	r0, [r7, #12]
 80175ce:	60b9      	str	r1, [r7, #8]
 80175d0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80175d2:	2302      	movs	r3, #2
 80175d4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80175d6:	68bb      	ldr	r3, [r7, #8]
 80175d8:	2b01      	cmp	r3, #1
 80175da:	f240 80d2 	bls.w	8017782 <put_fat+0x1bc>
 80175de:	68fb      	ldr	r3, [r7, #12]
 80175e0:	695b      	ldr	r3, [r3, #20]
 80175e2:	68ba      	ldr	r2, [r7, #8]
 80175e4:	429a      	cmp	r2, r3
 80175e6:	f080 80cc 	bcs.w	8017782 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80175ea:	68fb      	ldr	r3, [r7, #12]
 80175ec:	781b      	ldrb	r3, [r3, #0]
 80175ee:	2b03      	cmp	r3, #3
 80175f0:	f000 8096 	beq.w	8017720 <put_fat+0x15a>
 80175f4:	2b03      	cmp	r3, #3
 80175f6:	f300 80cd 	bgt.w	8017794 <put_fat+0x1ce>
 80175fa:	2b01      	cmp	r3, #1
 80175fc:	d002      	beq.n	8017604 <put_fat+0x3e>
 80175fe:	2b02      	cmp	r3, #2
 8017600:	d06e      	beq.n	80176e0 <put_fat+0x11a>
 8017602:	e0c7      	b.n	8017794 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8017604:	68bb      	ldr	r3, [r7, #8]
 8017606:	61bb      	str	r3, [r7, #24]
 8017608:	69bb      	ldr	r3, [r7, #24]
 801760a:	085b      	lsrs	r3, r3, #1
 801760c:	69ba      	ldr	r2, [r7, #24]
 801760e:	4413      	add	r3, r2
 8017610:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017612:	68fb      	ldr	r3, [r7, #12]
 8017614:	6a1a      	ldr	r2, [r3, #32]
 8017616:	69bb      	ldr	r3, [r7, #24]
 8017618:	0a5b      	lsrs	r3, r3, #9
 801761a:	4413      	add	r3, r2
 801761c:	4619      	mov	r1, r3
 801761e:	68f8      	ldr	r0, [r7, #12]
 8017620:	f7ff fe6e 	bl	8017300 <move_window>
 8017624:	4603      	mov	r3, r0
 8017626:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017628:	7ffb      	ldrb	r3, [r7, #31]
 801762a:	2b00      	cmp	r3, #0
 801762c:	f040 80ab 	bne.w	8017786 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8017630:	68fb      	ldr	r3, [r7, #12]
 8017632:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017636:	69bb      	ldr	r3, [r7, #24]
 8017638:	1c59      	adds	r1, r3, #1
 801763a:	61b9      	str	r1, [r7, #24]
 801763c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017640:	4413      	add	r3, r2
 8017642:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8017644:	68bb      	ldr	r3, [r7, #8]
 8017646:	f003 0301 	and.w	r3, r3, #1
 801764a:	2b00      	cmp	r3, #0
 801764c:	d00d      	beq.n	801766a <put_fat+0xa4>
 801764e:	697b      	ldr	r3, [r7, #20]
 8017650:	781b      	ldrb	r3, [r3, #0]
 8017652:	b25b      	sxtb	r3, r3
 8017654:	f003 030f 	and.w	r3, r3, #15
 8017658:	b25a      	sxtb	r2, r3
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	b2db      	uxtb	r3, r3
 801765e:	011b      	lsls	r3, r3, #4
 8017660:	b25b      	sxtb	r3, r3
 8017662:	4313      	orrs	r3, r2
 8017664:	b25b      	sxtb	r3, r3
 8017666:	b2db      	uxtb	r3, r3
 8017668:	e001      	b.n	801766e <put_fat+0xa8>
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	b2db      	uxtb	r3, r3
 801766e:	697a      	ldr	r2, [r7, #20]
 8017670:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8017672:	68fb      	ldr	r3, [r7, #12]
 8017674:	2201      	movs	r2, #1
 8017676:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	6a1a      	ldr	r2, [r3, #32]
 801767c:	69bb      	ldr	r3, [r7, #24]
 801767e:	0a5b      	lsrs	r3, r3, #9
 8017680:	4413      	add	r3, r2
 8017682:	4619      	mov	r1, r3
 8017684:	68f8      	ldr	r0, [r7, #12]
 8017686:	f7ff fe3b 	bl	8017300 <move_window>
 801768a:	4603      	mov	r3, r0
 801768c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801768e:	7ffb      	ldrb	r3, [r7, #31]
 8017690:	2b00      	cmp	r3, #0
 8017692:	d17a      	bne.n	801778a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801769a:	69bb      	ldr	r3, [r7, #24]
 801769c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80176a0:	4413      	add	r3, r2
 80176a2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80176a4:	68bb      	ldr	r3, [r7, #8]
 80176a6:	f003 0301 	and.w	r3, r3, #1
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d003      	beq.n	80176b6 <put_fat+0xf0>
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	091b      	lsrs	r3, r3, #4
 80176b2:	b2db      	uxtb	r3, r3
 80176b4:	e00e      	b.n	80176d4 <put_fat+0x10e>
 80176b6:	697b      	ldr	r3, [r7, #20]
 80176b8:	781b      	ldrb	r3, [r3, #0]
 80176ba:	b25b      	sxtb	r3, r3
 80176bc:	f023 030f 	bic.w	r3, r3, #15
 80176c0:	b25a      	sxtb	r2, r3
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	0a1b      	lsrs	r3, r3, #8
 80176c6:	b25b      	sxtb	r3, r3
 80176c8:	f003 030f 	and.w	r3, r3, #15
 80176cc:	b25b      	sxtb	r3, r3
 80176ce:	4313      	orrs	r3, r2
 80176d0:	b25b      	sxtb	r3, r3
 80176d2:	b2db      	uxtb	r3, r3
 80176d4:	697a      	ldr	r2, [r7, #20]
 80176d6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80176d8:	68fb      	ldr	r3, [r7, #12]
 80176da:	2201      	movs	r2, #1
 80176dc:	70da      	strb	r2, [r3, #3]
			break;
 80176de:	e059      	b.n	8017794 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80176e0:	68fb      	ldr	r3, [r7, #12]
 80176e2:	6a1a      	ldr	r2, [r3, #32]
 80176e4:	68bb      	ldr	r3, [r7, #8]
 80176e6:	0a1b      	lsrs	r3, r3, #8
 80176e8:	4413      	add	r3, r2
 80176ea:	4619      	mov	r1, r3
 80176ec:	68f8      	ldr	r0, [r7, #12]
 80176ee:	f7ff fe07 	bl	8017300 <move_window>
 80176f2:	4603      	mov	r3, r0
 80176f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80176f6:	7ffb      	ldrb	r3, [r7, #31]
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d148      	bne.n	801778e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80176fc:	68fb      	ldr	r3, [r7, #12]
 80176fe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017702:	68bb      	ldr	r3, [r7, #8]
 8017704:	005b      	lsls	r3, r3, #1
 8017706:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801770a:	4413      	add	r3, r2
 801770c:	687a      	ldr	r2, [r7, #4]
 801770e:	b292      	uxth	r2, r2
 8017710:	4611      	mov	r1, r2
 8017712:	4618      	mov	r0, r3
 8017714:	f7ff fbbb 	bl	8016e8e <st_word>
			fs->wflag = 1;
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	2201      	movs	r2, #1
 801771c:	70da      	strb	r2, [r3, #3]
			break;
 801771e:	e039      	b.n	8017794 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8017720:	68fb      	ldr	r3, [r7, #12]
 8017722:	6a1a      	ldr	r2, [r3, #32]
 8017724:	68bb      	ldr	r3, [r7, #8]
 8017726:	09db      	lsrs	r3, r3, #7
 8017728:	4413      	add	r3, r2
 801772a:	4619      	mov	r1, r3
 801772c:	68f8      	ldr	r0, [r7, #12]
 801772e:	f7ff fde7 	bl	8017300 <move_window>
 8017732:	4603      	mov	r3, r0
 8017734:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017736:	7ffb      	ldrb	r3, [r7, #31]
 8017738:	2b00      	cmp	r3, #0
 801773a:	d12a      	bne.n	8017792 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017748:	68bb      	ldr	r3, [r7, #8]
 801774a:	009b      	lsls	r3, r3, #2
 801774c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8017750:	4413      	add	r3, r2
 8017752:	4618      	mov	r0, r3
 8017754:	f7ff fb78 	bl	8016e48 <ld_dword>
 8017758:	4603      	mov	r3, r0
 801775a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801775e:	4323      	orrs	r3, r4
 8017760:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8017762:	68fb      	ldr	r3, [r7, #12]
 8017764:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017768:	68bb      	ldr	r3, [r7, #8]
 801776a:	009b      	lsls	r3, r3, #2
 801776c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8017770:	4413      	add	r3, r2
 8017772:	6879      	ldr	r1, [r7, #4]
 8017774:	4618      	mov	r0, r3
 8017776:	f7ff fba5 	bl	8016ec4 <st_dword>
			fs->wflag = 1;
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	2201      	movs	r2, #1
 801777e:	70da      	strb	r2, [r3, #3]
			break;
 8017780:	e008      	b.n	8017794 <put_fat+0x1ce>
		}
	}
 8017782:	bf00      	nop
 8017784:	e006      	b.n	8017794 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8017786:	bf00      	nop
 8017788:	e004      	b.n	8017794 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801778a:	bf00      	nop
 801778c:	e002      	b.n	8017794 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801778e:	bf00      	nop
 8017790:	e000      	b.n	8017794 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8017792:	bf00      	nop
	return res;
 8017794:	7ffb      	ldrb	r3, [r7, #31]
}
 8017796:	4618      	mov	r0, r3
 8017798:	3724      	adds	r7, #36	; 0x24
 801779a:	46bd      	mov	sp, r7
 801779c:	bd90      	pop	{r4, r7, pc}

0801779e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801779e:	b580      	push	{r7, lr}
 80177a0:	b088      	sub	sp, #32
 80177a2:	af00      	add	r7, sp, #0
 80177a4:	60f8      	str	r0, [r7, #12]
 80177a6:	60b9      	str	r1, [r7, #8]
 80177a8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80177aa:	2300      	movs	r3, #0
 80177ac:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	681b      	ldr	r3, [r3, #0]
 80177b2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80177b4:	68bb      	ldr	r3, [r7, #8]
 80177b6:	2b01      	cmp	r3, #1
 80177b8:	d904      	bls.n	80177c4 <remove_chain+0x26>
 80177ba:	69bb      	ldr	r3, [r7, #24]
 80177bc:	695b      	ldr	r3, [r3, #20]
 80177be:	68ba      	ldr	r2, [r7, #8]
 80177c0:	429a      	cmp	r2, r3
 80177c2:	d301      	bcc.n	80177c8 <remove_chain+0x2a>
 80177c4:	2302      	movs	r3, #2
 80177c6:	e04b      	b.n	8017860 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	d00c      	beq.n	80177e8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80177ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80177d2:	6879      	ldr	r1, [r7, #4]
 80177d4:	69b8      	ldr	r0, [r7, #24]
 80177d6:	f7ff fef6 	bl	80175c6 <put_fat>
 80177da:	4603      	mov	r3, r0
 80177dc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80177de:	7ffb      	ldrb	r3, [r7, #31]
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d001      	beq.n	80177e8 <remove_chain+0x4a>
 80177e4:	7ffb      	ldrb	r3, [r7, #31]
 80177e6:	e03b      	b.n	8017860 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80177e8:	68b9      	ldr	r1, [r7, #8]
 80177ea:	68f8      	ldr	r0, [r7, #12]
 80177ec:	f7ff fe43 	bl	8017476 <get_fat>
 80177f0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80177f2:	697b      	ldr	r3, [r7, #20]
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	d031      	beq.n	801785c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80177f8:	697b      	ldr	r3, [r7, #20]
 80177fa:	2b01      	cmp	r3, #1
 80177fc:	d101      	bne.n	8017802 <remove_chain+0x64>
 80177fe:	2302      	movs	r3, #2
 8017800:	e02e      	b.n	8017860 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8017802:	697b      	ldr	r3, [r7, #20]
 8017804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017808:	d101      	bne.n	801780e <remove_chain+0x70>
 801780a:	2301      	movs	r3, #1
 801780c:	e028      	b.n	8017860 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801780e:	2200      	movs	r2, #0
 8017810:	68b9      	ldr	r1, [r7, #8]
 8017812:	69b8      	ldr	r0, [r7, #24]
 8017814:	f7ff fed7 	bl	80175c6 <put_fat>
 8017818:	4603      	mov	r3, r0
 801781a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801781c:	7ffb      	ldrb	r3, [r7, #31]
 801781e:	2b00      	cmp	r3, #0
 8017820:	d001      	beq.n	8017826 <remove_chain+0x88>
 8017822:	7ffb      	ldrb	r3, [r7, #31]
 8017824:	e01c      	b.n	8017860 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8017826:	69bb      	ldr	r3, [r7, #24]
 8017828:	691a      	ldr	r2, [r3, #16]
 801782a:	69bb      	ldr	r3, [r7, #24]
 801782c:	695b      	ldr	r3, [r3, #20]
 801782e:	3b02      	subs	r3, #2
 8017830:	429a      	cmp	r2, r3
 8017832:	d20b      	bcs.n	801784c <remove_chain+0xae>
			fs->free_clst++;
 8017834:	69bb      	ldr	r3, [r7, #24]
 8017836:	691b      	ldr	r3, [r3, #16]
 8017838:	1c5a      	adds	r2, r3, #1
 801783a:	69bb      	ldr	r3, [r7, #24]
 801783c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 801783e:	69bb      	ldr	r3, [r7, #24]
 8017840:	791b      	ldrb	r3, [r3, #4]
 8017842:	f043 0301 	orr.w	r3, r3, #1
 8017846:	b2da      	uxtb	r2, r3
 8017848:	69bb      	ldr	r3, [r7, #24]
 801784a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801784c:	697b      	ldr	r3, [r7, #20]
 801784e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8017850:	69bb      	ldr	r3, [r7, #24]
 8017852:	695b      	ldr	r3, [r3, #20]
 8017854:	68ba      	ldr	r2, [r7, #8]
 8017856:	429a      	cmp	r2, r3
 8017858:	d3c6      	bcc.n	80177e8 <remove_chain+0x4a>
 801785a:	e000      	b.n	801785e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801785c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801785e:	2300      	movs	r3, #0
}
 8017860:	4618      	mov	r0, r3
 8017862:	3720      	adds	r7, #32
 8017864:	46bd      	mov	sp, r7
 8017866:	bd80      	pop	{r7, pc}

08017868 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8017868:	b580      	push	{r7, lr}
 801786a:	b088      	sub	sp, #32
 801786c:	af00      	add	r7, sp, #0
 801786e:	6078      	str	r0, [r7, #4]
 8017870:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	681b      	ldr	r3, [r3, #0]
 8017876:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8017878:	683b      	ldr	r3, [r7, #0]
 801787a:	2b00      	cmp	r3, #0
 801787c:	d10d      	bne.n	801789a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801787e:	693b      	ldr	r3, [r7, #16]
 8017880:	68db      	ldr	r3, [r3, #12]
 8017882:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8017884:	69bb      	ldr	r3, [r7, #24]
 8017886:	2b00      	cmp	r3, #0
 8017888:	d004      	beq.n	8017894 <create_chain+0x2c>
 801788a:	693b      	ldr	r3, [r7, #16]
 801788c:	695b      	ldr	r3, [r3, #20]
 801788e:	69ba      	ldr	r2, [r7, #24]
 8017890:	429a      	cmp	r2, r3
 8017892:	d31b      	bcc.n	80178cc <create_chain+0x64>
 8017894:	2301      	movs	r3, #1
 8017896:	61bb      	str	r3, [r7, #24]
 8017898:	e018      	b.n	80178cc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801789a:	6839      	ldr	r1, [r7, #0]
 801789c:	6878      	ldr	r0, [r7, #4]
 801789e:	f7ff fdea 	bl	8017476 <get_fat>
 80178a2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	2b01      	cmp	r3, #1
 80178a8:	d801      	bhi.n	80178ae <create_chain+0x46>
 80178aa:	2301      	movs	r3, #1
 80178ac:	e070      	b.n	8017990 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80178ae:	68fb      	ldr	r3, [r7, #12]
 80178b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80178b4:	d101      	bne.n	80178ba <create_chain+0x52>
 80178b6:	68fb      	ldr	r3, [r7, #12]
 80178b8:	e06a      	b.n	8017990 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80178ba:	693b      	ldr	r3, [r7, #16]
 80178bc:	695b      	ldr	r3, [r3, #20]
 80178be:	68fa      	ldr	r2, [r7, #12]
 80178c0:	429a      	cmp	r2, r3
 80178c2:	d201      	bcs.n	80178c8 <create_chain+0x60>
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	e063      	b.n	8017990 <create_chain+0x128>
		scl = clst;
 80178c8:	683b      	ldr	r3, [r7, #0]
 80178ca:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80178cc:	69bb      	ldr	r3, [r7, #24]
 80178ce:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80178d0:	69fb      	ldr	r3, [r7, #28]
 80178d2:	3301      	adds	r3, #1
 80178d4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80178d6:	693b      	ldr	r3, [r7, #16]
 80178d8:	695b      	ldr	r3, [r3, #20]
 80178da:	69fa      	ldr	r2, [r7, #28]
 80178dc:	429a      	cmp	r2, r3
 80178de:	d307      	bcc.n	80178f0 <create_chain+0x88>
				ncl = 2;
 80178e0:	2302      	movs	r3, #2
 80178e2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80178e4:	69fa      	ldr	r2, [r7, #28]
 80178e6:	69bb      	ldr	r3, [r7, #24]
 80178e8:	429a      	cmp	r2, r3
 80178ea:	d901      	bls.n	80178f0 <create_chain+0x88>
 80178ec:	2300      	movs	r3, #0
 80178ee:	e04f      	b.n	8017990 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80178f0:	69f9      	ldr	r1, [r7, #28]
 80178f2:	6878      	ldr	r0, [r7, #4]
 80178f4:	f7ff fdbf 	bl	8017476 <get_fat>
 80178f8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80178fa:	68fb      	ldr	r3, [r7, #12]
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d00e      	beq.n	801791e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8017900:	68fb      	ldr	r3, [r7, #12]
 8017902:	2b01      	cmp	r3, #1
 8017904:	d003      	beq.n	801790e <create_chain+0xa6>
 8017906:	68fb      	ldr	r3, [r7, #12]
 8017908:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801790c:	d101      	bne.n	8017912 <create_chain+0xaa>
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	e03e      	b.n	8017990 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8017912:	69fa      	ldr	r2, [r7, #28]
 8017914:	69bb      	ldr	r3, [r7, #24]
 8017916:	429a      	cmp	r2, r3
 8017918:	d1da      	bne.n	80178d0 <create_chain+0x68>
 801791a:	2300      	movs	r3, #0
 801791c:	e038      	b.n	8017990 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801791e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8017920:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017924:	69f9      	ldr	r1, [r7, #28]
 8017926:	6938      	ldr	r0, [r7, #16]
 8017928:	f7ff fe4d 	bl	80175c6 <put_fat>
 801792c:	4603      	mov	r3, r0
 801792e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8017930:	7dfb      	ldrb	r3, [r7, #23]
 8017932:	2b00      	cmp	r3, #0
 8017934:	d109      	bne.n	801794a <create_chain+0xe2>
 8017936:	683b      	ldr	r3, [r7, #0]
 8017938:	2b00      	cmp	r3, #0
 801793a:	d006      	beq.n	801794a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801793c:	69fa      	ldr	r2, [r7, #28]
 801793e:	6839      	ldr	r1, [r7, #0]
 8017940:	6938      	ldr	r0, [r7, #16]
 8017942:	f7ff fe40 	bl	80175c6 <put_fat>
 8017946:	4603      	mov	r3, r0
 8017948:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801794a:	7dfb      	ldrb	r3, [r7, #23]
 801794c:	2b00      	cmp	r3, #0
 801794e:	d116      	bne.n	801797e <create_chain+0x116>
		fs->last_clst = ncl;
 8017950:	693b      	ldr	r3, [r7, #16]
 8017952:	69fa      	ldr	r2, [r7, #28]
 8017954:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8017956:	693b      	ldr	r3, [r7, #16]
 8017958:	691a      	ldr	r2, [r3, #16]
 801795a:	693b      	ldr	r3, [r7, #16]
 801795c:	695b      	ldr	r3, [r3, #20]
 801795e:	3b02      	subs	r3, #2
 8017960:	429a      	cmp	r2, r3
 8017962:	d804      	bhi.n	801796e <create_chain+0x106>
 8017964:	693b      	ldr	r3, [r7, #16]
 8017966:	691b      	ldr	r3, [r3, #16]
 8017968:	1e5a      	subs	r2, r3, #1
 801796a:	693b      	ldr	r3, [r7, #16]
 801796c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 801796e:	693b      	ldr	r3, [r7, #16]
 8017970:	791b      	ldrb	r3, [r3, #4]
 8017972:	f043 0301 	orr.w	r3, r3, #1
 8017976:	b2da      	uxtb	r2, r3
 8017978:	693b      	ldr	r3, [r7, #16]
 801797a:	711a      	strb	r2, [r3, #4]
 801797c:	e007      	b.n	801798e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801797e:	7dfb      	ldrb	r3, [r7, #23]
 8017980:	2b01      	cmp	r3, #1
 8017982:	d102      	bne.n	801798a <create_chain+0x122>
 8017984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017988:	e000      	b.n	801798c <create_chain+0x124>
 801798a:	2301      	movs	r3, #1
 801798c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801798e:	69fb      	ldr	r3, [r7, #28]
}
 8017990:	4618      	mov	r0, r3
 8017992:	3720      	adds	r7, #32
 8017994:	46bd      	mov	sp, r7
 8017996:	bd80      	pop	{r7, pc}

08017998 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8017998:	b480      	push	{r7}
 801799a:	b087      	sub	sp, #28
 801799c:	af00      	add	r7, sp, #0
 801799e:	6078      	str	r0, [r7, #4]
 80179a0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	681b      	ldr	r3, [r3, #0]
 80179a6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179ac:	3304      	adds	r3, #4
 80179ae:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80179b0:	683b      	ldr	r3, [r7, #0]
 80179b2:	0a5b      	lsrs	r3, r3, #9
 80179b4:	68fa      	ldr	r2, [r7, #12]
 80179b6:	8952      	ldrh	r2, [r2, #10]
 80179b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80179bc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80179be:	693b      	ldr	r3, [r7, #16]
 80179c0:	1d1a      	adds	r2, r3, #4
 80179c2:	613a      	str	r2, [r7, #16]
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80179c8:	68bb      	ldr	r3, [r7, #8]
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d101      	bne.n	80179d2 <clmt_clust+0x3a>
 80179ce:	2300      	movs	r3, #0
 80179d0:	e010      	b.n	80179f4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80179d2:	697a      	ldr	r2, [r7, #20]
 80179d4:	68bb      	ldr	r3, [r7, #8]
 80179d6:	429a      	cmp	r2, r3
 80179d8:	d307      	bcc.n	80179ea <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80179da:	697a      	ldr	r2, [r7, #20]
 80179dc:	68bb      	ldr	r3, [r7, #8]
 80179de:	1ad3      	subs	r3, r2, r3
 80179e0:	617b      	str	r3, [r7, #20]
 80179e2:	693b      	ldr	r3, [r7, #16]
 80179e4:	3304      	adds	r3, #4
 80179e6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80179e8:	e7e9      	b.n	80179be <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80179ea:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80179ec:	693b      	ldr	r3, [r7, #16]
 80179ee:	681a      	ldr	r2, [r3, #0]
 80179f0:	697b      	ldr	r3, [r7, #20]
 80179f2:	4413      	add	r3, r2
}
 80179f4:	4618      	mov	r0, r3
 80179f6:	371c      	adds	r7, #28
 80179f8:	46bd      	mov	sp, r7
 80179fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179fe:	4770      	bx	lr

08017a00 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8017a00:	b580      	push	{r7, lr}
 8017a02:	b086      	sub	sp, #24
 8017a04:	af00      	add	r7, sp, #0
 8017a06:	6078      	str	r0, [r7, #4]
 8017a08:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	681b      	ldr	r3, [r3, #0]
 8017a0e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8017a10:	683b      	ldr	r3, [r7, #0]
 8017a12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8017a16:	d204      	bcs.n	8017a22 <dir_sdi+0x22>
 8017a18:	683b      	ldr	r3, [r7, #0]
 8017a1a:	f003 031f 	and.w	r3, r3, #31
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d001      	beq.n	8017a26 <dir_sdi+0x26>
		return FR_INT_ERR;
 8017a22:	2302      	movs	r3, #2
 8017a24:	e063      	b.n	8017aee <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	683a      	ldr	r2, [r7, #0]
 8017a2a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	689b      	ldr	r3, [r3, #8]
 8017a30:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8017a32:	697b      	ldr	r3, [r7, #20]
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d106      	bne.n	8017a46 <dir_sdi+0x46>
 8017a38:	693b      	ldr	r3, [r7, #16]
 8017a3a:	781b      	ldrb	r3, [r3, #0]
 8017a3c:	2b02      	cmp	r3, #2
 8017a3e:	d902      	bls.n	8017a46 <dir_sdi+0x46>
		clst = fs->dirbase;
 8017a40:	693b      	ldr	r3, [r7, #16]
 8017a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a44:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8017a46:	697b      	ldr	r3, [r7, #20]
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d10c      	bne.n	8017a66 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8017a4c:	683b      	ldr	r3, [r7, #0]
 8017a4e:	095b      	lsrs	r3, r3, #5
 8017a50:	693a      	ldr	r2, [r7, #16]
 8017a52:	8912      	ldrh	r2, [r2, #8]
 8017a54:	4293      	cmp	r3, r2
 8017a56:	d301      	bcc.n	8017a5c <dir_sdi+0x5c>
 8017a58:	2302      	movs	r3, #2
 8017a5a:	e048      	b.n	8017aee <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8017a5c:	693b      	ldr	r3, [r7, #16]
 8017a5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	61da      	str	r2, [r3, #28]
 8017a64:	e029      	b.n	8017aba <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8017a66:	693b      	ldr	r3, [r7, #16]
 8017a68:	895b      	ldrh	r3, [r3, #10]
 8017a6a:	025b      	lsls	r3, r3, #9
 8017a6c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8017a6e:	e019      	b.n	8017aa4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	6979      	ldr	r1, [r7, #20]
 8017a74:	4618      	mov	r0, r3
 8017a76:	f7ff fcfe 	bl	8017476 <get_fat>
 8017a7a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017a7c:	697b      	ldr	r3, [r7, #20]
 8017a7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017a82:	d101      	bne.n	8017a88 <dir_sdi+0x88>
 8017a84:	2301      	movs	r3, #1
 8017a86:	e032      	b.n	8017aee <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8017a88:	697b      	ldr	r3, [r7, #20]
 8017a8a:	2b01      	cmp	r3, #1
 8017a8c:	d904      	bls.n	8017a98 <dir_sdi+0x98>
 8017a8e:	693b      	ldr	r3, [r7, #16]
 8017a90:	695b      	ldr	r3, [r3, #20]
 8017a92:	697a      	ldr	r2, [r7, #20]
 8017a94:	429a      	cmp	r2, r3
 8017a96:	d301      	bcc.n	8017a9c <dir_sdi+0x9c>
 8017a98:	2302      	movs	r3, #2
 8017a9a:	e028      	b.n	8017aee <dir_sdi+0xee>
			ofs -= csz;
 8017a9c:	683a      	ldr	r2, [r7, #0]
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	1ad3      	subs	r3, r2, r3
 8017aa2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8017aa4:	683a      	ldr	r2, [r7, #0]
 8017aa6:	68fb      	ldr	r3, [r7, #12]
 8017aa8:	429a      	cmp	r2, r3
 8017aaa:	d2e1      	bcs.n	8017a70 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8017aac:	6979      	ldr	r1, [r7, #20]
 8017aae:	6938      	ldr	r0, [r7, #16]
 8017ab0:	f7ff fcc2 	bl	8017438 <clust2sect>
 8017ab4:	4602      	mov	r2, r0
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	697a      	ldr	r2, [r7, #20]
 8017abe:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	69db      	ldr	r3, [r3, #28]
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d101      	bne.n	8017acc <dir_sdi+0xcc>
 8017ac8:	2302      	movs	r3, #2
 8017aca:	e010      	b.n	8017aee <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	69da      	ldr	r2, [r3, #28]
 8017ad0:	683b      	ldr	r3, [r7, #0]
 8017ad2:	0a5b      	lsrs	r3, r3, #9
 8017ad4:	441a      	add	r2, r3
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8017ada:	693b      	ldr	r3, [r7, #16]
 8017adc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017ae0:	683b      	ldr	r3, [r7, #0]
 8017ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017ae6:	441a      	add	r2, r3
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017aec:	2300      	movs	r3, #0
}
 8017aee:	4618      	mov	r0, r3
 8017af0:	3718      	adds	r7, #24
 8017af2:	46bd      	mov	sp, r7
 8017af4:	bd80      	pop	{r7, pc}

08017af6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8017af6:	b580      	push	{r7, lr}
 8017af8:	b086      	sub	sp, #24
 8017afa:	af00      	add	r7, sp, #0
 8017afc:	6078      	str	r0, [r7, #4]
 8017afe:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	695b      	ldr	r3, [r3, #20]
 8017b0a:	3320      	adds	r3, #32
 8017b0c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	69db      	ldr	r3, [r3, #28]
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d003      	beq.n	8017b1e <dir_next+0x28>
 8017b16:	68bb      	ldr	r3, [r7, #8]
 8017b18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8017b1c:	d301      	bcc.n	8017b22 <dir_next+0x2c>
 8017b1e:	2304      	movs	r3, #4
 8017b20:	e0aa      	b.n	8017c78 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8017b22:	68bb      	ldr	r3, [r7, #8]
 8017b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	f040 8098 	bne.w	8017c5e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	69db      	ldr	r3, [r3, #28]
 8017b32:	1c5a      	adds	r2, r3, #1
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	699b      	ldr	r3, [r3, #24]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d10b      	bne.n	8017b58 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8017b40:	68bb      	ldr	r3, [r7, #8]
 8017b42:	095b      	lsrs	r3, r3, #5
 8017b44:	68fa      	ldr	r2, [r7, #12]
 8017b46:	8912      	ldrh	r2, [r2, #8]
 8017b48:	4293      	cmp	r3, r2
 8017b4a:	f0c0 8088 	bcc.w	8017c5e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	2200      	movs	r2, #0
 8017b52:	61da      	str	r2, [r3, #28]
 8017b54:	2304      	movs	r3, #4
 8017b56:	e08f      	b.n	8017c78 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8017b58:	68bb      	ldr	r3, [r7, #8]
 8017b5a:	0a5b      	lsrs	r3, r3, #9
 8017b5c:	68fa      	ldr	r2, [r7, #12]
 8017b5e:	8952      	ldrh	r2, [r2, #10]
 8017b60:	3a01      	subs	r2, #1
 8017b62:	4013      	ands	r3, r2
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d17a      	bne.n	8017c5e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8017b68:	687a      	ldr	r2, [r7, #4]
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	699b      	ldr	r3, [r3, #24]
 8017b6e:	4619      	mov	r1, r3
 8017b70:	4610      	mov	r0, r2
 8017b72:	f7ff fc80 	bl	8017476 <get_fat>
 8017b76:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8017b78:	697b      	ldr	r3, [r7, #20]
 8017b7a:	2b01      	cmp	r3, #1
 8017b7c:	d801      	bhi.n	8017b82 <dir_next+0x8c>
 8017b7e:	2302      	movs	r3, #2
 8017b80:	e07a      	b.n	8017c78 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8017b82:	697b      	ldr	r3, [r7, #20]
 8017b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017b88:	d101      	bne.n	8017b8e <dir_next+0x98>
 8017b8a:	2301      	movs	r3, #1
 8017b8c:	e074      	b.n	8017c78 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8017b8e:	68fb      	ldr	r3, [r7, #12]
 8017b90:	695b      	ldr	r3, [r3, #20]
 8017b92:	697a      	ldr	r2, [r7, #20]
 8017b94:	429a      	cmp	r2, r3
 8017b96:	d358      	bcc.n	8017c4a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8017b98:	683b      	ldr	r3, [r7, #0]
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d104      	bne.n	8017ba8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	2200      	movs	r2, #0
 8017ba2:	61da      	str	r2, [r3, #28]
 8017ba4:	2304      	movs	r3, #4
 8017ba6:	e067      	b.n	8017c78 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8017ba8:	687a      	ldr	r2, [r7, #4]
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	699b      	ldr	r3, [r3, #24]
 8017bae:	4619      	mov	r1, r3
 8017bb0:	4610      	mov	r0, r2
 8017bb2:	f7ff fe59 	bl	8017868 <create_chain>
 8017bb6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8017bb8:	697b      	ldr	r3, [r7, #20]
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d101      	bne.n	8017bc2 <dir_next+0xcc>
 8017bbe:	2307      	movs	r3, #7
 8017bc0:	e05a      	b.n	8017c78 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8017bc2:	697b      	ldr	r3, [r7, #20]
 8017bc4:	2b01      	cmp	r3, #1
 8017bc6:	d101      	bne.n	8017bcc <dir_next+0xd6>
 8017bc8:	2302      	movs	r3, #2
 8017bca:	e055      	b.n	8017c78 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017bcc:	697b      	ldr	r3, [r7, #20]
 8017bce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017bd2:	d101      	bne.n	8017bd8 <dir_next+0xe2>
 8017bd4:	2301      	movs	r3, #1
 8017bd6:	e04f      	b.n	8017c78 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8017bd8:	68f8      	ldr	r0, [r7, #12]
 8017bda:	f7ff fb4d 	bl	8017278 <sync_window>
 8017bde:	4603      	mov	r3, r0
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d001      	beq.n	8017be8 <dir_next+0xf2>
 8017be4:	2301      	movs	r3, #1
 8017be6:	e047      	b.n	8017c78 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8017be8:	68fb      	ldr	r3, [r7, #12]
 8017bea:	3330      	adds	r3, #48	; 0x30
 8017bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017bf0:	2100      	movs	r1, #0
 8017bf2:	4618      	mov	r0, r3
 8017bf4:	f7ff f9b3 	bl	8016f5e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8017bf8:	2300      	movs	r3, #0
 8017bfa:	613b      	str	r3, [r7, #16]
 8017bfc:	6979      	ldr	r1, [r7, #20]
 8017bfe:	68f8      	ldr	r0, [r7, #12]
 8017c00:	f7ff fc1a 	bl	8017438 <clust2sect>
 8017c04:	4602      	mov	r2, r0
 8017c06:	68fb      	ldr	r3, [r7, #12]
 8017c08:	62da      	str	r2, [r3, #44]	; 0x2c
 8017c0a:	e012      	b.n	8017c32 <dir_next+0x13c>
						fs->wflag = 1;
 8017c0c:	68fb      	ldr	r3, [r7, #12]
 8017c0e:	2201      	movs	r2, #1
 8017c10:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8017c12:	68f8      	ldr	r0, [r7, #12]
 8017c14:	f7ff fb30 	bl	8017278 <sync_window>
 8017c18:	4603      	mov	r3, r0
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d001      	beq.n	8017c22 <dir_next+0x12c>
 8017c1e:	2301      	movs	r3, #1
 8017c20:	e02a      	b.n	8017c78 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8017c22:	693b      	ldr	r3, [r7, #16]
 8017c24:	3301      	adds	r3, #1
 8017c26:	613b      	str	r3, [r7, #16]
 8017c28:	68fb      	ldr	r3, [r7, #12]
 8017c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c2c:	1c5a      	adds	r2, r3, #1
 8017c2e:	68fb      	ldr	r3, [r7, #12]
 8017c30:	62da      	str	r2, [r3, #44]	; 0x2c
 8017c32:	68fb      	ldr	r3, [r7, #12]
 8017c34:	895b      	ldrh	r3, [r3, #10]
 8017c36:	461a      	mov	r2, r3
 8017c38:	693b      	ldr	r3, [r7, #16]
 8017c3a:	4293      	cmp	r3, r2
 8017c3c:	d3e6      	bcc.n	8017c0c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8017c3e:	68fb      	ldr	r3, [r7, #12]
 8017c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c42:	693b      	ldr	r3, [r7, #16]
 8017c44:	1ad2      	subs	r2, r2, r3
 8017c46:	68fb      	ldr	r3, [r7, #12]
 8017c48:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	697a      	ldr	r2, [r7, #20]
 8017c4e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8017c50:	6979      	ldr	r1, [r7, #20]
 8017c52:	68f8      	ldr	r0, [r7, #12]
 8017c54:	f7ff fbf0 	bl	8017438 <clust2sect>
 8017c58:	4602      	mov	r2, r0
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	68ba      	ldr	r2, [r7, #8]
 8017c62:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8017c64:	68fb      	ldr	r3, [r7, #12]
 8017c66:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017c6a:	68bb      	ldr	r3, [r7, #8]
 8017c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017c70:	441a      	add	r2, r3
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017c76:	2300      	movs	r3, #0
}
 8017c78:	4618      	mov	r0, r3
 8017c7a:	3718      	adds	r7, #24
 8017c7c:	46bd      	mov	sp, r7
 8017c7e:	bd80      	pop	{r7, pc}

08017c80 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8017c80:	b580      	push	{r7, lr}
 8017c82:	b086      	sub	sp, #24
 8017c84:	af00      	add	r7, sp, #0
 8017c86:	6078      	str	r0, [r7, #4]
 8017c88:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	681b      	ldr	r3, [r3, #0]
 8017c8e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8017c90:	2100      	movs	r1, #0
 8017c92:	6878      	ldr	r0, [r7, #4]
 8017c94:	f7ff feb4 	bl	8017a00 <dir_sdi>
 8017c98:	4603      	mov	r3, r0
 8017c9a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017c9c:	7dfb      	ldrb	r3, [r7, #23]
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d12b      	bne.n	8017cfa <dir_alloc+0x7a>
		n = 0;
 8017ca2:	2300      	movs	r3, #0
 8017ca4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	69db      	ldr	r3, [r3, #28]
 8017caa:	4619      	mov	r1, r3
 8017cac:	68f8      	ldr	r0, [r7, #12]
 8017cae:	f7ff fb27 	bl	8017300 <move_window>
 8017cb2:	4603      	mov	r3, r0
 8017cb4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8017cb6:	7dfb      	ldrb	r3, [r7, #23]
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	d11d      	bne.n	8017cf8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	6a1b      	ldr	r3, [r3, #32]
 8017cc0:	781b      	ldrb	r3, [r3, #0]
 8017cc2:	2be5      	cmp	r3, #229	; 0xe5
 8017cc4:	d004      	beq.n	8017cd0 <dir_alloc+0x50>
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	6a1b      	ldr	r3, [r3, #32]
 8017cca:	781b      	ldrb	r3, [r3, #0]
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d107      	bne.n	8017ce0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8017cd0:	693b      	ldr	r3, [r7, #16]
 8017cd2:	3301      	adds	r3, #1
 8017cd4:	613b      	str	r3, [r7, #16]
 8017cd6:	693a      	ldr	r2, [r7, #16]
 8017cd8:	683b      	ldr	r3, [r7, #0]
 8017cda:	429a      	cmp	r2, r3
 8017cdc:	d102      	bne.n	8017ce4 <dir_alloc+0x64>
 8017cde:	e00c      	b.n	8017cfa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8017ce0:	2300      	movs	r3, #0
 8017ce2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8017ce4:	2101      	movs	r1, #1
 8017ce6:	6878      	ldr	r0, [r7, #4]
 8017ce8:	f7ff ff05 	bl	8017af6 <dir_next>
 8017cec:	4603      	mov	r3, r0
 8017cee:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8017cf0:	7dfb      	ldrb	r3, [r7, #23]
 8017cf2:	2b00      	cmp	r3, #0
 8017cf4:	d0d7      	beq.n	8017ca6 <dir_alloc+0x26>
 8017cf6:	e000      	b.n	8017cfa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8017cf8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8017cfa:	7dfb      	ldrb	r3, [r7, #23]
 8017cfc:	2b04      	cmp	r3, #4
 8017cfe:	d101      	bne.n	8017d04 <dir_alloc+0x84>
 8017d00:	2307      	movs	r3, #7
 8017d02:	75fb      	strb	r3, [r7, #23]
	return res;
 8017d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8017d06:	4618      	mov	r0, r3
 8017d08:	3718      	adds	r7, #24
 8017d0a:	46bd      	mov	sp, r7
 8017d0c:	bd80      	pop	{r7, pc}

08017d0e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8017d0e:	b580      	push	{r7, lr}
 8017d10:	b084      	sub	sp, #16
 8017d12:	af00      	add	r7, sp, #0
 8017d14:	6078      	str	r0, [r7, #4]
 8017d16:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8017d18:	683b      	ldr	r3, [r7, #0]
 8017d1a:	331a      	adds	r3, #26
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	f7ff f87b 	bl	8016e18 <ld_word>
 8017d22:	4603      	mov	r3, r0
 8017d24:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	781b      	ldrb	r3, [r3, #0]
 8017d2a:	2b03      	cmp	r3, #3
 8017d2c:	d109      	bne.n	8017d42 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8017d2e:	683b      	ldr	r3, [r7, #0]
 8017d30:	3314      	adds	r3, #20
 8017d32:	4618      	mov	r0, r3
 8017d34:	f7ff f870 	bl	8016e18 <ld_word>
 8017d38:	4603      	mov	r3, r0
 8017d3a:	041b      	lsls	r3, r3, #16
 8017d3c:	68fa      	ldr	r2, [r7, #12]
 8017d3e:	4313      	orrs	r3, r2
 8017d40:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8017d42:	68fb      	ldr	r3, [r7, #12]
}
 8017d44:	4618      	mov	r0, r3
 8017d46:	3710      	adds	r7, #16
 8017d48:	46bd      	mov	sp, r7
 8017d4a:	bd80      	pop	{r7, pc}

08017d4c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8017d4c:	b580      	push	{r7, lr}
 8017d4e:	b084      	sub	sp, #16
 8017d50:	af00      	add	r7, sp, #0
 8017d52:	60f8      	str	r0, [r7, #12]
 8017d54:	60b9      	str	r1, [r7, #8]
 8017d56:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8017d58:	68bb      	ldr	r3, [r7, #8]
 8017d5a:	331a      	adds	r3, #26
 8017d5c:	687a      	ldr	r2, [r7, #4]
 8017d5e:	b292      	uxth	r2, r2
 8017d60:	4611      	mov	r1, r2
 8017d62:	4618      	mov	r0, r3
 8017d64:	f7ff f893 	bl	8016e8e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8017d68:	68fb      	ldr	r3, [r7, #12]
 8017d6a:	781b      	ldrb	r3, [r3, #0]
 8017d6c:	2b03      	cmp	r3, #3
 8017d6e:	d109      	bne.n	8017d84 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8017d70:	68bb      	ldr	r3, [r7, #8]
 8017d72:	f103 0214 	add.w	r2, r3, #20
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	0c1b      	lsrs	r3, r3, #16
 8017d7a:	b29b      	uxth	r3, r3
 8017d7c:	4619      	mov	r1, r3
 8017d7e:	4610      	mov	r0, r2
 8017d80:	f7ff f885 	bl	8016e8e <st_word>
	}
}
 8017d84:	bf00      	nop
 8017d86:	3710      	adds	r7, #16
 8017d88:	46bd      	mov	sp, r7
 8017d8a:	bd80      	pop	{r7, pc}

08017d8c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8017d8c:	b580      	push	{r7, lr}
 8017d8e:	b086      	sub	sp, #24
 8017d90:	af00      	add	r7, sp, #0
 8017d92:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	681b      	ldr	r3, [r3, #0]
 8017d98:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8017d9a:	2100      	movs	r1, #0
 8017d9c:	6878      	ldr	r0, [r7, #4]
 8017d9e:	f7ff fe2f 	bl	8017a00 <dir_sdi>
 8017da2:	4603      	mov	r3, r0
 8017da4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8017da6:	7dfb      	ldrb	r3, [r7, #23]
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d001      	beq.n	8017db0 <dir_find+0x24>
 8017dac:	7dfb      	ldrb	r3, [r7, #23]
 8017dae:	e03e      	b.n	8017e2e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	69db      	ldr	r3, [r3, #28]
 8017db4:	4619      	mov	r1, r3
 8017db6:	6938      	ldr	r0, [r7, #16]
 8017db8:	f7ff faa2 	bl	8017300 <move_window>
 8017dbc:	4603      	mov	r3, r0
 8017dbe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8017dc0:	7dfb      	ldrb	r3, [r7, #23]
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	d12f      	bne.n	8017e26 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	6a1b      	ldr	r3, [r3, #32]
 8017dca:	781b      	ldrb	r3, [r3, #0]
 8017dcc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8017dce:	7bfb      	ldrb	r3, [r7, #15]
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d102      	bne.n	8017dda <dir_find+0x4e>
 8017dd4:	2304      	movs	r3, #4
 8017dd6:	75fb      	strb	r3, [r7, #23]
 8017dd8:	e028      	b.n	8017e2c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	6a1b      	ldr	r3, [r3, #32]
 8017dde:	330b      	adds	r3, #11
 8017de0:	781b      	ldrb	r3, [r3, #0]
 8017de2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017de6:	b2da      	uxtb	r2, r3
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	6a1b      	ldr	r3, [r3, #32]
 8017df0:	330b      	adds	r3, #11
 8017df2:	781b      	ldrb	r3, [r3, #0]
 8017df4:	f003 0308 	and.w	r3, r3, #8
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	d10a      	bne.n	8017e12 <dir_find+0x86>
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	6a18      	ldr	r0, [r3, #32]
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	3324      	adds	r3, #36	; 0x24
 8017e04:	220b      	movs	r2, #11
 8017e06:	4619      	mov	r1, r3
 8017e08:	f7ff f8c4 	bl	8016f94 <mem_cmp>
 8017e0c:	4603      	mov	r3, r0
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d00b      	beq.n	8017e2a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8017e12:	2100      	movs	r1, #0
 8017e14:	6878      	ldr	r0, [r7, #4]
 8017e16:	f7ff fe6e 	bl	8017af6 <dir_next>
 8017e1a:	4603      	mov	r3, r0
 8017e1c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8017e1e:	7dfb      	ldrb	r3, [r7, #23]
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d0c5      	beq.n	8017db0 <dir_find+0x24>
 8017e24:	e002      	b.n	8017e2c <dir_find+0xa0>
		if (res != FR_OK) break;
 8017e26:	bf00      	nop
 8017e28:	e000      	b.n	8017e2c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8017e2a:	bf00      	nop

	return res;
 8017e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8017e2e:	4618      	mov	r0, r3
 8017e30:	3718      	adds	r7, #24
 8017e32:	46bd      	mov	sp, r7
 8017e34:	bd80      	pop	{r7, pc}

08017e36 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8017e36:	b580      	push	{r7, lr}
 8017e38:	b084      	sub	sp, #16
 8017e3a:	af00      	add	r7, sp, #0
 8017e3c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	681b      	ldr	r3, [r3, #0]
 8017e42:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8017e44:	2101      	movs	r1, #1
 8017e46:	6878      	ldr	r0, [r7, #4]
 8017e48:	f7ff ff1a 	bl	8017c80 <dir_alloc>
 8017e4c:	4603      	mov	r3, r0
 8017e4e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8017e50:	7bfb      	ldrb	r3, [r7, #15]
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d11c      	bne.n	8017e90 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	69db      	ldr	r3, [r3, #28]
 8017e5a:	4619      	mov	r1, r3
 8017e5c:	68b8      	ldr	r0, [r7, #8]
 8017e5e:	f7ff fa4f 	bl	8017300 <move_window>
 8017e62:	4603      	mov	r3, r0
 8017e64:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8017e66:	7bfb      	ldrb	r3, [r7, #15]
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d111      	bne.n	8017e90 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	6a1b      	ldr	r3, [r3, #32]
 8017e70:	2220      	movs	r2, #32
 8017e72:	2100      	movs	r1, #0
 8017e74:	4618      	mov	r0, r3
 8017e76:	f7ff f872 	bl	8016f5e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	6a18      	ldr	r0, [r3, #32]
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	3324      	adds	r3, #36	; 0x24
 8017e82:	220b      	movs	r2, #11
 8017e84:	4619      	mov	r1, r3
 8017e86:	f7ff f849 	bl	8016f1c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8017e8a:	68bb      	ldr	r3, [r7, #8]
 8017e8c:	2201      	movs	r2, #1
 8017e8e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8017e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e92:	4618      	mov	r0, r3
 8017e94:	3710      	adds	r7, #16
 8017e96:	46bd      	mov	sp, r7
 8017e98:	bd80      	pop	{r7, pc}
	...

08017e9c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8017e9c:	b580      	push	{r7, lr}
 8017e9e:	b088      	sub	sp, #32
 8017ea0:	af00      	add	r7, sp, #0
 8017ea2:	6078      	str	r0, [r7, #4]
 8017ea4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8017ea6:	683b      	ldr	r3, [r7, #0]
 8017ea8:	681b      	ldr	r3, [r3, #0]
 8017eaa:	60fb      	str	r3, [r7, #12]
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	3324      	adds	r3, #36	; 0x24
 8017eb0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8017eb2:	220b      	movs	r2, #11
 8017eb4:	2120      	movs	r1, #32
 8017eb6:	68b8      	ldr	r0, [r7, #8]
 8017eb8:	f7ff f851 	bl	8016f5e <mem_set>
	si = i = 0; ni = 8;
 8017ebc:	2300      	movs	r3, #0
 8017ebe:	613b      	str	r3, [r7, #16]
 8017ec0:	693b      	ldr	r3, [r7, #16]
 8017ec2:	61fb      	str	r3, [r7, #28]
 8017ec4:	2308      	movs	r3, #8
 8017ec6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8017ec8:	69fb      	ldr	r3, [r7, #28]
 8017eca:	1c5a      	adds	r2, r3, #1
 8017ecc:	61fa      	str	r2, [r7, #28]
 8017ece:	68fa      	ldr	r2, [r7, #12]
 8017ed0:	4413      	add	r3, r2
 8017ed2:	781b      	ldrb	r3, [r3, #0]
 8017ed4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8017ed6:	7efb      	ldrb	r3, [r7, #27]
 8017ed8:	2b20      	cmp	r3, #32
 8017eda:	d94e      	bls.n	8017f7a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8017edc:	7efb      	ldrb	r3, [r7, #27]
 8017ede:	2b2f      	cmp	r3, #47	; 0x2f
 8017ee0:	d006      	beq.n	8017ef0 <create_name+0x54>
 8017ee2:	7efb      	ldrb	r3, [r7, #27]
 8017ee4:	2b5c      	cmp	r3, #92	; 0x5c
 8017ee6:	d110      	bne.n	8017f0a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8017ee8:	e002      	b.n	8017ef0 <create_name+0x54>
 8017eea:	69fb      	ldr	r3, [r7, #28]
 8017eec:	3301      	adds	r3, #1
 8017eee:	61fb      	str	r3, [r7, #28]
 8017ef0:	68fa      	ldr	r2, [r7, #12]
 8017ef2:	69fb      	ldr	r3, [r7, #28]
 8017ef4:	4413      	add	r3, r2
 8017ef6:	781b      	ldrb	r3, [r3, #0]
 8017ef8:	2b2f      	cmp	r3, #47	; 0x2f
 8017efa:	d0f6      	beq.n	8017eea <create_name+0x4e>
 8017efc:	68fa      	ldr	r2, [r7, #12]
 8017efe:	69fb      	ldr	r3, [r7, #28]
 8017f00:	4413      	add	r3, r2
 8017f02:	781b      	ldrb	r3, [r3, #0]
 8017f04:	2b5c      	cmp	r3, #92	; 0x5c
 8017f06:	d0f0      	beq.n	8017eea <create_name+0x4e>
			break;
 8017f08:	e038      	b.n	8017f7c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8017f0a:	7efb      	ldrb	r3, [r7, #27]
 8017f0c:	2b2e      	cmp	r3, #46	; 0x2e
 8017f0e:	d003      	beq.n	8017f18 <create_name+0x7c>
 8017f10:	693a      	ldr	r2, [r7, #16]
 8017f12:	697b      	ldr	r3, [r7, #20]
 8017f14:	429a      	cmp	r2, r3
 8017f16:	d30c      	bcc.n	8017f32 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8017f18:	697b      	ldr	r3, [r7, #20]
 8017f1a:	2b0b      	cmp	r3, #11
 8017f1c:	d002      	beq.n	8017f24 <create_name+0x88>
 8017f1e:	7efb      	ldrb	r3, [r7, #27]
 8017f20:	2b2e      	cmp	r3, #46	; 0x2e
 8017f22:	d001      	beq.n	8017f28 <create_name+0x8c>
 8017f24:	2306      	movs	r3, #6
 8017f26:	e044      	b.n	8017fb2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8017f28:	2308      	movs	r3, #8
 8017f2a:	613b      	str	r3, [r7, #16]
 8017f2c:	230b      	movs	r3, #11
 8017f2e:	617b      	str	r3, [r7, #20]
			continue;
 8017f30:	e022      	b.n	8017f78 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8017f32:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	da04      	bge.n	8017f44 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8017f3a:	7efb      	ldrb	r3, [r7, #27]
 8017f3c:	3b80      	subs	r3, #128	; 0x80
 8017f3e:	4a1f      	ldr	r2, [pc, #124]	; (8017fbc <create_name+0x120>)
 8017f40:	5cd3      	ldrb	r3, [r2, r3]
 8017f42:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8017f44:	7efb      	ldrb	r3, [r7, #27]
 8017f46:	4619      	mov	r1, r3
 8017f48:	481d      	ldr	r0, [pc, #116]	; (8017fc0 <create_name+0x124>)
 8017f4a:	f7ff f84a 	bl	8016fe2 <chk_chr>
 8017f4e:	4603      	mov	r3, r0
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d001      	beq.n	8017f58 <create_name+0xbc>
 8017f54:	2306      	movs	r3, #6
 8017f56:	e02c      	b.n	8017fb2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8017f58:	7efb      	ldrb	r3, [r7, #27]
 8017f5a:	2b60      	cmp	r3, #96	; 0x60
 8017f5c:	d905      	bls.n	8017f6a <create_name+0xce>
 8017f5e:	7efb      	ldrb	r3, [r7, #27]
 8017f60:	2b7a      	cmp	r3, #122	; 0x7a
 8017f62:	d802      	bhi.n	8017f6a <create_name+0xce>
 8017f64:	7efb      	ldrb	r3, [r7, #27]
 8017f66:	3b20      	subs	r3, #32
 8017f68:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8017f6a:	693b      	ldr	r3, [r7, #16]
 8017f6c:	1c5a      	adds	r2, r3, #1
 8017f6e:	613a      	str	r2, [r7, #16]
 8017f70:	68ba      	ldr	r2, [r7, #8]
 8017f72:	4413      	add	r3, r2
 8017f74:	7efa      	ldrb	r2, [r7, #27]
 8017f76:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8017f78:	e7a6      	b.n	8017ec8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8017f7a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8017f7c:	68fa      	ldr	r2, [r7, #12]
 8017f7e:	69fb      	ldr	r3, [r7, #28]
 8017f80:	441a      	add	r2, r3
 8017f82:	683b      	ldr	r3, [r7, #0]
 8017f84:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8017f86:	693b      	ldr	r3, [r7, #16]
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d101      	bne.n	8017f90 <create_name+0xf4>
 8017f8c:	2306      	movs	r3, #6
 8017f8e:	e010      	b.n	8017fb2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8017f90:	68bb      	ldr	r3, [r7, #8]
 8017f92:	781b      	ldrb	r3, [r3, #0]
 8017f94:	2be5      	cmp	r3, #229	; 0xe5
 8017f96:	d102      	bne.n	8017f9e <create_name+0x102>
 8017f98:	68bb      	ldr	r3, [r7, #8]
 8017f9a:	2205      	movs	r2, #5
 8017f9c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8017f9e:	7efb      	ldrb	r3, [r7, #27]
 8017fa0:	2b20      	cmp	r3, #32
 8017fa2:	d801      	bhi.n	8017fa8 <create_name+0x10c>
 8017fa4:	2204      	movs	r2, #4
 8017fa6:	e000      	b.n	8017faa <create_name+0x10e>
 8017fa8:	2200      	movs	r2, #0
 8017faa:	68bb      	ldr	r3, [r7, #8]
 8017fac:	330b      	adds	r3, #11
 8017fae:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8017fb0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8017fb2:	4618      	mov	r0, r3
 8017fb4:	3720      	adds	r7, #32
 8017fb6:	46bd      	mov	sp, r7
 8017fb8:	bd80      	pop	{r7, pc}
 8017fba:	bf00      	nop
 8017fbc:	0801d1b4 	.word	0x0801d1b4
 8017fc0:	0801cea4 	.word	0x0801cea4

08017fc4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8017fc4:	b580      	push	{r7, lr}
 8017fc6:	b086      	sub	sp, #24
 8017fc8:	af00      	add	r7, sp, #0
 8017fca:	6078      	str	r0, [r7, #4]
 8017fcc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8017fd2:	693b      	ldr	r3, [r7, #16]
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8017fd8:	e002      	b.n	8017fe0 <follow_path+0x1c>
 8017fda:	683b      	ldr	r3, [r7, #0]
 8017fdc:	3301      	adds	r3, #1
 8017fde:	603b      	str	r3, [r7, #0]
 8017fe0:	683b      	ldr	r3, [r7, #0]
 8017fe2:	781b      	ldrb	r3, [r3, #0]
 8017fe4:	2b2f      	cmp	r3, #47	; 0x2f
 8017fe6:	d0f8      	beq.n	8017fda <follow_path+0x16>
 8017fe8:	683b      	ldr	r3, [r7, #0]
 8017fea:	781b      	ldrb	r3, [r3, #0]
 8017fec:	2b5c      	cmp	r3, #92	; 0x5c
 8017fee:	d0f4      	beq.n	8017fda <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8017ff0:	693b      	ldr	r3, [r7, #16]
 8017ff2:	2200      	movs	r2, #0
 8017ff4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8017ff6:	683b      	ldr	r3, [r7, #0]
 8017ff8:	781b      	ldrb	r3, [r3, #0]
 8017ffa:	2b1f      	cmp	r3, #31
 8017ffc:	d80a      	bhi.n	8018014 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	2280      	movs	r2, #128	; 0x80
 8018002:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8018006:	2100      	movs	r1, #0
 8018008:	6878      	ldr	r0, [r7, #4]
 801800a:	f7ff fcf9 	bl	8017a00 <dir_sdi>
 801800e:	4603      	mov	r3, r0
 8018010:	75fb      	strb	r3, [r7, #23]
 8018012:	e043      	b.n	801809c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8018014:	463b      	mov	r3, r7
 8018016:	4619      	mov	r1, r3
 8018018:	6878      	ldr	r0, [r7, #4]
 801801a:	f7ff ff3f 	bl	8017e9c <create_name>
 801801e:	4603      	mov	r3, r0
 8018020:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8018022:	7dfb      	ldrb	r3, [r7, #23]
 8018024:	2b00      	cmp	r3, #0
 8018026:	d134      	bne.n	8018092 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8018028:	6878      	ldr	r0, [r7, #4]
 801802a:	f7ff feaf 	bl	8017d8c <dir_find>
 801802e:	4603      	mov	r3, r0
 8018030:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018038:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801803a:	7dfb      	ldrb	r3, [r7, #23]
 801803c:	2b00      	cmp	r3, #0
 801803e:	d00a      	beq.n	8018056 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8018040:	7dfb      	ldrb	r3, [r7, #23]
 8018042:	2b04      	cmp	r3, #4
 8018044:	d127      	bne.n	8018096 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8018046:	7afb      	ldrb	r3, [r7, #11]
 8018048:	f003 0304 	and.w	r3, r3, #4
 801804c:	2b00      	cmp	r3, #0
 801804e:	d122      	bne.n	8018096 <follow_path+0xd2>
 8018050:	2305      	movs	r3, #5
 8018052:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8018054:	e01f      	b.n	8018096 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8018056:	7afb      	ldrb	r3, [r7, #11]
 8018058:	f003 0304 	and.w	r3, r3, #4
 801805c:	2b00      	cmp	r3, #0
 801805e:	d11c      	bne.n	801809a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8018060:	693b      	ldr	r3, [r7, #16]
 8018062:	799b      	ldrb	r3, [r3, #6]
 8018064:	f003 0310 	and.w	r3, r3, #16
 8018068:	2b00      	cmp	r3, #0
 801806a:	d102      	bne.n	8018072 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801806c:	2305      	movs	r3, #5
 801806e:	75fb      	strb	r3, [r7, #23]
 8018070:	e014      	b.n	801809c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8018072:	68fb      	ldr	r3, [r7, #12]
 8018074:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	695b      	ldr	r3, [r3, #20]
 801807c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018080:	4413      	add	r3, r2
 8018082:	4619      	mov	r1, r3
 8018084:	68f8      	ldr	r0, [r7, #12]
 8018086:	f7ff fe42 	bl	8017d0e <ld_clust>
 801808a:	4602      	mov	r2, r0
 801808c:	693b      	ldr	r3, [r7, #16]
 801808e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8018090:	e7c0      	b.n	8018014 <follow_path+0x50>
			if (res != FR_OK) break;
 8018092:	bf00      	nop
 8018094:	e002      	b.n	801809c <follow_path+0xd8>
				break;
 8018096:	bf00      	nop
 8018098:	e000      	b.n	801809c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801809a:	bf00      	nop
			}
		}
	}

	return res;
 801809c:	7dfb      	ldrb	r3, [r7, #23]
}
 801809e:	4618      	mov	r0, r3
 80180a0:	3718      	adds	r7, #24
 80180a2:	46bd      	mov	sp, r7
 80180a4:	bd80      	pop	{r7, pc}

080180a6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80180a6:	b480      	push	{r7}
 80180a8:	b087      	sub	sp, #28
 80180aa:	af00      	add	r7, sp, #0
 80180ac:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80180ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80180b2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	681b      	ldr	r3, [r3, #0]
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d031      	beq.n	8018120 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	617b      	str	r3, [r7, #20]
 80180c2:	e002      	b.n	80180ca <get_ldnumber+0x24>
 80180c4:	697b      	ldr	r3, [r7, #20]
 80180c6:	3301      	adds	r3, #1
 80180c8:	617b      	str	r3, [r7, #20]
 80180ca:	697b      	ldr	r3, [r7, #20]
 80180cc:	781b      	ldrb	r3, [r3, #0]
 80180ce:	2b20      	cmp	r3, #32
 80180d0:	d903      	bls.n	80180da <get_ldnumber+0x34>
 80180d2:	697b      	ldr	r3, [r7, #20]
 80180d4:	781b      	ldrb	r3, [r3, #0]
 80180d6:	2b3a      	cmp	r3, #58	; 0x3a
 80180d8:	d1f4      	bne.n	80180c4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80180da:	697b      	ldr	r3, [r7, #20]
 80180dc:	781b      	ldrb	r3, [r3, #0]
 80180de:	2b3a      	cmp	r3, #58	; 0x3a
 80180e0:	d11c      	bne.n	801811c <get_ldnumber+0x76>
			tp = *path;
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	681b      	ldr	r3, [r3, #0]
 80180e6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80180e8:	68fb      	ldr	r3, [r7, #12]
 80180ea:	1c5a      	adds	r2, r3, #1
 80180ec:	60fa      	str	r2, [r7, #12]
 80180ee:	781b      	ldrb	r3, [r3, #0]
 80180f0:	3b30      	subs	r3, #48	; 0x30
 80180f2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80180f4:	68bb      	ldr	r3, [r7, #8]
 80180f6:	2b09      	cmp	r3, #9
 80180f8:	d80e      	bhi.n	8018118 <get_ldnumber+0x72>
 80180fa:	68fa      	ldr	r2, [r7, #12]
 80180fc:	697b      	ldr	r3, [r7, #20]
 80180fe:	429a      	cmp	r2, r3
 8018100:	d10a      	bne.n	8018118 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8018102:	68bb      	ldr	r3, [r7, #8]
 8018104:	2b00      	cmp	r3, #0
 8018106:	d107      	bne.n	8018118 <get_ldnumber+0x72>
					vol = (int)i;
 8018108:	68bb      	ldr	r3, [r7, #8]
 801810a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801810c:	697b      	ldr	r3, [r7, #20]
 801810e:	3301      	adds	r3, #1
 8018110:	617b      	str	r3, [r7, #20]
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	697a      	ldr	r2, [r7, #20]
 8018116:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8018118:	693b      	ldr	r3, [r7, #16]
 801811a:	e002      	b.n	8018122 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801811c:	2300      	movs	r3, #0
 801811e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8018120:	693b      	ldr	r3, [r7, #16]
}
 8018122:	4618      	mov	r0, r3
 8018124:	371c      	adds	r7, #28
 8018126:	46bd      	mov	sp, r7
 8018128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801812c:	4770      	bx	lr
	...

08018130 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8018130:	b580      	push	{r7, lr}
 8018132:	b082      	sub	sp, #8
 8018134:	af00      	add	r7, sp, #0
 8018136:	6078      	str	r0, [r7, #4]
 8018138:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	2200      	movs	r2, #0
 801813e:	70da      	strb	r2, [r3, #3]
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018146:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8018148:	6839      	ldr	r1, [r7, #0]
 801814a:	6878      	ldr	r0, [r7, #4]
 801814c:	f7ff f8d8 	bl	8017300 <move_window>
 8018150:	4603      	mov	r3, r0
 8018152:	2b00      	cmp	r3, #0
 8018154:	d001      	beq.n	801815a <check_fs+0x2a>
 8018156:	2304      	movs	r3, #4
 8018158:	e038      	b.n	80181cc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	3330      	adds	r3, #48	; 0x30
 801815e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8018162:	4618      	mov	r0, r3
 8018164:	f7fe fe58 	bl	8016e18 <ld_word>
 8018168:	4603      	mov	r3, r0
 801816a:	461a      	mov	r2, r3
 801816c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8018170:	429a      	cmp	r2, r3
 8018172:	d001      	beq.n	8018178 <check_fs+0x48>
 8018174:	2303      	movs	r3, #3
 8018176:	e029      	b.n	80181cc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801817e:	2be9      	cmp	r3, #233	; 0xe9
 8018180:	d009      	beq.n	8018196 <check_fs+0x66>
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018188:	2beb      	cmp	r3, #235	; 0xeb
 801818a:	d11e      	bne.n	80181ca <check_fs+0x9a>
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8018192:	2b90      	cmp	r3, #144	; 0x90
 8018194:	d119      	bne.n	80181ca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	3330      	adds	r3, #48	; 0x30
 801819a:	3336      	adds	r3, #54	; 0x36
 801819c:	4618      	mov	r0, r3
 801819e:	f7fe fe53 	bl	8016e48 <ld_dword>
 80181a2:	4603      	mov	r3, r0
 80181a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80181a8:	4a0a      	ldr	r2, [pc, #40]	; (80181d4 <check_fs+0xa4>)
 80181aa:	4293      	cmp	r3, r2
 80181ac:	d101      	bne.n	80181b2 <check_fs+0x82>
 80181ae:	2300      	movs	r3, #0
 80181b0:	e00c      	b.n	80181cc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	3330      	adds	r3, #48	; 0x30
 80181b6:	3352      	adds	r3, #82	; 0x52
 80181b8:	4618      	mov	r0, r3
 80181ba:	f7fe fe45 	bl	8016e48 <ld_dword>
 80181be:	4603      	mov	r3, r0
 80181c0:	4a05      	ldr	r2, [pc, #20]	; (80181d8 <check_fs+0xa8>)
 80181c2:	4293      	cmp	r3, r2
 80181c4:	d101      	bne.n	80181ca <check_fs+0x9a>
 80181c6:	2300      	movs	r3, #0
 80181c8:	e000      	b.n	80181cc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80181ca:	2302      	movs	r3, #2
}
 80181cc:	4618      	mov	r0, r3
 80181ce:	3708      	adds	r7, #8
 80181d0:	46bd      	mov	sp, r7
 80181d2:	bd80      	pop	{r7, pc}
 80181d4:	00544146 	.word	0x00544146
 80181d8:	33544146 	.word	0x33544146

080181dc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80181dc:	b580      	push	{r7, lr}
 80181de:	b096      	sub	sp, #88	; 0x58
 80181e0:	af00      	add	r7, sp, #0
 80181e2:	60f8      	str	r0, [r7, #12]
 80181e4:	60b9      	str	r1, [r7, #8]
 80181e6:	4613      	mov	r3, r2
 80181e8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80181ea:	68bb      	ldr	r3, [r7, #8]
 80181ec:	2200      	movs	r2, #0
 80181ee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80181f0:	68f8      	ldr	r0, [r7, #12]
 80181f2:	f7ff ff58 	bl	80180a6 <get_ldnumber>
 80181f6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80181f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	da01      	bge.n	8018202 <find_volume+0x26>
 80181fe:	230b      	movs	r3, #11
 8018200:	e22d      	b.n	801865e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8018202:	4aa1      	ldr	r2, [pc, #644]	; (8018488 <find_volume+0x2ac>)
 8018204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801820a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801820c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801820e:	2b00      	cmp	r3, #0
 8018210:	d101      	bne.n	8018216 <find_volume+0x3a>
 8018212:	230c      	movs	r3, #12
 8018214:	e223      	b.n	801865e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8018216:	68bb      	ldr	r3, [r7, #8]
 8018218:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801821a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801821c:	79fb      	ldrb	r3, [r7, #7]
 801821e:	f023 0301 	bic.w	r3, r3, #1
 8018222:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8018224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018226:	781b      	ldrb	r3, [r3, #0]
 8018228:	2b00      	cmp	r3, #0
 801822a:	d01a      	beq.n	8018262 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801822c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801822e:	785b      	ldrb	r3, [r3, #1]
 8018230:	4618      	mov	r0, r3
 8018232:	f7fe fd53 	bl	8016cdc <disk_status>
 8018236:	4603      	mov	r3, r0
 8018238:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801823c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018240:	f003 0301 	and.w	r3, r3, #1
 8018244:	2b00      	cmp	r3, #0
 8018246:	d10c      	bne.n	8018262 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8018248:	79fb      	ldrb	r3, [r7, #7]
 801824a:	2b00      	cmp	r3, #0
 801824c:	d007      	beq.n	801825e <find_volume+0x82>
 801824e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018252:	f003 0304 	and.w	r3, r3, #4
 8018256:	2b00      	cmp	r3, #0
 8018258:	d001      	beq.n	801825e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801825a:	230a      	movs	r3, #10
 801825c:	e1ff      	b.n	801865e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 801825e:	2300      	movs	r3, #0
 8018260:	e1fd      	b.n	801865e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8018262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018264:	2200      	movs	r2, #0
 8018266:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8018268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801826a:	b2da      	uxtb	r2, r3
 801826c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801826e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8018270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018272:	785b      	ldrb	r3, [r3, #1]
 8018274:	4618      	mov	r0, r3
 8018276:	f7fe fd4b 	bl	8016d10 <disk_initialize>
 801827a:	4603      	mov	r3, r0
 801827c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8018280:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018284:	f003 0301 	and.w	r3, r3, #1
 8018288:	2b00      	cmp	r3, #0
 801828a:	d001      	beq.n	8018290 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801828c:	2303      	movs	r3, #3
 801828e:	e1e6      	b.n	801865e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8018290:	79fb      	ldrb	r3, [r7, #7]
 8018292:	2b00      	cmp	r3, #0
 8018294:	d007      	beq.n	80182a6 <find_volume+0xca>
 8018296:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801829a:	f003 0304 	and.w	r3, r3, #4
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d001      	beq.n	80182a6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80182a2:	230a      	movs	r3, #10
 80182a4:	e1db      	b.n	801865e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80182a6:	2300      	movs	r3, #0
 80182a8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80182aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80182ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80182ae:	f7ff ff3f 	bl	8018130 <check_fs>
 80182b2:	4603      	mov	r3, r0
 80182b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80182b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80182bc:	2b02      	cmp	r3, #2
 80182be:	d149      	bne.n	8018354 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80182c0:	2300      	movs	r3, #0
 80182c2:	643b      	str	r3, [r7, #64]	; 0x40
 80182c4:	e01e      	b.n	8018304 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80182c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80182cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80182ce:	011b      	lsls	r3, r3, #4
 80182d0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80182d4:	4413      	add	r3, r2
 80182d6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80182d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182da:	3304      	adds	r3, #4
 80182dc:	781b      	ldrb	r3, [r3, #0]
 80182de:	2b00      	cmp	r3, #0
 80182e0:	d006      	beq.n	80182f0 <find_volume+0x114>
 80182e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182e4:	3308      	adds	r3, #8
 80182e6:	4618      	mov	r0, r3
 80182e8:	f7fe fdae 	bl	8016e48 <ld_dword>
 80182ec:	4602      	mov	r2, r0
 80182ee:	e000      	b.n	80182f2 <find_volume+0x116>
 80182f0:	2200      	movs	r2, #0
 80182f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80182f4:	009b      	lsls	r3, r3, #2
 80182f6:	3358      	adds	r3, #88	; 0x58
 80182f8:	443b      	add	r3, r7
 80182fa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80182fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018300:	3301      	adds	r3, #1
 8018302:	643b      	str	r3, [r7, #64]	; 0x40
 8018304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018306:	2b03      	cmp	r3, #3
 8018308:	d9dd      	bls.n	80182c6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801830a:	2300      	movs	r3, #0
 801830c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801830e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018310:	2b00      	cmp	r3, #0
 8018312:	d002      	beq.n	801831a <find_volume+0x13e>
 8018314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018316:	3b01      	subs	r3, #1
 8018318:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801831a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801831c:	009b      	lsls	r3, r3, #2
 801831e:	3358      	adds	r3, #88	; 0x58
 8018320:	443b      	add	r3, r7
 8018322:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8018326:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8018328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801832a:	2b00      	cmp	r3, #0
 801832c:	d005      	beq.n	801833a <find_volume+0x15e>
 801832e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018330:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018332:	f7ff fefd 	bl	8018130 <check_fs>
 8018336:	4603      	mov	r3, r0
 8018338:	e000      	b.n	801833c <find_volume+0x160>
 801833a:	2303      	movs	r3, #3
 801833c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8018340:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018344:	2b01      	cmp	r3, #1
 8018346:	d905      	bls.n	8018354 <find_volume+0x178>
 8018348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801834a:	3301      	adds	r3, #1
 801834c:	643b      	str	r3, [r7, #64]	; 0x40
 801834e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018350:	2b03      	cmp	r3, #3
 8018352:	d9e2      	bls.n	801831a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8018354:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018358:	2b04      	cmp	r3, #4
 801835a:	d101      	bne.n	8018360 <find_volume+0x184>
 801835c:	2301      	movs	r3, #1
 801835e:	e17e      	b.n	801865e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8018360:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018364:	2b01      	cmp	r3, #1
 8018366:	d901      	bls.n	801836c <find_volume+0x190>
 8018368:	230d      	movs	r3, #13
 801836a:	e178      	b.n	801865e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801836c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801836e:	3330      	adds	r3, #48	; 0x30
 8018370:	330b      	adds	r3, #11
 8018372:	4618      	mov	r0, r3
 8018374:	f7fe fd50 	bl	8016e18 <ld_word>
 8018378:	4603      	mov	r3, r0
 801837a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801837e:	d001      	beq.n	8018384 <find_volume+0x1a8>
 8018380:	230d      	movs	r3, #13
 8018382:	e16c      	b.n	801865e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8018384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018386:	3330      	adds	r3, #48	; 0x30
 8018388:	3316      	adds	r3, #22
 801838a:	4618      	mov	r0, r3
 801838c:	f7fe fd44 	bl	8016e18 <ld_word>
 8018390:	4603      	mov	r3, r0
 8018392:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8018394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018396:	2b00      	cmp	r3, #0
 8018398:	d106      	bne.n	80183a8 <find_volume+0x1cc>
 801839a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801839c:	3330      	adds	r3, #48	; 0x30
 801839e:	3324      	adds	r3, #36	; 0x24
 80183a0:	4618      	mov	r0, r3
 80183a2:	f7fe fd51 	bl	8016e48 <ld_dword>
 80183a6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80183a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80183ac:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80183ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183b0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80183b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183b6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80183b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183ba:	789b      	ldrb	r3, [r3, #2]
 80183bc:	2b01      	cmp	r3, #1
 80183be:	d005      	beq.n	80183cc <find_volume+0x1f0>
 80183c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183c2:	789b      	ldrb	r3, [r3, #2]
 80183c4:	2b02      	cmp	r3, #2
 80183c6:	d001      	beq.n	80183cc <find_volume+0x1f0>
 80183c8:	230d      	movs	r3, #13
 80183ca:	e148      	b.n	801865e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80183cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183ce:	789b      	ldrb	r3, [r3, #2]
 80183d0:	461a      	mov	r2, r3
 80183d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80183d4:	fb02 f303 	mul.w	r3, r2, r3
 80183d8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80183da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80183e0:	b29a      	uxth	r2, r3
 80183e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183e4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80183e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183e8:	895b      	ldrh	r3, [r3, #10]
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	d008      	beq.n	8018400 <find_volume+0x224>
 80183ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183f0:	895b      	ldrh	r3, [r3, #10]
 80183f2:	461a      	mov	r2, r3
 80183f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183f6:	895b      	ldrh	r3, [r3, #10]
 80183f8:	3b01      	subs	r3, #1
 80183fa:	4013      	ands	r3, r2
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d001      	beq.n	8018404 <find_volume+0x228>
 8018400:	230d      	movs	r3, #13
 8018402:	e12c      	b.n	801865e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8018404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018406:	3330      	adds	r3, #48	; 0x30
 8018408:	3311      	adds	r3, #17
 801840a:	4618      	mov	r0, r3
 801840c:	f7fe fd04 	bl	8016e18 <ld_word>
 8018410:	4603      	mov	r3, r0
 8018412:	461a      	mov	r2, r3
 8018414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018416:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8018418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801841a:	891b      	ldrh	r3, [r3, #8]
 801841c:	f003 030f 	and.w	r3, r3, #15
 8018420:	b29b      	uxth	r3, r3
 8018422:	2b00      	cmp	r3, #0
 8018424:	d001      	beq.n	801842a <find_volume+0x24e>
 8018426:	230d      	movs	r3, #13
 8018428:	e119      	b.n	801865e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801842a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801842c:	3330      	adds	r3, #48	; 0x30
 801842e:	3313      	adds	r3, #19
 8018430:	4618      	mov	r0, r3
 8018432:	f7fe fcf1 	bl	8016e18 <ld_word>
 8018436:	4603      	mov	r3, r0
 8018438:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801843a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801843c:	2b00      	cmp	r3, #0
 801843e:	d106      	bne.n	801844e <find_volume+0x272>
 8018440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018442:	3330      	adds	r3, #48	; 0x30
 8018444:	3320      	adds	r3, #32
 8018446:	4618      	mov	r0, r3
 8018448:	f7fe fcfe 	bl	8016e48 <ld_dword>
 801844c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801844e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018450:	3330      	adds	r3, #48	; 0x30
 8018452:	330e      	adds	r3, #14
 8018454:	4618      	mov	r0, r3
 8018456:	f7fe fcdf 	bl	8016e18 <ld_word>
 801845a:	4603      	mov	r3, r0
 801845c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801845e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018460:	2b00      	cmp	r3, #0
 8018462:	d101      	bne.n	8018468 <find_volume+0x28c>
 8018464:	230d      	movs	r3, #13
 8018466:	e0fa      	b.n	801865e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8018468:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801846a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801846c:	4413      	add	r3, r2
 801846e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018470:	8912      	ldrh	r2, [r2, #8]
 8018472:	0912      	lsrs	r2, r2, #4
 8018474:	b292      	uxth	r2, r2
 8018476:	4413      	add	r3, r2
 8018478:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801847a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801847c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801847e:	429a      	cmp	r2, r3
 8018480:	d204      	bcs.n	801848c <find_volume+0x2b0>
 8018482:	230d      	movs	r3, #13
 8018484:	e0eb      	b.n	801865e <find_volume+0x482>
 8018486:	bf00      	nop
 8018488:	2000137c 	.word	0x2000137c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801848c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801848e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018490:	1ad3      	subs	r3, r2, r3
 8018492:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018494:	8952      	ldrh	r2, [r2, #10]
 8018496:	fbb3 f3f2 	udiv	r3, r3, r2
 801849a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801849c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801849e:	2b00      	cmp	r3, #0
 80184a0:	d101      	bne.n	80184a6 <find_volume+0x2ca>
 80184a2:	230d      	movs	r3, #13
 80184a4:	e0db      	b.n	801865e <find_volume+0x482>
		fmt = FS_FAT32;
 80184a6:	2303      	movs	r3, #3
 80184a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80184ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184ae:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80184b2:	4293      	cmp	r3, r2
 80184b4:	d802      	bhi.n	80184bc <find_volume+0x2e0>
 80184b6:	2302      	movs	r3, #2
 80184b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80184bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184be:	f640 72f5 	movw	r2, #4085	; 0xff5
 80184c2:	4293      	cmp	r3, r2
 80184c4:	d802      	bhi.n	80184cc <find_volume+0x2f0>
 80184c6:	2301      	movs	r3, #1
 80184c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80184cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184ce:	1c9a      	adds	r2, r3, #2
 80184d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184d2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80184d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80184d8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80184da:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80184dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80184de:	441a      	add	r2, r3
 80184e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184e2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80184e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80184e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184e8:	441a      	add	r2, r3
 80184ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184ec:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80184ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80184f2:	2b03      	cmp	r3, #3
 80184f4:	d11e      	bne.n	8018534 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80184f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184f8:	3330      	adds	r3, #48	; 0x30
 80184fa:	332a      	adds	r3, #42	; 0x2a
 80184fc:	4618      	mov	r0, r3
 80184fe:	f7fe fc8b 	bl	8016e18 <ld_word>
 8018502:	4603      	mov	r3, r0
 8018504:	2b00      	cmp	r3, #0
 8018506:	d001      	beq.n	801850c <find_volume+0x330>
 8018508:	230d      	movs	r3, #13
 801850a:	e0a8      	b.n	801865e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801850c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801850e:	891b      	ldrh	r3, [r3, #8]
 8018510:	2b00      	cmp	r3, #0
 8018512:	d001      	beq.n	8018518 <find_volume+0x33c>
 8018514:	230d      	movs	r3, #13
 8018516:	e0a2      	b.n	801865e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8018518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801851a:	3330      	adds	r3, #48	; 0x30
 801851c:	332c      	adds	r3, #44	; 0x2c
 801851e:	4618      	mov	r0, r3
 8018520:	f7fe fc92 	bl	8016e48 <ld_dword>
 8018524:	4602      	mov	r2, r0
 8018526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018528:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801852a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801852c:	695b      	ldr	r3, [r3, #20]
 801852e:	009b      	lsls	r3, r3, #2
 8018530:	647b      	str	r3, [r7, #68]	; 0x44
 8018532:	e01f      	b.n	8018574 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8018534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018536:	891b      	ldrh	r3, [r3, #8]
 8018538:	2b00      	cmp	r3, #0
 801853a:	d101      	bne.n	8018540 <find_volume+0x364>
 801853c:	230d      	movs	r3, #13
 801853e:	e08e      	b.n	801865e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8018540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018542:	6a1a      	ldr	r2, [r3, #32]
 8018544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018546:	441a      	add	r2, r3
 8018548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801854a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801854c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018550:	2b02      	cmp	r3, #2
 8018552:	d103      	bne.n	801855c <find_volume+0x380>
 8018554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018556:	695b      	ldr	r3, [r3, #20]
 8018558:	005b      	lsls	r3, r3, #1
 801855a:	e00a      	b.n	8018572 <find_volume+0x396>
 801855c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801855e:	695a      	ldr	r2, [r3, #20]
 8018560:	4613      	mov	r3, r2
 8018562:	005b      	lsls	r3, r3, #1
 8018564:	4413      	add	r3, r2
 8018566:	085a      	lsrs	r2, r3, #1
 8018568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801856a:	695b      	ldr	r3, [r3, #20]
 801856c:	f003 0301 	and.w	r3, r3, #1
 8018570:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8018572:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8018574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018576:	699a      	ldr	r2, [r3, #24]
 8018578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801857a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801857e:	0a5b      	lsrs	r3, r3, #9
 8018580:	429a      	cmp	r2, r3
 8018582:	d201      	bcs.n	8018588 <find_volume+0x3ac>
 8018584:	230d      	movs	r3, #13
 8018586:	e06a      	b.n	801865e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8018588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801858a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801858e:	611a      	str	r2, [r3, #16]
 8018590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018592:	691a      	ldr	r2, [r3, #16]
 8018594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018596:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8018598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801859a:	2280      	movs	r2, #128	; 0x80
 801859c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801859e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80185a2:	2b03      	cmp	r3, #3
 80185a4:	d149      	bne.n	801863a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80185a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185a8:	3330      	adds	r3, #48	; 0x30
 80185aa:	3330      	adds	r3, #48	; 0x30
 80185ac:	4618      	mov	r0, r3
 80185ae:	f7fe fc33 	bl	8016e18 <ld_word>
 80185b2:	4603      	mov	r3, r0
 80185b4:	2b01      	cmp	r3, #1
 80185b6:	d140      	bne.n	801863a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80185b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80185ba:	3301      	adds	r3, #1
 80185bc:	4619      	mov	r1, r3
 80185be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80185c0:	f7fe fe9e 	bl	8017300 <move_window>
 80185c4:	4603      	mov	r3, r0
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d137      	bne.n	801863a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80185ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185cc:	2200      	movs	r2, #0
 80185ce:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80185d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185d2:	3330      	adds	r3, #48	; 0x30
 80185d4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80185d8:	4618      	mov	r0, r3
 80185da:	f7fe fc1d 	bl	8016e18 <ld_word>
 80185de:	4603      	mov	r3, r0
 80185e0:	461a      	mov	r2, r3
 80185e2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80185e6:	429a      	cmp	r2, r3
 80185e8:	d127      	bne.n	801863a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80185ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185ec:	3330      	adds	r3, #48	; 0x30
 80185ee:	4618      	mov	r0, r3
 80185f0:	f7fe fc2a 	bl	8016e48 <ld_dword>
 80185f4:	4603      	mov	r3, r0
 80185f6:	4a1c      	ldr	r2, [pc, #112]	; (8018668 <find_volume+0x48c>)
 80185f8:	4293      	cmp	r3, r2
 80185fa:	d11e      	bne.n	801863a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80185fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185fe:	3330      	adds	r3, #48	; 0x30
 8018600:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8018604:	4618      	mov	r0, r3
 8018606:	f7fe fc1f 	bl	8016e48 <ld_dword>
 801860a:	4603      	mov	r3, r0
 801860c:	4a17      	ldr	r2, [pc, #92]	; (801866c <find_volume+0x490>)
 801860e:	4293      	cmp	r3, r2
 8018610:	d113      	bne.n	801863a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8018612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018614:	3330      	adds	r3, #48	; 0x30
 8018616:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801861a:	4618      	mov	r0, r3
 801861c:	f7fe fc14 	bl	8016e48 <ld_dword>
 8018620:	4602      	mov	r2, r0
 8018622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018624:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8018626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018628:	3330      	adds	r3, #48	; 0x30
 801862a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801862e:	4618      	mov	r0, r3
 8018630:	f7fe fc0a 	bl	8016e48 <ld_dword>
 8018634:	4602      	mov	r2, r0
 8018636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018638:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801863a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801863c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8018640:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8018642:	4b0b      	ldr	r3, [pc, #44]	; (8018670 <find_volume+0x494>)
 8018644:	881b      	ldrh	r3, [r3, #0]
 8018646:	3301      	adds	r3, #1
 8018648:	b29a      	uxth	r2, r3
 801864a:	4b09      	ldr	r3, [pc, #36]	; (8018670 <find_volume+0x494>)
 801864c:	801a      	strh	r2, [r3, #0]
 801864e:	4b08      	ldr	r3, [pc, #32]	; (8018670 <find_volume+0x494>)
 8018650:	881a      	ldrh	r2, [r3, #0]
 8018652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018654:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8018656:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018658:	f7fe fdea 	bl	8017230 <clear_lock>
#endif
	return FR_OK;
 801865c:	2300      	movs	r3, #0
}
 801865e:	4618      	mov	r0, r3
 8018660:	3758      	adds	r7, #88	; 0x58
 8018662:	46bd      	mov	sp, r7
 8018664:	bd80      	pop	{r7, pc}
 8018666:	bf00      	nop
 8018668:	41615252 	.word	0x41615252
 801866c:	61417272 	.word	0x61417272
 8018670:	20001380 	.word	0x20001380

08018674 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8018674:	b580      	push	{r7, lr}
 8018676:	b084      	sub	sp, #16
 8018678:	af00      	add	r7, sp, #0
 801867a:	6078      	str	r0, [r7, #4]
 801867c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801867e:	2309      	movs	r3, #9
 8018680:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	2b00      	cmp	r3, #0
 8018686:	d01c      	beq.n	80186c2 <validate+0x4e>
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	2b00      	cmp	r3, #0
 801868e:	d018      	beq.n	80186c2 <validate+0x4e>
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	681b      	ldr	r3, [r3, #0]
 8018694:	781b      	ldrb	r3, [r3, #0]
 8018696:	2b00      	cmp	r3, #0
 8018698:	d013      	beq.n	80186c2 <validate+0x4e>
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	889a      	ldrh	r2, [r3, #4]
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	88db      	ldrh	r3, [r3, #6]
 80186a4:	429a      	cmp	r2, r3
 80186a6:	d10c      	bne.n	80186c2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	681b      	ldr	r3, [r3, #0]
 80186ac:	785b      	ldrb	r3, [r3, #1]
 80186ae:	4618      	mov	r0, r3
 80186b0:	f7fe fb14 	bl	8016cdc <disk_status>
 80186b4:	4603      	mov	r3, r0
 80186b6:	f003 0301 	and.w	r3, r3, #1
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	d101      	bne.n	80186c2 <validate+0x4e>
			res = FR_OK;
 80186be:	2300      	movs	r3, #0
 80186c0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80186c2:	7bfb      	ldrb	r3, [r7, #15]
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d102      	bne.n	80186ce <validate+0x5a>
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	e000      	b.n	80186d0 <validate+0x5c>
 80186ce:	2300      	movs	r3, #0
 80186d0:	683a      	ldr	r2, [r7, #0]
 80186d2:	6013      	str	r3, [r2, #0]
	return res;
 80186d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80186d6:	4618      	mov	r0, r3
 80186d8:	3710      	adds	r7, #16
 80186da:	46bd      	mov	sp, r7
 80186dc:	bd80      	pop	{r7, pc}
	...

080186e0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80186e0:	b580      	push	{r7, lr}
 80186e2:	b088      	sub	sp, #32
 80186e4:	af00      	add	r7, sp, #0
 80186e6:	60f8      	str	r0, [r7, #12]
 80186e8:	60b9      	str	r1, [r7, #8]
 80186ea:	4613      	mov	r3, r2
 80186ec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80186ee:	68bb      	ldr	r3, [r7, #8]
 80186f0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80186f2:	f107 0310 	add.w	r3, r7, #16
 80186f6:	4618      	mov	r0, r3
 80186f8:	f7ff fcd5 	bl	80180a6 <get_ldnumber>
 80186fc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80186fe:	69fb      	ldr	r3, [r7, #28]
 8018700:	2b00      	cmp	r3, #0
 8018702:	da01      	bge.n	8018708 <f_mount+0x28>
 8018704:	230b      	movs	r3, #11
 8018706:	e02b      	b.n	8018760 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8018708:	4a17      	ldr	r2, [pc, #92]	; (8018768 <f_mount+0x88>)
 801870a:	69fb      	ldr	r3, [r7, #28]
 801870c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018710:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8018712:	69bb      	ldr	r3, [r7, #24]
 8018714:	2b00      	cmp	r3, #0
 8018716:	d005      	beq.n	8018724 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8018718:	69b8      	ldr	r0, [r7, #24]
 801871a:	f7fe fd89 	bl	8017230 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801871e:	69bb      	ldr	r3, [r7, #24]
 8018720:	2200      	movs	r2, #0
 8018722:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8018724:	68fb      	ldr	r3, [r7, #12]
 8018726:	2b00      	cmp	r3, #0
 8018728:	d002      	beq.n	8018730 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801872a:	68fb      	ldr	r3, [r7, #12]
 801872c:	2200      	movs	r2, #0
 801872e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8018730:	68fa      	ldr	r2, [r7, #12]
 8018732:	490d      	ldr	r1, [pc, #52]	; (8018768 <f_mount+0x88>)
 8018734:	69fb      	ldr	r3, [r7, #28]
 8018736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801873a:	68fb      	ldr	r3, [r7, #12]
 801873c:	2b00      	cmp	r3, #0
 801873e:	d002      	beq.n	8018746 <f_mount+0x66>
 8018740:	79fb      	ldrb	r3, [r7, #7]
 8018742:	2b01      	cmp	r3, #1
 8018744:	d001      	beq.n	801874a <f_mount+0x6a>
 8018746:	2300      	movs	r3, #0
 8018748:	e00a      	b.n	8018760 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801874a:	f107 010c 	add.w	r1, r7, #12
 801874e:	f107 0308 	add.w	r3, r7, #8
 8018752:	2200      	movs	r2, #0
 8018754:	4618      	mov	r0, r3
 8018756:	f7ff fd41 	bl	80181dc <find_volume>
 801875a:	4603      	mov	r3, r0
 801875c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801875e:	7dfb      	ldrb	r3, [r7, #23]
}
 8018760:	4618      	mov	r0, r3
 8018762:	3720      	adds	r7, #32
 8018764:	46bd      	mov	sp, r7
 8018766:	bd80      	pop	{r7, pc}
 8018768:	2000137c 	.word	0x2000137c

0801876c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801876c:	b580      	push	{r7, lr}
 801876e:	b09a      	sub	sp, #104	; 0x68
 8018770:	af00      	add	r7, sp, #0
 8018772:	60f8      	str	r0, [r7, #12]
 8018774:	60b9      	str	r1, [r7, #8]
 8018776:	4613      	mov	r3, r2
 8018778:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801877a:	68fb      	ldr	r3, [r7, #12]
 801877c:	2b00      	cmp	r3, #0
 801877e:	d101      	bne.n	8018784 <f_open+0x18>
 8018780:	2309      	movs	r3, #9
 8018782:	e1ad      	b.n	8018ae0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8018784:	79fb      	ldrb	r3, [r7, #7]
 8018786:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801878a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801878c:	79fa      	ldrb	r2, [r7, #7]
 801878e:	f107 0114 	add.w	r1, r7, #20
 8018792:	f107 0308 	add.w	r3, r7, #8
 8018796:	4618      	mov	r0, r3
 8018798:	f7ff fd20 	bl	80181dc <find_volume>
 801879c:	4603      	mov	r3, r0
 801879e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80187a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	f040 8191 	bne.w	8018ace <f_open+0x362>
		dj.obj.fs = fs;
 80187ac:	697b      	ldr	r3, [r7, #20]
 80187ae:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80187b0:	68ba      	ldr	r2, [r7, #8]
 80187b2:	f107 0318 	add.w	r3, r7, #24
 80187b6:	4611      	mov	r1, r2
 80187b8:	4618      	mov	r0, r3
 80187ba:	f7ff fc03 	bl	8017fc4 <follow_path>
 80187be:	4603      	mov	r3, r0
 80187c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80187c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	d11a      	bne.n	8018802 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80187cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80187d0:	b25b      	sxtb	r3, r3
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	da03      	bge.n	80187de <f_open+0x72>
				res = FR_INVALID_NAME;
 80187d6:	2306      	movs	r3, #6
 80187d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80187dc:	e011      	b.n	8018802 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80187de:	79fb      	ldrb	r3, [r7, #7]
 80187e0:	f023 0301 	bic.w	r3, r3, #1
 80187e4:	2b00      	cmp	r3, #0
 80187e6:	bf14      	ite	ne
 80187e8:	2301      	movne	r3, #1
 80187ea:	2300      	moveq	r3, #0
 80187ec:	b2db      	uxtb	r3, r3
 80187ee:	461a      	mov	r2, r3
 80187f0:	f107 0318 	add.w	r3, r7, #24
 80187f4:	4611      	mov	r1, r2
 80187f6:	4618      	mov	r0, r3
 80187f8:	f7fe fc0e 	bl	8017018 <chk_lock>
 80187fc:	4603      	mov	r3, r0
 80187fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8018802:	79fb      	ldrb	r3, [r7, #7]
 8018804:	f003 031c 	and.w	r3, r3, #28
 8018808:	2b00      	cmp	r3, #0
 801880a:	d07f      	beq.n	801890c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801880c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018810:	2b00      	cmp	r3, #0
 8018812:	d017      	beq.n	8018844 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8018814:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018818:	2b04      	cmp	r3, #4
 801881a:	d10e      	bne.n	801883a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801881c:	f7fe fc58 	bl	80170d0 <enq_lock>
 8018820:	4603      	mov	r3, r0
 8018822:	2b00      	cmp	r3, #0
 8018824:	d006      	beq.n	8018834 <f_open+0xc8>
 8018826:	f107 0318 	add.w	r3, r7, #24
 801882a:	4618      	mov	r0, r3
 801882c:	f7ff fb03 	bl	8017e36 <dir_register>
 8018830:	4603      	mov	r3, r0
 8018832:	e000      	b.n	8018836 <f_open+0xca>
 8018834:	2312      	movs	r3, #18
 8018836:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801883a:	79fb      	ldrb	r3, [r7, #7]
 801883c:	f043 0308 	orr.w	r3, r3, #8
 8018840:	71fb      	strb	r3, [r7, #7]
 8018842:	e010      	b.n	8018866 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8018844:	7fbb      	ldrb	r3, [r7, #30]
 8018846:	f003 0311 	and.w	r3, r3, #17
 801884a:	2b00      	cmp	r3, #0
 801884c:	d003      	beq.n	8018856 <f_open+0xea>
					res = FR_DENIED;
 801884e:	2307      	movs	r3, #7
 8018850:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8018854:	e007      	b.n	8018866 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8018856:	79fb      	ldrb	r3, [r7, #7]
 8018858:	f003 0304 	and.w	r3, r3, #4
 801885c:	2b00      	cmp	r3, #0
 801885e:	d002      	beq.n	8018866 <f_open+0xfa>
 8018860:	2308      	movs	r3, #8
 8018862:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8018866:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801886a:	2b00      	cmp	r3, #0
 801886c:	d168      	bne.n	8018940 <f_open+0x1d4>
 801886e:	79fb      	ldrb	r3, [r7, #7]
 8018870:	f003 0308 	and.w	r3, r3, #8
 8018874:	2b00      	cmp	r3, #0
 8018876:	d063      	beq.n	8018940 <f_open+0x1d4>
				dw = GET_FATTIME();
 8018878:	f7fc f82c 	bl	80148d4 <get_fattime>
 801887c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801887e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018880:	330e      	adds	r3, #14
 8018882:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018884:	4618      	mov	r0, r3
 8018886:	f7fe fb1d 	bl	8016ec4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801888a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801888c:	3316      	adds	r3, #22
 801888e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018890:	4618      	mov	r0, r3
 8018892:	f7fe fb17 	bl	8016ec4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8018896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018898:	330b      	adds	r3, #11
 801889a:	2220      	movs	r2, #32
 801889c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801889e:	697b      	ldr	r3, [r7, #20]
 80188a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80188a2:	4611      	mov	r1, r2
 80188a4:	4618      	mov	r0, r3
 80188a6:	f7ff fa32 	bl	8017d0e <ld_clust>
 80188aa:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80188ac:	697b      	ldr	r3, [r7, #20]
 80188ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80188b0:	2200      	movs	r2, #0
 80188b2:	4618      	mov	r0, r3
 80188b4:	f7ff fa4a 	bl	8017d4c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80188b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188ba:	331c      	adds	r3, #28
 80188bc:	2100      	movs	r1, #0
 80188be:	4618      	mov	r0, r3
 80188c0:	f7fe fb00 	bl	8016ec4 <st_dword>
					fs->wflag = 1;
 80188c4:	697b      	ldr	r3, [r7, #20]
 80188c6:	2201      	movs	r2, #1
 80188c8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80188ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d037      	beq.n	8018940 <f_open+0x1d4>
						dw = fs->winsect;
 80188d0:	697b      	ldr	r3, [r7, #20]
 80188d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188d4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80188d6:	f107 0318 	add.w	r3, r7, #24
 80188da:	2200      	movs	r2, #0
 80188dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80188de:	4618      	mov	r0, r3
 80188e0:	f7fe ff5d 	bl	801779e <remove_chain>
 80188e4:	4603      	mov	r3, r0
 80188e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80188ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d126      	bne.n	8018940 <f_open+0x1d4>
							res = move_window(fs, dw);
 80188f2:	697b      	ldr	r3, [r7, #20]
 80188f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80188f6:	4618      	mov	r0, r3
 80188f8:	f7fe fd02 	bl	8017300 <move_window>
 80188fc:	4603      	mov	r3, r0
 80188fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8018902:	697b      	ldr	r3, [r7, #20]
 8018904:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018906:	3a01      	subs	r2, #1
 8018908:	60da      	str	r2, [r3, #12]
 801890a:	e019      	b.n	8018940 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801890c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018910:	2b00      	cmp	r3, #0
 8018912:	d115      	bne.n	8018940 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8018914:	7fbb      	ldrb	r3, [r7, #30]
 8018916:	f003 0310 	and.w	r3, r3, #16
 801891a:	2b00      	cmp	r3, #0
 801891c:	d003      	beq.n	8018926 <f_open+0x1ba>
					res = FR_NO_FILE;
 801891e:	2304      	movs	r3, #4
 8018920:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8018924:	e00c      	b.n	8018940 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8018926:	79fb      	ldrb	r3, [r7, #7]
 8018928:	f003 0302 	and.w	r3, r3, #2
 801892c:	2b00      	cmp	r3, #0
 801892e:	d007      	beq.n	8018940 <f_open+0x1d4>
 8018930:	7fbb      	ldrb	r3, [r7, #30]
 8018932:	f003 0301 	and.w	r3, r3, #1
 8018936:	2b00      	cmp	r3, #0
 8018938:	d002      	beq.n	8018940 <f_open+0x1d4>
						res = FR_DENIED;
 801893a:	2307      	movs	r3, #7
 801893c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8018940:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018944:	2b00      	cmp	r3, #0
 8018946:	d128      	bne.n	801899a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8018948:	79fb      	ldrb	r3, [r7, #7]
 801894a:	f003 0308 	and.w	r3, r3, #8
 801894e:	2b00      	cmp	r3, #0
 8018950:	d003      	beq.n	801895a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8018952:	79fb      	ldrb	r3, [r7, #7]
 8018954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018958:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801895a:	697b      	ldr	r3, [r7, #20]
 801895c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801895e:	68fb      	ldr	r3, [r7, #12]
 8018960:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8018962:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018964:	68fb      	ldr	r3, [r7, #12]
 8018966:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8018968:	79fb      	ldrb	r3, [r7, #7]
 801896a:	f023 0301 	bic.w	r3, r3, #1
 801896e:	2b00      	cmp	r3, #0
 8018970:	bf14      	ite	ne
 8018972:	2301      	movne	r3, #1
 8018974:	2300      	moveq	r3, #0
 8018976:	b2db      	uxtb	r3, r3
 8018978:	461a      	mov	r2, r3
 801897a:	f107 0318 	add.w	r3, r7, #24
 801897e:	4611      	mov	r1, r2
 8018980:	4618      	mov	r0, r3
 8018982:	f7fe fbc7 	bl	8017114 <inc_lock>
 8018986:	4602      	mov	r2, r0
 8018988:	68fb      	ldr	r3, [r7, #12]
 801898a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801898c:	68fb      	ldr	r3, [r7, #12]
 801898e:	691b      	ldr	r3, [r3, #16]
 8018990:	2b00      	cmp	r3, #0
 8018992:	d102      	bne.n	801899a <f_open+0x22e>
 8018994:	2302      	movs	r3, #2
 8018996:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801899a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801899e:	2b00      	cmp	r3, #0
 80189a0:	f040 8095 	bne.w	8018ace <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80189a4:	697b      	ldr	r3, [r7, #20]
 80189a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80189a8:	4611      	mov	r1, r2
 80189aa:	4618      	mov	r0, r3
 80189ac:	f7ff f9af 	bl	8017d0e <ld_clust>
 80189b0:	4602      	mov	r2, r0
 80189b2:	68fb      	ldr	r3, [r7, #12]
 80189b4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80189b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189b8:	331c      	adds	r3, #28
 80189ba:	4618      	mov	r0, r3
 80189bc:	f7fe fa44 	bl	8016e48 <ld_dword>
 80189c0:	4602      	mov	r2, r0
 80189c2:	68fb      	ldr	r3, [r7, #12]
 80189c4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80189c6:	68fb      	ldr	r3, [r7, #12]
 80189c8:	2200      	movs	r2, #0
 80189ca:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80189cc:	697a      	ldr	r2, [r7, #20]
 80189ce:	68fb      	ldr	r3, [r7, #12]
 80189d0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80189d2:	697b      	ldr	r3, [r7, #20]
 80189d4:	88da      	ldrh	r2, [r3, #6]
 80189d6:	68fb      	ldr	r3, [r7, #12]
 80189d8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80189da:	68fb      	ldr	r3, [r7, #12]
 80189dc:	79fa      	ldrb	r2, [r7, #7]
 80189de:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80189e0:	68fb      	ldr	r3, [r7, #12]
 80189e2:	2200      	movs	r2, #0
 80189e4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80189e6:	68fb      	ldr	r3, [r7, #12]
 80189e8:	2200      	movs	r2, #0
 80189ea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80189ec:	68fb      	ldr	r3, [r7, #12]
 80189ee:	2200      	movs	r2, #0
 80189f0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80189f2:	68fb      	ldr	r3, [r7, #12]
 80189f4:	3330      	adds	r3, #48	; 0x30
 80189f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80189fa:	2100      	movs	r1, #0
 80189fc:	4618      	mov	r0, r3
 80189fe:	f7fe faae 	bl	8016f5e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8018a02:	79fb      	ldrb	r3, [r7, #7]
 8018a04:	f003 0320 	and.w	r3, r3, #32
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	d060      	beq.n	8018ace <f_open+0x362>
 8018a0c:	68fb      	ldr	r3, [r7, #12]
 8018a0e:	68db      	ldr	r3, [r3, #12]
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d05c      	beq.n	8018ace <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8018a14:	68fb      	ldr	r3, [r7, #12]
 8018a16:	68da      	ldr	r2, [r3, #12]
 8018a18:	68fb      	ldr	r3, [r7, #12]
 8018a1a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8018a1c:	697b      	ldr	r3, [r7, #20]
 8018a1e:	895b      	ldrh	r3, [r3, #10]
 8018a20:	025b      	lsls	r3, r3, #9
 8018a22:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8018a24:	68fb      	ldr	r3, [r7, #12]
 8018a26:	689b      	ldr	r3, [r3, #8]
 8018a28:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8018a2a:	68fb      	ldr	r3, [r7, #12]
 8018a2c:	68db      	ldr	r3, [r3, #12]
 8018a2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8018a30:	e016      	b.n	8018a60 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8018a32:	68fb      	ldr	r3, [r7, #12]
 8018a34:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8018a36:	4618      	mov	r0, r3
 8018a38:	f7fe fd1d 	bl	8017476 <get_fat>
 8018a3c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8018a3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018a40:	2b01      	cmp	r3, #1
 8018a42:	d802      	bhi.n	8018a4a <f_open+0x2de>
 8018a44:	2302      	movs	r3, #2
 8018a46:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8018a4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018a50:	d102      	bne.n	8018a58 <f_open+0x2ec>
 8018a52:	2301      	movs	r3, #1
 8018a54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8018a58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8018a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018a5c:	1ad3      	subs	r3, r2, r3
 8018a5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8018a60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d103      	bne.n	8018a70 <f_open+0x304>
 8018a68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8018a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018a6c:	429a      	cmp	r2, r3
 8018a6e:	d8e0      	bhi.n	8018a32 <f_open+0x2c6>
				}
				fp->clust = clst;
 8018a70:	68fb      	ldr	r3, [r7, #12]
 8018a72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8018a74:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8018a76:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	d127      	bne.n	8018ace <f_open+0x362>
 8018a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	d022      	beq.n	8018ace <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8018a88:	697b      	ldr	r3, [r7, #20]
 8018a8a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8018a8c:	4618      	mov	r0, r3
 8018a8e:	f7fe fcd3 	bl	8017438 <clust2sect>
 8018a92:	64f8      	str	r0, [r7, #76]	; 0x4c
 8018a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d103      	bne.n	8018aa2 <f_open+0x336>
						res = FR_INT_ERR;
 8018a9a:	2302      	movs	r3, #2
 8018a9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8018aa0:	e015      	b.n	8018ace <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8018aa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018aa4:	0a5a      	lsrs	r2, r3, #9
 8018aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018aa8:	441a      	add	r2, r3
 8018aaa:	68fb      	ldr	r3, [r7, #12]
 8018aac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8018aae:	697b      	ldr	r3, [r7, #20]
 8018ab0:	7858      	ldrb	r0, [r3, #1]
 8018ab2:	68fb      	ldr	r3, [r7, #12]
 8018ab4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018ab8:	68fb      	ldr	r3, [r7, #12]
 8018aba:	6a1a      	ldr	r2, [r3, #32]
 8018abc:	2301      	movs	r3, #1
 8018abe:	f7fe f94d 	bl	8016d5c <disk_read>
 8018ac2:	4603      	mov	r3, r0
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	d002      	beq.n	8018ace <f_open+0x362>
 8018ac8:	2301      	movs	r3, #1
 8018aca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8018ace:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d002      	beq.n	8018adc <f_open+0x370>
 8018ad6:	68fb      	ldr	r3, [r7, #12]
 8018ad8:	2200      	movs	r2, #0
 8018ada:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8018adc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8018ae0:	4618      	mov	r0, r3
 8018ae2:	3768      	adds	r7, #104	; 0x68
 8018ae4:	46bd      	mov	sp, r7
 8018ae6:	bd80      	pop	{r7, pc}

08018ae8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8018ae8:	b580      	push	{r7, lr}
 8018aea:	b08c      	sub	sp, #48	; 0x30
 8018aec:	af00      	add	r7, sp, #0
 8018aee:	60f8      	str	r0, [r7, #12]
 8018af0:	60b9      	str	r1, [r7, #8]
 8018af2:	607a      	str	r2, [r7, #4]
 8018af4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8018af6:	68bb      	ldr	r3, [r7, #8]
 8018af8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8018afa:	683b      	ldr	r3, [r7, #0]
 8018afc:	2200      	movs	r2, #0
 8018afe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8018b00:	68fb      	ldr	r3, [r7, #12]
 8018b02:	f107 0210 	add.w	r2, r7, #16
 8018b06:	4611      	mov	r1, r2
 8018b08:	4618      	mov	r0, r3
 8018b0a:	f7ff fdb3 	bl	8018674 <validate>
 8018b0e:	4603      	mov	r3, r0
 8018b10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8018b14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	d107      	bne.n	8018b2c <f_write+0x44>
 8018b1c:	68fb      	ldr	r3, [r7, #12]
 8018b1e:	7d5b      	ldrb	r3, [r3, #21]
 8018b20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8018b24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	d002      	beq.n	8018b32 <f_write+0x4a>
 8018b2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018b30:	e14b      	b.n	8018dca <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8018b32:	68fb      	ldr	r3, [r7, #12]
 8018b34:	7d1b      	ldrb	r3, [r3, #20]
 8018b36:	f003 0302 	and.w	r3, r3, #2
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	d101      	bne.n	8018b42 <f_write+0x5a>
 8018b3e:	2307      	movs	r3, #7
 8018b40:	e143      	b.n	8018dca <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8018b42:	68fb      	ldr	r3, [r7, #12]
 8018b44:	699a      	ldr	r2, [r3, #24]
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	441a      	add	r2, r3
 8018b4a:	68fb      	ldr	r3, [r7, #12]
 8018b4c:	699b      	ldr	r3, [r3, #24]
 8018b4e:	429a      	cmp	r2, r3
 8018b50:	f080 812d 	bcs.w	8018dae <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8018b54:	68fb      	ldr	r3, [r7, #12]
 8018b56:	699b      	ldr	r3, [r3, #24]
 8018b58:	43db      	mvns	r3, r3
 8018b5a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8018b5c:	e127      	b.n	8018dae <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8018b5e:	68fb      	ldr	r3, [r7, #12]
 8018b60:	699b      	ldr	r3, [r3, #24]
 8018b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	f040 80e3 	bne.w	8018d32 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8018b6c:	68fb      	ldr	r3, [r7, #12]
 8018b6e:	699b      	ldr	r3, [r3, #24]
 8018b70:	0a5b      	lsrs	r3, r3, #9
 8018b72:	693a      	ldr	r2, [r7, #16]
 8018b74:	8952      	ldrh	r2, [r2, #10]
 8018b76:	3a01      	subs	r2, #1
 8018b78:	4013      	ands	r3, r2
 8018b7a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8018b7c:	69bb      	ldr	r3, [r7, #24]
 8018b7e:	2b00      	cmp	r3, #0
 8018b80:	d143      	bne.n	8018c0a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8018b82:	68fb      	ldr	r3, [r7, #12]
 8018b84:	699b      	ldr	r3, [r3, #24]
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d10c      	bne.n	8018ba4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8018b8a:	68fb      	ldr	r3, [r7, #12]
 8018b8c:	689b      	ldr	r3, [r3, #8]
 8018b8e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8018b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	d11a      	bne.n	8018bcc <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8018b96:	68fb      	ldr	r3, [r7, #12]
 8018b98:	2100      	movs	r1, #0
 8018b9a:	4618      	mov	r0, r3
 8018b9c:	f7fe fe64 	bl	8017868 <create_chain>
 8018ba0:	62b8      	str	r0, [r7, #40]	; 0x28
 8018ba2:	e013      	b.n	8018bcc <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8018ba4:	68fb      	ldr	r3, [r7, #12]
 8018ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	d007      	beq.n	8018bbc <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8018bac:	68fb      	ldr	r3, [r7, #12]
 8018bae:	699b      	ldr	r3, [r3, #24]
 8018bb0:	4619      	mov	r1, r3
 8018bb2:	68f8      	ldr	r0, [r7, #12]
 8018bb4:	f7fe fef0 	bl	8017998 <clmt_clust>
 8018bb8:	62b8      	str	r0, [r7, #40]	; 0x28
 8018bba:	e007      	b.n	8018bcc <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8018bbc:	68fa      	ldr	r2, [r7, #12]
 8018bbe:	68fb      	ldr	r3, [r7, #12]
 8018bc0:	69db      	ldr	r3, [r3, #28]
 8018bc2:	4619      	mov	r1, r3
 8018bc4:	4610      	mov	r0, r2
 8018bc6:	f7fe fe4f 	bl	8017868 <create_chain>
 8018bca:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8018bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	f000 80f2 	beq.w	8018db8 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8018bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bd6:	2b01      	cmp	r3, #1
 8018bd8:	d104      	bne.n	8018be4 <f_write+0xfc>
 8018bda:	68fb      	ldr	r3, [r7, #12]
 8018bdc:	2202      	movs	r2, #2
 8018bde:	755a      	strb	r2, [r3, #21]
 8018be0:	2302      	movs	r3, #2
 8018be2:	e0f2      	b.n	8018dca <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018be6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018bea:	d104      	bne.n	8018bf6 <f_write+0x10e>
 8018bec:	68fb      	ldr	r3, [r7, #12]
 8018bee:	2201      	movs	r2, #1
 8018bf0:	755a      	strb	r2, [r3, #21]
 8018bf2:	2301      	movs	r3, #1
 8018bf4:	e0e9      	b.n	8018dca <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8018bf6:	68fb      	ldr	r3, [r7, #12]
 8018bf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018bfa:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8018bfc:	68fb      	ldr	r3, [r7, #12]
 8018bfe:	689b      	ldr	r3, [r3, #8]
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	d102      	bne.n	8018c0a <f_write+0x122>
 8018c04:	68fb      	ldr	r3, [r7, #12]
 8018c06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018c08:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8018c0a:	68fb      	ldr	r3, [r7, #12]
 8018c0c:	7d1b      	ldrb	r3, [r3, #20]
 8018c0e:	b25b      	sxtb	r3, r3
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	da18      	bge.n	8018c46 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018c14:	693b      	ldr	r3, [r7, #16]
 8018c16:	7858      	ldrb	r0, [r3, #1]
 8018c18:	68fb      	ldr	r3, [r7, #12]
 8018c1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018c1e:	68fb      	ldr	r3, [r7, #12]
 8018c20:	6a1a      	ldr	r2, [r3, #32]
 8018c22:	2301      	movs	r3, #1
 8018c24:	f7fe f8ba 	bl	8016d9c <disk_write>
 8018c28:	4603      	mov	r3, r0
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d004      	beq.n	8018c38 <f_write+0x150>
 8018c2e:	68fb      	ldr	r3, [r7, #12]
 8018c30:	2201      	movs	r2, #1
 8018c32:	755a      	strb	r2, [r3, #21]
 8018c34:	2301      	movs	r3, #1
 8018c36:	e0c8      	b.n	8018dca <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8018c38:	68fb      	ldr	r3, [r7, #12]
 8018c3a:	7d1b      	ldrb	r3, [r3, #20]
 8018c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018c40:	b2da      	uxtb	r2, r3
 8018c42:	68fb      	ldr	r3, [r7, #12]
 8018c44:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8018c46:	693a      	ldr	r2, [r7, #16]
 8018c48:	68fb      	ldr	r3, [r7, #12]
 8018c4a:	69db      	ldr	r3, [r3, #28]
 8018c4c:	4619      	mov	r1, r3
 8018c4e:	4610      	mov	r0, r2
 8018c50:	f7fe fbf2 	bl	8017438 <clust2sect>
 8018c54:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8018c56:	697b      	ldr	r3, [r7, #20]
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	d104      	bne.n	8018c66 <f_write+0x17e>
 8018c5c:	68fb      	ldr	r3, [r7, #12]
 8018c5e:	2202      	movs	r2, #2
 8018c60:	755a      	strb	r2, [r3, #21]
 8018c62:	2302      	movs	r3, #2
 8018c64:	e0b1      	b.n	8018dca <f_write+0x2e2>
			sect += csect;
 8018c66:	697a      	ldr	r2, [r7, #20]
 8018c68:	69bb      	ldr	r3, [r7, #24]
 8018c6a:	4413      	add	r3, r2
 8018c6c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	0a5b      	lsrs	r3, r3, #9
 8018c72:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8018c74:	6a3b      	ldr	r3, [r7, #32]
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	d03c      	beq.n	8018cf4 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8018c7a:	69ba      	ldr	r2, [r7, #24]
 8018c7c:	6a3b      	ldr	r3, [r7, #32]
 8018c7e:	4413      	add	r3, r2
 8018c80:	693a      	ldr	r2, [r7, #16]
 8018c82:	8952      	ldrh	r2, [r2, #10]
 8018c84:	4293      	cmp	r3, r2
 8018c86:	d905      	bls.n	8018c94 <f_write+0x1ac>
					cc = fs->csize - csect;
 8018c88:	693b      	ldr	r3, [r7, #16]
 8018c8a:	895b      	ldrh	r3, [r3, #10]
 8018c8c:	461a      	mov	r2, r3
 8018c8e:	69bb      	ldr	r3, [r7, #24]
 8018c90:	1ad3      	subs	r3, r2, r3
 8018c92:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018c94:	693b      	ldr	r3, [r7, #16]
 8018c96:	7858      	ldrb	r0, [r3, #1]
 8018c98:	6a3b      	ldr	r3, [r7, #32]
 8018c9a:	697a      	ldr	r2, [r7, #20]
 8018c9c:	69f9      	ldr	r1, [r7, #28]
 8018c9e:	f7fe f87d 	bl	8016d9c <disk_write>
 8018ca2:	4603      	mov	r3, r0
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	d004      	beq.n	8018cb2 <f_write+0x1ca>
 8018ca8:	68fb      	ldr	r3, [r7, #12]
 8018caa:	2201      	movs	r2, #1
 8018cac:	755a      	strb	r2, [r3, #21]
 8018cae:	2301      	movs	r3, #1
 8018cb0:	e08b      	b.n	8018dca <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8018cb2:	68fb      	ldr	r3, [r7, #12]
 8018cb4:	6a1a      	ldr	r2, [r3, #32]
 8018cb6:	697b      	ldr	r3, [r7, #20]
 8018cb8:	1ad3      	subs	r3, r2, r3
 8018cba:	6a3a      	ldr	r2, [r7, #32]
 8018cbc:	429a      	cmp	r2, r3
 8018cbe:	d915      	bls.n	8018cec <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8018cc0:	68fb      	ldr	r3, [r7, #12]
 8018cc2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8018cc6:	68fb      	ldr	r3, [r7, #12]
 8018cc8:	6a1a      	ldr	r2, [r3, #32]
 8018cca:	697b      	ldr	r3, [r7, #20]
 8018ccc:	1ad3      	subs	r3, r2, r3
 8018cce:	025b      	lsls	r3, r3, #9
 8018cd0:	69fa      	ldr	r2, [r7, #28]
 8018cd2:	4413      	add	r3, r2
 8018cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018cd8:	4619      	mov	r1, r3
 8018cda:	f7fe f91f 	bl	8016f1c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8018cde:	68fb      	ldr	r3, [r7, #12]
 8018ce0:	7d1b      	ldrb	r3, [r3, #20]
 8018ce2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018ce6:	b2da      	uxtb	r2, r3
 8018ce8:	68fb      	ldr	r3, [r7, #12]
 8018cea:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8018cec:	6a3b      	ldr	r3, [r7, #32]
 8018cee:	025b      	lsls	r3, r3, #9
 8018cf0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8018cf2:	e03f      	b.n	8018d74 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8018cf4:	68fb      	ldr	r3, [r7, #12]
 8018cf6:	6a1b      	ldr	r3, [r3, #32]
 8018cf8:	697a      	ldr	r2, [r7, #20]
 8018cfa:	429a      	cmp	r2, r3
 8018cfc:	d016      	beq.n	8018d2c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8018cfe:	68fb      	ldr	r3, [r7, #12]
 8018d00:	699a      	ldr	r2, [r3, #24]
 8018d02:	68fb      	ldr	r3, [r7, #12]
 8018d04:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8018d06:	429a      	cmp	r2, r3
 8018d08:	d210      	bcs.n	8018d2c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8018d0a:	693b      	ldr	r3, [r7, #16]
 8018d0c:	7858      	ldrb	r0, [r3, #1]
 8018d0e:	68fb      	ldr	r3, [r7, #12]
 8018d10:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018d14:	2301      	movs	r3, #1
 8018d16:	697a      	ldr	r2, [r7, #20]
 8018d18:	f7fe f820 	bl	8016d5c <disk_read>
 8018d1c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	d004      	beq.n	8018d2c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8018d22:	68fb      	ldr	r3, [r7, #12]
 8018d24:	2201      	movs	r2, #1
 8018d26:	755a      	strb	r2, [r3, #21]
 8018d28:	2301      	movs	r3, #1
 8018d2a:	e04e      	b.n	8018dca <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8018d2c:	68fb      	ldr	r3, [r7, #12]
 8018d2e:	697a      	ldr	r2, [r7, #20]
 8018d30:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8018d32:	68fb      	ldr	r3, [r7, #12]
 8018d34:	699b      	ldr	r3, [r3, #24]
 8018d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018d3a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8018d3e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8018d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018d42:	687b      	ldr	r3, [r7, #4]
 8018d44:	429a      	cmp	r2, r3
 8018d46:	d901      	bls.n	8018d4c <f_write+0x264>
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8018d4c:	68fb      	ldr	r3, [r7, #12]
 8018d4e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018d52:	68fb      	ldr	r3, [r7, #12]
 8018d54:	699b      	ldr	r3, [r3, #24]
 8018d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018d5a:	4413      	add	r3, r2
 8018d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018d5e:	69f9      	ldr	r1, [r7, #28]
 8018d60:	4618      	mov	r0, r3
 8018d62:	f7fe f8db 	bl	8016f1c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8018d66:	68fb      	ldr	r3, [r7, #12]
 8018d68:	7d1b      	ldrb	r3, [r3, #20]
 8018d6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018d6e:	b2da      	uxtb	r2, r3
 8018d70:	68fb      	ldr	r3, [r7, #12]
 8018d72:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8018d74:	69fa      	ldr	r2, [r7, #28]
 8018d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d78:	4413      	add	r3, r2
 8018d7a:	61fb      	str	r3, [r7, #28]
 8018d7c:	68fb      	ldr	r3, [r7, #12]
 8018d7e:	699a      	ldr	r2, [r3, #24]
 8018d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d82:	441a      	add	r2, r3
 8018d84:	68fb      	ldr	r3, [r7, #12]
 8018d86:	619a      	str	r2, [r3, #24]
 8018d88:	68fb      	ldr	r3, [r7, #12]
 8018d8a:	68da      	ldr	r2, [r3, #12]
 8018d8c:	68fb      	ldr	r3, [r7, #12]
 8018d8e:	699b      	ldr	r3, [r3, #24]
 8018d90:	429a      	cmp	r2, r3
 8018d92:	bf38      	it	cc
 8018d94:	461a      	movcc	r2, r3
 8018d96:	68fb      	ldr	r3, [r7, #12]
 8018d98:	60da      	str	r2, [r3, #12]
 8018d9a:	683b      	ldr	r3, [r7, #0]
 8018d9c:	681a      	ldr	r2, [r3, #0]
 8018d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018da0:	441a      	add	r2, r3
 8018da2:	683b      	ldr	r3, [r7, #0]
 8018da4:	601a      	str	r2, [r3, #0]
 8018da6:	687a      	ldr	r2, [r7, #4]
 8018da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018daa:	1ad3      	subs	r3, r2, r3
 8018dac:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	2b00      	cmp	r3, #0
 8018db2:	f47f aed4 	bne.w	8018b5e <f_write+0x76>
 8018db6:	e000      	b.n	8018dba <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8018db8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8018dba:	68fb      	ldr	r3, [r7, #12]
 8018dbc:	7d1b      	ldrb	r3, [r3, #20]
 8018dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018dc2:	b2da      	uxtb	r2, r3
 8018dc4:	68fb      	ldr	r3, [r7, #12]
 8018dc6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8018dc8:	2300      	movs	r3, #0
}
 8018dca:	4618      	mov	r0, r3
 8018dcc:	3730      	adds	r7, #48	; 0x30
 8018dce:	46bd      	mov	sp, r7
 8018dd0:	bd80      	pop	{r7, pc}

08018dd2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8018dd2:	b580      	push	{r7, lr}
 8018dd4:	b086      	sub	sp, #24
 8018dd6:	af00      	add	r7, sp, #0
 8018dd8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	f107 0208 	add.w	r2, r7, #8
 8018de0:	4611      	mov	r1, r2
 8018de2:	4618      	mov	r0, r3
 8018de4:	f7ff fc46 	bl	8018674 <validate>
 8018de8:	4603      	mov	r3, r0
 8018dea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8018dec:	7dfb      	ldrb	r3, [r7, #23]
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	d168      	bne.n	8018ec4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	7d1b      	ldrb	r3, [r3, #20]
 8018df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d062      	beq.n	8018ec4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	7d1b      	ldrb	r3, [r3, #20]
 8018e02:	b25b      	sxtb	r3, r3
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	da15      	bge.n	8018e34 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8018e08:	68bb      	ldr	r3, [r7, #8]
 8018e0a:	7858      	ldrb	r0, [r3, #1]
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	6a1a      	ldr	r2, [r3, #32]
 8018e16:	2301      	movs	r3, #1
 8018e18:	f7fd ffc0 	bl	8016d9c <disk_write>
 8018e1c:	4603      	mov	r3, r0
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d001      	beq.n	8018e26 <f_sync+0x54>
 8018e22:	2301      	movs	r3, #1
 8018e24:	e04f      	b.n	8018ec6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	7d1b      	ldrb	r3, [r3, #20]
 8018e2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018e2e:	b2da      	uxtb	r2, r3
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8018e34:	f7fb fd4e 	bl	80148d4 <get_fattime>
 8018e38:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8018e3a:	68ba      	ldr	r2, [r7, #8]
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e40:	4619      	mov	r1, r3
 8018e42:	4610      	mov	r0, r2
 8018e44:	f7fe fa5c 	bl	8017300 <move_window>
 8018e48:	4603      	mov	r3, r0
 8018e4a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8018e4c:	7dfb      	ldrb	r3, [r7, #23]
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	d138      	bne.n	8018ec4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e56:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8018e58:	68fb      	ldr	r3, [r7, #12]
 8018e5a:	330b      	adds	r3, #11
 8018e5c:	781a      	ldrb	r2, [r3, #0]
 8018e5e:	68fb      	ldr	r3, [r7, #12]
 8018e60:	330b      	adds	r3, #11
 8018e62:	f042 0220 	orr.w	r2, r2, #32
 8018e66:	b2d2      	uxtb	r2, r2
 8018e68:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	6818      	ldr	r0, [r3, #0]
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	689b      	ldr	r3, [r3, #8]
 8018e72:	461a      	mov	r2, r3
 8018e74:	68f9      	ldr	r1, [r7, #12]
 8018e76:	f7fe ff69 	bl	8017d4c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8018e7a:	68fb      	ldr	r3, [r7, #12]
 8018e7c:	f103 021c 	add.w	r2, r3, #28
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	68db      	ldr	r3, [r3, #12]
 8018e84:	4619      	mov	r1, r3
 8018e86:	4610      	mov	r0, r2
 8018e88:	f7fe f81c 	bl	8016ec4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8018e8c:	68fb      	ldr	r3, [r7, #12]
 8018e8e:	3316      	adds	r3, #22
 8018e90:	6939      	ldr	r1, [r7, #16]
 8018e92:	4618      	mov	r0, r3
 8018e94:	f7fe f816 	bl	8016ec4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8018e98:	68fb      	ldr	r3, [r7, #12]
 8018e9a:	3312      	adds	r3, #18
 8018e9c:	2100      	movs	r1, #0
 8018e9e:	4618      	mov	r0, r3
 8018ea0:	f7fd fff5 	bl	8016e8e <st_word>
					fs->wflag = 1;
 8018ea4:	68bb      	ldr	r3, [r7, #8]
 8018ea6:	2201      	movs	r2, #1
 8018ea8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8018eaa:	68bb      	ldr	r3, [r7, #8]
 8018eac:	4618      	mov	r0, r3
 8018eae:	f7fe fa55 	bl	801735c <sync_fs>
 8018eb2:	4603      	mov	r3, r0
 8018eb4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	7d1b      	ldrb	r3, [r3, #20]
 8018eba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018ebe:	b2da      	uxtb	r2, r3
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8018ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8018ec6:	4618      	mov	r0, r3
 8018ec8:	3718      	adds	r7, #24
 8018eca:	46bd      	mov	sp, r7
 8018ecc:	bd80      	pop	{r7, pc}
	...

08018ed0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8018ed0:	b480      	push	{r7}
 8018ed2:	b087      	sub	sp, #28
 8018ed4:	af00      	add	r7, sp, #0
 8018ed6:	60f8      	str	r0, [r7, #12]
 8018ed8:	60b9      	str	r1, [r7, #8]
 8018eda:	4613      	mov	r3, r2
 8018edc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8018ede:	2301      	movs	r3, #1
 8018ee0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8018ee2:	2300      	movs	r3, #0
 8018ee4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8018ee6:	4b1f      	ldr	r3, [pc, #124]	; (8018f64 <FATFS_LinkDriverEx+0x94>)
 8018ee8:	7a5b      	ldrb	r3, [r3, #9]
 8018eea:	b2db      	uxtb	r3, r3
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d131      	bne.n	8018f54 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8018ef0:	4b1c      	ldr	r3, [pc, #112]	; (8018f64 <FATFS_LinkDriverEx+0x94>)
 8018ef2:	7a5b      	ldrb	r3, [r3, #9]
 8018ef4:	b2db      	uxtb	r3, r3
 8018ef6:	461a      	mov	r2, r3
 8018ef8:	4b1a      	ldr	r3, [pc, #104]	; (8018f64 <FATFS_LinkDriverEx+0x94>)
 8018efa:	2100      	movs	r1, #0
 8018efc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8018efe:	4b19      	ldr	r3, [pc, #100]	; (8018f64 <FATFS_LinkDriverEx+0x94>)
 8018f00:	7a5b      	ldrb	r3, [r3, #9]
 8018f02:	b2db      	uxtb	r3, r3
 8018f04:	4a17      	ldr	r2, [pc, #92]	; (8018f64 <FATFS_LinkDriverEx+0x94>)
 8018f06:	009b      	lsls	r3, r3, #2
 8018f08:	4413      	add	r3, r2
 8018f0a:	68fa      	ldr	r2, [r7, #12]
 8018f0c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8018f0e:	4b15      	ldr	r3, [pc, #84]	; (8018f64 <FATFS_LinkDriverEx+0x94>)
 8018f10:	7a5b      	ldrb	r3, [r3, #9]
 8018f12:	b2db      	uxtb	r3, r3
 8018f14:	461a      	mov	r2, r3
 8018f16:	4b13      	ldr	r3, [pc, #76]	; (8018f64 <FATFS_LinkDriverEx+0x94>)
 8018f18:	4413      	add	r3, r2
 8018f1a:	79fa      	ldrb	r2, [r7, #7]
 8018f1c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8018f1e:	4b11      	ldr	r3, [pc, #68]	; (8018f64 <FATFS_LinkDriverEx+0x94>)
 8018f20:	7a5b      	ldrb	r3, [r3, #9]
 8018f22:	b2db      	uxtb	r3, r3
 8018f24:	1c5a      	adds	r2, r3, #1
 8018f26:	b2d1      	uxtb	r1, r2
 8018f28:	4a0e      	ldr	r2, [pc, #56]	; (8018f64 <FATFS_LinkDriverEx+0x94>)
 8018f2a:	7251      	strb	r1, [r2, #9]
 8018f2c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8018f2e:	7dbb      	ldrb	r3, [r7, #22]
 8018f30:	3330      	adds	r3, #48	; 0x30
 8018f32:	b2da      	uxtb	r2, r3
 8018f34:	68bb      	ldr	r3, [r7, #8]
 8018f36:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8018f38:	68bb      	ldr	r3, [r7, #8]
 8018f3a:	3301      	adds	r3, #1
 8018f3c:	223a      	movs	r2, #58	; 0x3a
 8018f3e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8018f40:	68bb      	ldr	r3, [r7, #8]
 8018f42:	3302      	adds	r3, #2
 8018f44:	222f      	movs	r2, #47	; 0x2f
 8018f46:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8018f48:	68bb      	ldr	r3, [r7, #8]
 8018f4a:	3303      	adds	r3, #3
 8018f4c:	2200      	movs	r2, #0
 8018f4e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8018f50:	2300      	movs	r3, #0
 8018f52:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8018f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8018f56:	4618      	mov	r0, r3
 8018f58:	371c      	adds	r7, #28
 8018f5a:	46bd      	mov	sp, r7
 8018f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f60:	4770      	bx	lr
 8018f62:	bf00      	nop
 8018f64:	200013a4 	.word	0x200013a4

08018f68 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8018f68:	b580      	push	{r7, lr}
 8018f6a:	b082      	sub	sp, #8
 8018f6c:	af00      	add	r7, sp, #0
 8018f6e:	6078      	str	r0, [r7, #4]
 8018f70:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8018f72:	2200      	movs	r2, #0
 8018f74:	6839      	ldr	r1, [r7, #0]
 8018f76:	6878      	ldr	r0, [r7, #4]
 8018f78:	f7ff ffaa 	bl	8018ed0 <FATFS_LinkDriverEx>
 8018f7c:	4603      	mov	r3, r0
}
 8018f7e:	4618      	mov	r0, r3
 8018f80:	3708      	adds	r7, #8
 8018f82:	46bd      	mov	sp, r7
 8018f84:	bd80      	pop	{r7, pc}
	...

08018f88 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8018f88:	b580      	push	{r7, lr}
 8018f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8018f8c:	2200      	movs	r2, #0
 8018f8e:	4912      	ldr	r1, [pc, #72]	; (8018fd8 <MX_USB_DEVICE_Init+0x50>)
 8018f90:	4812      	ldr	r0, [pc, #72]	; (8018fdc <MX_USB_DEVICE_Init+0x54>)
 8018f92:	f7fc fbab 	bl	80156ec <USBD_Init>
 8018f96:	4603      	mov	r3, r0
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	d001      	beq.n	8018fa0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018f9c:	f7eb fe2a 	bl	8004bf4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8018fa0:	490f      	ldr	r1, [pc, #60]	; (8018fe0 <MX_USB_DEVICE_Init+0x58>)
 8018fa2:	480e      	ldr	r0, [pc, #56]	; (8018fdc <MX_USB_DEVICE_Init+0x54>)
 8018fa4:	f7fc fbd2 	bl	801574c <USBD_RegisterClass>
 8018fa8:	4603      	mov	r3, r0
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d001      	beq.n	8018fb2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018fae:	f7eb fe21 	bl	8004bf4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8018fb2:	490c      	ldr	r1, [pc, #48]	; (8018fe4 <MX_USB_DEVICE_Init+0x5c>)
 8018fb4:	4809      	ldr	r0, [pc, #36]	; (8018fdc <MX_USB_DEVICE_Init+0x54>)
 8018fb6:	f7fc fac9 	bl	801554c <USBD_CDC_RegisterInterface>
 8018fba:	4603      	mov	r3, r0
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d001      	beq.n	8018fc4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018fc0:	f7eb fe18 	bl	8004bf4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8018fc4:	4805      	ldr	r0, [pc, #20]	; (8018fdc <MX_USB_DEVICE_Init+0x54>)
 8018fc6:	f7fc fbf7 	bl	80157b8 <USBD_Start>
 8018fca:	4603      	mov	r3, r0
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d001      	beq.n	8018fd4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018fd0:	f7eb fe10 	bl	8004bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018fd4:	bf00      	nop
 8018fd6:	bd80      	pop	{r7, pc}
 8018fd8:	200000b0 	.word	0x200000b0
 8018fdc:	200013b0 	.word	0x200013b0
 8018fe0:	2000001c 	.word	0x2000001c
 8018fe4:	2000009c 	.word	0x2000009c

08018fe8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8018fe8:	b580      	push	{r7, lr}
 8018fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018fec:	2200      	movs	r2, #0
 8018fee:	4905      	ldr	r1, [pc, #20]	; (8019004 <CDC_Init_FS+0x1c>)
 8018ff0:	4805      	ldr	r0, [pc, #20]	; (8019008 <CDC_Init_FS+0x20>)
 8018ff2:	f7fc fac5 	bl	8015580 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8018ff6:	4905      	ldr	r1, [pc, #20]	; (801900c <CDC_Init_FS+0x24>)
 8018ff8:	4803      	ldr	r0, [pc, #12]	; (8019008 <CDC_Init_FS+0x20>)
 8018ffa:	f7fc fae3 	bl	80155c4 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8018ffe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8019000:	4618      	mov	r0, r3
 8019002:	bd80      	pop	{r7, pc}
 8019004:	20001e90 	.word	0x20001e90
 8019008:	200013b0 	.word	0x200013b0
 801900c:	20001690 	.word	0x20001690

08019010 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8019010:	b480      	push	{r7}
 8019012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8019014:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8019016:	4618      	mov	r0, r3
 8019018:	46bd      	mov	sp, r7
 801901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801901e:	4770      	bx	lr

08019020 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8019020:	b480      	push	{r7}
 8019022:	b083      	sub	sp, #12
 8019024:	af00      	add	r7, sp, #0
 8019026:	4603      	mov	r3, r0
 8019028:	6039      	str	r1, [r7, #0]
 801902a:	71fb      	strb	r3, [r7, #7]
 801902c:	4613      	mov	r3, r2
 801902e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch(cmd)
 8019030:	79fb      	ldrb	r3, [r7, #7]
 8019032:	2b23      	cmp	r3, #35	; 0x23
 8019034:	d84a      	bhi.n	80190cc <CDC_Control_FS+0xac>
 8019036:	a201      	add	r2, pc, #4	; (adr r2, 801903c <CDC_Control_FS+0x1c>)
 8019038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801903c:	080190cd 	.word	0x080190cd
 8019040:	080190cd 	.word	0x080190cd
 8019044:	080190cd 	.word	0x080190cd
 8019048:	080190cd 	.word	0x080190cd
 801904c:	080190cd 	.word	0x080190cd
 8019050:	080190cd 	.word	0x080190cd
 8019054:	080190cd 	.word	0x080190cd
 8019058:	080190cd 	.word	0x080190cd
 801905c:	080190cd 	.word	0x080190cd
 8019060:	080190cd 	.word	0x080190cd
 8019064:	080190cd 	.word	0x080190cd
 8019068:	080190cd 	.word	0x080190cd
 801906c:	080190cd 	.word	0x080190cd
 8019070:	080190cd 	.word	0x080190cd
 8019074:	080190cd 	.word	0x080190cd
 8019078:	080190cd 	.word	0x080190cd
 801907c:	080190cd 	.word	0x080190cd
 8019080:	080190cd 	.word	0x080190cd
 8019084:	080190cd 	.word	0x080190cd
 8019088:	080190cd 	.word	0x080190cd
 801908c:	080190cd 	.word	0x080190cd
 8019090:	080190cd 	.word	0x080190cd
 8019094:	080190cd 	.word	0x080190cd
 8019098:	080190cd 	.word	0x080190cd
 801909c:	080190cd 	.word	0x080190cd
 80190a0:	080190cd 	.word	0x080190cd
 80190a4:	080190cd 	.word	0x080190cd
 80190a8:	080190cd 	.word	0x080190cd
 80190ac:	080190cd 	.word	0x080190cd
 80190b0:	080190cd 	.word	0x080190cd
 80190b4:	080190cd 	.word	0x080190cd
 80190b8:	080190cd 	.word	0x080190cd
 80190bc:	080190cd 	.word	0x080190cd
 80190c0:	080190cd 	.word	0x080190cd
 80190c4:	080190cd 	.word	0x080190cd
 80190c8:	080190cd 	.word	0x080190cd
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 80190cc:	bf00      	nop
	}

	return (USBD_OK);
 80190ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80190d0:	4618      	mov	r0, r3
 80190d2:	370c      	adds	r7, #12
 80190d4:	46bd      	mov	sp, r7
 80190d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190da:	4770      	bx	lr

080190dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80190dc:	b580      	push	{r7, lr}
 80190de:	b084      	sub	sp, #16
 80190e0:	af00      	add	r7, sp, #0
 80190e2:	6078      	str	r0, [r7, #4]
 80190e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80190e6:	6879      	ldr	r1, [r7, #4]
 80190e8:	480b      	ldr	r0, [pc, #44]	; (8019118 <CDC_Receive_FS+0x3c>)
 80190ea:	f7fc fa6b 	bl	80155c4 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80190ee:	480a      	ldr	r0, [pc, #40]	; (8019118 <CDC_Receive_FS+0x3c>)
 80190f0:	f7fc fac6 	bl	8015680 <USBD_CDC_ReceivePacket>

	uint8_t len = (uint8_t)*Len;
 80190f4:	683b      	ldr	r3, [r7, #0]
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	73fb      	strb	r3, [r7, #15]
	memcpy(usb_Rx_buffer, Buf, len);  // copy the data to the buffer
 80190fa:	7bfb      	ldrb	r3, [r7, #15]
 80190fc:	461a      	mov	r2, r3
 80190fe:	6879      	ldr	r1, [r7, #4]
 8019100:	4806      	ldr	r0, [pc, #24]	; (801911c <CDC_Receive_FS+0x40>)
 8019102:	f000 fd71 	bl	8019be8 <memcpy>

	usb_Rx_ready = 1;
 8019106:	4b06      	ldr	r3, [pc, #24]	; (8019120 <CDC_Receive_FS+0x44>)
 8019108:	2201      	movs	r2, #1
 801910a:	701a      	strb	r2, [r3, #0]

	return (USBD_OK);
 801910c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801910e:	4618      	mov	r0, r3
 8019110:	3710      	adds	r7, #16
 8019112:	46bd      	mov	sp, r7
 8019114:	bd80      	pop	{r7, pc}
 8019116:	bf00      	nop
 8019118:	200013b0 	.word	0x200013b0
 801911c:	2000168c 	.word	0x2000168c
 8019120:	2000168e 	.word	0x2000168e

08019124 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8019124:	b580      	push	{r7, lr}
 8019126:	b084      	sub	sp, #16
 8019128:	af00      	add	r7, sp, #0
 801912a:	6078      	str	r0, [r7, #4]
 801912c:	460b      	mov	r3, r1
 801912e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8019130:	2300      	movs	r3, #0
 8019132:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8019134:	4b0d      	ldr	r3, [pc, #52]	; (801916c <CDC_Transmit_FS+0x48>)
 8019136:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801913a:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0){
 801913c:	68bb      	ldr	r3, [r7, #8]
 801913e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8019142:	2b00      	cmp	r3, #0
 8019144:	d001      	beq.n	801914a <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 8019146:	2301      	movs	r3, #1
 8019148:	e00b      	b.n	8019162 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801914a:	887b      	ldrh	r3, [r7, #2]
 801914c:	461a      	mov	r2, r3
 801914e:	6879      	ldr	r1, [r7, #4]
 8019150:	4806      	ldr	r0, [pc, #24]	; (801916c <CDC_Transmit_FS+0x48>)
 8019152:	f7fc fa15 	bl	8015580 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8019156:	4805      	ldr	r0, [pc, #20]	; (801916c <CDC_Transmit_FS+0x48>)
 8019158:	f7fc fa52 	bl	8015600 <USBD_CDC_TransmitPacket>
 801915c:	4603      	mov	r3, r0
 801915e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8019160:	7bfb      	ldrb	r3, [r7, #15]
}
 8019162:	4618      	mov	r0, r3
 8019164:	3710      	adds	r7, #16
 8019166:	46bd      	mov	sp, r7
 8019168:	bd80      	pop	{r7, pc}
 801916a:	bf00      	nop
 801916c:	200013b0 	.word	0x200013b0

08019170 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8019170:	b480      	push	{r7}
 8019172:	b087      	sub	sp, #28
 8019174:	af00      	add	r7, sp, #0
 8019176:	60f8      	str	r0, [r7, #12]
 8019178:	60b9      	str	r1, [r7, #8]
 801917a:	4613      	mov	r3, r2
 801917c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801917e:	2300      	movs	r3, #0
 8019180:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8019182:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019186:	4618      	mov	r0, r3
 8019188:	371c      	adds	r7, #28
 801918a:	46bd      	mov	sp, r7
 801918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019190:	4770      	bx	lr
	...

08019194 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019194:	b480      	push	{r7}
 8019196:	b083      	sub	sp, #12
 8019198:	af00      	add	r7, sp, #0
 801919a:	4603      	mov	r3, r0
 801919c:	6039      	str	r1, [r7, #0]
 801919e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80191a0:	683b      	ldr	r3, [r7, #0]
 80191a2:	2212      	movs	r2, #18
 80191a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80191a6:	4b03      	ldr	r3, [pc, #12]	; (80191b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80191a8:	4618      	mov	r0, r3
 80191aa:	370c      	adds	r7, #12
 80191ac:	46bd      	mov	sp, r7
 80191ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191b2:	4770      	bx	lr
 80191b4:	200000cc 	.word	0x200000cc

080191b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80191b8:	b480      	push	{r7}
 80191ba:	b083      	sub	sp, #12
 80191bc:	af00      	add	r7, sp, #0
 80191be:	4603      	mov	r3, r0
 80191c0:	6039      	str	r1, [r7, #0]
 80191c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80191c4:	683b      	ldr	r3, [r7, #0]
 80191c6:	2204      	movs	r2, #4
 80191c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80191ca:	4b03      	ldr	r3, [pc, #12]	; (80191d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80191cc:	4618      	mov	r0, r3
 80191ce:	370c      	adds	r7, #12
 80191d0:	46bd      	mov	sp, r7
 80191d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191d6:	4770      	bx	lr
 80191d8:	200000e0 	.word	0x200000e0

080191dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80191dc:	b580      	push	{r7, lr}
 80191de:	b082      	sub	sp, #8
 80191e0:	af00      	add	r7, sp, #0
 80191e2:	4603      	mov	r3, r0
 80191e4:	6039      	str	r1, [r7, #0]
 80191e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80191e8:	79fb      	ldrb	r3, [r7, #7]
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	d105      	bne.n	80191fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80191ee:	683a      	ldr	r2, [r7, #0]
 80191f0:	4907      	ldr	r1, [pc, #28]	; (8019210 <USBD_FS_ProductStrDescriptor+0x34>)
 80191f2:	4808      	ldr	r0, [pc, #32]	; (8019214 <USBD_FS_ProductStrDescriptor+0x38>)
 80191f4:	f7fd fc92 	bl	8016b1c <USBD_GetString>
 80191f8:	e004      	b.n	8019204 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80191fa:	683a      	ldr	r2, [r7, #0]
 80191fc:	4904      	ldr	r1, [pc, #16]	; (8019210 <USBD_FS_ProductStrDescriptor+0x34>)
 80191fe:	4805      	ldr	r0, [pc, #20]	; (8019214 <USBD_FS_ProductStrDescriptor+0x38>)
 8019200:	f7fd fc8c 	bl	8016b1c <USBD_GetString>
  }
  return USBD_StrDesc;
 8019204:	4b02      	ldr	r3, [pc, #8]	; (8019210 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8019206:	4618      	mov	r0, r3
 8019208:	3708      	adds	r7, #8
 801920a:	46bd      	mov	sp, r7
 801920c:	bd80      	pop	{r7, pc}
 801920e:	bf00      	nop
 8019210:	20002690 	.word	0x20002690
 8019214:	0801cee8 	.word	0x0801cee8

08019218 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019218:	b580      	push	{r7, lr}
 801921a:	b082      	sub	sp, #8
 801921c:	af00      	add	r7, sp, #0
 801921e:	4603      	mov	r3, r0
 8019220:	6039      	str	r1, [r7, #0]
 8019222:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8019224:	683a      	ldr	r2, [r7, #0]
 8019226:	4904      	ldr	r1, [pc, #16]	; (8019238 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8019228:	4804      	ldr	r0, [pc, #16]	; (801923c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801922a:	f7fd fc77 	bl	8016b1c <USBD_GetString>
  return USBD_StrDesc;
 801922e:	4b02      	ldr	r3, [pc, #8]	; (8019238 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8019230:	4618      	mov	r0, r3
 8019232:	3708      	adds	r7, #8
 8019234:	46bd      	mov	sp, r7
 8019236:	bd80      	pop	{r7, pc}
 8019238:	20002690 	.word	0x20002690
 801923c:	0801cf00 	.word	0x0801cf00

08019240 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019240:	b580      	push	{r7, lr}
 8019242:	b082      	sub	sp, #8
 8019244:	af00      	add	r7, sp, #0
 8019246:	4603      	mov	r3, r0
 8019248:	6039      	str	r1, [r7, #0]
 801924a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801924c:	683b      	ldr	r3, [r7, #0]
 801924e:	221a      	movs	r2, #26
 8019250:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8019252:	f000 f843 	bl	80192dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8019256:	4b02      	ldr	r3, [pc, #8]	; (8019260 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8019258:	4618      	mov	r0, r3
 801925a:	3708      	adds	r7, #8
 801925c:	46bd      	mov	sp, r7
 801925e:	bd80      	pop	{r7, pc}
 8019260:	200000e4 	.word	0x200000e4

08019264 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019264:	b580      	push	{r7, lr}
 8019266:	b082      	sub	sp, #8
 8019268:	af00      	add	r7, sp, #0
 801926a:	4603      	mov	r3, r0
 801926c:	6039      	str	r1, [r7, #0]
 801926e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8019270:	79fb      	ldrb	r3, [r7, #7]
 8019272:	2b00      	cmp	r3, #0
 8019274:	d105      	bne.n	8019282 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019276:	683a      	ldr	r2, [r7, #0]
 8019278:	4907      	ldr	r1, [pc, #28]	; (8019298 <USBD_FS_ConfigStrDescriptor+0x34>)
 801927a:	4808      	ldr	r0, [pc, #32]	; (801929c <USBD_FS_ConfigStrDescriptor+0x38>)
 801927c:	f7fd fc4e 	bl	8016b1c <USBD_GetString>
 8019280:	e004      	b.n	801928c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019282:	683a      	ldr	r2, [r7, #0]
 8019284:	4904      	ldr	r1, [pc, #16]	; (8019298 <USBD_FS_ConfigStrDescriptor+0x34>)
 8019286:	4805      	ldr	r0, [pc, #20]	; (801929c <USBD_FS_ConfigStrDescriptor+0x38>)
 8019288:	f7fd fc48 	bl	8016b1c <USBD_GetString>
  }
  return USBD_StrDesc;
 801928c:	4b02      	ldr	r3, [pc, #8]	; (8019298 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801928e:	4618      	mov	r0, r3
 8019290:	3708      	adds	r7, #8
 8019292:	46bd      	mov	sp, r7
 8019294:	bd80      	pop	{r7, pc}
 8019296:	bf00      	nop
 8019298:	20002690 	.word	0x20002690
 801929c:	0801cf14 	.word	0x0801cf14

080192a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80192a0:	b580      	push	{r7, lr}
 80192a2:	b082      	sub	sp, #8
 80192a4:	af00      	add	r7, sp, #0
 80192a6:	4603      	mov	r3, r0
 80192a8:	6039      	str	r1, [r7, #0]
 80192aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80192ac:	79fb      	ldrb	r3, [r7, #7]
 80192ae:	2b00      	cmp	r3, #0
 80192b0:	d105      	bne.n	80192be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80192b2:	683a      	ldr	r2, [r7, #0]
 80192b4:	4907      	ldr	r1, [pc, #28]	; (80192d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80192b6:	4808      	ldr	r0, [pc, #32]	; (80192d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80192b8:	f7fd fc30 	bl	8016b1c <USBD_GetString>
 80192bc:	e004      	b.n	80192c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80192be:	683a      	ldr	r2, [r7, #0]
 80192c0:	4904      	ldr	r1, [pc, #16]	; (80192d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80192c2:	4805      	ldr	r0, [pc, #20]	; (80192d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80192c4:	f7fd fc2a 	bl	8016b1c <USBD_GetString>
  }
  return USBD_StrDesc;
 80192c8:	4b02      	ldr	r3, [pc, #8]	; (80192d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80192ca:	4618      	mov	r0, r3
 80192cc:	3708      	adds	r7, #8
 80192ce:	46bd      	mov	sp, r7
 80192d0:	bd80      	pop	{r7, pc}
 80192d2:	bf00      	nop
 80192d4:	20002690 	.word	0x20002690
 80192d8:	0801cf20 	.word	0x0801cf20

080192dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80192dc:	b580      	push	{r7, lr}
 80192de:	b084      	sub	sp, #16
 80192e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80192e2:	4b0f      	ldr	r3, [pc, #60]	; (8019320 <Get_SerialNum+0x44>)
 80192e4:	681b      	ldr	r3, [r3, #0]
 80192e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80192e8:	4b0e      	ldr	r3, [pc, #56]	; (8019324 <Get_SerialNum+0x48>)
 80192ea:	681b      	ldr	r3, [r3, #0]
 80192ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80192ee:	4b0e      	ldr	r3, [pc, #56]	; (8019328 <Get_SerialNum+0x4c>)
 80192f0:	681b      	ldr	r3, [r3, #0]
 80192f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80192f4:	68fa      	ldr	r2, [r7, #12]
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	4413      	add	r3, r2
 80192fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80192fc:	68fb      	ldr	r3, [r7, #12]
 80192fe:	2b00      	cmp	r3, #0
 8019300:	d009      	beq.n	8019316 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8019302:	2208      	movs	r2, #8
 8019304:	4909      	ldr	r1, [pc, #36]	; (801932c <Get_SerialNum+0x50>)
 8019306:	68f8      	ldr	r0, [r7, #12]
 8019308:	f000 f814 	bl	8019334 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801930c:	2204      	movs	r2, #4
 801930e:	4908      	ldr	r1, [pc, #32]	; (8019330 <Get_SerialNum+0x54>)
 8019310:	68b8      	ldr	r0, [r7, #8]
 8019312:	f000 f80f 	bl	8019334 <IntToUnicode>
  }
}
 8019316:	bf00      	nop
 8019318:	3710      	adds	r7, #16
 801931a:	46bd      	mov	sp, r7
 801931c:	bd80      	pop	{r7, pc}
 801931e:	bf00      	nop
 8019320:	1fff7590 	.word	0x1fff7590
 8019324:	1fff7594 	.word	0x1fff7594
 8019328:	1fff7598 	.word	0x1fff7598
 801932c:	200000e6 	.word	0x200000e6
 8019330:	200000f6 	.word	0x200000f6

08019334 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8019334:	b480      	push	{r7}
 8019336:	b087      	sub	sp, #28
 8019338:	af00      	add	r7, sp, #0
 801933a:	60f8      	str	r0, [r7, #12]
 801933c:	60b9      	str	r1, [r7, #8]
 801933e:	4613      	mov	r3, r2
 8019340:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8019342:	2300      	movs	r3, #0
 8019344:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8019346:	2300      	movs	r3, #0
 8019348:	75fb      	strb	r3, [r7, #23]
 801934a:	e027      	b.n	801939c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801934c:	68fb      	ldr	r3, [r7, #12]
 801934e:	0f1b      	lsrs	r3, r3, #28
 8019350:	2b09      	cmp	r3, #9
 8019352:	d80b      	bhi.n	801936c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8019354:	68fb      	ldr	r3, [r7, #12]
 8019356:	0f1b      	lsrs	r3, r3, #28
 8019358:	b2da      	uxtb	r2, r3
 801935a:	7dfb      	ldrb	r3, [r7, #23]
 801935c:	005b      	lsls	r3, r3, #1
 801935e:	4619      	mov	r1, r3
 8019360:	68bb      	ldr	r3, [r7, #8]
 8019362:	440b      	add	r3, r1
 8019364:	3230      	adds	r2, #48	; 0x30
 8019366:	b2d2      	uxtb	r2, r2
 8019368:	701a      	strb	r2, [r3, #0]
 801936a:	e00a      	b.n	8019382 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801936c:	68fb      	ldr	r3, [r7, #12]
 801936e:	0f1b      	lsrs	r3, r3, #28
 8019370:	b2da      	uxtb	r2, r3
 8019372:	7dfb      	ldrb	r3, [r7, #23]
 8019374:	005b      	lsls	r3, r3, #1
 8019376:	4619      	mov	r1, r3
 8019378:	68bb      	ldr	r3, [r7, #8]
 801937a:	440b      	add	r3, r1
 801937c:	3237      	adds	r2, #55	; 0x37
 801937e:	b2d2      	uxtb	r2, r2
 8019380:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8019382:	68fb      	ldr	r3, [r7, #12]
 8019384:	011b      	lsls	r3, r3, #4
 8019386:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019388:	7dfb      	ldrb	r3, [r7, #23]
 801938a:	005b      	lsls	r3, r3, #1
 801938c:	3301      	adds	r3, #1
 801938e:	68ba      	ldr	r2, [r7, #8]
 8019390:	4413      	add	r3, r2
 8019392:	2200      	movs	r2, #0
 8019394:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8019396:	7dfb      	ldrb	r3, [r7, #23]
 8019398:	3301      	adds	r3, #1
 801939a:	75fb      	strb	r3, [r7, #23]
 801939c:	7dfa      	ldrb	r2, [r7, #23]
 801939e:	79fb      	ldrb	r3, [r7, #7]
 80193a0:	429a      	cmp	r2, r3
 80193a2:	d3d3      	bcc.n	801934c <IntToUnicode+0x18>
  }
}
 80193a4:	bf00      	nop
 80193a6:	bf00      	nop
 80193a8:	371c      	adds	r7, #28
 80193aa:	46bd      	mov	sp, r7
 80193ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193b0:	4770      	bx	lr
	...

080193b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80193b4:	b580      	push	{r7, lr}
 80193b6:	b0b0      	sub	sp, #192	; 0xc0
 80193b8:	af00      	add	r7, sp, #0
 80193ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80193bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80193c0:	2200      	movs	r2, #0
 80193c2:	601a      	str	r2, [r3, #0]
 80193c4:	605a      	str	r2, [r3, #4]
 80193c6:	609a      	str	r2, [r3, #8]
 80193c8:	60da      	str	r2, [r3, #12]
 80193ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80193cc:	f107 0318 	add.w	r3, r7, #24
 80193d0:	2294      	movs	r2, #148	; 0x94
 80193d2:	2100      	movs	r1, #0
 80193d4:	4618      	mov	r0, r3
 80193d6:	f000 fc15 	bl	8019c04 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	681b      	ldr	r3, [r3, #0]
 80193de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80193e2:	d163      	bne.n	80194ac <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80193e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80193e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80193ea:	2300      	movs	r3, #0
 80193ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80193f0:	f107 0318 	add.w	r3, r7, #24
 80193f4:	4618      	mov	r0, r3
 80193f6:	f7f2 fb59 	bl	800baac <HAL_RCCEx_PeriphCLKConfig>
 80193fa:	4603      	mov	r3, r0
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	d001      	beq.n	8019404 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8019400:	f7eb fbf8 	bl	8004bf4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019404:	4b2b      	ldr	r3, [pc, #172]	; (80194b4 <HAL_PCD_MspInit+0x100>)
 8019406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019408:	4a2a      	ldr	r2, [pc, #168]	; (80194b4 <HAL_PCD_MspInit+0x100>)
 801940a:	f043 0301 	orr.w	r3, r3, #1
 801940e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8019410:	4b28      	ldr	r3, [pc, #160]	; (80194b4 <HAL_PCD_MspInit+0x100>)
 8019412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019414:	f003 0301 	and.w	r3, r3, #1
 8019418:	617b      	str	r3, [r7, #20]
 801941a:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801941c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8019420:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019424:	2302      	movs	r3, #2
 8019426:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801942a:	2300      	movs	r3, #0
 801942c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019430:	2303      	movs	r3, #3
 8019432:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8019436:	230a      	movs	r3, #10
 8019438:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801943c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8019440:	4619      	mov	r1, r3
 8019442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8019446:	f7ee fcdd 	bl	8007e04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801944a:	4b1a      	ldr	r3, [pc, #104]	; (80194b4 <HAL_PCD_MspInit+0x100>)
 801944c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801944e:	4a19      	ldr	r2, [pc, #100]	; (80194b4 <HAL_PCD_MspInit+0x100>)
 8019450:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8019454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8019456:	4b17      	ldr	r3, [pc, #92]	; (80194b4 <HAL_PCD_MspInit+0x100>)
 8019458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801945a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801945e:	613b      	str	r3, [r7, #16]
 8019460:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8019462:	4b14      	ldr	r3, [pc, #80]	; (80194b4 <HAL_PCD_MspInit+0x100>)
 8019464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801946a:	2b00      	cmp	r3, #0
 801946c:	d114      	bne.n	8019498 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801946e:	4b11      	ldr	r3, [pc, #68]	; (80194b4 <HAL_PCD_MspInit+0x100>)
 8019470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019472:	4a10      	ldr	r2, [pc, #64]	; (80194b4 <HAL_PCD_MspInit+0x100>)
 8019474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019478:	6593      	str	r3, [r2, #88]	; 0x58
 801947a:	4b0e      	ldr	r3, [pc, #56]	; (80194b4 <HAL_PCD_MspInit+0x100>)
 801947c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801947e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019482:	60fb      	str	r3, [r7, #12]
 8019484:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8019486:	f7f1 fbfd 	bl	800ac84 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 801948a:	4b0a      	ldr	r3, [pc, #40]	; (80194b4 <HAL_PCD_MspInit+0x100>)
 801948c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801948e:	4a09      	ldr	r2, [pc, #36]	; (80194b4 <HAL_PCD_MspInit+0x100>)
 8019490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8019494:	6593      	str	r3, [r2, #88]	; 0x58
 8019496:	e001      	b.n	801949c <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8019498:	f7f1 fbf4 	bl	800ac84 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801949c:	2200      	movs	r2, #0
 801949e:	2100      	movs	r1, #0
 80194a0:	2043      	movs	r0, #67	; 0x43
 80194a2:	f7ee f94a 	bl	800773a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80194a6:	2043      	movs	r0, #67	; 0x43
 80194a8:	f7ee f963 	bl	8007772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80194ac:	bf00      	nop
 80194ae:	37c0      	adds	r7, #192	; 0xc0
 80194b0:	46bd      	mov	sp, r7
 80194b2:	bd80      	pop	{r7, pc}
 80194b4:	40021000 	.word	0x40021000

080194b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80194b8:	b580      	push	{r7, lr}
 80194ba:	b082      	sub	sp, #8
 80194bc:	af00      	add	r7, sp, #0
 80194be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80194cc:	4619      	mov	r1, r3
 80194ce:	4610      	mov	r0, r2
 80194d0:	f7fc f9bf 	bl	8015852 <USBD_LL_SetupStage>
}
 80194d4:	bf00      	nop
 80194d6:	3708      	adds	r7, #8
 80194d8:	46bd      	mov	sp, r7
 80194da:	bd80      	pop	{r7, pc}

080194dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80194dc:	b580      	push	{r7, lr}
 80194de:	b082      	sub	sp, #8
 80194e0:	af00      	add	r7, sp, #0
 80194e2:	6078      	str	r0, [r7, #4]
 80194e4:	460b      	mov	r3, r1
 80194e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80194ee:	78fa      	ldrb	r2, [r7, #3]
 80194f0:	6879      	ldr	r1, [r7, #4]
 80194f2:	4613      	mov	r3, r2
 80194f4:	00db      	lsls	r3, r3, #3
 80194f6:	4413      	add	r3, r2
 80194f8:	009b      	lsls	r3, r3, #2
 80194fa:	440b      	add	r3, r1
 80194fc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8019500:	681a      	ldr	r2, [r3, #0]
 8019502:	78fb      	ldrb	r3, [r7, #3]
 8019504:	4619      	mov	r1, r3
 8019506:	f7fc f9f9 	bl	80158fc <USBD_LL_DataOutStage>
}
 801950a:	bf00      	nop
 801950c:	3708      	adds	r7, #8
 801950e:	46bd      	mov	sp, r7
 8019510:	bd80      	pop	{r7, pc}

08019512 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019512:	b580      	push	{r7, lr}
 8019514:	b082      	sub	sp, #8
 8019516:	af00      	add	r7, sp, #0
 8019518:	6078      	str	r0, [r7, #4]
 801951a:	460b      	mov	r3, r1
 801951c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8019524:	78fa      	ldrb	r2, [r7, #3]
 8019526:	6879      	ldr	r1, [r7, #4]
 8019528:	4613      	mov	r3, r2
 801952a:	00db      	lsls	r3, r3, #3
 801952c:	4413      	add	r3, r2
 801952e:	009b      	lsls	r3, r3, #2
 8019530:	440b      	add	r3, r1
 8019532:	3348      	adds	r3, #72	; 0x48
 8019534:	681a      	ldr	r2, [r3, #0]
 8019536:	78fb      	ldrb	r3, [r7, #3]
 8019538:	4619      	mov	r1, r3
 801953a:	f7fc fa92 	bl	8015a62 <USBD_LL_DataInStage>
}
 801953e:	bf00      	nop
 8019540:	3708      	adds	r7, #8
 8019542:	46bd      	mov	sp, r7
 8019544:	bd80      	pop	{r7, pc}

08019546 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019546:	b580      	push	{r7, lr}
 8019548:	b082      	sub	sp, #8
 801954a:	af00      	add	r7, sp, #0
 801954c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019554:	4618      	mov	r0, r3
 8019556:	f7fc fbcc 	bl	8015cf2 <USBD_LL_SOF>
}
 801955a:	bf00      	nop
 801955c:	3708      	adds	r7, #8
 801955e:	46bd      	mov	sp, r7
 8019560:	bd80      	pop	{r7, pc}

08019562 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019562:	b580      	push	{r7, lr}
 8019564:	b084      	sub	sp, #16
 8019566:	af00      	add	r7, sp, #0
 8019568:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801956a:	2301      	movs	r3, #1
 801956c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801956e:	687b      	ldr	r3, [r7, #4]
 8019570:	691b      	ldr	r3, [r3, #16]
 8019572:	2b02      	cmp	r3, #2
 8019574:	d001      	beq.n	801957a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8019576:	f7eb fb3d 	bl	8004bf4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019580:	7bfa      	ldrb	r2, [r7, #15]
 8019582:	4611      	mov	r1, r2
 8019584:	4618      	mov	r0, r3
 8019586:	f7fc fb70 	bl	8015c6a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019590:	4618      	mov	r0, r3
 8019592:	f7fc fb18 	bl	8015bc6 <USBD_LL_Reset>
}
 8019596:	bf00      	nop
 8019598:	3710      	adds	r7, #16
 801959a:	46bd      	mov	sp, r7
 801959c:	bd80      	pop	{r7, pc}
	...

080195a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80195a0:	b580      	push	{r7, lr}
 80195a2:	b082      	sub	sp, #8
 80195a4:	af00      	add	r7, sp, #0
 80195a6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	681b      	ldr	r3, [r3, #0]
 80195ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80195b0:	681b      	ldr	r3, [r3, #0]
 80195b2:	687a      	ldr	r2, [r7, #4]
 80195b4:	6812      	ldr	r2, [r2, #0]
 80195b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80195ba:	f043 0301 	orr.w	r3, r3, #1
 80195be:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80195c6:	4618      	mov	r0, r3
 80195c8:	f7fc fb5f 	bl	8015c8a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	6a1b      	ldr	r3, [r3, #32]
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	d005      	beq.n	80195e0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80195d4:	4b04      	ldr	r3, [pc, #16]	; (80195e8 <HAL_PCD_SuspendCallback+0x48>)
 80195d6:	691b      	ldr	r3, [r3, #16]
 80195d8:	4a03      	ldr	r2, [pc, #12]	; (80195e8 <HAL_PCD_SuspendCallback+0x48>)
 80195da:	f043 0306 	orr.w	r3, r3, #6
 80195de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80195e0:	bf00      	nop
 80195e2:	3708      	adds	r7, #8
 80195e4:	46bd      	mov	sp, r7
 80195e6:	bd80      	pop	{r7, pc}
 80195e8:	e000ed00 	.word	0xe000ed00

080195ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80195ec:	b580      	push	{r7, lr}
 80195ee:	b082      	sub	sp, #8
 80195f0:	af00      	add	r7, sp, #0
 80195f2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	681b      	ldr	r3, [r3, #0]
 80195f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80195fc:	681b      	ldr	r3, [r3, #0]
 80195fe:	687a      	ldr	r2, [r7, #4]
 8019600:	6812      	ldr	r2, [r2, #0]
 8019602:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019606:	f023 0301 	bic.w	r3, r3, #1
 801960a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	6a1b      	ldr	r3, [r3, #32]
 8019610:	2b00      	cmp	r3, #0
 8019612:	d007      	beq.n	8019624 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019614:	4b08      	ldr	r3, [pc, #32]	; (8019638 <HAL_PCD_ResumeCallback+0x4c>)
 8019616:	691b      	ldr	r3, [r3, #16]
 8019618:	4a07      	ldr	r2, [pc, #28]	; (8019638 <HAL_PCD_ResumeCallback+0x4c>)
 801961a:	f023 0306 	bic.w	r3, r3, #6
 801961e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8019620:	f000 faa8 	bl	8019b74 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801962a:	4618      	mov	r0, r3
 801962c:	f7fc fb49 	bl	8015cc2 <USBD_LL_Resume>
}
 8019630:	bf00      	nop
 8019632:	3708      	adds	r7, #8
 8019634:	46bd      	mov	sp, r7
 8019636:	bd80      	pop	{r7, pc}
 8019638:	e000ed00 	.word	0xe000ed00

0801963c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801963c:	b580      	push	{r7, lr}
 801963e:	b082      	sub	sp, #8
 8019640:	af00      	add	r7, sp, #0
 8019642:	6078      	str	r0, [r7, #4]
 8019644:	460b      	mov	r3, r1
 8019646:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801964e:	78fa      	ldrb	r2, [r7, #3]
 8019650:	4611      	mov	r1, r2
 8019652:	4618      	mov	r0, r3
 8019654:	f7fc fb9f 	bl	8015d96 <USBD_LL_IsoOUTIncomplete>
}
 8019658:	bf00      	nop
 801965a:	3708      	adds	r7, #8
 801965c:	46bd      	mov	sp, r7
 801965e:	bd80      	pop	{r7, pc}

08019660 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019660:	b580      	push	{r7, lr}
 8019662:	b082      	sub	sp, #8
 8019664:	af00      	add	r7, sp, #0
 8019666:	6078      	str	r0, [r7, #4]
 8019668:	460b      	mov	r3, r1
 801966a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019672:	78fa      	ldrb	r2, [r7, #3]
 8019674:	4611      	mov	r1, r2
 8019676:	4618      	mov	r0, r3
 8019678:	f7fc fb5b 	bl	8015d32 <USBD_LL_IsoINIncomplete>
}
 801967c:	bf00      	nop
 801967e:	3708      	adds	r7, #8
 8019680:	46bd      	mov	sp, r7
 8019682:	bd80      	pop	{r7, pc}

08019684 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019684:	b580      	push	{r7, lr}
 8019686:	b082      	sub	sp, #8
 8019688:	af00      	add	r7, sp, #0
 801968a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019692:	4618      	mov	r0, r3
 8019694:	f7fc fbb1 	bl	8015dfa <USBD_LL_DevConnected>
}
 8019698:	bf00      	nop
 801969a:	3708      	adds	r7, #8
 801969c:	46bd      	mov	sp, r7
 801969e:	bd80      	pop	{r7, pc}

080196a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80196a0:	b580      	push	{r7, lr}
 80196a2:	b082      	sub	sp, #8
 80196a4:	af00      	add	r7, sp, #0
 80196a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80196ae:	4618      	mov	r0, r3
 80196b0:	f7fc fbae 	bl	8015e10 <USBD_LL_DevDisconnected>
}
 80196b4:	bf00      	nop
 80196b6:	3708      	adds	r7, #8
 80196b8:	46bd      	mov	sp, r7
 80196ba:	bd80      	pop	{r7, pc}

080196bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80196bc:	b580      	push	{r7, lr}
 80196be:	b082      	sub	sp, #8
 80196c0:	af00      	add	r7, sp, #0
 80196c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	781b      	ldrb	r3, [r3, #0]
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d13c      	bne.n	8019746 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80196cc:	4a20      	ldr	r2, [pc, #128]	; (8019750 <USBD_LL_Init+0x94>)
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	4a1e      	ldr	r2, [pc, #120]	; (8019750 <USBD_LL_Init+0x94>)
 80196d8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80196dc:	4b1c      	ldr	r3, [pc, #112]	; (8019750 <USBD_LL_Init+0x94>)
 80196de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80196e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80196e4:	4b1a      	ldr	r3, [pc, #104]	; (8019750 <USBD_LL_Init+0x94>)
 80196e6:	2206      	movs	r2, #6
 80196e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80196ea:	4b19      	ldr	r3, [pc, #100]	; (8019750 <USBD_LL_Init+0x94>)
 80196ec:	2202      	movs	r2, #2
 80196ee:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80196f0:	4b17      	ldr	r3, [pc, #92]	; (8019750 <USBD_LL_Init+0x94>)
 80196f2:	2202      	movs	r2, #2
 80196f4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80196f6:	4b16      	ldr	r3, [pc, #88]	; (8019750 <USBD_LL_Init+0x94>)
 80196f8:	2200      	movs	r2, #0
 80196fa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80196fc:	4b14      	ldr	r3, [pc, #80]	; (8019750 <USBD_LL_Init+0x94>)
 80196fe:	2200      	movs	r2, #0
 8019700:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8019702:	4b13      	ldr	r3, [pc, #76]	; (8019750 <USBD_LL_Init+0x94>)
 8019704:	2200      	movs	r2, #0
 8019706:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8019708:	4b11      	ldr	r3, [pc, #68]	; (8019750 <USBD_LL_Init+0x94>)
 801970a:	2200      	movs	r2, #0
 801970c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801970e:	4b10      	ldr	r3, [pc, #64]	; (8019750 <USBD_LL_Init+0x94>)
 8019710:	2200      	movs	r2, #0
 8019712:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8019714:	4b0e      	ldr	r3, [pc, #56]	; (8019750 <USBD_LL_Init+0x94>)
 8019716:	2200      	movs	r2, #0
 8019718:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801971a:	480d      	ldr	r0, [pc, #52]	; (8019750 <USBD_LL_Init+0x94>)
 801971c:	f7f0 f83b 	bl	8009796 <HAL_PCD_Init>
 8019720:	4603      	mov	r3, r0
 8019722:	2b00      	cmp	r3, #0
 8019724:	d001      	beq.n	801972a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8019726:	f7eb fa65 	bl	8004bf4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801972a:	2180      	movs	r1, #128	; 0x80
 801972c:	4808      	ldr	r0, [pc, #32]	; (8019750 <USBD_LL_Init+0x94>)
 801972e:	f7f1 f9a4 	bl	800aa7a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8019732:	2240      	movs	r2, #64	; 0x40
 8019734:	2100      	movs	r1, #0
 8019736:	4806      	ldr	r0, [pc, #24]	; (8019750 <USBD_LL_Init+0x94>)
 8019738:	f7f1 f958 	bl	800a9ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801973c:	2280      	movs	r2, #128	; 0x80
 801973e:	2101      	movs	r1, #1
 8019740:	4803      	ldr	r0, [pc, #12]	; (8019750 <USBD_LL_Init+0x94>)
 8019742:	f7f1 f953 	bl	800a9ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8019746:	2300      	movs	r3, #0
}
 8019748:	4618      	mov	r0, r3
 801974a:	3708      	adds	r7, #8
 801974c:	46bd      	mov	sp, r7
 801974e:	bd80      	pop	{r7, pc}
 8019750:	20002890 	.word	0x20002890

08019754 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019754:	b580      	push	{r7, lr}
 8019756:	b084      	sub	sp, #16
 8019758:	af00      	add	r7, sp, #0
 801975a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801975c:	2300      	movs	r3, #0
 801975e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019760:	2300      	movs	r3, #0
 8019762:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801976a:	4618      	mov	r0, r3
 801976c:	f7f0 f937 	bl	80099de <HAL_PCD_Start>
 8019770:	4603      	mov	r3, r0
 8019772:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019774:	7bbb      	ldrb	r3, [r7, #14]
 8019776:	2b03      	cmp	r3, #3
 8019778:	d816      	bhi.n	80197a8 <USBD_LL_Start+0x54>
 801977a:	a201      	add	r2, pc, #4	; (adr r2, 8019780 <USBD_LL_Start+0x2c>)
 801977c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019780:	08019791 	.word	0x08019791
 8019784:	08019797 	.word	0x08019797
 8019788:	0801979d 	.word	0x0801979d
 801978c:	080197a3 	.word	0x080197a3
    case HAL_OK :
      usb_status = USBD_OK;
 8019790:	2300      	movs	r3, #0
 8019792:	73fb      	strb	r3, [r7, #15]
    break;
 8019794:	e00b      	b.n	80197ae <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019796:	2303      	movs	r3, #3
 8019798:	73fb      	strb	r3, [r7, #15]
    break;
 801979a:	e008      	b.n	80197ae <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801979c:	2301      	movs	r3, #1
 801979e:	73fb      	strb	r3, [r7, #15]
    break;
 80197a0:	e005      	b.n	80197ae <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80197a2:	2303      	movs	r3, #3
 80197a4:	73fb      	strb	r3, [r7, #15]
    break;
 80197a6:	e002      	b.n	80197ae <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80197a8:	2303      	movs	r3, #3
 80197aa:	73fb      	strb	r3, [r7, #15]
    break;
 80197ac:	bf00      	nop
  }
  return usb_status;
 80197ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80197b0:	4618      	mov	r0, r3
 80197b2:	3710      	adds	r7, #16
 80197b4:	46bd      	mov	sp, r7
 80197b6:	bd80      	pop	{r7, pc}

080197b8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80197b8:	b580      	push	{r7, lr}
 80197ba:	b084      	sub	sp, #16
 80197bc:	af00      	add	r7, sp, #0
 80197be:	6078      	str	r0, [r7, #4]
 80197c0:	4608      	mov	r0, r1
 80197c2:	4611      	mov	r1, r2
 80197c4:	461a      	mov	r2, r3
 80197c6:	4603      	mov	r3, r0
 80197c8:	70fb      	strb	r3, [r7, #3]
 80197ca:	460b      	mov	r3, r1
 80197cc:	70bb      	strb	r3, [r7, #2]
 80197ce:	4613      	mov	r3, r2
 80197d0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80197d2:	2300      	movs	r3, #0
 80197d4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80197d6:	2300      	movs	r3, #0
 80197d8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80197e0:	78bb      	ldrb	r3, [r7, #2]
 80197e2:	883a      	ldrh	r2, [r7, #0]
 80197e4:	78f9      	ldrb	r1, [r7, #3]
 80197e6:	f7f0 fde1 	bl	800a3ac <HAL_PCD_EP_Open>
 80197ea:	4603      	mov	r3, r0
 80197ec:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80197ee:	7bbb      	ldrb	r3, [r7, #14]
 80197f0:	2b03      	cmp	r3, #3
 80197f2:	d817      	bhi.n	8019824 <USBD_LL_OpenEP+0x6c>
 80197f4:	a201      	add	r2, pc, #4	; (adr r2, 80197fc <USBD_LL_OpenEP+0x44>)
 80197f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80197fa:	bf00      	nop
 80197fc:	0801980d 	.word	0x0801980d
 8019800:	08019813 	.word	0x08019813
 8019804:	08019819 	.word	0x08019819
 8019808:	0801981f 	.word	0x0801981f
    case HAL_OK :
      usb_status = USBD_OK;
 801980c:	2300      	movs	r3, #0
 801980e:	73fb      	strb	r3, [r7, #15]
    break;
 8019810:	e00b      	b.n	801982a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019812:	2303      	movs	r3, #3
 8019814:	73fb      	strb	r3, [r7, #15]
    break;
 8019816:	e008      	b.n	801982a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019818:	2301      	movs	r3, #1
 801981a:	73fb      	strb	r3, [r7, #15]
    break;
 801981c:	e005      	b.n	801982a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801981e:	2303      	movs	r3, #3
 8019820:	73fb      	strb	r3, [r7, #15]
    break;
 8019822:	e002      	b.n	801982a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8019824:	2303      	movs	r3, #3
 8019826:	73fb      	strb	r3, [r7, #15]
    break;
 8019828:	bf00      	nop
  }
  return usb_status;
 801982a:	7bfb      	ldrb	r3, [r7, #15]
}
 801982c:	4618      	mov	r0, r3
 801982e:	3710      	adds	r7, #16
 8019830:	46bd      	mov	sp, r7
 8019832:	bd80      	pop	{r7, pc}

08019834 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019834:	b580      	push	{r7, lr}
 8019836:	b084      	sub	sp, #16
 8019838:	af00      	add	r7, sp, #0
 801983a:	6078      	str	r0, [r7, #4]
 801983c:	460b      	mov	r3, r1
 801983e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019840:	2300      	movs	r3, #0
 8019842:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019844:	2300      	movs	r3, #0
 8019846:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801984e:	78fa      	ldrb	r2, [r7, #3]
 8019850:	4611      	mov	r1, r2
 8019852:	4618      	mov	r0, r3
 8019854:	f7f0 fe12 	bl	800a47c <HAL_PCD_EP_Close>
 8019858:	4603      	mov	r3, r0
 801985a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801985c:	7bbb      	ldrb	r3, [r7, #14]
 801985e:	2b03      	cmp	r3, #3
 8019860:	d816      	bhi.n	8019890 <USBD_LL_CloseEP+0x5c>
 8019862:	a201      	add	r2, pc, #4	; (adr r2, 8019868 <USBD_LL_CloseEP+0x34>)
 8019864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019868:	08019879 	.word	0x08019879
 801986c:	0801987f 	.word	0x0801987f
 8019870:	08019885 	.word	0x08019885
 8019874:	0801988b 	.word	0x0801988b
    case HAL_OK :
      usb_status = USBD_OK;
 8019878:	2300      	movs	r3, #0
 801987a:	73fb      	strb	r3, [r7, #15]
    break;
 801987c:	e00b      	b.n	8019896 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801987e:	2303      	movs	r3, #3
 8019880:	73fb      	strb	r3, [r7, #15]
    break;
 8019882:	e008      	b.n	8019896 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019884:	2301      	movs	r3, #1
 8019886:	73fb      	strb	r3, [r7, #15]
    break;
 8019888:	e005      	b.n	8019896 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801988a:	2303      	movs	r3, #3
 801988c:	73fb      	strb	r3, [r7, #15]
    break;
 801988e:	e002      	b.n	8019896 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019890:	2303      	movs	r3, #3
 8019892:	73fb      	strb	r3, [r7, #15]
    break;
 8019894:	bf00      	nop
  }
  return usb_status;
 8019896:	7bfb      	ldrb	r3, [r7, #15]
}
 8019898:	4618      	mov	r0, r3
 801989a:	3710      	adds	r7, #16
 801989c:	46bd      	mov	sp, r7
 801989e:	bd80      	pop	{r7, pc}

080198a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80198a0:	b580      	push	{r7, lr}
 80198a2:	b084      	sub	sp, #16
 80198a4:	af00      	add	r7, sp, #0
 80198a6:	6078      	str	r0, [r7, #4]
 80198a8:	460b      	mov	r3, r1
 80198aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80198ac:	2300      	movs	r3, #0
 80198ae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80198b0:	2300      	movs	r3, #0
 80198b2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80198ba:	78fa      	ldrb	r2, [r7, #3]
 80198bc:	4611      	mov	r1, r2
 80198be:	4618      	mov	r0, r3
 80198c0:	f7f0 fea1 	bl	800a606 <HAL_PCD_EP_SetStall>
 80198c4:	4603      	mov	r3, r0
 80198c6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80198c8:	7bbb      	ldrb	r3, [r7, #14]
 80198ca:	2b03      	cmp	r3, #3
 80198cc:	d816      	bhi.n	80198fc <USBD_LL_StallEP+0x5c>
 80198ce:	a201      	add	r2, pc, #4	; (adr r2, 80198d4 <USBD_LL_StallEP+0x34>)
 80198d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80198d4:	080198e5 	.word	0x080198e5
 80198d8:	080198eb 	.word	0x080198eb
 80198dc:	080198f1 	.word	0x080198f1
 80198e0:	080198f7 	.word	0x080198f7
    case HAL_OK :
      usb_status = USBD_OK;
 80198e4:	2300      	movs	r3, #0
 80198e6:	73fb      	strb	r3, [r7, #15]
    break;
 80198e8:	e00b      	b.n	8019902 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80198ea:	2303      	movs	r3, #3
 80198ec:	73fb      	strb	r3, [r7, #15]
    break;
 80198ee:	e008      	b.n	8019902 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80198f0:	2301      	movs	r3, #1
 80198f2:	73fb      	strb	r3, [r7, #15]
    break;
 80198f4:	e005      	b.n	8019902 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80198f6:	2303      	movs	r3, #3
 80198f8:	73fb      	strb	r3, [r7, #15]
    break;
 80198fa:	e002      	b.n	8019902 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80198fc:	2303      	movs	r3, #3
 80198fe:	73fb      	strb	r3, [r7, #15]
    break;
 8019900:	bf00      	nop
  }
  return usb_status;
 8019902:	7bfb      	ldrb	r3, [r7, #15]
}
 8019904:	4618      	mov	r0, r3
 8019906:	3710      	adds	r7, #16
 8019908:	46bd      	mov	sp, r7
 801990a:	bd80      	pop	{r7, pc}

0801990c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801990c:	b580      	push	{r7, lr}
 801990e:	b084      	sub	sp, #16
 8019910:	af00      	add	r7, sp, #0
 8019912:	6078      	str	r0, [r7, #4]
 8019914:	460b      	mov	r3, r1
 8019916:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019918:	2300      	movs	r3, #0
 801991a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801991c:	2300      	movs	r3, #0
 801991e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019926:	78fa      	ldrb	r2, [r7, #3]
 8019928:	4611      	mov	r1, r2
 801992a:	4618      	mov	r0, r3
 801992c:	f7f0 fecd 	bl	800a6ca <HAL_PCD_EP_ClrStall>
 8019930:	4603      	mov	r3, r0
 8019932:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019934:	7bbb      	ldrb	r3, [r7, #14]
 8019936:	2b03      	cmp	r3, #3
 8019938:	d816      	bhi.n	8019968 <USBD_LL_ClearStallEP+0x5c>
 801993a:	a201      	add	r2, pc, #4	; (adr r2, 8019940 <USBD_LL_ClearStallEP+0x34>)
 801993c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019940:	08019951 	.word	0x08019951
 8019944:	08019957 	.word	0x08019957
 8019948:	0801995d 	.word	0x0801995d
 801994c:	08019963 	.word	0x08019963
    case HAL_OK :
      usb_status = USBD_OK;
 8019950:	2300      	movs	r3, #0
 8019952:	73fb      	strb	r3, [r7, #15]
    break;
 8019954:	e00b      	b.n	801996e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019956:	2303      	movs	r3, #3
 8019958:	73fb      	strb	r3, [r7, #15]
    break;
 801995a:	e008      	b.n	801996e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801995c:	2301      	movs	r3, #1
 801995e:	73fb      	strb	r3, [r7, #15]
    break;
 8019960:	e005      	b.n	801996e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019962:	2303      	movs	r3, #3
 8019964:	73fb      	strb	r3, [r7, #15]
    break;
 8019966:	e002      	b.n	801996e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019968:	2303      	movs	r3, #3
 801996a:	73fb      	strb	r3, [r7, #15]
    break;
 801996c:	bf00      	nop
  }
  return usb_status;
 801996e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019970:	4618      	mov	r0, r3
 8019972:	3710      	adds	r7, #16
 8019974:	46bd      	mov	sp, r7
 8019976:	bd80      	pop	{r7, pc}

08019978 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019978:	b480      	push	{r7}
 801997a:	b085      	sub	sp, #20
 801997c:	af00      	add	r7, sp, #0
 801997e:	6078      	str	r0, [r7, #4]
 8019980:	460b      	mov	r3, r1
 8019982:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019984:	687b      	ldr	r3, [r7, #4]
 8019986:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801998a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801998c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019990:	2b00      	cmp	r3, #0
 8019992:	da0b      	bge.n	80199ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019994:	78fb      	ldrb	r3, [r7, #3]
 8019996:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801999a:	68f9      	ldr	r1, [r7, #12]
 801999c:	4613      	mov	r3, r2
 801999e:	00db      	lsls	r3, r3, #3
 80199a0:	4413      	add	r3, r2
 80199a2:	009b      	lsls	r3, r3, #2
 80199a4:	440b      	add	r3, r1
 80199a6:	333e      	adds	r3, #62	; 0x3e
 80199a8:	781b      	ldrb	r3, [r3, #0]
 80199aa:	e00b      	b.n	80199c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80199ac:	78fb      	ldrb	r3, [r7, #3]
 80199ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80199b2:	68f9      	ldr	r1, [r7, #12]
 80199b4:	4613      	mov	r3, r2
 80199b6:	00db      	lsls	r3, r3, #3
 80199b8:	4413      	add	r3, r2
 80199ba:	009b      	lsls	r3, r3, #2
 80199bc:	440b      	add	r3, r1
 80199be:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80199c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80199c4:	4618      	mov	r0, r3
 80199c6:	3714      	adds	r7, #20
 80199c8:	46bd      	mov	sp, r7
 80199ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199ce:	4770      	bx	lr

080199d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80199d0:	b580      	push	{r7, lr}
 80199d2:	b084      	sub	sp, #16
 80199d4:	af00      	add	r7, sp, #0
 80199d6:	6078      	str	r0, [r7, #4]
 80199d8:	460b      	mov	r3, r1
 80199da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80199dc:	2300      	movs	r3, #0
 80199de:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80199e0:	2300      	movs	r3, #0
 80199e2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80199ea:	78fa      	ldrb	r2, [r7, #3]
 80199ec:	4611      	mov	r1, r2
 80199ee:	4618      	mov	r0, r3
 80199f0:	f7f0 fcb7 	bl	800a362 <HAL_PCD_SetAddress>
 80199f4:	4603      	mov	r3, r0
 80199f6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80199f8:	7bbb      	ldrb	r3, [r7, #14]
 80199fa:	2b03      	cmp	r3, #3
 80199fc:	d816      	bhi.n	8019a2c <USBD_LL_SetUSBAddress+0x5c>
 80199fe:	a201      	add	r2, pc, #4	; (adr r2, 8019a04 <USBD_LL_SetUSBAddress+0x34>)
 8019a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a04:	08019a15 	.word	0x08019a15
 8019a08:	08019a1b 	.word	0x08019a1b
 8019a0c:	08019a21 	.word	0x08019a21
 8019a10:	08019a27 	.word	0x08019a27
    case HAL_OK :
      usb_status = USBD_OK;
 8019a14:	2300      	movs	r3, #0
 8019a16:	73fb      	strb	r3, [r7, #15]
    break;
 8019a18:	e00b      	b.n	8019a32 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019a1a:	2303      	movs	r3, #3
 8019a1c:	73fb      	strb	r3, [r7, #15]
    break;
 8019a1e:	e008      	b.n	8019a32 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019a20:	2301      	movs	r3, #1
 8019a22:	73fb      	strb	r3, [r7, #15]
    break;
 8019a24:	e005      	b.n	8019a32 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019a26:	2303      	movs	r3, #3
 8019a28:	73fb      	strb	r3, [r7, #15]
    break;
 8019a2a:	e002      	b.n	8019a32 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8019a2c:	2303      	movs	r3, #3
 8019a2e:	73fb      	strb	r3, [r7, #15]
    break;
 8019a30:	bf00      	nop
  }
  return usb_status;
 8019a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8019a34:	4618      	mov	r0, r3
 8019a36:	3710      	adds	r7, #16
 8019a38:	46bd      	mov	sp, r7
 8019a3a:	bd80      	pop	{r7, pc}

08019a3c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019a3c:	b580      	push	{r7, lr}
 8019a3e:	b086      	sub	sp, #24
 8019a40:	af00      	add	r7, sp, #0
 8019a42:	60f8      	str	r0, [r7, #12]
 8019a44:	607a      	str	r2, [r7, #4]
 8019a46:	603b      	str	r3, [r7, #0]
 8019a48:	460b      	mov	r3, r1
 8019a4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a4c:	2300      	movs	r3, #0
 8019a4e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019a50:	2300      	movs	r3, #0
 8019a52:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019a54:	68fb      	ldr	r3, [r7, #12]
 8019a56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8019a5a:	7af9      	ldrb	r1, [r7, #11]
 8019a5c:	683b      	ldr	r3, [r7, #0]
 8019a5e:	687a      	ldr	r2, [r7, #4]
 8019a60:	f7f0 fda0 	bl	800a5a4 <HAL_PCD_EP_Transmit>
 8019a64:	4603      	mov	r3, r0
 8019a66:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8019a68:	7dbb      	ldrb	r3, [r7, #22]
 8019a6a:	2b03      	cmp	r3, #3
 8019a6c:	d816      	bhi.n	8019a9c <USBD_LL_Transmit+0x60>
 8019a6e:	a201      	add	r2, pc, #4	; (adr r2, 8019a74 <USBD_LL_Transmit+0x38>)
 8019a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a74:	08019a85 	.word	0x08019a85
 8019a78:	08019a8b 	.word	0x08019a8b
 8019a7c:	08019a91 	.word	0x08019a91
 8019a80:	08019a97 	.word	0x08019a97
    case HAL_OK :
      usb_status = USBD_OK;
 8019a84:	2300      	movs	r3, #0
 8019a86:	75fb      	strb	r3, [r7, #23]
    break;
 8019a88:	e00b      	b.n	8019aa2 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019a8a:	2303      	movs	r3, #3
 8019a8c:	75fb      	strb	r3, [r7, #23]
    break;
 8019a8e:	e008      	b.n	8019aa2 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019a90:	2301      	movs	r3, #1
 8019a92:	75fb      	strb	r3, [r7, #23]
    break;
 8019a94:	e005      	b.n	8019aa2 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019a96:	2303      	movs	r3, #3
 8019a98:	75fb      	strb	r3, [r7, #23]
    break;
 8019a9a:	e002      	b.n	8019aa2 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8019a9c:	2303      	movs	r3, #3
 8019a9e:	75fb      	strb	r3, [r7, #23]
    break;
 8019aa0:	bf00      	nop
  }
  return usb_status;
 8019aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8019aa4:	4618      	mov	r0, r3
 8019aa6:	3718      	adds	r7, #24
 8019aa8:	46bd      	mov	sp, r7
 8019aaa:	bd80      	pop	{r7, pc}

08019aac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019aac:	b580      	push	{r7, lr}
 8019aae:	b086      	sub	sp, #24
 8019ab0:	af00      	add	r7, sp, #0
 8019ab2:	60f8      	str	r0, [r7, #12]
 8019ab4:	607a      	str	r2, [r7, #4]
 8019ab6:	603b      	str	r3, [r7, #0]
 8019ab8:	460b      	mov	r3, r1
 8019aba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019abc:	2300      	movs	r3, #0
 8019abe:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019ac0:	2300      	movs	r3, #0
 8019ac2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019ac4:	68fb      	ldr	r3, [r7, #12]
 8019ac6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8019aca:	7af9      	ldrb	r1, [r7, #11]
 8019acc:	683b      	ldr	r3, [r7, #0]
 8019ace:	687a      	ldr	r2, [r7, #4]
 8019ad0:	f7f0 fd1e 	bl	800a510 <HAL_PCD_EP_Receive>
 8019ad4:	4603      	mov	r3, r0
 8019ad6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8019ad8:	7dbb      	ldrb	r3, [r7, #22]
 8019ada:	2b03      	cmp	r3, #3
 8019adc:	d816      	bhi.n	8019b0c <USBD_LL_PrepareReceive+0x60>
 8019ade:	a201      	add	r2, pc, #4	; (adr r2, 8019ae4 <USBD_LL_PrepareReceive+0x38>)
 8019ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019ae4:	08019af5 	.word	0x08019af5
 8019ae8:	08019afb 	.word	0x08019afb
 8019aec:	08019b01 	.word	0x08019b01
 8019af0:	08019b07 	.word	0x08019b07
    case HAL_OK :
      usb_status = USBD_OK;
 8019af4:	2300      	movs	r3, #0
 8019af6:	75fb      	strb	r3, [r7, #23]
    break;
 8019af8:	e00b      	b.n	8019b12 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019afa:	2303      	movs	r3, #3
 8019afc:	75fb      	strb	r3, [r7, #23]
    break;
 8019afe:	e008      	b.n	8019b12 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019b00:	2301      	movs	r3, #1
 8019b02:	75fb      	strb	r3, [r7, #23]
    break;
 8019b04:	e005      	b.n	8019b12 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019b06:	2303      	movs	r3, #3
 8019b08:	75fb      	strb	r3, [r7, #23]
    break;
 8019b0a:	e002      	b.n	8019b12 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8019b0c:	2303      	movs	r3, #3
 8019b0e:	75fb      	strb	r3, [r7, #23]
    break;
 8019b10:	bf00      	nop
  }
  return usb_status;
 8019b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8019b14:	4618      	mov	r0, r3
 8019b16:	3718      	adds	r7, #24
 8019b18:	46bd      	mov	sp, r7
 8019b1a:	bd80      	pop	{r7, pc}

08019b1c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019b1c:	b580      	push	{r7, lr}
 8019b1e:	b082      	sub	sp, #8
 8019b20:	af00      	add	r7, sp, #0
 8019b22:	6078      	str	r0, [r7, #4]
 8019b24:	460b      	mov	r3, r1
 8019b26:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019b28:	687b      	ldr	r3, [r7, #4]
 8019b2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019b2e:	78fa      	ldrb	r2, [r7, #3]
 8019b30:	4611      	mov	r1, r2
 8019b32:	4618      	mov	r0, r3
 8019b34:	f7f0 fd1e 	bl	800a574 <HAL_PCD_EP_GetRxCount>
 8019b38:	4603      	mov	r3, r0
}
 8019b3a:	4618      	mov	r0, r3
 8019b3c:	3708      	adds	r7, #8
 8019b3e:	46bd      	mov	sp, r7
 8019b40:	bd80      	pop	{r7, pc}
	...

08019b44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019b44:	b480      	push	{r7}
 8019b46:	b083      	sub	sp, #12
 8019b48:	af00      	add	r7, sp, #0
 8019b4a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019b4c:	4b03      	ldr	r3, [pc, #12]	; (8019b5c <USBD_static_malloc+0x18>)
}
 8019b4e:	4618      	mov	r0, r3
 8019b50:	370c      	adds	r7, #12
 8019b52:	46bd      	mov	sp, r7
 8019b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b58:	4770      	bx	lr
 8019b5a:	bf00      	nop
 8019b5c:	20002d9c 	.word	0x20002d9c

08019b60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019b60:	b480      	push	{r7}
 8019b62:	b083      	sub	sp, #12
 8019b64:	af00      	add	r7, sp, #0
 8019b66:	6078      	str	r0, [r7, #4]

}
 8019b68:	bf00      	nop
 8019b6a:	370c      	adds	r7, #12
 8019b6c:	46bd      	mov	sp, r7
 8019b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b72:	4770      	bx	lr

08019b74 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8019b74:	b580      	push	{r7, lr}
 8019b76:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8019b78:	f7ea fd0a 	bl	8004590 <SystemClock_Config>
}
 8019b7c:	bf00      	nop
 8019b7e:	bd80      	pop	{r7, pc}

08019b80 <__libc_init_array>:
 8019b80:	b570      	push	{r4, r5, r6, lr}
 8019b82:	4d0d      	ldr	r5, [pc, #52]	; (8019bb8 <__libc_init_array+0x38>)
 8019b84:	4c0d      	ldr	r4, [pc, #52]	; (8019bbc <__libc_init_array+0x3c>)
 8019b86:	1b64      	subs	r4, r4, r5
 8019b88:	10a4      	asrs	r4, r4, #2
 8019b8a:	2600      	movs	r6, #0
 8019b8c:	42a6      	cmp	r6, r4
 8019b8e:	d109      	bne.n	8019ba4 <__libc_init_array+0x24>
 8019b90:	4d0b      	ldr	r5, [pc, #44]	; (8019bc0 <__libc_init_array+0x40>)
 8019b92:	4c0c      	ldr	r4, [pc, #48]	; (8019bc4 <__libc_init_array+0x44>)
 8019b94:	f003 f808 	bl	801cba8 <_init>
 8019b98:	1b64      	subs	r4, r4, r5
 8019b9a:	10a4      	asrs	r4, r4, #2
 8019b9c:	2600      	movs	r6, #0
 8019b9e:	42a6      	cmp	r6, r4
 8019ba0:	d105      	bne.n	8019bae <__libc_init_array+0x2e>
 8019ba2:	bd70      	pop	{r4, r5, r6, pc}
 8019ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8019ba8:	4798      	blx	r3
 8019baa:	3601      	adds	r6, #1
 8019bac:	e7ee      	b.n	8019b8c <__libc_init_array+0xc>
 8019bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8019bb2:	4798      	blx	r3
 8019bb4:	3601      	adds	r6, #1
 8019bb6:	e7f2      	b.n	8019b9e <__libc_init_array+0x1e>
 8019bb8:	0801d678 	.word	0x0801d678
 8019bbc:	0801d678 	.word	0x0801d678
 8019bc0:	0801d678 	.word	0x0801d678
 8019bc4:	0801d67c 	.word	0x0801d67c

08019bc8 <malloc>:
 8019bc8:	4b02      	ldr	r3, [pc, #8]	; (8019bd4 <malloc+0xc>)
 8019bca:	4601      	mov	r1, r0
 8019bcc:	6818      	ldr	r0, [r3, #0]
 8019bce:	f000 b88d 	b.w	8019cec <_malloc_r>
 8019bd2:	bf00      	nop
 8019bd4:	20000100 	.word	0x20000100

08019bd8 <free>:
 8019bd8:	4b02      	ldr	r3, [pc, #8]	; (8019be4 <free+0xc>)
 8019bda:	4601      	mov	r1, r0
 8019bdc:	6818      	ldr	r0, [r3, #0]
 8019bde:	f000 b819 	b.w	8019c14 <_free_r>
 8019be2:	bf00      	nop
 8019be4:	20000100 	.word	0x20000100

08019be8 <memcpy>:
 8019be8:	440a      	add	r2, r1
 8019bea:	4291      	cmp	r1, r2
 8019bec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019bf0:	d100      	bne.n	8019bf4 <memcpy+0xc>
 8019bf2:	4770      	bx	lr
 8019bf4:	b510      	push	{r4, lr}
 8019bf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019bfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019bfe:	4291      	cmp	r1, r2
 8019c00:	d1f9      	bne.n	8019bf6 <memcpy+0xe>
 8019c02:	bd10      	pop	{r4, pc}

08019c04 <memset>:
 8019c04:	4402      	add	r2, r0
 8019c06:	4603      	mov	r3, r0
 8019c08:	4293      	cmp	r3, r2
 8019c0a:	d100      	bne.n	8019c0e <memset+0xa>
 8019c0c:	4770      	bx	lr
 8019c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8019c12:	e7f9      	b.n	8019c08 <memset+0x4>

08019c14 <_free_r>:
 8019c14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019c16:	2900      	cmp	r1, #0
 8019c18:	d044      	beq.n	8019ca4 <_free_r+0x90>
 8019c1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019c1e:	9001      	str	r0, [sp, #4]
 8019c20:	2b00      	cmp	r3, #0
 8019c22:	f1a1 0404 	sub.w	r4, r1, #4
 8019c26:	bfb8      	it	lt
 8019c28:	18e4      	addlt	r4, r4, r3
 8019c2a:	f001 fdd1 	bl	801b7d0 <__malloc_lock>
 8019c2e:	4a1e      	ldr	r2, [pc, #120]	; (8019ca8 <_free_r+0x94>)
 8019c30:	9801      	ldr	r0, [sp, #4]
 8019c32:	6813      	ldr	r3, [r2, #0]
 8019c34:	b933      	cbnz	r3, 8019c44 <_free_r+0x30>
 8019c36:	6063      	str	r3, [r4, #4]
 8019c38:	6014      	str	r4, [r2, #0]
 8019c3a:	b003      	add	sp, #12
 8019c3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019c40:	f001 bdcc 	b.w	801b7dc <__malloc_unlock>
 8019c44:	42a3      	cmp	r3, r4
 8019c46:	d908      	bls.n	8019c5a <_free_r+0x46>
 8019c48:	6825      	ldr	r5, [r4, #0]
 8019c4a:	1961      	adds	r1, r4, r5
 8019c4c:	428b      	cmp	r3, r1
 8019c4e:	bf01      	itttt	eq
 8019c50:	6819      	ldreq	r1, [r3, #0]
 8019c52:	685b      	ldreq	r3, [r3, #4]
 8019c54:	1949      	addeq	r1, r1, r5
 8019c56:	6021      	streq	r1, [r4, #0]
 8019c58:	e7ed      	b.n	8019c36 <_free_r+0x22>
 8019c5a:	461a      	mov	r2, r3
 8019c5c:	685b      	ldr	r3, [r3, #4]
 8019c5e:	b10b      	cbz	r3, 8019c64 <_free_r+0x50>
 8019c60:	42a3      	cmp	r3, r4
 8019c62:	d9fa      	bls.n	8019c5a <_free_r+0x46>
 8019c64:	6811      	ldr	r1, [r2, #0]
 8019c66:	1855      	adds	r5, r2, r1
 8019c68:	42a5      	cmp	r5, r4
 8019c6a:	d10b      	bne.n	8019c84 <_free_r+0x70>
 8019c6c:	6824      	ldr	r4, [r4, #0]
 8019c6e:	4421      	add	r1, r4
 8019c70:	1854      	adds	r4, r2, r1
 8019c72:	42a3      	cmp	r3, r4
 8019c74:	6011      	str	r1, [r2, #0]
 8019c76:	d1e0      	bne.n	8019c3a <_free_r+0x26>
 8019c78:	681c      	ldr	r4, [r3, #0]
 8019c7a:	685b      	ldr	r3, [r3, #4]
 8019c7c:	6053      	str	r3, [r2, #4]
 8019c7e:	4421      	add	r1, r4
 8019c80:	6011      	str	r1, [r2, #0]
 8019c82:	e7da      	b.n	8019c3a <_free_r+0x26>
 8019c84:	d902      	bls.n	8019c8c <_free_r+0x78>
 8019c86:	230c      	movs	r3, #12
 8019c88:	6003      	str	r3, [r0, #0]
 8019c8a:	e7d6      	b.n	8019c3a <_free_r+0x26>
 8019c8c:	6825      	ldr	r5, [r4, #0]
 8019c8e:	1961      	adds	r1, r4, r5
 8019c90:	428b      	cmp	r3, r1
 8019c92:	bf04      	itt	eq
 8019c94:	6819      	ldreq	r1, [r3, #0]
 8019c96:	685b      	ldreq	r3, [r3, #4]
 8019c98:	6063      	str	r3, [r4, #4]
 8019c9a:	bf04      	itt	eq
 8019c9c:	1949      	addeq	r1, r1, r5
 8019c9e:	6021      	streq	r1, [r4, #0]
 8019ca0:	6054      	str	r4, [r2, #4]
 8019ca2:	e7ca      	b.n	8019c3a <_free_r+0x26>
 8019ca4:	b003      	add	sp, #12
 8019ca6:	bd30      	pop	{r4, r5, pc}
 8019ca8:	20002fbc 	.word	0x20002fbc

08019cac <sbrk_aligned>:
 8019cac:	b570      	push	{r4, r5, r6, lr}
 8019cae:	4e0e      	ldr	r6, [pc, #56]	; (8019ce8 <sbrk_aligned+0x3c>)
 8019cb0:	460c      	mov	r4, r1
 8019cb2:	6831      	ldr	r1, [r6, #0]
 8019cb4:	4605      	mov	r5, r0
 8019cb6:	b911      	cbnz	r1, 8019cbe <sbrk_aligned+0x12>
 8019cb8:	f000 fd0e 	bl	801a6d8 <_sbrk_r>
 8019cbc:	6030      	str	r0, [r6, #0]
 8019cbe:	4621      	mov	r1, r4
 8019cc0:	4628      	mov	r0, r5
 8019cc2:	f000 fd09 	bl	801a6d8 <_sbrk_r>
 8019cc6:	1c43      	adds	r3, r0, #1
 8019cc8:	d00a      	beq.n	8019ce0 <sbrk_aligned+0x34>
 8019cca:	1cc4      	adds	r4, r0, #3
 8019ccc:	f024 0403 	bic.w	r4, r4, #3
 8019cd0:	42a0      	cmp	r0, r4
 8019cd2:	d007      	beq.n	8019ce4 <sbrk_aligned+0x38>
 8019cd4:	1a21      	subs	r1, r4, r0
 8019cd6:	4628      	mov	r0, r5
 8019cd8:	f000 fcfe 	bl	801a6d8 <_sbrk_r>
 8019cdc:	3001      	adds	r0, #1
 8019cde:	d101      	bne.n	8019ce4 <sbrk_aligned+0x38>
 8019ce0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8019ce4:	4620      	mov	r0, r4
 8019ce6:	bd70      	pop	{r4, r5, r6, pc}
 8019ce8:	20002fc0 	.word	0x20002fc0

08019cec <_malloc_r>:
 8019cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019cf0:	1ccd      	adds	r5, r1, #3
 8019cf2:	f025 0503 	bic.w	r5, r5, #3
 8019cf6:	3508      	adds	r5, #8
 8019cf8:	2d0c      	cmp	r5, #12
 8019cfa:	bf38      	it	cc
 8019cfc:	250c      	movcc	r5, #12
 8019cfe:	2d00      	cmp	r5, #0
 8019d00:	4607      	mov	r7, r0
 8019d02:	db01      	blt.n	8019d08 <_malloc_r+0x1c>
 8019d04:	42a9      	cmp	r1, r5
 8019d06:	d905      	bls.n	8019d14 <_malloc_r+0x28>
 8019d08:	230c      	movs	r3, #12
 8019d0a:	603b      	str	r3, [r7, #0]
 8019d0c:	2600      	movs	r6, #0
 8019d0e:	4630      	mov	r0, r6
 8019d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d14:	4e2e      	ldr	r6, [pc, #184]	; (8019dd0 <_malloc_r+0xe4>)
 8019d16:	f001 fd5b 	bl	801b7d0 <__malloc_lock>
 8019d1a:	6833      	ldr	r3, [r6, #0]
 8019d1c:	461c      	mov	r4, r3
 8019d1e:	bb34      	cbnz	r4, 8019d6e <_malloc_r+0x82>
 8019d20:	4629      	mov	r1, r5
 8019d22:	4638      	mov	r0, r7
 8019d24:	f7ff ffc2 	bl	8019cac <sbrk_aligned>
 8019d28:	1c43      	adds	r3, r0, #1
 8019d2a:	4604      	mov	r4, r0
 8019d2c:	d14d      	bne.n	8019dca <_malloc_r+0xde>
 8019d2e:	6834      	ldr	r4, [r6, #0]
 8019d30:	4626      	mov	r6, r4
 8019d32:	2e00      	cmp	r6, #0
 8019d34:	d140      	bne.n	8019db8 <_malloc_r+0xcc>
 8019d36:	6823      	ldr	r3, [r4, #0]
 8019d38:	4631      	mov	r1, r6
 8019d3a:	4638      	mov	r0, r7
 8019d3c:	eb04 0803 	add.w	r8, r4, r3
 8019d40:	f000 fcca 	bl	801a6d8 <_sbrk_r>
 8019d44:	4580      	cmp	r8, r0
 8019d46:	d13a      	bne.n	8019dbe <_malloc_r+0xd2>
 8019d48:	6821      	ldr	r1, [r4, #0]
 8019d4a:	3503      	adds	r5, #3
 8019d4c:	1a6d      	subs	r5, r5, r1
 8019d4e:	f025 0503 	bic.w	r5, r5, #3
 8019d52:	3508      	adds	r5, #8
 8019d54:	2d0c      	cmp	r5, #12
 8019d56:	bf38      	it	cc
 8019d58:	250c      	movcc	r5, #12
 8019d5a:	4629      	mov	r1, r5
 8019d5c:	4638      	mov	r0, r7
 8019d5e:	f7ff ffa5 	bl	8019cac <sbrk_aligned>
 8019d62:	3001      	adds	r0, #1
 8019d64:	d02b      	beq.n	8019dbe <_malloc_r+0xd2>
 8019d66:	6823      	ldr	r3, [r4, #0]
 8019d68:	442b      	add	r3, r5
 8019d6a:	6023      	str	r3, [r4, #0]
 8019d6c:	e00e      	b.n	8019d8c <_malloc_r+0xa0>
 8019d6e:	6822      	ldr	r2, [r4, #0]
 8019d70:	1b52      	subs	r2, r2, r5
 8019d72:	d41e      	bmi.n	8019db2 <_malloc_r+0xc6>
 8019d74:	2a0b      	cmp	r2, #11
 8019d76:	d916      	bls.n	8019da6 <_malloc_r+0xba>
 8019d78:	1961      	adds	r1, r4, r5
 8019d7a:	42a3      	cmp	r3, r4
 8019d7c:	6025      	str	r5, [r4, #0]
 8019d7e:	bf18      	it	ne
 8019d80:	6059      	strne	r1, [r3, #4]
 8019d82:	6863      	ldr	r3, [r4, #4]
 8019d84:	bf08      	it	eq
 8019d86:	6031      	streq	r1, [r6, #0]
 8019d88:	5162      	str	r2, [r4, r5]
 8019d8a:	604b      	str	r3, [r1, #4]
 8019d8c:	4638      	mov	r0, r7
 8019d8e:	f104 060b 	add.w	r6, r4, #11
 8019d92:	f001 fd23 	bl	801b7dc <__malloc_unlock>
 8019d96:	f026 0607 	bic.w	r6, r6, #7
 8019d9a:	1d23      	adds	r3, r4, #4
 8019d9c:	1af2      	subs	r2, r6, r3
 8019d9e:	d0b6      	beq.n	8019d0e <_malloc_r+0x22>
 8019da0:	1b9b      	subs	r3, r3, r6
 8019da2:	50a3      	str	r3, [r4, r2]
 8019da4:	e7b3      	b.n	8019d0e <_malloc_r+0x22>
 8019da6:	6862      	ldr	r2, [r4, #4]
 8019da8:	42a3      	cmp	r3, r4
 8019daa:	bf0c      	ite	eq
 8019dac:	6032      	streq	r2, [r6, #0]
 8019dae:	605a      	strne	r2, [r3, #4]
 8019db0:	e7ec      	b.n	8019d8c <_malloc_r+0xa0>
 8019db2:	4623      	mov	r3, r4
 8019db4:	6864      	ldr	r4, [r4, #4]
 8019db6:	e7b2      	b.n	8019d1e <_malloc_r+0x32>
 8019db8:	4634      	mov	r4, r6
 8019dba:	6876      	ldr	r6, [r6, #4]
 8019dbc:	e7b9      	b.n	8019d32 <_malloc_r+0x46>
 8019dbe:	230c      	movs	r3, #12
 8019dc0:	603b      	str	r3, [r7, #0]
 8019dc2:	4638      	mov	r0, r7
 8019dc4:	f001 fd0a 	bl	801b7dc <__malloc_unlock>
 8019dc8:	e7a1      	b.n	8019d0e <_malloc_r+0x22>
 8019dca:	6025      	str	r5, [r4, #0]
 8019dcc:	e7de      	b.n	8019d8c <_malloc_r+0xa0>
 8019dce:	bf00      	nop
 8019dd0:	20002fbc 	.word	0x20002fbc

08019dd4 <__cvt>:
 8019dd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019dd8:	ec55 4b10 	vmov	r4, r5, d0
 8019ddc:	2d00      	cmp	r5, #0
 8019dde:	460e      	mov	r6, r1
 8019de0:	4619      	mov	r1, r3
 8019de2:	462b      	mov	r3, r5
 8019de4:	bfbb      	ittet	lt
 8019de6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8019dea:	461d      	movlt	r5, r3
 8019dec:	2300      	movge	r3, #0
 8019dee:	232d      	movlt	r3, #45	; 0x2d
 8019df0:	700b      	strb	r3, [r1, #0]
 8019df2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019df4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8019df8:	4691      	mov	r9, r2
 8019dfa:	f023 0820 	bic.w	r8, r3, #32
 8019dfe:	bfbc      	itt	lt
 8019e00:	4622      	movlt	r2, r4
 8019e02:	4614      	movlt	r4, r2
 8019e04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019e08:	d005      	beq.n	8019e16 <__cvt+0x42>
 8019e0a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8019e0e:	d100      	bne.n	8019e12 <__cvt+0x3e>
 8019e10:	3601      	adds	r6, #1
 8019e12:	2102      	movs	r1, #2
 8019e14:	e000      	b.n	8019e18 <__cvt+0x44>
 8019e16:	2103      	movs	r1, #3
 8019e18:	ab03      	add	r3, sp, #12
 8019e1a:	9301      	str	r3, [sp, #4]
 8019e1c:	ab02      	add	r3, sp, #8
 8019e1e:	9300      	str	r3, [sp, #0]
 8019e20:	ec45 4b10 	vmov	d0, r4, r5
 8019e24:	4653      	mov	r3, sl
 8019e26:	4632      	mov	r2, r6
 8019e28:	f000 fdc2 	bl	801a9b0 <_dtoa_r>
 8019e2c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8019e30:	4607      	mov	r7, r0
 8019e32:	d102      	bne.n	8019e3a <__cvt+0x66>
 8019e34:	f019 0f01 	tst.w	r9, #1
 8019e38:	d022      	beq.n	8019e80 <__cvt+0xac>
 8019e3a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019e3e:	eb07 0906 	add.w	r9, r7, r6
 8019e42:	d110      	bne.n	8019e66 <__cvt+0x92>
 8019e44:	783b      	ldrb	r3, [r7, #0]
 8019e46:	2b30      	cmp	r3, #48	; 0x30
 8019e48:	d10a      	bne.n	8019e60 <__cvt+0x8c>
 8019e4a:	2200      	movs	r2, #0
 8019e4c:	2300      	movs	r3, #0
 8019e4e:	4620      	mov	r0, r4
 8019e50:	4629      	mov	r1, r5
 8019e52:	f7e6 fe51 	bl	8000af8 <__aeabi_dcmpeq>
 8019e56:	b918      	cbnz	r0, 8019e60 <__cvt+0x8c>
 8019e58:	f1c6 0601 	rsb	r6, r6, #1
 8019e5c:	f8ca 6000 	str.w	r6, [sl]
 8019e60:	f8da 3000 	ldr.w	r3, [sl]
 8019e64:	4499      	add	r9, r3
 8019e66:	2200      	movs	r2, #0
 8019e68:	2300      	movs	r3, #0
 8019e6a:	4620      	mov	r0, r4
 8019e6c:	4629      	mov	r1, r5
 8019e6e:	f7e6 fe43 	bl	8000af8 <__aeabi_dcmpeq>
 8019e72:	b108      	cbz	r0, 8019e78 <__cvt+0xa4>
 8019e74:	f8cd 900c 	str.w	r9, [sp, #12]
 8019e78:	2230      	movs	r2, #48	; 0x30
 8019e7a:	9b03      	ldr	r3, [sp, #12]
 8019e7c:	454b      	cmp	r3, r9
 8019e7e:	d307      	bcc.n	8019e90 <__cvt+0xbc>
 8019e80:	9b03      	ldr	r3, [sp, #12]
 8019e82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019e84:	1bdb      	subs	r3, r3, r7
 8019e86:	4638      	mov	r0, r7
 8019e88:	6013      	str	r3, [r2, #0]
 8019e8a:	b004      	add	sp, #16
 8019e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e90:	1c59      	adds	r1, r3, #1
 8019e92:	9103      	str	r1, [sp, #12]
 8019e94:	701a      	strb	r2, [r3, #0]
 8019e96:	e7f0      	b.n	8019e7a <__cvt+0xa6>

08019e98 <__exponent>:
 8019e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019e9a:	4603      	mov	r3, r0
 8019e9c:	2900      	cmp	r1, #0
 8019e9e:	bfb8      	it	lt
 8019ea0:	4249      	neglt	r1, r1
 8019ea2:	f803 2b02 	strb.w	r2, [r3], #2
 8019ea6:	bfb4      	ite	lt
 8019ea8:	222d      	movlt	r2, #45	; 0x2d
 8019eaa:	222b      	movge	r2, #43	; 0x2b
 8019eac:	2909      	cmp	r1, #9
 8019eae:	7042      	strb	r2, [r0, #1]
 8019eb0:	dd2a      	ble.n	8019f08 <__exponent+0x70>
 8019eb2:	f10d 0407 	add.w	r4, sp, #7
 8019eb6:	46a4      	mov	ip, r4
 8019eb8:	270a      	movs	r7, #10
 8019eba:	46a6      	mov	lr, r4
 8019ebc:	460a      	mov	r2, r1
 8019ebe:	fb91 f6f7 	sdiv	r6, r1, r7
 8019ec2:	fb07 1516 	mls	r5, r7, r6, r1
 8019ec6:	3530      	adds	r5, #48	; 0x30
 8019ec8:	2a63      	cmp	r2, #99	; 0x63
 8019eca:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8019ece:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8019ed2:	4631      	mov	r1, r6
 8019ed4:	dcf1      	bgt.n	8019eba <__exponent+0x22>
 8019ed6:	3130      	adds	r1, #48	; 0x30
 8019ed8:	f1ae 0502 	sub.w	r5, lr, #2
 8019edc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8019ee0:	1c44      	adds	r4, r0, #1
 8019ee2:	4629      	mov	r1, r5
 8019ee4:	4561      	cmp	r1, ip
 8019ee6:	d30a      	bcc.n	8019efe <__exponent+0x66>
 8019ee8:	f10d 0209 	add.w	r2, sp, #9
 8019eec:	eba2 020e 	sub.w	r2, r2, lr
 8019ef0:	4565      	cmp	r5, ip
 8019ef2:	bf88      	it	hi
 8019ef4:	2200      	movhi	r2, #0
 8019ef6:	4413      	add	r3, r2
 8019ef8:	1a18      	subs	r0, r3, r0
 8019efa:	b003      	add	sp, #12
 8019efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019efe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019f02:	f804 2f01 	strb.w	r2, [r4, #1]!
 8019f06:	e7ed      	b.n	8019ee4 <__exponent+0x4c>
 8019f08:	2330      	movs	r3, #48	; 0x30
 8019f0a:	3130      	adds	r1, #48	; 0x30
 8019f0c:	7083      	strb	r3, [r0, #2]
 8019f0e:	70c1      	strb	r1, [r0, #3]
 8019f10:	1d03      	adds	r3, r0, #4
 8019f12:	e7f1      	b.n	8019ef8 <__exponent+0x60>

08019f14 <_printf_float>:
 8019f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f18:	ed2d 8b02 	vpush	{d8}
 8019f1c:	b08d      	sub	sp, #52	; 0x34
 8019f1e:	460c      	mov	r4, r1
 8019f20:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8019f24:	4616      	mov	r6, r2
 8019f26:	461f      	mov	r7, r3
 8019f28:	4605      	mov	r5, r0
 8019f2a:	f001 fc37 	bl	801b79c <_localeconv_r>
 8019f2e:	f8d0 a000 	ldr.w	sl, [r0]
 8019f32:	4650      	mov	r0, sl
 8019f34:	f7e6 f964 	bl	8000200 <strlen>
 8019f38:	2300      	movs	r3, #0
 8019f3a:	930a      	str	r3, [sp, #40]	; 0x28
 8019f3c:	6823      	ldr	r3, [r4, #0]
 8019f3e:	9305      	str	r3, [sp, #20]
 8019f40:	f8d8 3000 	ldr.w	r3, [r8]
 8019f44:	f894 b018 	ldrb.w	fp, [r4, #24]
 8019f48:	3307      	adds	r3, #7
 8019f4a:	f023 0307 	bic.w	r3, r3, #7
 8019f4e:	f103 0208 	add.w	r2, r3, #8
 8019f52:	f8c8 2000 	str.w	r2, [r8]
 8019f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f5a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019f5e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8019f62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019f66:	9307      	str	r3, [sp, #28]
 8019f68:	f8cd 8018 	str.w	r8, [sp, #24]
 8019f6c:	ee08 0a10 	vmov	s16, r0
 8019f70:	4b9f      	ldr	r3, [pc, #636]	; (801a1f0 <_printf_float+0x2dc>)
 8019f72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019f76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019f7a:	f7e6 fdef 	bl	8000b5c <__aeabi_dcmpun>
 8019f7e:	bb88      	cbnz	r0, 8019fe4 <_printf_float+0xd0>
 8019f80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019f84:	4b9a      	ldr	r3, [pc, #616]	; (801a1f0 <_printf_float+0x2dc>)
 8019f86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019f8a:	f7e6 fdc9 	bl	8000b20 <__aeabi_dcmple>
 8019f8e:	bb48      	cbnz	r0, 8019fe4 <_printf_float+0xd0>
 8019f90:	2200      	movs	r2, #0
 8019f92:	2300      	movs	r3, #0
 8019f94:	4640      	mov	r0, r8
 8019f96:	4649      	mov	r1, r9
 8019f98:	f7e6 fdb8 	bl	8000b0c <__aeabi_dcmplt>
 8019f9c:	b110      	cbz	r0, 8019fa4 <_printf_float+0x90>
 8019f9e:	232d      	movs	r3, #45	; 0x2d
 8019fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019fa4:	4b93      	ldr	r3, [pc, #588]	; (801a1f4 <_printf_float+0x2e0>)
 8019fa6:	4894      	ldr	r0, [pc, #592]	; (801a1f8 <_printf_float+0x2e4>)
 8019fa8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8019fac:	bf94      	ite	ls
 8019fae:	4698      	movls	r8, r3
 8019fb0:	4680      	movhi	r8, r0
 8019fb2:	2303      	movs	r3, #3
 8019fb4:	6123      	str	r3, [r4, #16]
 8019fb6:	9b05      	ldr	r3, [sp, #20]
 8019fb8:	f023 0204 	bic.w	r2, r3, #4
 8019fbc:	6022      	str	r2, [r4, #0]
 8019fbe:	f04f 0900 	mov.w	r9, #0
 8019fc2:	9700      	str	r7, [sp, #0]
 8019fc4:	4633      	mov	r3, r6
 8019fc6:	aa0b      	add	r2, sp, #44	; 0x2c
 8019fc8:	4621      	mov	r1, r4
 8019fca:	4628      	mov	r0, r5
 8019fcc:	f000 f9d8 	bl	801a380 <_printf_common>
 8019fd0:	3001      	adds	r0, #1
 8019fd2:	f040 8090 	bne.w	801a0f6 <_printf_float+0x1e2>
 8019fd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019fda:	b00d      	add	sp, #52	; 0x34
 8019fdc:	ecbd 8b02 	vpop	{d8}
 8019fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fe4:	4642      	mov	r2, r8
 8019fe6:	464b      	mov	r3, r9
 8019fe8:	4640      	mov	r0, r8
 8019fea:	4649      	mov	r1, r9
 8019fec:	f7e6 fdb6 	bl	8000b5c <__aeabi_dcmpun>
 8019ff0:	b140      	cbz	r0, 801a004 <_printf_float+0xf0>
 8019ff2:	464b      	mov	r3, r9
 8019ff4:	2b00      	cmp	r3, #0
 8019ff6:	bfbc      	itt	lt
 8019ff8:	232d      	movlt	r3, #45	; 0x2d
 8019ffa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019ffe:	487f      	ldr	r0, [pc, #508]	; (801a1fc <_printf_float+0x2e8>)
 801a000:	4b7f      	ldr	r3, [pc, #508]	; (801a200 <_printf_float+0x2ec>)
 801a002:	e7d1      	b.n	8019fa8 <_printf_float+0x94>
 801a004:	6863      	ldr	r3, [r4, #4]
 801a006:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801a00a:	9206      	str	r2, [sp, #24]
 801a00c:	1c5a      	adds	r2, r3, #1
 801a00e:	d13f      	bne.n	801a090 <_printf_float+0x17c>
 801a010:	2306      	movs	r3, #6
 801a012:	6063      	str	r3, [r4, #4]
 801a014:	9b05      	ldr	r3, [sp, #20]
 801a016:	6861      	ldr	r1, [r4, #4]
 801a018:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801a01c:	2300      	movs	r3, #0
 801a01e:	9303      	str	r3, [sp, #12]
 801a020:	ab0a      	add	r3, sp, #40	; 0x28
 801a022:	e9cd b301 	strd	fp, r3, [sp, #4]
 801a026:	ab09      	add	r3, sp, #36	; 0x24
 801a028:	ec49 8b10 	vmov	d0, r8, r9
 801a02c:	9300      	str	r3, [sp, #0]
 801a02e:	6022      	str	r2, [r4, #0]
 801a030:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801a034:	4628      	mov	r0, r5
 801a036:	f7ff fecd 	bl	8019dd4 <__cvt>
 801a03a:	9b06      	ldr	r3, [sp, #24]
 801a03c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a03e:	2b47      	cmp	r3, #71	; 0x47
 801a040:	4680      	mov	r8, r0
 801a042:	d108      	bne.n	801a056 <_printf_float+0x142>
 801a044:	1cc8      	adds	r0, r1, #3
 801a046:	db02      	blt.n	801a04e <_printf_float+0x13a>
 801a048:	6863      	ldr	r3, [r4, #4]
 801a04a:	4299      	cmp	r1, r3
 801a04c:	dd41      	ble.n	801a0d2 <_printf_float+0x1be>
 801a04e:	f1ab 0b02 	sub.w	fp, fp, #2
 801a052:	fa5f fb8b 	uxtb.w	fp, fp
 801a056:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a05a:	d820      	bhi.n	801a09e <_printf_float+0x18a>
 801a05c:	3901      	subs	r1, #1
 801a05e:	465a      	mov	r2, fp
 801a060:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801a064:	9109      	str	r1, [sp, #36]	; 0x24
 801a066:	f7ff ff17 	bl	8019e98 <__exponent>
 801a06a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a06c:	1813      	adds	r3, r2, r0
 801a06e:	2a01      	cmp	r2, #1
 801a070:	4681      	mov	r9, r0
 801a072:	6123      	str	r3, [r4, #16]
 801a074:	dc02      	bgt.n	801a07c <_printf_float+0x168>
 801a076:	6822      	ldr	r2, [r4, #0]
 801a078:	07d2      	lsls	r2, r2, #31
 801a07a:	d501      	bpl.n	801a080 <_printf_float+0x16c>
 801a07c:	3301      	adds	r3, #1
 801a07e:	6123      	str	r3, [r4, #16]
 801a080:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801a084:	2b00      	cmp	r3, #0
 801a086:	d09c      	beq.n	8019fc2 <_printf_float+0xae>
 801a088:	232d      	movs	r3, #45	; 0x2d
 801a08a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a08e:	e798      	b.n	8019fc2 <_printf_float+0xae>
 801a090:	9a06      	ldr	r2, [sp, #24]
 801a092:	2a47      	cmp	r2, #71	; 0x47
 801a094:	d1be      	bne.n	801a014 <_printf_float+0x100>
 801a096:	2b00      	cmp	r3, #0
 801a098:	d1bc      	bne.n	801a014 <_printf_float+0x100>
 801a09a:	2301      	movs	r3, #1
 801a09c:	e7b9      	b.n	801a012 <_printf_float+0xfe>
 801a09e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801a0a2:	d118      	bne.n	801a0d6 <_printf_float+0x1c2>
 801a0a4:	2900      	cmp	r1, #0
 801a0a6:	6863      	ldr	r3, [r4, #4]
 801a0a8:	dd0b      	ble.n	801a0c2 <_printf_float+0x1ae>
 801a0aa:	6121      	str	r1, [r4, #16]
 801a0ac:	b913      	cbnz	r3, 801a0b4 <_printf_float+0x1a0>
 801a0ae:	6822      	ldr	r2, [r4, #0]
 801a0b0:	07d0      	lsls	r0, r2, #31
 801a0b2:	d502      	bpl.n	801a0ba <_printf_float+0x1a6>
 801a0b4:	3301      	adds	r3, #1
 801a0b6:	440b      	add	r3, r1
 801a0b8:	6123      	str	r3, [r4, #16]
 801a0ba:	65a1      	str	r1, [r4, #88]	; 0x58
 801a0bc:	f04f 0900 	mov.w	r9, #0
 801a0c0:	e7de      	b.n	801a080 <_printf_float+0x16c>
 801a0c2:	b913      	cbnz	r3, 801a0ca <_printf_float+0x1b6>
 801a0c4:	6822      	ldr	r2, [r4, #0]
 801a0c6:	07d2      	lsls	r2, r2, #31
 801a0c8:	d501      	bpl.n	801a0ce <_printf_float+0x1ba>
 801a0ca:	3302      	adds	r3, #2
 801a0cc:	e7f4      	b.n	801a0b8 <_printf_float+0x1a4>
 801a0ce:	2301      	movs	r3, #1
 801a0d0:	e7f2      	b.n	801a0b8 <_printf_float+0x1a4>
 801a0d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801a0d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a0d8:	4299      	cmp	r1, r3
 801a0da:	db05      	blt.n	801a0e8 <_printf_float+0x1d4>
 801a0dc:	6823      	ldr	r3, [r4, #0]
 801a0de:	6121      	str	r1, [r4, #16]
 801a0e0:	07d8      	lsls	r0, r3, #31
 801a0e2:	d5ea      	bpl.n	801a0ba <_printf_float+0x1a6>
 801a0e4:	1c4b      	adds	r3, r1, #1
 801a0e6:	e7e7      	b.n	801a0b8 <_printf_float+0x1a4>
 801a0e8:	2900      	cmp	r1, #0
 801a0ea:	bfd4      	ite	le
 801a0ec:	f1c1 0202 	rsble	r2, r1, #2
 801a0f0:	2201      	movgt	r2, #1
 801a0f2:	4413      	add	r3, r2
 801a0f4:	e7e0      	b.n	801a0b8 <_printf_float+0x1a4>
 801a0f6:	6823      	ldr	r3, [r4, #0]
 801a0f8:	055a      	lsls	r2, r3, #21
 801a0fa:	d407      	bmi.n	801a10c <_printf_float+0x1f8>
 801a0fc:	6923      	ldr	r3, [r4, #16]
 801a0fe:	4642      	mov	r2, r8
 801a100:	4631      	mov	r1, r6
 801a102:	4628      	mov	r0, r5
 801a104:	47b8      	blx	r7
 801a106:	3001      	adds	r0, #1
 801a108:	d12c      	bne.n	801a164 <_printf_float+0x250>
 801a10a:	e764      	b.n	8019fd6 <_printf_float+0xc2>
 801a10c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a110:	f240 80e0 	bls.w	801a2d4 <_printf_float+0x3c0>
 801a114:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a118:	2200      	movs	r2, #0
 801a11a:	2300      	movs	r3, #0
 801a11c:	f7e6 fcec 	bl	8000af8 <__aeabi_dcmpeq>
 801a120:	2800      	cmp	r0, #0
 801a122:	d034      	beq.n	801a18e <_printf_float+0x27a>
 801a124:	4a37      	ldr	r2, [pc, #220]	; (801a204 <_printf_float+0x2f0>)
 801a126:	2301      	movs	r3, #1
 801a128:	4631      	mov	r1, r6
 801a12a:	4628      	mov	r0, r5
 801a12c:	47b8      	blx	r7
 801a12e:	3001      	adds	r0, #1
 801a130:	f43f af51 	beq.w	8019fd6 <_printf_float+0xc2>
 801a134:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a138:	429a      	cmp	r2, r3
 801a13a:	db02      	blt.n	801a142 <_printf_float+0x22e>
 801a13c:	6823      	ldr	r3, [r4, #0]
 801a13e:	07d8      	lsls	r0, r3, #31
 801a140:	d510      	bpl.n	801a164 <_printf_float+0x250>
 801a142:	ee18 3a10 	vmov	r3, s16
 801a146:	4652      	mov	r2, sl
 801a148:	4631      	mov	r1, r6
 801a14a:	4628      	mov	r0, r5
 801a14c:	47b8      	blx	r7
 801a14e:	3001      	adds	r0, #1
 801a150:	f43f af41 	beq.w	8019fd6 <_printf_float+0xc2>
 801a154:	f04f 0800 	mov.w	r8, #0
 801a158:	f104 091a 	add.w	r9, r4, #26
 801a15c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a15e:	3b01      	subs	r3, #1
 801a160:	4543      	cmp	r3, r8
 801a162:	dc09      	bgt.n	801a178 <_printf_float+0x264>
 801a164:	6823      	ldr	r3, [r4, #0]
 801a166:	079b      	lsls	r3, r3, #30
 801a168:	f100 8105 	bmi.w	801a376 <_printf_float+0x462>
 801a16c:	68e0      	ldr	r0, [r4, #12]
 801a16e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a170:	4298      	cmp	r0, r3
 801a172:	bfb8      	it	lt
 801a174:	4618      	movlt	r0, r3
 801a176:	e730      	b.n	8019fda <_printf_float+0xc6>
 801a178:	2301      	movs	r3, #1
 801a17a:	464a      	mov	r2, r9
 801a17c:	4631      	mov	r1, r6
 801a17e:	4628      	mov	r0, r5
 801a180:	47b8      	blx	r7
 801a182:	3001      	adds	r0, #1
 801a184:	f43f af27 	beq.w	8019fd6 <_printf_float+0xc2>
 801a188:	f108 0801 	add.w	r8, r8, #1
 801a18c:	e7e6      	b.n	801a15c <_printf_float+0x248>
 801a18e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a190:	2b00      	cmp	r3, #0
 801a192:	dc39      	bgt.n	801a208 <_printf_float+0x2f4>
 801a194:	4a1b      	ldr	r2, [pc, #108]	; (801a204 <_printf_float+0x2f0>)
 801a196:	2301      	movs	r3, #1
 801a198:	4631      	mov	r1, r6
 801a19a:	4628      	mov	r0, r5
 801a19c:	47b8      	blx	r7
 801a19e:	3001      	adds	r0, #1
 801a1a0:	f43f af19 	beq.w	8019fd6 <_printf_float+0xc2>
 801a1a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a1a8:	4313      	orrs	r3, r2
 801a1aa:	d102      	bne.n	801a1b2 <_printf_float+0x29e>
 801a1ac:	6823      	ldr	r3, [r4, #0]
 801a1ae:	07d9      	lsls	r1, r3, #31
 801a1b0:	d5d8      	bpl.n	801a164 <_printf_float+0x250>
 801a1b2:	ee18 3a10 	vmov	r3, s16
 801a1b6:	4652      	mov	r2, sl
 801a1b8:	4631      	mov	r1, r6
 801a1ba:	4628      	mov	r0, r5
 801a1bc:	47b8      	blx	r7
 801a1be:	3001      	adds	r0, #1
 801a1c0:	f43f af09 	beq.w	8019fd6 <_printf_float+0xc2>
 801a1c4:	f04f 0900 	mov.w	r9, #0
 801a1c8:	f104 0a1a 	add.w	sl, r4, #26
 801a1cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a1ce:	425b      	negs	r3, r3
 801a1d0:	454b      	cmp	r3, r9
 801a1d2:	dc01      	bgt.n	801a1d8 <_printf_float+0x2c4>
 801a1d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a1d6:	e792      	b.n	801a0fe <_printf_float+0x1ea>
 801a1d8:	2301      	movs	r3, #1
 801a1da:	4652      	mov	r2, sl
 801a1dc:	4631      	mov	r1, r6
 801a1de:	4628      	mov	r0, r5
 801a1e0:	47b8      	blx	r7
 801a1e2:	3001      	adds	r0, #1
 801a1e4:	f43f aef7 	beq.w	8019fd6 <_printf_float+0xc2>
 801a1e8:	f109 0901 	add.w	r9, r9, #1
 801a1ec:	e7ee      	b.n	801a1cc <_printf_float+0x2b8>
 801a1ee:	bf00      	nop
 801a1f0:	7fefffff 	.word	0x7fefffff
 801a1f4:	0801d238 	.word	0x0801d238
 801a1f8:	0801d23c 	.word	0x0801d23c
 801a1fc:	0801d244 	.word	0x0801d244
 801a200:	0801d240 	.word	0x0801d240
 801a204:	0801d248 	.word	0x0801d248
 801a208:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a20a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a20c:	429a      	cmp	r2, r3
 801a20e:	bfa8      	it	ge
 801a210:	461a      	movge	r2, r3
 801a212:	2a00      	cmp	r2, #0
 801a214:	4691      	mov	r9, r2
 801a216:	dc37      	bgt.n	801a288 <_printf_float+0x374>
 801a218:	f04f 0b00 	mov.w	fp, #0
 801a21c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a220:	f104 021a 	add.w	r2, r4, #26
 801a224:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a226:	9305      	str	r3, [sp, #20]
 801a228:	eba3 0309 	sub.w	r3, r3, r9
 801a22c:	455b      	cmp	r3, fp
 801a22e:	dc33      	bgt.n	801a298 <_printf_float+0x384>
 801a230:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a234:	429a      	cmp	r2, r3
 801a236:	db3b      	blt.n	801a2b0 <_printf_float+0x39c>
 801a238:	6823      	ldr	r3, [r4, #0]
 801a23a:	07da      	lsls	r2, r3, #31
 801a23c:	d438      	bmi.n	801a2b0 <_printf_float+0x39c>
 801a23e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a240:	9a05      	ldr	r2, [sp, #20]
 801a242:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a244:	1a9a      	subs	r2, r3, r2
 801a246:	eba3 0901 	sub.w	r9, r3, r1
 801a24a:	4591      	cmp	r9, r2
 801a24c:	bfa8      	it	ge
 801a24e:	4691      	movge	r9, r2
 801a250:	f1b9 0f00 	cmp.w	r9, #0
 801a254:	dc35      	bgt.n	801a2c2 <_printf_float+0x3ae>
 801a256:	f04f 0800 	mov.w	r8, #0
 801a25a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a25e:	f104 0a1a 	add.w	sl, r4, #26
 801a262:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a266:	1a9b      	subs	r3, r3, r2
 801a268:	eba3 0309 	sub.w	r3, r3, r9
 801a26c:	4543      	cmp	r3, r8
 801a26e:	f77f af79 	ble.w	801a164 <_printf_float+0x250>
 801a272:	2301      	movs	r3, #1
 801a274:	4652      	mov	r2, sl
 801a276:	4631      	mov	r1, r6
 801a278:	4628      	mov	r0, r5
 801a27a:	47b8      	blx	r7
 801a27c:	3001      	adds	r0, #1
 801a27e:	f43f aeaa 	beq.w	8019fd6 <_printf_float+0xc2>
 801a282:	f108 0801 	add.w	r8, r8, #1
 801a286:	e7ec      	b.n	801a262 <_printf_float+0x34e>
 801a288:	4613      	mov	r3, r2
 801a28a:	4631      	mov	r1, r6
 801a28c:	4642      	mov	r2, r8
 801a28e:	4628      	mov	r0, r5
 801a290:	47b8      	blx	r7
 801a292:	3001      	adds	r0, #1
 801a294:	d1c0      	bne.n	801a218 <_printf_float+0x304>
 801a296:	e69e      	b.n	8019fd6 <_printf_float+0xc2>
 801a298:	2301      	movs	r3, #1
 801a29a:	4631      	mov	r1, r6
 801a29c:	4628      	mov	r0, r5
 801a29e:	9205      	str	r2, [sp, #20]
 801a2a0:	47b8      	blx	r7
 801a2a2:	3001      	adds	r0, #1
 801a2a4:	f43f ae97 	beq.w	8019fd6 <_printf_float+0xc2>
 801a2a8:	9a05      	ldr	r2, [sp, #20]
 801a2aa:	f10b 0b01 	add.w	fp, fp, #1
 801a2ae:	e7b9      	b.n	801a224 <_printf_float+0x310>
 801a2b0:	ee18 3a10 	vmov	r3, s16
 801a2b4:	4652      	mov	r2, sl
 801a2b6:	4631      	mov	r1, r6
 801a2b8:	4628      	mov	r0, r5
 801a2ba:	47b8      	blx	r7
 801a2bc:	3001      	adds	r0, #1
 801a2be:	d1be      	bne.n	801a23e <_printf_float+0x32a>
 801a2c0:	e689      	b.n	8019fd6 <_printf_float+0xc2>
 801a2c2:	9a05      	ldr	r2, [sp, #20]
 801a2c4:	464b      	mov	r3, r9
 801a2c6:	4442      	add	r2, r8
 801a2c8:	4631      	mov	r1, r6
 801a2ca:	4628      	mov	r0, r5
 801a2cc:	47b8      	blx	r7
 801a2ce:	3001      	adds	r0, #1
 801a2d0:	d1c1      	bne.n	801a256 <_printf_float+0x342>
 801a2d2:	e680      	b.n	8019fd6 <_printf_float+0xc2>
 801a2d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a2d6:	2a01      	cmp	r2, #1
 801a2d8:	dc01      	bgt.n	801a2de <_printf_float+0x3ca>
 801a2da:	07db      	lsls	r3, r3, #31
 801a2dc:	d538      	bpl.n	801a350 <_printf_float+0x43c>
 801a2de:	2301      	movs	r3, #1
 801a2e0:	4642      	mov	r2, r8
 801a2e2:	4631      	mov	r1, r6
 801a2e4:	4628      	mov	r0, r5
 801a2e6:	47b8      	blx	r7
 801a2e8:	3001      	adds	r0, #1
 801a2ea:	f43f ae74 	beq.w	8019fd6 <_printf_float+0xc2>
 801a2ee:	ee18 3a10 	vmov	r3, s16
 801a2f2:	4652      	mov	r2, sl
 801a2f4:	4631      	mov	r1, r6
 801a2f6:	4628      	mov	r0, r5
 801a2f8:	47b8      	blx	r7
 801a2fa:	3001      	adds	r0, #1
 801a2fc:	f43f ae6b 	beq.w	8019fd6 <_printf_float+0xc2>
 801a300:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a304:	2200      	movs	r2, #0
 801a306:	2300      	movs	r3, #0
 801a308:	f7e6 fbf6 	bl	8000af8 <__aeabi_dcmpeq>
 801a30c:	b9d8      	cbnz	r0, 801a346 <_printf_float+0x432>
 801a30e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a310:	f108 0201 	add.w	r2, r8, #1
 801a314:	3b01      	subs	r3, #1
 801a316:	4631      	mov	r1, r6
 801a318:	4628      	mov	r0, r5
 801a31a:	47b8      	blx	r7
 801a31c:	3001      	adds	r0, #1
 801a31e:	d10e      	bne.n	801a33e <_printf_float+0x42a>
 801a320:	e659      	b.n	8019fd6 <_printf_float+0xc2>
 801a322:	2301      	movs	r3, #1
 801a324:	4652      	mov	r2, sl
 801a326:	4631      	mov	r1, r6
 801a328:	4628      	mov	r0, r5
 801a32a:	47b8      	blx	r7
 801a32c:	3001      	adds	r0, #1
 801a32e:	f43f ae52 	beq.w	8019fd6 <_printf_float+0xc2>
 801a332:	f108 0801 	add.w	r8, r8, #1
 801a336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a338:	3b01      	subs	r3, #1
 801a33a:	4543      	cmp	r3, r8
 801a33c:	dcf1      	bgt.n	801a322 <_printf_float+0x40e>
 801a33e:	464b      	mov	r3, r9
 801a340:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801a344:	e6dc      	b.n	801a100 <_printf_float+0x1ec>
 801a346:	f04f 0800 	mov.w	r8, #0
 801a34a:	f104 0a1a 	add.w	sl, r4, #26
 801a34e:	e7f2      	b.n	801a336 <_printf_float+0x422>
 801a350:	2301      	movs	r3, #1
 801a352:	4642      	mov	r2, r8
 801a354:	e7df      	b.n	801a316 <_printf_float+0x402>
 801a356:	2301      	movs	r3, #1
 801a358:	464a      	mov	r2, r9
 801a35a:	4631      	mov	r1, r6
 801a35c:	4628      	mov	r0, r5
 801a35e:	47b8      	blx	r7
 801a360:	3001      	adds	r0, #1
 801a362:	f43f ae38 	beq.w	8019fd6 <_printf_float+0xc2>
 801a366:	f108 0801 	add.w	r8, r8, #1
 801a36a:	68e3      	ldr	r3, [r4, #12]
 801a36c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a36e:	1a5b      	subs	r3, r3, r1
 801a370:	4543      	cmp	r3, r8
 801a372:	dcf0      	bgt.n	801a356 <_printf_float+0x442>
 801a374:	e6fa      	b.n	801a16c <_printf_float+0x258>
 801a376:	f04f 0800 	mov.w	r8, #0
 801a37a:	f104 0919 	add.w	r9, r4, #25
 801a37e:	e7f4      	b.n	801a36a <_printf_float+0x456>

0801a380 <_printf_common>:
 801a380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a384:	4616      	mov	r6, r2
 801a386:	4699      	mov	r9, r3
 801a388:	688a      	ldr	r2, [r1, #8]
 801a38a:	690b      	ldr	r3, [r1, #16]
 801a38c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a390:	4293      	cmp	r3, r2
 801a392:	bfb8      	it	lt
 801a394:	4613      	movlt	r3, r2
 801a396:	6033      	str	r3, [r6, #0]
 801a398:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a39c:	4607      	mov	r7, r0
 801a39e:	460c      	mov	r4, r1
 801a3a0:	b10a      	cbz	r2, 801a3a6 <_printf_common+0x26>
 801a3a2:	3301      	adds	r3, #1
 801a3a4:	6033      	str	r3, [r6, #0]
 801a3a6:	6823      	ldr	r3, [r4, #0]
 801a3a8:	0699      	lsls	r1, r3, #26
 801a3aa:	bf42      	ittt	mi
 801a3ac:	6833      	ldrmi	r3, [r6, #0]
 801a3ae:	3302      	addmi	r3, #2
 801a3b0:	6033      	strmi	r3, [r6, #0]
 801a3b2:	6825      	ldr	r5, [r4, #0]
 801a3b4:	f015 0506 	ands.w	r5, r5, #6
 801a3b8:	d106      	bne.n	801a3c8 <_printf_common+0x48>
 801a3ba:	f104 0a19 	add.w	sl, r4, #25
 801a3be:	68e3      	ldr	r3, [r4, #12]
 801a3c0:	6832      	ldr	r2, [r6, #0]
 801a3c2:	1a9b      	subs	r3, r3, r2
 801a3c4:	42ab      	cmp	r3, r5
 801a3c6:	dc26      	bgt.n	801a416 <_printf_common+0x96>
 801a3c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a3cc:	1e13      	subs	r3, r2, #0
 801a3ce:	6822      	ldr	r2, [r4, #0]
 801a3d0:	bf18      	it	ne
 801a3d2:	2301      	movne	r3, #1
 801a3d4:	0692      	lsls	r2, r2, #26
 801a3d6:	d42b      	bmi.n	801a430 <_printf_common+0xb0>
 801a3d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a3dc:	4649      	mov	r1, r9
 801a3de:	4638      	mov	r0, r7
 801a3e0:	47c0      	blx	r8
 801a3e2:	3001      	adds	r0, #1
 801a3e4:	d01e      	beq.n	801a424 <_printf_common+0xa4>
 801a3e6:	6823      	ldr	r3, [r4, #0]
 801a3e8:	68e5      	ldr	r5, [r4, #12]
 801a3ea:	6832      	ldr	r2, [r6, #0]
 801a3ec:	f003 0306 	and.w	r3, r3, #6
 801a3f0:	2b04      	cmp	r3, #4
 801a3f2:	bf08      	it	eq
 801a3f4:	1aad      	subeq	r5, r5, r2
 801a3f6:	68a3      	ldr	r3, [r4, #8]
 801a3f8:	6922      	ldr	r2, [r4, #16]
 801a3fa:	bf0c      	ite	eq
 801a3fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a400:	2500      	movne	r5, #0
 801a402:	4293      	cmp	r3, r2
 801a404:	bfc4      	itt	gt
 801a406:	1a9b      	subgt	r3, r3, r2
 801a408:	18ed      	addgt	r5, r5, r3
 801a40a:	2600      	movs	r6, #0
 801a40c:	341a      	adds	r4, #26
 801a40e:	42b5      	cmp	r5, r6
 801a410:	d11a      	bne.n	801a448 <_printf_common+0xc8>
 801a412:	2000      	movs	r0, #0
 801a414:	e008      	b.n	801a428 <_printf_common+0xa8>
 801a416:	2301      	movs	r3, #1
 801a418:	4652      	mov	r2, sl
 801a41a:	4649      	mov	r1, r9
 801a41c:	4638      	mov	r0, r7
 801a41e:	47c0      	blx	r8
 801a420:	3001      	adds	r0, #1
 801a422:	d103      	bne.n	801a42c <_printf_common+0xac>
 801a424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a42c:	3501      	adds	r5, #1
 801a42e:	e7c6      	b.n	801a3be <_printf_common+0x3e>
 801a430:	18e1      	adds	r1, r4, r3
 801a432:	1c5a      	adds	r2, r3, #1
 801a434:	2030      	movs	r0, #48	; 0x30
 801a436:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a43a:	4422      	add	r2, r4
 801a43c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a440:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a444:	3302      	adds	r3, #2
 801a446:	e7c7      	b.n	801a3d8 <_printf_common+0x58>
 801a448:	2301      	movs	r3, #1
 801a44a:	4622      	mov	r2, r4
 801a44c:	4649      	mov	r1, r9
 801a44e:	4638      	mov	r0, r7
 801a450:	47c0      	blx	r8
 801a452:	3001      	adds	r0, #1
 801a454:	d0e6      	beq.n	801a424 <_printf_common+0xa4>
 801a456:	3601      	adds	r6, #1
 801a458:	e7d9      	b.n	801a40e <_printf_common+0x8e>
	...

0801a45c <_printf_i>:
 801a45c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a460:	7e0f      	ldrb	r7, [r1, #24]
 801a462:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a464:	2f78      	cmp	r7, #120	; 0x78
 801a466:	4691      	mov	r9, r2
 801a468:	4680      	mov	r8, r0
 801a46a:	460c      	mov	r4, r1
 801a46c:	469a      	mov	sl, r3
 801a46e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a472:	d807      	bhi.n	801a484 <_printf_i+0x28>
 801a474:	2f62      	cmp	r7, #98	; 0x62
 801a476:	d80a      	bhi.n	801a48e <_printf_i+0x32>
 801a478:	2f00      	cmp	r7, #0
 801a47a:	f000 80d8 	beq.w	801a62e <_printf_i+0x1d2>
 801a47e:	2f58      	cmp	r7, #88	; 0x58
 801a480:	f000 80a3 	beq.w	801a5ca <_printf_i+0x16e>
 801a484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a488:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a48c:	e03a      	b.n	801a504 <_printf_i+0xa8>
 801a48e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a492:	2b15      	cmp	r3, #21
 801a494:	d8f6      	bhi.n	801a484 <_printf_i+0x28>
 801a496:	a101      	add	r1, pc, #4	; (adr r1, 801a49c <_printf_i+0x40>)
 801a498:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a49c:	0801a4f5 	.word	0x0801a4f5
 801a4a0:	0801a509 	.word	0x0801a509
 801a4a4:	0801a485 	.word	0x0801a485
 801a4a8:	0801a485 	.word	0x0801a485
 801a4ac:	0801a485 	.word	0x0801a485
 801a4b0:	0801a485 	.word	0x0801a485
 801a4b4:	0801a509 	.word	0x0801a509
 801a4b8:	0801a485 	.word	0x0801a485
 801a4bc:	0801a485 	.word	0x0801a485
 801a4c0:	0801a485 	.word	0x0801a485
 801a4c4:	0801a485 	.word	0x0801a485
 801a4c8:	0801a615 	.word	0x0801a615
 801a4cc:	0801a539 	.word	0x0801a539
 801a4d0:	0801a5f7 	.word	0x0801a5f7
 801a4d4:	0801a485 	.word	0x0801a485
 801a4d8:	0801a485 	.word	0x0801a485
 801a4dc:	0801a637 	.word	0x0801a637
 801a4e0:	0801a485 	.word	0x0801a485
 801a4e4:	0801a539 	.word	0x0801a539
 801a4e8:	0801a485 	.word	0x0801a485
 801a4ec:	0801a485 	.word	0x0801a485
 801a4f0:	0801a5ff 	.word	0x0801a5ff
 801a4f4:	682b      	ldr	r3, [r5, #0]
 801a4f6:	1d1a      	adds	r2, r3, #4
 801a4f8:	681b      	ldr	r3, [r3, #0]
 801a4fa:	602a      	str	r2, [r5, #0]
 801a4fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a500:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a504:	2301      	movs	r3, #1
 801a506:	e0a3      	b.n	801a650 <_printf_i+0x1f4>
 801a508:	6820      	ldr	r0, [r4, #0]
 801a50a:	6829      	ldr	r1, [r5, #0]
 801a50c:	0606      	lsls	r6, r0, #24
 801a50e:	f101 0304 	add.w	r3, r1, #4
 801a512:	d50a      	bpl.n	801a52a <_printf_i+0xce>
 801a514:	680e      	ldr	r6, [r1, #0]
 801a516:	602b      	str	r3, [r5, #0]
 801a518:	2e00      	cmp	r6, #0
 801a51a:	da03      	bge.n	801a524 <_printf_i+0xc8>
 801a51c:	232d      	movs	r3, #45	; 0x2d
 801a51e:	4276      	negs	r6, r6
 801a520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a524:	485e      	ldr	r0, [pc, #376]	; (801a6a0 <_printf_i+0x244>)
 801a526:	230a      	movs	r3, #10
 801a528:	e019      	b.n	801a55e <_printf_i+0x102>
 801a52a:	680e      	ldr	r6, [r1, #0]
 801a52c:	602b      	str	r3, [r5, #0]
 801a52e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a532:	bf18      	it	ne
 801a534:	b236      	sxthne	r6, r6
 801a536:	e7ef      	b.n	801a518 <_printf_i+0xbc>
 801a538:	682b      	ldr	r3, [r5, #0]
 801a53a:	6820      	ldr	r0, [r4, #0]
 801a53c:	1d19      	adds	r1, r3, #4
 801a53e:	6029      	str	r1, [r5, #0]
 801a540:	0601      	lsls	r1, r0, #24
 801a542:	d501      	bpl.n	801a548 <_printf_i+0xec>
 801a544:	681e      	ldr	r6, [r3, #0]
 801a546:	e002      	b.n	801a54e <_printf_i+0xf2>
 801a548:	0646      	lsls	r6, r0, #25
 801a54a:	d5fb      	bpl.n	801a544 <_printf_i+0xe8>
 801a54c:	881e      	ldrh	r6, [r3, #0]
 801a54e:	4854      	ldr	r0, [pc, #336]	; (801a6a0 <_printf_i+0x244>)
 801a550:	2f6f      	cmp	r7, #111	; 0x6f
 801a552:	bf0c      	ite	eq
 801a554:	2308      	moveq	r3, #8
 801a556:	230a      	movne	r3, #10
 801a558:	2100      	movs	r1, #0
 801a55a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a55e:	6865      	ldr	r5, [r4, #4]
 801a560:	60a5      	str	r5, [r4, #8]
 801a562:	2d00      	cmp	r5, #0
 801a564:	bfa2      	ittt	ge
 801a566:	6821      	ldrge	r1, [r4, #0]
 801a568:	f021 0104 	bicge.w	r1, r1, #4
 801a56c:	6021      	strge	r1, [r4, #0]
 801a56e:	b90e      	cbnz	r6, 801a574 <_printf_i+0x118>
 801a570:	2d00      	cmp	r5, #0
 801a572:	d04d      	beq.n	801a610 <_printf_i+0x1b4>
 801a574:	4615      	mov	r5, r2
 801a576:	fbb6 f1f3 	udiv	r1, r6, r3
 801a57a:	fb03 6711 	mls	r7, r3, r1, r6
 801a57e:	5dc7      	ldrb	r7, [r0, r7]
 801a580:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a584:	4637      	mov	r7, r6
 801a586:	42bb      	cmp	r3, r7
 801a588:	460e      	mov	r6, r1
 801a58a:	d9f4      	bls.n	801a576 <_printf_i+0x11a>
 801a58c:	2b08      	cmp	r3, #8
 801a58e:	d10b      	bne.n	801a5a8 <_printf_i+0x14c>
 801a590:	6823      	ldr	r3, [r4, #0]
 801a592:	07de      	lsls	r6, r3, #31
 801a594:	d508      	bpl.n	801a5a8 <_printf_i+0x14c>
 801a596:	6923      	ldr	r3, [r4, #16]
 801a598:	6861      	ldr	r1, [r4, #4]
 801a59a:	4299      	cmp	r1, r3
 801a59c:	bfde      	ittt	le
 801a59e:	2330      	movle	r3, #48	; 0x30
 801a5a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a5a4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801a5a8:	1b52      	subs	r2, r2, r5
 801a5aa:	6122      	str	r2, [r4, #16]
 801a5ac:	f8cd a000 	str.w	sl, [sp]
 801a5b0:	464b      	mov	r3, r9
 801a5b2:	aa03      	add	r2, sp, #12
 801a5b4:	4621      	mov	r1, r4
 801a5b6:	4640      	mov	r0, r8
 801a5b8:	f7ff fee2 	bl	801a380 <_printf_common>
 801a5bc:	3001      	adds	r0, #1
 801a5be:	d14c      	bne.n	801a65a <_printf_i+0x1fe>
 801a5c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a5c4:	b004      	add	sp, #16
 801a5c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a5ca:	4835      	ldr	r0, [pc, #212]	; (801a6a0 <_printf_i+0x244>)
 801a5cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a5d0:	6829      	ldr	r1, [r5, #0]
 801a5d2:	6823      	ldr	r3, [r4, #0]
 801a5d4:	f851 6b04 	ldr.w	r6, [r1], #4
 801a5d8:	6029      	str	r1, [r5, #0]
 801a5da:	061d      	lsls	r5, r3, #24
 801a5dc:	d514      	bpl.n	801a608 <_printf_i+0x1ac>
 801a5de:	07df      	lsls	r7, r3, #31
 801a5e0:	bf44      	itt	mi
 801a5e2:	f043 0320 	orrmi.w	r3, r3, #32
 801a5e6:	6023      	strmi	r3, [r4, #0]
 801a5e8:	b91e      	cbnz	r6, 801a5f2 <_printf_i+0x196>
 801a5ea:	6823      	ldr	r3, [r4, #0]
 801a5ec:	f023 0320 	bic.w	r3, r3, #32
 801a5f0:	6023      	str	r3, [r4, #0]
 801a5f2:	2310      	movs	r3, #16
 801a5f4:	e7b0      	b.n	801a558 <_printf_i+0xfc>
 801a5f6:	6823      	ldr	r3, [r4, #0]
 801a5f8:	f043 0320 	orr.w	r3, r3, #32
 801a5fc:	6023      	str	r3, [r4, #0]
 801a5fe:	2378      	movs	r3, #120	; 0x78
 801a600:	4828      	ldr	r0, [pc, #160]	; (801a6a4 <_printf_i+0x248>)
 801a602:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a606:	e7e3      	b.n	801a5d0 <_printf_i+0x174>
 801a608:	0659      	lsls	r1, r3, #25
 801a60a:	bf48      	it	mi
 801a60c:	b2b6      	uxthmi	r6, r6
 801a60e:	e7e6      	b.n	801a5de <_printf_i+0x182>
 801a610:	4615      	mov	r5, r2
 801a612:	e7bb      	b.n	801a58c <_printf_i+0x130>
 801a614:	682b      	ldr	r3, [r5, #0]
 801a616:	6826      	ldr	r6, [r4, #0]
 801a618:	6961      	ldr	r1, [r4, #20]
 801a61a:	1d18      	adds	r0, r3, #4
 801a61c:	6028      	str	r0, [r5, #0]
 801a61e:	0635      	lsls	r5, r6, #24
 801a620:	681b      	ldr	r3, [r3, #0]
 801a622:	d501      	bpl.n	801a628 <_printf_i+0x1cc>
 801a624:	6019      	str	r1, [r3, #0]
 801a626:	e002      	b.n	801a62e <_printf_i+0x1d2>
 801a628:	0670      	lsls	r0, r6, #25
 801a62a:	d5fb      	bpl.n	801a624 <_printf_i+0x1c8>
 801a62c:	8019      	strh	r1, [r3, #0]
 801a62e:	2300      	movs	r3, #0
 801a630:	6123      	str	r3, [r4, #16]
 801a632:	4615      	mov	r5, r2
 801a634:	e7ba      	b.n	801a5ac <_printf_i+0x150>
 801a636:	682b      	ldr	r3, [r5, #0]
 801a638:	1d1a      	adds	r2, r3, #4
 801a63a:	602a      	str	r2, [r5, #0]
 801a63c:	681d      	ldr	r5, [r3, #0]
 801a63e:	6862      	ldr	r2, [r4, #4]
 801a640:	2100      	movs	r1, #0
 801a642:	4628      	mov	r0, r5
 801a644:	f7e5 fde4 	bl	8000210 <memchr>
 801a648:	b108      	cbz	r0, 801a64e <_printf_i+0x1f2>
 801a64a:	1b40      	subs	r0, r0, r5
 801a64c:	6060      	str	r0, [r4, #4]
 801a64e:	6863      	ldr	r3, [r4, #4]
 801a650:	6123      	str	r3, [r4, #16]
 801a652:	2300      	movs	r3, #0
 801a654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a658:	e7a8      	b.n	801a5ac <_printf_i+0x150>
 801a65a:	6923      	ldr	r3, [r4, #16]
 801a65c:	462a      	mov	r2, r5
 801a65e:	4649      	mov	r1, r9
 801a660:	4640      	mov	r0, r8
 801a662:	47d0      	blx	sl
 801a664:	3001      	adds	r0, #1
 801a666:	d0ab      	beq.n	801a5c0 <_printf_i+0x164>
 801a668:	6823      	ldr	r3, [r4, #0]
 801a66a:	079b      	lsls	r3, r3, #30
 801a66c:	d413      	bmi.n	801a696 <_printf_i+0x23a>
 801a66e:	68e0      	ldr	r0, [r4, #12]
 801a670:	9b03      	ldr	r3, [sp, #12]
 801a672:	4298      	cmp	r0, r3
 801a674:	bfb8      	it	lt
 801a676:	4618      	movlt	r0, r3
 801a678:	e7a4      	b.n	801a5c4 <_printf_i+0x168>
 801a67a:	2301      	movs	r3, #1
 801a67c:	4632      	mov	r2, r6
 801a67e:	4649      	mov	r1, r9
 801a680:	4640      	mov	r0, r8
 801a682:	47d0      	blx	sl
 801a684:	3001      	adds	r0, #1
 801a686:	d09b      	beq.n	801a5c0 <_printf_i+0x164>
 801a688:	3501      	adds	r5, #1
 801a68a:	68e3      	ldr	r3, [r4, #12]
 801a68c:	9903      	ldr	r1, [sp, #12]
 801a68e:	1a5b      	subs	r3, r3, r1
 801a690:	42ab      	cmp	r3, r5
 801a692:	dcf2      	bgt.n	801a67a <_printf_i+0x21e>
 801a694:	e7eb      	b.n	801a66e <_printf_i+0x212>
 801a696:	2500      	movs	r5, #0
 801a698:	f104 0619 	add.w	r6, r4, #25
 801a69c:	e7f5      	b.n	801a68a <_printf_i+0x22e>
 801a69e:	bf00      	nop
 801a6a0:	0801d24a 	.word	0x0801d24a
 801a6a4:	0801d25b 	.word	0x0801d25b

0801a6a8 <iprintf>:
 801a6a8:	b40f      	push	{r0, r1, r2, r3}
 801a6aa:	4b0a      	ldr	r3, [pc, #40]	; (801a6d4 <iprintf+0x2c>)
 801a6ac:	b513      	push	{r0, r1, r4, lr}
 801a6ae:	681c      	ldr	r4, [r3, #0]
 801a6b0:	b124      	cbz	r4, 801a6bc <iprintf+0x14>
 801a6b2:	69a3      	ldr	r3, [r4, #24]
 801a6b4:	b913      	cbnz	r3, 801a6bc <iprintf+0x14>
 801a6b6:	4620      	mov	r0, r4
 801a6b8:	f000 ffc0 	bl	801b63c <__sinit>
 801a6bc:	ab05      	add	r3, sp, #20
 801a6be:	9a04      	ldr	r2, [sp, #16]
 801a6c0:	68a1      	ldr	r1, [r4, #8]
 801a6c2:	9301      	str	r3, [sp, #4]
 801a6c4:	4620      	mov	r0, r4
 801a6c6:	f001 fdaf 	bl	801c228 <_vfiprintf_r>
 801a6ca:	b002      	add	sp, #8
 801a6cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a6d0:	b004      	add	sp, #16
 801a6d2:	4770      	bx	lr
 801a6d4:	20000100 	.word	0x20000100

0801a6d8 <_sbrk_r>:
 801a6d8:	b538      	push	{r3, r4, r5, lr}
 801a6da:	4d06      	ldr	r5, [pc, #24]	; (801a6f4 <_sbrk_r+0x1c>)
 801a6dc:	2300      	movs	r3, #0
 801a6de:	4604      	mov	r4, r0
 801a6e0:	4608      	mov	r0, r1
 801a6e2:	602b      	str	r3, [r5, #0]
 801a6e4:	f002 fa48 	bl	801cb78 <_sbrk>
 801a6e8:	1c43      	adds	r3, r0, #1
 801a6ea:	d102      	bne.n	801a6f2 <_sbrk_r+0x1a>
 801a6ec:	682b      	ldr	r3, [r5, #0]
 801a6ee:	b103      	cbz	r3, 801a6f2 <_sbrk_r+0x1a>
 801a6f0:	6023      	str	r3, [r4, #0]
 801a6f2:	bd38      	pop	{r3, r4, r5, pc}
 801a6f4:	20002fc8 	.word	0x20002fc8

0801a6f8 <siprintf>:
 801a6f8:	b40e      	push	{r1, r2, r3}
 801a6fa:	b500      	push	{lr}
 801a6fc:	b09c      	sub	sp, #112	; 0x70
 801a6fe:	ab1d      	add	r3, sp, #116	; 0x74
 801a700:	9002      	str	r0, [sp, #8]
 801a702:	9006      	str	r0, [sp, #24]
 801a704:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a708:	4809      	ldr	r0, [pc, #36]	; (801a730 <siprintf+0x38>)
 801a70a:	9107      	str	r1, [sp, #28]
 801a70c:	9104      	str	r1, [sp, #16]
 801a70e:	4909      	ldr	r1, [pc, #36]	; (801a734 <siprintf+0x3c>)
 801a710:	f853 2b04 	ldr.w	r2, [r3], #4
 801a714:	9105      	str	r1, [sp, #20]
 801a716:	6800      	ldr	r0, [r0, #0]
 801a718:	9301      	str	r3, [sp, #4]
 801a71a:	a902      	add	r1, sp, #8
 801a71c:	f001 fc5a 	bl	801bfd4 <_svfiprintf_r>
 801a720:	9b02      	ldr	r3, [sp, #8]
 801a722:	2200      	movs	r2, #0
 801a724:	701a      	strb	r2, [r3, #0]
 801a726:	b01c      	add	sp, #112	; 0x70
 801a728:	f85d eb04 	ldr.w	lr, [sp], #4
 801a72c:	b003      	add	sp, #12
 801a72e:	4770      	bx	lr
 801a730:	20000100 	.word	0x20000100
 801a734:	ffff0208 	.word	0xffff0208

0801a738 <strdup>:
 801a738:	4b02      	ldr	r3, [pc, #8]	; (801a744 <strdup+0xc>)
 801a73a:	4601      	mov	r1, r0
 801a73c:	6818      	ldr	r0, [r3, #0]
 801a73e:	f000 b803 	b.w	801a748 <_strdup_r>
 801a742:	bf00      	nop
 801a744:	20000100 	.word	0x20000100

0801a748 <_strdup_r>:
 801a748:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a74a:	4604      	mov	r4, r0
 801a74c:	4608      	mov	r0, r1
 801a74e:	460d      	mov	r5, r1
 801a750:	f7e5 fd56 	bl	8000200 <strlen>
 801a754:	1c42      	adds	r2, r0, #1
 801a756:	4611      	mov	r1, r2
 801a758:	4620      	mov	r0, r4
 801a75a:	9201      	str	r2, [sp, #4]
 801a75c:	f7ff fac6 	bl	8019cec <_malloc_r>
 801a760:	4604      	mov	r4, r0
 801a762:	b118      	cbz	r0, 801a76c <_strdup_r+0x24>
 801a764:	9a01      	ldr	r2, [sp, #4]
 801a766:	4629      	mov	r1, r5
 801a768:	f7ff fa3e 	bl	8019be8 <memcpy>
 801a76c:	4620      	mov	r0, r4
 801a76e:	b003      	add	sp, #12
 801a770:	bd30      	pop	{r4, r5, pc}

0801a772 <strstr>:
 801a772:	780a      	ldrb	r2, [r1, #0]
 801a774:	b570      	push	{r4, r5, r6, lr}
 801a776:	b96a      	cbnz	r2, 801a794 <strstr+0x22>
 801a778:	bd70      	pop	{r4, r5, r6, pc}
 801a77a:	429a      	cmp	r2, r3
 801a77c:	d109      	bne.n	801a792 <strstr+0x20>
 801a77e:	460c      	mov	r4, r1
 801a780:	4605      	mov	r5, r0
 801a782:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801a786:	2b00      	cmp	r3, #0
 801a788:	d0f6      	beq.n	801a778 <strstr+0x6>
 801a78a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801a78e:	429e      	cmp	r6, r3
 801a790:	d0f7      	beq.n	801a782 <strstr+0x10>
 801a792:	3001      	adds	r0, #1
 801a794:	7803      	ldrb	r3, [r0, #0]
 801a796:	2b00      	cmp	r3, #0
 801a798:	d1ef      	bne.n	801a77a <strstr+0x8>
 801a79a:	4618      	mov	r0, r3
 801a79c:	e7ec      	b.n	801a778 <strstr+0x6>
	...

0801a7a0 <strtok>:
 801a7a0:	4b16      	ldr	r3, [pc, #88]	; (801a7fc <strtok+0x5c>)
 801a7a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a7a4:	681e      	ldr	r6, [r3, #0]
 801a7a6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 801a7a8:	4605      	mov	r5, r0
 801a7aa:	b9fc      	cbnz	r4, 801a7ec <strtok+0x4c>
 801a7ac:	2050      	movs	r0, #80	; 0x50
 801a7ae:	9101      	str	r1, [sp, #4]
 801a7b0:	f7ff fa0a 	bl	8019bc8 <malloc>
 801a7b4:	9901      	ldr	r1, [sp, #4]
 801a7b6:	65b0      	str	r0, [r6, #88]	; 0x58
 801a7b8:	4602      	mov	r2, r0
 801a7ba:	b920      	cbnz	r0, 801a7c6 <strtok+0x26>
 801a7bc:	4b10      	ldr	r3, [pc, #64]	; (801a800 <strtok+0x60>)
 801a7be:	4811      	ldr	r0, [pc, #68]	; (801a804 <strtok+0x64>)
 801a7c0:	2157      	movs	r1, #87	; 0x57
 801a7c2:	f000 f849 	bl	801a858 <__assert_func>
 801a7c6:	e9c0 4400 	strd	r4, r4, [r0]
 801a7ca:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801a7ce:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801a7d2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801a7d6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801a7da:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801a7de:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801a7e2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801a7e6:	6184      	str	r4, [r0, #24]
 801a7e8:	7704      	strb	r4, [r0, #28]
 801a7ea:	6244      	str	r4, [r0, #36]	; 0x24
 801a7ec:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801a7ee:	2301      	movs	r3, #1
 801a7f0:	4628      	mov	r0, r5
 801a7f2:	b002      	add	sp, #8
 801a7f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a7f8:	f000 b806 	b.w	801a808 <__strtok_r>
 801a7fc:	20000100 	.word	0x20000100
 801a800:	0801d26c 	.word	0x0801d26c
 801a804:	0801d283 	.word	0x0801d283

0801a808 <__strtok_r>:
 801a808:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a80a:	b908      	cbnz	r0, 801a810 <__strtok_r+0x8>
 801a80c:	6810      	ldr	r0, [r2, #0]
 801a80e:	b188      	cbz	r0, 801a834 <__strtok_r+0x2c>
 801a810:	4604      	mov	r4, r0
 801a812:	4620      	mov	r0, r4
 801a814:	f814 5b01 	ldrb.w	r5, [r4], #1
 801a818:	460f      	mov	r7, r1
 801a81a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801a81e:	b91e      	cbnz	r6, 801a828 <__strtok_r+0x20>
 801a820:	b965      	cbnz	r5, 801a83c <__strtok_r+0x34>
 801a822:	6015      	str	r5, [r2, #0]
 801a824:	4628      	mov	r0, r5
 801a826:	e005      	b.n	801a834 <__strtok_r+0x2c>
 801a828:	42b5      	cmp	r5, r6
 801a82a:	d1f6      	bne.n	801a81a <__strtok_r+0x12>
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	d1f0      	bne.n	801a812 <__strtok_r+0xa>
 801a830:	6014      	str	r4, [r2, #0]
 801a832:	7003      	strb	r3, [r0, #0]
 801a834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a836:	461c      	mov	r4, r3
 801a838:	e00c      	b.n	801a854 <__strtok_r+0x4c>
 801a83a:	b915      	cbnz	r5, 801a842 <__strtok_r+0x3a>
 801a83c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a840:	460e      	mov	r6, r1
 801a842:	f816 5b01 	ldrb.w	r5, [r6], #1
 801a846:	42ab      	cmp	r3, r5
 801a848:	d1f7      	bne.n	801a83a <__strtok_r+0x32>
 801a84a:	2b00      	cmp	r3, #0
 801a84c:	d0f3      	beq.n	801a836 <__strtok_r+0x2e>
 801a84e:	2300      	movs	r3, #0
 801a850:	f804 3c01 	strb.w	r3, [r4, #-1]
 801a854:	6014      	str	r4, [r2, #0]
 801a856:	e7ed      	b.n	801a834 <__strtok_r+0x2c>

0801a858 <__assert_func>:
 801a858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a85a:	4614      	mov	r4, r2
 801a85c:	461a      	mov	r2, r3
 801a85e:	4b09      	ldr	r3, [pc, #36]	; (801a884 <__assert_func+0x2c>)
 801a860:	681b      	ldr	r3, [r3, #0]
 801a862:	4605      	mov	r5, r0
 801a864:	68d8      	ldr	r0, [r3, #12]
 801a866:	b14c      	cbz	r4, 801a87c <__assert_func+0x24>
 801a868:	4b07      	ldr	r3, [pc, #28]	; (801a888 <__assert_func+0x30>)
 801a86a:	9100      	str	r1, [sp, #0]
 801a86c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a870:	4906      	ldr	r1, [pc, #24]	; (801a88c <__assert_func+0x34>)
 801a872:	462b      	mov	r3, r5
 801a874:	f000 ff60 	bl	801b738 <fiprintf>
 801a878:	f001 ff2a 	bl	801c6d0 <abort>
 801a87c:	4b04      	ldr	r3, [pc, #16]	; (801a890 <__assert_func+0x38>)
 801a87e:	461c      	mov	r4, r3
 801a880:	e7f3      	b.n	801a86a <__assert_func+0x12>
 801a882:	bf00      	nop
 801a884:	20000100 	.word	0x20000100
 801a888:	0801d2e0 	.word	0x0801d2e0
 801a88c:	0801d2ed 	.word	0x0801d2ed
 801a890:	0801d31b 	.word	0x0801d31b

0801a894 <quorem>:
 801a894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a898:	6903      	ldr	r3, [r0, #16]
 801a89a:	690c      	ldr	r4, [r1, #16]
 801a89c:	42a3      	cmp	r3, r4
 801a89e:	4607      	mov	r7, r0
 801a8a0:	f2c0 8081 	blt.w	801a9a6 <quorem+0x112>
 801a8a4:	3c01      	subs	r4, #1
 801a8a6:	f101 0814 	add.w	r8, r1, #20
 801a8aa:	f100 0514 	add.w	r5, r0, #20
 801a8ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a8b2:	9301      	str	r3, [sp, #4]
 801a8b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a8b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a8bc:	3301      	adds	r3, #1
 801a8be:	429a      	cmp	r2, r3
 801a8c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801a8c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a8c8:	fbb2 f6f3 	udiv	r6, r2, r3
 801a8cc:	d331      	bcc.n	801a932 <quorem+0x9e>
 801a8ce:	f04f 0e00 	mov.w	lr, #0
 801a8d2:	4640      	mov	r0, r8
 801a8d4:	46ac      	mov	ip, r5
 801a8d6:	46f2      	mov	sl, lr
 801a8d8:	f850 2b04 	ldr.w	r2, [r0], #4
 801a8dc:	b293      	uxth	r3, r2
 801a8de:	fb06 e303 	mla	r3, r6, r3, lr
 801a8e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801a8e6:	b29b      	uxth	r3, r3
 801a8e8:	ebaa 0303 	sub.w	r3, sl, r3
 801a8ec:	f8dc a000 	ldr.w	sl, [ip]
 801a8f0:	0c12      	lsrs	r2, r2, #16
 801a8f2:	fa13 f38a 	uxtah	r3, r3, sl
 801a8f6:	fb06 e202 	mla	r2, r6, r2, lr
 801a8fa:	9300      	str	r3, [sp, #0]
 801a8fc:	9b00      	ldr	r3, [sp, #0]
 801a8fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a902:	b292      	uxth	r2, r2
 801a904:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801a908:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a90c:	f8bd 3000 	ldrh.w	r3, [sp]
 801a910:	4581      	cmp	r9, r0
 801a912:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a916:	f84c 3b04 	str.w	r3, [ip], #4
 801a91a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801a91e:	d2db      	bcs.n	801a8d8 <quorem+0x44>
 801a920:	f855 300b 	ldr.w	r3, [r5, fp]
 801a924:	b92b      	cbnz	r3, 801a932 <quorem+0x9e>
 801a926:	9b01      	ldr	r3, [sp, #4]
 801a928:	3b04      	subs	r3, #4
 801a92a:	429d      	cmp	r5, r3
 801a92c:	461a      	mov	r2, r3
 801a92e:	d32e      	bcc.n	801a98e <quorem+0xfa>
 801a930:	613c      	str	r4, [r7, #16]
 801a932:	4638      	mov	r0, r7
 801a934:	f001 f9da 	bl	801bcec <__mcmp>
 801a938:	2800      	cmp	r0, #0
 801a93a:	db24      	blt.n	801a986 <quorem+0xf2>
 801a93c:	3601      	adds	r6, #1
 801a93e:	4628      	mov	r0, r5
 801a940:	f04f 0c00 	mov.w	ip, #0
 801a944:	f858 2b04 	ldr.w	r2, [r8], #4
 801a948:	f8d0 e000 	ldr.w	lr, [r0]
 801a94c:	b293      	uxth	r3, r2
 801a94e:	ebac 0303 	sub.w	r3, ip, r3
 801a952:	0c12      	lsrs	r2, r2, #16
 801a954:	fa13 f38e 	uxtah	r3, r3, lr
 801a958:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801a95c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a960:	b29b      	uxth	r3, r3
 801a962:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a966:	45c1      	cmp	r9, r8
 801a968:	f840 3b04 	str.w	r3, [r0], #4
 801a96c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801a970:	d2e8      	bcs.n	801a944 <quorem+0xb0>
 801a972:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a976:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a97a:	b922      	cbnz	r2, 801a986 <quorem+0xf2>
 801a97c:	3b04      	subs	r3, #4
 801a97e:	429d      	cmp	r5, r3
 801a980:	461a      	mov	r2, r3
 801a982:	d30a      	bcc.n	801a99a <quorem+0x106>
 801a984:	613c      	str	r4, [r7, #16]
 801a986:	4630      	mov	r0, r6
 801a988:	b003      	add	sp, #12
 801a98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a98e:	6812      	ldr	r2, [r2, #0]
 801a990:	3b04      	subs	r3, #4
 801a992:	2a00      	cmp	r2, #0
 801a994:	d1cc      	bne.n	801a930 <quorem+0x9c>
 801a996:	3c01      	subs	r4, #1
 801a998:	e7c7      	b.n	801a92a <quorem+0x96>
 801a99a:	6812      	ldr	r2, [r2, #0]
 801a99c:	3b04      	subs	r3, #4
 801a99e:	2a00      	cmp	r2, #0
 801a9a0:	d1f0      	bne.n	801a984 <quorem+0xf0>
 801a9a2:	3c01      	subs	r4, #1
 801a9a4:	e7eb      	b.n	801a97e <quorem+0xea>
 801a9a6:	2000      	movs	r0, #0
 801a9a8:	e7ee      	b.n	801a988 <quorem+0xf4>
 801a9aa:	0000      	movs	r0, r0
 801a9ac:	0000      	movs	r0, r0
	...

0801a9b0 <_dtoa_r>:
 801a9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9b4:	ed2d 8b04 	vpush	{d8-d9}
 801a9b8:	ec57 6b10 	vmov	r6, r7, d0
 801a9bc:	b093      	sub	sp, #76	; 0x4c
 801a9be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801a9c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801a9c4:	9106      	str	r1, [sp, #24]
 801a9c6:	ee10 aa10 	vmov	sl, s0
 801a9ca:	4604      	mov	r4, r0
 801a9cc:	9209      	str	r2, [sp, #36]	; 0x24
 801a9ce:	930c      	str	r3, [sp, #48]	; 0x30
 801a9d0:	46bb      	mov	fp, r7
 801a9d2:	b975      	cbnz	r5, 801a9f2 <_dtoa_r+0x42>
 801a9d4:	2010      	movs	r0, #16
 801a9d6:	f7ff f8f7 	bl	8019bc8 <malloc>
 801a9da:	4602      	mov	r2, r0
 801a9dc:	6260      	str	r0, [r4, #36]	; 0x24
 801a9de:	b920      	cbnz	r0, 801a9ea <_dtoa_r+0x3a>
 801a9e0:	4ba7      	ldr	r3, [pc, #668]	; (801ac80 <_dtoa_r+0x2d0>)
 801a9e2:	21ea      	movs	r1, #234	; 0xea
 801a9e4:	48a7      	ldr	r0, [pc, #668]	; (801ac84 <_dtoa_r+0x2d4>)
 801a9e6:	f7ff ff37 	bl	801a858 <__assert_func>
 801a9ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a9ee:	6005      	str	r5, [r0, #0]
 801a9f0:	60c5      	str	r5, [r0, #12]
 801a9f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a9f4:	6819      	ldr	r1, [r3, #0]
 801a9f6:	b151      	cbz	r1, 801aa0e <_dtoa_r+0x5e>
 801a9f8:	685a      	ldr	r2, [r3, #4]
 801a9fa:	604a      	str	r2, [r1, #4]
 801a9fc:	2301      	movs	r3, #1
 801a9fe:	4093      	lsls	r3, r2
 801aa00:	608b      	str	r3, [r1, #8]
 801aa02:	4620      	mov	r0, r4
 801aa04:	f000 ff30 	bl	801b868 <_Bfree>
 801aa08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801aa0a:	2200      	movs	r2, #0
 801aa0c:	601a      	str	r2, [r3, #0]
 801aa0e:	1e3b      	subs	r3, r7, #0
 801aa10:	bfaa      	itet	ge
 801aa12:	2300      	movge	r3, #0
 801aa14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801aa18:	f8c8 3000 	strge.w	r3, [r8]
 801aa1c:	4b9a      	ldr	r3, [pc, #616]	; (801ac88 <_dtoa_r+0x2d8>)
 801aa1e:	bfbc      	itt	lt
 801aa20:	2201      	movlt	r2, #1
 801aa22:	f8c8 2000 	strlt.w	r2, [r8]
 801aa26:	ea33 030b 	bics.w	r3, r3, fp
 801aa2a:	d11b      	bne.n	801aa64 <_dtoa_r+0xb4>
 801aa2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801aa2e:	f242 730f 	movw	r3, #9999	; 0x270f
 801aa32:	6013      	str	r3, [r2, #0]
 801aa34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801aa38:	4333      	orrs	r3, r6
 801aa3a:	f000 8592 	beq.w	801b562 <_dtoa_r+0xbb2>
 801aa3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801aa40:	b963      	cbnz	r3, 801aa5c <_dtoa_r+0xac>
 801aa42:	4b92      	ldr	r3, [pc, #584]	; (801ac8c <_dtoa_r+0x2dc>)
 801aa44:	e022      	b.n	801aa8c <_dtoa_r+0xdc>
 801aa46:	4b92      	ldr	r3, [pc, #584]	; (801ac90 <_dtoa_r+0x2e0>)
 801aa48:	9301      	str	r3, [sp, #4]
 801aa4a:	3308      	adds	r3, #8
 801aa4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801aa4e:	6013      	str	r3, [r2, #0]
 801aa50:	9801      	ldr	r0, [sp, #4]
 801aa52:	b013      	add	sp, #76	; 0x4c
 801aa54:	ecbd 8b04 	vpop	{d8-d9}
 801aa58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa5c:	4b8b      	ldr	r3, [pc, #556]	; (801ac8c <_dtoa_r+0x2dc>)
 801aa5e:	9301      	str	r3, [sp, #4]
 801aa60:	3303      	adds	r3, #3
 801aa62:	e7f3      	b.n	801aa4c <_dtoa_r+0x9c>
 801aa64:	2200      	movs	r2, #0
 801aa66:	2300      	movs	r3, #0
 801aa68:	4650      	mov	r0, sl
 801aa6a:	4659      	mov	r1, fp
 801aa6c:	f7e6 f844 	bl	8000af8 <__aeabi_dcmpeq>
 801aa70:	ec4b ab19 	vmov	d9, sl, fp
 801aa74:	4680      	mov	r8, r0
 801aa76:	b158      	cbz	r0, 801aa90 <_dtoa_r+0xe0>
 801aa78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801aa7a:	2301      	movs	r3, #1
 801aa7c:	6013      	str	r3, [r2, #0]
 801aa7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801aa80:	2b00      	cmp	r3, #0
 801aa82:	f000 856b 	beq.w	801b55c <_dtoa_r+0xbac>
 801aa86:	4883      	ldr	r0, [pc, #524]	; (801ac94 <_dtoa_r+0x2e4>)
 801aa88:	6018      	str	r0, [r3, #0]
 801aa8a:	1e43      	subs	r3, r0, #1
 801aa8c:	9301      	str	r3, [sp, #4]
 801aa8e:	e7df      	b.n	801aa50 <_dtoa_r+0xa0>
 801aa90:	ec4b ab10 	vmov	d0, sl, fp
 801aa94:	aa10      	add	r2, sp, #64	; 0x40
 801aa96:	a911      	add	r1, sp, #68	; 0x44
 801aa98:	4620      	mov	r0, r4
 801aa9a:	f001 f9cd 	bl	801be38 <__d2b>
 801aa9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801aaa2:	ee08 0a10 	vmov	s16, r0
 801aaa6:	2d00      	cmp	r5, #0
 801aaa8:	f000 8084 	beq.w	801abb4 <_dtoa_r+0x204>
 801aaac:	ee19 3a90 	vmov	r3, s19
 801aab0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801aab4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801aab8:	4656      	mov	r6, sl
 801aaba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801aabe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801aac2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801aac6:	4b74      	ldr	r3, [pc, #464]	; (801ac98 <_dtoa_r+0x2e8>)
 801aac8:	2200      	movs	r2, #0
 801aaca:	4630      	mov	r0, r6
 801aacc:	4639      	mov	r1, r7
 801aace:	f7e5 fbf3 	bl	80002b8 <__aeabi_dsub>
 801aad2:	a365      	add	r3, pc, #404	; (adr r3, 801ac68 <_dtoa_r+0x2b8>)
 801aad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aad8:	f7e5 fda6 	bl	8000628 <__aeabi_dmul>
 801aadc:	a364      	add	r3, pc, #400	; (adr r3, 801ac70 <_dtoa_r+0x2c0>)
 801aade:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aae2:	f7e5 fbeb 	bl	80002bc <__adddf3>
 801aae6:	4606      	mov	r6, r0
 801aae8:	4628      	mov	r0, r5
 801aaea:	460f      	mov	r7, r1
 801aaec:	f7e5 fd32 	bl	8000554 <__aeabi_i2d>
 801aaf0:	a361      	add	r3, pc, #388	; (adr r3, 801ac78 <_dtoa_r+0x2c8>)
 801aaf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aaf6:	f7e5 fd97 	bl	8000628 <__aeabi_dmul>
 801aafa:	4602      	mov	r2, r0
 801aafc:	460b      	mov	r3, r1
 801aafe:	4630      	mov	r0, r6
 801ab00:	4639      	mov	r1, r7
 801ab02:	f7e5 fbdb 	bl	80002bc <__adddf3>
 801ab06:	4606      	mov	r6, r0
 801ab08:	460f      	mov	r7, r1
 801ab0a:	f7e6 f83d 	bl	8000b88 <__aeabi_d2iz>
 801ab0e:	2200      	movs	r2, #0
 801ab10:	9000      	str	r0, [sp, #0]
 801ab12:	2300      	movs	r3, #0
 801ab14:	4630      	mov	r0, r6
 801ab16:	4639      	mov	r1, r7
 801ab18:	f7e5 fff8 	bl	8000b0c <__aeabi_dcmplt>
 801ab1c:	b150      	cbz	r0, 801ab34 <_dtoa_r+0x184>
 801ab1e:	9800      	ldr	r0, [sp, #0]
 801ab20:	f7e5 fd18 	bl	8000554 <__aeabi_i2d>
 801ab24:	4632      	mov	r2, r6
 801ab26:	463b      	mov	r3, r7
 801ab28:	f7e5 ffe6 	bl	8000af8 <__aeabi_dcmpeq>
 801ab2c:	b910      	cbnz	r0, 801ab34 <_dtoa_r+0x184>
 801ab2e:	9b00      	ldr	r3, [sp, #0]
 801ab30:	3b01      	subs	r3, #1
 801ab32:	9300      	str	r3, [sp, #0]
 801ab34:	9b00      	ldr	r3, [sp, #0]
 801ab36:	2b16      	cmp	r3, #22
 801ab38:	d85a      	bhi.n	801abf0 <_dtoa_r+0x240>
 801ab3a:	9a00      	ldr	r2, [sp, #0]
 801ab3c:	4b57      	ldr	r3, [pc, #348]	; (801ac9c <_dtoa_r+0x2ec>)
 801ab3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ab42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab46:	ec51 0b19 	vmov	r0, r1, d9
 801ab4a:	f7e5 ffdf 	bl	8000b0c <__aeabi_dcmplt>
 801ab4e:	2800      	cmp	r0, #0
 801ab50:	d050      	beq.n	801abf4 <_dtoa_r+0x244>
 801ab52:	9b00      	ldr	r3, [sp, #0]
 801ab54:	3b01      	subs	r3, #1
 801ab56:	9300      	str	r3, [sp, #0]
 801ab58:	2300      	movs	r3, #0
 801ab5a:	930b      	str	r3, [sp, #44]	; 0x2c
 801ab5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ab5e:	1b5d      	subs	r5, r3, r5
 801ab60:	1e6b      	subs	r3, r5, #1
 801ab62:	9305      	str	r3, [sp, #20]
 801ab64:	bf45      	ittet	mi
 801ab66:	f1c5 0301 	rsbmi	r3, r5, #1
 801ab6a:	9304      	strmi	r3, [sp, #16]
 801ab6c:	2300      	movpl	r3, #0
 801ab6e:	2300      	movmi	r3, #0
 801ab70:	bf4c      	ite	mi
 801ab72:	9305      	strmi	r3, [sp, #20]
 801ab74:	9304      	strpl	r3, [sp, #16]
 801ab76:	9b00      	ldr	r3, [sp, #0]
 801ab78:	2b00      	cmp	r3, #0
 801ab7a:	db3d      	blt.n	801abf8 <_dtoa_r+0x248>
 801ab7c:	9b05      	ldr	r3, [sp, #20]
 801ab7e:	9a00      	ldr	r2, [sp, #0]
 801ab80:	920a      	str	r2, [sp, #40]	; 0x28
 801ab82:	4413      	add	r3, r2
 801ab84:	9305      	str	r3, [sp, #20]
 801ab86:	2300      	movs	r3, #0
 801ab88:	9307      	str	r3, [sp, #28]
 801ab8a:	9b06      	ldr	r3, [sp, #24]
 801ab8c:	2b09      	cmp	r3, #9
 801ab8e:	f200 8089 	bhi.w	801aca4 <_dtoa_r+0x2f4>
 801ab92:	2b05      	cmp	r3, #5
 801ab94:	bfc4      	itt	gt
 801ab96:	3b04      	subgt	r3, #4
 801ab98:	9306      	strgt	r3, [sp, #24]
 801ab9a:	9b06      	ldr	r3, [sp, #24]
 801ab9c:	f1a3 0302 	sub.w	r3, r3, #2
 801aba0:	bfcc      	ite	gt
 801aba2:	2500      	movgt	r5, #0
 801aba4:	2501      	movle	r5, #1
 801aba6:	2b03      	cmp	r3, #3
 801aba8:	f200 8087 	bhi.w	801acba <_dtoa_r+0x30a>
 801abac:	e8df f003 	tbb	[pc, r3]
 801abb0:	59383a2d 	.word	0x59383a2d
 801abb4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801abb8:	441d      	add	r5, r3
 801abba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801abbe:	2b20      	cmp	r3, #32
 801abc0:	bfc1      	itttt	gt
 801abc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801abc6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801abca:	fa0b f303 	lslgt.w	r3, fp, r3
 801abce:	fa26 f000 	lsrgt.w	r0, r6, r0
 801abd2:	bfda      	itte	le
 801abd4:	f1c3 0320 	rsble	r3, r3, #32
 801abd8:	fa06 f003 	lslle.w	r0, r6, r3
 801abdc:	4318      	orrgt	r0, r3
 801abde:	f7e5 fca9 	bl	8000534 <__aeabi_ui2d>
 801abe2:	2301      	movs	r3, #1
 801abe4:	4606      	mov	r6, r0
 801abe6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801abea:	3d01      	subs	r5, #1
 801abec:	930e      	str	r3, [sp, #56]	; 0x38
 801abee:	e76a      	b.n	801aac6 <_dtoa_r+0x116>
 801abf0:	2301      	movs	r3, #1
 801abf2:	e7b2      	b.n	801ab5a <_dtoa_r+0x1aa>
 801abf4:	900b      	str	r0, [sp, #44]	; 0x2c
 801abf6:	e7b1      	b.n	801ab5c <_dtoa_r+0x1ac>
 801abf8:	9b04      	ldr	r3, [sp, #16]
 801abfa:	9a00      	ldr	r2, [sp, #0]
 801abfc:	1a9b      	subs	r3, r3, r2
 801abfe:	9304      	str	r3, [sp, #16]
 801ac00:	4253      	negs	r3, r2
 801ac02:	9307      	str	r3, [sp, #28]
 801ac04:	2300      	movs	r3, #0
 801ac06:	930a      	str	r3, [sp, #40]	; 0x28
 801ac08:	e7bf      	b.n	801ab8a <_dtoa_r+0x1da>
 801ac0a:	2300      	movs	r3, #0
 801ac0c:	9308      	str	r3, [sp, #32]
 801ac0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac10:	2b00      	cmp	r3, #0
 801ac12:	dc55      	bgt.n	801acc0 <_dtoa_r+0x310>
 801ac14:	2301      	movs	r3, #1
 801ac16:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801ac1a:	461a      	mov	r2, r3
 801ac1c:	9209      	str	r2, [sp, #36]	; 0x24
 801ac1e:	e00c      	b.n	801ac3a <_dtoa_r+0x28a>
 801ac20:	2301      	movs	r3, #1
 801ac22:	e7f3      	b.n	801ac0c <_dtoa_r+0x25c>
 801ac24:	2300      	movs	r3, #0
 801ac26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ac28:	9308      	str	r3, [sp, #32]
 801ac2a:	9b00      	ldr	r3, [sp, #0]
 801ac2c:	4413      	add	r3, r2
 801ac2e:	9302      	str	r3, [sp, #8]
 801ac30:	3301      	adds	r3, #1
 801ac32:	2b01      	cmp	r3, #1
 801ac34:	9303      	str	r3, [sp, #12]
 801ac36:	bfb8      	it	lt
 801ac38:	2301      	movlt	r3, #1
 801ac3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801ac3c:	2200      	movs	r2, #0
 801ac3e:	6042      	str	r2, [r0, #4]
 801ac40:	2204      	movs	r2, #4
 801ac42:	f102 0614 	add.w	r6, r2, #20
 801ac46:	429e      	cmp	r6, r3
 801ac48:	6841      	ldr	r1, [r0, #4]
 801ac4a:	d93d      	bls.n	801acc8 <_dtoa_r+0x318>
 801ac4c:	4620      	mov	r0, r4
 801ac4e:	f000 fdcb 	bl	801b7e8 <_Balloc>
 801ac52:	9001      	str	r0, [sp, #4]
 801ac54:	2800      	cmp	r0, #0
 801ac56:	d13b      	bne.n	801acd0 <_dtoa_r+0x320>
 801ac58:	4b11      	ldr	r3, [pc, #68]	; (801aca0 <_dtoa_r+0x2f0>)
 801ac5a:	4602      	mov	r2, r0
 801ac5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801ac60:	e6c0      	b.n	801a9e4 <_dtoa_r+0x34>
 801ac62:	2301      	movs	r3, #1
 801ac64:	e7df      	b.n	801ac26 <_dtoa_r+0x276>
 801ac66:	bf00      	nop
 801ac68:	636f4361 	.word	0x636f4361
 801ac6c:	3fd287a7 	.word	0x3fd287a7
 801ac70:	8b60c8b3 	.word	0x8b60c8b3
 801ac74:	3fc68a28 	.word	0x3fc68a28
 801ac78:	509f79fb 	.word	0x509f79fb
 801ac7c:	3fd34413 	.word	0x3fd34413
 801ac80:	0801d26c 	.word	0x0801d26c
 801ac84:	0801d42a 	.word	0x0801d42a
 801ac88:	7ff00000 	.word	0x7ff00000
 801ac8c:	0801d426 	.word	0x0801d426
 801ac90:	0801d41d 	.word	0x0801d41d
 801ac94:	0801d249 	.word	0x0801d249
 801ac98:	3ff80000 	.word	0x3ff80000
 801ac9c:	0801d588 	.word	0x0801d588
 801aca0:	0801d485 	.word	0x0801d485
 801aca4:	2501      	movs	r5, #1
 801aca6:	2300      	movs	r3, #0
 801aca8:	9306      	str	r3, [sp, #24]
 801acaa:	9508      	str	r5, [sp, #32]
 801acac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801acb0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801acb4:	2200      	movs	r2, #0
 801acb6:	2312      	movs	r3, #18
 801acb8:	e7b0      	b.n	801ac1c <_dtoa_r+0x26c>
 801acba:	2301      	movs	r3, #1
 801acbc:	9308      	str	r3, [sp, #32]
 801acbe:	e7f5      	b.n	801acac <_dtoa_r+0x2fc>
 801acc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801acc2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801acc6:	e7b8      	b.n	801ac3a <_dtoa_r+0x28a>
 801acc8:	3101      	adds	r1, #1
 801acca:	6041      	str	r1, [r0, #4]
 801accc:	0052      	lsls	r2, r2, #1
 801acce:	e7b8      	b.n	801ac42 <_dtoa_r+0x292>
 801acd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801acd2:	9a01      	ldr	r2, [sp, #4]
 801acd4:	601a      	str	r2, [r3, #0]
 801acd6:	9b03      	ldr	r3, [sp, #12]
 801acd8:	2b0e      	cmp	r3, #14
 801acda:	f200 809d 	bhi.w	801ae18 <_dtoa_r+0x468>
 801acde:	2d00      	cmp	r5, #0
 801ace0:	f000 809a 	beq.w	801ae18 <_dtoa_r+0x468>
 801ace4:	9b00      	ldr	r3, [sp, #0]
 801ace6:	2b00      	cmp	r3, #0
 801ace8:	dd32      	ble.n	801ad50 <_dtoa_r+0x3a0>
 801acea:	4ab7      	ldr	r2, [pc, #732]	; (801afc8 <_dtoa_r+0x618>)
 801acec:	f003 030f 	and.w	r3, r3, #15
 801acf0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801acf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801acf8:	9b00      	ldr	r3, [sp, #0]
 801acfa:	05d8      	lsls	r0, r3, #23
 801acfc:	ea4f 1723 	mov.w	r7, r3, asr #4
 801ad00:	d516      	bpl.n	801ad30 <_dtoa_r+0x380>
 801ad02:	4bb2      	ldr	r3, [pc, #712]	; (801afcc <_dtoa_r+0x61c>)
 801ad04:	ec51 0b19 	vmov	r0, r1, d9
 801ad08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ad0c:	f7e5 fdb6 	bl	800087c <__aeabi_ddiv>
 801ad10:	f007 070f 	and.w	r7, r7, #15
 801ad14:	4682      	mov	sl, r0
 801ad16:	468b      	mov	fp, r1
 801ad18:	2503      	movs	r5, #3
 801ad1a:	4eac      	ldr	r6, [pc, #688]	; (801afcc <_dtoa_r+0x61c>)
 801ad1c:	b957      	cbnz	r7, 801ad34 <_dtoa_r+0x384>
 801ad1e:	4642      	mov	r2, r8
 801ad20:	464b      	mov	r3, r9
 801ad22:	4650      	mov	r0, sl
 801ad24:	4659      	mov	r1, fp
 801ad26:	f7e5 fda9 	bl	800087c <__aeabi_ddiv>
 801ad2a:	4682      	mov	sl, r0
 801ad2c:	468b      	mov	fp, r1
 801ad2e:	e028      	b.n	801ad82 <_dtoa_r+0x3d2>
 801ad30:	2502      	movs	r5, #2
 801ad32:	e7f2      	b.n	801ad1a <_dtoa_r+0x36a>
 801ad34:	07f9      	lsls	r1, r7, #31
 801ad36:	d508      	bpl.n	801ad4a <_dtoa_r+0x39a>
 801ad38:	4640      	mov	r0, r8
 801ad3a:	4649      	mov	r1, r9
 801ad3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801ad40:	f7e5 fc72 	bl	8000628 <__aeabi_dmul>
 801ad44:	3501      	adds	r5, #1
 801ad46:	4680      	mov	r8, r0
 801ad48:	4689      	mov	r9, r1
 801ad4a:	107f      	asrs	r7, r7, #1
 801ad4c:	3608      	adds	r6, #8
 801ad4e:	e7e5      	b.n	801ad1c <_dtoa_r+0x36c>
 801ad50:	f000 809b 	beq.w	801ae8a <_dtoa_r+0x4da>
 801ad54:	9b00      	ldr	r3, [sp, #0]
 801ad56:	4f9d      	ldr	r7, [pc, #628]	; (801afcc <_dtoa_r+0x61c>)
 801ad58:	425e      	negs	r6, r3
 801ad5a:	4b9b      	ldr	r3, [pc, #620]	; (801afc8 <_dtoa_r+0x618>)
 801ad5c:	f006 020f 	and.w	r2, r6, #15
 801ad60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ad64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad68:	ec51 0b19 	vmov	r0, r1, d9
 801ad6c:	f7e5 fc5c 	bl	8000628 <__aeabi_dmul>
 801ad70:	1136      	asrs	r6, r6, #4
 801ad72:	4682      	mov	sl, r0
 801ad74:	468b      	mov	fp, r1
 801ad76:	2300      	movs	r3, #0
 801ad78:	2502      	movs	r5, #2
 801ad7a:	2e00      	cmp	r6, #0
 801ad7c:	d17a      	bne.n	801ae74 <_dtoa_r+0x4c4>
 801ad7e:	2b00      	cmp	r3, #0
 801ad80:	d1d3      	bne.n	801ad2a <_dtoa_r+0x37a>
 801ad82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ad84:	2b00      	cmp	r3, #0
 801ad86:	f000 8082 	beq.w	801ae8e <_dtoa_r+0x4de>
 801ad8a:	4b91      	ldr	r3, [pc, #580]	; (801afd0 <_dtoa_r+0x620>)
 801ad8c:	2200      	movs	r2, #0
 801ad8e:	4650      	mov	r0, sl
 801ad90:	4659      	mov	r1, fp
 801ad92:	f7e5 febb 	bl	8000b0c <__aeabi_dcmplt>
 801ad96:	2800      	cmp	r0, #0
 801ad98:	d079      	beq.n	801ae8e <_dtoa_r+0x4de>
 801ad9a:	9b03      	ldr	r3, [sp, #12]
 801ad9c:	2b00      	cmp	r3, #0
 801ad9e:	d076      	beq.n	801ae8e <_dtoa_r+0x4de>
 801ada0:	9b02      	ldr	r3, [sp, #8]
 801ada2:	2b00      	cmp	r3, #0
 801ada4:	dd36      	ble.n	801ae14 <_dtoa_r+0x464>
 801ada6:	9b00      	ldr	r3, [sp, #0]
 801ada8:	4650      	mov	r0, sl
 801adaa:	4659      	mov	r1, fp
 801adac:	1e5f      	subs	r7, r3, #1
 801adae:	2200      	movs	r2, #0
 801adb0:	4b88      	ldr	r3, [pc, #544]	; (801afd4 <_dtoa_r+0x624>)
 801adb2:	f7e5 fc39 	bl	8000628 <__aeabi_dmul>
 801adb6:	9e02      	ldr	r6, [sp, #8]
 801adb8:	4682      	mov	sl, r0
 801adba:	468b      	mov	fp, r1
 801adbc:	3501      	adds	r5, #1
 801adbe:	4628      	mov	r0, r5
 801adc0:	f7e5 fbc8 	bl	8000554 <__aeabi_i2d>
 801adc4:	4652      	mov	r2, sl
 801adc6:	465b      	mov	r3, fp
 801adc8:	f7e5 fc2e 	bl	8000628 <__aeabi_dmul>
 801adcc:	4b82      	ldr	r3, [pc, #520]	; (801afd8 <_dtoa_r+0x628>)
 801adce:	2200      	movs	r2, #0
 801add0:	f7e5 fa74 	bl	80002bc <__adddf3>
 801add4:	46d0      	mov	r8, sl
 801add6:	46d9      	mov	r9, fp
 801add8:	4682      	mov	sl, r0
 801adda:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801adde:	2e00      	cmp	r6, #0
 801ade0:	d158      	bne.n	801ae94 <_dtoa_r+0x4e4>
 801ade2:	4b7e      	ldr	r3, [pc, #504]	; (801afdc <_dtoa_r+0x62c>)
 801ade4:	2200      	movs	r2, #0
 801ade6:	4640      	mov	r0, r8
 801ade8:	4649      	mov	r1, r9
 801adea:	f7e5 fa65 	bl	80002b8 <__aeabi_dsub>
 801adee:	4652      	mov	r2, sl
 801adf0:	465b      	mov	r3, fp
 801adf2:	4680      	mov	r8, r0
 801adf4:	4689      	mov	r9, r1
 801adf6:	f7e5 fea7 	bl	8000b48 <__aeabi_dcmpgt>
 801adfa:	2800      	cmp	r0, #0
 801adfc:	f040 8295 	bne.w	801b32a <_dtoa_r+0x97a>
 801ae00:	4652      	mov	r2, sl
 801ae02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801ae06:	4640      	mov	r0, r8
 801ae08:	4649      	mov	r1, r9
 801ae0a:	f7e5 fe7f 	bl	8000b0c <__aeabi_dcmplt>
 801ae0e:	2800      	cmp	r0, #0
 801ae10:	f040 8289 	bne.w	801b326 <_dtoa_r+0x976>
 801ae14:	ec5b ab19 	vmov	sl, fp, d9
 801ae18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ae1a:	2b00      	cmp	r3, #0
 801ae1c:	f2c0 8148 	blt.w	801b0b0 <_dtoa_r+0x700>
 801ae20:	9a00      	ldr	r2, [sp, #0]
 801ae22:	2a0e      	cmp	r2, #14
 801ae24:	f300 8144 	bgt.w	801b0b0 <_dtoa_r+0x700>
 801ae28:	4b67      	ldr	r3, [pc, #412]	; (801afc8 <_dtoa_r+0x618>)
 801ae2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ae2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ae32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae34:	2b00      	cmp	r3, #0
 801ae36:	f280 80d5 	bge.w	801afe4 <_dtoa_r+0x634>
 801ae3a:	9b03      	ldr	r3, [sp, #12]
 801ae3c:	2b00      	cmp	r3, #0
 801ae3e:	f300 80d1 	bgt.w	801afe4 <_dtoa_r+0x634>
 801ae42:	f040 826f 	bne.w	801b324 <_dtoa_r+0x974>
 801ae46:	4b65      	ldr	r3, [pc, #404]	; (801afdc <_dtoa_r+0x62c>)
 801ae48:	2200      	movs	r2, #0
 801ae4a:	4640      	mov	r0, r8
 801ae4c:	4649      	mov	r1, r9
 801ae4e:	f7e5 fbeb 	bl	8000628 <__aeabi_dmul>
 801ae52:	4652      	mov	r2, sl
 801ae54:	465b      	mov	r3, fp
 801ae56:	f7e5 fe6d 	bl	8000b34 <__aeabi_dcmpge>
 801ae5a:	9e03      	ldr	r6, [sp, #12]
 801ae5c:	4637      	mov	r7, r6
 801ae5e:	2800      	cmp	r0, #0
 801ae60:	f040 8245 	bne.w	801b2ee <_dtoa_r+0x93e>
 801ae64:	9d01      	ldr	r5, [sp, #4]
 801ae66:	2331      	movs	r3, #49	; 0x31
 801ae68:	f805 3b01 	strb.w	r3, [r5], #1
 801ae6c:	9b00      	ldr	r3, [sp, #0]
 801ae6e:	3301      	adds	r3, #1
 801ae70:	9300      	str	r3, [sp, #0]
 801ae72:	e240      	b.n	801b2f6 <_dtoa_r+0x946>
 801ae74:	07f2      	lsls	r2, r6, #31
 801ae76:	d505      	bpl.n	801ae84 <_dtoa_r+0x4d4>
 801ae78:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ae7c:	f7e5 fbd4 	bl	8000628 <__aeabi_dmul>
 801ae80:	3501      	adds	r5, #1
 801ae82:	2301      	movs	r3, #1
 801ae84:	1076      	asrs	r6, r6, #1
 801ae86:	3708      	adds	r7, #8
 801ae88:	e777      	b.n	801ad7a <_dtoa_r+0x3ca>
 801ae8a:	2502      	movs	r5, #2
 801ae8c:	e779      	b.n	801ad82 <_dtoa_r+0x3d2>
 801ae8e:	9f00      	ldr	r7, [sp, #0]
 801ae90:	9e03      	ldr	r6, [sp, #12]
 801ae92:	e794      	b.n	801adbe <_dtoa_r+0x40e>
 801ae94:	9901      	ldr	r1, [sp, #4]
 801ae96:	4b4c      	ldr	r3, [pc, #304]	; (801afc8 <_dtoa_r+0x618>)
 801ae98:	4431      	add	r1, r6
 801ae9a:	910d      	str	r1, [sp, #52]	; 0x34
 801ae9c:	9908      	ldr	r1, [sp, #32]
 801ae9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801aea2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801aea6:	2900      	cmp	r1, #0
 801aea8:	d043      	beq.n	801af32 <_dtoa_r+0x582>
 801aeaa:	494d      	ldr	r1, [pc, #308]	; (801afe0 <_dtoa_r+0x630>)
 801aeac:	2000      	movs	r0, #0
 801aeae:	f7e5 fce5 	bl	800087c <__aeabi_ddiv>
 801aeb2:	4652      	mov	r2, sl
 801aeb4:	465b      	mov	r3, fp
 801aeb6:	f7e5 f9ff 	bl	80002b8 <__aeabi_dsub>
 801aeba:	9d01      	ldr	r5, [sp, #4]
 801aebc:	4682      	mov	sl, r0
 801aebe:	468b      	mov	fp, r1
 801aec0:	4649      	mov	r1, r9
 801aec2:	4640      	mov	r0, r8
 801aec4:	f7e5 fe60 	bl	8000b88 <__aeabi_d2iz>
 801aec8:	4606      	mov	r6, r0
 801aeca:	f7e5 fb43 	bl	8000554 <__aeabi_i2d>
 801aece:	4602      	mov	r2, r0
 801aed0:	460b      	mov	r3, r1
 801aed2:	4640      	mov	r0, r8
 801aed4:	4649      	mov	r1, r9
 801aed6:	f7e5 f9ef 	bl	80002b8 <__aeabi_dsub>
 801aeda:	3630      	adds	r6, #48	; 0x30
 801aedc:	f805 6b01 	strb.w	r6, [r5], #1
 801aee0:	4652      	mov	r2, sl
 801aee2:	465b      	mov	r3, fp
 801aee4:	4680      	mov	r8, r0
 801aee6:	4689      	mov	r9, r1
 801aee8:	f7e5 fe10 	bl	8000b0c <__aeabi_dcmplt>
 801aeec:	2800      	cmp	r0, #0
 801aeee:	d163      	bne.n	801afb8 <_dtoa_r+0x608>
 801aef0:	4642      	mov	r2, r8
 801aef2:	464b      	mov	r3, r9
 801aef4:	4936      	ldr	r1, [pc, #216]	; (801afd0 <_dtoa_r+0x620>)
 801aef6:	2000      	movs	r0, #0
 801aef8:	f7e5 f9de 	bl	80002b8 <__aeabi_dsub>
 801aefc:	4652      	mov	r2, sl
 801aefe:	465b      	mov	r3, fp
 801af00:	f7e5 fe04 	bl	8000b0c <__aeabi_dcmplt>
 801af04:	2800      	cmp	r0, #0
 801af06:	f040 80b5 	bne.w	801b074 <_dtoa_r+0x6c4>
 801af0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801af0c:	429d      	cmp	r5, r3
 801af0e:	d081      	beq.n	801ae14 <_dtoa_r+0x464>
 801af10:	4b30      	ldr	r3, [pc, #192]	; (801afd4 <_dtoa_r+0x624>)
 801af12:	2200      	movs	r2, #0
 801af14:	4650      	mov	r0, sl
 801af16:	4659      	mov	r1, fp
 801af18:	f7e5 fb86 	bl	8000628 <__aeabi_dmul>
 801af1c:	4b2d      	ldr	r3, [pc, #180]	; (801afd4 <_dtoa_r+0x624>)
 801af1e:	4682      	mov	sl, r0
 801af20:	468b      	mov	fp, r1
 801af22:	4640      	mov	r0, r8
 801af24:	4649      	mov	r1, r9
 801af26:	2200      	movs	r2, #0
 801af28:	f7e5 fb7e 	bl	8000628 <__aeabi_dmul>
 801af2c:	4680      	mov	r8, r0
 801af2e:	4689      	mov	r9, r1
 801af30:	e7c6      	b.n	801aec0 <_dtoa_r+0x510>
 801af32:	4650      	mov	r0, sl
 801af34:	4659      	mov	r1, fp
 801af36:	f7e5 fb77 	bl	8000628 <__aeabi_dmul>
 801af3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801af3c:	9d01      	ldr	r5, [sp, #4]
 801af3e:	930f      	str	r3, [sp, #60]	; 0x3c
 801af40:	4682      	mov	sl, r0
 801af42:	468b      	mov	fp, r1
 801af44:	4649      	mov	r1, r9
 801af46:	4640      	mov	r0, r8
 801af48:	f7e5 fe1e 	bl	8000b88 <__aeabi_d2iz>
 801af4c:	4606      	mov	r6, r0
 801af4e:	f7e5 fb01 	bl	8000554 <__aeabi_i2d>
 801af52:	3630      	adds	r6, #48	; 0x30
 801af54:	4602      	mov	r2, r0
 801af56:	460b      	mov	r3, r1
 801af58:	4640      	mov	r0, r8
 801af5a:	4649      	mov	r1, r9
 801af5c:	f7e5 f9ac 	bl	80002b8 <__aeabi_dsub>
 801af60:	f805 6b01 	strb.w	r6, [r5], #1
 801af64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801af66:	429d      	cmp	r5, r3
 801af68:	4680      	mov	r8, r0
 801af6a:	4689      	mov	r9, r1
 801af6c:	f04f 0200 	mov.w	r2, #0
 801af70:	d124      	bne.n	801afbc <_dtoa_r+0x60c>
 801af72:	4b1b      	ldr	r3, [pc, #108]	; (801afe0 <_dtoa_r+0x630>)
 801af74:	4650      	mov	r0, sl
 801af76:	4659      	mov	r1, fp
 801af78:	f7e5 f9a0 	bl	80002bc <__adddf3>
 801af7c:	4602      	mov	r2, r0
 801af7e:	460b      	mov	r3, r1
 801af80:	4640      	mov	r0, r8
 801af82:	4649      	mov	r1, r9
 801af84:	f7e5 fde0 	bl	8000b48 <__aeabi_dcmpgt>
 801af88:	2800      	cmp	r0, #0
 801af8a:	d173      	bne.n	801b074 <_dtoa_r+0x6c4>
 801af8c:	4652      	mov	r2, sl
 801af8e:	465b      	mov	r3, fp
 801af90:	4913      	ldr	r1, [pc, #76]	; (801afe0 <_dtoa_r+0x630>)
 801af92:	2000      	movs	r0, #0
 801af94:	f7e5 f990 	bl	80002b8 <__aeabi_dsub>
 801af98:	4602      	mov	r2, r0
 801af9a:	460b      	mov	r3, r1
 801af9c:	4640      	mov	r0, r8
 801af9e:	4649      	mov	r1, r9
 801afa0:	f7e5 fdb4 	bl	8000b0c <__aeabi_dcmplt>
 801afa4:	2800      	cmp	r0, #0
 801afa6:	f43f af35 	beq.w	801ae14 <_dtoa_r+0x464>
 801afaa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801afac:	1e6b      	subs	r3, r5, #1
 801afae:	930f      	str	r3, [sp, #60]	; 0x3c
 801afb0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801afb4:	2b30      	cmp	r3, #48	; 0x30
 801afb6:	d0f8      	beq.n	801afaa <_dtoa_r+0x5fa>
 801afb8:	9700      	str	r7, [sp, #0]
 801afba:	e049      	b.n	801b050 <_dtoa_r+0x6a0>
 801afbc:	4b05      	ldr	r3, [pc, #20]	; (801afd4 <_dtoa_r+0x624>)
 801afbe:	f7e5 fb33 	bl	8000628 <__aeabi_dmul>
 801afc2:	4680      	mov	r8, r0
 801afc4:	4689      	mov	r9, r1
 801afc6:	e7bd      	b.n	801af44 <_dtoa_r+0x594>
 801afc8:	0801d588 	.word	0x0801d588
 801afcc:	0801d560 	.word	0x0801d560
 801afd0:	3ff00000 	.word	0x3ff00000
 801afd4:	40240000 	.word	0x40240000
 801afd8:	401c0000 	.word	0x401c0000
 801afdc:	40140000 	.word	0x40140000
 801afe0:	3fe00000 	.word	0x3fe00000
 801afe4:	9d01      	ldr	r5, [sp, #4]
 801afe6:	4656      	mov	r6, sl
 801afe8:	465f      	mov	r7, fp
 801afea:	4642      	mov	r2, r8
 801afec:	464b      	mov	r3, r9
 801afee:	4630      	mov	r0, r6
 801aff0:	4639      	mov	r1, r7
 801aff2:	f7e5 fc43 	bl	800087c <__aeabi_ddiv>
 801aff6:	f7e5 fdc7 	bl	8000b88 <__aeabi_d2iz>
 801affa:	4682      	mov	sl, r0
 801affc:	f7e5 faaa 	bl	8000554 <__aeabi_i2d>
 801b000:	4642      	mov	r2, r8
 801b002:	464b      	mov	r3, r9
 801b004:	f7e5 fb10 	bl	8000628 <__aeabi_dmul>
 801b008:	4602      	mov	r2, r0
 801b00a:	460b      	mov	r3, r1
 801b00c:	4630      	mov	r0, r6
 801b00e:	4639      	mov	r1, r7
 801b010:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801b014:	f7e5 f950 	bl	80002b8 <__aeabi_dsub>
 801b018:	f805 6b01 	strb.w	r6, [r5], #1
 801b01c:	9e01      	ldr	r6, [sp, #4]
 801b01e:	9f03      	ldr	r7, [sp, #12]
 801b020:	1bae      	subs	r6, r5, r6
 801b022:	42b7      	cmp	r7, r6
 801b024:	4602      	mov	r2, r0
 801b026:	460b      	mov	r3, r1
 801b028:	d135      	bne.n	801b096 <_dtoa_r+0x6e6>
 801b02a:	f7e5 f947 	bl	80002bc <__adddf3>
 801b02e:	4642      	mov	r2, r8
 801b030:	464b      	mov	r3, r9
 801b032:	4606      	mov	r6, r0
 801b034:	460f      	mov	r7, r1
 801b036:	f7e5 fd87 	bl	8000b48 <__aeabi_dcmpgt>
 801b03a:	b9d0      	cbnz	r0, 801b072 <_dtoa_r+0x6c2>
 801b03c:	4642      	mov	r2, r8
 801b03e:	464b      	mov	r3, r9
 801b040:	4630      	mov	r0, r6
 801b042:	4639      	mov	r1, r7
 801b044:	f7e5 fd58 	bl	8000af8 <__aeabi_dcmpeq>
 801b048:	b110      	cbz	r0, 801b050 <_dtoa_r+0x6a0>
 801b04a:	f01a 0f01 	tst.w	sl, #1
 801b04e:	d110      	bne.n	801b072 <_dtoa_r+0x6c2>
 801b050:	4620      	mov	r0, r4
 801b052:	ee18 1a10 	vmov	r1, s16
 801b056:	f000 fc07 	bl	801b868 <_Bfree>
 801b05a:	2300      	movs	r3, #0
 801b05c:	9800      	ldr	r0, [sp, #0]
 801b05e:	702b      	strb	r3, [r5, #0]
 801b060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b062:	3001      	adds	r0, #1
 801b064:	6018      	str	r0, [r3, #0]
 801b066:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b068:	2b00      	cmp	r3, #0
 801b06a:	f43f acf1 	beq.w	801aa50 <_dtoa_r+0xa0>
 801b06e:	601d      	str	r5, [r3, #0]
 801b070:	e4ee      	b.n	801aa50 <_dtoa_r+0xa0>
 801b072:	9f00      	ldr	r7, [sp, #0]
 801b074:	462b      	mov	r3, r5
 801b076:	461d      	mov	r5, r3
 801b078:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b07c:	2a39      	cmp	r2, #57	; 0x39
 801b07e:	d106      	bne.n	801b08e <_dtoa_r+0x6de>
 801b080:	9a01      	ldr	r2, [sp, #4]
 801b082:	429a      	cmp	r2, r3
 801b084:	d1f7      	bne.n	801b076 <_dtoa_r+0x6c6>
 801b086:	9901      	ldr	r1, [sp, #4]
 801b088:	2230      	movs	r2, #48	; 0x30
 801b08a:	3701      	adds	r7, #1
 801b08c:	700a      	strb	r2, [r1, #0]
 801b08e:	781a      	ldrb	r2, [r3, #0]
 801b090:	3201      	adds	r2, #1
 801b092:	701a      	strb	r2, [r3, #0]
 801b094:	e790      	b.n	801afb8 <_dtoa_r+0x608>
 801b096:	4ba6      	ldr	r3, [pc, #664]	; (801b330 <_dtoa_r+0x980>)
 801b098:	2200      	movs	r2, #0
 801b09a:	f7e5 fac5 	bl	8000628 <__aeabi_dmul>
 801b09e:	2200      	movs	r2, #0
 801b0a0:	2300      	movs	r3, #0
 801b0a2:	4606      	mov	r6, r0
 801b0a4:	460f      	mov	r7, r1
 801b0a6:	f7e5 fd27 	bl	8000af8 <__aeabi_dcmpeq>
 801b0aa:	2800      	cmp	r0, #0
 801b0ac:	d09d      	beq.n	801afea <_dtoa_r+0x63a>
 801b0ae:	e7cf      	b.n	801b050 <_dtoa_r+0x6a0>
 801b0b0:	9a08      	ldr	r2, [sp, #32]
 801b0b2:	2a00      	cmp	r2, #0
 801b0b4:	f000 80d7 	beq.w	801b266 <_dtoa_r+0x8b6>
 801b0b8:	9a06      	ldr	r2, [sp, #24]
 801b0ba:	2a01      	cmp	r2, #1
 801b0bc:	f300 80ba 	bgt.w	801b234 <_dtoa_r+0x884>
 801b0c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b0c2:	2a00      	cmp	r2, #0
 801b0c4:	f000 80b2 	beq.w	801b22c <_dtoa_r+0x87c>
 801b0c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801b0cc:	9e07      	ldr	r6, [sp, #28]
 801b0ce:	9d04      	ldr	r5, [sp, #16]
 801b0d0:	9a04      	ldr	r2, [sp, #16]
 801b0d2:	441a      	add	r2, r3
 801b0d4:	9204      	str	r2, [sp, #16]
 801b0d6:	9a05      	ldr	r2, [sp, #20]
 801b0d8:	2101      	movs	r1, #1
 801b0da:	441a      	add	r2, r3
 801b0dc:	4620      	mov	r0, r4
 801b0de:	9205      	str	r2, [sp, #20]
 801b0e0:	f000 fc7a 	bl	801b9d8 <__i2b>
 801b0e4:	4607      	mov	r7, r0
 801b0e6:	2d00      	cmp	r5, #0
 801b0e8:	dd0c      	ble.n	801b104 <_dtoa_r+0x754>
 801b0ea:	9b05      	ldr	r3, [sp, #20]
 801b0ec:	2b00      	cmp	r3, #0
 801b0ee:	dd09      	ble.n	801b104 <_dtoa_r+0x754>
 801b0f0:	42ab      	cmp	r3, r5
 801b0f2:	9a04      	ldr	r2, [sp, #16]
 801b0f4:	bfa8      	it	ge
 801b0f6:	462b      	movge	r3, r5
 801b0f8:	1ad2      	subs	r2, r2, r3
 801b0fa:	9204      	str	r2, [sp, #16]
 801b0fc:	9a05      	ldr	r2, [sp, #20]
 801b0fe:	1aed      	subs	r5, r5, r3
 801b100:	1ad3      	subs	r3, r2, r3
 801b102:	9305      	str	r3, [sp, #20]
 801b104:	9b07      	ldr	r3, [sp, #28]
 801b106:	b31b      	cbz	r3, 801b150 <_dtoa_r+0x7a0>
 801b108:	9b08      	ldr	r3, [sp, #32]
 801b10a:	2b00      	cmp	r3, #0
 801b10c:	f000 80af 	beq.w	801b26e <_dtoa_r+0x8be>
 801b110:	2e00      	cmp	r6, #0
 801b112:	dd13      	ble.n	801b13c <_dtoa_r+0x78c>
 801b114:	4639      	mov	r1, r7
 801b116:	4632      	mov	r2, r6
 801b118:	4620      	mov	r0, r4
 801b11a:	f000 fd1d 	bl	801bb58 <__pow5mult>
 801b11e:	ee18 2a10 	vmov	r2, s16
 801b122:	4601      	mov	r1, r0
 801b124:	4607      	mov	r7, r0
 801b126:	4620      	mov	r0, r4
 801b128:	f000 fc6c 	bl	801ba04 <__multiply>
 801b12c:	ee18 1a10 	vmov	r1, s16
 801b130:	4680      	mov	r8, r0
 801b132:	4620      	mov	r0, r4
 801b134:	f000 fb98 	bl	801b868 <_Bfree>
 801b138:	ee08 8a10 	vmov	s16, r8
 801b13c:	9b07      	ldr	r3, [sp, #28]
 801b13e:	1b9a      	subs	r2, r3, r6
 801b140:	d006      	beq.n	801b150 <_dtoa_r+0x7a0>
 801b142:	ee18 1a10 	vmov	r1, s16
 801b146:	4620      	mov	r0, r4
 801b148:	f000 fd06 	bl	801bb58 <__pow5mult>
 801b14c:	ee08 0a10 	vmov	s16, r0
 801b150:	2101      	movs	r1, #1
 801b152:	4620      	mov	r0, r4
 801b154:	f000 fc40 	bl	801b9d8 <__i2b>
 801b158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b15a:	2b00      	cmp	r3, #0
 801b15c:	4606      	mov	r6, r0
 801b15e:	f340 8088 	ble.w	801b272 <_dtoa_r+0x8c2>
 801b162:	461a      	mov	r2, r3
 801b164:	4601      	mov	r1, r0
 801b166:	4620      	mov	r0, r4
 801b168:	f000 fcf6 	bl	801bb58 <__pow5mult>
 801b16c:	9b06      	ldr	r3, [sp, #24]
 801b16e:	2b01      	cmp	r3, #1
 801b170:	4606      	mov	r6, r0
 801b172:	f340 8081 	ble.w	801b278 <_dtoa_r+0x8c8>
 801b176:	f04f 0800 	mov.w	r8, #0
 801b17a:	6933      	ldr	r3, [r6, #16]
 801b17c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801b180:	6918      	ldr	r0, [r3, #16]
 801b182:	f000 fbd9 	bl	801b938 <__hi0bits>
 801b186:	f1c0 0020 	rsb	r0, r0, #32
 801b18a:	9b05      	ldr	r3, [sp, #20]
 801b18c:	4418      	add	r0, r3
 801b18e:	f010 001f 	ands.w	r0, r0, #31
 801b192:	f000 8092 	beq.w	801b2ba <_dtoa_r+0x90a>
 801b196:	f1c0 0320 	rsb	r3, r0, #32
 801b19a:	2b04      	cmp	r3, #4
 801b19c:	f340 808a 	ble.w	801b2b4 <_dtoa_r+0x904>
 801b1a0:	f1c0 001c 	rsb	r0, r0, #28
 801b1a4:	9b04      	ldr	r3, [sp, #16]
 801b1a6:	4403      	add	r3, r0
 801b1a8:	9304      	str	r3, [sp, #16]
 801b1aa:	9b05      	ldr	r3, [sp, #20]
 801b1ac:	4403      	add	r3, r0
 801b1ae:	4405      	add	r5, r0
 801b1b0:	9305      	str	r3, [sp, #20]
 801b1b2:	9b04      	ldr	r3, [sp, #16]
 801b1b4:	2b00      	cmp	r3, #0
 801b1b6:	dd07      	ble.n	801b1c8 <_dtoa_r+0x818>
 801b1b8:	ee18 1a10 	vmov	r1, s16
 801b1bc:	461a      	mov	r2, r3
 801b1be:	4620      	mov	r0, r4
 801b1c0:	f000 fd24 	bl	801bc0c <__lshift>
 801b1c4:	ee08 0a10 	vmov	s16, r0
 801b1c8:	9b05      	ldr	r3, [sp, #20]
 801b1ca:	2b00      	cmp	r3, #0
 801b1cc:	dd05      	ble.n	801b1da <_dtoa_r+0x82a>
 801b1ce:	4631      	mov	r1, r6
 801b1d0:	461a      	mov	r2, r3
 801b1d2:	4620      	mov	r0, r4
 801b1d4:	f000 fd1a 	bl	801bc0c <__lshift>
 801b1d8:	4606      	mov	r6, r0
 801b1da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b1dc:	2b00      	cmp	r3, #0
 801b1de:	d06e      	beq.n	801b2be <_dtoa_r+0x90e>
 801b1e0:	ee18 0a10 	vmov	r0, s16
 801b1e4:	4631      	mov	r1, r6
 801b1e6:	f000 fd81 	bl	801bcec <__mcmp>
 801b1ea:	2800      	cmp	r0, #0
 801b1ec:	da67      	bge.n	801b2be <_dtoa_r+0x90e>
 801b1ee:	9b00      	ldr	r3, [sp, #0]
 801b1f0:	3b01      	subs	r3, #1
 801b1f2:	ee18 1a10 	vmov	r1, s16
 801b1f6:	9300      	str	r3, [sp, #0]
 801b1f8:	220a      	movs	r2, #10
 801b1fa:	2300      	movs	r3, #0
 801b1fc:	4620      	mov	r0, r4
 801b1fe:	f000 fb55 	bl	801b8ac <__multadd>
 801b202:	9b08      	ldr	r3, [sp, #32]
 801b204:	ee08 0a10 	vmov	s16, r0
 801b208:	2b00      	cmp	r3, #0
 801b20a:	f000 81b1 	beq.w	801b570 <_dtoa_r+0xbc0>
 801b20e:	2300      	movs	r3, #0
 801b210:	4639      	mov	r1, r7
 801b212:	220a      	movs	r2, #10
 801b214:	4620      	mov	r0, r4
 801b216:	f000 fb49 	bl	801b8ac <__multadd>
 801b21a:	9b02      	ldr	r3, [sp, #8]
 801b21c:	2b00      	cmp	r3, #0
 801b21e:	4607      	mov	r7, r0
 801b220:	f300 808e 	bgt.w	801b340 <_dtoa_r+0x990>
 801b224:	9b06      	ldr	r3, [sp, #24]
 801b226:	2b02      	cmp	r3, #2
 801b228:	dc51      	bgt.n	801b2ce <_dtoa_r+0x91e>
 801b22a:	e089      	b.n	801b340 <_dtoa_r+0x990>
 801b22c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b22e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801b232:	e74b      	b.n	801b0cc <_dtoa_r+0x71c>
 801b234:	9b03      	ldr	r3, [sp, #12]
 801b236:	1e5e      	subs	r6, r3, #1
 801b238:	9b07      	ldr	r3, [sp, #28]
 801b23a:	42b3      	cmp	r3, r6
 801b23c:	bfbf      	itttt	lt
 801b23e:	9b07      	ldrlt	r3, [sp, #28]
 801b240:	9607      	strlt	r6, [sp, #28]
 801b242:	1af2      	sublt	r2, r6, r3
 801b244:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801b246:	bfb6      	itet	lt
 801b248:	189b      	addlt	r3, r3, r2
 801b24a:	1b9e      	subge	r6, r3, r6
 801b24c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801b24e:	9b03      	ldr	r3, [sp, #12]
 801b250:	bfb8      	it	lt
 801b252:	2600      	movlt	r6, #0
 801b254:	2b00      	cmp	r3, #0
 801b256:	bfb7      	itett	lt
 801b258:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801b25c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801b260:	1a9d      	sublt	r5, r3, r2
 801b262:	2300      	movlt	r3, #0
 801b264:	e734      	b.n	801b0d0 <_dtoa_r+0x720>
 801b266:	9e07      	ldr	r6, [sp, #28]
 801b268:	9d04      	ldr	r5, [sp, #16]
 801b26a:	9f08      	ldr	r7, [sp, #32]
 801b26c:	e73b      	b.n	801b0e6 <_dtoa_r+0x736>
 801b26e:	9a07      	ldr	r2, [sp, #28]
 801b270:	e767      	b.n	801b142 <_dtoa_r+0x792>
 801b272:	9b06      	ldr	r3, [sp, #24]
 801b274:	2b01      	cmp	r3, #1
 801b276:	dc18      	bgt.n	801b2aa <_dtoa_r+0x8fa>
 801b278:	f1ba 0f00 	cmp.w	sl, #0
 801b27c:	d115      	bne.n	801b2aa <_dtoa_r+0x8fa>
 801b27e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b282:	b993      	cbnz	r3, 801b2aa <_dtoa_r+0x8fa>
 801b284:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b288:	0d1b      	lsrs	r3, r3, #20
 801b28a:	051b      	lsls	r3, r3, #20
 801b28c:	b183      	cbz	r3, 801b2b0 <_dtoa_r+0x900>
 801b28e:	9b04      	ldr	r3, [sp, #16]
 801b290:	3301      	adds	r3, #1
 801b292:	9304      	str	r3, [sp, #16]
 801b294:	9b05      	ldr	r3, [sp, #20]
 801b296:	3301      	adds	r3, #1
 801b298:	9305      	str	r3, [sp, #20]
 801b29a:	f04f 0801 	mov.w	r8, #1
 801b29e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b2a0:	2b00      	cmp	r3, #0
 801b2a2:	f47f af6a 	bne.w	801b17a <_dtoa_r+0x7ca>
 801b2a6:	2001      	movs	r0, #1
 801b2a8:	e76f      	b.n	801b18a <_dtoa_r+0x7da>
 801b2aa:	f04f 0800 	mov.w	r8, #0
 801b2ae:	e7f6      	b.n	801b29e <_dtoa_r+0x8ee>
 801b2b0:	4698      	mov	r8, r3
 801b2b2:	e7f4      	b.n	801b29e <_dtoa_r+0x8ee>
 801b2b4:	f43f af7d 	beq.w	801b1b2 <_dtoa_r+0x802>
 801b2b8:	4618      	mov	r0, r3
 801b2ba:	301c      	adds	r0, #28
 801b2bc:	e772      	b.n	801b1a4 <_dtoa_r+0x7f4>
 801b2be:	9b03      	ldr	r3, [sp, #12]
 801b2c0:	2b00      	cmp	r3, #0
 801b2c2:	dc37      	bgt.n	801b334 <_dtoa_r+0x984>
 801b2c4:	9b06      	ldr	r3, [sp, #24]
 801b2c6:	2b02      	cmp	r3, #2
 801b2c8:	dd34      	ble.n	801b334 <_dtoa_r+0x984>
 801b2ca:	9b03      	ldr	r3, [sp, #12]
 801b2cc:	9302      	str	r3, [sp, #8]
 801b2ce:	9b02      	ldr	r3, [sp, #8]
 801b2d0:	b96b      	cbnz	r3, 801b2ee <_dtoa_r+0x93e>
 801b2d2:	4631      	mov	r1, r6
 801b2d4:	2205      	movs	r2, #5
 801b2d6:	4620      	mov	r0, r4
 801b2d8:	f000 fae8 	bl	801b8ac <__multadd>
 801b2dc:	4601      	mov	r1, r0
 801b2de:	4606      	mov	r6, r0
 801b2e0:	ee18 0a10 	vmov	r0, s16
 801b2e4:	f000 fd02 	bl	801bcec <__mcmp>
 801b2e8:	2800      	cmp	r0, #0
 801b2ea:	f73f adbb 	bgt.w	801ae64 <_dtoa_r+0x4b4>
 801b2ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b2f0:	9d01      	ldr	r5, [sp, #4]
 801b2f2:	43db      	mvns	r3, r3
 801b2f4:	9300      	str	r3, [sp, #0]
 801b2f6:	f04f 0800 	mov.w	r8, #0
 801b2fa:	4631      	mov	r1, r6
 801b2fc:	4620      	mov	r0, r4
 801b2fe:	f000 fab3 	bl	801b868 <_Bfree>
 801b302:	2f00      	cmp	r7, #0
 801b304:	f43f aea4 	beq.w	801b050 <_dtoa_r+0x6a0>
 801b308:	f1b8 0f00 	cmp.w	r8, #0
 801b30c:	d005      	beq.n	801b31a <_dtoa_r+0x96a>
 801b30e:	45b8      	cmp	r8, r7
 801b310:	d003      	beq.n	801b31a <_dtoa_r+0x96a>
 801b312:	4641      	mov	r1, r8
 801b314:	4620      	mov	r0, r4
 801b316:	f000 faa7 	bl	801b868 <_Bfree>
 801b31a:	4639      	mov	r1, r7
 801b31c:	4620      	mov	r0, r4
 801b31e:	f000 faa3 	bl	801b868 <_Bfree>
 801b322:	e695      	b.n	801b050 <_dtoa_r+0x6a0>
 801b324:	2600      	movs	r6, #0
 801b326:	4637      	mov	r7, r6
 801b328:	e7e1      	b.n	801b2ee <_dtoa_r+0x93e>
 801b32a:	9700      	str	r7, [sp, #0]
 801b32c:	4637      	mov	r7, r6
 801b32e:	e599      	b.n	801ae64 <_dtoa_r+0x4b4>
 801b330:	40240000 	.word	0x40240000
 801b334:	9b08      	ldr	r3, [sp, #32]
 801b336:	2b00      	cmp	r3, #0
 801b338:	f000 80ca 	beq.w	801b4d0 <_dtoa_r+0xb20>
 801b33c:	9b03      	ldr	r3, [sp, #12]
 801b33e:	9302      	str	r3, [sp, #8]
 801b340:	2d00      	cmp	r5, #0
 801b342:	dd05      	ble.n	801b350 <_dtoa_r+0x9a0>
 801b344:	4639      	mov	r1, r7
 801b346:	462a      	mov	r2, r5
 801b348:	4620      	mov	r0, r4
 801b34a:	f000 fc5f 	bl	801bc0c <__lshift>
 801b34e:	4607      	mov	r7, r0
 801b350:	f1b8 0f00 	cmp.w	r8, #0
 801b354:	d05b      	beq.n	801b40e <_dtoa_r+0xa5e>
 801b356:	6879      	ldr	r1, [r7, #4]
 801b358:	4620      	mov	r0, r4
 801b35a:	f000 fa45 	bl	801b7e8 <_Balloc>
 801b35e:	4605      	mov	r5, r0
 801b360:	b928      	cbnz	r0, 801b36e <_dtoa_r+0x9be>
 801b362:	4b87      	ldr	r3, [pc, #540]	; (801b580 <_dtoa_r+0xbd0>)
 801b364:	4602      	mov	r2, r0
 801b366:	f240 21ea 	movw	r1, #746	; 0x2ea
 801b36a:	f7ff bb3b 	b.w	801a9e4 <_dtoa_r+0x34>
 801b36e:	693a      	ldr	r2, [r7, #16]
 801b370:	3202      	adds	r2, #2
 801b372:	0092      	lsls	r2, r2, #2
 801b374:	f107 010c 	add.w	r1, r7, #12
 801b378:	300c      	adds	r0, #12
 801b37a:	f7fe fc35 	bl	8019be8 <memcpy>
 801b37e:	2201      	movs	r2, #1
 801b380:	4629      	mov	r1, r5
 801b382:	4620      	mov	r0, r4
 801b384:	f000 fc42 	bl	801bc0c <__lshift>
 801b388:	9b01      	ldr	r3, [sp, #4]
 801b38a:	f103 0901 	add.w	r9, r3, #1
 801b38e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801b392:	4413      	add	r3, r2
 801b394:	9305      	str	r3, [sp, #20]
 801b396:	f00a 0301 	and.w	r3, sl, #1
 801b39a:	46b8      	mov	r8, r7
 801b39c:	9304      	str	r3, [sp, #16]
 801b39e:	4607      	mov	r7, r0
 801b3a0:	4631      	mov	r1, r6
 801b3a2:	ee18 0a10 	vmov	r0, s16
 801b3a6:	f7ff fa75 	bl	801a894 <quorem>
 801b3aa:	4641      	mov	r1, r8
 801b3ac:	9002      	str	r0, [sp, #8]
 801b3ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801b3b2:	ee18 0a10 	vmov	r0, s16
 801b3b6:	f000 fc99 	bl	801bcec <__mcmp>
 801b3ba:	463a      	mov	r2, r7
 801b3bc:	9003      	str	r0, [sp, #12]
 801b3be:	4631      	mov	r1, r6
 801b3c0:	4620      	mov	r0, r4
 801b3c2:	f000 fcaf 	bl	801bd24 <__mdiff>
 801b3c6:	68c2      	ldr	r2, [r0, #12]
 801b3c8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 801b3cc:	4605      	mov	r5, r0
 801b3ce:	bb02      	cbnz	r2, 801b412 <_dtoa_r+0xa62>
 801b3d0:	4601      	mov	r1, r0
 801b3d2:	ee18 0a10 	vmov	r0, s16
 801b3d6:	f000 fc89 	bl	801bcec <__mcmp>
 801b3da:	4602      	mov	r2, r0
 801b3dc:	4629      	mov	r1, r5
 801b3de:	4620      	mov	r0, r4
 801b3e0:	9207      	str	r2, [sp, #28]
 801b3e2:	f000 fa41 	bl	801b868 <_Bfree>
 801b3e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801b3ea:	ea43 0102 	orr.w	r1, r3, r2
 801b3ee:	9b04      	ldr	r3, [sp, #16]
 801b3f0:	430b      	orrs	r3, r1
 801b3f2:	464d      	mov	r5, r9
 801b3f4:	d10f      	bne.n	801b416 <_dtoa_r+0xa66>
 801b3f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801b3fa:	d02a      	beq.n	801b452 <_dtoa_r+0xaa2>
 801b3fc:	9b03      	ldr	r3, [sp, #12]
 801b3fe:	2b00      	cmp	r3, #0
 801b400:	dd02      	ble.n	801b408 <_dtoa_r+0xa58>
 801b402:	9b02      	ldr	r3, [sp, #8]
 801b404:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801b408:	f88b a000 	strb.w	sl, [fp]
 801b40c:	e775      	b.n	801b2fa <_dtoa_r+0x94a>
 801b40e:	4638      	mov	r0, r7
 801b410:	e7ba      	b.n	801b388 <_dtoa_r+0x9d8>
 801b412:	2201      	movs	r2, #1
 801b414:	e7e2      	b.n	801b3dc <_dtoa_r+0xa2c>
 801b416:	9b03      	ldr	r3, [sp, #12]
 801b418:	2b00      	cmp	r3, #0
 801b41a:	db04      	blt.n	801b426 <_dtoa_r+0xa76>
 801b41c:	9906      	ldr	r1, [sp, #24]
 801b41e:	430b      	orrs	r3, r1
 801b420:	9904      	ldr	r1, [sp, #16]
 801b422:	430b      	orrs	r3, r1
 801b424:	d122      	bne.n	801b46c <_dtoa_r+0xabc>
 801b426:	2a00      	cmp	r2, #0
 801b428:	ddee      	ble.n	801b408 <_dtoa_r+0xa58>
 801b42a:	ee18 1a10 	vmov	r1, s16
 801b42e:	2201      	movs	r2, #1
 801b430:	4620      	mov	r0, r4
 801b432:	f000 fbeb 	bl	801bc0c <__lshift>
 801b436:	4631      	mov	r1, r6
 801b438:	ee08 0a10 	vmov	s16, r0
 801b43c:	f000 fc56 	bl	801bcec <__mcmp>
 801b440:	2800      	cmp	r0, #0
 801b442:	dc03      	bgt.n	801b44c <_dtoa_r+0xa9c>
 801b444:	d1e0      	bne.n	801b408 <_dtoa_r+0xa58>
 801b446:	f01a 0f01 	tst.w	sl, #1
 801b44a:	d0dd      	beq.n	801b408 <_dtoa_r+0xa58>
 801b44c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801b450:	d1d7      	bne.n	801b402 <_dtoa_r+0xa52>
 801b452:	2339      	movs	r3, #57	; 0x39
 801b454:	f88b 3000 	strb.w	r3, [fp]
 801b458:	462b      	mov	r3, r5
 801b45a:	461d      	mov	r5, r3
 801b45c:	3b01      	subs	r3, #1
 801b45e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801b462:	2a39      	cmp	r2, #57	; 0x39
 801b464:	d071      	beq.n	801b54a <_dtoa_r+0xb9a>
 801b466:	3201      	adds	r2, #1
 801b468:	701a      	strb	r2, [r3, #0]
 801b46a:	e746      	b.n	801b2fa <_dtoa_r+0x94a>
 801b46c:	2a00      	cmp	r2, #0
 801b46e:	dd07      	ble.n	801b480 <_dtoa_r+0xad0>
 801b470:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801b474:	d0ed      	beq.n	801b452 <_dtoa_r+0xaa2>
 801b476:	f10a 0301 	add.w	r3, sl, #1
 801b47a:	f88b 3000 	strb.w	r3, [fp]
 801b47e:	e73c      	b.n	801b2fa <_dtoa_r+0x94a>
 801b480:	9b05      	ldr	r3, [sp, #20]
 801b482:	f809 ac01 	strb.w	sl, [r9, #-1]
 801b486:	4599      	cmp	r9, r3
 801b488:	d047      	beq.n	801b51a <_dtoa_r+0xb6a>
 801b48a:	ee18 1a10 	vmov	r1, s16
 801b48e:	2300      	movs	r3, #0
 801b490:	220a      	movs	r2, #10
 801b492:	4620      	mov	r0, r4
 801b494:	f000 fa0a 	bl	801b8ac <__multadd>
 801b498:	45b8      	cmp	r8, r7
 801b49a:	ee08 0a10 	vmov	s16, r0
 801b49e:	f04f 0300 	mov.w	r3, #0
 801b4a2:	f04f 020a 	mov.w	r2, #10
 801b4a6:	4641      	mov	r1, r8
 801b4a8:	4620      	mov	r0, r4
 801b4aa:	d106      	bne.n	801b4ba <_dtoa_r+0xb0a>
 801b4ac:	f000 f9fe 	bl	801b8ac <__multadd>
 801b4b0:	4680      	mov	r8, r0
 801b4b2:	4607      	mov	r7, r0
 801b4b4:	f109 0901 	add.w	r9, r9, #1
 801b4b8:	e772      	b.n	801b3a0 <_dtoa_r+0x9f0>
 801b4ba:	f000 f9f7 	bl	801b8ac <__multadd>
 801b4be:	4639      	mov	r1, r7
 801b4c0:	4680      	mov	r8, r0
 801b4c2:	2300      	movs	r3, #0
 801b4c4:	220a      	movs	r2, #10
 801b4c6:	4620      	mov	r0, r4
 801b4c8:	f000 f9f0 	bl	801b8ac <__multadd>
 801b4cc:	4607      	mov	r7, r0
 801b4ce:	e7f1      	b.n	801b4b4 <_dtoa_r+0xb04>
 801b4d0:	9b03      	ldr	r3, [sp, #12]
 801b4d2:	9302      	str	r3, [sp, #8]
 801b4d4:	9d01      	ldr	r5, [sp, #4]
 801b4d6:	ee18 0a10 	vmov	r0, s16
 801b4da:	4631      	mov	r1, r6
 801b4dc:	f7ff f9da 	bl	801a894 <quorem>
 801b4e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801b4e4:	9b01      	ldr	r3, [sp, #4]
 801b4e6:	f805 ab01 	strb.w	sl, [r5], #1
 801b4ea:	1aea      	subs	r2, r5, r3
 801b4ec:	9b02      	ldr	r3, [sp, #8]
 801b4ee:	4293      	cmp	r3, r2
 801b4f0:	dd09      	ble.n	801b506 <_dtoa_r+0xb56>
 801b4f2:	ee18 1a10 	vmov	r1, s16
 801b4f6:	2300      	movs	r3, #0
 801b4f8:	220a      	movs	r2, #10
 801b4fa:	4620      	mov	r0, r4
 801b4fc:	f000 f9d6 	bl	801b8ac <__multadd>
 801b500:	ee08 0a10 	vmov	s16, r0
 801b504:	e7e7      	b.n	801b4d6 <_dtoa_r+0xb26>
 801b506:	9b02      	ldr	r3, [sp, #8]
 801b508:	2b00      	cmp	r3, #0
 801b50a:	bfc8      	it	gt
 801b50c:	461d      	movgt	r5, r3
 801b50e:	9b01      	ldr	r3, [sp, #4]
 801b510:	bfd8      	it	le
 801b512:	2501      	movle	r5, #1
 801b514:	441d      	add	r5, r3
 801b516:	f04f 0800 	mov.w	r8, #0
 801b51a:	ee18 1a10 	vmov	r1, s16
 801b51e:	2201      	movs	r2, #1
 801b520:	4620      	mov	r0, r4
 801b522:	f000 fb73 	bl	801bc0c <__lshift>
 801b526:	4631      	mov	r1, r6
 801b528:	ee08 0a10 	vmov	s16, r0
 801b52c:	f000 fbde 	bl	801bcec <__mcmp>
 801b530:	2800      	cmp	r0, #0
 801b532:	dc91      	bgt.n	801b458 <_dtoa_r+0xaa8>
 801b534:	d102      	bne.n	801b53c <_dtoa_r+0xb8c>
 801b536:	f01a 0f01 	tst.w	sl, #1
 801b53a:	d18d      	bne.n	801b458 <_dtoa_r+0xaa8>
 801b53c:	462b      	mov	r3, r5
 801b53e:	461d      	mov	r5, r3
 801b540:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b544:	2a30      	cmp	r2, #48	; 0x30
 801b546:	d0fa      	beq.n	801b53e <_dtoa_r+0xb8e>
 801b548:	e6d7      	b.n	801b2fa <_dtoa_r+0x94a>
 801b54a:	9a01      	ldr	r2, [sp, #4]
 801b54c:	429a      	cmp	r2, r3
 801b54e:	d184      	bne.n	801b45a <_dtoa_r+0xaaa>
 801b550:	9b00      	ldr	r3, [sp, #0]
 801b552:	3301      	adds	r3, #1
 801b554:	9300      	str	r3, [sp, #0]
 801b556:	2331      	movs	r3, #49	; 0x31
 801b558:	7013      	strb	r3, [r2, #0]
 801b55a:	e6ce      	b.n	801b2fa <_dtoa_r+0x94a>
 801b55c:	4b09      	ldr	r3, [pc, #36]	; (801b584 <_dtoa_r+0xbd4>)
 801b55e:	f7ff ba95 	b.w	801aa8c <_dtoa_r+0xdc>
 801b562:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b564:	2b00      	cmp	r3, #0
 801b566:	f47f aa6e 	bne.w	801aa46 <_dtoa_r+0x96>
 801b56a:	4b07      	ldr	r3, [pc, #28]	; (801b588 <_dtoa_r+0xbd8>)
 801b56c:	f7ff ba8e 	b.w	801aa8c <_dtoa_r+0xdc>
 801b570:	9b02      	ldr	r3, [sp, #8]
 801b572:	2b00      	cmp	r3, #0
 801b574:	dcae      	bgt.n	801b4d4 <_dtoa_r+0xb24>
 801b576:	9b06      	ldr	r3, [sp, #24]
 801b578:	2b02      	cmp	r3, #2
 801b57a:	f73f aea8 	bgt.w	801b2ce <_dtoa_r+0x91e>
 801b57e:	e7a9      	b.n	801b4d4 <_dtoa_r+0xb24>
 801b580:	0801d485 	.word	0x0801d485
 801b584:	0801d248 	.word	0x0801d248
 801b588:	0801d41d 	.word	0x0801d41d

0801b58c <std>:
 801b58c:	2300      	movs	r3, #0
 801b58e:	b510      	push	{r4, lr}
 801b590:	4604      	mov	r4, r0
 801b592:	e9c0 3300 	strd	r3, r3, [r0]
 801b596:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b59a:	6083      	str	r3, [r0, #8]
 801b59c:	8181      	strh	r1, [r0, #12]
 801b59e:	6643      	str	r3, [r0, #100]	; 0x64
 801b5a0:	81c2      	strh	r2, [r0, #14]
 801b5a2:	6183      	str	r3, [r0, #24]
 801b5a4:	4619      	mov	r1, r3
 801b5a6:	2208      	movs	r2, #8
 801b5a8:	305c      	adds	r0, #92	; 0x5c
 801b5aa:	f7fe fb2b 	bl	8019c04 <memset>
 801b5ae:	4b05      	ldr	r3, [pc, #20]	; (801b5c4 <std+0x38>)
 801b5b0:	6263      	str	r3, [r4, #36]	; 0x24
 801b5b2:	4b05      	ldr	r3, [pc, #20]	; (801b5c8 <std+0x3c>)
 801b5b4:	62a3      	str	r3, [r4, #40]	; 0x28
 801b5b6:	4b05      	ldr	r3, [pc, #20]	; (801b5cc <std+0x40>)
 801b5b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b5ba:	4b05      	ldr	r3, [pc, #20]	; (801b5d0 <std+0x44>)
 801b5bc:	6224      	str	r4, [r4, #32]
 801b5be:	6323      	str	r3, [r4, #48]	; 0x30
 801b5c0:	bd10      	pop	{r4, pc}
 801b5c2:	bf00      	nop
 801b5c4:	0801c489 	.word	0x0801c489
 801b5c8:	0801c4ab 	.word	0x0801c4ab
 801b5cc:	0801c4e3 	.word	0x0801c4e3
 801b5d0:	0801c507 	.word	0x0801c507

0801b5d4 <_cleanup_r>:
 801b5d4:	4901      	ldr	r1, [pc, #4]	; (801b5dc <_cleanup_r+0x8>)
 801b5d6:	f000 b8c1 	b.w	801b75c <_fwalk_reent>
 801b5da:	bf00      	nop
 801b5dc:	0801c80d 	.word	0x0801c80d

0801b5e0 <__sfmoreglue>:
 801b5e0:	b570      	push	{r4, r5, r6, lr}
 801b5e2:	2268      	movs	r2, #104	; 0x68
 801b5e4:	1e4d      	subs	r5, r1, #1
 801b5e6:	4355      	muls	r5, r2
 801b5e8:	460e      	mov	r6, r1
 801b5ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801b5ee:	f7fe fb7d 	bl	8019cec <_malloc_r>
 801b5f2:	4604      	mov	r4, r0
 801b5f4:	b140      	cbz	r0, 801b608 <__sfmoreglue+0x28>
 801b5f6:	2100      	movs	r1, #0
 801b5f8:	e9c0 1600 	strd	r1, r6, [r0]
 801b5fc:	300c      	adds	r0, #12
 801b5fe:	60a0      	str	r0, [r4, #8]
 801b600:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b604:	f7fe fafe 	bl	8019c04 <memset>
 801b608:	4620      	mov	r0, r4
 801b60a:	bd70      	pop	{r4, r5, r6, pc}

0801b60c <__sfp_lock_acquire>:
 801b60c:	4801      	ldr	r0, [pc, #4]	; (801b614 <__sfp_lock_acquire+0x8>)
 801b60e:	f000 b8ca 	b.w	801b7a6 <__retarget_lock_acquire_recursive>
 801b612:	bf00      	nop
 801b614:	20002fc5 	.word	0x20002fc5

0801b618 <__sfp_lock_release>:
 801b618:	4801      	ldr	r0, [pc, #4]	; (801b620 <__sfp_lock_release+0x8>)
 801b61a:	f000 b8c5 	b.w	801b7a8 <__retarget_lock_release_recursive>
 801b61e:	bf00      	nop
 801b620:	20002fc5 	.word	0x20002fc5

0801b624 <__sinit_lock_acquire>:
 801b624:	4801      	ldr	r0, [pc, #4]	; (801b62c <__sinit_lock_acquire+0x8>)
 801b626:	f000 b8be 	b.w	801b7a6 <__retarget_lock_acquire_recursive>
 801b62a:	bf00      	nop
 801b62c:	20002fc6 	.word	0x20002fc6

0801b630 <__sinit_lock_release>:
 801b630:	4801      	ldr	r0, [pc, #4]	; (801b638 <__sinit_lock_release+0x8>)
 801b632:	f000 b8b9 	b.w	801b7a8 <__retarget_lock_release_recursive>
 801b636:	bf00      	nop
 801b638:	20002fc6 	.word	0x20002fc6

0801b63c <__sinit>:
 801b63c:	b510      	push	{r4, lr}
 801b63e:	4604      	mov	r4, r0
 801b640:	f7ff fff0 	bl	801b624 <__sinit_lock_acquire>
 801b644:	69a3      	ldr	r3, [r4, #24]
 801b646:	b11b      	cbz	r3, 801b650 <__sinit+0x14>
 801b648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b64c:	f7ff bff0 	b.w	801b630 <__sinit_lock_release>
 801b650:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801b654:	6523      	str	r3, [r4, #80]	; 0x50
 801b656:	4b13      	ldr	r3, [pc, #76]	; (801b6a4 <__sinit+0x68>)
 801b658:	4a13      	ldr	r2, [pc, #76]	; (801b6a8 <__sinit+0x6c>)
 801b65a:	681b      	ldr	r3, [r3, #0]
 801b65c:	62a2      	str	r2, [r4, #40]	; 0x28
 801b65e:	42a3      	cmp	r3, r4
 801b660:	bf04      	itt	eq
 801b662:	2301      	moveq	r3, #1
 801b664:	61a3      	streq	r3, [r4, #24]
 801b666:	4620      	mov	r0, r4
 801b668:	f000 f820 	bl	801b6ac <__sfp>
 801b66c:	6060      	str	r0, [r4, #4]
 801b66e:	4620      	mov	r0, r4
 801b670:	f000 f81c 	bl	801b6ac <__sfp>
 801b674:	60a0      	str	r0, [r4, #8]
 801b676:	4620      	mov	r0, r4
 801b678:	f000 f818 	bl	801b6ac <__sfp>
 801b67c:	2200      	movs	r2, #0
 801b67e:	60e0      	str	r0, [r4, #12]
 801b680:	2104      	movs	r1, #4
 801b682:	6860      	ldr	r0, [r4, #4]
 801b684:	f7ff ff82 	bl	801b58c <std>
 801b688:	68a0      	ldr	r0, [r4, #8]
 801b68a:	2201      	movs	r2, #1
 801b68c:	2109      	movs	r1, #9
 801b68e:	f7ff ff7d 	bl	801b58c <std>
 801b692:	68e0      	ldr	r0, [r4, #12]
 801b694:	2202      	movs	r2, #2
 801b696:	2112      	movs	r1, #18
 801b698:	f7ff ff78 	bl	801b58c <std>
 801b69c:	2301      	movs	r3, #1
 801b69e:	61a3      	str	r3, [r4, #24]
 801b6a0:	e7d2      	b.n	801b648 <__sinit+0xc>
 801b6a2:	bf00      	nop
 801b6a4:	0801d234 	.word	0x0801d234
 801b6a8:	0801b5d5 	.word	0x0801b5d5

0801b6ac <__sfp>:
 801b6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b6ae:	4607      	mov	r7, r0
 801b6b0:	f7ff ffac 	bl	801b60c <__sfp_lock_acquire>
 801b6b4:	4b1e      	ldr	r3, [pc, #120]	; (801b730 <__sfp+0x84>)
 801b6b6:	681e      	ldr	r6, [r3, #0]
 801b6b8:	69b3      	ldr	r3, [r6, #24]
 801b6ba:	b913      	cbnz	r3, 801b6c2 <__sfp+0x16>
 801b6bc:	4630      	mov	r0, r6
 801b6be:	f7ff ffbd 	bl	801b63c <__sinit>
 801b6c2:	3648      	adds	r6, #72	; 0x48
 801b6c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b6c8:	3b01      	subs	r3, #1
 801b6ca:	d503      	bpl.n	801b6d4 <__sfp+0x28>
 801b6cc:	6833      	ldr	r3, [r6, #0]
 801b6ce:	b30b      	cbz	r3, 801b714 <__sfp+0x68>
 801b6d0:	6836      	ldr	r6, [r6, #0]
 801b6d2:	e7f7      	b.n	801b6c4 <__sfp+0x18>
 801b6d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b6d8:	b9d5      	cbnz	r5, 801b710 <__sfp+0x64>
 801b6da:	4b16      	ldr	r3, [pc, #88]	; (801b734 <__sfp+0x88>)
 801b6dc:	60e3      	str	r3, [r4, #12]
 801b6de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b6e2:	6665      	str	r5, [r4, #100]	; 0x64
 801b6e4:	f000 f85e 	bl	801b7a4 <__retarget_lock_init_recursive>
 801b6e8:	f7ff ff96 	bl	801b618 <__sfp_lock_release>
 801b6ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801b6f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801b6f4:	6025      	str	r5, [r4, #0]
 801b6f6:	61a5      	str	r5, [r4, #24]
 801b6f8:	2208      	movs	r2, #8
 801b6fa:	4629      	mov	r1, r5
 801b6fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b700:	f7fe fa80 	bl	8019c04 <memset>
 801b704:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b708:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b70c:	4620      	mov	r0, r4
 801b70e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b710:	3468      	adds	r4, #104	; 0x68
 801b712:	e7d9      	b.n	801b6c8 <__sfp+0x1c>
 801b714:	2104      	movs	r1, #4
 801b716:	4638      	mov	r0, r7
 801b718:	f7ff ff62 	bl	801b5e0 <__sfmoreglue>
 801b71c:	4604      	mov	r4, r0
 801b71e:	6030      	str	r0, [r6, #0]
 801b720:	2800      	cmp	r0, #0
 801b722:	d1d5      	bne.n	801b6d0 <__sfp+0x24>
 801b724:	f7ff ff78 	bl	801b618 <__sfp_lock_release>
 801b728:	230c      	movs	r3, #12
 801b72a:	603b      	str	r3, [r7, #0]
 801b72c:	e7ee      	b.n	801b70c <__sfp+0x60>
 801b72e:	bf00      	nop
 801b730:	0801d234 	.word	0x0801d234
 801b734:	ffff0001 	.word	0xffff0001

0801b738 <fiprintf>:
 801b738:	b40e      	push	{r1, r2, r3}
 801b73a:	b503      	push	{r0, r1, lr}
 801b73c:	4601      	mov	r1, r0
 801b73e:	ab03      	add	r3, sp, #12
 801b740:	4805      	ldr	r0, [pc, #20]	; (801b758 <fiprintf+0x20>)
 801b742:	f853 2b04 	ldr.w	r2, [r3], #4
 801b746:	6800      	ldr	r0, [r0, #0]
 801b748:	9301      	str	r3, [sp, #4]
 801b74a:	f000 fd6d 	bl	801c228 <_vfiprintf_r>
 801b74e:	b002      	add	sp, #8
 801b750:	f85d eb04 	ldr.w	lr, [sp], #4
 801b754:	b003      	add	sp, #12
 801b756:	4770      	bx	lr
 801b758:	20000100 	.word	0x20000100

0801b75c <_fwalk_reent>:
 801b75c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b760:	4606      	mov	r6, r0
 801b762:	4688      	mov	r8, r1
 801b764:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b768:	2700      	movs	r7, #0
 801b76a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b76e:	f1b9 0901 	subs.w	r9, r9, #1
 801b772:	d505      	bpl.n	801b780 <_fwalk_reent+0x24>
 801b774:	6824      	ldr	r4, [r4, #0]
 801b776:	2c00      	cmp	r4, #0
 801b778:	d1f7      	bne.n	801b76a <_fwalk_reent+0xe>
 801b77a:	4638      	mov	r0, r7
 801b77c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b780:	89ab      	ldrh	r3, [r5, #12]
 801b782:	2b01      	cmp	r3, #1
 801b784:	d907      	bls.n	801b796 <_fwalk_reent+0x3a>
 801b786:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b78a:	3301      	adds	r3, #1
 801b78c:	d003      	beq.n	801b796 <_fwalk_reent+0x3a>
 801b78e:	4629      	mov	r1, r5
 801b790:	4630      	mov	r0, r6
 801b792:	47c0      	blx	r8
 801b794:	4307      	orrs	r7, r0
 801b796:	3568      	adds	r5, #104	; 0x68
 801b798:	e7e9      	b.n	801b76e <_fwalk_reent+0x12>
	...

0801b79c <_localeconv_r>:
 801b79c:	4800      	ldr	r0, [pc, #0]	; (801b7a0 <_localeconv_r+0x4>)
 801b79e:	4770      	bx	lr
 801b7a0:	20000254 	.word	0x20000254

0801b7a4 <__retarget_lock_init_recursive>:
 801b7a4:	4770      	bx	lr

0801b7a6 <__retarget_lock_acquire_recursive>:
 801b7a6:	4770      	bx	lr

0801b7a8 <__retarget_lock_release_recursive>:
 801b7a8:	4770      	bx	lr

0801b7aa <__ascii_mbtowc>:
 801b7aa:	b082      	sub	sp, #8
 801b7ac:	b901      	cbnz	r1, 801b7b0 <__ascii_mbtowc+0x6>
 801b7ae:	a901      	add	r1, sp, #4
 801b7b0:	b142      	cbz	r2, 801b7c4 <__ascii_mbtowc+0x1a>
 801b7b2:	b14b      	cbz	r3, 801b7c8 <__ascii_mbtowc+0x1e>
 801b7b4:	7813      	ldrb	r3, [r2, #0]
 801b7b6:	600b      	str	r3, [r1, #0]
 801b7b8:	7812      	ldrb	r2, [r2, #0]
 801b7ba:	1e10      	subs	r0, r2, #0
 801b7bc:	bf18      	it	ne
 801b7be:	2001      	movne	r0, #1
 801b7c0:	b002      	add	sp, #8
 801b7c2:	4770      	bx	lr
 801b7c4:	4610      	mov	r0, r2
 801b7c6:	e7fb      	b.n	801b7c0 <__ascii_mbtowc+0x16>
 801b7c8:	f06f 0001 	mvn.w	r0, #1
 801b7cc:	e7f8      	b.n	801b7c0 <__ascii_mbtowc+0x16>
	...

0801b7d0 <__malloc_lock>:
 801b7d0:	4801      	ldr	r0, [pc, #4]	; (801b7d8 <__malloc_lock+0x8>)
 801b7d2:	f7ff bfe8 	b.w	801b7a6 <__retarget_lock_acquire_recursive>
 801b7d6:	bf00      	nop
 801b7d8:	20002fc4 	.word	0x20002fc4

0801b7dc <__malloc_unlock>:
 801b7dc:	4801      	ldr	r0, [pc, #4]	; (801b7e4 <__malloc_unlock+0x8>)
 801b7de:	f7ff bfe3 	b.w	801b7a8 <__retarget_lock_release_recursive>
 801b7e2:	bf00      	nop
 801b7e4:	20002fc4 	.word	0x20002fc4

0801b7e8 <_Balloc>:
 801b7e8:	b570      	push	{r4, r5, r6, lr}
 801b7ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b7ec:	4604      	mov	r4, r0
 801b7ee:	460d      	mov	r5, r1
 801b7f0:	b976      	cbnz	r6, 801b810 <_Balloc+0x28>
 801b7f2:	2010      	movs	r0, #16
 801b7f4:	f7fe f9e8 	bl	8019bc8 <malloc>
 801b7f8:	4602      	mov	r2, r0
 801b7fa:	6260      	str	r0, [r4, #36]	; 0x24
 801b7fc:	b920      	cbnz	r0, 801b808 <_Balloc+0x20>
 801b7fe:	4b18      	ldr	r3, [pc, #96]	; (801b860 <_Balloc+0x78>)
 801b800:	4818      	ldr	r0, [pc, #96]	; (801b864 <_Balloc+0x7c>)
 801b802:	2166      	movs	r1, #102	; 0x66
 801b804:	f7ff f828 	bl	801a858 <__assert_func>
 801b808:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b80c:	6006      	str	r6, [r0, #0]
 801b80e:	60c6      	str	r6, [r0, #12]
 801b810:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801b812:	68f3      	ldr	r3, [r6, #12]
 801b814:	b183      	cbz	r3, 801b838 <_Balloc+0x50>
 801b816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b818:	68db      	ldr	r3, [r3, #12]
 801b81a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b81e:	b9b8      	cbnz	r0, 801b850 <_Balloc+0x68>
 801b820:	2101      	movs	r1, #1
 801b822:	fa01 f605 	lsl.w	r6, r1, r5
 801b826:	1d72      	adds	r2, r6, #5
 801b828:	0092      	lsls	r2, r2, #2
 801b82a:	4620      	mov	r0, r4
 801b82c:	f000 fb60 	bl	801bef0 <_calloc_r>
 801b830:	b160      	cbz	r0, 801b84c <_Balloc+0x64>
 801b832:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b836:	e00e      	b.n	801b856 <_Balloc+0x6e>
 801b838:	2221      	movs	r2, #33	; 0x21
 801b83a:	2104      	movs	r1, #4
 801b83c:	4620      	mov	r0, r4
 801b83e:	f000 fb57 	bl	801bef0 <_calloc_r>
 801b842:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b844:	60f0      	str	r0, [r6, #12]
 801b846:	68db      	ldr	r3, [r3, #12]
 801b848:	2b00      	cmp	r3, #0
 801b84a:	d1e4      	bne.n	801b816 <_Balloc+0x2e>
 801b84c:	2000      	movs	r0, #0
 801b84e:	bd70      	pop	{r4, r5, r6, pc}
 801b850:	6802      	ldr	r2, [r0, #0]
 801b852:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b856:	2300      	movs	r3, #0
 801b858:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b85c:	e7f7      	b.n	801b84e <_Balloc+0x66>
 801b85e:	bf00      	nop
 801b860:	0801d26c 	.word	0x0801d26c
 801b864:	0801d502 	.word	0x0801d502

0801b868 <_Bfree>:
 801b868:	b570      	push	{r4, r5, r6, lr}
 801b86a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b86c:	4605      	mov	r5, r0
 801b86e:	460c      	mov	r4, r1
 801b870:	b976      	cbnz	r6, 801b890 <_Bfree+0x28>
 801b872:	2010      	movs	r0, #16
 801b874:	f7fe f9a8 	bl	8019bc8 <malloc>
 801b878:	4602      	mov	r2, r0
 801b87a:	6268      	str	r0, [r5, #36]	; 0x24
 801b87c:	b920      	cbnz	r0, 801b888 <_Bfree+0x20>
 801b87e:	4b09      	ldr	r3, [pc, #36]	; (801b8a4 <_Bfree+0x3c>)
 801b880:	4809      	ldr	r0, [pc, #36]	; (801b8a8 <_Bfree+0x40>)
 801b882:	218a      	movs	r1, #138	; 0x8a
 801b884:	f7fe ffe8 	bl	801a858 <__assert_func>
 801b888:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b88c:	6006      	str	r6, [r0, #0]
 801b88e:	60c6      	str	r6, [r0, #12]
 801b890:	b13c      	cbz	r4, 801b8a2 <_Bfree+0x3a>
 801b892:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b894:	6862      	ldr	r2, [r4, #4]
 801b896:	68db      	ldr	r3, [r3, #12]
 801b898:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b89c:	6021      	str	r1, [r4, #0]
 801b89e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b8a2:	bd70      	pop	{r4, r5, r6, pc}
 801b8a4:	0801d26c 	.word	0x0801d26c
 801b8a8:	0801d502 	.word	0x0801d502

0801b8ac <__multadd>:
 801b8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b8b0:	690d      	ldr	r5, [r1, #16]
 801b8b2:	4607      	mov	r7, r0
 801b8b4:	460c      	mov	r4, r1
 801b8b6:	461e      	mov	r6, r3
 801b8b8:	f101 0c14 	add.w	ip, r1, #20
 801b8bc:	2000      	movs	r0, #0
 801b8be:	f8dc 3000 	ldr.w	r3, [ip]
 801b8c2:	b299      	uxth	r1, r3
 801b8c4:	fb02 6101 	mla	r1, r2, r1, r6
 801b8c8:	0c1e      	lsrs	r6, r3, #16
 801b8ca:	0c0b      	lsrs	r3, r1, #16
 801b8cc:	fb02 3306 	mla	r3, r2, r6, r3
 801b8d0:	b289      	uxth	r1, r1
 801b8d2:	3001      	adds	r0, #1
 801b8d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b8d8:	4285      	cmp	r5, r0
 801b8da:	f84c 1b04 	str.w	r1, [ip], #4
 801b8de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b8e2:	dcec      	bgt.n	801b8be <__multadd+0x12>
 801b8e4:	b30e      	cbz	r6, 801b92a <__multadd+0x7e>
 801b8e6:	68a3      	ldr	r3, [r4, #8]
 801b8e8:	42ab      	cmp	r3, r5
 801b8ea:	dc19      	bgt.n	801b920 <__multadd+0x74>
 801b8ec:	6861      	ldr	r1, [r4, #4]
 801b8ee:	4638      	mov	r0, r7
 801b8f0:	3101      	adds	r1, #1
 801b8f2:	f7ff ff79 	bl	801b7e8 <_Balloc>
 801b8f6:	4680      	mov	r8, r0
 801b8f8:	b928      	cbnz	r0, 801b906 <__multadd+0x5a>
 801b8fa:	4602      	mov	r2, r0
 801b8fc:	4b0c      	ldr	r3, [pc, #48]	; (801b930 <__multadd+0x84>)
 801b8fe:	480d      	ldr	r0, [pc, #52]	; (801b934 <__multadd+0x88>)
 801b900:	21b5      	movs	r1, #181	; 0xb5
 801b902:	f7fe ffa9 	bl	801a858 <__assert_func>
 801b906:	6922      	ldr	r2, [r4, #16]
 801b908:	3202      	adds	r2, #2
 801b90a:	f104 010c 	add.w	r1, r4, #12
 801b90e:	0092      	lsls	r2, r2, #2
 801b910:	300c      	adds	r0, #12
 801b912:	f7fe f969 	bl	8019be8 <memcpy>
 801b916:	4621      	mov	r1, r4
 801b918:	4638      	mov	r0, r7
 801b91a:	f7ff ffa5 	bl	801b868 <_Bfree>
 801b91e:	4644      	mov	r4, r8
 801b920:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b924:	3501      	adds	r5, #1
 801b926:	615e      	str	r6, [r3, #20]
 801b928:	6125      	str	r5, [r4, #16]
 801b92a:	4620      	mov	r0, r4
 801b92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b930:	0801d485 	.word	0x0801d485
 801b934:	0801d502 	.word	0x0801d502

0801b938 <__hi0bits>:
 801b938:	0c03      	lsrs	r3, r0, #16
 801b93a:	041b      	lsls	r3, r3, #16
 801b93c:	b9d3      	cbnz	r3, 801b974 <__hi0bits+0x3c>
 801b93e:	0400      	lsls	r0, r0, #16
 801b940:	2310      	movs	r3, #16
 801b942:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801b946:	bf04      	itt	eq
 801b948:	0200      	lsleq	r0, r0, #8
 801b94a:	3308      	addeq	r3, #8
 801b94c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801b950:	bf04      	itt	eq
 801b952:	0100      	lsleq	r0, r0, #4
 801b954:	3304      	addeq	r3, #4
 801b956:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801b95a:	bf04      	itt	eq
 801b95c:	0080      	lsleq	r0, r0, #2
 801b95e:	3302      	addeq	r3, #2
 801b960:	2800      	cmp	r0, #0
 801b962:	db05      	blt.n	801b970 <__hi0bits+0x38>
 801b964:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801b968:	f103 0301 	add.w	r3, r3, #1
 801b96c:	bf08      	it	eq
 801b96e:	2320      	moveq	r3, #32
 801b970:	4618      	mov	r0, r3
 801b972:	4770      	bx	lr
 801b974:	2300      	movs	r3, #0
 801b976:	e7e4      	b.n	801b942 <__hi0bits+0xa>

0801b978 <__lo0bits>:
 801b978:	6803      	ldr	r3, [r0, #0]
 801b97a:	f013 0207 	ands.w	r2, r3, #7
 801b97e:	4601      	mov	r1, r0
 801b980:	d00b      	beq.n	801b99a <__lo0bits+0x22>
 801b982:	07da      	lsls	r2, r3, #31
 801b984:	d423      	bmi.n	801b9ce <__lo0bits+0x56>
 801b986:	0798      	lsls	r0, r3, #30
 801b988:	bf49      	itett	mi
 801b98a:	085b      	lsrmi	r3, r3, #1
 801b98c:	089b      	lsrpl	r3, r3, #2
 801b98e:	2001      	movmi	r0, #1
 801b990:	600b      	strmi	r3, [r1, #0]
 801b992:	bf5c      	itt	pl
 801b994:	600b      	strpl	r3, [r1, #0]
 801b996:	2002      	movpl	r0, #2
 801b998:	4770      	bx	lr
 801b99a:	b298      	uxth	r0, r3
 801b99c:	b9a8      	cbnz	r0, 801b9ca <__lo0bits+0x52>
 801b99e:	0c1b      	lsrs	r3, r3, #16
 801b9a0:	2010      	movs	r0, #16
 801b9a2:	b2da      	uxtb	r2, r3
 801b9a4:	b90a      	cbnz	r2, 801b9aa <__lo0bits+0x32>
 801b9a6:	3008      	adds	r0, #8
 801b9a8:	0a1b      	lsrs	r3, r3, #8
 801b9aa:	071a      	lsls	r2, r3, #28
 801b9ac:	bf04      	itt	eq
 801b9ae:	091b      	lsreq	r3, r3, #4
 801b9b0:	3004      	addeq	r0, #4
 801b9b2:	079a      	lsls	r2, r3, #30
 801b9b4:	bf04      	itt	eq
 801b9b6:	089b      	lsreq	r3, r3, #2
 801b9b8:	3002      	addeq	r0, #2
 801b9ba:	07da      	lsls	r2, r3, #31
 801b9bc:	d403      	bmi.n	801b9c6 <__lo0bits+0x4e>
 801b9be:	085b      	lsrs	r3, r3, #1
 801b9c0:	f100 0001 	add.w	r0, r0, #1
 801b9c4:	d005      	beq.n	801b9d2 <__lo0bits+0x5a>
 801b9c6:	600b      	str	r3, [r1, #0]
 801b9c8:	4770      	bx	lr
 801b9ca:	4610      	mov	r0, r2
 801b9cc:	e7e9      	b.n	801b9a2 <__lo0bits+0x2a>
 801b9ce:	2000      	movs	r0, #0
 801b9d0:	4770      	bx	lr
 801b9d2:	2020      	movs	r0, #32
 801b9d4:	4770      	bx	lr
	...

0801b9d8 <__i2b>:
 801b9d8:	b510      	push	{r4, lr}
 801b9da:	460c      	mov	r4, r1
 801b9dc:	2101      	movs	r1, #1
 801b9de:	f7ff ff03 	bl	801b7e8 <_Balloc>
 801b9e2:	4602      	mov	r2, r0
 801b9e4:	b928      	cbnz	r0, 801b9f2 <__i2b+0x1a>
 801b9e6:	4b05      	ldr	r3, [pc, #20]	; (801b9fc <__i2b+0x24>)
 801b9e8:	4805      	ldr	r0, [pc, #20]	; (801ba00 <__i2b+0x28>)
 801b9ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801b9ee:	f7fe ff33 	bl	801a858 <__assert_func>
 801b9f2:	2301      	movs	r3, #1
 801b9f4:	6144      	str	r4, [r0, #20]
 801b9f6:	6103      	str	r3, [r0, #16]
 801b9f8:	bd10      	pop	{r4, pc}
 801b9fa:	bf00      	nop
 801b9fc:	0801d485 	.word	0x0801d485
 801ba00:	0801d502 	.word	0x0801d502

0801ba04 <__multiply>:
 801ba04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba08:	4691      	mov	r9, r2
 801ba0a:	690a      	ldr	r2, [r1, #16]
 801ba0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ba10:	429a      	cmp	r2, r3
 801ba12:	bfb8      	it	lt
 801ba14:	460b      	movlt	r3, r1
 801ba16:	460c      	mov	r4, r1
 801ba18:	bfbc      	itt	lt
 801ba1a:	464c      	movlt	r4, r9
 801ba1c:	4699      	movlt	r9, r3
 801ba1e:	6927      	ldr	r7, [r4, #16]
 801ba20:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801ba24:	68a3      	ldr	r3, [r4, #8]
 801ba26:	6861      	ldr	r1, [r4, #4]
 801ba28:	eb07 060a 	add.w	r6, r7, sl
 801ba2c:	42b3      	cmp	r3, r6
 801ba2e:	b085      	sub	sp, #20
 801ba30:	bfb8      	it	lt
 801ba32:	3101      	addlt	r1, #1
 801ba34:	f7ff fed8 	bl	801b7e8 <_Balloc>
 801ba38:	b930      	cbnz	r0, 801ba48 <__multiply+0x44>
 801ba3a:	4602      	mov	r2, r0
 801ba3c:	4b44      	ldr	r3, [pc, #272]	; (801bb50 <__multiply+0x14c>)
 801ba3e:	4845      	ldr	r0, [pc, #276]	; (801bb54 <__multiply+0x150>)
 801ba40:	f240 115d 	movw	r1, #349	; 0x15d
 801ba44:	f7fe ff08 	bl	801a858 <__assert_func>
 801ba48:	f100 0514 	add.w	r5, r0, #20
 801ba4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801ba50:	462b      	mov	r3, r5
 801ba52:	2200      	movs	r2, #0
 801ba54:	4543      	cmp	r3, r8
 801ba56:	d321      	bcc.n	801ba9c <__multiply+0x98>
 801ba58:	f104 0314 	add.w	r3, r4, #20
 801ba5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801ba60:	f109 0314 	add.w	r3, r9, #20
 801ba64:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801ba68:	9202      	str	r2, [sp, #8]
 801ba6a:	1b3a      	subs	r2, r7, r4
 801ba6c:	3a15      	subs	r2, #21
 801ba6e:	f022 0203 	bic.w	r2, r2, #3
 801ba72:	3204      	adds	r2, #4
 801ba74:	f104 0115 	add.w	r1, r4, #21
 801ba78:	428f      	cmp	r7, r1
 801ba7a:	bf38      	it	cc
 801ba7c:	2204      	movcc	r2, #4
 801ba7e:	9201      	str	r2, [sp, #4]
 801ba80:	9a02      	ldr	r2, [sp, #8]
 801ba82:	9303      	str	r3, [sp, #12]
 801ba84:	429a      	cmp	r2, r3
 801ba86:	d80c      	bhi.n	801baa2 <__multiply+0x9e>
 801ba88:	2e00      	cmp	r6, #0
 801ba8a:	dd03      	ble.n	801ba94 <__multiply+0x90>
 801ba8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ba90:	2b00      	cmp	r3, #0
 801ba92:	d05a      	beq.n	801bb4a <__multiply+0x146>
 801ba94:	6106      	str	r6, [r0, #16]
 801ba96:	b005      	add	sp, #20
 801ba98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba9c:	f843 2b04 	str.w	r2, [r3], #4
 801baa0:	e7d8      	b.n	801ba54 <__multiply+0x50>
 801baa2:	f8b3 a000 	ldrh.w	sl, [r3]
 801baa6:	f1ba 0f00 	cmp.w	sl, #0
 801baaa:	d024      	beq.n	801baf6 <__multiply+0xf2>
 801baac:	f104 0e14 	add.w	lr, r4, #20
 801bab0:	46a9      	mov	r9, r5
 801bab2:	f04f 0c00 	mov.w	ip, #0
 801bab6:	f85e 2b04 	ldr.w	r2, [lr], #4
 801baba:	f8d9 1000 	ldr.w	r1, [r9]
 801babe:	fa1f fb82 	uxth.w	fp, r2
 801bac2:	b289      	uxth	r1, r1
 801bac4:	fb0a 110b 	mla	r1, sl, fp, r1
 801bac8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801bacc:	f8d9 2000 	ldr.w	r2, [r9]
 801bad0:	4461      	add	r1, ip
 801bad2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801bad6:	fb0a c20b 	mla	r2, sl, fp, ip
 801bada:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801bade:	b289      	uxth	r1, r1
 801bae0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801bae4:	4577      	cmp	r7, lr
 801bae6:	f849 1b04 	str.w	r1, [r9], #4
 801baea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801baee:	d8e2      	bhi.n	801bab6 <__multiply+0xb2>
 801baf0:	9a01      	ldr	r2, [sp, #4]
 801baf2:	f845 c002 	str.w	ip, [r5, r2]
 801baf6:	9a03      	ldr	r2, [sp, #12]
 801baf8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801bafc:	3304      	adds	r3, #4
 801bafe:	f1b9 0f00 	cmp.w	r9, #0
 801bb02:	d020      	beq.n	801bb46 <__multiply+0x142>
 801bb04:	6829      	ldr	r1, [r5, #0]
 801bb06:	f104 0c14 	add.w	ip, r4, #20
 801bb0a:	46ae      	mov	lr, r5
 801bb0c:	f04f 0a00 	mov.w	sl, #0
 801bb10:	f8bc b000 	ldrh.w	fp, [ip]
 801bb14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801bb18:	fb09 220b 	mla	r2, r9, fp, r2
 801bb1c:	4492      	add	sl, r2
 801bb1e:	b289      	uxth	r1, r1
 801bb20:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801bb24:	f84e 1b04 	str.w	r1, [lr], #4
 801bb28:	f85c 2b04 	ldr.w	r2, [ip], #4
 801bb2c:	f8be 1000 	ldrh.w	r1, [lr]
 801bb30:	0c12      	lsrs	r2, r2, #16
 801bb32:	fb09 1102 	mla	r1, r9, r2, r1
 801bb36:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801bb3a:	4567      	cmp	r7, ip
 801bb3c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801bb40:	d8e6      	bhi.n	801bb10 <__multiply+0x10c>
 801bb42:	9a01      	ldr	r2, [sp, #4]
 801bb44:	50a9      	str	r1, [r5, r2]
 801bb46:	3504      	adds	r5, #4
 801bb48:	e79a      	b.n	801ba80 <__multiply+0x7c>
 801bb4a:	3e01      	subs	r6, #1
 801bb4c:	e79c      	b.n	801ba88 <__multiply+0x84>
 801bb4e:	bf00      	nop
 801bb50:	0801d485 	.word	0x0801d485
 801bb54:	0801d502 	.word	0x0801d502

0801bb58 <__pow5mult>:
 801bb58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bb5c:	4615      	mov	r5, r2
 801bb5e:	f012 0203 	ands.w	r2, r2, #3
 801bb62:	4606      	mov	r6, r0
 801bb64:	460f      	mov	r7, r1
 801bb66:	d007      	beq.n	801bb78 <__pow5mult+0x20>
 801bb68:	4c25      	ldr	r4, [pc, #148]	; (801bc00 <__pow5mult+0xa8>)
 801bb6a:	3a01      	subs	r2, #1
 801bb6c:	2300      	movs	r3, #0
 801bb6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801bb72:	f7ff fe9b 	bl	801b8ac <__multadd>
 801bb76:	4607      	mov	r7, r0
 801bb78:	10ad      	asrs	r5, r5, #2
 801bb7a:	d03d      	beq.n	801bbf8 <__pow5mult+0xa0>
 801bb7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801bb7e:	b97c      	cbnz	r4, 801bba0 <__pow5mult+0x48>
 801bb80:	2010      	movs	r0, #16
 801bb82:	f7fe f821 	bl	8019bc8 <malloc>
 801bb86:	4602      	mov	r2, r0
 801bb88:	6270      	str	r0, [r6, #36]	; 0x24
 801bb8a:	b928      	cbnz	r0, 801bb98 <__pow5mult+0x40>
 801bb8c:	4b1d      	ldr	r3, [pc, #116]	; (801bc04 <__pow5mult+0xac>)
 801bb8e:	481e      	ldr	r0, [pc, #120]	; (801bc08 <__pow5mult+0xb0>)
 801bb90:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801bb94:	f7fe fe60 	bl	801a858 <__assert_func>
 801bb98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801bb9c:	6004      	str	r4, [r0, #0]
 801bb9e:	60c4      	str	r4, [r0, #12]
 801bba0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801bba4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801bba8:	b94c      	cbnz	r4, 801bbbe <__pow5mult+0x66>
 801bbaa:	f240 2171 	movw	r1, #625	; 0x271
 801bbae:	4630      	mov	r0, r6
 801bbb0:	f7ff ff12 	bl	801b9d8 <__i2b>
 801bbb4:	2300      	movs	r3, #0
 801bbb6:	f8c8 0008 	str.w	r0, [r8, #8]
 801bbba:	4604      	mov	r4, r0
 801bbbc:	6003      	str	r3, [r0, #0]
 801bbbe:	f04f 0900 	mov.w	r9, #0
 801bbc2:	07eb      	lsls	r3, r5, #31
 801bbc4:	d50a      	bpl.n	801bbdc <__pow5mult+0x84>
 801bbc6:	4639      	mov	r1, r7
 801bbc8:	4622      	mov	r2, r4
 801bbca:	4630      	mov	r0, r6
 801bbcc:	f7ff ff1a 	bl	801ba04 <__multiply>
 801bbd0:	4639      	mov	r1, r7
 801bbd2:	4680      	mov	r8, r0
 801bbd4:	4630      	mov	r0, r6
 801bbd6:	f7ff fe47 	bl	801b868 <_Bfree>
 801bbda:	4647      	mov	r7, r8
 801bbdc:	106d      	asrs	r5, r5, #1
 801bbde:	d00b      	beq.n	801bbf8 <__pow5mult+0xa0>
 801bbe0:	6820      	ldr	r0, [r4, #0]
 801bbe2:	b938      	cbnz	r0, 801bbf4 <__pow5mult+0x9c>
 801bbe4:	4622      	mov	r2, r4
 801bbe6:	4621      	mov	r1, r4
 801bbe8:	4630      	mov	r0, r6
 801bbea:	f7ff ff0b 	bl	801ba04 <__multiply>
 801bbee:	6020      	str	r0, [r4, #0]
 801bbf0:	f8c0 9000 	str.w	r9, [r0]
 801bbf4:	4604      	mov	r4, r0
 801bbf6:	e7e4      	b.n	801bbc2 <__pow5mult+0x6a>
 801bbf8:	4638      	mov	r0, r7
 801bbfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bbfe:	bf00      	nop
 801bc00:	0801d650 	.word	0x0801d650
 801bc04:	0801d26c 	.word	0x0801d26c
 801bc08:	0801d502 	.word	0x0801d502

0801bc0c <__lshift>:
 801bc0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bc10:	460c      	mov	r4, r1
 801bc12:	6849      	ldr	r1, [r1, #4]
 801bc14:	6923      	ldr	r3, [r4, #16]
 801bc16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801bc1a:	68a3      	ldr	r3, [r4, #8]
 801bc1c:	4607      	mov	r7, r0
 801bc1e:	4691      	mov	r9, r2
 801bc20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801bc24:	f108 0601 	add.w	r6, r8, #1
 801bc28:	42b3      	cmp	r3, r6
 801bc2a:	db0b      	blt.n	801bc44 <__lshift+0x38>
 801bc2c:	4638      	mov	r0, r7
 801bc2e:	f7ff fddb 	bl	801b7e8 <_Balloc>
 801bc32:	4605      	mov	r5, r0
 801bc34:	b948      	cbnz	r0, 801bc4a <__lshift+0x3e>
 801bc36:	4602      	mov	r2, r0
 801bc38:	4b2a      	ldr	r3, [pc, #168]	; (801bce4 <__lshift+0xd8>)
 801bc3a:	482b      	ldr	r0, [pc, #172]	; (801bce8 <__lshift+0xdc>)
 801bc3c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801bc40:	f7fe fe0a 	bl	801a858 <__assert_func>
 801bc44:	3101      	adds	r1, #1
 801bc46:	005b      	lsls	r3, r3, #1
 801bc48:	e7ee      	b.n	801bc28 <__lshift+0x1c>
 801bc4a:	2300      	movs	r3, #0
 801bc4c:	f100 0114 	add.w	r1, r0, #20
 801bc50:	f100 0210 	add.w	r2, r0, #16
 801bc54:	4618      	mov	r0, r3
 801bc56:	4553      	cmp	r3, sl
 801bc58:	db37      	blt.n	801bcca <__lshift+0xbe>
 801bc5a:	6920      	ldr	r0, [r4, #16]
 801bc5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801bc60:	f104 0314 	add.w	r3, r4, #20
 801bc64:	f019 091f 	ands.w	r9, r9, #31
 801bc68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801bc6c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801bc70:	d02f      	beq.n	801bcd2 <__lshift+0xc6>
 801bc72:	f1c9 0e20 	rsb	lr, r9, #32
 801bc76:	468a      	mov	sl, r1
 801bc78:	f04f 0c00 	mov.w	ip, #0
 801bc7c:	681a      	ldr	r2, [r3, #0]
 801bc7e:	fa02 f209 	lsl.w	r2, r2, r9
 801bc82:	ea42 020c 	orr.w	r2, r2, ip
 801bc86:	f84a 2b04 	str.w	r2, [sl], #4
 801bc8a:	f853 2b04 	ldr.w	r2, [r3], #4
 801bc8e:	4298      	cmp	r0, r3
 801bc90:	fa22 fc0e 	lsr.w	ip, r2, lr
 801bc94:	d8f2      	bhi.n	801bc7c <__lshift+0x70>
 801bc96:	1b03      	subs	r3, r0, r4
 801bc98:	3b15      	subs	r3, #21
 801bc9a:	f023 0303 	bic.w	r3, r3, #3
 801bc9e:	3304      	adds	r3, #4
 801bca0:	f104 0215 	add.w	r2, r4, #21
 801bca4:	4290      	cmp	r0, r2
 801bca6:	bf38      	it	cc
 801bca8:	2304      	movcc	r3, #4
 801bcaa:	f841 c003 	str.w	ip, [r1, r3]
 801bcae:	f1bc 0f00 	cmp.w	ip, #0
 801bcb2:	d001      	beq.n	801bcb8 <__lshift+0xac>
 801bcb4:	f108 0602 	add.w	r6, r8, #2
 801bcb8:	3e01      	subs	r6, #1
 801bcba:	4638      	mov	r0, r7
 801bcbc:	612e      	str	r6, [r5, #16]
 801bcbe:	4621      	mov	r1, r4
 801bcc0:	f7ff fdd2 	bl	801b868 <_Bfree>
 801bcc4:	4628      	mov	r0, r5
 801bcc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bcca:	f842 0f04 	str.w	r0, [r2, #4]!
 801bcce:	3301      	adds	r3, #1
 801bcd0:	e7c1      	b.n	801bc56 <__lshift+0x4a>
 801bcd2:	3904      	subs	r1, #4
 801bcd4:	f853 2b04 	ldr.w	r2, [r3], #4
 801bcd8:	f841 2f04 	str.w	r2, [r1, #4]!
 801bcdc:	4298      	cmp	r0, r3
 801bcde:	d8f9      	bhi.n	801bcd4 <__lshift+0xc8>
 801bce0:	e7ea      	b.n	801bcb8 <__lshift+0xac>
 801bce2:	bf00      	nop
 801bce4:	0801d485 	.word	0x0801d485
 801bce8:	0801d502 	.word	0x0801d502

0801bcec <__mcmp>:
 801bcec:	b530      	push	{r4, r5, lr}
 801bcee:	6902      	ldr	r2, [r0, #16]
 801bcf0:	690c      	ldr	r4, [r1, #16]
 801bcf2:	1b12      	subs	r2, r2, r4
 801bcf4:	d10e      	bne.n	801bd14 <__mcmp+0x28>
 801bcf6:	f100 0314 	add.w	r3, r0, #20
 801bcfa:	3114      	adds	r1, #20
 801bcfc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801bd00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801bd04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801bd08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801bd0c:	42a5      	cmp	r5, r4
 801bd0e:	d003      	beq.n	801bd18 <__mcmp+0x2c>
 801bd10:	d305      	bcc.n	801bd1e <__mcmp+0x32>
 801bd12:	2201      	movs	r2, #1
 801bd14:	4610      	mov	r0, r2
 801bd16:	bd30      	pop	{r4, r5, pc}
 801bd18:	4283      	cmp	r3, r0
 801bd1a:	d3f3      	bcc.n	801bd04 <__mcmp+0x18>
 801bd1c:	e7fa      	b.n	801bd14 <__mcmp+0x28>
 801bd1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801bd22:	e7f7      	b.n	801bd14 <__mcmp+0x28>

0801bd24 <__mdiff>:
 801bd24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd28:	460c      	mov	r4, r1
 801bd2a:	4606      	mov	r6, r0
 801bd2c:	4611      	mov	r1, r2
 801bd2e:	4620      	mov	r0, r4
 801bd30:	4690      	mov	r8, r2
 801bd32:	f7ff ffdb 	bl	801bcec <__mcmp>
 801bd36:	1e05      	subs	r5, r0, #0
 801bd38:	d110      	bne.n	801bd5c <__mdiff+0x38>
 801bd3a:	4629      	mov	r1, r5
 801bd3c:	4630      	mov	r0, r6
 801bd3e:	f7ff fd53 	bl	801b7e8 <_Balloc>
 801bd42:	b930      	cbnz	r0, 801bd52 <__mdiff+0x2e>
 801bd44:	4b3a      	ldr	r3, [pc, #232]	; (801be30 <__mdiff+0x10c>)
 801bd46:	4602      	mov	r2, r0
 801bd48:	f240 2132 	movw	r1, #562	; 0x232
 801bd4c:	4839      	ldr	r0, [pc, #228]	; (801be34 <__mdiff+0x110>)
 801bd4e:	f7fe fd83 	bl	801a858 <__assert_func>
 801bd52:	2301      	movs	r3, #1
 801bd54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801bd58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd5c:	bfa4      	itt	ge
 801bd5e:	4643      	movge	r3, r8
 801bd60:	46a0      	movge	r8, r4
 801bd62:	4630      	mov	r0, r6
 801bd64:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801bd68:	bfa6      	itte	ge
 801bd6a:	461c      	movge	r4, r3
 801bd6c:	2500      	movge	r5, #0
 801bd6e:	2501      	movlt	r5, #1
 801bd70:	f7ff fd3a 	bl	801b7e8 <_Balloc>
 801bd74:	b920      	cbnz	r0, 801bd80 <__mdiff+0x5c>
 801bd76:	4b2e      	ldr	r3, [pc, #184]	; (801be30 <__mdiff+0x10c>)
 801bd78:	4602      	mov	r2, r0
 801bd7a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801bd7e:	e7e5      	b.n	801bd4c <__mdiff+0x28>
 801bd80:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801bd84:	6926      	ldr	r6, [r4, #16]
 801bd86:	60c5      	str	r5, [r0, #12]
 801bd88:	f104 0914 	add.w	r9, r4, #20
 801bd8c:	f108 0514 	add.w	r5, r8, #20
 801bd90:	f100 0e14 	add.w	lr, r0, #20
 801bd94:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801bd98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801bd9c:	f108 0210 	add.w	r2, r8, #16
 801bda0:	46f2      	mov	sl, lr
 801bda2:	2100      	movs	r1, #0
 801bda4:	f859 3b04 	ldr.w	r3, [r9], #4
 801bda8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801bdac:	fa1f f883 	uxth.w	r8, r3
 801bdb0:	fa11 f18b 	uxtah	r1, r1, fp
 801bdb4:	0c1b      	lsrs	r3, r3, #16
 801bdb6:	eba1 0808 	sub.w	r8, r1, r8
 801bdba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801bdbe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801bdc2:	fa1f f888 	uxth.w	r8, r8
 801bdc6:	1419      	asrs	r1, r3, #16
 801bdc8:	454e      	cmp	r6, r9
 801bdca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801bdce:	f84a 3b04 	str.w	r3, [sl], #4
 801bdd2:	d8e7      	bhi.n	801bda4 <__mdiff+0x80>
 801bdd4:	1b33      	subs	r3, r6, r4
 801bdd6:	3b15      	subs	r3, #21
 801bdd8:	f023 0303 	bic.w	r3, r3, #3
 801bddc:	3304      	adds	r3, #4
 801bdde:	3415      	adds	r4, #21
 801bde0:	42a6      	cmp	r6, r4
 801bde2:	bf38      	it	cc
 801bde4:	2304      	movcc	r3, #4
 801bde6:	441d      	add	r5, r3
 801bde8:	4473      	add	r3, lr
 801bdea:	469e      	mov	lr, r3
 801bdec:	462e      	mov	r6, r5
 801bdee:	4566      	cmp	r6, ip
 801bdf0:	d30e      	bcc.n	801be10 <__mdiff+0xec>
 801bdf2:	f10c 0203 	add.w	r2, ip, #3
 801bdf6:	1b52      	subs	r2, r2, r5
 801bdf8:	f022 0203 	bic.w	r2, r2, #3
 801bdfc:	3d03      	subs	r5, #3
 801bdfe:	45ac      	cmp	ip, r5
 801be00:	bf38      	it	cc
 801be02:	2200      	movcc	r2, #0
 801be04:	441a      	add	r2, r3
 801be06:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801be0a:	b17b      	cbz	r3, 801be2c <__mdiff+0x108>
 801be0c:	6107      	str	r7, [r0, #16]
 801be0e:	e7a3      	b.n	801bd58 <__mdiff+0x34>
 801be10:	f856 8b04 	ldr.w	r8, [r6], #4
 801be14:	fa11 f288 	uxtah	r2, r1, r8
 801be18:	1414      	asrs	r4, r2, #16
 801be1a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801be1e:	b292      	uxth	r2, r2
 801be20:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801be24:	f84e 2b04 	str.w	r2, [lr], #4
 801be28:	1421      	asrs	r1, r4, #16
 801be2a:	e7e0      	b.n	801bdee <__mdiff+0xca>
 801be2c:	3f01      	subs	r7, #1
 801be2e:	e7ea      	b.n	801be06 <__mdiff+0xe2>
 801be30:	0801d485 	.word	0x0801d485
 801be34:	0801d502 	.word	0x0801d502

0801be38 <__d2b>:
 801be38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801be3c:	4689      	mov	r9, r1
 801be3e:	2101      	movs	r1, #1
 801be40:	ec57 6b10 	vmov	r6, r7, d0
 801be44:	4690      	mov	r8, r2
 801be46:	f7ff fccf 	bl	801b7e8 <_Balloc>
 801be4a:	4604      	mov	r4, r0
 801be4c:	b930      	cbnz	r0, 801be5c <__d2b+0x24>
 801be4e:	4602      	mov	r2, r0
 801be50:	4b25      	ldr	r3, [pc, #148]	; (801bee8 <__d2b+0xb0>)
 801be52:	4826      	ldr	r0, [pc, #152]	; (801beec <__d2b+0xb4>)
 801be54:	f240 310a 	movw	r1, #778	; 0x30a
 801be58:	f7fe fcfe 	bl	801a858 <__assert_func>
 801be5c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801be60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801be64:	bb35      	cbnz	r5, 801beb4 <__d2b+0x7c>
 801be66:	2e00      	cmp	r6, #0
 801be68:	9301      	str	r3, [sp, #4]
 801be6a:	d028      	beq.n	801bebe <__d2b+0x86>
 801be6c:	4668      	mov	r0, sp
 801be6e:	9600      	str	r6, [sp, #0]
 801be70:	f7ff fd82 	bl	801b978 <__lo0bits>
 801be74:	9900      	ldr	r1, [sp, #0]
 801be76:	b300      	cbz	r0, 801beba <__d2b+0x82>
 801be78:	9a01      	ldr	r2, [sp, #4]
 801be7a:	f1c0 0320 	rsb	r3, r0, #32
 801be7e:	fa02 f303 	lsl.w	r3, r2, r3
 801be82:	430b      	orrs	r3, r1
 801be84:	40c2      	lsrs	r2, r0
 801be86:	6163      	str	r3, [r4, #20]
 801be88:	9201      	str	r2, [sp, #4]
 801be8a:	9b01      	ldr	r3, [sp, #4]
 801be8c:	61a3      	str	r3, [r4, #24]
 801be8e:	2b00      	cmp	r3, #0
 801be90:	bf14      	ite	ne
 801be92:	2202      	movne	r2, #2
 801be94:	2201      	moveq	r2, #1
 801be96:	6122      	str	r2, [r4, #16]
 801be98:	b1d5      	cbz	r5, 801bed0 <__d2b+0x98>
 801be9a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801be9e:	4405      	add	r5, r0
 801bea0:	f8c9 5000 	str.w	r5, [r9]
 801bea4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801bea8:	f8c8 0000 	str.w	r0, [r8]
 801beac:	4620      	mov	r0, r4
 801beae:	b003      	add	sp, #12
 801beb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801beb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801beb8:	e7d5      	b.n	801be66 <__d2b+0x2e>
 801beba:	6161      	str	r1, [r4, #20]
 801bebc:	e7e5      	b.n	801be8a <__d2b+0x52>
 801bebe:	a801      	add	r0, sp, #4
 801bec0:	f7ff fd5a 	bl	801b978 <__lo0bits>
 801bec4:	9b01      	ldr	r3, [sp, #4]
 801bec6:	6163      	str	r3, [r4, #20]
 801bec8:	2201      	movs	r2, #1
 801beca:	6122      	str	r2, [r4, #16]
 801becc:	3020      	adds	r0, #32
 801bece:	e7e3      	b.n	801be98 <__d2b+0x60>
 801bed0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801bed4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801bed8:	f8c9 0000 	str.w	r0, [r9]
 801bedc:	6918      	ldr	r0, [r3, #16]
 801bede:	f7ff fd2b 	bl	801b938 <__hi0bits>
 801bee2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801bee6:	e7df      	b.n	801bea8 <__d2b+0x70>
 801bee8:	0801d485 	.word	0x0801d485
 801beec:	0801d502 	.word	0x0801d502

0801bef0 <_calloc_r>:
 801bef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bef2:	fba1 2402 	umull	r2, r4, r1, r2
 801bef6:	b94c      	cbnz	r4, 801bf0c <_calloc_r+0x1c>
 801bef8:	4611      	mov	r1, r2
 801befa:	9201      	str	r2, [sp, #4]
 801befc:	f7fd fef6 	bl	8019cec <_malloc_r>
 801bf00:	9a01      	ldr	r2, [sp, #4]
 801bf02:	4605      	mov	r5, r0
 801bf04:	b930      	cbnz	r0, 801bf14 <_calloc_r+0x24>
 801bf06:	4628      	mov	r0, r5
 801bf08:	b003      	add	sp, #12
 801bf0a:	bd30      	pop	{r4, r5, pc}
 801bf0c:	220c      	movs	r2, #12
 801bf0e:	6002      	str	r2, [r0, #0]
 801bf10:	2500      	movs	r5, #0
 801bf12:	e7f8      	b.n	801bf06 <_calloc_r+0x16>
 801bf14:	4621      	mov	r1, r4
 801bf16:	f7fd fe75 	bl	8019c04 <memset>
 801bf1a:	e7f4      	b.n	801bf06 <_calloc_r+0x16>

0801bf1c <__ssputs_r>:
 801bf1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bf20:	688e      	ldr	r6, [r1, #8]
 801bf22:	429e      	cmp	r6, r3
 801bf24:	4682      	mov	sl, r0
 801bf26:	460c      	mov	r4, r1
 801bf28:	4690      	mov	r8, r2
 801bf2a:	461f      	mov	r7, r3
 801bf2c:	d838      	bhi.n	801bfa0 <__ssputs_r+0x84>
 801bf2e:	898a      	ldrh	r2, [r1, #12]
 801bf30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801bf34:	d032      	beq.n	801bf9c <__ssputs_r+0x80>
 801bf36:	6825      	ldr	r5, [r4, #0]
 801bf38:	6909      	ldr	r1, [r1, #16]
 801bf3a:	eba5 0901 	sub.w	r9, r5, r1
 801bf3e:	6965      	ldr	r5, [r4, #20]
 801bf40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bf44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801bf48:	3301      	adds	r3, #1
 801bf4a:	444b      	add	r3, r9
 801bf4c:	106d      	asrs	r5, r5, #1
 801bf4e:	429d      	cmp	r5, r3
 801bf50:	bf38      	it	cc
 801bf52:	461d      	movcc	r5, r3
 801bf54:	0553      	lsls	r3, r2, #21
 801bf56:	d531      	bpl.n	801bfbc <__ssputs_r+0xa0>
 801bf58:	4629      	mov	r1, r5
 801bf5a:	f7fd fec7 	bl	8019cec <_malloc_r>
 801bf5e:	4606      	mov	r6, r0
 801bf60:	b950      	cbnz	r0, 801bf78 <__ssputs_r+0x5c>
 801bf62:	230c      	movs	r3, #12
 801bf64:	f8ca 3000 	str.w	r3, [sl]
 801bf68:	89a3      	ldrh	r3, [r4, #12]
 801bf6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bf6e:	81a3      	strh	r3, [r4, #12]
 801bf70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bf74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf78:	6921      	ldr	r1, [r4, #16]
 801bf7a:	464a      	mov	r2, r9
 801bf7c:	f7fd fe34 	bl	8019be8 <memcpy>
 801bf80:	89a3      	ldrh	r3, [r4, #12]
 801bf82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801bf86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bf8a:	81a3      	strh	r3, [r4, #12]
 801bf8c:	6126      	str	r6, [r4, #16]
 801bf8e:	6165      	str	r5, [r4, #20]
 801bf90:	444e      	add	r6, r9
 801bf92:	eba5 0509 	sub.w	r5, r5, r9
 801bf96:	6026      	str	r6, [r4, #0]
 801bf98:	60a5      	str	r5, [r4, #8]
 801bf9a:	463e      	mov	r6, r7
 801bf9c:	42be      	cmp	r6, r7
 801bf9e:	d900      	bls.n	801bfa2 <__ssputs_r+0x86>
 801bfa0:	463e      	mov	r6, r7
 801bfa2:	6820      	ldr	r0, [r4, #0]
 801bfa4:	4632      	mov	r2, r6
 801bfa6:	4641      	mov	r1, r8
 801bfa8:	f000 fce4 	bl	801c974 <memmove>
 801bfac:	68a3      	ldr	r3, [r4, #8]
 801bfae:	1b9b      	subs	r3, r3, r6
 801bfb0:	60a3      	str	r3, [r4, #8]
 801bfb2:	6823      	ldr	r3, [r4, #0]
 801bfb4:	4433      	add	r3, r6
 801bfb6:	6023      	str	r3, [r4, #0]
 801bfb8:	2000      	movs	r0, #0
 801bfba:	e7db      	b.n	801bf74 <__ssputs_r+0x58>
 801bfbc:	462a      	mov	r2, r5
 801bfbe:	f000 fcf3 	bl	801c9a8 <_realloc_r>
 801bfc2:	4606      	mov	r6, r0
 801bfc4:	2800      	cmp	r0, #0
 801bfc6:	d1e1      	bne.n	801bf8c <__ssputs_r+0x70>
 801bfc8:	6921      	ldr	r1, [r4, #16]
 801bfca:	4650      	mov	r0, sl
 801bfcc:	f7fd fe22 	bl	8019c14 <_free_r>
 801bfd0:	e7c7      	b.n	801bf62 <__ssputs_r+0x46>
	...

0801bfd4 <_svfiprintf_r>:
 801bfd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfd8:	4698      	mov	r8, r3
 801bfda:	898b      	ldrh	r3, [r1, #12]
 801bfdc:	061b      	lsls	r3, r3, #24
 801bfde:	b09d      	sub	sp, #116	; 0x74
 801bfe0:	4607      	mov	r7, r0
 801bfe2:	460d      	mov	r5, r1
 801bfe4:	4614      	mov	r4, r2
 801bfe6:	d50e      	bpl.n	801c006 <_svfiprintf_r+0x32>
 801bfe8:	690b      	ldr	r3, [r1, #16]
 801bfea:	b963      	cbnz	r3, 801c006 <_svfiprintf_r+0x32>
 801bfec:	2140      	movs	r1, #64	; 0x40
 801bfee:	f7fd fe7d 	bl	8019cec <_malloc_r>
 801bff2:	6028      	str	r0, [r5, #0]
 801bff4:	6128      	str	r0, [r5, #16]
 801bff6:	b920      	cbnz	r0, 801c002 <_svfiprintf_r+0x2e>
 801bff8:	230c      	movs	r3, #12
 801bffa:	603b      	str	r3, [r7, #0]
 801bffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c000:	e0d1      	b.n	801c1a6 <_svfiprintf_r+0x1d2>
 801c002:	2340      	movs	r3, #64	; 0x40
 801c004:	616b      	str	r3, [r5, #20]
 801c006:	2300      	movs	r3, #0
 801c008:	9309      	str	r3, [sp, #36]	; 0x24
 801c00a:	2320      	movs	r3, #32
 801c00c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c010:	f8cd 800c 	str.w	r8, [sp, #12]
 801c014:	2330      	movs	r3, #48	; 0x30
 801c016:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801c1c0 <_svfiprintf_r+0x1ec>
 801c01a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c01e:	f04f 0901 	mov.w	r9, #1
 801c022:	4623      	mov	r3, r4
 801c024:	469a      	mov	sl, r3
 801c026:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c02a:	b10a      	cbz	r2, 801c030 <_svfiprintf_r+0x5c>
 801c02c:	2a25      	cmp	r2, #37	; 0x25
 801c02e:	d1f9      	bne.n	801c024 <_svfiprintf_r+0x50>
 801c030:	ebba 0b04 	subs.w	fp, sl, r4
 801c034:	d00b      	beq.n	801c04e <_svfiprintf_r+0x7a>
 801c036:	465b      	mov	r3, fp
 801c038:	4622      	mov	r2, r4
 801c03a:	4629      	mov	r1, r5
 801c03c:	4638      	mov	r0, r7
 801c03e:	f7ff ff6d 	bl	801bf1c <__ssputs_r>
 801c042:	3001      	adds	r0, #1
 801c044:	f000 80aa 	beq.w	801c19c <_svfiprintf_r+0x1c8>
 801c048:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c04a:	445a      	add	r2, fp
 801c04c:	9209      	str	r2, [sp, #36]	; 0x24
 801c04e:	f89a 3000 	ldrb.w	r3, [sl]
 801c052:	2b00      	cmp	r3, #0
 801c054:	f000 80a2 	beq.w	801c19c <_svfiprintf_r+0x1c8>
 801c058:	2300      	movs	r3, #0
 801c05a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c05e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c062:	f10a 0a01 	add.w	sl, sl, #1
 801c066:	9304      	str	r3, [sp, #16]
 801c068:	9307      	str	r3, [sp, #28]
 801c06a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c06e:	931a      	str	r3, [sp, #104]	; 0x68
 801c070:	4654      	mov	r4, sl
 801c072:	2205      	movs	r2, #5
 801c074:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c078:	4851      	ldr	r0, [pc, #324]	; (801c1c0 <_svfiprintf_r+0x1ec>)
 801c07a:	f7e4 f8c9 	bl	8000210 <memchr>
 801c07e:	9a04      	ldr	r2, [sp, #16]
 801c080:	b9d8      	cbnz	r0, 801c0ba <_svfiprintf_r+0xe6>
 801c082:	06d0      	lsls	r0, r2, #27
 801c084:	bf44      	itt	mi
 801c086:	2320      	movmi	r3, #32
 801c088:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c08c:	0711      	lsls	r1, r2, #28
 801c08e:	bf44      	itt	mi
 801c090:	232b      	movmi	r3, #43	; 0x2b
 801c092:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c096:	f89a 3000 	ldrb.w	r3, [sl]
 801c09a:	2b2a      	cmp	r3, #42	; 0x2a
 801c09c:	d015      	beq.n	801c0ca <_svfiprintf_r+0xf6>
 801c09e:	9a07      	ldr	r2, [sp, #28]
 801c0a0:	4654      	mov	r4, sl
 801c0a2:	2000      	movs	r0, #0
 801c0a4:	f04f 0c0a 	mov.w	ip, #10
 801c0a8:	4621      	mov	r1, r4
 801c0aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c0ae:	3b30      	subs	r3, #48	; 0x30
 801c0b0:	2b09      	cmp	r3, #9
 801c0b2:	d94e      	bls.n	801c152 <_svfiprintf_r+0x17e>
 801c0b4:	b1b0      	cbz	r0, 801c0e4 <_svfiprintf_r+0x110>
 801c0b6:	9207      	str	r2, [sp, #28]
 801c0b8:	e014      	b.n	801c0e4 <_svfiprintf_r+0x110>
 801c0ba:	eba0 0308 	sub.w	r3, r0, r8
 801c0be:	fa09 f303 	lsl.w	r3, r9, r3
 801c0c2:	4313      	orrs	r3, r2
 801c0c4:	9304      	str	r3, [sp, #16]
 801c0c6:	46a2      	mov	sl, r4
 801c0c8:	e7d2      	b.n	801c070 <_svfiprintf_r+0x9c>
 801c0ca:	9b03      	ldr	r3, [sp, #12]
 801c0cc:	1d19      	adds	r1, r3, #4
 801c0ce:	681b      	ldr	r3, [r3, #0]
 801c0d0:	9103      	str	r1, [sp, #12]
 801c0d2:	2b00      	cmp	r3, #0
 801c0d4:	bfbb      	ittet	lt
 801c0d6:	425b      	neglt	r3, r3
 801c0d8:	f042 0202 	orrlt.w	r2, r2, #2
 801c0dc:	9307      	strge	r3, [sp, #28]
 801c0de:	9307      	strlt	r3, [sp, #28]
 801c0e0:	bfb8      	it	lt
 801c0e2:	9204      	strlt	r2, [sp, #16]
 801c0e4:	7823      	ldrb	r3, [r4, #0]
 801c0e6:	2b2e      	cmp	r3, #46	; 0x2e
 801c0e8:	d10c      	bne.n	801c104 <_svfiprintf_r+0x130>
 801c0ea:	7863      	ldrb	r3, [r4, #1]
 801c0ec:	2b2a      	cmp	r3, #42	; 0x2a
 801c0ee:	d135      	bne.n	801c15c <_svfiprintf_r+0x188>
 801c0f0:	9b03      	ldr	r3, [sp, #12]
 801c0f2:	1d1a      	adds	r2, r3, #4
 801c0f4:	681b      	ldr	r3, [r3, #0]
 801c0f6:	9203      	str	r2, [sp, #12]
 801c0f8:	2b00      	cmp	r3, #0
 801c0fa:	bfb8      	it	lt
 801c0fc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801c100:	3402      	adds	r4, #2
 801c102:	9305      	str	r3, [sp, #20]
 801c104:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801c1d0 <_svfiprintf_r+0x1fc>
 801c108:	7821      	ldrb	r1, [r4, #0]
 801c10a:	2203      	movs	r2, #3
 801c10c:	4650      	mov	r0, sl
 801c10e:	f7e4 f87f 	bl	8000210 <memchr>
 801c112:	b140      	cbz	r0, 801c126 <_svfiprintf_r+0x152>
 801c114:	2340      	movs	r3, #64	; 0x40
 801c116:	eba0 000a 	sub.w	r0, r0, sl
 801c11a:	fa03 f000 	lsl.w	r0, r3, r0
 801c11e:	9b04      	ldr	r3, [sp, #16]
 801c120:	4303      	orrs	r3, r0
 801c122:	3401      	adds	r4, #1
 801c124:	9304      	str	r3, [sp, #16]
 801c126:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c12a:	4826      	ldr	r0, [pc, #152]	; (801c1c4 <_svfiprintf_r+0x1f0>)
 801c12c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c130:	2206      	movs	r2, #6
 801c132:	f7e4 f86d 	bl	8000210 <memchr>
 801c136:	2800      	cmp	r0, #0
 801c138:	d038      	beq.n	801c1ac <_svfiprintf_r+0x1d8>
 801c13a:	4b23      	ldr	r3, [pc, #140]	; (801c1c8 <_svfiprintf_r+0x1f4>)
 801c13c:	bb1b      	cbnz	r3, 801c186 <_svfiprintf_r+0x1b2>
 801c13e:	9b03      	ldr	r3, [sp, #12]
 801c140:	3307      	adds	r3, #7
 801c142:	f023 0307 	bic.w	r3, r3, #7
 801c146:	3308      	adds	r3, #8
 801c148:	9303      	str	r3, [sp, #12]
 801c14a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c14c:	4433      	add	r3, r6
 801c14e:	9309      	str	r3, [sp, #36]	; 0x24
 801c150:	e767      	b.n	801c022 <_svfiprintf_r+0x4e>
 801c152:	fb0c 3202 	mla	r2, ip, r2, r3
 801c156:	460c      	mov	r4, r1
 801c158:	2001      	movs	r0, #1
 801c15a:	e7a5      	b.n	801c0a8 <_svfiprintf_r+0xd4>
 801c15c:	2300      	movs	r3, #0
 801c15e:	3401      	adds	r4, #1
 801c160:	9305      	str	r3, [sp, #20]
 801c162:	4619      	mov	r1, r3
 801c164:	f04f 0c0a 	mov.w	ip, #10
 801c168:	4620      	mov	r0, r4
 801c16a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c16e:	3a30      	subs	r2, #48	; 0x30
 801c170:	2a09      	cmp	r2, #9
 801c172:	d903      	bls.n	801c17c <_svfiprintf_r+0x1a8>
 801c174:	2b00      	cmp	r3, #0
 801c176:	d0c5      	beq.n	801c104 <_svfiprintf_r+0x130>
 801c178:	9105      	str	r1, [sp, #20]
 801c17a:	e7c3      	b.n	801c104 <_svfiprintf_r+0x130>
 801c17c:	fb0c 2101 	mla	r1, ip, r1, r2
 801c180:	4604      	mov	r4, r0
 801c182:	2301      	movs	r3, #1
 801c184:	e7f0      	b.n	801c168 <_svfiprintf_r+0x194>
 801c186:	ab03      	add	r3, sp, #12
 801c188:	9300      	str	r3, [sp, #0]
 801c18a:	462a      	mov	r2, r5
 801c18c:	4b0f      	ldr	r3, [pc, #60]	; (801c1cc <_svfiprintf_r+0x1f8>)
 801c18e:	a904      	add	r1, sp, #16
 801c190:	4638      	mov	r0, r7
 801c192:	f7fd febf 	bl	8019f14 <_printf_float>
 801c196:	1c42      	adds	r2, r0, #1
 801c198:	4606      	mov	r6, r0
 801c19a:	d1d6      	bne.n	801c14a <_svfiprintf_r+0x176>
 801c19c:	89ab      	ldrh	r3, [r5, #12]
 801c19e:	065b      	lsls	r3, r3, #25
 801c1a0:	f53f af2c 	bmi.w	801bffc <_svfiprintf_r+0x28>
 801c1a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c1a6:	b01d      	add	sp, #116	; 0x74
 801c1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1ac:	ab03      	add	r3, sp, #12
 801c1ae:	9300      	str	r3, [sp, #0]
 801c1b0:	462a      	mov	r2, r5
 801c1b2:	4b06      	ldr	r3, [pc, #24]	; (801c1cc <_svfiprintf_r+0x1f8>)
 801c1b4:	a904      	add	r1, sp, #16
 801c1b6:	4638      	mov	r0, r7
 801c1b8:	f7fe f950 	bl	801a45c <_printf_i>
 801c1bc:	e7eb      	b.n	801c196 <_svfiprintf_r+0x1c2>
 801c1be:	bf00      	nop
 801c1c0:	0801d65c 	.word	0x0801d65c
 801c1c4:	0801d666 	.word	0x0801d666
 801c1c8:	08019f15 	.word	0x08019f15
 801c1cc:	0801bf1d 	.word	0x0801bf1d
 801c1d0:	0801d662 	.word	0x0801d662

0801c1d4 <__sfputc_r>:
 801c1d4:	6893      	ldr	r3, [r2, #8]
 801c1d6:	3b01      	subs	r3, #1
 801c1d8:	2b00      	cmp	r3, #0
 801c1da:	b410      	push	{r4}
 801c1dc:	6093      	str	r3, [r2, #8]
 801c1de:	da08      	bge.n	801c1f2 <__sfputc_r+0x1e>
 801c1e0:	6994      	ldr	r4, [r2, #24]
 801c1e2:	42a3      	cmp	r3, r4
 801c1e4:	db01      	blt.n	801c1ea <__sfputc_r+0x16>
 801c1e6:	290a      	cmp	r1, #10
 801c1e8:	d103      	bne.n	801c1f2 <__sfputc_r+0x1e>
 801c1ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c1ee:	f000 b98f 	b.w	801c510 <__swbuf_r>
 801c1f2:	6813      	ldr	r3, [r2, #0]
 801c1f4:	1c58      	adds	r0, r3, #1
 801c1f6:	6010      	str	r0, [r2, #0]
 801c1f8:	7019      	strb	r1, [r3, #0]
 801c1fa:	4608      	mov	r0, r1
 801c1fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c200:	4770      	bx	lr

0801c202 <__sfputs_r>:
 801c202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c204:	4606      	mov	r6, r0
 801c206:	460f      	mov	r7, r1
 801c208:	4614      	mov	r4, r2
 801c20a:	18d5      	adds	r5, r2, r3
 801c20c:	42ac      	cmp	r4, r5
 801c20e:	d101      	bne.n	801c214 <__sfputs_r+0x12>
 801c210:	2000      	movs	r0, #0
 801c212:	e007      	b.n	801c224 <__sfputs_r+0x22>
 801c214:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c218:	463a      	mov	r2, r7
 801c21a:	4630      	mov	r0, r6
 801c21c:	f7ff ffda 	bl	801c1d4 <__sfputc_r>
 801c220:	1c43      	adds	r3, r0, #1
 801c222:	d1f3      	bne.n	801c20c <__sfputs_r+0xa>
 801c224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c228 <_vfiprintf_r>:
 801c228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c22c:	460d      	mov	r5, r1
 801c22e:	b09d      	sub	sp, #116	; 0x74
 801c230:	4614      	mov	r4, r2
 801c232:	4698      	mov	r8, r3
 801c234:	4606      	mov	r6, r0
 801c236:	b118      	cbz	r0, 801c240 <_vfiprintf_r+0x18>
 801c238:	6983      	ldr	r3, [r0, #24]
 801c23a:	b90b      	cbnz	r3, 801c240 <_vfiprintf_r+0x18>
 801c23c:	f7ff f9fe 	bl	801b63c <__sinit>
 801c240:	4b89      	ldr	r3, [pc, #548]	; (801c468 <_vfiprintf_r+0x240>)
 801c242:	429d      	cmp	r5, r3
 801c244:	d11b      	bne.n	801c27e <_vfiprintf_r+0x56>
 801c246:	6875      	ldr	r5, [r6, #4]
 801c248:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c24a:	07d9      	lsls	r1, r3, #31
 801c24c:	d405      	bmi.n	801c25a <_vfiprintf_r+0x32>
 801c24e:	89ab      	ldrh	r3, [r5, #12]
 801c250:	059a      	lsls	r2, r3, #22
 801c252:	d402      	bmi.n	801c25a <_vfiprintf_r+0x32>
 801c254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c256:	f7ff faa6 	bl	801b7a6 <__retarget_lock_acquire_recursive>
 801c25a:	89ab      	ldrh	r3, [r5, #12]
 801c25c:	071b      	lsls	r3, r3, #28
 801c25e:	d501      	bpl.n	801c264 <_vfiprintf_r+0x3c>
 801c260:	692b      	ldr	r3, [r5, #16]
 801c262:	b9eb      	cbnz	r3, 801c2a0 <_vfiprintf_r+0x78>
 801c264:	4629      	mov	r1, r5
 801c266:	4630      	mov	r0, r6
 801c268:	f000 f9c4 	bl	801c5f4 <__swsetup_r>
 801c26c:	b1c0      	cbz	r0, 801c2a0 <_vfiprintf_r+0x78>
 801c26e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c270:	07dc      	lsls	r4, r3, #31
 801c272:	d50e      	bpl.n	801c292 <_vfiprintf_r+0x6a>
 801c274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c278:	b01d      	add	sp, #116	; 0x74
 801c27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c27e:	4b7b      	ldr	r3, [pc, #492]	; (801c46c <_vfiprintf_r+0x244>)
 801c280:	429d      	cmp	r5, r3
 801c282:	d101      	bne.n	801c288 <_vfiprintf_r+0x60>
 801c284:	68b5      	ldr	r5, [r6, #8]
 801c286:	e7df      	b.n	801c248 <_vfiprintf_r+0x20>
 801c288:	4b79      	ldr	r3, [pc, #484]	; (801c470 <_vfiprintf_r+0x248>)
 801c28a:	429d      	cmp	r5, r3
 801c28c:	bf08      	it	eq
 801c28e:	68f5      	ldreq	r5, [r6, #12]
 801c290:	e7da      	b.n	801c248 <_vfiprintf_r+0x20>
 801c292:	89ab      	ldrh	r3, [r5, #12]
 801c294:	0598      	lsls	r0, r3, #22
 801c296:	d4ed      	bmi.n	801c274 <_vfiprintf_r+0x4c>
 801c298:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c29a:	f7ff fa85 	bl	801b7a8 <__retarget_lock_release_recursive>
 801c29e:	e7e9      	b.n	801c274 <_vfiprintf_r+0x4c>
 801c2a0:	2300      	movs	r3, #0
 801c2a2:	9309      	str	r3, [sp, #36]	; 0x24
 801c2a4:	2320      	movs	r3, #32
 801c2a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c2aa:	f8cd 800c 	str.w	r8, [sp, #12]
 801c2ae:	2330      	movs	r3, #48	; 0x30
 801c2b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801c474 <_vfiprintf_r+0x24c>
 801c2b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c2b8:	f04f 0901 	mov.w	r9, #1
 801c2bc:	4623      	mov	r3, r4
 801c2be:	469a      	mov	sl, r3
 801c2c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c2c4:	b10a      	cbz	r2, 801c2ca <_vfiprintf_r+0xa2>
 801c2c6:	2a25      	cmp	r2, #37	; 0x25
 801c2c8:	d1f9      	bne.n	801c2be <_vfiprintf_r+0x96>
 801c2ca:	ebba 0b04 	subs.w	fp, sl, r4
 801c2ce:	d00b      	beq.n	801c2e8 <_vfiprintf_r+0xc0>
 801c2d0:	465b      	mov	r3, fp
 801c2d2:	4622      	mov	r2, r4
 801c2d4:	4629      	mov	r1, r5
 801c2d6:	4630      	mov	r0, r6
 801c2d8:	f7ff ff93 	bl	801c202 <__sfputs_r>
 801c2dc:	3001      	adds	r0, #1
 801c2de:	f000 80aa 	beq.w	801c436 <_vfiprintf_r+0x20e>
 801c2e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c2e4:	445a      	add	r2, fp
 801c2e6:	9209      	str	r2, [sp, #36]	; 0x24
 801c2e8:	f89a 3000 	ldrb.w	r3, [sl]
 801c2ec:	2b00      	cmp	r3, #0
 801c2ee:	f000 80a2 	beq.w	801c436 <_vfiprintf_r+0x20e>
 801c2f2:	2300      	movs	r3, #0
 801c2f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c2f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c2fc:	f10a 0a01 	add.w	sl, sl, #1
 801c300:	9304      	str	r3, [sp, #16]
 801c302:	9307      	str	r3, [sp, #28]
 801c304:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c308:	931a      	str	r3, [sp, #104]	; 0x68
 801c30a:	4654      	mov	r4, sl
 801c30c:	2205      	movs	r2, #5
 801c30e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c312:	4858      	ldr	r0, [pc, #352]	; (801c474 <_vfiprintf_r+0x24c>)
 801c314:	f7e3 ff7c 	bl	8000210 <memchr>
 801c318:	9a04      	ldr	r2, [sp, #16]
 801c31a:	b9d8      	cbnz	r0, 801c354 <_vfiprintf_r+0x12c>
 801c31c:	06d1      	lsls	r1, r2, #27
 801c31e:	bf44      	itt	mi
 801c320:	2320      	movmi	r3, #32
 801c322:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c326:	0713      	lsls	r3, r2, #28
 801c328:	bf44      	itt	mi
 801c32a:	232b      	movmi	r3, #43	; 0x2b
 801c32c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c330:	f89a 3000 	ldrb.w	r3, [sl]
 801c334:	2b2a      	cmp	r3, #42	; 0x2a
 801c336:	d015      	beq.n	801c364 <_vfiprintf_r+0x13c>
 801c338:	9a07      	ldr	r2, [sp, #28]
 801c33a:	4654      	mov	r4, sl
 801c33c:	2000      	movs	r0, #0
 801c33e:	f04f 0c0a 	mov.w	ip, #10
 801c342:	4621      	mov	r1, r4
 801c344:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c348:	3b30      	subs	r3, #48	; 0x30
 801c34a:	2b09      	cmp	r3, #9
 801c34c:	d94e      	bls.n	801c3ec <_vfiprintf_r+0x1c4>
 801c34e:	b1b0      	cbz	r0, 801c37e <_vfiprintf_r+0x156>
 801c350:	9207      	str	r2, [sp, #28]
 801c352:	e014      	b.n	801c37e <_vfiprintf_r+0x156>
 801c354:	eba0 0308 	sub.w	r3, r0, r8
 801c358:	fa09 f303 	lsl.w	r3, r9, r3
 801c35c:	4313      	orrs	r3, r2
 801c35e:	9304      	str	r3, [sp, #16]
 801c360:	46a2      	mov	sl, r4
 801c362:	e7d2      	b.n	801c30a <_vfiprintf_r+0xe2>
 801c364:	9b03      	ldr	r3, [sp, #12]
 801c366:	1d19      	adds	r1, r3, #4
 801c368:	681b      	ldr	r3, [r3, #0]
 801c36a:	9103      	str	r1, [sp, #12]
 801c36c:	2b00      	cmp	r3, #0
 801c36e:	bfbb      	ittet	lt
 801c370:	425b      	neglt	r3, r3
 801c372:	f042 0202 	orrlt.w	r2, r2, #2
 801c376:	9307      	strge	r3, [sp, #28]
 801c378:	9307      	strlt	r3, [sp, #28]
 801c37a:	bfb8      	it	lt
 801c37c:	9204      	strlt	r2, [sp, #16]
 801c37e:	7823      	ldrb	r3, [r4, #0]
 801c380:	2b2e      	cmp	r3, #46	; 0x2e
 801c382:	d10c      	bne.n	801c39e <_vfiprintf_r+0x176>
 801c384:	7863      	ldrb	r3, [r4, #1]
 801c386:	2b2a      	cmp	r3, #42	; 0x2a
 801c388:	d135      	bne.n	801c3f6 <_vfiprintf_r+0x1ce>
 801c38a:	9b03      	ldr	r3, [sp, #12]
 801c38c:	1d1a      	adds	r2, r3, #4
 801c38e:	681b      	ldr	r3, [r3, #0]
 801c390:	9203      	str	r2, [sp, #12]
 801c392:	2b00      	cmp	r3, #0
 801c394:	bfb8      	it	lt
 801c396:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801c39a:	3402      	adds	r4, #2
 801c39c:	9305      	str	r3, [sp, #20]
 801c39e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c484 <_vfiprintf_r+0x25c>
 801c3a2:	7821      	ldrb	r1, [r4, #0]
 801c3a4:	2203      	movs	r2, #3
 801c3a6:	4650      	mov	r0, sl
 801c3a8:	f7e3 ff32 	bl	8000210 <memchr>
 801c3ac:	b140      	cbz	r0, 801c3c0 <_vfiprintf_r+0x198>
 801c3ae:	2340      	movs	r3, #64	; 0x40
 801c3b0:	eba0 000a 	sub.w	r0, r0, sl
 801c3b4:	fa03 f000 	lsl.w	r0, r3, r0
 801c3b8:	9b04      	ldr	r3, [sp, #16]
 801c3ba:	4303      	orrs	r3, r0
 801c3bc:	3401      	adds	r4, #1
 801c3be:	9304      	str	r3, [sp, #16]
 801c3c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c3c4:	482c      	ldr	r0, [pc, #176]	; (801c478 <_vfiprintf_r+0x250>)
 801c3c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c3ca:	2206      	movs	r2, #6
 801c3cc:	f7e3 ff20 	bl	8000210 <memchr>
 801c3d0:	2800      	cmp	r0, #0
 801c3d2:	d03f      	beq.n	801c454 <_vfiprintf_r+0x22c>
 801c3d4:	4b29      	ldr	r3, [pc, #164]	; (801c47c <_vfiprintf_r+0x254>)
 801c3d6:	bb1b      	cbnz	r3, 801c420 <_vfiprintf_r+0x1f8>
 801c3d8:	9b03      	ldr	r3, [sp, #12]
 801c3da:	3307      	adds	r3, #7
 801c3dc:	f023 0307 	bic.w	r3, r3, #7
 801c3e0:	3308      	adds	r3, #8
 801c3e2:	9303      	str	r3, [sp, #12]
 801c3e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c3e6:	443b      	add	r3, r7
 801c3e8:	9309      	str	r3, [sp, #36]	; 0x24
 801c3ea:	e767      	b.n	801c2bc <_vfiprintf_r+0x94>
 801c3ec:	fb0c 3202 	mla	r2, ip, r2, r3
 801c3f0:	460c      	mov	r4, r1
 801c3f2:	2001      	movs	r0, #1
 801c3f4:	e7a5      	b.n	801c342 <_vfiprintf_r+0x11a>
 801c3f6:	2300      	movs	r3, #0
 801c3f8:	3401      	adds	r4, #1
 801c3fa:	9305      	str	r3, [sp, #20]
 801c3fc:	4619      	mov	r1, r3
 801c3fe:	f04f 0c0a 	mov.w	ip, #10
 801c402:	4620      	mov	r0, r4
 801c404:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c408:	3a30      	subs	r2, #48	; 0x30
 801c40a:	2a09      	cmp	r2, #9
 801c40c:	d903      	bls.n	801c416 <_vfiprintf_r+0x1ee>
 801c40e:	2b00      	cmp	r3, #0
 801c410:	d0c5      	beq.n	801c39e <_vfiprintf_r+0x176>
 801c412:	9105      	str	r1, [sp, #20]
 801c414:	e7c3      	b.n	801c39e <_vfiprintf_r+0x176>
 801c416:	fb0c 2101 	mla	r1, ip, r1, r2
 801c41a:	4604      	mov	r4, r0
 801c41c:	2301      	movs	r3, #1
 801c41e:	e7f0      	b.n	801c402 <_vfiprintf_r+0x1da>
 801c420:	ab03      	add	r3, sp, #12
 801c422:	9300      	str	r3, [sp, #0]
 801c424:	462a      	mov	r2, r5
 801c426:	4b16      	ldr	r3, [pc, #88]	; (801c480 <_vfiprintf_r+0x258>)
 801c428:	a904      	add	r1, sp, #16
 801c42a:	4630      	mov	r0, r6
 801c42c:	f7fd fd72 	bl	8019f14 <_printf_float>
 801c430:	4607      	mov	r7, r0
 801c432:	1c78      	adds	r0, r7, #1
 801c434:	d1d6      	bne.n	801c3e4 <_vfiprintf_r+0x1bc>
 801c436:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c438:	07d9      	lsls	r1, r3, #31
 801c43a:	d405      	bmi.n	801c448 <_vfiprintf_r+0x220>
 801c43c:	89ab      	ldrh	r3, [r5, #12]
 801c43e:	059a      	lsls	r2, r3, #22
 801c440:	d402      	bmi.n	801c448 <_vfiprintf_r+0x220>
 801c442:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c444:	f7ff f9b0 	bl	801b7a8 <__retarget_lock_release_recursive>
 801c448:	89ab      	ldrh	r3, [r5, #12]
 801c44a:	065b      	lsls	r3, r3, #25
 801c44c:	f53f af12 	bmi.w	801c274 <_vfiprintf_r+0x4c>
 801c450:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c452:	e711      	b.n	801c278 <_vfiprintf_r+0x50>
 801c454:	ab03      	add	r3, sp, #12
 801c456:	9300      	str	r3, [sp, #0]
 801c458:	462a      	mov	r2, r5
 801c45a:	4b09      	ldr	r3, [pc, #36]	; (801c480 <_vfiprintf_r+0x258>)
 801c45c:	a904      	add	r1, sp, #16
 801c45e:	4630      	mov	r0, r6
 801c460:	f7fd fffc 	bl	801a45c <_printf_i>
 801c464:	e7e4      	b.n	801c430 <_vfiprintf_r+0x208>
 801c466:	bf00      	nop
 801c468:	0801d4b8 	.word	0x0801d4b8
 801c46c:	0801d4d8 	.word	0x0801d4d8
 801c470:	0801d498 	.word	0x0801d498
 801c474:	0801d65c 	.word	0x0801d65c
 801c478:	0801d666 	.word	0x0801d666
 801c47c:	08019f15 	.word	0x08019f15
 801c480:	0801c203 	.word	0x0801c203
 801c484:	0801d662 	.word	0x0801d662

0801c488 <__sread>:
 801c488:	b510      	push	{r4, lr}
 801c48a:	460c      	mov	r4, r1
 801c48c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c490:	f000 faba 	bl	801ca08 <_read_r>
 801c494:	2800      	cmp	r0, #0
 801c496:	bfab      	itete	ge
 801c498:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c49a:	89a3      	ldrhlt	r3, [r4, #12]
 801c49c:	181b      	addge	r3, r3, r0
 801c49e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c4a2:	bfac      	ite	ge
 801c4a4:	6563      	strge	r3, [r4, #84]	; 0x54
 801c4a6:	81a3      	strhlt	r3, [r4, #12]
 801c4a8:	bd10      	pop	{r4, pc}

0801c4aa <__swrite>:
 801c4aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c4ae:	461f      	mov	r7, r3
 801c4b0:	898b      	ldrh	r3, [r1, #12]
 801c4b2:	05db      	lsls	r3, r3, #23
 801c4b4:	4605      	mov	r5, r0
 801c4b6:	460c      	mov	r4, r1
 801c4b8:	4616      	mov	r6, r2
 801c4ba:	d505      	bpl.n	801c4c8 <__swrite+0x1e>
 801c4bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c4c0:	2302      	movs	r3, #2
 801c4c2:	2200      	movs	r2, #0
 801c4c4:	f000 f9de 	bl	801c884 <_lseek_r>
 801c4c8:	89a3      	ldrh	r3, [r4, #12]
 801c4ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c4ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c4d2:	81a3      	strh	r3, [r4, #12]
 801c4d4:	4632      	mov	r2, r6
 801c4d6:	463b      	mov	r3, r7
 801c4d8:	4628      	mov	r0, r5
 801c4da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c4de:	f000 b877 	b.w	801c5d0 <_write_r>

0801c4e2 <__sseek>:
 801c4e2:	b510      	push	{r4, lr}
 801c4e4:	460c      	mov	r4, r1
 801c4e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c4ea:	f000 f9cb 	bl	801c884 <_lseek_r>
 801c4ee:	1c43      	adds	r3, r0, #1
 801c4f0:	89a3      	ldrh	r3, [r4, #12]
 801c4f2:	bf15      	itete	ne
 801c4f4:	6560      	strne	r0, [r4, #84]	; 0x54
 801c4f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c4fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c4fe:	81a3      	strheq	r3, [r4, #12]
 801c500:	bf18      	it	ne
 801c502:	81a3      	strhne	r3, [r4, #12]
 801c504:	bd10      	pop	{r4, pc}

0801c506 <__sclose>:
 801c506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c50a:	f000 b8e9 	b.w	801c6e0 <_close_r>
	...

0801c510 <__swbuf_r>:
 801c510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c512:	460e      	mov	r6, r1
 801c514:	4614      	mov	r4, r2
 801c516:	4605      	mov	r5, r0
 801c518:	b118      	cbz	r0, 801c522 <__swbuf_r+0x12>
 801c51a:	6983      	ldr	r3, [r0, #24]
 801c51c:	b90b      	cbnz	r3, 801c522 <__swbuf_r+0x12>
 801c51e:	f7ff f88d 	bl	801b63c <__sinit>
 801c522:	4b21      	ldr	r3, [pc, #132]	; (801c5a8 <__swbuf_r+0x98>)
 801c524:	429c      	cmp	r4, r3
 801c526:	d12b      	bne.n	801c580 <__swbuf_r+0x70>
 801c528:	686c      	ldr	r4, [r5, #4]
 801c52a:	69a3      	ldr	r3, [r4, #24]
 801c52c:	60a3      	str	r3, [r4, #8]
 801c52e:	89a3      	ldrh	r3, [r4, #12]
 801c530:	071a      	lsls	r2, r3, #28
 801c532:	d52f      	bpl.n	801c594 <__swbuf_r+0x84>
 801c534:	6923      	ldr	r3, [r4, #16]
 801c536:	b36b      	cbz	r3, 801c594 <__swbuf_r+0x84>
 801c538:	6923      	ldr	r3, [r4, #16]
 801c53a:	6820      	ldr	r0, [r4, #0]
 801c53c:	1ac0      	subs	r0, r0, r3
 801c53e:	6963      	ldr	r3, [r4, #20]
 801c540:	b2f6      	uxtb	r6, r6
 801c542:	4283      	cmp	r3, r0
 801c544:	4637      	mov	r7, r6
 801c546:	dc04      	bgt.n	801c552 <__swbuf_r+0x42>
 801c548:	4621      	mov	r1, r4
 801c54a:	4628      	mov	r0, r5
 801c54c:	f000 f95e 	bl	801c80c <_fflush_r>
 801c550:	bb30      	cbnz	r0, 801c5a0 <__swbuf_r+0x90>
 801c552:	68a3      	ldr	r3, [r4, #8]
 801c554:	3b01      	subs	r3, #1
 801c556:	60a3      	str	r3, [r4, #8]
 801c558:	6823      	ldr	r3, [r4, #0]
 801c55a:	1c5a      	adds	r2, r3, #1
 801c55c:	6022      	str	r2, [r4, #0]
 801c55e:	701e      	strb	r6, [r3, #0]
 801c560:	6963      	ldr	r3, [r4, #20]
 801c562:	3001      	adds	r0, #1
 801c564:	4283      	cmp	r3, r0
 801c566:	d004      	beq.n	801c572 <__swbuf_r+0x62>
 801c568:	89a3      	ldrh	r3, [r4, #12]
 801c56a:	07db      	lsls	r3, r3, #31
 801c56c:	d506      	bpl.n	801c57c <__swbuf_r+0x6c>
 801c56e:	2e0a      	cmp	r6, #10
 801c570:	d104      	bne.n	801c57c <__swbuf_r+0x6c>
 801c572:	4621      	mov	r1, r4
 801c574:	4628      	mov	r0, r5
 801c576:	f000 f949 	bl	801c80c <_fflush_r>
 801c57a:	b988      	cbnz	r0, 801c5a0 <__swbuf_r+0x90>
 801c57c:	4638      	mov	r0, r7
 801c57e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c580:	4b0a      	ldr	r3, [pc, #40]	; (801c5ac <__swbuf_r+0x9c>)
 801c582:	429c      	cmp	r4, r3
 801c584:	d101      	bne.n	801c58a <__swbuf_r+0x7a>
 801c586:	68ac      	ldr	r4, [r5, #8]
 801c588:	e7cf      	b.n	801c52a <__swbuf_r+0x1a>
 801c58a:	4b09      	ldr	r3, [pc, #36]	; (801c5b0 <__swbuf_r+0xa0>)
 801c58c:	429c      	cmp	r4, r3
 801c58e:	bf08      	it	eq
 801c590:	68ec      	ldreq	r4, [r5, #12]
 801c592:	e7ca      	b.n	801c52a <__swbuf_r+0x1a>
 801c594:	4621      	mov	r1, r4
 801c596:	4628      	mov	r0, r5
 801c598:	f000 f82c 	bl	801c5f4 <__swsetup_r>
 801c59c:	2800      	cmp	r0, #0
 801c59e:	d0cb      	beq.n	801c538 <__swbuf_r+0x28>
 801c5a0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801c5a4:	e7ea      	b.n	801c57c <__swbuf_r+0x6c>
 801c5a6:	bf00      	nop
 801c5a8:	0801d4b8 	.word	0x0801d4b8
 801c5ac:	0801d4d8 	.word	0x0801d4d8
 801c5b0:	0801d498 	.word	0x0801d498

0801c5b4 <__ascii_wctomb>:
 801c5b4:	b149      	cbz	r1, 801c5ca <__ascii_wctomb+0x16>
 801c5b6:	2aff      	cmp	r2, #255	; 0xff
 801c5b8:	bf85      	ittet	hi
 801c5ba:	238a      	movhi	r3, #138	; 0x8a
 801c5bc:	6003      	strhi	r3, [r0, #0]
 801c5be:	700a      	strbls	r2, [r1, #0]
 801c5c0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801c5c4:	bf98      	it	ls
 801c5c6:	2001      	movls	r0, #1
 801c5c8:	4770      	bx	lr
 801c5ca:	4608      	mov	r0, r1
 801c5cc:	4770      	bx	lr
	...

0801c5d0 <_write_r>:
 801c5d0:	b538      	push	{r3, r4, r5, lr}
 801c5d2:	4d07      	ldr	r5, [pc, #28]	; (801c5f0 <_write_r+0x20>)
 801c5d4:	4604      	mov	r4, r0
 801c5d6:	4608      	mov	r0, r1
 801c5d8:	4611      	mov	r1, r2
 801c5da:	2200      	movs	r2, #0
 801c5dc:	602a      	str	r2, [r5, #0]
 801c5de:	461a      	mov	r2, r3
 801c5e0:	f000 fad8 	bl	801cb94 <_write>
 801c5e4:	1c43      	adds	r3, r0, #1
 801c5e6:	d102      	bne.n	801c5ee <_write_r+0x1e>
 801c5e8:	682b      	ldr	r3, [r5, #0]
 801c5ea:	b103      	cbz	r3, 801c5ee <_write_r+0x1e>
 801c5ec:	6023      	str	r3, [r4, #0]
 801c5ee:	bd38      	pop	{r3, r4, r5, pc}
 801c5f0:	20002fc8 	.word	0x20002fc8

0801c5f4 <__swsetup_r>:
 801c5f4:	4b32      	ldr	r3, [pc, #200]	; (801c6c0 <__swsetup_r+0xcc>)
 801c5f6:	b570      	push	{r4, r5, r6, lr}
 801c5f8:	681d      	ldr	r5, [r3, #0]
 801c5fa:	4606      	mov	r6, r0
 801c5fc:	460c      	mov	r4, r1
 801c5fe:	b125      	cbz	r5, 801c60a <__swsetup_r+0x16>
 801c600:	69ab      	ldr	r3, [r5, #24]
 801c602:	b913      	cbnz	r3, 801c60a <__swsetup_r+0x16>
 801c604:	4628      	mov	r0, r5
 801c606:	f7ff f819 	bl	801b63c <__sinit>
 801c60a:	4b2e      	ldr	r3, [pc, #184]	; (801c6c4 <__swsetup_r+0xd0>)
 801c60c:	429c      	cmp	r4, r3
 801c60e:	d10f      	bne.n	801c630 <__swsetup_r+0x3c>
 801c610:	686c      	ldr	r4, [r5, #4]
 801c612:	89a3      	ldrh	r3, [r4, #12]
 801c614:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c618:	0719      	lsls	r1, r3, #28
 801c61a:	d42c      	bmi.n	801c676 <__swsetup_r+0x82>
 801c61c:	06dd      	lsls	r5, r3, #27
 801c61e:	d411      	bmi.n	801c644 <__swsetup_r+0x50>
 801c620:	2309      	movs	r3, #9
 801c622:	6033      	str	r3, [r6, #0]
 801c624:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c628:	81a3      	strh	r3, [r4, #12]
 801c62a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c62e:	e03e      	b.n	801c6ae <__swsetup_r+0xba>
 801c630:	4b25      	ldr	r3, [pc, #148]	; (801c6c8 <__swsetup_r+0xd4>)
 801c632:	429c      	cmp	r4, r3
 801c634:	d101      	bne.n	801c63a <__swsetup_r+0x46>
 801c636:	68ac      	ldr	r4, [r5, #8]
 801c638:	e7eb      	b.n	801c612 <__swsetup_r+0x1e>
 801c63a:	4b24      	ldr	r3, [pc, #144]	; (801c6cc <__swsetup_r+0xd8>)
 801c63c:	429c      	cmp	r4, r3
 801c63e:	bf08      	it	eq
 801c640:	68ec      	ldreq	r4, [r5, #12]
 801c642:	e7e6      	b.n	801c612 <__swsetup_r+0x1e>
 801c644:	0758      	lsls	r0, r3, #29
 801c646:	d512      	bpl.n	801c66e <__swsetup_r+0x7a>
 801c648:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c64a:	b141      	cbz	r1, 801c65e <__swsetup_r+0x6a>
 801c64c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c650:	4299      	cmp	r1, r3
 801c652:	d002      	beq.n	801c65a <__swsetup_r+0x66>
 801c654:	4630      	mov	r0, r6
 801c656:	f7fd fadd 	bl	8019c14 <_free_r>
 801c65a:	2300      	movs	r3, #0
 801c65c:	6363      	str	r3, [r4, #52]	; 0x34
 801c65e:	89a3      	ldrh	r3, [r4, #12]
 801c660:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c664:	81a3      	strh	r3, [r4, #12]
 801c666:	2300      	movs	r3, #0
 801c668:	6063      	str	r3, [r4, #4]
 801c66a:	6923      	ldr	r3, [r4, #16]
 801c66c:	6023      	str	r3, [r4, #0]
 801c66e:	89a3      	ldrh	r3, [r4, #12]
 801c670:	f043 0308 	orr.w	r3, r3, #8
 801c674:	81a3      	strh	r3, [r4, #12]
 801c676:	6923      	ldr	r3, [r4, #16]
 801c678:	b94b      	cbnz	r3, 801c68e <__swsetup_r+0x9a>
 801c67a:	89a3      	ldrh	r3, [r4, #12]
 801c67c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c684:	d003      	beq.n	801c68e <__swsetup_r+0x9a>
 801c686:	4621      	mov	r1, r4
 801c688:	4630      	mov	r0, r6
 801c68a:	f000 f933 	bl	801c8f4 <__smakebuf_r>
 801c68e:	89a0      	ldrh	r0, [r4, #12]
 801c690:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c694:	f010 0301 	ands.w	r3, r0, #1
 801c698:	d00a      	beq.n	801c6b0 <__swsetup_r+0xbc>
 801c69a:	2300      	movs	r3, #0
 801c69c:	60a3      	str	r3, [r4, #8]
 801c69e:	6963      	ldr	r3, [r4, #20]
 801c6a0:	425b      	negs	r3, r3
 801c6a2:	61a3      	str	r3, [r4, #24]
 801c6a4:	6923      	ldr	r3, [r4, #16]
 801c6a6:	b943      	cbnz	r3, 801c6ba <__swsetup_r+0xc6>
 801c6a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c6ac:	d1ba      	bne.n	801c624 <__swsetup_r+0x30>
 801c6ae:	bd70      	pop	{r4, r5, r6, pc}
 801c6b0:	0781      	lsls	r1, r0, #30
 801c6b2:	bf58      	it	pl
 801c6b4:	6963      	ldrpl	r3, [r4, #20]
 801c6b6:	60a3      	str	r3, [r4, #8]
 801c6b8:	e7f4      	b.n	801c6a4 <__swsetup_r+0xb0>
 801c6ba:	2000      	movs	r0, #0
 801c6bc:	e7f7      	b.n	801c6ae <__swsetup_r+0xba>
 801c6be:	bf00      	nop
 801c6c0:	20000100 	.word	0x20000100
 801c6c4:	0801d4b8 	.word	0x0801d4b8
 801c6c8:	0801d4d8 	.word	0x0801d4d8
 801c6cc:	0801d498 	.word	0x0801d498

0801c6d0 <abort>:
 801c6d0:	b508      	push	{r3, lr}
 801c6d2:	2006      	movs	r0, #6
 801c6d4:	f000 f9d2 	bl	801ca7c <raise>
 801c6d8:	2001      	movs	r0, #1
 801c6da:	f000 fa63 	bl	801cba4 <_exit>
	...

0801c6e0 <_close_r>:
 801c6e0:	b538      	push	{r3, r4, r5, lr}
 801c6e2:	4d06      	ldr	r5, [pc, #24]	; (801c6fc <_close_r+0x1c>)
 801c6e4:	2300      	movs	r3, #0
 801c6e6:	4604      	mov	r4, r0
 801c6e8:	4608      	mov	r0, r1
 801c6ea:	602b      	str	r3, [r5, #0]
 801c6ec:	f000 fa0c 	bl	801cb08 <_close>
 801c6f0:	1c43      	adds	r3, r0, #1
 801c6f2:	d102      	bne.n	801c6fa <_close_r+0x1a>
 801c6f4:	682b      	ldr	r3, [r5, #0]
 801c6f6:	b103      	cbz	r3, 801c6fa <_close_r+0x1a>
 801c6f8:	6023      	str	r3, [r4, #0]
 801c6fa:	bd38      	pop	{r3, r4, r5, pc}
 801c6fc:	20002fc8 	.word	0x20002fc8

0801c700 <__sflush_r>:
 801c700:	898a      	ldrh	r2, [r1, #12]
 801c702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c706:	4605      	mov	r5, r0
 801c708:	0710      	lsls	r0, r2, #28
 801c70a:	460c      	mov	r4, r1
 801c70c:	d458      	bmi.n	801c7c0 <__sflush_r+0xc0>
 801c70e:	684b      	ldr	r3, [r1, #4]
 801c710:	2b00      	cmp	r3, #0
 801c712:	dc05      	bgt.n	801c720 <__sflush_r+0x20>
 801c714:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c716:	2b00      	cmp	r3, #0
 801c718:	dc02      	bgt.n	801c720 <__sflush_r+0x20>
 801c71a:	2000      	movs	r0, #0
 801c71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c720:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c722:	2e00      	cmp	r6, #0
 801c724:	d0f9      	beq.n	801c71a <__sflush_r+0x1a>
 801c726:	2300      	movs	r3, #0
 801c728:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c72c:	682f      	ldr	r7, [r5, #0]
 801c72e:	602b      	str	r3, [r5, #0]
 801c730:	d032      	beq.n	801c798 <__sflush_r+0x98>
 801c732:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c734:	89a3      	ldrh	r3, [r4, #12]
 801c736:	075a      	lsls	r2, r3, #29
 801c738:	d505      	bpl.n	801c746 <__sflush_r+0x46>
 801c73a:	6863      	ldr	r3, [r4, #4]
 801c73c:	1ac0      	subs	r0, r0, r3
 801c73e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c740:	b10b      	cbz	r3, 801c746 <__sflush_r+0x46>
 801c742:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c744:	1ac0      	subs	r0, r0, r3
 801c746:	2300      	movs	r3, #0
 801c748:	4602      	mov	r2, r0
 801c74a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c74c:	6a21      	ldr	r1, [r4, #32]
 801c74e:	4628      	mov	r0, r5
 801c750:	47b0      	blx	r6
 801c752:	1c43      	adds	r3, r0, #1
 801c754:	89a3      	ldrh	r3, [r4, #12]
 801c756:	d106      	bne.n	801c766 <__sflush_r+0x66>
 801c758:	6829      	ldr	r1, [r5, #0]
 801c75a:	291d      	cmp	r1, #29
 801c75c:	d82c      	bhi.n	801c7b8 <__sflush_r+0xb8>
 801c75e:	4a2a      	ldr	r2, [pc, #168]	; (801c808 <__sflush_r+0x108>)
 801c760:	40ca      	lsrs	r2, r1
 801c762:	07d6      	lsls	r6, r2, #31
 801c764:	d528      	bpl.n	801c7b8 <__sflush_r+0xb8>
 801c766:	2200      	movs	r2, #0
 801c768:	6062      	str	r2, [r4, #4]
 801c76a:	04d9      	lsls	r1, r3, #19
 801c76c:	6922      	ldr	r2, [r4, #16]
 801c76e:	6022      	str	r2, [r4, #0]
 801c770:	d504      	bpl.n	801c77c <__sflush_r+0x7c>
 801c772:	1c42      	adds	r2, r0, #1
 801c774:	d101      	bne.n	801c77a <__sflush_r+0x7a>
 801c776:	682b      	ldr	r3, [r5, #0]
 801c778:	b903      	cbnz	r3, 801c77c <__sflush_r+0x7c>
 801c77a:	6560      	str	r0, [r4, #84]	; 0x54
 801c77c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c77e:	602f      	str	r7, [r5, #0]
 801c780:	2900      	cmp	r1, #0
 801c782:	d0ca      	beq.n	801c71a <__sflush_r+0x1a>
 801c784:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c788:	4299      	cmp	r1, r3
 801c78a:	d002      	beq.n	801c792 <__sflush_r+0x92>
 801c78c:	4628      	mov	r0, r5
 801c78e:	f7fd fa41 	bl	8019c14 <_free_r>
 801c792:	2000      	movs	r0, #0
 801c794:	6360      	str	r0, [r4, #52]	; 0x34
 801c796:	e7c1      	b.n	801c71c <__sflush_r+0x1c>
 801c798:	6a21      	ldr	r1, [r4, #32]
 801c79a:	2301      	movs	r3, #1
 801c79c:	4628      	mov	r0, r5
 801c79e:	47b0      	blx	r6
 801c7a0:	1c41      	adds	r1, r0, #1
 801c7a2:	d1c7      	bne.n	801c734 <__sflush_r+0x34>
 801c7a4:	682b      	ldr	r3, [r5, #0]
 801c7a6:	2b00      	cmp	r3, #0
 801c7a8:	d0c4      	beq.n	801c734 <__sflush_r+0x34>
 801c7aa:	2b1d      	cmp	r3, #29
 801c7ac:	d001      	beq.n	801c7b2 <__sflush_r+0xb2>
 801c7ae:	2b16      	cmp	r3, #22
 801c7b0:	d101      	bne.n	801c7b6 <__sflush_r+0xb6>
 801c7b2:	602f      	str	r7, [r5, #0]
 801c7b4:	e7b1      	b.n	801c71a <__sflush_r+0x1a>
 801c7b6:	89a3      	ldrh	r3, [r4, #12]
 801c7b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c7bc:	81a3      	strh	r3, [r4, #12]
 801c7be:	e7ad      	b.n	801c71c <__sflush_r+0x1c>
 801c7c0:	690f      	ldr	r7, [r1, #16]
 801c7c2:	2f00      	cmp	r7, #0
 801c7c4:	d0a9      	beq.n	801c71a <__sflush_r+0x1a>
 801c7c6:	0793      	lsls	r3, r2, #30
 801c7c8:	680e      	ldr	r6, [r1, #0]
 801c7ca:	bf08      	it	eq
 801c7cc:	694b      	ldreq	r3, [r1, #20]
 801c7ce:	600f      	str	r7, [r1, #0]
 801c7d0:	bf18      	it	ne
 801c7d2:	2300      	movne	r3, #0
 801c7d4:	eba6 0807 	sub.w	r8, r6, r7
 801c7d8:	608b      	str	r3, [r1, #8]
 801c7da:	f1b8 0f00 	cmp.w	r8, #0
 801c7de:	dd9c      	ble.n	801c71a <__sflush_r+0x1a>
 801c7e0:	6a21      	ldr	r1, [r4, #32]
 801c7e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c7e4:	4643      	mov	r3, r8
 801c7e6:	463a      	mov	r2, r7
 801c7e8:	4628      	mov	r0, r5
 801c7ea:	47b0      	blx	r6
 801c7ec:	2800      	cmp	r0, #0
 801c7ee:	dc06      	bgt.n	801c7fe <__sflush_r+0xfe>
 801c7f0:	89a3      	ldrh	r3, [r4, #12]
 801c7f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c7f6:	81a3      	strh	r3, [r4, #12]
 801c7f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c7fc:	e78e      	b.n	801c71c <__sflush_r+0x1c>
 801c7fe:	4407      	add	r7, r0
 801c800:	eba8 0800 	sub.w	r8, r8, r0
 801c804:	e7e9      	b.n	801c7da <__sflush_r+0xda>
 801c806:	bf00      	nop
 801c808:	20400001 	.word	0x20400001

0801c80c <_fflush_r>:
 801c80c:	b538      	push	{r3, r4, r5, lr}
 801c80e:	690b      	ldr	r3, [r1, #16]
 801c810:	4605      	mov	r5, r0
 801c812:	460c      	mov	r4, r1
 801c814:	b913      	cbnz	r3, 801c81c <_fflush_r+0x10>
 801c816:	2500      	movs	r5, #0
 801c818:	4628      	mov	r0, r5
 801c81a:	bd38      	pop	{r3, r4, r5, pc}
 801c81c:	b118      	cbz	r0, 801c826 <_fflush_r+0x1a>
 801c81e:	6983      	ldr	r3, [r0, #24]
 801c820:	b90b      	cbnz	r3, 801c826 <_fflush_r+0x1a>
 801c822:	f7fe ff0b 	bl	801b63c <__sinit>
 801c826:	4b14      	ldr	r3, [pc, #80]	; (801c878 <_fflush_r+0x6c>)
 801c828:	429c      	cmp	r4, r3
 801c82a:	d11b      	bne.n	801c864 <_fflush_r+0x58>
 801c82c:	686c      	ldr	r4, [r5, #4]
 801c82e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c832:	2b00      	cmp	r3, #0
 801c834:	d0ef      	beq.n	801c816 <_fflush_r+0xa>
 801c836:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c838:	07d0      	lsls	r0, r2, #31
 801c83a:	d404      	bmi.n	801c846 <_fflush_r+0x3a>
 801c83c:	0599      	lsls	r1, r3, #22
 801c83e:	d402      	bmi.n	801c846 <_fflush_r+0x3a>
 801c840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c842:	f7fe ffb0 	bl	801b7a6 <__retarget_lock_acquire_recursive>
 801c846:	4628      	mov	r0, r5
 801c848:	4621      	mov	r1, r4
 801c84a:	f7ff ff59 	bl	801c700 <__sflush_r>
 801c84e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c850:	07da      	lsls	r2, r3, #31
 801c852:	4605      	mov	r5, r0
 801c854:	d4e0      	bmi.n	801c818 <_fflush_r+0xc>
 801c856:	89a3      	ldrh	r3, [r4, #12]
 801c858:	059b      	lsls	r3, r3, #22
 801c85a:	d4dd      	bmi.n	801c818 <_fflush_r+0xc>
 801c85c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c85e:	f7fe ffa3 	bl	801b7a8 <__retarget_lock_release_recursive>
 801c862:	e7d9      	b.n	801c818 <_fflush_r+0xc>
 801c864:	4b05      	ldr	r3, [pc, #20]	; (801c87c <_fflush_r+0x70>)
 801c866:	429c      	cmp	r4, r3
 801c868:	d101      	bne.n	801c86e <_fflush_r+0x62>
 801c86a:	68ac      	ldr	r4, [r5, #8]
 801c86c:	e7df      	b.n	801c82e <_fflush_r+0x22>
 801c86e:	4b04      	ldr	r3, [pc, #16]	; (801c880 <_fflush_r+0x74>)
 801c870:	429c      	cmp	r4, r3
 801c872:	bf08      	it	eq
 801c874:	68ec      	ldreq	r4, [r5, #12]
 801c876:	e7da      	b.n	801c82e <_fflush_r+0x22>
 801c878:	0801d4b8 	.word	0x0801d4b8
 801c87c:	0801d4d8 	.word	0x0801d4d8
 801c880:	0801d498 	.word	0x0801d498

0801c884 <_lseek_r>:
 801c884:	b538      	push	{r3, r4, r5, lr}
 801c886:	4d07      	ldr	r5, [pc, #28]	; (801c8a4 <_lseek_r+0x20>)
 801c888:	4604      	mov	r4, r0
 801c88a:	4608      	mov	r0, r1
 801c88c:	4611      	mov	r1, r2
 801c88e:	2200      	movs	r2, #0
 801c890:	602a      	str	r2, [r5, #0]
 801c892:	461a      	mov	r2, r3
 801c894:	f000 f960 	bl	801cb58 <_lseek>
 801c898:	1c43      	adds	r3, r0, #1
 801c89a:	d102      	bne.n	801c8a2 <_lseek_r+0x1e>
 801c89c:	682b      	ldr	r3, [r5, #0]
 801c89e:	b103      	cbz	r3, 801c8a2 <_lseek_r+0x1e>
 801c8a0:	6023      	str	r3, [r4, #0]
 801c8a2:	bd38      	pop	{r3, r4, r5, pc}
 801c8a4:	20002fc8 	.word	0x20002fc8

0801c8a8 <__swhatbuf_r>:
 801c8a8:	b570      	push	{r4, r5, r6, lr}
 801c8aa:	460e      	mov	r6, r1
 801c8ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c8b0:	2900      	cmp	r1, #0
 801c8b2:	b096      	sub	sp, #88	; 0x58
 801c8b4:	4614      	mov	r4, r2
 801c8b6:	461d      	mov	r5, r3
 801c8b8:	da08      	bge.n	801c8cc <__swhatbuf_r+0x24>
 801c8ba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801c8be:	2200      	movs	r2, #0
 801c8c0:	602a      	str	r2, [r5, #0]
 801c8c2:	061a      	lsls	r2, r3, #24
 801c8c4:	d410      	bmi.n	801c8e8 <__swhatbuf_r+0x40>
 801c8c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c8ca:	e00e      	b.n	801c8ea <__swhatbuf_r+0x42>
 801c8cc:	466a      	mov	r2, sp
 801c8ce:	f000 f8f1 	bl	801cab4 <_fstat_r>
 801c8d2:	2800      	cmp	r0, #0
 801c8d4:	dbf1      	blt.n	801c8ba <__swhatbuf_r+0x12>
 801c8d6:	9a01      	ldr	r2, [sp, #4]
 801c8d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c8dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c8e0:	425a      	negs	r2, r3
 801c8e2:	415a      	adcs	r2, r3
 801c8e4:	602a      	str	r2, [r5, #0]
 801c8e6:	e7ee      	b.n	801c8c6 <__swhatbuf_r+0x1e>
 801c8e8:	2340      	movs	r3, #64	; 0x40
 801c8ea:	2000      	movs	r0, #0
 801c8ec:	6023      	str	r3, [r4, #0]
 801c8ee:	b016      	add	sp, #88	; 0x58
 801c8f0:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c8f4 <__smakebuf_r>:
 801c8f4:	898b      	ldrh	r3, [r1, #12]
 801c8f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c8f8:	079d      	lsls	r5, r3, #30
 801c8fa:	4606      	mov	r6, r0
 801c8fc:	460c      	mov	r4, r1
 801c8fe:	d507      	bpl.n	801c910 <__smakebuf_r+0x1c>
 801c900:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c904:	6023      	str	r3, [r4, #0]
 801c906:	6123      	str	r3, [r4, #16]
 801c908:	2301      	movs	r3, #1
 801c90a:	6163      	str	r3, [r4, #20]
 801c90c:	b002      	add	sp, #8
 801c90e:	bd70      	pop	{r4, r5, r6, pc}
 801c910:	ab01      	add	r3, sp, #4
 801c912:	466a      	mov	r2, sp
 801c914:	f7ff ffc8 	bl	801c8a8 <__swhatbuf_r>
 801c918:	9900      	ldr	r1, [sp, #0]
 801c91a:	4605      	mov	r5, r0
 801c91c:	4630      	mov	r0, r6
 801c91e:	f7fd f9e5 	bl	8019cec <_malloc_r>
 801c922:	b948      	cbnz	r0, 801c938 <__smakebuf_r+0x44>
 801c924:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c928:	059a      	lsls	r2, r3, #22
 801c92a:	d4ef      	bmi.n	801c90c <__smakebuf_r+0x18>
 801c92c:	f023 0303 	bic.w	r3, r3, #3
 801c930:	f043 0302 	orr.w	r3, r3, #2
 801c934:	81a3      	strh	r3, [r4, #12]
 801c936:	e7e3      	b.n	801c900 <__smakebuf_r+0xc>
 801c938:	4b0d      	ldr	r3, [pc, #52]	; (801c970 <__smakebuf_r+0x7c>)
 801c93a:	62b3      	str	r3, [r6, #40]	; 0x28
 801c93c:	89a3      	ldrh	r3, [r4, #12]
 801c93e:	6020      	str	r0, [r4, #0]
 801c940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c944:	81a3      	strh	r3, [r4, #12]
 801c946:	9b00      	ldr	r3, [sp, #0]
 801c948:	6163      	str	r3, [r4, #20]
 801c94a:	9b01      	ldr	r3, [sp, #4]
 801c94c:	6120      	str	r0, [r4, #16]
 801c94e:	b15b      	cbz	r3, 801c968 <__smakebuf_r+0x74>
 801c950:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c954:	4630      	mov	r0, r6
 801c956:	f000 f8bf 	bl	801cad8 <_isatty_r>
 801c95a:	b128      	cbz	r0, 801c968 <__smakebuf_r+0x74>
 801c95c:	89a3      	ldrh	r3, [r4, #12]
 801c95e:	f023 0303 	bic.w	r3, r3, #3
 801c962:	f043 0301 	orr.w	r3, r3, #1
 801c966:	81a3      	strh	r3, [r4, #12]
 801c968:	89a0      	ldrh	r0, [r4, #12]
 801c96a:	4305      	orrs	r5, r0
 801c96c:	81a5      	strh	r5, [r4, #12]
 801c96e:	e7cd      	b.n	801c90c <__smakebuf_r+0x18>
 801c970:	0801b5d5 	.word	0x0801b5d5

0801c974 <memmove>:
 801c974:	4288      	cmp	r0, r1
 801c976:	b510      	push	{r4, lr}
 801c978:	eb01 0402 	add.w	r4, r1, r2
 801c97c:	d902      	bls.n	801c984 <memmove+0x10>
 801c97e:	4284      	cmp	r4, r0
 801c980:	4623      	mov	r3, r4
 801c982:	d807      	bhi.n	801c994 <memmove+0x20>
 801c984:	1e43      	subs	r3, r0, #1
 801c986:	42a1      	cmp	r1, r4
 801c988:	d008      	beq.n	801c99c <memmove+0x28>
 801c98a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c98e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c992:	e7f8      	b.n	801c986 <memmove+0x12>
 801c994:	4402      	add	r2, r0
 801c996:	4601      	mov	r1, r0
 801c998:	428a      	cmp	r2, r1
 801c99a:	d100      	bne.n	801c99e <memmove+0x2a>
 801c99c:	bd10      	pop	{r4, pc}
 801c99e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c9a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c9a6:	e7f7      	b.n	801c998 <memmove+0x24>

0801c9a8 <_realloc_r>:
 801c9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c9ac:	4680      	mov	r8, r0
 801c9ae:	4614      	mov	r4, r2
 801c9b0:	460e      	mov	r6, r1
 801c9b2:	b921      	cbnz	r1, 801c9be <_realloc_r+0x16>
 801c9b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c9b8:	4611      	mov	r1, r2
 801c9ba:	f7fd b997 	b.w	8019cec <_malloc_r>
 801c9be:	b92a      	cbnz	r2, 801c9cc <_realloc_r+0x24>
 801c9c0:	f7fd f928 	bl	8019c14 <_free_r>
 801c9c4:	4625      	mov	r5, r4
 801c9c6:	4628      	mov	r0, r5
 801c9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c9cc:	f000 f894 	bl	801caf8 <_malloc_usable_size_r>
 801c9d0:	4284      	cmp	r4, r0
 801c9d2:	4607      	mov	r7, r0
 801c9d4:	d802      	bhi.n	801c9dc <_realloc_r+0x34>
 801c9d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801c9da:	d812      	bhi.n	801ca02 <_realloc_r+0x5a>
 801c9dc:	4621      	mov	r1, r4
 801c9de:	4640      	mov	r0, r8
 801c9e0:	f7fd f984 	bl	8019cec <_malloc_r>
 801c9e4:	4605      	mov	r5, r0
 801c9e6:	2800      	cmp	r0, #0
 801c9e8:	d0ed      	beq.n	801c9c6 <_realloc_r+0x1e>
 801c9ea:	42bc      	cmp	r4, r7
 801c9ec:	4622      	mov	r2, r4
 801c9ee:	4631      	mov	r1, r6
 801c9f0:	bf28      	it	cs
 801c9f2:	463a      	movcs	r2, r7
 801c9f4:	f7fd f8f8 	bl	8019be8 <memcpy>
 801c9f8:	4631      	mov	r1, r6
 801c9fa:	4640      	mov	r0, r8
 801c9fc:	f7fd f90a 	bl	8019c14 <_free_r>
 801ca00:	e7e1      	b.n	801c9c6 <_realloc_r+0x1e>
 801ca02:	4635      	mov	r5, r6
 801ca04:	e7df      	b.n	801c9c6 <_realloc_r+0x1e>
	...

0801ca08 <_read_r>:
 801ca08:	b538      	push	{r3, r4, r5, lr}
 801ca0a:	4d07      	ldr	r5, [pc, #28]	; (801ca28 <_read_r+0x20>)
 801ca0c:	4604      	mov	r4, r0
 801ca0e:	4608      	mov	r0, r1
 801ca10:	4611      	mov	r1, r2
 801ca12:	2200      	movs	r2, #0
 801ca14:	602a      	str	r2, [r5, #0]
 801ca16:	461a      	mov	r2, r3
 801ca18:	f000 f8a6 	bl	801cb68 <_read>
 801ca1c:	1c43      	adds	r3, r0, #1
 801ca1e:	d102      	bne.n	801ca26 <_read_r+0x1e>
 801ca20:	682b      	ldr	r3, [r5, #0]
 801ca22:	b103      	cbz	r3, 801ca26 <_read_r+0x1e>
 801ca24:	6023      	str	r3, [r4, #0]
 801ca26:	bd38      	pop	{r3, r4, r5, pc}
 801ca28:	20002fc8 	.word	0x20002fc8

0801ca2c <_raise_r>:
 801ca2c:	291f      	cmp	r1, #31
 801ca2e:	b538      	push	{r3, r4, r5, lr}
 801ca30:	4604      	mov	r4, r0
 801ca32:	460d      	mov	r5, r1
 801ca34:	d904      	bls.n	801ca40 <_raise_r+0x14>
 801ca36:	2316      	movs	r3, #22
 801ca38:	6003      	str	r3, [r0, #0]
 801ca3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ca3e:	bd38      	pop	{r3, r4, r5, pc}
 801ca40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ca42:	b112      	cbz	r2, 801ca4a <_raise_r+0x1e>
 801ca44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ca48:	b94b      	cbnz	r3, 801ca5e <_raise_r+0x32>
 801ca4a:	4620      	mov	r0, r4
 801ca4c:	f000 f830 	bl	801cab0 <_getpid_r>
 801ca50:	462a      	mov	r2, r5
 801ca52:	4601      	mov	r1, r0
 801ca54:	4620      	mov	r0, r4
 801ca56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ca5a:	f000 b817 	b.w	801ca8c <_kill_r>
 801ca5e:	2b01      	cmp	r3, #1
 801ca60:	d00a      	beq.n	801ca78 <_raise_r+0x4c>
 801ca62:	1c59      	adds	r1, r3, #1
 801ca64:	d103      	bne.n	801ca6e <_raise_r+0x42>
 801ca66:	2316      	movs	r3, #22
 801ca68:	6003      	str	r3, [r0, #0]
 801ca6a:	2001      	movs	r0, #1
 801ca6c:	e7e7      	b.n	801ca3e <_raise_r+0x12>
 801ca6e:	2400      	movs	r4, #0
 801ca70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ca74:	4628      	mov	r0, r5
 801ca76:	4798      	blx	r3
 801ca78:	2000      	movs	r0, #0
 801ca7a:	e7e0      	b.n	801ca3e <_raise_r+0x12>

0801ca7c <raise>:
 801ca7c:	4b02      	ldr	r3, [pc, #8]	; (801ca88 <raise+0xc>)
 801ca7e:	4601      	mov	r1, r0
 801ca80:	6818      	ldr	r0, [r3, #0]
 801ca82:	f7ff bfd3 	b.w	801ca2c <_raise_r>
 801ca86:	bf00      	nop
 801ca88:	20000100 	.word	0x20000100

0801ca8c <_kill_r>:
 801ca8c:	b538      	push	{r3, r4, r5, lr}
 801ca8e:	4d07      	ldr	r5, [pc, #28]	; (801caac <_kill_r+0x20>)
 801ca90:	2300      	movs	r3, #0
 801ca92:	4604      	mov	r4, r0
 801ca94:	4608      	mov	r0, r1
 801ca96:	4611      	mov	r1, r2
 801ca98:	602b      	str	r3, [r5, #0]
 801ca9a:	f000 f855 	bl	801cb48 <_kill>
 801ca9e:	1c43      	adds	r3, r0, #1
 801caa0:	d102      	bne.n	801caa8 <_kill_r+0x1c>
 801caa2:	682b      	ldr	r3, [r5, #0]
 801caa4:	b103      	cbz	r3, 801caa8 <_kill_r+0x1c>
 801caa6:	6023      	str	r3, [r4, #0]
 801caa8:	bd38      	pop	{r3, r4, r5, pc}
 801caaa:	bf00      	nop
 801caac:	20002fc8 	.word	0x20002fc8

0801cab0 <_getpid_r>:
 801cab0:	f000 b83a 	b.w	801cb28 <_getpid>

0801cab4 <_fstat_r>:
 801cab4:	b538      	push	{r3, r4, r5, lr}
 801cab6:	4d07      	ldr	r5, [pc, #28]	; (801cad4 <_fstat_r+0x20>)
 801cab8:	2300      	movs	r3, #0
 801caba:	4604      	mov	r4, r0
 801cabc:	4608      	mov	r0, r1
 801cabe:	4611      	mov	r1, r2
 801cac0:	602b      	str	r3, [r5, #0]
 801cac2:	f000 f829 	bl	801cb18 <_fstat>
 801cac6:	1c43      	adds	r3, r0, #1
 801cac8:	d102      	bne.n	801cad0 <_fstat_r+0x1c>
 801caca:	682b      	ldr	r3, [r5, #0]
 801cacc:	b103      	cbz	r3, 801cad0 <_fstat_r+0x1c>
 801cace:	6023      	str	r3, [r4, #0]
 801cad0:	bd38      	pop	{r3, r4, r5, pc}
 801cad2:	bf00      	nop
 801cad4:	20002fc8 	.word	0x20002fc8

0801cad8 <_isatty_r>:
 801cad8:	b538      	push	{r3, r4, r5, lr}
 801cada:	4d06      	ldr	r5, [pc, #24]	; (801caf4 <_isatty_r+0x1c>)
 801cadc:	2300      	movs	r3, #0
 801cade:	4604      	mov	r4, r0
 801cae0:	4608      	mov	r0, r1
 801cae2:	602b      	str	r3, [r5, #0]
 801cae4:	f000 f828 	bl	801cb38 <_isatty>
 801cae8:	1c43      	adds	r3, r0, #1
 801caea:	d102      	bne.n	801caf2 <_isatty_r+0x1a>
 801caec:	682b      	ldr	r3, [r5, #0]
 801caee:	b103      	cbz	r3, 801caf2 <_isatty_r+0x1a>
 801caf0:	6023      	str	r3, [r4, #0]
 801caf2:	bd38      	pop	{r3, r4, r5, pc}
 801caf4:	20002fc8 	.word	0x20002fc8

0801caf8 <_malloc_usable_size_r>:
 801caf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cafc:	1f18      	subs	r0, r3, #4
 801cafe:	2b00      	cmp	r3, #0
 801cb00:	bfbc      	itt	lt
 801cb02:	580b      	ldrlt	r3, [r1, r0]
 801cb04:	18c0      	addlt	r0, r0, r3
 801cb06:	4770      	bx	lr

0801cb08 <_close>:
 801cb08:	4b02      	ldr	r3, [pc, #8]	; (801cb14 <_close+0xc>)
 801cb0a:	2258      	movs	r2, #88	; 0x58
 801cb0c:	601a      	str	r2, [r3, #0]
 801cb0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cb12:	4770      	bx	lr
 801cb14:	20002fc8 	.word	0x20002fc8

0801cb18 <_fstat>:
 801cb18:	4b02      	ldr	r3, [pc, #8]	; (801cb24 <_fstat+0xc>)
 801cb1a:	2258      	movs	r2, #88	; 0x58
 801cb1c:	601a      	str	r2, [r3, #0]
 801cb1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cb22:	4770      	bx	lr
 801cb24:	20002fc8 	.word	0x20002fc8

0801cb28 <_getpid>:
 801cb28:	4b02      	ldr	r3, [pc, #8]	; (801cb34 <_getpid+0xc>)
 801cb2a:	2258      	movs	r2, #88	; 0x58
 801cb2c:	601a      	str	r2, [r3, #0]
 801cb2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cb32:	4770      	bx	lr
 801cb34:	20002fc8 	.word	0x20002fc8

0801cb38 <_isatty>:
 801cb38:	4b02      	ldr	r3, [pc, #8]	; (801cb44 <_isatty+0xc>)
 801cb3a:	2258      	movs	r2, #88	; 0x58
 801cb3c:	601a      	str	r2, [r3, #0]
 801cb3e:	2000      	movs	r0, #0
 801cb40:	4770      	bx	lr
 801cb42:	bf00      	nop
 801cb44:	20002fc8 	.word	0x20002fc8

0801cb48 <_kill>:
 801cb48:	4b02      	ldr	r3, [pc, #8]	; (801cb54 <_kill+0xc>)
 801cb4a:	2258      	movs	r2, #88	; 0x58
 801cb4c:	601a      	str	r2, [r3, #0]
 801cb4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cb52:	4770      	bx	lr
 801cb54:	20002fc8 	.word	0x20002fc8

0801cb58 <_lseek>:
 801cb58:	4b02      	ldr	r3, [pc, #8]	; (801cb64 <_lseek+0xc>)
 801cb5a:	2258      	movs	r2, #88	; 0x58
 801cb5c:	601a      	str	r2, [r3, #0]
 801cb5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cb62:	4770      	bx	lr
 801cb64:	20002fc8 	.word	0x20002fc8

0801cb68 <_read>:
 801cb68:	4b02      	ldr	r3, [pc, #8]	; (801cb74 <_read+0xc>)
 801cb6a:	2258      	movs	r2, #88	; 0x58
 801cb6c:	601a      	str	r2, [r3, #0]
 801cb6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cb72:	4770      	bx	lr
 801cb74:	20002fc8 	.word	0x20002fc8

0801cb78 <_sbrk>:
 801cb78:	4a04      	ldr	r2, [pc, #16]	; (801cb8c <_sbrk+0x14>)
 801cb7a:	6811      	ldr	r1, [r2, #0]
 801cb7c:	4603      	mov	r3, r0
 801cb7e:	b909      	cbnz	r1, 801cb84 <_sbrk+0xc>
 801cb80:	4903      	ldr	r1, [pc, #12]	; (801cb90 <_sbrk+0x18>)
 801cb82:	6011      	str	r1, [r2, #0]
 801cb84:	6810      	ldr	r0, [r2, #0]
 801cb86:	4403      	add	r3, r0
 801cb88:	6013      	str	r3, [r2, #0]
 801cb8a:	4770      	bx	lr
 801cb8c:	20002fcc 	.word	0x20002fcc
 801cb90:	20002fd0 	.word	0x20002fd0

0801cb94 <_write>:
 801cb94:	4b02      	ldr	r3, [pc, #8]	; (801cba0 <_write+0xc>)
 801cb96:	2258      	movs	r2, #88	; 0x58
 801cb98:	601a      	str	r2, [r3, #0]
 801cb9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cb9e:	4770      	bx	lr
 801cba0:	20002fc8 	.word	0x20002fc8

0801cba4 <_exit>:
 801cba4:	e7fe      	b.n	801cba4 <_exit>
	...

0801cba8 <_init>:
 801cba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cbaa:	bf00      	nop
 801cbac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cbae:	bc08      	pop	{r3}
 801cbb0:	469e      	mov	lr, r3
 801cbb2:	4770      	bx	lr

0801cbb4 <_fini>:
 801cbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cbb6:	bf00      	nop
 801cbb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cbba:	bc08      	pop	{r3}
 801cbbc:	469e      	mov	lr, r3
 801cbbe:	4770      	bx	lr
