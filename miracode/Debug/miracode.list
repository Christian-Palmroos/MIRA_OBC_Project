
miracode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c978  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b00  0801cb38  0801cb38  0002cb38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d638  0801d638  000302d0  2**0
                  CONTENTS
  4 .ARM          00000008  0801d638  0801d638  0002d638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d640  0801d640  000302d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d640  0801d640  0002d640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d644  0801d644  0002d644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  0801d648  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d00  200002d0  0801d918  000302d0  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20002fd0  0801d918  00032fd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000499a7  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006b56  00000000  00000000  00079ca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003648  00000000  00000000  00080800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000033c8  00000000  00000000  00083e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000358e2  00000000  00000000  00087210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003cc48  00000000  00000000  000bcaf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012a707  00000000  00000000  000f973a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00223e41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000fe0c  00000000  00000000  00223e94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00233ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00233d6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801cb20 	.word	0x0801cb20

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200002d4 	.word	0x200002d4
 80001fc:	0801cb20 	.word	0x0801cb20

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c8c:	f000 b974 	b.w	8000f78 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468e      	mov	lr, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14d      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4694      	mov	ip, r2
 8000cba:	d969      	bls.n	8000d90 <__udivmoddi4+0xe8>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b152      	cbz	r2, 8000cd8 <__udivmoddi4+0x30>
 8000cc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa20 f101 	lsr.w	r1, r0, r1
 8000cce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	0c21      	lsrs	r1, r4, #16
 8000cde:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce2:	fa1f f78c 	uxth.w	r7, ip
 8000ce6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	fb06 f107 	mul.w	r1, r6, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cfe:	f080 811f 	bcs.w	8000f40 <__udivmoddi4+0x298>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 811c 	bls.w	8000f40 <__udivmoddi4+0x298>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f707 	mul.w	r7, r0, r7
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x92>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2c:	f080 810a 	bcs.w	8000f44 <__udivmoddi4+0x29c>
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	f240 8107 	bls.w	8000f44 <__udivmoddi4+0x29c>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	1be4      	subs	r4, r4, r7
 8000d40:	2600      	movs	r6, #0
 8000d42:	b11d      	cbz	r5, 8000d4c <__udivmoddi4+0xa4>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xc2>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80ef 	beq.w	8000f3a <__udivmoddi4+0x292>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x160>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd4>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80f9 	bhi.w	8000f6e <__udivmoddi4+0x2c6>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	469e      	mov	lr, r3
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa4>
 8000d8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xec>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 8092 	bne.w	8000ec2 <__udivmoddi4+0x21a>
 8000d9e:	eba1 010c 	sub.w	r1, r1, ip
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2601      	movs	r6, #1
 8000dac:	0c20      	lsrs	r0, r4, #16
 8000dae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db2:	fb07 1113 	mls	r1, r7, r3, r1
 8000db6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dba:	fb0e f003 	mul.w	r0, lr, r3
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x12a>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2c0>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1110 	mls	r1, r7, r0, r1
 8000de0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x156>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x154>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2ca>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e06:	e79c      	b.n	8000d42 <__udivmoddi4+0x9a>
 8000e08:	f1c6 0720 	rsb	r7, r6, #32
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	40f9      	lsrs	r1, r7
 8000e22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e26:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2e:	0c20      	lsrs	r0, r4, #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fb09 1118 	mls	r1, r9, r8, r1
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e40:	4288      	cmp	r0, r1
 8000e42:	fa02 f206 	lsl.w	r2, r2, r6
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b8>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2bc>
 8000e54:	4288      	cmp	r0, r1
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2bc>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e68:	fb09 1110 	mls	r1, r9, r0, r1
 8000e6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	458e      	cmp	lr, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1e2>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2b4>
 8000e82:	458e      	cmp	lr, r1
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2b4>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e92:	eba1 010e 	sub.w	r1, r1, lr
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46a6      	mov	lr, r4
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x2a4>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x2a0>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x212>
 8000ea2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eaa:	fa01 f707 	lsl.w	r7, r1, r7
 8000eae:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb2:	40f1      	lsrs	r1, r6
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	f1c2 0320 	rsb	r3, r2, #32
 8000ec6:	40d8      	lsrs	r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee4:	0c0b      	lsrs	r3, r1, #16
 8000ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eea:	fb00 f60e 	mul.w	r6, r0, lr
 8000eee:	429e      	cmp	r6, r3
 8000ef0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x260>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b8>
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b8>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	b289      	uxth	r1, r1
 8000f0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f10:	fb07 3316 	mls	r3, r7, r6, r3
 8000f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f18:	fb06 f30e 	mul.w	r3, r6, lr
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x28a>
 8000f20:	eb1c 0101 	adds.w	r1, ip, r1
 8000f24:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0x104>
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e705      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e3      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6f8      	b.n	8000d3a <__udivmoddi4+0x92>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f58:	4646      	mov	r6, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x28a>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1e2>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b8>
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x12c>
 8000f6e:	4630      	mov	r0, r6
 8000f70:	e709      	b.n	8000d86 <__udivmoddi4+0xde>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x156>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f001 fbd6 	bl	800273a <null_ptr_check>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d131      	bne.n	8000ffe <bmp3_init+0x82>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7a1b      	ldrb	r3, [r3, #8]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d003      	beq.n	8000faa <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	729a      	strb	r2, [r3, #10]
 8000fa8:	e002      	b.n	8000fb0 <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	729a      	strb	r2, [r3, #10]

	/* Read the chip-id of bmp3 sensor */
        //rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
	
        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 8000fb0:	f107 010e 	add.w	r1, r7, #14
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f000 f826 	bl	800100a <bmp3_get_regs>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d119      	bne.n	8000ffe <bmp3_init+0x82>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 8000fca:	7bbb      	ldrb	r3, [r7, #14]
 8000fcc:	2b50      	cmp	r3, #80	; 0x50
 8000fce:	d002      	beq.n	8000fd6 <bmp3_init+0x5a>
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
 8000fd2:	2b60      	cmp	r3, #96	; 0x60
 8000fd4:	d111      	bne.n	8000ffa <bmp3_init+0x7e>
            {
                dev->chip_id = chip_id;
 8000fd6:	7bba      	ldrb	r2, [r7, #14]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 f9ae 	bl	800133e <bmp3_soft_reset>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8000fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d107      	bne.n	8000ffe <bmp3_init+0x82>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 fb4e 	bl	8001690 <get_calib_data>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8000ff8:	e001      	b.n	8000ffe <bmp3_init+0x82>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 8000ffa:	23f9      	movs	r3, #249	; 0xf9
 8000ffc:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 800100a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800100e:	b08b      	sub	sp, #44	; 0x2c
 8001010:	af00      	add	r7, sp, #0
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	4603      	mov	r3, r0
 800101a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800101c:	6838      	ldr	r0, [r7, #0]
 800101e:	f001 fb8c 	bl	800273a <null_ptr_check>
 8001022:	4603      	mov	r3, r0
 8001024:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 8001028:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800102c:	2b00      	cmp	r3, #0
 800102e:	d172      	bne.n	8001116 <bmp3_get_regs+0x10c>
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d06f      	beq.n	8001116 <bmp3_get_regs+0x10c>
    {
 8001036:	466b      	mov	r3, sp
 8001038:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	7a9b      	ldrb	r3, [r3, #10]
 800103e:	461a      	mov	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4413      	add	r3, r2
 8001044:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	7a9b      	ldrb	r3, [r3, #10]
 800104a:	461a      	mov	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	18d1      	adds	r1, r2, r3
 8001050:	460b      	mov	r3, r1
 8001052:	3b01      	subs	r3, #1
 8001054:	61bb      	str	r3, [r7, #24]
 8001056:	2300      	movs	r3, #0
 8001058:	4688      	mov	r8, r1
 800105a:	4699      	mov	r9, r3
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001068:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800106c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001070:	2300      	movs	r3, #0
 8001072:	460c      	mov	r4, r1
 8001074:	461d      	mov	r5, r3
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	00eb      	lsls	r3, r5, #3
 8001080:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001084:	00e2      	lsls	r2, r4, #3
 8001086:	1dcb      	adds	r3, r1, #7
 8001088:	08db      	lsrs	r3, r3, #3
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	ebad 0d03 	sub.w	sp, sp, r3
 8001090:	466b      	mov	r3, sp
 8001092:	3300      	adds	r3, #0
 8001094:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	7a1b      	ldrb	r3, [r3, #8]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d025      	beq.n	80010ea <bmp3_get_regs+0xe0>
        {
            reg_addr = reg_addr | 0x80;
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010a4:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	68dc      	ldr	r4, [r3, #12]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	7bf8      	ldrb	r0, [r7, #15]
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	6979      	ldr	r1, [r7, #20]
 80010b4:	47a0      	blx	r4
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
 80010c2:	e00d      	b.n	80010e0 <bmp3_get_regs+0xd6>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	7a9b      	ldrb	r3, [r3, #10]
 80010c8:	461a      	mov	r2, r3
 80010ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010cc:	441a      	add	r2, r3
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	440b      	add	r3, r1
 80010d4:	6979      	ldr	r1, [r7, #20]
 80010d6:	5c8a      	ldrb	r2, [r1, r2]
 80010d8:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	3301      	adds	r3, #1
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
 80010e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d3ed      	bcc.n	80010c4 <bmp3_get_regs+0xba>
 80010e8:	e00b      	b.n	8001102 <bmp3_get_regs+0xf8>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	68dc      	ldr	r4, [r3, #12]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	7bf8      	ldrb	r0, [r7, #15]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	68b9      	ldr	r1, [r7, #8]
 80010f8:	47a0      	blx	r4
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d002      	beq.n	8001112 <bmp3_get_regs+0x108>
        {
            rslt = BMP3_E_COMM_FAIL;
 800110c:	23fe      	movs	r3, #254	; 0xfe
 800110e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001112:	46b5      	mov	sp, r6
    {
 8001114:	e002      	b.n	800111c <bmp3_get_regs+0x112>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001116:	23ff      	movs	r3, #255	; 0xff
 8001118:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }

    return rslt;
 800111c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
}
 8001120:	4618      	mov	r0, r3
 8001122:	372c      	adds	r7, #44	; 0x2c
 8001124:	46bd      	mov	sp, r7
 8001126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800112a <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 800112a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800112e:	b089      	sub	sp, #36	; 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	466b      	mov	r3, sp
 800113c:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	0059      	lsls	r1, r3, #1
 8001142:	460b      	mov	r3, r1
 8001144:	3b01      	subs	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	2300      	movs	r3, #0
 800114a:	4688      	mov	r8, r1
 800114c:	4699      	mov	r9, r3
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800115a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800115e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001162:	2300      	movs	r3, #0
 8001164:	460c      	mov	r4, r1
 8001166:	461d      	mov	r5, r3
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	00eb      	lsls	r3, r5, #3
 8001172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001176:	00e2      	lsls	r2, r4, #3
 8001178:	1dcb      	adds	r3, r1, #7
 800117a:	08db      	lsrs	r3, r3, #3
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	ebad 0d03 	sub.w	sp, sp, r3
 8001182:	466b      	mov	r3, sp
 8001184:	3300      	adds	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001188:	6838      	ldr	r0, [r7, #0]
 800118a:	f001 fad6 	bl	800273a <null_ptr_check>
 800118e:	4603      	mov	r3, r0
 8001190:	76fb      	strb	r3, [r7, #27]

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001192:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d14c      	bne.n	8001234 <bmp3_set_regs+0x10a>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d049      	beq.n	8001234 <bmp3_set_regs+0x10a>
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d046      	beq.n	8001234 <bmp3_set_regs+0x10a>
    {
        if (len != 0)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d040      	beq.n	800122e <bmp3_set_regs+0x104>
        {
            temp_buff[0] = reg_data[0];
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	781a      	ldrb	r2, [r3, #0]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	7a1b      	ldrb	r3, [r3, #8]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d114      	bne.n	80011e6 <bmp3_set_regs+0xbc>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80011bc:	2300      	movs	r3, #0
 80011be:	76bb      	strb	r3, [r7, #26]
 80011c0:	e00d      	b.n	80011de <bmp3_set_regs+0xb4>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80011c2:	7ebb      	ldrb	r3, [r7, #26]
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	781a      	ldrb	r2, [r3, #0]
 80011ca:	7ebb      	ldrb	r3, [r7, #26]
 80011cc:	68f9      	ldr	r1, [r7, #12]
 80011ce:	440b      	add	r3, r1
 80011d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80011d8:	7ebb      	ldrb	r3, [r7, #26]
 80011da:	3301      	adds	r3, #1
 80011dc:	76bb      	strb	r3, [r7, #26]
 80011de:	7ebb      	ldrb	r3, [r7, #26]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d8ed      	bhi.n	80011c2 <bmp3_set_regs+0x98>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d909      	bls.n	8001200 <bmp3_set_regs+0xd6>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	6939      	ldr	r1, [r7, #16]
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	f000 fa71 	bl	80016da <interleave_reg_addr>
                temp_len = len * 2;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	61fb      	str	r3, [r7, #28]
 80011fe:	e001      	b.n	8001204 <bmp3_set_regs+0xda>
            }
            else
            {
                temp_len = len;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	61fb      	str	r3, [r7, #28]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	691c      	ldr	r4, [r3, #16]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	7818      	ldrb	r0, [r3, #0]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	69fa      	ldr	r2, [r7, #28]
 8001212:	6939      	ldr	r1, [r7, #16]
 8001214:	47a0      	blx	r4
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d008      	beq.n	800123a <bmp3_set_regs+0x110>
            {
                rslt = BMP3_E_COMM_FAIL;
 8001228:	23fe      	movs	r3, #254	; 0xfe
 800122a:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 800122c:	e005      	b.n	800123a <bmp3_set_regs+0x110>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 800122e:	23fa      	movs	r3, #250	; 0xfa
 8001230:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 8001232:	e002      	b.n	800123a <bmp3_set_regs+0x110>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001234:	23ff      	movs	r3, #255	; 0xff
 8001236:	76fb      	strb	r3, [r7, #27]
 8001238:	e000      	b.n	800123c <bmp3_set_regs+0x112>
        if (len != 0)
 800123a:	bf00      	nop
    }

    return rslt;
 800123c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001240:	46b5      	mov	sp, r6
}
 8001242:	4618      	mov	r0, r3
 8001244:	3724      	adds	r7, #36	; 0x24
 8001246:	46bd      	mov	sp, r7
 8001248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800124c <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	75fb      	strb	r3, [r7, #23]

    if (settings != NULL)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d03a      	beq.n	80012d8 <bmp3_set_sensor_settings+0x8c>
    {

        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 8001262:	68f9      	ldr	r1, [r7, #12]
 8001264:	2006      	movs	r0, #6
 8001266:	f001 fa50 	bl	800270a <are_settings_changed>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d006      	beq.n	800127e <bmp3_set_sensor_settings+0x32>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, settings, dev);
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	68b9      	ldr	r1, [r7, #8]
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f000 fa96 	bl	80017a6 <set_pwr_ctrl_settings>
 800127a:	4603      	mov	r3, r0
 800127c:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings))
 800127e:	68f9      	ldr	r1, [r7, #12]
 8001280:	20f0      	movs	r0, #240	; 0xf0
 8001282:	f001 fa42 	bl	800270a <are_settings_changed>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d006      	beq.n	800129a <bmp3_set_sensor_settings+0x4e>
        {
            /* Set the over sampling, ODR and filter settings */
            rslt = set_odr_filter_settings(desired_settings, settings, dev);
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	68b9      	ldr	r1, [r7, #8]
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f000 fad7 	bl	8001844 <set_odr_filter_settings>
 8001296:	4603      	mov	r3, r0
 8001298:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings))
 800129a:	68f9      	ldr	r1, [r7, #12]
 800129c:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 80012a0:	f001 fa33 	bl	800270a <are_settings_changed>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d006      	beq.n	80012b8 <bmp3_set_sensor_settings+0x6c>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, settings, dev);
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	68f8      	ldr	r0, [r7, #12]
 80012b0:	f000 fb36 	bl	8001920 <set_int_ctrl_settings>
 80012b4:	4603      	mov	r3, r0
 80012b6:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings))
 80012b8:	68f9      	ldr	r1, [r7, #12]
 80012ba:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80012be:	f001 fa24 	bl	800270a <are_settings_changed>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d009      	beq.n	80012dc <bmp3_set_sensor_settings+0x90>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, settings, dev);
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	68b9      	ldr	r1, [r7, #8]
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f000 fba1 	bl	8001a14 <set_advance_settings>
 80012d2:	4603      	mov	r3, r0
 80012d4:	75fb      	strb	r3, [r7, #23]
 80012d6:	e001      	b.n	80012dc <bmp3_set_sensor_settings+0x90>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80012d8:	23ff      	movs	r3, #255	; 0xff
 80012da:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80012dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <bmp3_get_status>:
 * @brief This API gets the command ready, data ready for pressure and
 * temperature and interrupt (fifo watermark, fifo full, data ready) and
 * error status from the sensor.
 */
int8_t bmp3_get_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (status != NULL)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d01a      	beq.n	800132e <bmp3_get_status+0x46>
    {
        rslt = get_sensor_status(status, dev);
 80012f8:	6839      	ldr	r1, [r7, #0]
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f001 fa41 	bl	8002782 <get_sensor_status>
 8001300:	4603      	mov	r3, r0
 8001302:	73fb      	strb	r3, [r7, #15]

        /* Proceed further if the earlier operation is fine */
        if (rslt == BMP3_OK)
 8001304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d112      	bne.n	8001332 <bmp3_get_status+0x4a>
        {
            rslt = get_int_status(status, dev);
 800130c:	6839      	ldr	r1, [r7, #0]
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f001 fa7a 	bl	8002808 <get_int_status>
 8001314:	4603      	mov	r3, r0
 8001316:	73fb      	strb	r3, [r7, #15]

            /* Proceed further if the earlier operation is fine */
            if (rslt == BMP3_OK)
 8001318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d108      	bne.n	8001332 <bmp3_get_status+0x4a>
            {
                /* Get the error status */
                rslt = get_err_status(status, dev);
 8001320:	6839      	ldr	r1, [r7, #0]
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f001 fa9e 	bl	8002864 <get_err_status>
 8001328:	4603      	mov	r3, r0
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	e001      	b.n	8001332 <bmp3_get_status+0x4a>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800132e:	23ff      	movs	r3, #255	; 0xff
 8001330:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001332:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b084      	sub	sp, #16
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 8001346:	237e      	movs	r3, #126	; 0x7e
 8001348:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 800134a:	23b6      	movs	r3, #182	; 0xb6
 800134c:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for command ready status */
    rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 800134e:	f107 010c 	add.w	r1, r7, #12
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2201      	movs	r2, #1
 8001356:	2003      	movs	r0, #3
 8001358:	f7ff fe57 	bl	800100a <bmp3_get_regs>
 800135c:	4603      	mov	r3, r0
 800135e:	73fb      	strb	r3, [r7, #15]

    /* Device is ready to accept new command */
    if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 8001360:	7b3b      	ldrb	r3, [r7, #12]
 8001362:	f003 0310 	and.w	r3, r3, #16
 8001366:	2b00      	cmp	r3, #0
 8001368:	d02d      	beq.n	80013c6 <bmp3_soft_reset+0x88>
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d129      	bne.n	80013c6 <bmp3_soft_reset+0x88>
    {
        /* Write the soft reset command in the sensor */
        rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001372:	f107 010d 	add.w	r1, r7, #13
 8001376:	f107 000e 	add.w	r0, r7, #14
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f7ff fed4 	bl	800112a <bmp3_set_regs>
 8001382:	4603      	mov	r3, r0
 8001384:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d11b      	bne.n	80013c6 <bmp3_soft_reset+0x88>
        {
            /* Wait for 2 ms */
            dev->delay_us(2000, dev->intf_ptr);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6852      	ldr	r2, [r2, #4]
 8001396:	4611      	mov	r1, r2
 8001398:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800139c:	4798      	blx	r3

            /* Read for command error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 800139e:	f107 010b 	add.w	r1, r7, #11
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	2002      	movs	r0, #2
 80013a8:	f7ff fe2f 	bl	800100a <bmp3_get_regs>
 80013ac:	4603      	mov	r3, r0
 80013ae:	73fb      	strb	r3, [r7, #15]

            /* check for command error status */
            if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 80013b0:	7afb      	ldrb	r3, [r7, #11]
 80013b2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d103      	bne.n	80013c2 <bmp3_soft_reset+0x84>
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <bmp3_soft_reset+0x88>
            {
                /* Command not written hence return
                 * error */
                rslt = BMP3_E_CMD_EXEC_FAILED;
 80013c2:	23fc      	movs	r3, #252	; 0xfc
 80013c4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80013c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b084      	sub	sp, #16
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80013dc:	6838      	ldr	r0, [r7, #0]
 80013de:	f001 f9ac 	bl	800273a <null_ptr_check>
 80013e2:	4603      	mov	r3, r0
 80013e4:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BMP3_OK) && (settings != NULL))
 80013e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d139      	bne.n	8001462 <bmp3_set_op_mode+0x90>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d036      	beq.n	8001462 <bmp3_set_op_mode+0x90>
    {
        uint8_t curr_mode = settings->op_mode;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	73bb      	strb	r3, [r7, #14]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 80013fa:	f107 030d 	add.w	r3, r7, #13
 80013fe:	6839      	ldr	r1, [r7, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f000 f838 	bl	8001476 <bmp3_get_op_mode>
 8001406:	4603      	mov	r3, r0
 8001408:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if ((last_set_mode != BMP3_MODE_SLEEP) && (rslt == BMP3_OK))
 800140a:	7b7b      	ldrb	r3, [r7, #13]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d010      	beq.n	8001432 <bmp3_set_op_mode+0x60>
 8001410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10c      	bne.n	8001432 <bmp3_set_op_mode+0x60>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 8001418:	6838      	ldr	r0, [r7, #0]
 800141a:	f000 f8f7 	bl	800160c <put_device_to_sleep>
 800141e:	4603      	mov	r3, r0
 8001420:	73fb      	strb	r3, [r7, #15]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	6852      	ldr	r2, [r2, #4]
 800142a:	4611      	mov	r1, r2
 800142c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001430:	4798      	blx	r3
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 8001432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d116      	bne.n	8001468 <bmp3_set_op_mode+0x96>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 800143a:	7bbb      	ldrb	r3, [r7, #14]
 800143c:	2b03      	cmp	r3, #3
 800143e:	d106      	bne.n	800144e <bmp3_set_op_mode+0x7c>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(settings, dev);
 8001440:	6839      	ldr	r1, [r7, #0]
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 f879 	bl	800153a <set_normal_mode>
 8001448:	4603      	mov	r3, r0
 800144a:	73fb      	strb	r3, [r7, #15]
    {
 800144c:	e00c      	b.n	8001468 <bmp3_set_op_mode+0x96>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 800144e:	7bbb      	ldrb	r3, [r7, #14]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d109      	bne.n	8001468 <bmp3_set_op_mode+0x96>
            {
                /* Set forced mode */
                rslt = write_power_mode(settings, dev);
 8001454:	6839      	ldr	r1, [r7, #0]
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 f8a2 	bl	80015a0 <write_power_mode>
 800145c:	4603      	mov	r3, r0
 800145e:	73fb      	strb	r3, [r7, #15]
    {
 8001460:	e002      	b.n	8001468 <bmp3_set_op_mode+0x96>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001462:	23ff      	movs	r3, #255	; 0xff
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	e000      	b.n	800146a <bmp3_set_op_mode+0x98>
    {
 8001468:	bf00      	nop
    }

    return rslt;
 800146a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (op_mode != NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d011      	beq.n	80014aa <bmp3_get_op_mode+0x34>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	2201      	movs	r2, #1
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	201b      	movs	r0, #27
 800148e:	f7ff fdbc 	bl	800100a <bmp3_get_regs>
 8001492:	4603      	mov	r3, r0
 8001494:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	111b      	asrs	r3, r3, #4
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	701a      	strb	r2, [r3, #0]
 80014a8:	e001      	b.n	80014ae <bmp3_get_op_mode+0x38>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80014aa:	23ff      	movs	r3, #255	; 0xff
 80014ac:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <bmp3_get_sensor_data>:
 * @brief This API reads the pressure, temperature or both data from the
 * sensor, compensates the data and store it in the bmp3_data structure
 * instance passed by the user.
 */
int8_t bmp3_get_sensor_data(uint8_t sensor_comp, struct bmp3_data *comp_data, struct bmp3_dev *dev)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b08a      	sub	sp, #40	; 0x28
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure and temperature data read from
     * the sensor */
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
 80014cc:	2300      	movs	r3, #0
 80014ce:	84bb      	strh	r3, [r7, #36]	; 0x24
    struct bmp3_uncomp_data uncomp_data = { 0 };
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]

    if (comp_data != NULL)
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d021      	beq.n	8001528 <bmp3_get_sensor_data+0x6e>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 80014e4:	f107 0120 	add.w	r1, r7, #32
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2206      	movs	r2, #6
 80014ec:	2004      	movs	r0, #4
 80014ee:	f7ff fd8c 	bl	800100a <bmp3_get_regs>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BMP3_OK)
 80014f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d116      	bne.n	800152e <bmp3_get_sensor_data+0x74>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 8001500:	f107 0210 	add.w	r2, r7, #16
 8001504:	f107 0320 	add.w	r3, r7, #32
 8001508:	4611      	mov	r1, r2
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fc70 	bl	8001df0 <parse_sensor_data>

            /* Compensate the pressure/temperature/both data read
             * from the sensor */
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3318      	adds	r3, #24
 8001514:	f107 0110 	add.w	r1, r7, #16
 8001518:	7bf8      	ldrb	r0, [r7, #15]
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	f000 fca3 	bl	8001e66 <compensate_data>
 8001520:	4603      	mov	r3, r0
 8001522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001526:	e002      	b.n	800152e <bmp3_get_sensor_data+0x74>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001528:	23ff      	movs	r3, #255	; 0xff
 800152a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 800152e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001532:	4618      	mov	r0, r3
 8001534:	3728      	adds	r7, #40	; 0x28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b084      	sub	sp, #16
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(settings, dev);
 8001544:	6839      	ldr	r1, [r7, #0]
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 f888 	bl	800165c <validate_normal_mode_settings>
 800154c:	4603      	mov	r3, r0
 800154e:	73fb      	strb	r3, [r7, #15]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 8001550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d11d      	bne.n	8001594 <set_normal_mode+0x5a>
    {
        rslt = write_power_mode(settings, dev);
 8001558:	6839      	ldr	r1, [r7, #0]
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f820 	bl	80015a0 <write_power_mode>
 8001560:	4603      	mov	r3, r0
 8001562:	73fb      	strb	r3, [r7, #15]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 8001564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d113      	bne.n	8001594 <set_normal_mode+0x5a>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 800156c:	f107 010e 	add.w	r1, r7, #14
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	2201      	movs	r2, #1
 8001574:	2002      	movs	r0, #2
 8001576:	f7ff fd48 	bl	800100a <bmp3_get_regs>
 800157a:	4603      	mov	r3, r0
 800157c:	73fb      	strb	r3, [r7, #15]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 800157e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d106      	bne.n	8001594 <set_normal_mode+0x5a>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 8001586:	7bbb      	ldrb	r3, [r7, #14]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <set_normal_mode+0x5a>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 8001590:	23fb      	movs	r3, #251	; 0xfb
 8001592:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001594:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(const struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80015aa:	231b      	movs	r3, #27
 80015ac:	737b      	strb	r3, [r7, #13]
    uint8_t op_mode = settings->op_mode;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 80015b4:	7b78      	ldrb	r0, [r7, #13]
 80015b6:	f107 010c 	add.w	r1, r7, #12
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2201      	movs	r2, #1
 80015be:	f7ff fd24 	bl	800100a <bmp3_get_regs>
 80015c2:	4603      	mov	r3, r0
 80015c4:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 80015c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d118      	bne.n	8001600 <write_power_mode+0x60>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 80015ce:	7b3b      	ldrb	r3, [r7, #12]
 80015d0:	b25b      	sxtb	r3, r3
 80015d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80015d6:	b25a      	sxtb	r2, r3
 80015d8:	7bbb      	ldrb	r3, [r7, #14]
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	b25b      	sxtb	r3, r3
 80015de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	733b      	strb	r3, [r7, #12]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 80015ec:	f107 010c 	add.w	r1, r7, #12
 80015f0:	f107 000d 	add.w	r0, r7, #13
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f7ff fd97 	bl	800112a <bmp3_set_regs>
 80015fc:	4603      	mov	r3, r0
 80015fe:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001600:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8001614:	231b      	movs	r3, #27
 8001616:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 8001618:	f107 010d 	add.w	r1, r7, #13
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	201b      	movs	r0, #27
 8001622:	f7ff fcf2 	bl	800100a <bmp3_get_regs>
 8001626:	4603      	mov	r3, r0
 8001628:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800162a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10e      	bne.n	8001650 <put_device_to_sleep+0x44>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 8001632:	7b7b      	ldrb	r3, [r7, #13]
 8001634:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001638:	b2db      	uxtb	r3, r3
 800163a:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 800163c:	f107 010d 	add.w	r1, r7, #13
 8001640:	f107 000e 	add.w	r0, r7, #14
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f7ff fd6f 	bl	800112a <bmp3_set_regs>
 800164c:	4603      	mov	r3, r0
 800164e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001650:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = get_odr_filter_settings(settings, dev);
 8001666:	6839      	ldr	r1, [r7, #0]
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fa26 	bl	8001aba <get_odr_filter_settings>
 800166e:	4603      	mov	r3, r0
 8001670:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d104      	bne.n	8001684 <validate_normal_mode_settings+0x28>
    {
        rslt = validate_osr_and_odr_settings(settings);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 fa3a 	bl	8001af4 <validate_osr_and_odr_settings>
 8001680:	4603      	mov	r3, r0
 8001682:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001684:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 8001698:	2331      	movs	r3, #49	; 0x31
 800169a:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	741a      	strb	r2, [r3, #16]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 80016b0:	f107 0108 	add.w	r1, r7, #8
 80016b4:	7ff8      	ldrb	r0, [r7, #31]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2215      	movs	r2, #21
 80016ba:	f7ff fca6 	bl	800100a <bmp3_get_regs>
 80016be:	4603      	mov	r3, r0
 80016c0:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 fc3f 	bl	8001f4c <parse_calib_data>

    return rslt;
 80016ce:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3720      	adds	r7, #32
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 80016da:	b480      	push	{r7}
 80016dc:	b087      	sub	sp, #28
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 80016e8:	2301      	movs	r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	e015      	b.n	800171a <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	441a      	add	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	3b01      	subs	r3, #1
 80016fa:	68b9      	ldr	r1, [r7, #8]
 80016fc:	440b      	add	r3, r1
 80016fe:	7812      	ldrb	r2, [r2, #0]
 8001700:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	441a      	add	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	440b      	add	r3, r1
 8001710:	7812      	ldrb	r2, [r2, #0]
 8001712:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	3301      	adds	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d3e5      	bcc.n	80016ee <interleave_reg_addr+0x14>
    }
}
 8001722:	bf00      	nop
 8001724:	bf00      	nop
 8001726:	371c      	adds	r7, #28
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	73fb      	strb	r3, [r7, #15]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	4413      	add	r3, r2
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	b2da      	uxtb	r2, r3
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	10db      	asrs	r3, r3, #3
 800175a:	b2db      	uxtb	r3, r3
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	b2da      	uxtb	r2, r3
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	3301      	adds	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	f003 031f 	and.w	r3, r3, #31
 8001778:	b2da      	uxtb	r2, r3
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	3302      	adds	r3, #2
 8001782:	73fb      	strb	r3, [r7, #15]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	105b      	asrs	r3, r3, #1
 800178e:	b2db      	uxtb	r3, r3
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	b2da      	uxtb	r2, r3
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	709a      	strb	r2, [r3, #2]
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <set_pwr_ctrl_settings>:
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	60f8      	str	r0, [r7, #12]
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80017b2:	231b      	movs	r3, #27
 80017b4:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80017b6:	7db8      	ldrb	r0, [r7, #22]
 80017b8:	f107 0115 	add.w	r1, r7, #21
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f7ff fc23 	bl	800100a <bmp3_get_regs>
 80017c4:	4603      	mov	r3, r0
 80017c6:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 80017c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d132      	bne.n	8001836 <set_pwr_ctrl_settings+0x90>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00e      	beq.n	80017f8 <set_pwr_ctrl_settings+0x52>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, settings->press_en);
 80017da:	7d7b      	ldrb	r3, [r7, #21]
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	f023 0301 	bic.w	r3, r3, #1
 80017e2:	b25a      	sxtb	r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	785b      	ldrb	r3, [r3, #1]
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	b25b      	sxtb	r3, r3
 80017f0:	4313      	orrs	r3, r2
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00f      	beq.n	8001822 <set_pwr_ctrl_settings+0x7c>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, settings->temp_en);
 8001802:	7d7b      	ldrb	r3, [r7, #21]
 8001804:	b25b      	sxtb	r3, r3
 8001806:	f023 0302 	bic.w	r3, r3, #2
 800180a:	b25a      	sxtb	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	789b      	ldrb	r3, [r3, #2]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	b25b      	sxtb	r3, r3
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	b25b      	sxtb	r3, r3
 800181a:	4313      	orrs	r3, r2
 800181c:	b25b      	sxtb	r3, r3
 800181e:	b2db      	uxtb	r3, r3
 8001820:	757b      	strb	r3, [r7, #21]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001822:	f107 0115 	add.w	r1, r7, #21
 8001826:	f107 0016 	add.w	r0, r7, #22
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f7ff fc7c 	bl	800112a <bmp3_set_regs>
 8001832:	4603      	mov	r3, r0
 8001834:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001836:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af02      	add	r7, sp, #8
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 8001850:	4b32      	ldr	r3, [pc, #200]	; (800191c <set_odr_filter_settings+0xd8>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	83bb      	strh	r3, [r7, #28]
 8001856:	2300      	movs	r3, #0
 8001858:	77bb      	strb	r3, [r7, #30]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	75fb      	strb	r3, [r7, #23]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 800185e:	f107 0118 	add.w	r1, r7, #24
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2204      	movs	r2, #4
 8001866:	201c      	movs	r0, #28
 8001868:	f7ff fbcf 	bl	800100a <bmp3_get_regs>
 800186c:	4603      	mov	r3, r0
 800186e:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMP3_OK)
 8001870:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d14a      	bne.n	800190e <set_odr_filter_settings+0xca>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 8001878:	68f9      	ldr	r1, [r7, #12]
 800187a:	2030      	movs	r0, #48	; 0x30
 800187c:	f000 ff45 	bl	800270a <are_settings_changed>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00b      	beq.n	800189e <set_odr_filter_settings+0x5a>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, settings);
 8001886:	f107 0017 	add.w	r0, r7, #23
 800188a:	f107 0218 	add.w	r2, r7, #24
 800188e:	f107 011c 	add.w	r1, r7, #28
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	4603      	mov	r3, r0
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f000 f9e1 	bl	8001c60 <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 800189e:	68f9      	ldr	r1, [r7, #12]
 80018a0:	2080      	movs	r0, #128	; 0x80
 80018a2:	f000 ff32 	bl	800270a <are_settings_changed>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d008      	beq.n	80018be <set_odr_filter_settings+0x7a>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, settings);
 80018ac:	f107 0217 	add.w	r2, r7, #23
 80018b0:	f107 0118 	add.w	r1, r7, #24
 80018b4:	f107 001c 	add.w	r0, r7, #28
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	f000 fa29 	bl	8001d10 <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 80018be:	68f9      	ldr	r1, [r7, #12]
 80018c0:	2040      	movs	r0, #64	; 0x40
 80018c2:	f000 ff22 	bl	800270a <are_settings_changed>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <set_odr_filter_settings+0x9a>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, settings);
 80018cc:	f107 0217 	add.w	r2, r7, #23
 80018d0:	f107 0118 	add.w	r1, r7, #24
 80018d4:	f107 001c 	add.w	r0, r7, #28
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f000 fa53 	bl	8001d84 <fill_filter_data>
        }

        if (settings->op_mode == BMP3_MODE_NORMAL)
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d104      	bne.n	80018f0 <set_odr_filter_settings+0xac>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(settings);
 80018e6:	68b8      	ldr	r0, [r7, #8]
 80018e8:	f000 f904 	bl	8001af4 <validate_osr_and_odr_settings>
 80018ec:	4603      	mov	r3, r0
 80018ee:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMP3_OK)
 80018f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10a      	bne.n	800190e <set_odr_filter_settings+0xca>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
 80018fa:	461a      	mov	r2, r3
 80018fc:	f107 0118 	add.w	r1, r7, #24
 8001900:	f107 001c 	add.w	r0, r7, #28
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f7ff fc10 	bl	800112a <bmp3_set_regs>
 800190a:	4603      	mov	r3, r0
 800190c:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 800190e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3720      	adds	r7, #32
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	0801cb38 	.word	0x0801cb38

08001920 <set_int_ctrl_settings>:
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 800192c:	2319      	movs	r3, #25
 800192e:	757b      	strb	r3, [r7, #21]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001930:	7d78      	ldrb	r0, [r7, #21]
 8001932:	f107 0116 	add.w	r1, r7, #22
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f7ff fb66 	bl	800100a <bmp3_get_regs>
 800193e:	4603      	mov	r3, r0
 8001940:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8001942:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d15e      	bne.n	8001a08 <set_int_ctrl_settings+0xe8>
    {
        int_settings = settings->int_settings;
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	f107 0310 	add.w	r3, r7, #16
 8001950:	3207      	adds	r2, #7
 8001952:	6810      	ldr	r0, [r2, #0]
 8001954:	6018      	str	r0, [r3, #0]

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00d      	beq.n	800197c <set_int_ctrl_settings+0x5c>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 8001960:	7dbb      	ldrb	r3, [r7, #22]
 8001962:	b25b      	sxtb	r3, r3
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	b25a      	sxtb	r2, r3
 800196a:	7c3b      	ldrb	r3, [r7, #16]
 800196c:	b25b      	sxtb	r3, r3
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	b25b      	sxtb	r3, r3
 8001974:	4313      	orrs	r3, r2
 8001976:	b25b      	sxtb	r3, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00e      	beq.n	80019a4 <set_int_ctrl_settings+0x84>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 8001986:	7dbb      	ldrb	r3, [r7, #22]
 8001988:	b25b      	sxtb	r3, r3
 800198a:	f023 0302 	bic.w	r3, r3, #2
 800198e:	b25a      	sxtb	r2, r3
 8001990:	7c7b      	ldrb	r3, [r7, #17]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	b25b      	sxtb	r3, r3
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	b25b      	sxtb	r3, r3
 800199c:	4313      	orrs	r3, r2
 800199e:	b25b      	sxtb	r3, r3
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00e      	beq.n	80019cc <set_int_ctrl_settings+0xac>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 80019ae:	7dbb      	ldrb	r3, [r7, #22]
 80019b0:	b25b      	sxtb	r3, r3
 80019b2:	f023 0304 	bic.w	r3, r3, #4
 80019b6:	b25a      	sxtb	r2, r3
 80019b8:	7cbb      	ldrb	r3, [r7, #18]
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	b25b      	sxtb	r3, r3
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	b25b      	sxtb	r3, r3
 80019c4:	4313      	orrs	r3, r2
 80019c6:	b25b      	sxtb	r3, r3
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00e      	beq.n	80019f4 <set_int_ctrl_settings+0xd4>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 80019d6:	7dbb      	ldrb	r3, [r7, #22]
 80019d8:	b25b      	sxtb	r3, r3
 80019da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019de:	b25a      	sxtb	r2, r3
 80019e0:	7cfb      	ldrb	r3, [r7, #19]
 80019e2:	019b      	lsls	r3, r3, #6
 80019e4:	b25b      	sxtb	r3, r3
 80019e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ea:	b25b      	sxtb	r3, r3
 80019ec:	4313      	orrs	r3, r2
 80019ee:	b25b      	sxtb	r3, r3
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	75bb      	strb	r3, [r7, #22]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 80019f4:	f107 0116 	add.w	r1, r7, #22
 80019f8:	f107 0015 	add.w	r0, r7, #21
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f7ff fb93 	bl	800112a <bmp3_set_regs>
 8001a04:	4603      	mov	r3, r0
 8001a06:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001a08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <set_advance_settings>:
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, const struct bmp3_settings *settings,
                                   struct bmp3_dev *dev)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = settings->adv_settings;
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	f107 0310 	add.w	r3, r7, #16
 8001a26:	320b      	adds	r2, #11
 8001a28:	8812      	ldrh	r2, [r2, #0]
 8001a2a:	801a      	strh	r2, [r3, #0]

    reg_addr = BMP3_REG_IF_CONF;
 8001a2c:	231a      	movs	r3, #26
 8001a2e:	75bb      	strb	r3, [r7, #22]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001a30:	7db8      	ldrb	r0, [r7, #22]
 8001a32:	f107 0115 	add.w	r1, r7, #21
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f7ff fae6 	bl	800100a <bmp3_get_regs>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8001a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d131      	bne.n	8001aae <set_advance_settings+0x9a>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00e      	beq.n	8001a72 <set_advance_settings+0x5e>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 8001a54:	7d7b      	ldrb	r3, [r7, #21]
 8001a56:	b25b      	sxtb	r3, r3
 8001a58:	f023 0302 	bic.w	r3, r3, #2
 8001a5c:	b25a      	sxtb	r2, r3
 8001a5e:	7c3b      	ldrb	r3, [r7, #16]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	b25b      	sxtb	r3, r3
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	b25b      	sxtb	r3, r3
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	b25b      	sxtb	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00e      	beq.n	8001a9a <set_advance_settings+0x86>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 8001a7c:	7d7b      	ldrb	r3, [r7, #21]
 8001a7e:	b25b      	sxtb	r3, r3
 8001a80:	f023 0304 	bic.w	r3, r3, #4
 8001a84:	b25a      	sxtb	r2, r3
 8001a86:	7c7b      	ldrb	r3, [r7, #17]
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	b25b      	sxtb	r3, r3
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	b25b      	sxtb	r3, r3
 8001a92:	4313      	orrs	r3, r2
 8001a94:	b25b      	sxtb	r3, r3
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	757b      	strb	r3, [r7, #21]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001a9a:	f107 0115 	add.w	r1, r7, #21
 8001a9e:	f107 0016 	add.w	r0, r7, #22
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f7ff fb40 	bl	800112a <bmp3_set_regs>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001aae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8001ac4:	f107 0108 	add.w	r1, r7, #8
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	2204      	movs	r2, #4
 8001acc:	201c      	movs	r0, #28
 8001ace:	f7ff fa9c 	bl	800100a <bmp3_get_regs>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	73fb      	strb	r3, [r7, #15]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &settings->odr_filter);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	1cda      	adds	r2, r3, #3
 8001ada:	f107 0308 	add.w	r3, r7, #8
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fe25 	bl	8001730 <parse_odr_filter_settings>

    return rslt;
 8001ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_settings *settings)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b098      	sub	sp, #96	; 0x60
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 8001afc:	23ea      	movs	r3, #234	; 0xea
 8001afe:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t meas_t_p = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 8001b04:	4a1a      	ldr	r2, [pc, #104]	; (8001b70 <validate_osr_and_odr_settings+0x7c>)
 8001b06:	f107 030c 	add.w	r3, r7, #12
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	2248      	movs	r2, #72	; 0x48
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f018 f826 	bl	8019b60 <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (settings->press_en)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	785b      	ldrb	r3, [r3, #1]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d006      	beq.n	8001b2a <validate_osr_and_odr_settings+0x36>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(settings);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f83f 	bl	8001ba0 <calculate_press_meas_time>
 8001b22:	4602      	mov	r2, r0
 8001b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b26:	4413      	add	r3, r2
 8001b28:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    if (settings->temp_en)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	789b      	ldrb	r3, [r3, #2]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d006      	beq.n	8001b40 <validate_osr_and_odr_settings+0x4c>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(settings);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f864 	bl	8001c00 <calculate_temp_meas_time>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b3c:	4413      	add	r3, r2
 8001b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 8001b40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b44:	4413      	add	r3, r2
 8001b46:	65bb      	str	r3, [r7, #88]	; 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[settings->odr_filter.odr]);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	799b      	ldrb	r3, [r3, #6]
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	3360      	adds	r3, #96	; 0x60
 8001b50:	443b      	add	r3, r7
 8001b52:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001b56:	4619      	mov	r1, r3
 8001b58:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001b5a:	f000 f80b 	bl	8001b74 <verify_meas_time_and_odr_duration>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    return rslt;
 8001b64:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3760      	adds	r7, #96	; 0x60
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	0801cb3c 	.word	0x0801cb3c

08001b74 <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d202      	bcs.n	8001b8c <verify_meas_time_and_odr_duration+0x18>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	73fb      	strb	r3, [r7, #15]
 8001b8a:	e001      	b.n	8001b90 <verify_meas_time_and_odr_duration+0x1c>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 8001b8c:	23fd      	movs	r3, #253	; 0xfd
 8001b8e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_settings *settings)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	f107 030c 	add.w	r3, r7, #12
 8001bae:	3203      	adds	r2, #3
 8001bb0:	6810      	ldr	r0, [r2, #0]
 8001bb2:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bbc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 8001bc0:	7b3b      	ldrb	r3, [r7, #12]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	ed97 0b06 	vldr	d0, [r7, #24]
 8001bc8:	f000 fd7a 	bl	80026c0 <pow_bmp3>
 8001bcc:	ed87 0a05 	vstr	s0, [r7, #20]
    press_meas_t = (uint32_t)(BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 8001bd0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bd4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001bf8 <calculate_press_meas_time+0x58>
 8001bd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bdc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001bfc <calculate_press_meas_time+0x5c>
 8001be0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be8:	ee17 3a90 	vmov	r3, s15
 8001bec:	613b      	str	r3, [r7, #16]

    /* Output in microseconds */
    return press_meas_t;
 8001bee:	693b      	ldr	r3, [r7, #16]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3720      	adds	r7, #32
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	44fa0000 	.word	0x44fa0000
 8001bfc:	43c40000 	.word	0x43c40000

08001c00 <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_settings *settings)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	f107 030c 	add.w	r3, r7, #12
 8001c0e:	3203      	adds	r2, #3
 8001c10:	6810      	ldr	r0, [r2, #0]
 8001c12:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 8001c20:	7b7b      	ldrb	r3, [r7, #13]
 8001c22:	4618      	mov	r0, r3
 8001c24:	ed97 0b06 	vldr	d0, [r7, #24]
 8001c28:	f000 fd4a 	bl	80026c0 <pow_bmp3>
 8001c2c:	ed87 0a05 	vstr	s0, [r7, #20]
    temp_meas_t = (uint32_t)(BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 8001c30:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c34:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001c58 <calculate_temp_meas_time+0x58>
 8001c38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c3c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001c5c <calculate_temp_meas_time+0x5c>
 8001c40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c48:	ee17 3a90 	vmov	r3, s15
 8001c4c:	613b      	str	r3, [r7, #16]

    /* Output in uint32_t */
    return temp_meas_t;
 8001c4e:	693b      	ldr	r3, [r7, #16]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	44fa0000 	.word	0x44fa0000
 8001c5c:	439c8000 	.word	0x439c8000

08001c60 <fill_osr_data>:
static void fill_osr_data(uint32_t desired_settings,
                          uint8_t *addr,
                          uint8_t *reg_data,
                          uint8_t *len,
                          const struct bmp3_settings *settings)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8001c6e:	6a3a      	ldr	r2, [r7, #32]
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	3203      	adds	r2, #3
 8001c76:	6810      	ldr	r0, [r2, #0]
 8001c78:	6018      	str	r0, [r3, #0]

    if (desired_settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d03f      	beq.n	8001d04 <fill_osr_data+0xa4>
    {
        /* Pressure over sampling settings check */
        if (desired_settings & BMP3_SEL_PRESS_OS)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d013      	beq.n	8001cb6 <fill_osr_data+0x56>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	b25b      	sxtb	r3, r3
 8001c94:	f023 0307 	bic.w	r3, r3, #7
 8001c98:	b25a      	sxtb	r2, r3
 8001c9a:	7d3b      	ldrb	r3, [r7, #20]
 8001c9c:	b25b      	sxtb	r3, r3
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	b25b      	sxtb	r3, r3
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	b25a      	sxtb	r2, r3
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	4619      	mov	r1, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	440b      	add	r3, r1
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (desired_settings & BMP3_SEL_TEMP_OS)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f003 0320 	and.w	r3, r3, #32
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d014      	beq.n	8001cea <fill_osr_data+0x8a>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	b25b      	sxtb	r3, r3
 8001cc6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001cca:	b25a      	sxtb	r2, r3
 8001ccc:	7d7b      	ldrb	r3, [r7, #21]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	b25b      	sxtb	r3, r3
 8001cd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cd6:	b25b      	sxtb	r3, r3
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	b25a      	sxtb	r2, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	440b      	add	r3, r1
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	221c      	movs	r2, #28
 8001cf6:	701a      	strb	r2, [r3, #0]
        (*len)++;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	701a      	strb	r2, [r3, #0]
    }
}
 8001d04:	bf00      	nop
 8001d06:	371c      	adds	r7, #28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_settings *settings)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &settings->odr_filter;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	3303      	adds	r3, #3
 8001d22:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	78db      	ldrb	r3, [r3, #3]
 8001d28:	2b11      	cmp	r3, #17
 8001d2a:	d902      	bls.n	8001d32 <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2211      	movs	r2, #17
 8001d30:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	3301      	adds	r3, #1
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	b25b      	sxtb	r3, r3
 8001d3a:	f023 031f 	bic.w	r3, r3, #31
 8001d3e:	b25a      	sxtb	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	78db      	ldrb	r3, [r3, #3]
 8001d44:	b25b      	sxtb	r3, r3
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	b25b      	sxtb	r3, r3
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	b25a      	sxtb	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	440b      	add	r3, r1
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	221d      	movs	r2, #29
 8001d6a:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	3301      	adds	r3, #1
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	701a      	strb	r2, [r3, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	371c      	adds	r7, #28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_settings *settings)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b087      	sub	sp, #28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	3203      	adds	r2, #3
 8001d9a:	6810      	ldr	r0, [r2, #0]
 8001d9c:	6018      	str	r0, [r3, #0]

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	3303      	adds	r3, #3
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b25b      	sxtb	r3, r3
 8001da6:	f023 030e 	bic.w	r3, r3, #14
 8001daa:	b25a      	sxtb	r2, r3
 8001dac:	7dbb      	ldrb	r3, [r7, #22]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	b25b      	sxtb	r3, r3
 8001db2:	f003 030e 	and.w	r3, r3, #14
 8001db6:	b25b      	sxtb	r3, r3
 8001db8:	4313      	orrs	r3, r2
 8001dba:	b25a      	sxtb	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	440b      	add	r3, r1
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	221f      	movs	r2, #31
 8001dd6:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	701a      	strb	r2, [r3, #0]
}
 8001de4:	bf00      	nop
 8001de6:	371c      	adds	r7, #28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure or temperature or
 *  both the data and store it in the bmp3_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bmp3_uncomp_data *uncomp_data)
{
 8001df0:	b4b0      	push	{r4, r5, r7}
 8001df2:	b087      	sub	sp, #28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_xlsb = (uint32_t)reg_data[0];
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	7809      	ldrb	r1, [r1, #0]
 8001dfe:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 8;
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	3101      	adds	r1, #1
 8001e04:	7809      	ldrb	r1, [r1, #0]
 8001e06:	0209      	lsls	r1, r1, #8
 8001e08:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[2] << 16;
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	3102      	adds	r1, #2
 8001e0e:	7809      	ldrb	r1, [r1, #0]
 8001e10:	0409      	lsls	r1, r1, #16
 8001e12:	60f9      	str	r1, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	6939      	ldr	r1, [r7, #16]
 8001e18:	4308      	orrs	r0, r1
 8001e1a:	6979      	ldr	r1, [r7, #20]
 8001e1c:	4301      	orrs	r1, r0
 8001e1e:	2000      	movs	r0, #0
 8001e20:	460c      	mov	r4, r1
 8001e22:	4605      	mov	r5, r0
 8001e24:	6839      	ldr	r1, [r7, #0]
 8001e26:	e9c1 4500 	strd	r4, r5, [r1]

    /* Store the parsed register values for temperature data */
    data_xlsb = (uint32_t)reg_data[3];
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	3103      	adds	r1, #3
 8001e2e:	7809      	ldrb	r1, [r1, #0]
 8001e30:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 8;
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	3104      	adds	r1, #4
 8001e36:	7809      	ldrb	r1, [r1, #0]
 8001e38:	0209      	lsls	r1, r1, #8
 8001e3a:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[5] << 16;
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	3105      	adds	r1, #5
 8001e40:	7809      	ldrb	r1, [r1, #0]
 8001e42:	0409      	lsls	r1, r1, #16
 8001e44:	60f9      	str	r1, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	6939      	ldr	r1, [r7, #16]
 8001e4a:	4308      	orrs	r0, r1
 8001e4c:	6979      	ldr	r1, [r7, #20]
 8001e4e:	4301      	orrs	r1, r0
 8001e50:	2000      	movs	r0, #0
 8001e52:	460a      	mov	r2, r1
 8001e54:	4603      	mov	r3, r0
 8001e56:	6839      	ldr	r1, [r7, #0]
 8001e58:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001e5c:	bf00      	nop
 8001e5e:	371c      	adds	r7, #28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bcb0      	pop	{r4, r5, r7}
 8001e64:	4770      	bx	lr

08001e66 <compensate_data>:
 */
static int8_t compensate_data(uint8_t sensor_comp,
                              const struct bmp3_uncomp_data *uncomp_data,
                              struct bmp3_data *comp_data,
                              struct bmp3_calib_data *calib_data)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b086      	sub	sp, #24
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	603b      	str	r3, [r7, #0]
 8001e72:	4603      	mov	r3, r0
 8001e74:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMP3_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d05a      	beq.n	8001f36 <compensate_data+0xd0>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d057      	beq.n	8001f36 <compensate_data+0xd0>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d054      	beq.n	8001f36 <compensate_data+0xd0>
    {
        /* If pressure and temperature component is selected */
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d115      	bne.n	8001ebe <compensate_data+0x58>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation
             */

            /* Compensate pressure and temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	68b9      	ldr	r1, [r7, #8]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 fa1f 	bl	80022dc <compensate_temperature>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP3_OK)
 8001ea2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d148      	bne.n	8001f3c <compensate_data+0xd6>
            {
                rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3308      	adds	r3, #8
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 fa8c 	bl	80023d0 <compensate_pressure>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001ebc:	e03e      	b.n	8001f3c <compensate_data+0xd6>
            }
        }
        else if (sensor_comp == BMP3_PRESS)
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d116      	bne.n	8001ef2 <compensate_data+0x8c>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation.
             * As only pressure is enabled in 'sensor_comp', after calculating
             * compensated temperature, assign it to zero.
             */
            (void)compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 fa06 	bl	80022dc <compensate_temperature>
            comp_data->temperature = 0;
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	e9c1 2300 	strd	r2, r3, [r1]

            /* Compensate the pressure data */
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3308      	adds	r3, #8
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 fa72 	bl	80023d0 <compensate_pressure>
 8001eec:	4603      	mov	r3, r0
 8001eee:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001ef0:	e024      	b.n	8001f3c <compensate_data+0xd6>
        }
        else if (sensor_comp == BMP3_TEMP)
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d10f      	bne.n	8001f18 <compensate_data+0xb2>
        {
            /* Compensate the temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 f9ec 	bl	80022dc <compensate_temperature>
 8001f04:	4603      	mov	r3, r0
 8001f06:	75fb      	strb	r3, [r7, #23]

            /*
             * As only temperature is enabled in 'sensor_comp'
             * make compensated pressure as zero
             */
            comp_data->pressure = 0;
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001f16:	e011      	b.n	8001f3c <compensate_data+0xd6>
        }
        else
        {
            comp_data->pressure = 0;
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	e9c1 2302 	strd	r2, r3, [r1, #8]
            comp_data->temperature = 0;
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	e9c1 2300 	strd	r2, r3, [r1]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001f34:	e002      	b.n	8001f3c <compensate_data+0xd6>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001f36:	23ff      	movs	r3, #255	; 0xff
 8001f38:	75fb      	strb	r3, [r7, #23]
 8001f3a:	e000      	b.n	8001f3e <compensate_data+0xd8>
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001f3c:	bf00      	nop
    }

    return rslt;
 8001f3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	3390      	adds	r3, #144	; 0x90
 8001f5a:	617b      	str	r3, [r7, #20]
    struct bmp3_quantized_calib_data *quantized_calib_data = &dev->calib_data.quantized_calib_data;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	3318      	adds	r3, #24
 8001f60:	613b      	str	r3, [r7, #16]

    /* Temporary variable */
    double temp_var;

    /* 1 / 2^8 */
    temp_var = 0.00390625f;
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	4ba4      	ldr	r3, [pc, #656]	; (80021f8 <parse_calib_data+0x2ac>)
 8001f68:	e9c7 2302 	strd	r2, r3, [r7, #8]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	b21a      	sxth	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	b21b      	sxth	r3, r3
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	b21b      	sxth	r3, r3
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	801a      	strh	r2, [r3, #0]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fad2 	bl	8000534 <__aeabi_ui2d>
 8001f90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f94:	f7fe fc72 	bl	800087c <__aeabi_ddiv>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	6939      	ldr	r1, [r7, #16]
 8001f9e:	e9c1 2300 	strd	r2, r3, [r1]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3303      	adds	r3, #3
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	b21a      	sxth	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3302      	adds	r3, #2
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	b21b      	sxth	r3, r3
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	b21b      	sxth	r3, r3
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	805a      	strh	r2, [r3, #2]
    temp_var = 1073741824.0f;
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	4b8e      	ldr	r3, [pc, #568]	; (80021fc <parse_calib_data+0x2b0>)
 8001fc4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	885b      	ldrh	r3, [r3, #2]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fab1 	bl	8000534 <__aeabi_ui2d>
 8001fd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fd6:	f7fe fc51 	bl	800087c <__aeabi_ddiv>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	6939      	ldr	r1, [r7, #16]
 8001fe0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	b25a      	sxtb	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	711a      	strb	r2, [r3, #4]
    temp_var = 281474976710656.0f;
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	4b82      	ldr	r3, [pc, #520]	; (8002200 <parse_calib_data+0x2b4>)
 8001ff6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe faa7 	bl	8000554 <__aeabi_i2d>
 8002006:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800200a:	f7fe fc37 	bl	800087c <__aeabi_ddiv>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	6939      	ldr	r1, [r7, #16]
 8002014:	e9c1 2304 	strd	r2, r3, [r1, #16]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3306      	adds	r3, #6
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	b21a      	sxth	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3305      	adds	r3, #5
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	b21b      	sxth	r3, r3
 800202a:	4313      	orrs	r3, r2
 800202c:	b21a      	sxth	r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	80da      	strh	r2, [r3, #6]
    temp_var = 1048576.0f;
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	4b73      	ldr	r3, [pc, #460]	; (8002204 <parse_calib_data+0x2b8>)
 8002038:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002042:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fa84 	bl	8000554 <__aeabi_i2d>
 800204c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002050:	f7fe fc14 	bl	800087c <__aeabi_ddiv>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	6939      	ldr	r1, [r7, #16]
 800205a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3308      	adds	r3, #8
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	021b      	lsls	r3, r3, #8
 8002066:	b21a      	sxth	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3307      	adds	r3, #7
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	b21b      	sxth	r3, r3
 8002070:	4313      	orrs	r3, r2
 8002072:	b21a      	sxth	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	811a      	strh	r2, [r3, #8]
    temp_var = 536870912.0f;
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	4b62      	ldr	r3, [pc, #392]	; (8002208 <parse_calib_data+0x2bc>)
 800207e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002088:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fa61 	bl	8000554 <__aeabi_i2d>
 8002092:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002096:	f7fe fbf1 	bl	800087c <__aeabi_ddiv>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	6939      	ldr	r1, [r7, #16]
 80020a0:	e9c1 2308 	strd	r2, r3, [r1, #32]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3309      	adds	r3, #9
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	b25a      	sxtb	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	729a      	strb	r2, [r3, #10]
    temp_var = 4294967296.0f;
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	4b55      	ldr	r3, [pc, #340]	; (800220c <parse_calib_data+0x2c0>)
 80020b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe fa47 	bl	8000554 <__aeabi_i2d>
 80020c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020ca:	f7fe fbd7 	bl	800087c <__aeabi_ddiv>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	6939      	ldr	r1, [r7, #16]
 80020d4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	330a      	adds	r3, #10
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	b25a      	sxtb	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	72da      	strb	r2, [r3, #11]
    temp_var = 137438953472.0f;
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	4b49      	ldr	r3, [pc, #292]	; (8002210 <parse_calib_data+0x2c4>)
 80020ea:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fa2d 	bl	8000554 <__aeabi_i2d>
 80020fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020fe:	f7fe fbbd 	bl	800087c <__aeabi_ddiv>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	6939      	ldr	r1, [r7, #16]
 8002108:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	330c      	adds	r3, #12
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	b21a      	sxth	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	330b      	adds	r3, #11
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b21b      	sxth	r3, r3
 800211e:	4313      	orrs	r3, r2
 8002120:	b21b      	sxth	r3, r3
 8002122:	b29a      	uxth	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	819a      	strh	r2, [r3, #12]

    /* 1 / 2^3 */
    temp_var = 0.125f;
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002130:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	899b      	ldrh	r3, [r3, #12]
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe f9fb 	bl	8000534 <__aeabi_ui2d>
 800213e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002142:	f7fe fb9b 	bl	800087c <__aeabi_ddiv>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	6939      	ldr	r1, [r7, #16]
 800214c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	330e      	adds	r3, #14
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	b21a      	sxth	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	330d      	adds	r3, #13
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	b21b      	sxth	r3, r3
 8002162:	4313      	orrs	r3, r2
 8002164:	b21b      	sxth	r3, r3
 8002166:	b29a      	uxth	r2, r3
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	81da      	strh	r2, [r3, #14]
    temp_var = 64.0f;
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	4b28      	ldr	r3, [pc, #160]	; (8002214 <parse_calib_data+0x2c8>)
 8002172:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	89db      	ldrh	r3, [r3, #14]
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe f9da 	bl	8000534 <__aeabi_ui2d>
 8002180:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002184:	f7fe fb7a 	bl	800087c <__aeabi_ddiv>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	6939      	ldr	r1, [r7, #16]
 800218e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	330f      	adds	r3, #15
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	b25a      	sxtb	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	741a      	strb	r2, [r3, #16]
    temp_var = 256.0f;
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <parse_calib_data+0x2cc>)
 80021a4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe f9d0 	bl	8000554 <__aeabi_i2d>
 80021b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021b8:	f7fe fb60 	bl	800087c <__aeabi_ddiv>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	6939      	ldr	r1, [r7, #16]
 80021c2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3310      	adds	r3, #16
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b25a      	sxtb	r2, r3
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	745a      	strb	r2, [r3, #17]
    temp_var = 32768.0f;
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <parse_calib_data+0x2d0>)
 80021d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe f9b6 	bl	8000554 <__aeabi_i2d>
 80021e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021ec:	f7fe fb46 	bl	800087c <__aeabi_ddiv>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	6939      	ldr	r1, [r7, #16]
 80021f6:	e013      	b.n	8002220 <parse_calib_data+0x2d4>
 80021f8:	3f700000 	.word	0x3f700000
 80021fc:	41d00000 	.word	0x41d00000
 8002200:	42f00000 	.word	0x42f00000
 8002204:	41300000 	.word	0x41300000
 8002208:	41c00000 	.word	0x41c00000
 800220c:	41f00000 	.word	0x41f00000
 8002210:	42400000 	.word	0x42400000
 8002214:	40500000 	.word	0x40500000
 8002218:	40700000 	.word	0x40700000
 800221c:	40e00000 	.word	0x40e00000
 8002220:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3312      	adds	r3, #18
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	021b      	lsls	r3, r3, #8
 800222c:	b21a      	sxth	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3311      	adds	r3, #17
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	b21b      	sxth	r3, r3
 8002236:	4313      	orrs	r3, r2
 8002238:	b21a      	sxth	r2, r3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	825a      	strh	r2, [r3, #18]
    temp_var = 281474976710656.0f;
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <parse_calib_data+0x38c>)
 8002244:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe f980 	bl	8000554 <__aeabi_i2d>
 8002254:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002258:	f7fe fb10 	bl	800087c <__aeabi_ddiv>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	6939      	ldr	r1, [r7, #16]
 8002262:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3313      	adds	r3, #19
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	b25a      	sxtb	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	751a      	strb	r2, [r3, #20]
    temp_var = 281474976710656.0f;
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <parse_calib_data+0x38c>)
 8002278:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe f966 	bl	8000554 <__aeabi_i2d>
 8002288:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800228c:	f7fe faf6 	bl	800087c <__aeabi_ddiv>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	6939      	ldr	r1, [r7, #16]
 8002296:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3314      	adds	r3, #20
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	b25a      	sxtb	r2, r3
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	755a      	strb	r2, [r3, #21]
    temp_var = 36893488147419103232.0f;
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 80022ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe f94b 	bl	8000554 <__aeabi_i2d>
 80022be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022c2:	f7fe fadb 	bl	800087c <__aeabi_ddiv>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	6939      	ldr	r1, [r7, #16]
 80022cc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 80022d0:	bf00      	nop
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	42f00000 	.word	0x42f00000

080022dc <compensate_temperature>:
 * For e.g. Returns temperature 24.26 deg Celsius
 */
static int8_t compensate_temperature(double *temperature,
                                     const struct bmp3_uncomp_data *uncomp_data,
                                     struct bmp3_calib_data *calib_data)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08c      	sub	sp, #48	; 0x30
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int64_t uncomp_temp = uncomp_data->temperature;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80022f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double partial_data1;
    double partial_data2;

    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 80022f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022fc:	f7fe f966 	bl	80005cc <__aeabi_l2d>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002306:	f7fd ffd7 	bl	80002b8 <__aeabi_dsub>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002318:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800231c:	f7fe f984 	bl	8000628 <__aeabi_dmul>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Update the compensated temperature in calib structure since this is
     * needed for pressure calculation */
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8002328:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800232c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002330:	f7fe f97a 	bl	8000628 <__aeabi_dmul>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4610      	mov	r0, r2
 800233a:	4619      	mov	r1, r3
                                             calib_data->quantized_calib_data.par_t3;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8002342:	f7fe f971 	bl	8000628 <__aeabi_dmul>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4610      	mov	r0, r2
 800234c:	4619      	mov	r1, r3
 800234e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002352:	f7fd ffb3 	bl	80002bc <__adddf3>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

    /* Returns compensated temperature */
    if (calib_data->quantized_calib_data.t_lin < BMP3_MIN_TEMP_DOUBLE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <compensate_temperature+0xec>)
 800236c:	f7fe fbce 	bl	8000b0c <__aeabi_dcmplt>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d008      	beq.n	8002388 <compensate_temperature+0xac>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MIN_TEMP_DOUBLE;
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <compensate_temperature+0xec>)
 800237e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        rslt = BMP3_W_MIN_TEMP;
 8002382:	2303      	movs	r3, #3
 8002384:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (calib_data->quantized_calib_data.t_lin > BMP3_MAX_TEMP_DOUBLE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <compensate_temperature+0xf0>)
 8002394:	f7fe fbd8 	bl	8000b48 <__aeabi_dcmpgt>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d008      	beq.n	80023b0 <compensate_temperature+0xd4>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MAX_TEMP_DOUBLE;
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	4b09      	ldr	r3, [pc, #36]	; (80023cc <compensate_temperature+0xf0>)
 80023a6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        rslt = BMP3_W_MAX_TEMP;
 80023aa:	2304      	movs	r3, #4
 80023ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*temperature) = calib_data->quantized_calib_data.t_lin;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80023b6:	68f9      	ldr	r1, [r7, #12]
 80023b8:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 80023bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3730      	adds	r7, #48	; 0x30
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	c0440000 	.word	0xc0440000
 80023cc:	40554000 	.word	0x40554000

080023d0 <compensate_pressure>:
 * For e.g. returns pressure in Pascal p = 95305.295
 */
static int8_t compensate_pressure(double *pressure,
                                  const struct bmp3_uncomp_data *uncomp_data,
                                  const struct bmp3_calib_data *calib_data)
{
 80023d0:	b5b0      	push	{r4, r5, r7, lr}
 80023d2:	b096      	sub	sp, #88	; 0x58
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    const struct bmp3_quantized_calib_data *quantized_calib_data = &calib_data->quantized_calib_data;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	647b      	str	r3, [r7, #68]	; 0x44
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 80023e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80023ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ee:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80023f2:	f7fe f919 	bl	8000628 <__aeabi_dmul>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 80023fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002400:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8002404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002406:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 800240a:	2002      	movs	r0, #2
 800240c:	eeb0 0a47 	vmov.f32	s0, s14
 8002410:	eef0 0a67 	vmov.f32	s1, s15
 8002414:	f000 f954 	bl	80026c0 <pow_bmp3>
 8002418:	ee10 3a10 	vmov	r3, s0
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe f8ab 	bl	8000578 <__aeabi_f2d>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4620      	mov	r0, r4
 8002428:	4629      	mov	r1, r5
 800242a:	f7fe f8fd 	bl	8000628 <__aeabi_dmul>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 8002436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002438:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800243c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800243e:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8002442:	2003      	movs	r0, #3
 8002444:	eeb0 0a47 	vmov.f32	s0, s14
 8002448:	eef0 0a67 	vmov.f32	s1, s15
 800244c:	f000 f938 	bl	80026c0 <pow_bmp3>
 8002450:	ee10 3a10 	vmov	r3, s0
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe f88f 	bl	8000578 <__aeabi_f2d>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4620      	mov	r0, r4
 8002460:	4629      	mov	r1, r5
 8002462:	f7fe f8e1 	bl	8000628 <__aeabi_dmul>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 800246e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002470:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002474:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002478:	f7fd ff20 	bl	80002bc <__adddf3>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002488:	f7fd ff18 	bl	80002bc <__adddf3>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002494:	f7fd ff12 	bl	80002bc <__adddf3>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 80024a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80024a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80024ac:	f7fe f8bc 	bl	8000628 <__aeabi_dmul>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 80024b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ba:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80024be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024c0:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80024c4:	2002      	movs	r0, #2
 80024c6:	eeb0 0a47 	vmov.f32	s0, s14
 80024ca:	eef0 0a67 	vmov.f32	s1, s15
 80024ce:	f000 f8f7 	bl	80026c0 <pow_bmp3>
 80024d2:	ee10 3a10 	vmov	r3, s0
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe f84e 	bl	8000578 <__aeabi_f2d>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4620      	mov	r0, r4
 80024e2:	4629      	mov	r1, r5
 80024e4:	f7fe f8a0 	bl	8000628 <__aeabi_dmul>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 80024f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f2:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80024f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f8:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80024fc:	2003      	movs	r0, #3
 80024fe:	eeb0 0a47 	vmov.f32	s0, s14
 8002502:	eef0 0a67 	vmov.f32	s1, s15
 8002506:	f000 f8db 	bl	80026c0 <pow_bmp3>
 800250a:	ee10 3a10 	vmov	r3, s0
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe f832 	bl	8000578 <__aeabi_f2d>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4620      	mov	r0, r4
 800251a:	4629      	mov	r1, r5
 800251c:	f7fe f884 	bl	8000628 <__aeabi_dmul>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out2 = uncomp_data->pressure *
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252e:	4610      	mov	r0, r2
 8002530:	4619      	mov	r1, r3
 8002532:	f7fe f843 	bl	80005bc <__aeabi_ul2d>
 8002536:	4604      	mov	r4, r0
 8002538:	460d      	mov	r5, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 800253a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800253c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002540:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002544:	f7fd feba 	bl	80002bc <__adddf3>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4610      	mov	r0, r2
 800254e:	4619      	mov	r1, r3
 8002550:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002554:	f7fd feb2 	bl	80002bc <__adddf3>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4610      	mov	r0, r2
 800255e:	4619      	mov	r1, r3
 8002560:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002564:	f7fd feaa 	bl	80002bc <__adddf3>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
    partial_out2 = uncomp_data->pressure *
 800256c:	4620      	mov	r0, r4
 800256e:	4629      	mov	r1, r5
 8002570:	f7fe f85a 	bl	8000628 <__aeabi_dmul>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002582:	4610      	mov	r0, r2
 8002584:	4619      	mov	r1, r3
 8002586:	f7fe f819 	bl	80005bc <__aeabi_ul2d>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	2002      	movs	r0, #2
 8002590:	ec43 2b10 	vmov	d0, r2, r3
 8002594:	f000 f894 	bl	80026c0 <pow_bmp3>
 8002598:	ee10 3a10 	vmov	r3, s0
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd ffeb 	bl	8000578 <__aeabi_f2d>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 80025aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ac:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 80025b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b2:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80025b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80025bc:	f7fe f834 	bl	8000628 <__aeabi_dmul>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4620      	mov	r0, r4
 80025c6:	4629      	mov	r1, r5
 80025c8:	f7fd fe78 	bl	80002bc <__adddf3>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = partial_data1 * partial_data2;
 80025d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80025d8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80025dc:	f7fe f824 	bl	8000628 <__aeabi_dmul>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ee:	4610      	mov	r0, r2
 80025f0:	4619      	mov	r1, r3
 80025f2:	f7fd ffe3 	bl	80005bc <__aeabi_ul2d>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	2003      	movs	r0, #3
 80025fc:	ec43 2b10 	vmov	d0, r2, r3
 8002600:	f000 f85e 	bl	80026c0 <pow_bmp3>
 8002604:	ee10 3a10 	vmov	r3, s0
 8002608:	4618      	mov	r0, r3
 800260a:	f7fd ffb5 	bl	8000578 <__aeabi_f2d>
 800260e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002610:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002614:	f7fe f808 	bl	8000628 <__aeabi_dmul>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002620:	f7fd fe4c 	bl	80002bc <__adddf3>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	e9c7 2304 	strd	r2, r3, [r7, #16]
    comp_press = partial_out1 + partial_out2 + partial_data4;
 800262c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002630:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002634:	f7fd fe42 	bl	80002bc <__adddf3>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002640:	f7fd fe3c 	bl	80002bc <__adddf3>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    if (comp_press < BMP3_MIN_PRES_DOUBLE)
 800264c:	a318      	add	r3, pc, #96	; (adr r3, 80026b0 <compensate_pressure+0x2e0>)
 800264e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002652:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002656:	f7fe fa59 	bl	8000b0c <__aeabi_dcmplt>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d007      	beq.n	8002670 <compensate_pressure+0x2a0>
    {
        comp_press = BMP3_MIN_PRES_DOUBLE;
 8002660:	a313      	add	r3, pc, #76	; (adr r3, 80026b0 <compensate_pressure+0x2e0>)
 8002662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002666:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        rslt = BMP3_W_MIN_PRES;
 800266a:	2305      	movs	r3, #5
 800266c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    if (comp_press > BMP3_MAX_PRES_DOUBLE)
 8002670:	a311      	add	r3, pc, #68	; (adr r3, 80026b8 <compensate_pressure+0x2e8>)
 8002672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002676:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800267a:	f7fe fa65 	bl	8000b48 <__aeabi_dcmpgt>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d007      	beq.n	8002694 <compensate_pressure+0x2c4>
    {
        comp_press = BMP3_MAX_PRES_DOUBLE;
 8002684:	a30c      	add	r3, pc, #48	; (adr r3, 80026b8 <compensate_pressure+0x2e8>)
 8002686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        rslt = BMP3_W_MAX_PRES;
 800268e:	2306      	movs	r3, #6
 8002690:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    (*pressure) = comp_press;
 8002694:	68f9      	ldr	r1, [r7, #12]
 8002696:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800269a:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 800269e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3758      	adds	r7, #88	; 0x58
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bdb0      	pop	{r4, r5, r7, pc}
 80026aa:	bf00      	nop
 80026ac:	f3af 8000 	nop.w
 80026b0:	00000000 	.word	0x00000000
 80026b4:	40dd4c00 	.word	0x40dd4c00
 80026b8:	00000000 	.word	0x00000000
 80026bc:	40fe8480 	.word	0x40fe8480

080026c0 <pow_bmp3>:
/*!
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	ed87 0b02 	vstr	d0, [r7, #8]
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
    float pow_output = 1;
 80026ce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80026d2:	617b      	str	r3, [r7, #20]

    while (power != 0)
 80026d4:	e00e      	b.n	80026f4 <pow_bmp3+0x34>
    {
        pow_output = (float) base * pow_output;
 80026d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026da:	f7fe fa7d 	bl	8000bd8 <__aeabi_d2f>
 80026de:	ee07 0a10 	vmov	s14, r0
 80026e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80026e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ea:	edc7 7a05 	vstr	s15, [r7, #20]
        power--;
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	71fb      	strb	r3, [r7, #7]
    while (power != 0)
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1ed      	bne.n	80026d6 <pow_bmp3+0x16>
    }

    return pow_output;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	ee07 3a90 	vmov	s15, r3
}
 8002700:	eeb0 0a67 	vmov.f32	s0, s15
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 800270a:	b480      	push	{r7}
 800270c:	b085      	sub	sp, #20
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 8002714:	2300      	movs	r3, #0
 8002716:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <are_settings_changed+0x1e>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8002722:	2301      	movs	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
 8002726:	e001      	b.n	800272c <are_settings_changed+0x22>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8002728:	2300      	movs	r3, #0
 800272a:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 800272c:	7bfb      	ldrb	r3, [r7, #15]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 800273a:	b480      	push	{r7}
 800273c:	b085      	sub	sp, #20
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00f      	beq.n	8002768 <null_ptr_check+0x2e>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00b      	beq.n	8002768 <null_ptr_check+0x2e>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d007      	beq.n	8002768 <null_ptr_check+0x2e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8002764:	2b00      	cmp	r3, #0
 8002766:	d102      	bne.n	800276e <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 8002768:	23ff      	movs	r3, #255	; 0xff
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	e001      	b.n	8002772 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002772:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <get_sensor_status>:
/*!
 * @brief This API gets the command ready, data ready for pressure and
 * temperature, power on reset status from the sensor.
 */
static int8_t get_sensor_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
 800278a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;

    reg_addr = BMP3_REG_SENS_STATUS;
 800278c:	2303      	movs	r3, #3
 800278e:	73bb      	strb	r3, [r7, #14]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8002790:	f107 010d 	add.w	r1, r7, #13
 8002794:	7bb8      	ldrb	r0, [r7, #14]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2201      	movs	r2, #1
 800279a:	f7fe fc36 	bl	800100a <bmp3_get_regs>
 800279e:	4603      	mov	r3, r0
 80027a0:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 80027a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d128      	bne.n	80027fc <get_sensor_status+0x7a>
    {
        status->sensor.cmd_rdy = BMP3_GET_BITS(reg_data, BMP3_STATUS_CMD_RDY);
 80027aa:	7b7b      	ldrb	r3, [r7, #13]
 80027ac:	111b      	asrs	r3, r3, #4
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	70da      	strb	r2, [r3, #3]
        status->sensor.drdy_press = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_PRESS);
 80027ba:	7b7b      	ldrb	r3, [r7, #13]
 80027bc:	115b      	asrs	r3, r3, #5
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	711a      	strb	r2, [r3, #4]
        status->sensor.drdy_temp = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_TEMP);
 80027ca:	7b7b      	ldrb	r3, [r7, #13]
 80027cc:	119b      	asrs	r3, r3, #6
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	715a      	strb	r2, [r3, #5]
        reg_addr = BMP3_REG_EVENT;
 80027da:	2310      	movs	r3, #16
 80027dc:	73bb      	strb	r3, [r7, #14]
        rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80027de:	f107 010d 	add.w	r1, r7, #13
 80027e2:	7bb8      	ldrb	r0, [r7, #14]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f7fe fc0f 	bl	800100a <bmp3_get_regs>
 80027ec:	4603      	mov	r3, r0
 80027ee:	73fb      	strb	r3, [r7, #15]
        status->pwr_on_rst = reg_data & 0x01;
 80027f0:	7b7b      	ldrb	r3, [r7, #13]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	725a      	strb	r2, [r3, #9]
    }

    return rslt;
 80027fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <get_int_status>:
/*!
 * @brief This API gets the interrupt (fifo watermark, fifo full, data ready)
 * status from the sensor.
 */
static int8_t get_int_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_INT_STATUS, &reg_data, 1, dev);
 8002812:	f107 010e 	add.w	r1, r7, #14
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2201      	movs	r2, #1
 800281a:	2011      	movs	r0, #17
 800281c:	f7fe fbf5 	bl	800100a <bmp3_get_regs>
 8002820:	4603      	mov	r3, r0
 8002822:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8002824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d115      	bne.n	8002858 <get_int_status+0x50>
    {
        status->intr.fifo_wm = BMP3_GET_BITS_POS_0(reg_data, BMP3_INT_STATUS_FWTM);
 800282c:	7bbb      	ldrb	r3, [r7, #14]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	b2da      	uxtb	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	701a      	strb	r2, [r3, #0]
        status->intr.fifo_full = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_FFULL);
 8002838:	7bbb      	ldrb	r3, [r7, #14]
 800283a:	105b      	asrs	r3, r3, #1
 800283c:	b2db      	uxtb	r3, r3
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	b2da      	uxtb	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	705a      	strb	r2, [r3, #1]
        status->intr.drdy = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_DRDY);
 8002848:	7bbb      	ldrb	r3, [r7, #14]
 800284a:	10db      	asrs	r3, r3, #3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	b2da      	uxtb	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	709a      	strb	r2, [r3, #2]
    }

    return rslt;
 8002858:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <get_err_status>:
/*!
 * @brief This API gets the fatal, command and configuration error
 * from the sensor.
 */
static int8_t get_err_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_ERR, &reg_data, 1, dev);
 800286e:	f107 010e 	add.w	r1, r7, #14
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2201      	movs	r2, #1
 8002876:	2002      	movs	r0, #2
 8002878:	f7fe fbc7 	bl	800100a <bmp3_get_regs>
 800287c:	4603      	mov	r3, r0
 800287e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8002880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d115      	bne.n	80028b4 <get_err_status+0x50>
    {
        status->err.cmd = BMP3_GET_BITS_POS_0(reg_data, BMP3_ERR_FATAL);
 8002888:	7bbb      	ldrb	r3, [r7, #14]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	b2da      	uxtb	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	71da      	strb	r2, [r3, #7]
        status->err.conf = BMP3_GET_BITS(reg_data, BMP3_ERR_CMD);
 8002894:	7bbb      	ldrb	r3, [r7, #14]
 8002896:	105b      	asrs	r3, r3, #1
 8002898:	b2db      	uxtb	r3, r3
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	721a      	strb	r2, [r3, #8]
        status->err.fatal = BMP3_GET_BITS(reg_data, BMP3_ERR_CONF);
 80028a4:	7bbb      	ldrb	r3, [r7, #14]
 80028a6:	109b      	asrs	r3, r3, #2
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	719a      	strb	r2, [r3, #6]
    }

    return rslt;
 80028b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <bmp3_check_rslt>:
extern volatile uint8_t int2_flag;

static uint8_t dev_addr = 0;

void bmp3_check_rslt(const char api_name[], int8_t rslt)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	70fb      	strb	r3, [r7, #3]
    switch (rslt)
 80028cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028d0:	3307      	adds	r3, #7
 80028d2:	2b09      	cmp	r3, #9
 80028d4:	d839      	bhi.n	800294a <bmp3_check_rslt+0x8a>
 80028d6:	a201      	add	r2, pc, #4	; (adr r2, 80028dc <bmp3_check_rslt+0x1c>)
 80028d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028dc:	08002923 	.word	0x08002923
 80028e0:	08002919 	.word	0x08002919
 80028e4:	0800292d 	.word	0x0800292d
 80028e8:	0800294b 	.word	0x0800294b
 80028ec:	0800294b 	.word	0x0800294b
 80028f0:	0800290f 	.word	0x0800290f
 80028f4:	08002905 	.word	0x08002905
 80028f8:	08002955 	.word	0x08002955
 80028fc:	08002937 	.word	0x08002937
 8002900:	08002941 	.word	0x08002941

            // Do nothing
            break;
        case BMP3_E_NULL_PTR:
            //PDEBUG("API [%s] Error [%d] : Null pointer\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR1\n", 7);
 8002904:	2107      	movs	r1, #7
 8002906:	4816      	ldr	r0, [pc, #88]	; (8002960 <bmp3_check_rslt+0xa0>)
 8002908:	f016 fbc8 	bl	801909c <CDC_Transmit_FS>
            break;
 800290c:	e023      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_COMM_FAIL:
        	//PDEBUG("API [%s] Error [%d] : Communication failure\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR2\n", 6);
 800290e:	2106      	movs	r1, #6
 8002910:	4814      	ldr	r0, [pc, #80]	; (8002964 <bmp3_check_rslt+0xa4>)
 8002912:	f016 fbc3 	bl	801909c <CDC_Transmit_FS>
        	break;
 8002916:	e01e      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_INVALID_LEN:
        	//PDEBUG("API [%s] Error [%d] : Incorrect length parameter\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR3\n", 6);
 8002918:	2106      	movs	r1, #6
 800291a:	4813      	ldr	r0, [pc, #76]	; (8002968 <bmp3_check_rslt+0xa8>)
 800291c:	f016 fbbe 	bl	801909c <CDC_Transmit_FS>
        	break;
 8002920:	e019      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_DEV_NOT_FOUND:
        	//PDEBUG("API [%s] Error [%d] : Device not found\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR4\n", 6);
 8002922:	2106      	movs	r1, #6
 8002924:	4811      	ldr	r0, [pc, #68]	; (800296c <bmp3_check_rslt+0xac>)
 8002926:	f016 fbb9 	bl	801909c <CDC_Transmit_FS>
        	break;
 800292a:	e014      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_CONFIGURATION_ERR:
        	//PDEBUG("API [%s] Error [%d] : Configuration Error\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR5\n", 6);
 800292c:	2106      	movs	r1, #6
 800292e:	4810      	ldr	r0, [pc, #64]	; (8002970 <bmp3_check_rslt+0xb0>)
 8002930:	f016 fbb4 	bl	801909c <CDC_Transmit_FS>
        	break;
 8002934:	e00f      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_W_SENSOR_NOT_ENABLED:
        	//PDEBUG("API [%s] Error [%d] : Warning when Sensor not enabled\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR6\n", 6);
 8002936:	2106      	movs	r1, #6
 8002938:	480e      	ldr	r0, [pc, #56]	; (8002974 <bmp3_check_rslt+0xb4>)
 800293a:	f016 fbaf 	bl	801909c <CDC_Transmit_FS>
        	break;
 800293e:	e00a      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_W_INVALID_FIFO_REQ_FRAME_CNT:
        	//PDEBUG("API [%s] Error [%d] : Warning when Fifo watermark level is not in limit\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR7\n", 6);
 8002940:	2106      	movs	r1, #6
 8002942:	480d      	ldr	r0, [pc, #52]	; (8002978 <bmp3_check_rslt+0xb8>)
 8002944:	f016 fbaa 	bl	801909c <CDC_Transmit_FS>
        	break;
 8002948:	e005      	b.n	8002956 <bmp3_check_rslt+0x96>
        default:
        	//PDEBUG("API [%s] Error [%d] : Unknown error code\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR8\n", 6);
 800294a:	2106      	movs	r1, #6
 800294c:	480b      	ldr	r0, [pc, #44]	; (800297c <bmp3_check_rslt+0xbc>)
 800294e:	f016 fba5 	bl	801909c <CDC_Transmit_FS>
        	break;
 8002952:	e000      	b.n	8002956 <bmp3_check_rslt+0x96>
            break;
 8002954:	bf00      	nop
    }
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	0801cb84 	.word	0x0801cb84
 8002964:	0801cb8c 	.word	0x0801cb8c
 8002968:	0801cb94 	.word	0x0801cb94
 800296c:	0801cb9c 	.word	0x0801cb9c
 8002970:	0801cba4 	.word	0x0801cba4
 8002974:	0801cbac 	.word	0x0801cbac
 8002978:	0801cbb4 	.word	0x0801cbb4
 800297c:	0801cbbc 	.word	0x0801cbbc

08002980 <bmp3_interface_init>:

BMP3_INTF_RET_TYPE bmp3_interface_init(struct bmp3_dev *bmp3, uint8_t intf)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	70fb      	strb	r3, [r7, #3]
	int8_t rslt = BMP3_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	73fb      	strb	r3, [r7, #15]

	if(bmp3 != NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d015      	beq.n	80029c2 <bmp3_interface_init+0x42>
	{
		/* Bus configuration : I2C */
		if (intf == BMP3_I2C_INTF)
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d10b      	bne.n	80029b4 <bmp3_interface_init+0x34>
		{
			//PDEBUG("I2C Interface\n");
			dev_addr = BMP3_ADDR_I2C_SEC;
 800299c:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <bmp3_interface_init+0x58>)
 800299e:	2277      	movs	r2, #119	; 0x77
 80029a0:	701a      	strb	r2, [r3, #0]
			bmp3->read = SensorAPI_I2Cx_Read;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a0d      	ldr	r2, [pc, #52]	; (80029dc <bmp3_interface_init+0x5c>)
 80029a6:	60da      	str	r2, [r3, #12]
			bmp3->write = SensorAPI_I2Cx_Write;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a0d      	ldr	r2, [pc, #52]	; (80029e0 <bmp3_interface_init+0x60>)
 80029ac:	611a      	str	r2, [r3, #16]
			bmp3->intf = BMP3_I2C_INTF;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	721a      	strb	r2, [r3, #8]
			bmp3->read = SensorAPI_SPIx_Read;
			bmp3->write = SensorAPI_SPIx_Write;
			bmp3->intf = BMP3_SPI_INTF;
		}*/

		bmp3->delay_us = bmp3_delay_us;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a0b      	ldr	r2, [pc, #44]	; (80029e4 <bmp3_interface_init+0x64>)
 80029b8:	615a      	str	r2, [r3, #20]
		bmp3->intf_ptr = &dev_addr;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a06      	ldr	r2, [pc, #24]	; (80029d8 <bmp3_interface_init+0x58>)
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	e001      	b.n	80029c6 <bmp3_interface_init+0x46>
	}
	else
	{
		rslt = BMP3_E_NULL_PTR;
 80029c2:	23ff      	movs	r3, #255	; 0xff
 80029c4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80029c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	200002ec 	.word	0x200002ec
 80029dc:	08002a21 	.word	0x08002a21
 80029e0:	08002a75 	.word	0x08002a75
 80029e4:	080029e9 	.word	0x080029e9

080029e8 <bmp3_delay_us>:
		}
	}
}

void bmp3_delay_us(uint32_t period, void *intf_ptr)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
	uint32_t i;

	while(period--)
 80029f2:	e008      	b.n	8002a06 <bmp3_delay_us+0x1e>
	{
		for(i = 0; i < 84; i++)
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	e002      	b.n	8002a00 <bmp3_delay_us+0x18>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3301      	adds	r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b53      	cmp	r3, #83	; 0x53
 8002a04:	d9f9      	bls.n	80029fa <bmp3_delay_us+0x12>
	while(period--)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	1e5a      	subs	r2, r3, #1
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f1      	bne.n	80029f4 <bmp3_delay_us+0xc>
		{
			;
		}
	}
}
 8002a10:	bf00      	nop
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <SensorAPI_I2Cx_Read>:
* Input          : I2C1 or I2C2, slave_address7, subaddress, Write Number
* Output         : None
* Return         : number of bytes transmitted
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t subaddress, uint8_t *pBuffer, uint16_t ReadNumbr, void *intf_ptr)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af02      	add	r7, sp, #8
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	73fb      	strb	r3, [r7, #15]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	81bb      	strh	r3, [r7, #12]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr << 1;
 8002a38:	7dfb      	ldrb	r3, [r7, #23]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	82bb      	strh	r3, [r7, #20]

	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, &subaddress, 1, BUS_TIMEOUT);
 8002a40:	f107 020f 	add.w	r2, r7, #15
 8002a44:	8ab9      	ldrh	r1, [r7, #20]
 8002a46:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	4808      	ldr	r0, [pc, #32]	; (8002a70 <SensorAPI_I2Cx_Read+0x50>)
 8002a50:	f005 fd2c 	bl	80084ac <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, DevAddress, pBuffer, ReadNumbr, BUS_TIMEOUT);
 8002a54:	89bb      	ldrh	r3, [r7, #12]
 8002a56:	8ab9      	ldrh	r1, [r7, #20]
 8002a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5c:	9200      	str	r2, [sp, #0]
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	4803      	ldr	r0, [pc, #12]	; (8002a70 <SensorAPI_I2Cx_Read+0x50>)
 8002a62:	f005 fe3b 	bl	80086dc <HAL_I2C_Master_Receive>
	return 0;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	200004f0 	.word	0x200004f0

08002a74 <SensorAPI_I2Cx_Write>:

int8_t SensorAPI_I2Cx_Write(uint8_t subaddress, uint8_t *pBuffer, uint16_t WriteNumbr, void *intf_ptr)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607b      	str	r3, [r7, #4]
 8002a7e:	4603      	mov	r3, r0
 8002a80:	73fb      	strb	r3, [r7, #15]
 8002a82:	4613      	mov	r3, r2
 8002a84:	81bb      	strh	r3, [r7, #12]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr << 1;
 8002a8c:	7dfb      	ldrb	r3, [r7, #23]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	82bb      	strh	r3, [r7, #20]

	GTXBuffer[0] = subaddress;
 8002a94:	4a0c      	ldr	r2, [pc, #48]	; (8002ac8 <SensorAPI_I2Cx_Write+0x54>)
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], pBuffer, WriteNumbr);
 8002a9a:	89bb      	ldrh	r3, [r7, #12]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68b9      	ldr	r1, [r7, #8]
 8002aa0:	480a      	ldr	r0, [pc, #40]	; (8002acc <SensorAPI_I2Cx_Write+0x58>)
 8002aa2:	f017 f85d 	bl	8019b60 <memcpy>

	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, GTXBuffer, WriteNumbr+1, BUS_TIMEOUT);
 8002aa6:	89bb      	ldrh	r3, [r7, #12]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	8ab9      	ldrh	r1, [r7, #20]
 8002aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab2:	9200      	str	r2, [sp, #0]
 8002ab4:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <SensorAPI_I2Cx_Write+0x54>)
 8002ab6:	4806      	ldr	r0, [pc, #24]	; (8002ad0 <SensorAPI_I2Cx_Write+0x5c>)
 8002ab8:	f005 fcf8 	bl	80084ac <HAL_I2C_Master_Transmit>
	return 0;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	200002f0 	.word	0x200002f0
 8002acc:	200002f1 	.word	0x200002f1
 8002ad0:	200004f0 	.word	0x200004f0

08002ad4 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002ada:	2300      	movs	r3, #0
 8002adc:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8002ade:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002ae0:	4a19      	ldr	r2, [pc, #100]	; (8002b48 <BSP_I2C2_Init+0x74>)
 8002ae2:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8002ae4:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <BSP_I2C2_Init+0x78>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	4918      	ldr	r1, [pc, #96]	; (8002b4c <BSP_I2C2_Init+0x78>)
 8002aec:	600a      	str	r2, [r1, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d122      	bne.n	8002b38 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8002af2:	4814      	ldr	r0, [pc, #80]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002af4:	f006 fa1f 	bl	8008f36 <HAL_I2C_GetState>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d11c      	bne.n	8002b38 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8002afe:	4811      	ldr	r0, [pc, #68]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002b00:	f000 f8fe 	bl	8002d00 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d116      	bne.n	8002b38 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8002b0a:	480e      	ldr	r0, [pc, #56]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002b0c:	f000 f8b4 	bl	8002c78 <MX_I2C2_Init>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002b16:	f06f 0307 	mvn.w	r3, #7
 8002b1a:	607b      	str	r3, [r7, #4]
 8002b1c:	e00c      	b.n	8002b38 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4808      	ldr	r0, [pc, #32]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002b22:	f006 fd5d 	bl	80095e0 <HAL_I2CEx_ConfigAnalogFilter>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002b2c:	f06f 0307 	mvn.w	r3, #7
 8002b30:	607b      	str	r3, [r7, #4]
 8002b32:	e001      	b.n	8002b38 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8002b34:	2300      	movs	r3, #0
 8002b36:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002b38:	687b      	ldr	r3, [r7, #4]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	200004f0 	.word	0x200004f0
 8002b48:	40005800 	.word	0x40005800
 8002b4c:	20000544 	.word	0x20000544

08002b50 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002b56:	2300      	movs	r3, #0
 8002b58:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 8002b5a:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <BSP_I2C2_DeInit+0x48>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d014      	beq.n	8002b8c <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 8002b62:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <BSP_I2C2_DeInit+0x48>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	4a0b      	ldr	r2, [pc, #44]	; (8002b98 <BSP_I2C2_DeInit+0x48>)
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <BSP_I2C2_DeInit+0x48>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10b      	bne.n	8002b8c <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 8002b74:	4809      	ldr	r0, [pc, #36]	; (8002b9c <BSP_I2C2_DeInit+0x4c>)
 8002b76:	f000 f923 	bl	8002dc0 <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 8002b7a:	4808      	ldr	r0, [pc, #32]	; (8002b9c <BSP_I2C2_DeInit+0x4c>)
 8002b7c:	f005 fc67 	bl	800844e <HAL_I2C_DeInit>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002b86:	f06f 0307 	mvn.w	r3, #7
 8002b8a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002b8c:	687b      	ldr	r3, [r7, #4]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000544 	.word	0x20000544
 8002b9c:	200004f0 	.word	0x200004f0

08002ba0 <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	; 0x28
 8002ba4:	af04      	add	r7, sp, #16
 8002ba6:	60ba      	str	r2, [r7, #8]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4603      	mov	r3, r0
 8002bac:	81fb      	strh	r3, [r7, #14]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	81bb      	strh	r3, [r7, #12]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8002bba:	89ba      	ldrh	r2, [r7, #12]
 8002bbc:	89f9      	ldrh	r1, [r7, #14]
 8002bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bc2:	9302      	str	r3, [sp, #8]
 8002bc4:	88fb      	ldrh	r3, [r7, #6]
 8002bc6:	9301      	str	r3, [sp, #4]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	2301      	movs	r3, #1
 8002bce:	480c      	ldr	r0, [pc, #48]	; (8002c00 <BSP_I2C2_WriteReg+0x60>)
 8002bd0:	f005 fe7a 	bl	80088c8 <HAL_I2C_Mem_Write>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00c      	beq.n	8002bf4 <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8002bda:	4809      	ldr	r0, [pc, #36]	; (8002c00 <BSP_I2C2_WriteReg+0x60>)
 8002bdc:	f006 f9b9 	bl	8008f52 <HAL_I2C_GetError>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d103      	bne.n	8002bee <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002be6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	e002      	b.n	8002bf4 <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002bee:	f06f 0303 	mvn.w	r3, #3
 8002bf2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002bf4:	697b      	ldr	r3, [r7, #20]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	200004f0 	.word	0x200004f0

08002c04 <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08a      	sub	sp, #40	; 0x28
 8002c08:	af04      	add	r7, sp, #16
 8002c0a:	60ba      	str	r2, [r7, #8]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4603      	mov	r3, r0
 8002c10:	81fb      	strh	r3, [r7, #14]
 8002c12:	460b      	mov	r3, r1
 8002c14:	81bb      	strh	r3, [r7, #12]
 8002c16:	4613      	mov	r3, r2
 8002c18:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8002c1e:	89ba      	ldrh	r2, [r7, #12]
 8002c20:	89f9      	ldrh	r1, [r7, #14]
 8002c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c26:	9302      	str	r3, [sp, #8]
 8002c28:	88fb      	ldrh	r3, [r7, #6]
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	2301      	movs	r3, #1
 8002c32:	480c      	ldr	r0, [pc, #48]	; (8002c64 <BSP_I2C2_ReadReg+0x60>)
 8002c34:	f005 ff5c 	bl	8008af0 <HAL_I2C_Mem_Read>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00c      	beq.n	8002c58 <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8002c3e:	4809      	ldr	r0, [pc, #36]	; (8002c64 <BSP_I2C2_ReadReg+0x60>)
 8002c40:	f006 f987 	bl	8008f52 <HAL_I2C_GetError>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d103      	bne.n	8002c52 <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002c4a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	e002      	b.n	8002c58 <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002c52:	f06f 0303 	mvn.w	r3, #3
 8002c56:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002c58:	697b      	ldr	r3, [r7, #20]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	200004f0 	.word	0x200004f0

08002c68 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002c6c:	f004 fc16 	bl	800749c <HAL_GetTick>
 8002c70:	4603      	mov	r3, r0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a1c      	ldr	r2, [pc, #112]	; (8002cf8 <MX_I2C2_Init+0x80>)
 8002c88:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x307075B1;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a1b      	ldr	r2, [pc, #108]	; (8002cfc <MX_I2C2_Init+0x84>)
 8002c8e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f005 fb2c 	bl	8008318 <HAL_I2C_Init>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002cca:	2100      	movs	r1, #0
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f006 fc87 	bl	80095e0 <HAL_I2CEx_ConfigAnalogFilter>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8002cdc:	2100      	movs	r1, #0
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f006 fcc9 	bl	8009676 <HAL_I2CEx_ConfigDigitalFilter>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40005800 	.word	0x40005800
 8002cfc:	307075b1 	.word	0x307075b1

08002d00 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b0ae      	sub	sp, #184	; 0xb8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d08:	f107 0310 	add.w	r3, r7, #16
 8002d0c:	2294      	movs	r2, #148	; 0x94
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f016 ff33 	bl	8019b7c <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	66bb      	str	r3, [r7, #104]	; 0x68
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8002d1e:	f107 0310 	add.w	r3, r7, #16
 8002d22:	4618      	mov	r0, r3
 8002d24:	f008 fe7e 	bl	800ba24 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d28:	4b23      	ldr	r3, [pc, #140]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2c:	4a22      	ldr	r2, [pc, #136]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d2e:	f043 0302 	orr.w	r3, r3, #2
 8002d32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d34:	4b20      	ldr	r3, [pc, #128]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8002d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d48:	2312      	movs	r3, #18
 8002d4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d54:	2303      	movs	r3, #3
 8002d56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002d60:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d64:	4619      	mov	r1, r3
 8002d66:	4815      	ldr	r0, [pc, #84]	; (8002dbc <I2C2_MspInit+0xbc>)
 8002d68:	f005 f808 	bl	8007d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8002d6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d74:	2312      	movs	r3, #18
 8002d76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d80:	2303      	movs	r3, #3
 8002d82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8002d86:	2304      	movs	r3, #4
 8002d88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002d8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d90:	4619      	mov	r1, r3
 8002d92:	480a      	ldr	r0, [pc, #40]	; (8002dbc <I2C2_MspInit+0xbc>)
 8002d94:	f004 fff2 	bl	8007d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d98:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9c:	4a06      	ldr	r2, [pc, #24]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002da2:	6593      	str	r3, [r2, #88]	; 0x58
 8002da4:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8002db0:	bf00      	nop
 8002db2:	37b8      	adds	r7, #184	; 0xb8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	48000400 	.word	0x48000400

08002dc0 <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002dc8:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <I2C2_MspDeInit+0x30>)
 8002dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dcc:	4a08      	ldr	r2, [pc, #32]	; (8002df0 <I2C2_MspDeInit+0x30>)
 8002dce:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002dd2:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8002dd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dd8:	4806      	ldr	r0, [pc, #24]	; (8002df4 <I2C2_MspDeInit+0x34>)
 8002dda:	f005 f961 	bl	80080a0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 8002dde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002de2:	4804      	ldr	r0, [pc, #16]	; (8002df4 <I2C2_MspDeInit+0x34>)
 8002de4:	f005 f95c 	bl	80080a0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000
 8002df4:	48000400 	.word	0x48000400

08002df8 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8002e04:	2300      	movs	r3, #0
 8002e06:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8002e08:	78fb      	ldrb	r3, [r7, #3]
 8002e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6858      	ldr	r0, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	8adb      	ldrh	r3, [r3, #22]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	f005 fa49 	bl	80082b4 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6818      	ldr	r0, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	1cf9      	adds	r1, r7, #3
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f00c f8dd 	bl	800efec <HAL_SPI_Transmit>
 8002e32:	4603      	mov	r3, r0
 8002e34:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6818      	ldr	r0, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f107 010f 	add.w	r1, r7, #15
 8002e42:	2201      	movs	r2, #1
 8002e44:	f00c fa47 	bl	800f2d6 <HAL_SPI_Receive>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6858      	ldr	r0, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	8adb      	ldrh	r3, [r3, #22]
 8002e54:	2201      	movs	r2, #1
 8002e56:	4619      	mov	r1, r3
 8002e58:	f005 fa2c 	bl	80082b4 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b084      	sub	sp, #16
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
 8002e6e:	460b      	mov	r3, r1
 8002e70:	70fb      	strb	r3, [r7, #3]
 8002e72:	4613      	mov	r3, r2
 8002e74:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 8002e76:	78fb      	ldrb	r3, [r7, #3]
 8002e78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e7c:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8002e7e:	78bb      	ldrb	r3, [r7, #2]
 8002e80:	021b      	lsls	r3, r3, #8
 8002e82:	b21a      	sxth	r2, r3
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	b21b      	sxth	r3, r3
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	b21b      	sxth	r3, r3
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6858      	ldr	r0, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	8adb      	ldrh	r3, [r3, #22]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	f005 fa0a 	bl	80082b4 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6818      	ldr	r0, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f107 010a 	add.w	r1, r7, #10
 8002eac:	2202      	movs	r2, #2
 8002eae:	f00c f89d 	bl	800efec <HAL_SPI_Transmit>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6858      	ldr	r0, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	8adb      	ldrh	r3, [r3, #22]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	f005 f9f7 	bl	80082b4 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 8002ec6:	bf00      	nop
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b088      	sub	sp, #32
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	4611      	mov	r1, r2
 8002eda:	461a      	mov	r2, r3
 8002edc:	460b      	mov	r3, r1
 8002ede:	71fb      	strb	r3, [r7, #7]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 8002ee4:	2380      	movs	r3, #128	; 0x80
 8002ee6:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6858      	ldr	r0, [r3, #4]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8adb      	ldrh	r3, [r3, #22]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	f005 f9de 	bl	80082b4 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6818      	ldr	r0, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f107 0117 	add.w	r1, r7, #23
 8002f04:	2201      	movs	r2, #1
 8002f06:	f00c f871 	bl	800efec <HAL_SPI_Transmit>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 8002f0e:	79bb      	ldrb	r3, [r7, #6]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d108      	bne.n	8002f26 <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	79fa      	ldrb	r2, [r7, #7]
 8002f1a:	b292      	uxth	r2, r2
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f00c fd32 	bl	800f988 <HAL_SPI_Transmit_DMA>
 8002f24:	e012      	b.n	8002f4c <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6818      	ldr	r0, [r3, #0]
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	68b9      	ldr	r1, [r7, #8]
 8002f34:	f00c f85a 	bl	800efec <HAL_SPI_Transmit>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6858      	ldr	r0, [r3, #4]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8adb      	ldrh	r3, [r3, #22]
 8002f44:	2201      	movs	r2, #1
 8002f46:	4619      	mov	r1, r3
 8002f48:	f005 f9b4 	bl	80082b4 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 8002f4c:	3720      	adds	r7, #32
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8002f5e:	78fb      	ldrb	r3, [r7, #3]
 8002f60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	2101      	movs	r1, #1
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7ff ff7b 	bl	8002e66 <write_register>
}
 8002f70:	bf00      	nop
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	2b2c      	cmp	r3, #44	; 0x2c
 8002f88:	d801      	bhi.n	8002f8e <set_OCP+0x16>
    imax = 45;
 8002f8a:	232d      	movs	r3, #45	; 0x2d
 8002f8c:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 8002f8e:	78fb      	ldrb	r3, [r7, #3]
 8002f90:	2bf0      	cmp	r3, #240	; 0xf0
 8002f92:	d901      	bls.n	8002f98 <set_OCP+0x20>
    imax = 240;
 8002f94:	23f0      	movs	r3, #240	; 0xf0
 8002f96:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	2b81      	cmp	r3, #129	; 0x81
 8002f9c:	d809      	bhi.n	8002fb2 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 8002f9e:	78fb      	ldrb	r3, [r7, #3]
 8002fa0:	3b2d      	subs	r3, #45	; 0x2d
 8002fa2:	4a0f      	ldr	r2, [pc, #60]	; (8002fe0 <set_OCP+0x68>)
 8002fa4:	fb82 1203 	smull	r1, r2, r2, r3
 8002fa8:	1052      	asrs	r2, r2, #1
 8002faa:	17db      	asrs	r3, r3, #31
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	73fb      	strb	r3, [r7, #15]
 8002fb0:	e008      	b.n	8002fc4 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	331e      	adds	r3, #30
 8002fb6:	4a0a      	ldr	r2, [pc, #40]	; (8002fe0 <set_OCP+0x68>)
 8002fb8:	fb82 1203 	smull	r1, r2, r2, r3
 8002fbc:	1092      	asrs	r2, r2, #2
 8002fbe:	17db      	asrs	r3, r3, #31
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	f043 0320 	orr.w	r3, r3, #32
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	461a      	mov	r2, r3
 8002fce:	210b      	movs	r1, #11
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff ff48 	bl	8002e66 <write_register>
}
 8002fd6:	bf00      	nop
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	66666667 	.word	0x66666667

08002fe4 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8002fe4:	b5b0      	push	{r4, r5, r7, lr}
 8002fe6:	b088      	sub	sp, #32
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 8002fec:	211d      	movs	r1, #29
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7ff ff02 	bl	8002df8 <read_register>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	091b      	lsrs	r3, r3, #4
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	461c      	mov	r4, r3
 8003000:	4615      	mov	r5, r2
 8003002:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8003006:	211e      	movs	r1, #30
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff fef5 	bl	8002df8 <read_register>
 800300e:	4603      	mov	r3, r0
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8003014:	2304      	movs	r3, #4
 8003016:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	2b0a      	cmp	r3, #10
 800301c:	d908      	bls.n	8003030 <set_low_data_rate_optimization+0x4c>
 800301e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003022:	1fd1      	subs	r1, r2, #7
 8003024:	430b      	orrs	r3, r1
 8003026:	d103      	bne.n	8003030 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8003028:	7ffb      	ldrb	r3, [r7, #31]
 800302a:	f043 0308 	orr.w	r3, r3, #8
 800302e:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8003030:	7ffb      	ldrb	r3, [r7, #31]
 8003032:	461a      	mov	r2, r3
 8003034:	2126      	movs	r1, #38	; 0x26
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7ff ff15 	bl	8002e66 <write_register>
}
 800303c:	bf00      	nop
 800303e:	3720      	adds	r7, #32
 8003040:	46bd      	mov	sp, r7
 8003042:	bdb0      	pop	{r4, r5, r7, pc}

08003044 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 800304c:	2100      	movs	r1, #0
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7ff ff7f 	bl	8002f52 <set_mode>
}
 8003054:	bf00      	nop
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8003064:	2101      	movs	r1, #1
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff ff73 	bl	8002f52 <set_mode>
}
 800306c:	bf00      	nop
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 800307c:	211d      	movs	r1, #29
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff feba 	bl	8002df8 <read_register>
 8003084:	4603      	mov	r3, r0
 8003086:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	f023 0301 	bic.w	r3, r3, #1
 800308e:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	461a      	mov	r2, r3
 8003094:	211d      	movs	r1, #29
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff fee5 	bl	8002e66 <write_register>
}
 800309c:	bf00      	nop
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10e      	bne.n	80030d6 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	2b0f      	cmp	r3, #15
 80030bc:	d901      	bls.n	80030c2 <lora_set_tx_power+0x1e>
      level = 15;
 80030be:	230f      	movs	r3, #15
 80030c0:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 80030c2:	78fb      	ldrb	r3, [r7, #3]
 80030c4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	2109      	movs	r1, #9
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7ff fec9 	bl	8002e66 <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 80030d4:	e02e      	b.n	8003134 <lora_set_tx_power+0x90>
    if (level > 20) {
 80030d6:	78fb      	ldrb	r3, [r7, #3]
 80030d8:	2b14      	cmp	r3, #20
 80030da:	d901      	bls.n	80030e0 <lora_set_tx_power+0x3c>
      level = 20;
 80030dc:	2314      	movs	r3, #20
 80030de:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d801      	bhi.n	80030ea <lora_set_tx_power+0x46>
      level = 2;
 80030e6:	2302      	movs	r3, #2
 80030e8:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 80030ea:	78fb      	ldrb	r3, [r7, #3]
 80030ec:	2b11      	cmp	r3, #17
 80030ee:	d90c      	bls.n	800310a <lora_set_tx_power+0x66>
      level -= 3;
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	3b03      	subs	r3, #3
 80030f4:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 80030f6:	2287      	movs	r2, #135	; 0x87
 80030f8:	214d      	movs	r1, #77	; 0x4d
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7ff feb3 	bl	8002e66 <write_register>
      set_OCP(lora, 140);
 8003100:	218c      	movs	r1, #140	; 0x8c
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7ff ff38 	bl	8002f78 <set_OCP>
 8003108:	e008      	b.n	800311c <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 800310a:	2284      	movs	r2, #132	; 0x84
 800310c:	214d      	movs	r1, #77	; 0x4d
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff fea9 	bl	8002e66 <write_register>
      set_OCP(lora, 97);
 8003114:	2161      	movs	r1, #97	; 0x61
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7ff ff2e 	bl	8002f78 <set_OCP>
    level -= 2;
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	3b02      	subs	r3, #2
 8003120:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003128:	b2db      	uxtb	r3, r3
 800312a:	461a      	mov	r2, r3
 800312c:	2109      	movs	r1, #9
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff fe99 	bl	8002e66 <write_register>
}
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8003148:	e9d7 2300 	ldrd	r2, r3, [r7]
 800314c:	f04f 0000 	mov.w	r0, #0
 8003150:	f04f 0100 	mov.w	r1, #0
 8003154:	04d9      	lsls	r1, r3, #19
 8003156:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800315a:	04d0      	lsls	r0, r2, #19
 800315c:	4a19      	ldr	r2, [pc, #100]	; (80031c4 <lora_set_frequency+0x88>)
 800315e:	f04f 0300 	mov.w	r3, #0
 8003162:	f7fd fd89 	bl	8000c78 <__aeabi_uldivmod>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 800316e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	0c02      	lsrs	r2, r0, #16
 800317c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003180:	0c0b      	lsrs	r3, r1, #16
 8003182:	b2d3      	uxtb	r3, r2
 8003184:	461a      	mov	r2, r3
 8003186:	2106      	movs	r1, #6
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f7ff fe6c 	bl	8002e66 <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 800318e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	f04f 0300 	mov.w	r3, #0
 800319a:	0a02      	lsrs	r2, r0, #8
 800319c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80031a0:	0a0b      	lsrs	r3, r1, #8
 80031a2:	b2d3      	uxtb	r3, r2
 80031a4:	461a      	mov	r2, r3
 80031a6:	2107      	movs	r1, #7
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f7ff fe5c 	bl	8002e66 <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 80031ae:	7c3b      	ldrb	r3, [r7, #16]
 80031b0:	461a      	mov	r2, r3
 80031b2:	2108      	movs	r1, #8
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f7ff fe56 	bl	8002e66 <write_register>
}
 80031ba:	bf00      	nop
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	01e84800 	.word	0x01e84800

080031c8 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	2b05      	cmp	r3, #5
 80031d8:	d802      	bhi.n	80031e0 <lora_set_spreading_factor+0x18>
    sf = 6;
 80031da:	2306      	movs	r3, #6
 80031dc:	70fb      	strb	r3, [r7, #3]
 80031de:	e004      	b.n	80031ea <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	2b0c      	cmp	r3, #12
 80031e4:	d901      	bls.n	80031ea <lora_set_spreading_factor+0x22>
    sf = 12;
 80031e6:	230c      	movs	r3, #12
 80031e8:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	2b06      	cmp	r3, #6
 80031ee:	d10a      	bne.n	8003206 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 80031f0:	22c5      	movs	r2, #197	; 0xc5
 80031f2:	2131      	movs	r1, #49	; 0x31
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff fe36 	bl	8002e66 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 80031fa:	220c      	movs	r2, #12
 80031fc:	2137      	movs	r1, #55	; 0x37
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7ff fe31 	bl	8002e66 <write_register>
 8003204:	e009      	b.n	800321a <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8003206:	22c3      	movs	r2, #195	; 0xc3
 8003208:	2131      	movs	r1, #49	; 0x31
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff fe2b 	bl	8002e66 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8003210:	220a      	movs	r2, #10
 8003212:	2137      	movs	r1, #55	; 0x37
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff fe26 	bl	8002e66 <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 800321a:	211e      	movs	r1, #30
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff fdeb 	bl	8002df8 <read_register>
 8003222:	4603      	mov	r3, r0
 8003224:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 8003226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	b25a      	sxtb	r2, r3
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	b25b      	sxtb	r3, r3
 8003236:	4313      	orrs	r3, r2
 8003238:	b25b      	sxtb	r3, r3
 800323a:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 800323c:	7bfb      	ldrb	r3, [r7, #15]
 800323e:	461a      	mov	r2, r3
 8003240:	211e      	movs	r1, #30
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7ff fe0f 	bl	8002e66 <write_register>

  set_low_data_rate_optimization(lora);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff fecb 	bl	8002fe4 <set_low_data_rate_optimization>
}
 800324e:	bf00      	nop
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	460b      	mov	r3, r1
 8003260:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 8003262:	887b      	ldrh	r3, [r7, #2]
 8003264:	0a1b      	lsrs	r3, r3, #8
 8003266:	b29b      	uxth	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	461a      	mov	r2, r3
 800326c:	2120      	movs	r1, #32
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7ff fdf9 	bl	8002e66 <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 8003274:	887b      	ldrh	r3, [r7, #2]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	f003 030f 	and.w	r3, r3, #15
 800327c:	b2db      	uxtb	r3, r3
 800327e:	461a      	mov	r2, r3
 8003280:	2121      	movs	r1, #33	; 0x21
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff fdef 	bl	8002e66 <write_register>
}
 8003288:	bf00      	nop
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 8003298:	2142      	movs	r1, #66	; 0x42
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff fdac 	bl	8002df8 <read_register>
 80032a0:	4603      	mov	r3, r0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b084      	sub	sp, #16
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 80032b2:	2101      	movs	r1, #1
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff fd9f 	bl	8002df8 <read_register>
 80032ba:	4603      	mov	r3, r0
 80032bc:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 80032be:	7bfb      	ldrb	r3, [r7, #15]
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d101      	bne.n	80032cc <lora_is_transmitting+0x22>
 80032c8:	2305      	movs	r3, #5
 80032ca:	e000      	b.n	80032ce <lora_is_transmitting+0x24>
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	4611      	mov	r1, r2
 80032e2:	461a      	mov	r2, r3
 80032e4:	460b      	mov	r3, r1
 80032e6:	71fb      	strb	r3, [r7, #7]
 80032e8:	4613      	mov	r3, r2
 80032ea:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f7ff ffdc 	bl	80032aa <lora_is_transmitting>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <lora_send_packet_base+0x26>
    return LORA_BUSY;
 80032f8:	2305      	movs	r3, #5
 80032fa:	e02a      	b.n	8003352 <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 80032fc:	2101      	movs	r1, #1
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f7ff fe27 	bl	8002f52 <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f83a 	bl	800337e <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	7d1b      	ldrb	r3, [r3, #20]
 800330e:	461a      	mov	r2, r3
 8003310:	210d      	movs	r1, #13
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f7ff fda7 	bl	8002e66 <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	7d1b      	ldrb	r3, [r3, #20]
 800331c:	461a      	mov	r2, r3
 800331e:	210e      	movs	r1, #14
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f7ff fda0 	bl	8002e66 <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	461a      	mov	r2, r3
 800332a:	2122      	movs	r1, #34	; 0x22
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f7ff fd9a 	bl	8002e66 <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 8003332:	79bb      	ldrb	r3, [r7, #6]
 8003334:	79fa      	ldrb	r2, [r7, #7]
 8003336:	68b9      	ldr	r1, [r7, #8]
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f7ff fdc8 	bl	8002ece <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 800333e:	79bb      	ldrb	r3, [r7, #6]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <lora_send_packet_base+0x72>
    return LORA_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	e004      	b.n	8003352 <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 8003348:	2103      	movs	r1, #3
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f7ff fe01 	bl	8002f52 <set_mode>
  return LORA_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b084      	sub	sp, #16
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	4613      	mov	r3, r2
 8003366:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 8003368:	79fa      	ldrb	r2, [r7, #7]
 800336a:	2302      	movs	r3, #2
 800336c:	68b9      	ldr	r1, [r7, #8]
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f7ff ffb1 	bl	80032d6 <lora_send_packet_base>
 8003374:	4603      	mov	r3, r0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b082      	sub	sp, #8
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 8003386:	2208      	movs	r2, #8
 8003388:	2112      	movs	r1, #18
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7ff fd6b 	bl	8002e66 <write_register>
}
 8003390:	bf00      	nop
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
 80033a4:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	887a      	ldrh	r2, [r7, #2]
 80033b6:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 80033b8:	6a3a      	ldr	r2, [r7, #32]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2201      	movs	r2, #1
 80033c2:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033d6:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f7ff ff59 	bl	8003290 <lora_version>
 80033de:	4603      	mov	r3, r0
 80033e0:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 80033e2:	7dfb      	ldrb	r3, [r7, #23]
 80033e4:	2b12      	cmp	r3, #18
 80033e6:	d001      	beq.n	80033ec <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 80033e8:	2304      	movs	r3, #4
 80033ea:	e031      	b.n	8003450 <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f7ff fe29 	bl	8003044 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f7ff fe26 	bl	8003044 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 80033f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f7ff fe9d 	bl	800313c <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8003402:	2107      	movs	r1, #7
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f7ff fedf 	bl	80031c8 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 800340a:	210a      	movs	r1, #10
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f7ff ff22 	bl	8003256 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f7ff fe2e 	bl	8003074 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8003418:	210c      	movs	r1, #12
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f7ff fcec 	bl	8002df8 <read_register>
 8003420:	4603      	mov	r3, r0
 8003422:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8003424:	7dbb      	ldrb	r3, [r7, #22]
 8003426:	f043 0303 	orr.w	r3, r3, #3
 800342a:	b2db      	uxtb	r3, r3
 800342c:	461a      	mov	r2, r3
 800342e:	210c      	movs	r1, #12
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f7ff fd18 	bl	8002e66 <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8003436:	2204      	movs	r2, #4
 8003438:	2126      	movs	r1, #38	; 0x26
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f7ff fd13 	bl	8002e66 <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8003440:	2102      	movs	r1, #2
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f7ff fe2e 	bl	80030a4 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f7ff fe07 	bl	800305c <lora_mode_standby>

  return LORA_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <add_to_buffer>:
 * Adds ASCII data to a data buffer.
 * @param data_buffer: pointer to the data buffer
 * @param data: pointer to the data that is added to the buffer
 * @param size: int telling the size (length) of data
 */
void add_to_buffer(uint8_t* data_buffer, uint8_t* data, int size) {
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]

	for (int i = 0; i < size; i++) {
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	e010      	b.n	800348c <add_to_buffer+0x34>
		sprintf(data_buffer + strlen(data_buffer), "%c", data[i]);
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f7fc fec8 	bl	8000200 <strlen>
 8003470:	4602      	mov	r2, r0
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	1898      	adds	r0, r3, r2
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	4413      	add	r3, r2
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	4907      	ldr	r1, [pc, #28]	; (80034a0 <add_to_buffer+0x48>)
 8003482:	f017 f8f5 	bl	801a670 <siprintf>
	for (int i = 0; i < size; i++) {
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	3301      	adds	r3, #1
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	429a      	cmp	r2, r3
 8003492:	dbea      	blt.n	800346a <add_to_buffer+0x12>
	}

}
 8003494:	bf00      	nop
 8003496:	bf00      	nop
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	0801cc64 	.word	0x0801cc64
 80034a4:	00000000 	.word	0x00000000

080034a8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80034a8:	b5b0      	push	{r4, r5, r7, lr}
 80034aa:	f5ad 5d9e 	sub.w	sp, sp, #5056	; 0x13c0
 80034ae:	af02      	add	r7, sp, #8

	/* USER CODE BEGIN 1 */
	// The SD card mount, init, read, and write variables
	FRESULT sd_result_write; /* FatFs function common result code */
	UINT sd_err_byteswritten, sd_err_bytesread; /* File write/read counts */
	uint8_t sd_write_buffer[50] = "Start of operation\n"; /* File write buffer. */
 80034b0:	4bcb      	ldr	r3, [pc, #812]	; (80037e0 <main+0x338>)
 80034b2:	f507 5497 	add.w	r4, r7, #4832	; 0x12e0
 80034b6:	f104 0414 	add.w	r4, r4, #20
 80034ba:	461d      	mov	r5, r3
 80034bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034c0:	682b      	ldr	r3, [r5, #0]
 80034c2:	6023      	str	r3, [r4, #0]
 80034c4:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 80034c8:	f103 0308 	add.w	r3, r3, #8
 80034cc:	221e      	movs	r2, #30
 80034ce:	2100      	movs	r1, #0
 80034d0:	4618      	mov	r0, r3
 80034d2:	f016 fb53 	bl	8019b7c <memset>

	// Buffer for all data to be stored into in the same way as it has been printed to the PC
	uint8_t data_buffer[LORA_MAX_PACKET_SIZE]; //LORA_MAX_PACKET_SIZE

	uint8_t gps_buffer[1000];
	char *gps_buffer_ptr1 = gps_buffer;
 80034d6:	f207 63cc 	addw	r3, r7, #1740	; 0x6cc
 80034da:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 80034de:	f102 0214 	add.w	r2, r2, #20
 80034e2:	6013      	str	r3, [r2, #0]
	char *gps_buffer_ptr2 = gps_buffer;
 80034e4:	f207 63cc 	addw	r3, r7, #1740	; 0x6cc
 80034e8:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 80034ec:	f102 0210 	add.w	r2, r2, #16
 80034f0:	6013      	str	r3, [r2, #0]
	uint8_t gps_parsed_buffer[1000];
	int parser_i;
	int parser_sub_i;
	gps_buffer[0] = '\0';
 80034f2:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80034f6:	f103 0318 	add.w	r3, r3, #24
 80034fa:	f6a3 43ec 	subw	r3, r3, #3308	; 0xcec
 80034fe:	2200      	movs	r2, #0
 8003500:	701a      	strb	r2, [r3, #0]
	gps_parsed_buffer[0] = '\0';
 8003502:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8003506:	2200      	movs	r2, #0
 8003508:	f803 2cd4 	strb.w	r2, [r3, #-212]

	// The pressure sensor BMP390 variables
	int8_t bmp_result;
	uint16_t bmp_settings_select;
	struct bmp3_dev bmp_device;
	struct bmp3_data bmp_data = { 0 };
 800350c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8003510:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003514:	461a      	mov	r2, r3
 8003516:	2300      	movs	r3, #0
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	6053      	str	r3, [r2, #4]
 800351c:	6093      	str	r3, [r2, #8]
 800351e:	60d3      	str	r3, [r2, #12]
	struct bmp3_settings bmp_settings = { 0 };
 8003520:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8003524:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	605a      	str	r2, [r3, #4]
 800352e:	609a      	str	r2, [r3, #8]
 8003530:	731a      	strb	r2, [r3, #12]
	struct bmp3_status bmp_status = { { 0 } };
 8003532:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8003536:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	605a      	str	r2, [r3, #4]
 8003540:	811a      	strh	r2, [r3, #8]
	uint8_t bmp_temperature_buffer[25] = {0};
 8003542:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8003546:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	3304      	adds	r3, #4
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	609a      	str	r2, [r3, #8]
 8003558:	60da      	str	r2, [r3, #12]
 800355a:	611a      	str	r2, [r3, #16]
 800355c:	751a      	strb	r2, [r3, #20]
	uint8_t bmp_pressure_buffer[25] = {0};
 800355e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8003562:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	3304      	adds	r3, #4
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	60da      	str	r2, [r3, #12]
 8003576:	611a      	str	r2, [r3, #16]
 8003578:	751a      	strb	r2, [r3, #20]

	//test
	//HAL_StatusTypeDef i2c2status;
	//uint8_t hello[7] = "Hello!\n";
	uint8_t i2c2check_active_address[25] = {0};
 800357a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800357e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	3304      	adds	r3, #4
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	609a      	str	r2, [r3, #8]
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	611a      	str	r2, [r3, #16]
 8003594:	751a      	strb	r2, [r3, #20]
	uint8_t i2c2check_space[] = " - ";
 8003596:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800359a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800359e:	4a91      	ldr	r2, [pc, #580]	; (80037e4 <main+0x33c>)
 80035a0:	601a      	str	r2, [r3, #0]

	// The gyroscope LSM6DSO variables
	LSM6DSO_Object_t gyro_device;
	LSM6DSO_Axes_t gyro_acceleration_object;
	uint8_t gyro_acceleration_buffer[40] = {0};
 80035a2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80035a6:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	3304      	adds	r3, #4
 80035b0:	2224      	movs	r2, #36	; 0x24
 80035b2:	2100      	movs	r1, #0
 80035b4:	4618      	mov	r0, r3
 80035b6:	f016 fae1 	bl	8019b7c <memset>
	LSM6DSO_Axes_t gyro_angularvel_object;
	uint8_t gyro_angularvel_buffer[40] = {0};
 80035ba:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80035be:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 80035c2:	2200      	movs	r2, #0
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	3304      	adds	r3, #4
 80035c8:	2224      	movs	r2, #36	; 0x24
 80035ca:	2100      	movs	r1, #0
 80035cc:	4618      	mov	r0, r3
 80035ce:	f016 fad5 	bl	8019b7c <memset>

	//LoRa
	lora_sx1276 lora;

	//MIRA
	uint8_t mira_target_reg = 0x00;
 80035d2:	2300      	movs	r3, #0
 80035d4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80035d8:	f102 021a 	add.w	r2, r2, #26
 80035dc:	7013      	strb	r3, [r2, #0]
	uint8_t mira_Tx_payload[4] = {0x00,0x00,0x00,0x00};
 80035de:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80035e2:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
	//	int message;
	//	int message_length;

	// Time progress tracking using tick
	double system_time_counter;
	system_time_counter = 0;
 80035ea:	f04f 0200 	mov.w	r2, #0
 80035ee:	f04f 0300 	mov.w	r3, #0
 80035f2:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 80035f6:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t system_time_buffer[25] = {0};
 80035fa:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80035fe:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	3304      	adds	r3, #4
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	60da      	str	r2, [r3, #12]
 8003612:	611a      	str	r2, [r3, #16]
 8003614:	751a      	strb	r2, [r3, #20]
	static uint8_t USB_TIMERS = 0x07;

	static uint8_t USB_PING = 0x08;
	static uint8_t USB_FLIGHTMODE = 0x09;

	uint8_t lora_test_packet[10] = {0,1,2,3,4,5,6,7,8,9};
 8003616:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800361a:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 800361e:	4a72      	ldr	r2, [pc, #456]	; (80037e8 <main+0x340>)
 8003620:	ca07      	ldmia	r2, {r0, r1, r2}
 8003622:	c303      	stmia	r3!, {r0, r1}
 8003624:	801a      	strh	r2, [r3, #0]

	int PRINT_TOGGLE = 0;
 8003626:	2300      	movs	r3, #0
 8003628:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800362c:	f102 0214 	add.w	r2, r2, #20
 8003630:	6013      	str	r3, [r2, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003632:	f003 fecb 	bl	80073cc <HAL_Init>


	/* USER CODE BEGIN Init */

	// Initialize HAL for UART interrupts
	HAL_MspInit();
 8003636:	f001 fe6d 	bl	8005314 <HAL_MspInit>
	// Initialize I2C2 with custom driver
	BSP_I2C2_Init();
 800363a:	f7ff fa4b 	bl	8002ad4 <BSP_I2C2_Init>


	//Initialize Msp for both UARTs
	HAL_UART_MspInit(&huart1);
 800363e:	486b      	ldr	r0, [pc, #428]	; (80037ec <main+0x344>)
 8003640:	f001 fffa 	bl	8005638 <HAL_UART_MspInit>
	HAL_UART_MspInit(&huart2);
 8003644:	486a      	ldr	r0, [pc, #424]	; (80037f0 <main+0x348>)
 8003646:	f001 fff7 	bl	8005638 <HAL_UART_MspInit>

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800364a:	f000 ff71 	bl	8004530 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */
	// Initialize SD card
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800364e:	f001 f9c3 	bl	80049d8 <MX_GPIO_Init>
	MX_DMA_Init();
 8003652:	f001 f99d 	bl	8004990 <MX_DMA_Init>
	MX_I2C1_Init();
 8003656:	f000 ffe9 	bl	800462c <MX_I2C1_Init>
	MX_SDMMC1_SD_Init();
 800365a:	f001 f827 	bl	80046ac <MX_SDMMC1_SD_Init>
	//BSP_SD_Init();
	MX_SPI1_Init();
 800365e:	f001 f847 	bl	80046f0 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8003662:	f001 f8f9 	bl	8004858 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8003666:	f001 f943 	bl	80048f0 <MX_USART2_UART_Init>
	MX_FATFS_Init();
 800366a:	f011 f8dd 	bl	8014828 <MX_FATFS_Init>
	MX_USB_DEVICE_Init();
 800366e:	f015 fc47 	bl	8018f00 <MX_USB_DEVICE_Init>
	MX_TIM17_Init();
 8003672:	f001 f87b 	bl	800476c <MX_TIM17_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8003676:	f000 ffad 	bl	80045d4 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */

	// Power on LED
	HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 800367a:	2108      	movs	r1, #8
 800367c:	485d      	ldr	r0, [pc, #372]	; (80037f4 <main+0x34c>)
 800367e:	f004 fe31 	bl	80082e4 <HAL_GPIO_TogglePin>

	// WAIT FOR USB CONNECTION
	// Comment this out once build finished
	if (PRINT_TOGGLE == 1) {
 8003682:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003686:	f103 0314 	add.w	r3, r3, #20
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d107      	bne.n	80036a0 <main+0x1f8>
		while (CDC_Transmit_FS ("START\n", 6) == USBD_BUSY); }
 8003690:	bf00      	nop
 8003692:	2106      	movs	r1, #6
 8003694:	4858      	ldr	r0, [pc, #352]	; (80037f8 <main+0x350>)
 8003696:	f015 fd01 	bl	801909c <CDC_Transmit_FS>
 800369a:	4603      	mov	r3, r0
 800369c:	2b01      	cmp	r3, #1
 800369e:	d0f8      	beq.n	8003692 <main+0x1ea>

	/// MIRA Init /////////////////////////////////////////////////////////////////////////////////


	// Enable MIRA power from OBC
	HAL_GPIO_WritePin(MIRA_EN_PWR_GPIO_Port, MIRA_EN_PWR_Pin, GPIO_PIN_SET);
 80036a0:	2201      	movs	r2, #1
 80036a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80036a6:	4855      	ldr	r0, [pc, #340]	; (80037fc <main+0x354>)
 80036a8:	f004 fe04 	bl	80082b4 <HAL_GPIO_WritePin>
	// Enable Over Current Protection at U4
	HAL_GPIO_WritePin(OCPEN_GPIO_Port, OCPEN_Pin, GPIO_PIN_SET);
 80036ac:	2201      	movs	r2, #1
 80036ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036b2:	4852      	ldr	r0, [pc, #328]	; (80037fc <main+0x354>)
 80036b4:	f004 fdfe 	bl	80082b4 <HAL_GPIO_WritePin>

	// disable channel 1 for MIRA communication
	HAL_GPIO_WritePin(RX_EN_1_GPIO_Port, RX_EN_1_Pin, GPIO_PIN_SET);
 80036b8:	2201      	movs	r2, #1
 80036ba:	2110      	movs	r1, #16
 80036bc:	484f      	ldr	r0, [pc, #316]	; (80037fc <main+0x354>)
 80036be:	f004 fdf9 	bl	80082b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TX_EN_1_GPIO_Port, TX_EN_1_Pin, GPIO_PIN_RESET);
 80036c2:	2200      	movs	r2, #0
 80036c4:	2120      	movs	r1, #32
 80036c6:	484d      	ldr	r0, [pc, #308]	; (80037fc <main+0x354>)
 80036c8:	f004 fdf4 	bl	80082b4 <HAL_GPIO_WritePin>

	// enable channel 2
	HAL_GPIO_WritePin(RX_EN_2_GPIO_Port, RX_EN_2_Pin, GPIO_PIN_SET);
 80036cc:	2201      	movs	r2, #1
 80036ce:	2104      	movs	r1, #4
 80036d0:	484a      	ldr	r0, [pc, #296]	; (80037fc <main+0x354>)
 80036d2:	f004 fdef 	bl	80082b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TX_EN_2_GPIO_Port, TX_EN_2_Pin, GPIO_PIN_SET);
 80036d6:	2201      	movs	r2, #1
 80036d8:	2108      	movs	r1, #8
 80036da:	4848      	ldr	r0, [pc, #288]	; (80037fc <main+0x354>)
 80036dc:	f004 fdea 	bl	80082b4 <HAL_GPIO_WritePin>



	status = mira_init(&huart1, 5000);
 80036e0:	f241 3188 	movw	r1, #5000	; 0x1388
 80036e4:	4841      	ldr	r0, [pc, #260]	; (80037ec <main+0x344>)
 80036e6:	f001 fc65 	bl	8004fb4 <mira_init>
 80036ea:	4603      	mov	r3, r0
 80036ec:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80036f0:	f102 0213 	add.w	r2, r2, #19
 80036f4:	7013      	strb	r3, [r2, #0]
	if (status != HAL_OK) {
 80036f6:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80036fa:	f103 0313 	add.w	r3, r3, #19
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00e      	beq.n	8003722 <main+0x27a>
		HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8003704:	2140      	movs	r1, #64	; 0x40
 8003706:	483b      	ldr	r0, [pc, #236]	; (80037f4 <main+0x34c>)
 8003708:	f004 fdec 	bl	80082e4 <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 800370c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003710:	f003 fed0 	bl	80074b4 <HAL_Delay>
		HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8003714:	2140      	movs	r1, #64	; 0x40
 8003716:	4837      	ldr	r0, [pc, #220]	; (80037f4 <main+0x34c>)
 8003718:	f004 fde4 	bl	80082e4 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 800371c:	20c8      	movs	r0, #200	; 0xc8
 800371e:	f003 fec9 	bl	80074b4 <HAL_Delay>
//		HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
//		HAL_Delay(200);
//	}


	HAL_Delay(1000);
 8003722:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003726:	f003 fec5 	bl	80074b4 <HAL_Delay>
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800372a:	2110      	movs	r1, #16
 800372c:	4831      	ldr	r0, [pc, #196]	; (80037f4 <main+0x34c>)
 800372e:	f004 fdd9 	bl	80082e4 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8003732:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003736:	f003 febd 	bl	80074b4 <HAL_Delay>
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800373a:	2110      	movs	r1, #16
 800373c:	482d      	ldr	r0, [pc, #180]	; (80037f4 <main+0x34c>)
 800373e:	f004 fdd1 	bl	80082e4 <HAL_GPIO_TogglePin>


	/// LoRa Init /////////////////////////////////////////////////////////////////////////////////
	uint8_t lora_res = lora_init(&lora, &hspi1, LORA_NSS_GPIO_Port, LORA_NSS_Pin, LORA_BASE_FREQUENCY_435);
 8003742:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8003746:	3804      	subs	r0, #4
 8003748:	a323      	add	r3, pc, #140	; (adr r3, 80037d8 <main+0x330>)
 800374a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374e:	e9cd 2300 	strd	r2, r3, [sp]
 8003752:	2320      	movs	r3, #32
 8003754:	4a2a      	ldr	r2, [pc, #168]	; (8003800 <main+0x358>)
 8003756:	492b      	ldr	r1, [pc, #172]	; (8003804 <main+0x35c>)
 8003758:	f7ff fe1e 	bl	8003398 <lora_init>
 800375c:	4603      	mov	r3, r0
 800375e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003762:	f102 0212 	add.w	r2, r2, #18
 8003766:	7013      	strb	r3, [r2, #0]
	// Comment this out once build finished
	if (lora_res != LORA_OK) {
 8003768:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800376c:	f103 0312 	add.w	r3, r3, #18
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00e      	beq.n	8003794 <main+0x2ec>
		// Initialization failed
		if (PRINT_TOGGLE == 1) {
 8003776:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800377a:	f103 0314 	add.w	r3, r3, #20
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d107      	bne.n	8003794 <main+0x2ec>
			while (CDC_Transmit_FS ("LORA INIT NOT OK!\n", 18) == USBD_BUSY);}
 8003784:	bf00      	nop
 8003786:	2112      	movs	r1, #18
 8003788:	481f      	ldr	r0, [pc, #124]	; (8003808 <main+0x360>)
 800378a:	f015 fc87 	bl	801909c <CDC_Transmit_FS>
 800378e:	4603      	mov	r3, r0
 8003790:	2b01      	cmp	r3, #1
 8003792:	d0f8      	beq.n	8003786 <main+0x2de>
	}
	if (lora_res == LORA_OK) {
 8003794:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003798:	f103 0312 	add.w	r3, r3, #18
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10e      	bne.n	80037c0 <main+0x318>
		// All good
		if (PRINT_TOGGLE == 1) {
 80037a2:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80037a6:	f103 0314 	add.w	r3, r3, #20
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d107      	bne.n	80037c0 <main+0x318>
			while (CDC_Transmit_FS ("LORA OK!\n", 9) == USBD_BUSY);}
 80037b0:	bf00      	nop
 80037b2:	2109      	movs	r1, #9
 80037b4:	4815      	ldr	r0, [pc, #84]	; (800380c <main+0x364>)
 80037b6:	f015 fc71 	bl	801909c <CDC_Transmit_FS>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d0f8      	beq.n	80037b2 <main+0x30a>
	}
	lora_res = lora_send_packet(&lora, (uint8_t *)"test", 4);
 80037c0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80037c4:	3b04      	subs	r3, #4
 80037c6:	2204      	movs	r2, #4
 80037c8:	4911      	ldr	r1, [pc, #68]	; (8003810 <main+0x368>)
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff fdc5 	bl	800335a <lora_send_packet>
 80037d0:	4603      	mov	r3, r0
 80037d2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80037d6:	e01d      	b.n	8003814 <main+0x36c>
 80037d8:	19ed92c0 	.word	0x19ed92c0
 80037dc:	00000000 	.word	0x00000000
 80037e0:	0801cdc4 	.word	0x0801cdc4
 80037e4:	00202d20 	.word	0x00202d20
 80037e8:	0801cdf8 	.word	0x0801cdf8
 80037ec:	200006cc 	.word	0x200006cc
 80037f0:	20000760 	.word	0x20000760
 80037f4:	48000c00 	.word	0x48000c00
 80037f8:	0801cc68 	.word	0x0801cc68
 80037fc:	48001000 	.word	0x48001000
 8003800:	48000800 	.word	0x48000800
 8003804:	2000061c 	.word	0x2000061c
 8003808:	0801cc70 	.word	0x0801cc70
 800380c:	0801cc84 	.word	0x0801cc84
 8003810:	0801cc90 	.word	0x0801cc90
 8003814:	f102 0212 	add.w	r2, r2, #18
 8003818:	7013      	strb	r3, [r2, #0]
	if (lora_res != LORA_OK) {
 800381a:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800381e:	f103 0312 	add.w	r3, r3, #18
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00e      	beq.n	8003846 <main+0x39e>
		// Send failed
		if (PRINT_TOGGLE == 1) {
 8003828:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800382c:	f103 0314 	add.w	r3, r3, #20
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d107      	bne.n	8003846 <main+0x39e>
			while (CDC_Transmit_FS ("LORA SEND NOT OK!\n", 18) == USBD_BUSY);}
 8003836:	bf00      	nop
 8003838:	2112      	movs	r1, #18
 800383a:	4839      	ldr	r0, [pc, #228]	; (8003920 <main+0x478>)
 800383c:	f015 fc2e 	bl	801909c <CDC_Transmit_FS>
 8003840:	4603      	mov	r3, r0
 8003842:	2b01      	cmp	r3, #1
 8003844:	d0f8      	beq.n	8003838 <main+0x390>
	}

	HAL_Delay(1000);
 8003846:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800384a:	f003 fe33 	bl	80074b4 <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800384e:	2110      	movs	r1, #16
 8003850:	4834      	ldr	r0, [pc, #208]	; (8003924 <main+0x47c>)
 8003852:	f004 fd47 	bl	80082e4 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8003856:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800385a:	f003 fe2b 	bl	80074b4 <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800385e:	2110      	movs	r1, #16
 8003860:	4830      	ldr	r0, [pc, #192]	; (8003924 <main+0x47c>)
 8003862:	f004 fd3f 	bl	80082e4 <HAL_GPIO_TogglePin>


	/// Gyro Init /////////////////////////////////////////////////////////////////////////////////

	// Set gyro io functions and values
	gyro_io.Init = BSP_I2C2_Init;
 8003866:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800386a:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800386e:	4a2e      	ldr	r2, [pc, #184]	; (8003928 <main+0x480>)
 8003870:	601a      	str	r2, [r3, #0]
	gyro_io.DeInit = BSP_I2C2_DeInit;
 8003872:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8003876:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800387a:	4a2c      	ldr	r2, [pc, #176]	; (800392c <main+0x484>)
 800387c:	605a      	str	r2, [r3, #4]
	gyro_io.BusType = 0;
 800387e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8003882:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8003886:	2200      	movs	r2, #0
 8003888:	609a      	str	r2, [r3, #8]
	gyro_io.Address = LSM6DSO_I2C_ADD_L;
 800388a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800388e:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8003892:	22d5      	movs	r2, #213	; 0xd5
 8003894:	731a      	strb	r2, [r3, #12]
	gyro_io.WriteReg = BSP_I2C2_WriteReg;
 8003896:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800389a:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800389e:	4a24      	ldr	r2, [pc, #144]	; (8003930 <main+0x488>)
 80038a0:	611a      	str	r2, [r3, #16]
	gyro_io.ReadReg = BSP_I2C2_ReadReg;
 80038a2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80038a6:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80038aa:	4a22      	ldr	r2, [pc, #136]	; (8003934 <main+0x48c>)
 80038ac:	615a      	str	r2, [r3, #20]
	gyro_io.GetTick = BSP_GetTick;
 80038ae:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80038b2:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80038b6:	4a20      	ldr	r2, [pc, #128]	; (8003938 <main+0x490>)
 80038b8:	619a      	str	r2, [r3, #24]
	gyro_io.Delay = HAL_Delay;
 80038ba:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80038be:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80038c2:	4a1e      	ldr	r2, [pc, #120]	; (800393c <main+0x494>)
 80038c4:	61da      	str	r2, [r3, #28]

	// Initialize gyro
	LSM6DSO_RegisterBusIO(&gyro_device, &gyro_io);
 80038c6:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80038ca:	3a0c      	subs	r2, #12
 80038cc:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80038d0:	3b04      	subs	r3, #4
 80038d2:	4611      	mov	r1, r2
 80038d4:	4618      	mov	r0, r3
 80038d6:	f002 f8d1 	bl	8005a7c <LSM6DSO_RegisterBusIO>
	gyro_result_init = LSM6DSO_Init(&gyro_device);
 80038da:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80038de:	3b04      	subs	r3, #4
 80038e0:	4618      	mov	r0, r3
 80038e2:	f002 f935 	bl	8005b50 <LSM6DSO_Init>
 80038e6:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80038ea:	f103 030c 	add.w	r3, r3, #12
 80038ee:	6018      	str	r0, [r3, #0]

	// Check and print gyro device status
	// Comment this out once build finished
	if (PRINT_TOGGLE == 1) {
 80038f0:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80038f4:	f103 0314 	add.w	r3, r3, #20
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d12a      	bne.n	8003954 <main+0x4ac>
		if (gyro_result_init == 0) {
 80038fe:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003902:	f103 030c 	add.w	r3, r3, #12
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d11b      	bne.n	8003944 <main+0x49c>
			while (CDC_Transmit_FS ("GYRO OK!\n", 9) == USBD_BUSY);}
 800390c:	bf00      	nop
 800390e:	2109      	movs	r1, #9
 8003910:	480b      	ldr	r0, [pc, #44]	; (8003940 <main+0x498>)
 8003912:	f015 fbc3 	bl	801909c <CDC_Transmit_FS>
 8003916:	4603      	mov	r3, r0
 8003918:	2b01      	cmp	r3, #1
 800391a:	d0f8      	beq.n	800390e <main+0x466>
 800391c:	e01a      	b.n	8003954 <main+0x4ac>
 800391e:	bf00      	nop
 8003920:	0801cc98 	.word	0x0801cc98
 8003924:	48000c00 	.word	0x48000c00
 8003928:	08002ad5 	.word	0x08002ad5
 800392c:	08002b51 	.word	0x08002b51
 8003930:	08002ba1 	.word	0x08002ba1
 8003934:	08002c05 	.word	0x08002c05
 8003938:	08002c69 	.word	0x08002c69
 800393c:	080074b5 	.word	0x080074b5
 8003940:	0801ccac 	.word	0x0801ccac
		else {
			while (CDC_Transmit_FS ("GYRO NOT OK!\n", 13) == USBD_BUSY);}
 8003944:	bf00      	nop
 8003946:	210d      	movs	r1, #13
 8003948:	48d3      	ldr	r0, [pc, #844]	; (8003c98 <main+0x7f0>)
 800394a:	f015 fba7 	bl	801909c <CDC_Transmit_FS>
 800394e:	4603      	mov	r3, r0
 8003950:	2b01      	cmp	r3, #1
 8003952:	d0f8      	beq.n	8003946 <main+0x49e>
	}


	// Enabling translational and angular acceleration measurements
	LSM6DSO_ACC_Enable(&gyro_device);
 8003954:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003958:	3b04      	subs	r3, #4
 800395a:	4618      	mov	r0, r3
 800395c:	f002 f96d 	bl	8005c3a <LSM6DSO_ACC_Enable>
	LSM6DSO_GYRO_Enable(&gyro_device);
 8003960:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003964:	3b04      	subs	r3, #4
 8003966:	4618      	mov	r0, r3
 8003968:	f002 fbd9 	bl	800611e <LSM6DSO_GYRO_Enable>
	LSM6DSO_ACC_SetOutputDataRate(&gyro_device, 104.0f);
 800396c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003970:	3b04      	subs	r3, #4
 8003972:	ed9f 0aca 	vldr	s0, [pc, #808]	; 8003c9c <main+0x7f4>
 8003976:	4618      	mov	r0, r3
 8003978:	f002 f9ca 	bl	8005d10 <LSM6DSO_ACC_SetOutputDataRate>
	LSM6DSO_GYRO_SetOutputDataRate(&gyro_device, 104.0f);
 800397c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003980:	3b04      	subs	r3, #4
 8003982:	ed9f 0ac6 	vldr	s0, [pc, #792]	; 8003c9c <main+0x7f4>
 8003986:	4618      	mov	r0, r3
 8003988:	f002 fc6e 	bl	8006268 <LSM6DSO_GYRO_SetOutputDataRate>
	//LSM6DSO_FIFO_Set_Mode(&gyro_device, (uint8_t)3);

	HAL_Delay(1000);
 800398c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003990:	f003 fd90 	bl	80074b4 <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003994:	2110      	movs	r1, #16
 8003996:	48c2      	ldr	r0, [pc, #776]	; (8003ca0 <main+0x7f8>)
 8003998:	f004 fca4 	bl	80082e4 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 800399c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039a0:	f003 fd88 	bl	80074b4 <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80039a4:	2110      	movs	r1, #16
 80039a6:	48be      	ldr	r0, [pc, #760]	; (8003ca0 <main+0x7f8>)
 80039a8:	f004 fc9c 	bl	80082e4 <HAL_GPIO_TogglePin>
	/// BMP Init /////////////////////////////////////////////////////////////////////////////////
	/* Interface reference is given as a parameter
	 *         For I2C : BMP3_I2C_INTF
	 *         For SPI : BMP3_SPI_INTF
	 */
	bmp_result = bmp3_interface_init(&bmp_device, BMP3_I2C_INTF);
 80039ac:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80039b0:	3b08      	subs	r3, #8
 80039b2:	2101      	movs	r1, #1
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fe ffe3 	bl	8002980 <bmp3_interface_init>
 80039ba:	4603      	mov	r3, r0
 80039bc:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80039c0:	f102 020b 	add.w	r2, r2, #11
 80039c4:	7013      	strb	r3, [r2, #0]
	bmp3_check_rslt("bmp3_interface_init", bmp_result);
 80039c6:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80039ca:	f103 030b 	add.w	r3, r3, #11
 80039ce:	f993 3000 	ldrsb.w	r3, [r3]
 80039d2:	4619      	mov	r1, r3
 80039d4:	48b3      	ldr	r0, [pc, #716]	; (8003ca4 <main+0x7fc>)
 80039d6:	f7fe ff73 	bl	80028c0 <bmp3_check_rslt>

	bmp_result = bmp3_init(&bmp_device);
 80039da:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80039de:	3b08      	subs	r3, #8
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fd facb 	bl	8000f7c <bmp3_init>
 80039e6:	4603      	mov	r3, r0
 80039e8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80039ec:	f102 020b 	add.w	r2, r2, #11
 80039f0:	7013      	strb	r3, [r2, #0]
	bmp3_check_rslt("bmp3_init", bmp_result);
 80039f2:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80039f6:	f103 030b 	add.w	r3, r3, #11
 80039fa:	f993 3000 	ldrsb.w	r3, [r3]
 80039fe:	4619      	mov	r1, r3
 8003a00:	48a9      	ldr	r0, [pc, #676]	; (8003ca8 <main+0x800>)
 8003a02:	f7fe ff5d 	bl	80028c0 <bmp3_check_rslt>


	bmp_settings.int_settings.drdy_en = BMP3_DISABLE;
 8003a06:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8003a0a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003a0e:	2200      	movs	r2, #0
 8003a10:	729a      	strb	r2, [r3, #10]
	bmp_settings.int_settings.latch = BMP3_ENABLE;
 8003a12:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8003a16:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	725a      	strb	r2, [r3, #9]
	bmp_settings.press_en = BMP3_ENABLE;
 8003a1e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8003a22:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003a26:	2201      	movs	r2, #1
 8003a28:	705a      	strb	r2, [r3, #1]
	bmp_settings.temp_en = BMP3_ENABLE;
 8003a2a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8003a2e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003a32:	2201      	movs	r2, #1
 8003a34:	709a      	strb	r2, [r3, #2]

	bmp_settings.odr_filter.press_os = BMP3_OVERSAMPLING_4X;
 8003a36:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8003a3a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003a3e:	2202      	movs	r2, #2
 8003a40:	70da      	strb	r2, [r3, #3]
	bmp_settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
 8003a42:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8003a46:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	711a      	strb	r2, [r3, #4]
	bmp_settings.odr_filter.odr = BMP3_ODR_100_HZ;
 8003a4e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8003a52:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003a56:	2201      	movs	r2, #1
 8003a58:	719a      	strb	r2, [r3, #6]

	bmp_settings_select = BMP3_SEL_PRESS_EN | BMP3_SEL_TEMP_EN | BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR | BMP3_SEL_DRDY_EN;
 8003a5a:	23be      	movs	r3, #190	; 0xbe
 8003a5c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003a60:	f102 0208 	add.w	r2, r2, #8
 8003a64:	8013      	strh	r3, [r2, #0]

	bmp_result = bmp3_set_sensor_settings(bmp_settings_select, &bmp_settings, &bmp_device);
 8003a66:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003a6a:	f103 0308 	add.w	r3, r3, #8
 8003a6e:	8818      	ldrh	r0, [r3, #0]
 8003a70:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8003a74:	3a08      	subs	r2, #8
 8003a76:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003a7a:	3b08      	subs	r3, #8
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	f7fd fbe5 	bl	800124c <bmp3_set_sensor_settings>
 8003a82:	4603      	mov	r3, r0
 8003a84:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003a88:	f102 020b 	add.w	r2, r2, #11
 8003a8c:	7013      	strb	r3, [r2, #0]
	bmp3_check_rslt("bmp3_set_sensor_settings", bmp_result);
 8003a8e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003a92:	f103 030b 	add.w	r3, r3, #11
 8003a96:	f993 3000 	ldrsb.w	r3, [r3]
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4883      	ldr	r0, [pc, #524]	; (8003cac <main+0x804>)
 8003a9e:	f7fe ff0f 	bl	80028c0 <bmp3_check_rslt>

	// Comment this out once build finished
	if (bmp_result == BMP3_OK) {
 8003aa2:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003aa6:	f103 030b 	add.w	r3, r3, #11
 8003aaa:	f993 3000 	ldrsb.w	r3, [r3]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10e      	bne.n	8003ad0 <main+0x628>
		if (PRINT_TOGGLE == 1) {
 8003ab2:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003ab6:	f103 0314 	add.w	r3, r3, #20
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d107      	bne.n	8003ad0 <main+0x628>
			while (CDC_Transmit_FS ("BMP OK!\n", 8) == USBD_BUSY);}
 8003ac0:	bf00      	nop
 8003ac2:	2108      	movs	r1, #8
 8003ac4:	487a      	ldr	r0, [pc, #488]	; (8003cb0 <main+0x808>)
 8003ac6:	f015 fae9 	bl	801909c <CDC_Transmit_FS>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d0f8      	beq.n	8003ac2 <main+0x61a>
	bmp_result = bmp3_set_op_mode(&bmp_settings, &bmp_device);
	bmp3_check_rslt("bmp3_set_op_mode", bmp_result);*/

	//volatile unsigned tmp;

	HAL_Delay(1000);
 8003ad0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ad4:	f003 fcee 	bl	80074b4 <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003ad8:	2110      	movs	r1, #16
 8003ada:	4871      	ldr	r0, [pc, #452]	; (8003ca0 <main+0x7f8>)
 8003adc:	f004 fc02 	bl	80082e4 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8003ae0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ae4:	f003 fce6 	bl	80074b4 <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003ae8:	2110      	movs	r1, #16
 8003aea:	486d      	ldr	r0, [pc, #436]	; (8003ca0 <main+0x7f8>)
 8003aec:	f004 fbfa 	bl	80082e4 <HAL_GPIO_TogglePin>

	/// GPS Init /////////////////////////////////////////////////////////////////////////////////

	// Setting the buffer for UART2 data reading
	gps_rxBuffer = gps_rxBuffer1;
 8003af0:	4b70      	ldr	r3, [pc, #448]	; (8003cb4 <main+0x80c>)
 8003af2:	4a71      	ldr	r2, [pc, #452]	; (8003cb8 <main+0x810>)
 8003af4:	601a      	str	r2, [r3, #0]
	ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_UE);
 8003af6:	4b71      	ldr	r3, [pc, #452]	; (8003cbc <main+0x814>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8003afe:	f102 0218 	add.w	r2, r2, #24
 8003b02:	6013      	str	r3, [r2, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b04:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8003b08:	f103 0318 	add.w	r3, r3, #24
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	e853 3f00 	ldrex	r3, [r3]
 8003b12:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8003b16:	f102 0214 	add.w	r2, r2, #20
 8003b1a:	6013      	str	r3, [r2, #0]
   return(result);
 8003b1c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8003b20:	f103 0314 	add.w	r3, r3, #20
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003b2e:	f102 0204 	add.w	r2, r2, #4
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	4b61      	ldr	r3, [pc, #388]	; (8003cbc <main+0x814>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003b3e:	f103 0304 	add.w	r3, r3, #4
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f507 519b 	add.w	r1, r7, #4960	; 0x1360
 8003b48:	f101 0104 	add.w	r1, r1, #4
 8003b4c:	600b      	str	r3, [r1, #0]
 8003b4e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8003b52:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b54:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8003b58:	6819      	ldr	r1, [r3, #0]
 8003b5a:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8003b5e:	f103 0304 	add.w	r3, r3, #4
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	e841 2300 	strex	r3, r2, [r1]
 8003b68:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8003b6c:	f102 021c 	add.w	r2, r2, #28
 8003b70:	6013      	str	r3, [r2, #0]
   return(result);
 8003b72:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8003b76:	f103 031c 	add.w	r3, r3, #28
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1ba      	bne.n	8003af6 <main+0x64e>
	ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_RE);
 8003b80:	4b4e      	ldr	r3, [pc, #312]	; (8003cbc <main+0x814>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8003b88:	f102 0204 	add.w	r2, r2, #4
 8003b8c:	6013      	str	r3, [r2, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8003b92:	f103 0304 	add.w	r3, r3, #4
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	e853 3f00 	ldrex	r3, [r3]
 8003b9c:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8003ba0:	6013      	str	r3, [r2, #0]
   return(result);
 8003ba2:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f043 0304 	orr.w	r3, r3, #4
 8003bac:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	4b42      	ldr	r3, [pc, #264]	; (8003cbc <main+0x814>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f507 519a 	add.w	r1, r7, #4928	; 0x1340
 8003bc2:	f101 0110 	add.w	r1, r1, #16
 8003bc6:	600b      	str	r3, [r1, #0]
 8003bc8:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8003bcc:	f103 030c 	add.w	r3, r3, #12
 8003bd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd2:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8003bd6:	f103 030c 	add.w	r3, r3, #12
 8003bda:	6819      	ldr	r1, [r3, #0]
 8003bdc:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8003be0:	f103 0310 	add.w	r3, r3, #16
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	e841 2300 	strex	r3, r2, [r1]
 8003bea:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8003bee:	f102 0208 	add.w	r2, r2, #8
 8003bf2:	6013      	str	r3, [r2, #0]
   return(result);
 8003bf4:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8003bf8:	f103 0308 	add.w	r3, r3, #8
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1be      	bne.n	8003b80 <main+0x6d8>
	ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003c02:	4b2e      	ldr	r3, [pc, #184]	; (8003cbc <main+0x814>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8003c0a:	f102 0210 	add.w	r2, r2, #16
 8003c0e:	6013      	str	r3, [r2, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c10:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8003c14:	f103 0310 	add.w	r3, r3, #16
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	e853 3f00 	ldrex	r3, [r3]
 8003c1e:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8003c22:	f102 020c 	add.w	r2, r2, #12
 8003c26:	6013      	str	r3, [r2, #0]
   return(result);
 8003c28:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8003c2c:	f103 030c 	add.w	r3, r3, #12
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f043 0320 	orr.w	r3, r3, #32
 8003c36:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8003c3a:	f102 021c 	add.w	r2, r2, #28
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	4b1e      	ldr	r3, [pc, #120]	; (8003cbc <main+0x814>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	461a      	mov	r2, r3
 8003c46:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8003c4a:	f103 031c 	add.w	r3, r3, #28
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f507 5199 	add.w	r1, r7, #4896	; 0x1320
 8003c54:	f101 011c 	add.w	r1, r1, #28
 8003c58:	600b      	str	r3, [r1, #0]
 8003c5a:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8003c5e:	f103 0318 	add.w	r3, r3, #24
 8003c62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c64:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8003c68:	f103 0318 	add.w	r3, r3, #24
 8003c6c:	6819      	ldr	r1, [r3, #0]
 8003c6e:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8003c72:	f103 031c 	add.w	r3, r3, #28
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	e841 2300 	strex	r3, r2, [r1]
 8003c7c:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8003c80:	f102 0214 	add.w	r2, r2, #20
 8003c84:	6013      	str	r3, [r2, #0]
   return(result);
 8003c86:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8003c8a:	f103 0314 	add.w	r3, r3, #20
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1b6      	bne.n	8003c02 <main+0x75a>
 8003c94:	e014      	b.n	8003cc0 <main+0x818>
 8003c96:	bf00      	nop
 8003c98:	0801ccb8 	.word	0x0801ccb8
 8003c9c:	42d00000 	.word	0x42d00000
 8003ca0:	48000c00 	.word	0x48000c00
 8003ca4:	0801ccc8 	.word	0x0801ccc8
 8003ca8:	0801ccdc 	.word	0x0801ccdc
 8003cac:	0801cce8 	.word	0x0801cce8
 8003cb0:	0801cd04 	.word	0x0801cd04
 8003cb4:	20000ef4 	.word	0x20000ef4
 8003cb8:	200008b4 	.word	0x200008b4
 8003cbc:	20000760 	.word	0x20000760


	HAL_Delay(1000);
 8003cc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003cc4:	f003 fbf6 	bl	80074b4 <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003cc8:	2110      	movs	r1, #16
 8003cca:	4879      	ldr	r0, [pc, #484]	; (8003eb0 <main+0xa08>)
 8003ccc:	f004 fb0a 	bl	80082e4 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8003cd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003cd4:	f003 fbee 	bl	80074b4 <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003cd8:	2110      	movs	r1, #16
 8003cda:	4875      	ldr	r0, [pc, #468]	; (8003eb0 <main+0xa08>)
 8003cdc:	f004 fb02 	bl	80082e4 <HAL_GPIO_TogglePin>
	//
	//			}
	//		}
	//	}
	//	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
	sd_status = f_mount(&SDFatFS, (TCHAR const*)SDPath, 1);
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	4974      	ldr	r1, [pc, #464]	; (8003eb4 <main+0xa0c>)
 8003ce4:	4874      	ldr	r0, [pc, #464]	; (8003eb8 <main+0xa10>)
 8003ce6:	f014 fcb7 	bl	8018658 <f_mount>
 8003cea:	4603      	mov	r3, r0
 8003cec:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003cf0:	f102 021b 	add.w	r2, r2, #27
 8003cf4:	7013      	strb	r3, [r2, #0]
	// Comment this out once build finished
	GPIO_PinState pinstate = HAL_GPIO_ReadPin(CARD_DETECT_GPIO_Port, CARD_DETECT_Pin);
 8003cf6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cfe:	f004 fac1 	bl	8008284 <HAL_GPIO_ReadPin>
 8003d02:	4603      	mov	r3, r0
 8003d04:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8003d08:	f102 021b 	add.w	r2, r2, #27
 8003d0c:	7013      	strb	r3, [r2, #0]


	while (pinstate == GPIO_PIN_RESET) {
 8003d0e:	e00b      	b.n	8003d28 <main+0x880>
		HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8003d10:	2120      	movs	r1, #32
 8003d12:	4867      	ldr	r0, [pc, #412]	; (8003eb0 <main+0xa08>)
 8003d14:	f004 fae6 	bl	80082e4 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8003d18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d1c:	f003 fbca 	bl	80074b4 <HAL_Delay>
		HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8003d20:	2120      	movs	r1, #32
 8003d22:	4863      	ldr	r0, [pc, #396]	; (8003eb0 <main+0xa08>)
 8003d24:	f004 fade 	bl	80082e4 <HAL_GPIO_TogglePin>
	while (pinstate == GPIO_PIN_RESET) {
 8003d28:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8003d2c:	f103 031b 	add.w	r3, r3, #27
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0ec      	beq.n	8003d10 <main+0x868>
	}


	while(sd_status != FR_OK)
 8003d36:	e028      	b.n	8003d8a <main+0x8e2>
	{
		if (PRINT_TOGGLE == 1) {
 8003d38:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003d3c:	f103 0314 	add.w	r3, r3, #20
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d107      	bne.n	8003d56 <main+0x8ae>
			while (CDC_Transmit_FS ("Mount failed!\n", 14) == USBD_BUSY);}
 8003d46:	bf00      	nop
 8003d48:	210e      	movs	r1, #14
 8003d4a:	485c      	ldr	r0, [pc, #368]	; (8003ebc <main+0xa14>)
 8003d4c:	f015 f9a6 	bl	801909c <CDC_Transmit_FS>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d0f8      	beq.n	8003d48 <main+0x8a0>

		HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8003d56:	2140      	movs	r1, #64	; 0x40
 8003d58:	4855      	ldr	r0, [pc, #340]	; (8003eb0 <main+0xa08>)
 8003d5a:	f004 fac3 	bl	80082e4 <HAL_GPIO_TogglePin>
					HAL_Delay(800);
 8003d5e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003d62:	f003 fba7 	bl	80074b4 <HAL_Delay>
					HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8003d66:	2140      	movs	r1, #64	; 0x40
 8003d68:	4851      	ldr	r0, [pc, #324]	; (8003eb0 <main+0xa08>)
 8003d6a:	f004 fabb 	bl	80082e4 <HAL_GPIO_TogglePin>
					HAL_Delay(200);
 8003d6e:	20c8      	movs	r0, #200	; 0xc8
 8003d70:	f003 fba0 	bl	80074b4 <HAL_Delay>

		//while (CDC_Transmit_FS (, 14) == USBD_BUSY);
		sd_status = f_mount(&SDFatFS, (TCHAR const*)SDPath, 1);
 8003d74:	2201      	movs	r2, #1
 8003d76:	494f      	ldr	r1, [pc, #316]	; (8003eb4 <main+0xa0c>)
 8003d78:	484f      	ldr	r0, [pc, #316]	; (8003eb8 <main+0xa10>)
 8003d7a:	f014 fc6d 	bl	8018658 <f_mount>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003d84:	f102 021b 	add.w	r2, r2, #27
 8003d88:	7013      	strb	r3, [r2, #0]
	while(sd_status != FR_OK)
 8003d8a:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003d8e:	f103 031b 	add.w	r3, r3, #27
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1cf      	bne.n	8003d38 <main+0x890>
	}

	sd_status = f_open(&SDFile, "STM32.TXT", FA_OPEN_APPEND | FA_WRITE);
 8003d98:	2232      	movs	r2, #50	; 0x32
 8003d9a:	4949      	ldr	r1, [pc, #292]	; (8003ec0 <main+0xa18>)
 8003d9c:	4849      	ldr	r0, [pc, #292]	; (8003ec4 <main+0xa1c>)
 8003d9e:	f014 fca1 	bl	80186e4 <f_open>
 8003da2:	4603      	mov	r3, r0
 8003da4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003da8:	f102 021b 	add.w	r2, r2, #27
 8003dac:	7013      	strb	r3, [r2, #0]
	if(sd_status != FR_OK)
 8003dae:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003db2:	f103 031b 	add.w	r3, r3, #27
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00e      	beq.n	8003dda <main+0x932>
	{
		if (PRINT_TOGGLE == 1) {
 8003dbc:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003dc0:	f103 0314 	add.w	r3, r3, #20
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d107      	bne.n	8003dda <main+0x932>
			while (CDC_Transmit_FS ("Open file failed!\n", 18) == USBD_BUSY);}
 8003dca:	bf00      	nop
 8003dcc:	2112      	movs	r1, #18
 8003dce:	483e      	ldr	r0, [pc, #248]	; (8003ec8 <main+0xa20>)
 8003dd0:	f015 f964 	bl	801909c <CDC_Transmit_FS>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d0f8      	beq.n	8003dcc <main+0x924>
	}

	HAL_Delay(1000);
 8003dda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003dde:	f003 fb69 	bl	80074b4 <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003de2:	2110      	movs	r1, #16
 8003de4:	4832      	ldr	r0, [pc, #200]	; (8003eb0 <main+0xa08>)
 8003de6:	f004 fa7d 	bl	80082e4 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8003dea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003dee:	f003 fb61 	bl	80074b4 <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003df2:	2110      	movs	r1, #16
 8003df4:	482e      	ldr	r0, [pc, #184]	; (8003eb0 <main+0xa08>)
 8003df6:	f004 fa75 	bl	80082e4 <HAL_GPIO_TogglePin>

	/// System timers Init /////////////////////////////////////////////////////////////////////////////////

	// Start timers
	HAL_TIM_Base_Start_IT(&htim17);
 8003dfa:	4834      	ldr	r0, [pc, #208]	; (8003ecc <main+0xa24>)
 8003dfc:	f00c f968 	bl	80100d0 <HAL_TIM_Base_Start_IT>
	tick = 600;
 8003e00:	4b33      	ldr	r3, [pc, #204]	; (8003ed0 <main+0xa28>)
 8003e02:	2258      	movs	r2, #88	; 0x58
 8003e04:	701a      	strb	r2, [r3, #0]
	tickGPS = 0;
 8003e06:	4b33      	ldr	r3, [pc, #204]	; (8003ed4 <main+0xa2c>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	701a      	strb	r2, [r3, #0]


	HAL_Delay(1000);
 8003e0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e10:	f003 fb50 	bl	80074b4 <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003e14:	2110      	movs	r1, #16
 8003e16:	4826      	ldr	r0, [pc, #152]	; (8003eb0 <main+0xa08>)
 8003e18:	f004 fa64 	bl	80082e4 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8003e1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e20:	f003 fb48 	bl	80074b4 <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003e24:	2110      	movs	r1, #16
 8003e26:	4822      	ldr	r0, [pc, #136]	; (8003eb0 <main+0xa08>)
 8003e28:	f004 fa5c 	bl	80082e4 <HAL_GPIO_TogglePin>
	/// I2C scanning /////////////////////////////////////////////////////////////////////////////////
	// Comment this out once build finished
	//-[ I2C Bus Scanning ]-
	uint8_t i = 0, ret;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 8003e32:	f102 020f 	add.w	r2, r2, #15
 8003e36:	7013      	strb	r3, [r2, #0]
	for(i = 1; i < 128; i++)
 8003e38:	2301      	movs	r3, #1
 8003e3a:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 8003e3e:	f102 020f 	add.w	r2, r2, #15
 8003e42:	7013      	strb	r3, [r2, #0]
 8003e44:	e082      	b.n	8003f4c <main+0xaa4>
	{
		ret = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 3, 5);
 8003e46:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8003e4a:	f103 030f 	add.w	r3, r3, #15
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	b299      	uxth	r1, r3
 8003e56:	2305      	movs	r3, #5
 8003e58:	2203      	movs	r2, #3
 8003e5a:	481f      	ldr	r0, [pc, #124]	; (8003ed8 <main+0xa30>)
 8003e5c:	f004 ff62 	bl	8008d24 <HAL_I2C_IsDeviceReady>
 8003e60:	4603      	mov	r3, r0
 8003e62:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8003e66:	f102 020a 	add.w	r2, r2, #10
 8003e6a:	7013      	strb	r3, [r2, #0]
		if (ret != HAL_OK) // No ACK Received At That Address
 8003e6c:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8003e70:	f103 030a 	add.w	r3, r3, #10
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d030      	beq.n	8003edc <main+0xa34>
		{
			if (PRINT_TOGGLE == 1) {
 8003e7a:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003e7e:	f103 0314 	add.w	r3, r3, #20
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d156      	bne.n	8003f36 <main+0xa8e>
				while (CDC_Transmit_FS (i2c2check_space, strlen(i2c2check_space)) == USBD_BUSY);}
 8003e88:	bf00      	nop
 8003e8a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003e8e:	3b0c      	subs	r3, #12
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7fc f9b5 	bl	8000200 <strlen>
 8003e96:	4603      	mov	r3, r0
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003e9e:	3b0c      	subs	r3, #12
 8003ea0:	4611      	mov	r1, r2
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f015 f8fa 	bl	801909c <CDC_Transmit_FS>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d0ed      	beq.n	8003e8a <main+0x9e2>
 8003eae:	e042      	b.n	8003f36 <main+0xa8e>
 8003eb0:	48000c00 	.word	0x48000c00
 8003eb4:	20000f0c 	.word	0x20000f0c
 8003eb8:	20000f10 	.word	0x20000f10
 8003ebc:	0801cd10 	.word	0x0801cd10
 8003ec0:	0801cd20 	.word	0x0801cd20
 8003ec4:	20001140 	.word	0x20001140
 8003ec8:	0801cd2c 	.word	0x0801cd2c
 8003ecc:	20000680 	.word	0x20000680
 8003ed0:	20000f00 	.word	0x20000f00
 8003ed4:	20000f01 	.word	0x20000f01
 8003ed8:	200004f0 	.word	0x200004f0
		}
		else if(ret == HAL_OK)
 8003edc:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8003ee0:	f103 030a 	add.w	r3, r3, #10
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d125      	bne.n	8003f36 <main+0xa8e>
		{
			sprintf(i2c2check_active_address, "0x%X", i);
 8003eea:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8003eee:	f103 030f 	add.w	r3, r3, #15
 8003ef2:	781a      	ldrb	r2, [r3, #0]
 8003ef4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003ef8:	3b08      	subs	r3, #8
 8003efa:	49dc      	ldr	r1, [pc, #880]	; (800426c <main+0xdc4>)
 8003efc:	4618      	mov	r0, r3
 8003efe:	f016 fbb7 	bl	801a670 <siprintf>
			if (PRINT_TOGGLE == 1) {
 8003f02:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003f06:	f103 0314 	add.w	r3, r3, #20
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d112      	bne.n	8003f36 <main+0xa8e>
				while (CDC_Transmit_FS (i2c2check_active_address, strlen(i2c2check_active_address)) == USBD_BUSY);}
 8003f10:	bf00      	nop
 8003f12:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003f16:	3b08      	subs	r3, #8
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fc f971 	bl	8000200 <strlen>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003f26:	3b08      	subs	r3, #8
 8003f28:	4611      	mov	r1, r2
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f015 f8b6 	bl	801909c <CDC_Transmit_FS>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d0ed      	beq.n	8003f12 <main+0xa6a>
	for(i = 1; i < 128; i++)
 8003f36:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8003f3a:	f103 030f 	add.w	r3, r3, #15
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	3301      	adds	r3, #1
 8003f42:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 8003f46:	f102 020f 	add.w	r2, r2, #15
 8003f4a:	7013      	strb	r3, [r2, #0]
 8003f4c:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8003f50:	f103 030f 	add.w	r3, r3, #15
 8003f54:	f993 3000 	ldrsb.w	r3, [r3]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f6bf af74 	bge.w	8003e46 <main+0x99e>
		}
	}

	HAL_Delay(1000);
 8003f5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f62:	f003 faa7 	bl	80074b4 <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003f66:	2110      	movs	r1, #16
 8003f68:	48c1      	ldr	r0, [pc, #772]	; (8004270 <main+0xdc8>)
 8003f6a:	f004 f9bb 	bl	80082e4 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8003f6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f72:	f003 fa9f 	bl	80074b4 <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003f76:	2110      	movs	r1, #16
 8003f78:	48bd      	ldr	r0, [pc, #756]	; (8004270 <main+0xdc8>)
 8003f7a:	f004 f9b3 	bl	80082e4 <HAL_GPIO_TogglePin>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	// Have a timer to break the USB loop in case of power cycle
	tick = 600;
 8003f7e:	4bbd      	ldr	r3, [pc, #756]	; (8004274 <main+0xdcc>)
 8003f80:	2258      	movs	r2, #88	; 0x58
 8003f82:	701a      	strb	r2, [r3, #0]

	/// Pre-main program /////////////////////////////////////////////////////////////////////////////////
	/// Pre-main program /////////////////////////////////////////////////////////////////////////////////
	/// Pre-main program /////////////////////////////////////////////////////////////////////////////////

	while (0) {
 8003f84:	bf00      	nop
			}
		}
	}


	HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8003f86:	2110      	movs	r1, #16
 8003f88:	48b9      	ldr	r0, [pc, #740]	; (8004270 <main+0xdc8>)
 8003f8a:	f004 f9ab 	bl	80082e4 <HAL_GPIO_TogglePin>
	// Reset timers before main program
	tick = 0;
 8003f8e:	4bb9      	ldr	r3, [pc, #740]	; (8004274 <main+0xdcc>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	701a      	strb	r2, [r3, #0]
	tickGPS = 0;
 8003f94:	4bb8      	ldr	r3, [pc, #736]	; (8004278 <main+0xdd0>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	701a      	strb	r2, [r3, #0]
	tickSync = 0;
 8003f9a:	4bb8      	ldr	r3, [pc, #736]	; (800427c <main+0xdd4>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	701a      	strb	r2, [r3, #0]
	/// Main program /////////////////////////////////////////////////////////////////////////////////
	/// Main program /////////////////////////////////////////////////////////////////////////////////
	while (1) {

		// Flush SD card every minute
		if (tickSync == 0) {
 8003fa0:	4bb6      	ldr	r3, [pc, #728]	; (800427c <main+0xdd4>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d121      	bne.n	8003fee <main+0xb46>
			tickSync = 600;
 8003faa:	4bb4      	ldr	r3, [pc, #720]	; (800427c <main+0xdd4>)
 8003fac:	2258      	movs	r2, #88	; 0x58
 8003fae:	701a      	strb	r2, [r3, #0]
			sd_status = f_sync(&SDFile);
 8003fb0:	48b3      	ldr	r0, [pc, #716]	; (8004280 <main+0xdd8>)
 8003fb2:	f014 feca 	bl	8018d4a <f_sync>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003fbc:	f102 021b 	add.w	r2, r2, #27
 8003fc0:	7013      	strb	r3, [r2, #0]
			// Comment this out once build finished
			if(sd_status != FR_OK)
 8003fc2:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003fc6:	f103 031b 	add.w	r3, r3, #27
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00e      	beq.n	8003fee <main+0xb46>
			{
				if (PRINT_TOGGLE == 1) {
 8003fd0:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8003fd4:	f103 0314 	add.w	r3, r3, #20
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d107      	bne.n	8003fee <main+0xb46>
					while (CDC_Transmit_FS ("Sync failed!\n", 14) == USBD_BUSY);}
 8003fde:	bf00      	nop
 8003fe0:	210e      	movs	r1, #14
 8003fe2:	48a8      	ldr	r0, [pc, #672]	; (8004284 <main+0xddc>)
 8003fe4:	f015 f85a 	bl	801909c <CDC_Transmit_FS>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d0f8      	beq.n	8003fe0 <main+0xb38>

		}


		// Read temperature, pressure and gyro data every second and send everything to SD and lora every second
		if (tick == 0) {
 8003fee:	4ba1      	ldr	r3, [pc, #644]	; (8004274 <main+0xdcc>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f040 8258 	bne.w	80044aa <main+0x1002>
			// Start timer again
			tick = 10;
 8003ffa:	4b9e      	ldr	r3, [pc, #632]	; (8004274 <main+0xdcc>)
 8003ffc:	220a      	movs	r2, #10
 8003ffe:	701a      	strb	r2, [r3, #0]

			/// TIMER /////////////////////////////////////////////////////////////////////////////////
			// Print current time
			sprintf(system_time_buffer, "t:%.0f\n", system_time_counter);
 8004000:	f107 0018 	add.w	r0, r7, #24
 8004004:	380c      	subs	r0, #12
 8004006:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 800400a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400e:	499e      	ldr	r1, [pc, #632]	; (8004288 <main+0xde0>)
 8004010:	f016 fb2e 	bl	801a670 <siprintf>

			//while (CDC_Transmit_FS (system_time_buffer, strlen(system_time_buffer)) == USBD_BUSY);
			add_to_buffer(&data_buffer, &system_time_buffer, strlen(system_time_buffer));
 8004014:	f107 0318 	add.w	r3, r7, #24
 8004018:	3b0c      	subs	r3, #12
 800401a:	4618      	mov	r0, r3
 800401c:	f7fc f8f0 	bl	8000200 <strlen>
 8004020:	4603      	mov	r3, r0
 8004022:	461a      	mov	r2, r3
 8004024:	f107 0318 	add.w	r3, r7, #24
 8004028:	3b0c      	subs	r3, #12
 800402a:	f607 20b4 	addw	r0, r7, #2740	; 0xab4
 800402e:	4619      	mov	r1, r3
 8004030:	f7ff fa12 	bl	8003458 <add_to_buffer>

			system_time_counter++;
 8004034:	f04f 0200 	mov.w	r2, #0
 8004038:	4b94      	ldr	r3, [pc, #592]	; (800428c <main+0xde4>)
 800403a:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 800403e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004042:	f7fc f93b 	bl	80002bc <__adddf3>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 800404e:	e9c1 2300 	strd	r2, r3, [r1]

			// Toggle LED on board to indicate succesful timer management
			HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8004052:	2110      	movs	r1, #16
 8004054:	4886      	ldr	r0, [pc, #536]	; (8004270 <main+0xdc8>)
 8004056:	f004 f945 	bl	80082e4 <HAL_GPIO_TogglePin>


			/// BMP  /////////////////////////////////////////////////////////////////////////////////
			// bmp needed to be forced for this kind of data reading, as now FIFO buffers or dready interrupts are being used
			bmp_settings.op_mode = BMP3_MODE_FORCED;
 800405a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800405e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004062:	2201      	movs	r2, #1
 8004064:	701a      	strb	r2, [r3, #0]
			bmp_result = bmp3_set_op_mode(&bmp_settings, &bmp_device);
 8004066:	f507 720e 	add.w	r2, r7, #568	; 0x238
 800406a:	3a08      	subs	r2, #8
 800406c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8004070:	3b08      	subs	r3, #8
 8004072:	4611      	mov	r1, r2
 8004074:	4618      	mov	r0, r3
 8004076:	f7fd f9ac 	bl	80013d2 <bmp3_set_op_mode>
 800407a:	4603      	mov	r3, r0
 800407c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004080:	f102 020b 	add.w	r2, r2, #11
 8004084:	7013      	strb	r3, [r2, #0]
			bmp3_check_rslt("bmp3_set_op_mode", bmp_result);
 8004086:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800408a:	f103 030b 	add.w	r3, r3, #11
 800408e:	f993 3000 	ldrsb.w	r3, [r3]
 8004092:	4619      	mov	r1, r3
 8004094:	487e      	ldr	r0, [pc, #504]	; (8004290 <main+0xde8>)
 8004096:	f7fe fc13 	bl	80028c0 <bmp3_check_rslt>
			 * BMP3_TEMP       : To read only temperature data
			 * BMP3_PRESS      : To read only pressure data
			 */

			// Check sensor measurements
			bmp_result = bmp3_get_sensor_data(BMP3_PRESS_TEMP, &bmp_data, &bmp_device);
 800409a:	f507 720e 	add.w	r2, r7, #568	; 0x238
 800409e:	3a08      	subs	r2, #8
 80040a0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80040a4:	3b18      	subs	r3, #24
 80040a6:	4619      	mov	r1, r3
 80040a8:	2003      	movs	r0, #3
 80040aa:	f7fd fa06 	bl	80014ba <bmp3_get_sensor_data>
 80040ae:	4603      	mov	r3, r0
 80040b0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80040b4:	f102 020b 	add.w	r2, r2, #11
 80040b8:	7013      	strb	r3, [r2, #0]
			bmp3_check_rslt("bmp3_get_sensor_data", bmp_result);
 80040ba:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80040be:	f103 030b 	add.w	r3, r3, #11
 80040c2:	f993 3000 	ldrsb.w	r3, [r3]
 80040c6:	4619      	mov	r1, r3
 80040c8:	4872      	ldr	r0, [pc, #456]	; (8004294 <main+0xdec>)
 80040ca:	f7fe fbf9 	bl	80028c0 <bmp3_check_rslt>

			// NOTE : Read status register again to clear data ready interrupt status
			bmp_result = bmp3_get_status(&bmp_status, &bmp_device);
 80040ce:	f507 720e 	add.w	r2, r7, #568	; 0x238
 80040d2:	3a08      	subs	r2, #8
 80040d4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80040d8:	3b14      	subs	r3, #20
 80040da:	4611      	mov	r1, r2
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fd f903 	bl	80012e8 <bmp3_get_status>
 80040e2:	4603      	mov	r3, r0
 80040e4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80040e8:	f102 020b 	add.w	r2, r2, #11
 80040ec:	7013      	strb	r3, [r2, #0]
			bmp3_check_rslt("bmp3_get_status", bmp_result);
 80040ee:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80040f2:	f103 030b 	add.w	r3, r3, #11
 80040f6:	f993 3000 	ldrsb.w	r3, [r3]
 80040fa:	4619      	mov	r1, r3
 80040fc:	4866      	ldr	r0, [pc, #408]	; (8004298 <main+0xdf0>)
 80040fe:	f7fe fbdf 	bl	80028c0 <bmp3_check_rslt>

			// Print bmp measurements
			sprintf(bmp_temperature_buffer, "%.2f\n", bmp_data.temperature);
 8004102:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8004106:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800410a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410e:	f507 70fc 	add.w	r0, r7, #504	; 0x1f8
 8004112:	3810      	subs	r0, #16
 8004114:	4961      	ldr	r1, [pc, #388]	; (800429c <main+0xdf4>)
 8004116:	f016 faab 	bl	801a670 <siprintf>
			sprintf(bmp_pressure_buffer, "%.2f\n", bmp_data.pressure);
 800411a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800411e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004122:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004126:	f507 70ec 	add.w	r0, r7, #472	; 0x1d8
 800412a:	380c      	subs	r0, #12
 800412c:	495b      	ldr	r1, [pc, #364]	; (800429c <main+0xdf4>)
 800412e:	f016 fa9f 	bl	801a670 <siprintf>

			add_to_buffer(&data_buffer, &bmp_temperature_buffer, strlen(bmp_temperature_buffer));
 8004132:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004136:	3b10      	subs	r3, #16
 8004138:	4618      	mov	r0, r3
 800413a:	f7fc f861 	bl	8000200 <strlen>
 800413e:	4603      	mov	r3, r0
 8004140:	461a      	mov	r2, r3
 8004142:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004146:	3b10      	subs	r3, #16
 8004148:	f607 20b4 	addw	r0, r7, #2740	; 0xab4
 800414c:	4619      	mov	r1, r3
 800414e:	f7ff f983 	bl	8003458 <add_to_buffer>
			add_to_buffer(&data_buffer, &bmp_pressure_buffer, strlen(bmp_pressure_buffer));
 8004152:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8004156:	3b0c      	subs	r3, #12
 8004158:	4618      	mov	r0, r3
 800415a:	f7fc f851 	bl	8000200 <strlen>
 800415e:	4603      	mov	r3, r0
 8004160:	461a      	mov	r2, r3
 8004162:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8004166:	3b0c      	subs	r3, #12
 8004168:	f607 20b4 	addw	r0, r7, #2740	; 0xab4
 800416c:	4619      	mov	r1, r3
 800416e:	f7ff f973 	bl	8003458 <add_to_buffer>
			//while (CDC_Transmit_FS (bmp_pressure_buffer, strlen(bmp_pressure_buffer)) == USBD_BUSY);


			/// Gyro /////////////////////////////////////////////////////////////////////////////////
			// Read gyro acceleration and angular velocity data
			gyro_result_acceleration = LSM6DSO_ACC_GetAxes (&gyro_device, &gyro_acceleration_object);
 8004172:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8004176:	3a10      	subs	r2, #16
 8004178:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800417c:	3b04      	subs	r3, #4
 800417e:	4611      	mov	r1, r2
 8004180:	4618      	mov	r0, r3
 8004182:	f001 ff75 	bl	8006070 <LSM6DSO_ACC_GetAxes>
 8004186:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800418a:	f103 0314 	add.w	r3, r3, #20
 800418e:	6018      	str	r0, [r3, #0]
			gyro_result_angularvel = LSM6DSO_GYRO_GetAxes (&gyro_device, &gyro_angularvel_object);
 8004190:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004194:	3a04      	subs	r2, #4
 8004196:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800419a:	3b04      	subs	r3, #4
 800419c:	4611      	mov	r1, r2
 800419e:	4618      	mov	r0, r3
 80041a0:	f002 f90a 	bl	80063b8 <LSM6DSO_GYRO_GetAxes>
 80041a4:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80041a8:	f103 0310 	add.w	r3, r3, #16
 80041ac:	6018      	str	r0, [r3, #0]

			sprintf(gyro_acceleration_buffer, "%"PRId32",%"PRId32",%"PRId32"\n", gyro_acceleration_object.x, gyro_acceleration_object.y, gyro_acceleration_object.z);
 80041ae:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80041b2:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80041bc:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80041c0:	6859      	ldr	r1, [r3, #4]
 80041c2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80041c6:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 80041d0:	3818      	subs	r0, #24
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	460b      	mov	r3, r1
 80041d6:	4932      	ldr	r1, [pc, #200]	; (80042a0 <main+0xdf8>)
 80041d8:	f016 fa4a 	bl	801a670 <siprintf>
			sprintf(gyro_angularvel_buffer, "%"PRId32",%"PRId32",%"PRId32"\n", gyro_angularvel_object.x, gyro_angularvel_object.y, gyro_angularvel_object.z);
 80041dc:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80041e0:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80041ea:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80041ee:	6859      	ldr	r1, [r3, #4]
 80041f0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80041f4:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f507 708c 	add.w	r0, r7, #280	; 0x118
 80041fe:	380c      	subs	r0, #12
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	460b      	mov	r3, r1
 8004204:	4926      	ldr	r1, [pc, #152]	; (80042a0 <main+0xdf8>)
 8004206:	f016 fa33 	bl	801a670 <siprintf>

			add_to_buffer(&data_buffer, &gyro_acceleration_buffer, strlen(gyro_acceleration_buffer));
 800420a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800420e:	3b18      	subs	r3, #24
 8004210:	4618      	mov	r0, r3
 8004212:	f7fb fff5 	bl	8000200 <strlen>
 8004216:	4603      	mov	r3, r0
 8004218:	461a      	mov	r2, r3
 800421a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800421e:	3b18      	subs	r3, #24
 8004220:	f607 20b4 	addw	r0, r7, #2740	; 0xab4
 8004224:	4619      	mov	r1, r3
 8004226:	f7ff f917 	bl	8003458 <add_to_buffer>
			add_to_buffer(&data_buffer, &gyro_angularvel_buffer, strlen(gyro_angularvel_buffer));
 800422a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800422e:	3b0c      	subs	r3, #12
 8004230:	4618      	mov	r0, r3
 8004232:	f7fb ffe5 	bl	8000200 <strlen>
 8004236:	4603      	mov	r3, r0
 8004238:	461a      	mov	r2, r3
 800423a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800423e:	3b0c      	subs	r3, #12
 8004240:	f607 20b4 	addw	r0, r7, #2740	; 0xab4
 8004244:	4619      	mov	r1, r3
 8004246:	f7ff f907 	bl	8003458 <add_to_buffer>
			//			}


			//add_to_buffer(&data_buffer, &gps_buffer, strlen(gps_buffer));
			char *token;
			char *gps_buffer_copy = strdup(gps_buffer);
 800424a:	f207 63cc 	addw	r3, r7, #1740	; 0x6cc
 800424e:	4618      	mov	r0, r3
 8004250:	f016 fa2e 	bl	801a6b0 <strdup>
 8004254:	4603      	mov	r3, r0
 8004256:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800425a:	f102 020c 	add.w	r2, r2, #12
 800425e:	6013      	str	r3, [r2, #0]

			parser_i = 0;
 8004260:	2300      	movs	r3, #0
 8004262:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004266:	f102 021c 	add.w	r2, r2, #28
 800426a:	e01b      	b.n	80042a4 <main+0xdfc>
 800426c:	0801cd40 	.word	0x0801cd40
 8004270:	48000c00 	.word	0x48000c00
 8004274:	20000f00 	.word	0x20000f00
 8004278:	20000f01 	.word	0x20000f01
 800427c:	20000f02 	.word	0x20000f02
 8004280:	20001140 	.word	0x20001140
 8004284:	0801cd48 	.word	0x0801cd48
 8004288:	0801cd58 	.word	0x0801cd58
 800428c:	3ff00000 	.word	0x3ff00000
 8004290:	0801cd60 	.word	0x0801cd60
 8004294:	0801cd74 	.word	0x0801cd74
 8004298:	0801cd8c 	.word	0x0801cd8c
 800429c:	0801cd9c 	.word	0x0801cd9c
 80042a0:	0801cda4 	.word	0x0801cda4
 80042a4:	6013      	str	r3, [r2, #0]
			token = strtok(strstr(gps_buffer_copy, "$GNGGA"), ",");
 80042a6:	4998      	ldr	r1, [pc, #608]	; (8004508 <main+0x1060>)
 80042a8:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80042ac:	f103 030c 	add.w	r3, r3, #12
 80042b0:	6818      	ldr	r0, [r3, #0]
 80042b2:	f016 fa1a 	bl	801a6ea <strstr>
 80042b6:	4603      	mov	r3, r0
 80042b8:	4994      	ldr	r1, [pc, #592]	; (800450c <main+0x1064>)
 80042ba:	4618      	mov	r0, r3
 80042bc:	f016 fa2c 	bl	801a718 <strtok>
 80042c0:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80042c4:	f103 0308 	add.w	r3, r3, #8
 80042c8:	6018      	str	r0, [r3, #0]
			while (token != NULL && parser_i < 10) {
 80042ca:	e051      	b.n	8004370 <main+0xec8>
				if ((parser_i == 1) || (parser_i == 2) || (parser_i == 4) || (parser_i == 9)) {
 80042cc:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80042d0:	f103 031c 	add.w	r3, r3, #28
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d014      	beq.n	8004304 <main+0xe5c>
 80042da:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80042de:	f103 031c 	add.w	r3, r3, #28
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d00d      	beq.n	8004304 <main+0xe5c>
 80042e8:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80042ec:	f103 031c 	add.w	r3, r3, #28
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d006      	beq.n	8004304 <main+0xe5c>
 80042f6:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80042fa:	f103 031c 	add.w	r3, r3, #28
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b09      	cmp	r3, #9
 8004302:	d121      	bne.n	8004348 <main+0xea0>
					add_to_buffer(&data_buffer, token, strlen(token));
 8004304:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8004308:	f103 0308 	add.w	r3, r3, #8
 800430c:	6818      	ldr	r0, [r3, #0]
 800430e:	f7fb ff77 	bl	8000200 <strlen>
 8004312:	4603      	mov	r3, r0
 8004314:	461a      	mov	r2, r3
 8004316:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 800431a:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 800431e:	f101 0108 	add.w	r1, r1, #8
 8004322:	6809      	ldr	r1, [r1, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff f897 	bl	8003458 <add_to_buffer>
					strcat(data_buffer, ",");
 800432a:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 800432e:	4618      	mov	r0, r3
 8004330:	f7fb ff66 	bl	8000200 <strlen>
 8004334:	4603      	mov	r3, r0
 8004336:	461a      	mov	r2, r3
 8004338:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 800433c:	4413      	add	r3, r2
 800433e:	4973      	ldr	r1, [pc, #460]	; (800450c <main+0x1064>)
 8004340:	461a      	mov	r2, r3
 8004342:	460b      	mov	r3, r1
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	8013      	strh	r3, [r2, #0]
				}
				token = strtok(NULL, ",");
 8004348:	4970      	ldr	r1, [pc, #448]	; (800450c <main+0x1064>)
 800434a:	2000      	movs	r0, #0
 800434c:	f016 f9e4 	bl	801a718 <strtok>
 8004350:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8004354:	f103 0308 	add.w	r3, r3, #8
 8004358:	6018      	str	r0, [r3, #0]
				parser_i++;
 800435a:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800435e:	f103 031c 	add.w	r3, r3, #28
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3301      	adds	r3, #1
 8004366:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800436a:	f102 021c 	add.w	r2, r2, #28
 800436e:	6013      	str	r3, [r2, #0]
			while (token != NULL && parser_i < 10) {
 8004370:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8004374:	f103 0308 	add.w	r3, r3, #8
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d006      	beq.n	800438c <main+0xee4>
 800437e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8004382:	f103 031c 	add.w	r3, r3, #28
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b09      	cmp	r3, #9
 800438a:	dd9f      	ble.n	80042cc <main+0xe24>
			}
			strcat(data_buffer, "\n");
 800438c:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 8004390:	4618      	mov	r0, r3
 8004392:	f7fb ff35 	bl	8000200 <strlen>
 8004396:	4603      	mov	r3, r0
 8004398:	461a      	mov	r2, r3
 800439a:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 800439e:	4413      	add	r3, r2
 80043a0:	495b      	ldr	r1, [pc, #364]	; (8004510 <main+0x1068>)
 80043a2:	461a      	mov	r2, r3
 80043a4:	460b      	mov	r3, r1
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	8013      	strh	r3, [r2, #0]

			free(gps_buffer_copy); // Free the memory allocated for the copy
 80043aa:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80043ae:	f103 030c 	add.w	r3, r3, #12
 80043b2:	6818      	ldr	r0, [r3, #0]
 80043b4:	f015 fbcc 	bl	8019b50 <free>
			free(token);
 80043b8:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80043bc:	f103 0308 	add.w	r3, r3, #8
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	f015 fbc5 	bl	8019b50 <free>

			gps_buffer[0] = '\0';
 80043c6:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80043ca:	f103 0318 	add.w	r3, r3, #24
 80043ce:	f6a3 43ec 	subw	r3, r3, #3308	; 0xcec
 80043d2:	2200      	movs	r2, #0
 80043d4:	701a      	strb	r2, [r3, #0]


			/// MIRA /////////////////////////////////////////////////////////////////////////////////

			status = mira_science_data(&huart1, mira_science_Rx_buffer, sizeof(mira_science_Rx_buffer), 5000);
 80043d6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80043da:	3904      	subs	r1, #4
 80043dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80043e0:	228e      	movs	r2, #142	; 0x8e
 80043e2:	484c      	ldr	r0, [pc, #304]	; (8004514 <main+0x106c>)
 80043e4:	f000 fdce 	bl	8004f84 <mira_science_data>
 80043e8:	4603      	mov	r3, r0
 80043ea:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80043ee:	f102 0213 	add.w	r2, r2, #19
 80043f2:	7013      	strb	r3, [r2, #0]
			add_to_buffer(&data_buffer, &mira_science_Rx_buffer, strlen(mira_science_Rx_buffer));
 80043f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80043f8:	3b04      	subs	r3, #4
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fb ff00 	bl	8000200 <strlen>
 8004400:	4603      	mov	r3, r0
 8004402:	461a      	mov	r2, r3
 8004404:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004408:	3b04      	subs	r3, #4
 800440a:	f607 20b4 	addw	r0, r7, #2740	; 0xab4
 800440e:	4619      	mov	r1, r3
 8004410:	f7ff f822 	bl	8003458 <add_to_buffer>


			/// DATA RECORDING /////////////////////////////////////////////////////////////////////////////////
			//write gps data to SD
			//if (sd_status == FR_OK){
			sd_result_write = f_write(&SDFile, data_buffer, strlen((char *)data_buffer), (void *)&sd_err_byteswritten);
 8004414:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 8004418:	4618      	mov	r0, r3
 800441a:	f7fb fef1 	bl	8000200 <strlen>
 800441e:	4602      	mov	r2, r0
 8004420:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8004424:	f103 0308 	add.w	r3, r3, #8
 8004428:	f607 21b4 	addw	r1, r7, #2740	; 0xab4
 800442c:	483a      	ldr	r0, [pc, #232]	; (8004518 <main+0x1070>)
 800442e:	f014 fb17 	bl	8018a60 <f_write>
 8004432:	4603      	mov	r3, r0
 8004434:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8004438:	f102 020b 	add.w	r2, r2, #11
 800443c:	7013      	strb	r3, [r2, #0]
			//}
			// Sendgps data to LORA
			if (lora_res == LORA_OK) {
 800443e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8004442:	f103 0312 	add.w	r3, r3, #18
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10e      	bne.n	800446a <main+0xfc2>
				lora_send_packet(&lora, data_buffer, strlen(data_buffer));
 800444c:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 8004450:	4618      	mov	r0, r3
 8004452:	f7fb fed5 	bl	8000200 <strlen>
 8004456:	4603      	mov	r3, r0
 8004458:	b2da      	uxtb	r2, r3
 800445a:	f607 21b4 	addw	r1, r7, #2740	; 0xab4
 800445e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004462:	3b04      	subs	r3, #4
 8004464:	4618      	mov	r0, r3
 8004466:	f7fe ff78 	bl	800335a <lora_send_packet>
			}

			// Comment this out once build finished
			if (PRINT_TOGGLE == 1) {
 800446a:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800446e:	f103 0314 	add.w	r3, r3, #20
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d110      	bne.n	800449a <main+0xff2>
				while (CDC_Transmit_FS (data_buffer, strlen(data_buffer)) == USBD_BUSY);}
 8004478:	bf00      	nop
 800447a:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 800447e:	4618      	mov	r0, r3
 8004480:	f7fb febe 	bl	8000200 <strlen>
 8004484:	4603      	mov	r3, r0
 8004486:	b29a      	uxth	r2, r3
 8004488:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 800448c:	4611      	mov	r1, r2
 800448e:	4618      	mov	r0, r3
 8004490:	f014 fe04 	bl	801909c <CDC_Transmit_FS>
 8004494:	4603      	mov	r3, r0
 8004496:	2b01      	cmp	r3, #1
 8004498:	d0ef      	beq.n	800447a <main+0xfd2>
			data_buffer[0] = '\0';
 800449a:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 800449e:	f103 0318 	add.w	r3, r3, #24
 80044a2:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 80044a6:	2200      	movs	r2, #0
 80044a8:	701a      	strb	r2, [r3, #0]

		}

		/// GPS /////////////////////////////////////////////////////////////////////////////////
		// Read GPS data whenever UART interrupt raises gps_data_ready flag
		if (gps_data_ready) {
 80044aa:	4b1c      	ldr	r3, [pc, #112]	; (800451c <main+0x1074>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f43f ad76 	beq.w	8003fa0 <main+0xaf8>
			// Choose the buffer from the two data buffers that is not currently being written into and print it
			if (gps_rxBuffer == gps_rxBuffer1) {
 80044b4:	4b1a      	ldr	r3, [pc, #104]	; (8004520 <main+0x1078>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a1a      	ldr	r2, [pc, #104]	; (8004524 <main+0x107c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d10b      	bne.n	80044d6 <main+0x102e>
				//while (CDC_Transmit_FS (gps_rxBuffer2, strlen(gps_rxBuffer2)) == USBD_BUSY);
				add_to_buffer(&gps_buffer, &gps_rxBuffer2, strlen(gps_rxBuffer2));
 80044be:	481a      	ldr	r0, [pc, #104]	; (8004528 <main+0x1080>)
 80044c0:	f7fb fe9e 	bl	8000200 <strlen>
 80044c4:	4603      	mov	r3, r0
 80044c6:	461a      	mov	r2, r3
 80044c8:	f207 63cc 	addw	r3, r7, #1740	; 0x6cc
 80044cc:	4916      	ldr	r1, [pc, #88]	; (8004528 <main+0x1080>)
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fe ffc2 	bl	8003458 <add_to_buffer>
 80044d4:	e00a      	b.n	80044ec <main+0x1044>

			}
			else {
				//while (CDC_Transmit_FS (gps_rxBuffer1, strlen(gps_rxBuffer1)) == USBD_BUSY);
				add_to_buffer(&gps_buffer, &gps_rxBuffer1, strlen(gps_rxBuffer1));
 80044d6:	4813      	ldr	r0, [pc, #76]	; (8004524 <main+0x107c>)
 80044d8:	f7fb fe92 	bl	8000200 <strlen>
 80044dc:	4603      	mov	r3, r0
 80044de:	461a      	mov	r2, r3
 80044e0:	f207 63cc 	addw	r3, r7, #1740	; 0x6cc
 80044e4:	490f      	ldr	r1, [pc, #60]	; (8004524 <main+0x107c>)
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fe ffb6 	bl	8003458 <add_to_buffer>
			}

			// Toggle flags to allow for buffer swapping and next data batch sending
			gps_data_ready ^= 1;
 80044ec:	4b0b      	ldr	r3, [pc, #44]	; (800451c <main+0x1074>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f083 0301 	eor.w	r3, r3, #1
 80044f4:	4a09      	ldr	r2, [pc, #36]	; (800451c <main+0x1074>)
 80044f6:	6013      	str	r3, [r2, #0]
			gps_send_ready |= 1;
 80044f8:	4b0c      	ldr	r3, [pc, #48]	; (800452c <main+0x1084>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f043 0301 	orr.w	r3, r3, #1
 8004500:	4a0a      	ldr	r2, [pc, #40]	; (800452c <main+0x1084>)
 8004502:	6013      	str	r3, [r2, #0]
		if (tickSync == 0) {
 8004504:	e54c      	b.n	8003fa0 <main+0xaf8>
 8004506:	bf00      	nop
 8004508:	0801cdb4 	.word	0x0801cdb4
 800450c:	0801cdbc 	.word	0x0801cdbc
 8004510:	0801cdc0 	.word	0x0801cdc0
 8004514:	200006cc 	.word	0x200006cc
 8004518:	20001140 	.word	0x20001140
 800451c:	20000efc 	.word	0x20000efc
 8004520:	20000ef4 	.word	0x20000ef4
 8004524:	200008b4 	.word	0x200008b4
 8004528:	20000bd4 	.word	0x20000bd4
 800452c:	20000000 	.word	0x20000000

08004530 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b096      	sub	sp, #88	; 0x58
 8004534:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004536:	f107 0314 	add.w	r3, r7, #20
 800453a:	2244      	movs	r2, #68	; 0x44
 800453c:	2100      	movs	r1, #0
 800453e:	4618      	mov	r0, r3
 8004540:	f015 fb1c 	bl	8019b7c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004544:	463b      	mov	r3, r7
 8004546:	2200      	movs	r2, #0
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	605a      	str	r2, [r3, #4]
 800454c:	609a      	str	r2, [r3, #8]
 800454e:	60da      	str	r2, [r3, #12]
 8004550:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8004552:	2000      	movs	r0, #0
 8004554:	f006 faae 	bl	800aab4 <HAL_PWREx_ControlVoltageScaling>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <SystemClock_Config+0x32>
	{
		Error_Handler();
 800455e:	f000 fb19 	bl	8004b94 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8004562:	2321      	movs	r3, #33	; 0x21
 8004564:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004566:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800456a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800456c:	2301      	movs	r3, #1
 800456e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004570:	2302      	movs	r3, #2
 8004572:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004574:	2303      	movs	r3, #3
 8004576:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8004578:	2301      	movs	r3, #1
 800457a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 30;
 800457c:	231e      	movs	r3, #30
 800457e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004580:	2302      	movs	r3, #2
 8004582:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004584:	2302      	movs	r3, #2
 8004586:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004588:	2302      	movs	r3, #2
 800458a:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800458c:	f107 0314 	add.w	r3, r7, #20
 8004590:	4618      	mov	r0, r3
 8004592:	f006 fb43 	bl	800ac1c <HAL_RCC_OscConfig>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <SystemClock_Config+0x70>
	{
		Error_Handler();
 800459c:	f000 fafa 	bl	8004b94 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045a0:	230f      	movs	r3, #15
 80045a2:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045a4:	2303      	movs	r3, #3
 80045a6:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045a8:	2300      	movs	r3, #0
 80045aa:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80045ac:	2300      	movs	r3, #0
 80045ae:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80045b0:	2300      	movs	r3, #0
 80045b2:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80045b4:	463b      	mov	r3, r7
 80045b6:	2105      	movs	r1, #5
 80045b8:	4618      	mov	r0, r3
 80045ba:	f006 ff49 	bl	800b450 <HAL_RCC_ClockConfig>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <SystemClock_Config+0x98>
	{
		Error_Handler();
 80045c4:	f000 fae6 	bl	8004b94 <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 80045c8:	f007 f940 	bl	800b84c <HAL_RCC_EnableCSS>
}
 80045cc:	bf00      	nop
 80045ce:	3758      	adds	r7, #88	; 0x58
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
	/* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80045d8:	2200      	movs	r2, #0
 80045da:	2100      	movs	r1, #0
 80045dc:	201a      	movs	r0, #26
 80045de:	f003 f868 	bl	80076b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80045e2:	201a      	movs	r0, #26
 80045e4:	f003 f881 	bl	80076ea <HAL_NVIC_EnableIRQ>
	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80045e8:	2200      	movs	r2, #0
 80045ea:	2100      	movs	r1, #0
 80045ec:	2026      	movs	r0, #38	; 0x26
 80045ee:	f003 f860 	bl	80076b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80045f2:	2026      	movs	r0, #38	; 0x26
 80045f4:	f003 f879 	bl	80076ea <HAL_NVIC_EnableIRQ>
	/* USART1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80045f8:	2200      	movs	r2, #0
 80045fa:	2100      	movs	r1, #0
 80045fc:	2025      	movs	r0, #37	; 0x25
 80045fe:	f003 f858 	bl	80076b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004602:	2025      	movs	r0, #37	; 0x25
 8004604:	f003 f871 	bl	80076ea <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004608:	2200      	movs	r2, #0
 800460a:	2100      	movs	r1, #0
 800460c:	200b      	movs	r0, #11
 800460e:	f003 f850 	bl	80076b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004612:	200b      	movs	r0, #11
 8004614:	f003 f869 	bl	80076ea <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004618:	2200      	movs	r2, #0
 800461a:	2100      	movs	r1, #0
 800461c:	200c      	movs	r0, #12
 800461e:	f003 f848 	bl	80076b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004622:	200c      	movs	r0, #12
 8004624:	f003 f861 	bl	80076ea <HAL_NVIC_EnableIRQ>
}
 8004628:	bf00      	nop
 800462a:	bd80      	pop	{r7, pc}

0800462c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8004630:	4b1b      	ldr	r3, [pc, #108]	; (80046a0 <MX_I2C1_Init+0x74>)
 8004632:	4a1c      	ldr	r2, [pc, #112]	; (80046a4 <MX_I2C1_Init+0x78>)
 8004634:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x307075B1;
 8004636:	4b1a      	ldr	r3, [pc, #104]	; (80046a0 <MX_I2C1_Init+0x74>)
 8004638:	4a1b      	ldr	r2, [pc, #108]	; (80046a8 <MX_I2C1_Init+0x7c>)
 800463a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 800463c:	4b18      	ldr	r3, [pc, #96]	; (80046a0 <MX_I2C1_Init+0x74>)
 800463e:	2200      	movs	r2, #0
 8004640:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004642:	4b17      	ldr	r3, [pc, #92]	; (80046a0 <MX_I2C1_Init+0x74>)
 8004644:	2201      	movs	r2, #1
 8004646:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004648:	4b15      	ldr	r3, [pc, #84]	; (80046a0 <MX_I2C1_Init+0x74>)
 800464a:	2200      	movs	r2, #0
 800464c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800464e:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <MX_I2C1_Init+0x74>)
 8004650:	2200      	movs	r2, #0
 8004652:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004654:	4b12      	ldr	r3, [pc, #72]	; (80046a0 <MX_I2C1_Init+0x74>)
 8004656:	2200      	movs	r2, #0
 8004658:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800465a:	4b11      	ldr	r3, [pc, #68]	; (80046a0 <MX_I2C1_Init+0x74>)
 800465c:	2200      	movs	r2, #0
 800465e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004660:	4b0f      	ldr	r3, [pc, #60]	; (80046a0 <MX_I2C1_Init+0x74>)
 8004662:	2200      	movs	r2, #0
 8004664:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004666:	480e      	ldr	r0, [pc, #56]	; (80046a0 <MX_I2C1_Init+0x74>)
 8004668:	f003 fe56 	bl	8008318 <HAL_I2C_Init>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8004672:	f000 fa8f 	bl	8004b94 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004676:	2100      	movs	r1, #0
 8004678:	4809      	ldr	r0, [pc, #36]	; (80046a0 <MX_I2C1_Init+0x74>)
 800467a:	f004 ffb1 	bl	80095e0 <HAL_I2CEx_ConfigAnalogFilter>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8004684:	f000 fa86 	bl	8004b94 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004688:	2100      	movs	r1, #0
 800468a:	4805      	ldr	r0, [pc, #20]	; (80046a0 <MX_I2C1_Init+0x74>)
 800468c:	f004 fff3 	bl	8009676 <HAL_I2CEx_ConfigDigitalFilter>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8004696:	f000 fa7d 	bl	8004b94 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800469a:	bf00      	nop
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20000548 	.word	0x20000548
 80046a4:	40005400 	.word	0x40005400
 80046a8:	307075b1 	.word	0x307075b1

080046ac <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 80046b0:	4b0d      	ldr	r3, [pc, #52]	; (80046e8 <MX_SDMMC1_SD_Init+0x3c>)
 80046b2:	4a0e      	ldr	r2, [pc, #56]	; (80046ec <MX_SDMMC1_SD_Init+0x40>)
 80046b4:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80046b6:	4b0c      	ldr	r3, [pc, #48]	; (80046e8 <MX_SDMMC1_SD_Init+0x3c>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80046bc:	4b0a      	ldr	r3, [pc, #40]	; (80046e8 <MX_SDMMC1_SD_Init+0x3c>)
 80046be:	2200      	movs	r2, #0
 80046c0:	609a      	str	r2, [r3, #8]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80046c2:	4b09      	ldr	r3, [pc, #36]	; (80046e8 <MX_SDMMC1_SD_Init+0x3c>)
 80046c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80046c8:	60da      	str	r2, [r3, #12]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80046ca:	4b07      	ldr	r3, [pc, #28]	; (80046e8 <MX_SDMMC1_SD_Init+0x3c>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	611a      	str	r2, [r3, #16]
	hsd1.Init.ClockDiv = 0;
 80046d0:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <MX_SDMMC1_SD_Init+0x3c>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	615a      	str	r2, [r3, #20]
	hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 80046d6:	4b04      	ldr	r3, [pc, #16]	; (80046e8 <MX_SDMMC1_SD_Init+0x3c>)
 80046d8:	2200      	movs	r2, #0
 80046da:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */

}
 80046dc:	bf00      	nop
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	2000059c 	.word	0x2000059c
 80046ec:	50062400 	.word	0x50062400

080046f0 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80046f4:	4b1b      	ldr	r3, [pc, #108]	; (8004764 <MX_SPI1_Init+0x74>)
 80046f6:	4a1c      	ldr	r2, [pc, #112]	; (8004768 <MX_SPI1_Init+0x78>)
 80046f8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80046fa:	4b1a      	ldr	r3, [pc, #104]	; (8004764 <MX_SPI1_Init+0x74>)
 80046fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004700:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004702:	4b18      	ldr	r3, [pc, #96]	; (8004764 <MX_SPI1_Init+0x74>)
 8004704:	2200      	movs	r2, #0
 8004706:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004708:	4b16      	ldr	r3, [pc, #88]	; (8004764 <MX_SPI1_Init+0x74>)
 800470a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800470e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004710:	4b14      	ldr	r3, [pc, #80]	; (8004764 <MX_SPI1_Init+0x74>)
 8004712:	2200      	movs	r2, #0
 8004714:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004716:	4b13      	ldr	r3, [pc, #76]	; (8004764 <MX_SPI1_Init+0x74>)
 8004718:	2200      	movs	r2, #0
 800471a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800471c:	4b11      	ldr	r3, [pc, #68]	; (8004764 <MX_SPI1_Init+0x74>)
 800471e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004722:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004724:	4b0f      	ldr	r3, [pc, #60]	; (8004764 <MX_SPI1_Init+0x74>)
 8004726:	2228      	movs	r2, #40	; 0x28
 8004728:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800472a:	4b0e      	ldr	r3, [pc, #56]	; (8004764 <MX_SPI1_Init+0x74>)
 800472c:	2200      	movs	r2, #0
 800472e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004730:	4b0c      	ldr	r3, [pc, #48]	; (8004764 <MX_SPI1_Init+0x74>)
 8004732:	2200      	movs	r2, #0
 8004734:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004736:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <MX_SPI1_Init+0x74>)
 8004738:	2200      	movs	r2, #0
 800473a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 800473c:	4b09      	ldr	r3, [pc, #36]	; (8004764 <MX_SPI1_Init+0x74>)
 800473e:	2207      	movs	r2, #7
 8004740:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004742:	4b08      	ldr	r3, [pc, #32]	; (8004764 <MX_SPI1_Init+0x74>)
 8004744:	2200      	movs	r2, #0
 8004746:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004748:	4b06      	ldr	r3, [pc, #24]	; (8004764 <MX_SPI1_Init+0x74>)
 800474a:	2208      	movs	r2, #8
 800474c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800474e:	4805      	ldr	r0, [pc, #20]	; (8004764 <MX_SPI1_Init+0x74>)
 8004750:	f00a fba9 	bl	800eea6 <HAL_SPI_Init>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 800475a:	f000 fa1b 	bl	8004b94 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800475e:	bf00      	nop
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	2000061c 	.word	0x2000061c
 8004768:	40013000 	.word	0x40013000

0800476c <MX_TIM17_Init>:
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b092      	sub	sp, #72	; 0x48
 8004770:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM17_Init 0 */

	/* USER CODE END TIM17_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 8004772:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004776:	2200      	movs	r2, #0
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	605a      	str	r2, [r3, #4]
 800477c:	609a      	str	r2, [r3, #8]
 800477e:	60da      	str	r2, [r3, #12]
 8004780:	611a      	str	r2, [r3, #16]
 8004782:	615a      	str	r2, [r3, #20]
 8004784:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004786:	463b      	mov	r3, r7
 8004788:	222c      	movs	r2, #44	; 0x2c
 800478a:	2100      	movs	r1, #0
 800478c:	4618      	mov	r0, r3
 800478e:	f015 f9f5 	bl	8019b7c <memset>

	/* USER CODE BEGIN TIM17_Init 1 */

	/* USER CODE END TIM17_Init 1 */
	htim17.Instance = TIM17;
 8004792:	4b2f      	ldr	r3, [pc, #188]	; (8004850 <MX_TIM17_Init+0xe4>)
 8004794:	4a2f      	ldr	r2, [pc, #188]	; (8004854 <MX_TIM17_Init+0xe8>)
 8004796:	601a      	str	r2, [r3, #0]
	htim17.Init.Prescaler = 999;
 8004798:	4b2d      	ldr	r3, [pc, #180]	; (8004850 <MX_TIM17_Init+0xe4>)
 800479a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800479e:	605a      	str	r2, [r3, #4]
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047a0:	4b2b      	ldr	r3, [pc, #172]	; (8004850 <MX_TIM17_Init+0xe4>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	609a      	str	r2, [r3, #8]
	htim17.Init.Period = 11999;
 80047a6:	4b2a      	ldr	r3, [pc, #168]	; (8004850 <MX_TIM17_Init+0xe4>)
 80047a8:	f642 62df 	movw	r2, #11999	; 0x2edf
 80047ac:	60da      	str	r2, [r3, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047ae:	4b28      	ldr	r3, [pc, #160]	; (8004850 <MX_TIM17_Init+0xe4>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	611a      	str	r2, [r3, #16]
	htim17.Init.RepetitionCounter = 0;
 80047b4:	4b26      	ldr	r3, [pc, #152]	; (8004850 <MX_TIM17_Init+0xe4>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	615a      	str	r2, [r3, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80047ba:	4b25      	ldr	r3, [pc, #148]	; (8004850 <MX_TIM17_Init+0xe4>)
 80047bc:	2280      	movs	r2, #128	; 0x80
 80047be:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80047c0:	4823      	ldr	r0, [pc, #140]	; (8004850 <MX_TIM17_Init+0xe4>)
 80047c2:	f00b fc2d 	bl	8010020 <HAL_TIM_Base_Init>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <MX_TIM17_Init+0x64>
	{
		Error_Handler();
 80047cc:	f000 f9e2 	bl	8004b94 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 80047d0:	481f      	ldr	r0, [pc, #124]	; (8004850 <MX_TIM17_Init+0xe4>)
 80047d2:	f00b fced 	bl	80101b0 <HAL_TIM_OC_Init>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <MX_TIM17_Init+0x74>
	{
		Error_Handler();
 80047dc:	f000 f9da 	bl	8004b94 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80047e0:	2300      	movs	r3, #0
 80047e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.Pulse = 0;
 80047e4:	2300      	movs	r3, #0
 80047e6:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047e8:	2300      	movs	r3, #0
 80047ea:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80047ec:	2300      	movs	r3, #0
 80047ee:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047f0:	2300      	movs	r3, #0
 80047f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80047f4:	2300      	movs	r3, #0
 80047f6:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80047f8:	2300      	movs	r3, #0
 80047fa:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004800:	2200      	movs	r2, #0
 8004802:	4619      	mov	r1, r3
 8004804:	4812      	ldr	r0, [pc, #72]	; (8004850 <MX_TIM17_Init+0xe4>)
 8004806:	f00b fe37 	bl	8010478 <HAL_TIM_OC_ConfigChannel>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <MX_TIM17_Init+0xa8>
	{
		Error_Handler();
 8004810:	f000 f9c0 	bl	8004b94 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004814:	2300      	movs	r3, #0
 8004816:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004818:	2300      	movs	r3, #0
 800481a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800481c:	2300      	movs	r3, #0
 800481e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8004820:	2300      	movs	r3, #0
 8004822:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004824:	2300      	movs	r3, #0
 8004826:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800482c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800482e:	2300      	movs	r3, #0
 8004830:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8004832:	463b      	mov	r3, r7
 8004834:	4619      	mov	r1, r3
 8004836:	4806      	ldr	r0, [pc, #24]	; (8004850 <MX_TIM17_Init+0xe4>)
 8004838:	f00c fa3a 	bl	8010cb0 <HAL_TIMEx_ConfigBreakDeadTime>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <MX_TIM17_Init+0xda>
	{
		Error_Handler();
 8004842:	f000 f9a7 	bl	8004b94 <Error_Handler>
	}
	/* USER CODE BEGIN TIM17_Init 2 */

	/* USER CODE END TIM17_Init 2 */

}
 8004846:	bf00      	nop
 8004848:	3748      	adds	r7, #72	; 0x48
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	20000680 	.word	0x20000680
 8004854:	40014800 	.word	0x40014800

08004858 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800485c:	4b22      	ldr	r3, [pc, #136]	; (80048e8 <MX_USART1_UART_Init+0x90>)
 800485e:	4a23      	ldr	r2, [pc, #140]	; (80048ec <MX_USART1_UART_Init+0x94>)
 8004860:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8004862:	4b21      	ldr	r3, [pc, #132]	; (80048e8 <MX_USART1_UART_Init+0x90>)
 8004864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004868:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800486a:	4b1f      	ldr	r3, [pc, #124]	; (80048e8 <MX_USART1_UART_Init+0x90>)
 800486c:	2200      	movs	r2, #0
 800486e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8004870:	4b1d      	ldr	r3, [pc, #116]	; (80048e8 <MX_USART1_UART_Init+0x90>)
 8004872:	2200      	movs	r2, #0
 8004874:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8004876:	4b1c      	ldr	r3, [pc, #112]	; (80048e8 <MX_USART1_UART_Init+0x90>)
 8004878:	2200      	movs	r2, #0
 800487a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800487c:	4b1a      	ldr	r3, [pc, #104]	; (80048e8 <MX_USART1_UART_Init+0x90>)
 800487e:	220c      	movs	r2, #12
 8004880:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004882:	4b19      	ldr	r3, [pc, #100]	; (80048e8 <MX_USART1_UART_Init+0x90>)
 8004884:	2200      	movs	r2, #0
 8004886:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004888:	4b17      	ldr	r3, [pc, #92]	; (80048e8 <MX_USART1_UART_Init+0x90>)
 800488a:	2200      	movs	r2, #0
 800488c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800488e:	4b16      	ldr	r3, [pc, #88]	; (80048e8 <MX_USART1_UART_Init+0x90>)
 8004890:	2200      	movs	r2, #0
 8004892:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004894:	4b14      	ldr	r3, [pc, #80]	; (80048e8 <MX_USART1_UART_Init+0x90>)
 8004896:	2200      	movs	r2, #0
 8004898:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800489a:	4b13      	ldr	r3, [pc, #76]	; (80048e8 <MX_USART1_UART_Init+0x90>)
 800489c:	2200      	movs	r2, #0
 800489e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80048a0:	4811      	ldr	r0, [pc, #68]	; (80048e8 <MX_USART1_UART_Init+0x90>)
 80048a2:	f00c faa1 	bl	8010de8 <HAL_UART_Init>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 80048ac:	f000 f972 	bl	8004b94 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80048b0:	2100      	movs	r1, #0
 80048b2:	480d      	ldr	r0, [pc, #52]	; (80048e8 <MX_USART1_UART_Init+0x90>)
 80048b4:	f00d fea6 	bl	8012604 <HAL_UARTEx_SetTxFifoThreshold>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <MX_USART1_UART_Init+0x6a>
	{
		Error_Handler();
 80048be:	f000 f969 	bl	8004b94 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80048c2:	2100      	movs	r1, #0
 80048c4:	4808      	ldr	r0, [pc, #32]	; (80048e8 <MX_USART1_UART_Init+0x90>)
 80048c6:	f00d fedb 	bl	8012680 <HAL_UARTEx_SetRxFifoThreshold>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <MX_USART1_UART_Init+0x7c>
	{
		Error_Handler();
 80048d0:	f000 f960 	bl	8004b94 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80048d4:	4804      	ldr	r0, [pc, #16]	; (80048e8 <MX_USART1_UART_Init+0x90>)
 80048d6:	f00d fe5c 	bl	8012592 <HAL_UARTEx_DisableFifoMode>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 80048e0:	f000 f958 	bl	8004b94 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80048e4:	bf00      	nop
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	200006cc 	.word	0x200006cc
 80048ec:	40013800 	.word	0x40013800

080048f0 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80048f4:	4b24      	ldr	r3, [pc, #144]	; (8004988 <MX_USART2_UART_Init+0x98>)
 80048f6:	4a25      	ldr	r2, [pc, #148]	; (800498c <MX_USART2_UART_Init+0x9c>)
 80048f8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80048fa:	4b23      	ldr	r3, [pc, #140]	; (8004988 <MX_USART2_UART_Init+0x98>)
 80048fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004900:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004902:	4b21      	ldr	r3, [pc, #132]	; (8004988 <MX_USART2_UART_Init+0x98>)
 8004904:	2200      	movs	r2, #0
 8004906:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8004908:	4b1f      	ldr	r3, [pc, #124]	; (8004988 <MX_USART2_UART_Init+0x98>)
 800490a:	2200      	movs	r2, #0
 800490c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800490e:	4b1e      	ldr	r3, [pc, #120]	; (8004988 <MX_USART2_UART_Init+0x98>)
 8004910:	2200      	movs	r2, #0
 8004912:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8004914:	4b1c      	ldr	r3, [pc, #112]	; (8004988 <MX_USART2_UART_Init+0x98>)
 8004916:	220c      	movs	r2, #12
 8004918:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800491a:	4b1b      	ldr	r3, [pc, #108]	; (8004988 <MX_USART2_UART_Init+0x98>)
 800491c:	2200      	movs	r2, #0
 800491e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004920:	4b19      	ldr	r3, [pc, #100]	; (8004988 <MX_USART2_UART_Init+0x98>)
 8004922:	2200      	movs	r2, #0
 8004924:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004926:	4b18      	ldr	r3, [pc, #96]	; (8004988 <MX_USART2_UART_Init+0x98>)
 8004928:	2200      	movs	r2, #0
 800492a:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800492c:	4b16      	ldr	r3, [pc, #88]	; (8004988 <MX_USART2_UART_Init+0x98>)
 800492e:	2200      	movs	r2, #0
 8004930:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8004932:	4b15      	ldr	r3, [pc, #84]	; (8004988 <MX_USART2_UART_Init+0x98>)
 8004934:	2210      	movs	r2, #16
 8004936:	629a      	str	r2, [r3, #40]	; 0x28
	huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8004938:	4b13      	ldr	r3, [pc, #76]	; (8004988 <MX_USART2_UART_Init+0x98>)
 800493a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800493e:	63da      	str	r2, [r3, #60]	; 0x3c
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8004940:	4811      	ldr	r0, [pc, #68]	; (8004988 <MX_USART2_UART_Init+0x98>)
 8004942:	f00c fa51 	bl	8010de8 <HAL_UART_Init>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <MX_USART2_UART_Init+0x60>
	{
		Error_Handler();
 800494c:	f000 f922 	bl	8004b94 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004950:	2100      	movs	r1, #0
 8004952:	480d      	ldr	r0, [pc, #52]	; (8004988 <MX_USART2_UART_Init+0x98>)
 8004954:	f00d fe56 	bl	8012604 <HAL_UARTEx_SetTxFifoThreshold>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <MX_USART2_UART_Init+0x72>
	{
		Error_Handler();
 800495e:	f000 f919 	bl	8004b94 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004962:	2100      	movs	r1, #0
 8004964:	4808      	ldr	r0, [pc, #32]	; (8004988 <MX_USART2_UART_Init+0x98>)
 8004966:	f00d fe8b 	bl	8012680 <HAL_UARTEx_SetRxFifoThreshold>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <MX_USART2_UART_Init+0x84>
	{
		Error_Handler();
 8004970:	f000 f910 	bl	8004b94 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004974:	4804      	ldr	r0, [pc, #16]	; (8004988 <MX_USART2_UART_Init+0x98>)
 8004976:	f00d fe0c 	bl	8012592 <HAL_UARTEx_DisableFifoMode>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d001      	beq.n	8004984 <MX_USART2_UART_Init+0x94>
	{
		Error_Handler();
 8004980:	f000 f908 	bl	8004b94 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8004984:	bf00      	nop
 8004986:	bd80      	pop	{r7, pc}
 8004988:	20000760 	.word	0x20000760
 800498c:	40004400 	.word	0x40004400

08004990 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004996:	4b0f      	ldr	r3, [pc, #60]	; (80049d4 <MX_DMA_Init+0x44>)
 8004998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800499a:	4a0e      	ldr	r2, [pc, #56]	; (80049d4 <MX_DMA_Init+0x44>)
 800499c:	f043 0304 	orr.w	r3, r3, #4
 80049a0:	6493      	str	r3, [r2, #72]	; 0x48
 80049a2:	4b0c      	ldr	r3, [pc, #48]	; (80049d4 <MX_DMA_Init+0x44>)
 80049a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049a6:	f003 0304 	and.w	r3, r3, #4
 80049aa:	607b      	str	r3, [r7, #4]
 80049ac:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80049ae:	4b09      	ldr	r3, [pc, #36]	; (80049d4 <MX_DMA_Init+0x44>)
 80049b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b2:	4a08      	ldr	r2, [pc, #32]	; (80049d4 <MX_DMA_Init+0x44>)
 80049b4:	f043 0301 	orr.w	r3, r3, #1
 80049b8:	6493      	str	r3, [r2, #72]	; 0x48
 80049ba:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <MX_DMA_Init+0x44>)
 80049bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	683b      	ldr	r3, [r7, #0]

}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	40021000 	.word	0x40021000

080049d8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08c      	sub	sp, #48	; 0x30
 80049dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049de:	f107 031c 	add.w	r3, r7, #28
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	605a      	str	r2, [r3, #4]
 80049e8:	609a      	str	r2, [r3, #8]
 80049ea:	60da      	str	r2, [r3, #12]
 80049ec:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80049ee:	4b64      	ldr	r3, [pc, #400]	; (8004b80 <MX_GPIO_Init+0x1a8>)
 80049f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f2:	4a63      	ldr	r2, [pc, #396]	; (8004b80 <MX_GPIO_Init+0x1a8>)
 80049f4:	f043 0310 	orr.w	r3, r3, #16
 80049f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049fa:	4b61      	ldr	r3, [pc, #388]	; (8004b80 <MX_GPIO_Init+0x1a8>)
 80049fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049fe:	f003 0310 	and.w	r3, r3, #16
 8004a02:	61bb      	str	r3, [r7, #24]
 8004a04:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004a06:	4b5e      	ldr	r3, [pc, #376]	; (8004b80 <MX_GPIO_Init+0x1a8>)
 8004a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a0a:	4a5d      	ldr	r2, [pc, #372]	; (8004b80 <MX_GPIO_Init+0x1a8>)
 8004a0c:	f043 0304 	orr.w	r3, r3, #4
 8004a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a12:	4b5b      	ldr	r3, [pc, #364]	; (8004b80 <MX_GPIO_Init+0x1a8>)
 8004a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a16:	f003 0304 	and.w	r3, r3, #4
 8004a1a:	617b      	str	r3, [r7, #20]
 8004a1c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8004a1e:	4b58      	ldr	r3, [pc, #352]	; (8004b80 <MX_GPIO_Init+0x1a8>)
 8004a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a22:	4a57      	ldr	r2, [pc, #348]	; (8004b80 <MX_GPIO_Init+0x1a8>)
 8004a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a2a:	4b55      	ldr	r3, [pc, #340]	; (8004b80 <MX_GPIO_Init+0x1a8>)
 8004a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a32:	613b      	str	r3, [r7, #16]
 8004a34:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004a36:	4b52      	ldr	r3, [pc, #328]	; (8004b80 <MX_GPIO_Init+0x1a8>)
 8004a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a3a:	4a51      	ldr	r2, [pc, #324]	; (8004b80 <MX_GPIO_Init+0x1a8>)
 8004a3c:	f043 0301 	orr.w	r3, r3, #1
 8004a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a42:	4b4f      	ldr	r3, [pc, #316]	; (8004b80 <MX_GPIO_Init+0x1a8>)
 8004a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004a4e:	4b4c      	ldr	r3, [pc, #304]	; (8004b80 <MX_GPIO_Init+0x1a8>)
 8004a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a52:	4a4b      	ldr	r2, [pc, #300]	; (8004b80 <MX_GPIO_Init+0x1a8>)
 8004a54:	f043 0302 	orr.w	r3, r3, #2
 8004a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a5a:	4b49      	ldr	r3, [pc, #292]	; (8004b80 <MX_GPIO_Init+0x1a8>)
 8004a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	60bb      	str	r3, [r7, #8]
 8004a64:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8004a66:	4b46      	ldr	r3, [pc, #280]	; (8004b80 <MX_GPIO_Init+0x1a8>)
 8004a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a6a:	4a45      	ldr	r2, [pc, #276]	; (8004b80 <MX_GPIO_Init+0x1a8>)
 8004a6c:	f043 0308 	orr.w	r3, r3, #8
 8004a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a72:	4b43      	ldr	r3, [pc, #268]	; (8004b80 <MX_GPIO_Init+0x1a8>)
 8004a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a76:	f003 0308 	and.w	r3, r3, #8
 8004a7a:	607b      	str	r3, [r7, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f641 013c 	movw	r1, #6204	; 0x183c
 8004a84:	483f      	ldr	r0, [pc, #252]	; (8004b84 <MX_GPIO_Init+0x1ac>)
 8004a86:	f003 fc15 	bl	80082b4 <HAL_GPIO_WritePin>
			|MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_SET);
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	2130      	movs	r1, #48	; 0x30
 8004a8e:	483e      	ldr	r0, [pc, #248]	; (8004b88 <MX_GPIO_Init+0x1b0>)
 8004a90:	f003 fc10 	bl	80082b4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8004a94:	2200      	movs	r2, #0
 8004a96:	2178      	movs	r1, #120	; 0x78
 8004a98:	483c      	ldr	r0, [pc, #240]	; (8004b8c <MX_GPIO_Init+0x1b4>)
 8004a9a:	f003 fc0b 	bl	80082b4 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
	GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8004a9e:	f641 033c 	movw	r3, #6204	; 0x183c
 8004aa2:	61fb      	str	r3, [r7, #28]
			|MIRA_EN_PWR_Pin|OCPEN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aac:	2300      	movs	r3, #0
 8004aae:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ab0:	f107 031c 	add.w	r3, r7, #28
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	4833      	ldr	r0, [pc, #204]	; (8004b84 <MX_GPIO_Init+0x1ac>)
 8004ab8:	f003 f960 	bl	8007d7c <HAL_GPIO_Init>

	/*Configure GPIO pin : CHG_INT_Pin */
	GPIO_InitStruct.Pin = CHG_INT_Pin;
 8004abc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ac0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 8004aca:	f107 031c 	add.w	r3, r7, #28
 8004ace:	4619      	mov	r1, r3
 8004ad0:	482d      	ldr	r0, [pc, #180]	; (8004b88 <MX_GPIO_Init+0x1b0>)
 8004ad2:	f003 f953 	bl	8007d7c <HAL_GPIO_Init>

	/*Configure GPIO pin : LORA_DIG0_Pin */
	GPIO_InitStruct.Pin = LORA_DIG0_Pin;
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ada:	2300      	movs	r3, #0
 8004adc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(LORA_DIG0_GPIO_Port, &GPIO_InitStruct);
 8004ae2:	f107 031c 	add.w	r3, r7, #28
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004aec:	f003 f946 	bl	8007d7c <HAL_GPIO_Init>

	/*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
	GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 8004af0:	2330      	movs	r3, #48	; 0x30
 8004af2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004af4:	2301      	movs	r3, #1
 8004af6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af8:	2300      	movs	r3, #0
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004afc:	2300      	movs	r3, #0
 8004afe:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b00:	f107 031c 	add.w	r3, r7, #28
 8004b04:	4619      	mov	r1, r3
 8004b06:	4820      	ldr	r0, [pc, #128]	; (8004b88 <MX_GPIO_Init+0x1b0>)
 8004b08:	f003 f938 	bl	8007d7c <HAL_GPIO_Init>

	/*Configure GPIO pin : OCPFAULT_Pin */
	GPIO_InitStruct.Pin = OCPFAULT_Pin;
 8004b0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b10:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b12:	2300      	movs	r3, #0
 8004b14:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b16:	2301      	movs	r3, #1
 8004b18:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 8004b1a:	f107 031c 	add.w	r3, r7, #28
 8004b1e:	4619      	mov	r1, r3
 8004b20:	4818      	ldr	r0, [pc, #96]	; (8004b84 <MX_GPIO_Init+0x1ac>)
 8004b22:	f003 f92b 	bl	8007d7c <HAL_GPIO_Init>

	/*Configure GPIO pin : CARD_DETECT_Pin */
	GPIO_InitStruct.Pin = CARD_DETECT_Pin;
 8004b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b2a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b30:	2301      	movs	r3, #1
 8004b32:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8004b34:	f107 031c 	add.w	r3, r7, #28
 8004b38:	4619      	mov	r1, r3
 8004b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b3e:	f003 f91d 	bl	8007d7c <HAL_GPIO_Init>

	/*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8004b42:	2378      	movs	r3, #120	; 0x78
 8004b44:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b46:	2301      	movs	r3, #1
 8004b48:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b52:	f107 031c 	add.w	r3, r7, #28
 8004b56:	4619      	mov	r1, r3
 8004b58:	480c      	ldr	r0, [pc, #48]	; (8004b8c <MX_GPIO_Init+0x1b4>)
 8004b5a:	f003 f90f 	bl	8007d7c <HAL_GPIO_Init>

	/*Configure GPIO pin : POWERGOOD_Pin */
	GPIO_InitStruct.Pin = POWERGOOD_Pin;
 8004b5e:	2320      	movs	r3, #32
 8004b60:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b62:	2300      	movs	r3, #0
 8004b64:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b66:	2300      	movs	r3, #0
 8004b68:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 8004b6a:	f107 031c 	add.w	r3, r7, #28
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4807      	ldr	r0, [pc, #28]	; (8004b90 <MX_GPIO_Init+0x1b8>)
 8004b72:	f003 f903 	bl	8007d7c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8004b76:	bf00      	nop
 8004b78:	3730      	adds	r7, #48	; 0x30
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	40021000 	.word	0x40021000
 8004b84:	48001000 	.word	0x48001000
 8004b88:	48000800 	.word	0x48000800
 8004b8c:	48000c00 	.word	0x48000c00
 8004b90:	48000400 	.word	0x48000400

08004b94 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004b98:	b672      	cpsid	i
}
 8004b9a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	printf("Error_Handler() called");
 8004b9c:	4801      	ldr	r0, [pc, #4]	; (8004ba4 <Error_Handler+0x10>)
 8004b9e:	f015 fd3f 	bl	801a620 <iprintf>
	while (1)
 8004ba2:	e7fe      	b.n	8004ba2 <Error_Handler+0xe>
 8004ba4:	0801ce04 	.word	0x0801ce04

08004ba8 <CRC16>:
 * @param *nData: pointer to the data array
 * @param wLength: length of the data array
 * @return 16-bit unsigned integer which is the computed CRC16 value.
 */
uint16_t CRC16 (uint8_t *nData, uint16_t wLength)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	807b      	strh	r3, [r7, #2]
			0X4E00, 0X8EC1, 0X8F81, 0X4F40, 0X8D01, 0X4DC0, 0X4C80, 0X8C41,
			0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
			0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

	uint8_t nTemp;
	uint16_t wCRCWord = 0xFFFF;
 8004bb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bb8:	81fb      	strh	r3, [r7, #14]

	while (wLength--)
 8004bba:	e011      	b.n	8004be0 <CRC16+0x38>
	{
		nTemp = *nData++ ^ wCRCWord;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	607a      	str	r2, [r7, #4]
 8004bc2:	781a      	ldrb	r2, [r3, #0]
 8004bc4:	89fb      	ldrh	r3, [r7, #14]
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	4053      	eors	r3, r2
 8004bca:	737b      	strb	r3, [r7, #13]
		wCRCWord >>= 8;
 8004bcc:	89fb      	ldrh	r3, [r7, #14]
 8004bce:	0a1b      	lsrs	r3, r3, #8
 8004bd0:	81fb      	strh	r3, [r7, #14]
		wCRCWord ^= wCRCTable[nTemp];
 8004bd2:	7b7b      	ldrb	r3, [r7, #13]
 8004bd4:	4a08      	ldr	r2, [pc, #32]	; (8004bf8 <CRC16+0x50>)
 8004bd6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004bda:	89fb      	ldrh	r3, [r7, #14]
 8004bdc:	4053      	eors	r3, r2
 8004bde:	81fb      	strh	r3, [r7, #14]
	while (wLength--)
 8004be0:	887b      	ldrh	r3, [r7, #2]
 8004be2:	1e5a      	subs	r2, r3, #1
 8004be4:	807a      	strh	r2, [r7, #2]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1e8      	bne.n	8004bbc <CRC16+0x14>
	}
	return wCRCWord;
 8004bea:	89fb      	ldrh	r3, [r7, #14]

}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	0801cef4 	.word	0x0801cef4

08004bfc <mira_command_empty_payload>:
 * @param reg: the register address.
 * @param *rxBuffer: pointer to the buffer that stores the received data
 * @param Timeout: timeout duration for UART communication in milliseconds
 * @return status: status of the UART operation
 */
HAL_StatusTypeDef mira_command_empty_payload(UART_HandleTypeDef *huart, uint8_t command, uint8_t *rxBuffer, uint8_t rx_size, uint32_t Timeout){
 8004bfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c00:	b08f      	sub	sp, #60	; 0x3c
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	60f8      	str	r0, [r7, #12]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	72fb      	strb	r3, [r7, #11]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	72bb      	strb	r3, [r7, #10]
 8004c12:	466b      	mov	r3, sp
 8004c14:	461e      	mov	r6, r3
	//while (!mira_ready_for_comm);//{HAL_Delay(100);}
//	HAL_Delay(500);
//	mira_ready_for_comm = 0;

	HAL_StatusTypeDef status;
	uint8_t message_len = 9;
 8004c16:	2309      	movs	r3, #9
 8004c18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t message[message_len];
 8004c1c:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
 8004c20:	460b      	mov	r3, r1
 8004c22:	3b01      	subs	r3, #1
 8004c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c26:	b2cb      	uxtb	r3, r1
 8004c28:	2200      	movs	r2, #0
 8004c2a:	4698      	mov	r8, r3
 8004c2c:	4691      	mov	r9, r2
 8004c2e:	f04f 0200 	mov.w	r2, #0
 8004c32:	f04f 0300 	mov.w	r3, #0
 8004c36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c42:	b2cb      	uxtb	r3, r1
 8004c44:	2200      	movs	r2, #0
 8004c46:	461c      	mov	r4, r3
 8004c48:	4615      	mov	r5, r2
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	f04f 0300 	mov.w	r3, #0
 8004c52:	00eb      	lsls	r3, r5, #3
 8004c54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c58:	00e2      	lsls	r2, r4, #3
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	3307      	adds	r3, #7
 8004c5e:	08db      	lsrs	r3, r3, #3
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	ebad 0d03 	sub.w	sp, sp, r3
 8004c66:	466b      	mov	r3, sp
 8004c68:	3300      	adds	r3, #0
 8004c6a:	62bb      	str	r3, [r7, #40]	; 0x28
	int j;
	for (j = 0; j < message_len; j++) {
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8004c70:	e007      	b.n	8004c82 <mira_command_empty_payload+0x86>
		message[j] = 0;
 8004c72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c76:	4413      	add	r3, r2
 8004c78:	2200      	movs	r2, #0
 8004c7a:	701a      	strb	r2, [r3, #0]
	for (j = 0; j < message_len; j++) {
 8004c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7e:	3301      	adds	r3, #1
 8004c80:	637b      	str	r3, [r7, #52]	; 0x34
 8004c82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	dbf2      	blt.n	8004c72 <mira_command_empty_payload+0x76>
	}
	uint8_t sync[2] = {0x5a, 0xce};
 8004c8c:	f64c 635a 	movw	r3, #52826	; 0xce5a
 8004c90:	843b      	strh	r3, [r7, #32]
	// do this (below) properly some other time
	uint8_t length[2] = {0x00, 0x00};
 8004c92:	2300      	movs	r3, #0
 8004c94:	83bb      	strh	r3, [r7, #28]
	uint8_t src[1] = {0xc1};
 8004c96:	23c1      	movs	r3, #193	; 0xc1
 8004c98:	763b      	strb	r3, [r7, #24]
	uint8_t dest[1] = {0xe1};
 8004c9a:	23e1      	movs	r3, #225	; 0xe1
 8004c9c:	753b      	strb	r3, [r7, #20]
	uint16_t sum = 0;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	84fb      	strh	r3, [r7, #38]	; 0x26

	message[0] = sync[0];
 8004ca2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca8:	701a      	strb	r2, [r3, #0]
	message[1] = sync[1];
 8004caa:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8004cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb0:	705a      	strb	r2, [r3, #1]
	message[2] = length[0];
 8004cb2:	7f3a      	ldrb	r2, [r7, #28]
 8004cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb6:	709a      	strb	r2, [r3, #2]
	message[3] = length[1];
 8004cb8:	7f7a      	ldrb	r2, [r7, #29]
 8004cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cbc:	70da      	strb	r2, [r3, #3]
	message[4] = src[0];
 8004cbe:	7e3a      	ldrb	r2, [r7, #24]
 8004cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc2:	711a      	strb	r2, [r3, #4]
	message[5] = dest[0];
 8004cc4:	7d3a      	ldrb	r2, [r7, #20]
 8004cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc8:	715a      	strb	r2, [r3, #5]
	message[6] = command;
 8004cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ccc:	7afa      	ldrb	r2, [r7, #11]
 8004cce:	719a      	strb	r2, [r3, #6]

	sum = CRC16(message+2, 7);
 8004cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd2:	3302      	adds	r3, #2
 8004cd4:	2107      	movs	r1, #7
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7ff ff66 	bl	8004ba8 <CRC16>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	84fb      	strh	r3, [r7, #38]	; 0x26

	message[7] = (sum&0xFF00)>>8;
 8004ce0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ce2:	0a1b      	lsrs	r3, r3, #8
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cea:	71da      	strb	r2, [r3, #7]
	message[8] = (sum&0x00FF);
 8004cec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004cee:	b2da      	uxtb	r2, r3
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	721a      	strb	r2, [r3, #8]

	//while (huart->RxState != HAL_UART_STATE_READY) {HAL_Delay(1);}

	// Enable transmitter and disable receiver
	HAL_GPIO_WritePin(RX_EN_2_GPIO_Port, RX_EN_2_Pin, GPIO_PIN_SET);
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	2104      	movs	r1, #4
 8004cf8:	481b      	ldr	r0, [pc, #108]	; (8004d68 <mira_command_empty_payload+0x16c>)
 8004cfa:	f003 fadb 	bl	80082b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TX_EN_2_GPIO_Port, TX_EN_2_Pin, GPIO_PIN_SET);
 8004cfe:	2201      	movs	r2, #1
 8004d00:	2108      	movs	r1, #8
 8004d02:	4819      	ldr	r0, [pc, #100]	; (8004d68 <mira_command_empty_payload+0x16c>)
 8004d04:	f003 fad6 	bl	80082b4 <HAL_GPIO_WritePin>

	// write given value to register at given address
	status = HAL_UART_Transmit(huart, message, 9, Timeout);
 8004d08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d0a:	2209      	movs	r2, #9
 8004d0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f00c f8ba 	bl	8010e88 <HAL_UART_Transmit>
 8004d14:	4603      	mov	r3, r0
 8004d16:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	// Enable receiver and disable transmitter
	HAL_GPIO_WritePin(RX_EN_2_GPIO_Port, RX_EN_2_Pin, GPIO_PIN_RESET);
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	2104      	movs	r1, #4
 8004d1e:	4812      	ldr	r0, [pc, #72]	; (8004d68 <mira_command_empty_payload+0x16c>)
 8004d20:	f003 fac8 	bl	80082b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TX_EN_2_GPIO_Port, TX_EN_2_Pin, GPIO_PIN_RESET);
 8004d24:	2200      	movs	r2, #0
 8004d26:	2108      	movs	r1, #8
 8004d28:	480f      	ldr	r0, [pc, #60]	; (8004d68 <mira_command_empty_payload+0x16c>)
 8004d2a:	f003 fac3 	bl	80082b4 <HAL_GPIO_WritePin>
	if (status != HAL_OK) {return status;}
 8004d2e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <mira_command_empty_payload+0x140>
 8004d36:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004d3a:	e00e      	b.n	8004d5a <mira_command_empty_payload+0x15e>

	status = HAL_UART_Receive_DMA(huart, rxBuffer, rx_size);
 8004d3c:	7abb      	ldrb	r3, [r7, #10]
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	461a      	mov	r2, r3
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f00c f92f 	bl	8010fa8 <HAL_UART_Receive_DMA>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	HAL_Delay(3);
 8004d50:	2003      	movs	r0, #3
 8004d52:	f002 fbaf 	bl	80074b4 <HAL_Delay>


	return status;
 8004d56:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004d5a:	46b5      	mov	sp, r6

}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	373c      	adds	r7, #60	; 0x3c
 8004d60:	46bd      	mov	sp, r7
 8004d62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d66:	bf00      	nop
 8004d68:	48001000 	.word	0x48001000

08004d6c <mira_command>:
 * @param *data: pointer to the buffer that has the payload of the message
 * @param *rxBuffer: pointer to the buffer that stores the received data
 * @param Timeout: timeout duration for UART communication in milliseconds
 * @return status: status of the UART operation
 */
HAL_StatusTypeDef mira_command(UART_HandleTypeDef *huart, uint8_t command, uint8_t reg, uint8_t *data, uint8_t size_data, uint8_t *rxBuffer, uint32_t Timeout){
 8004d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d70:	b08e      	sub	sp, #56	; 0x38
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	607b      	str	r3, [r7, #4]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	72fb      	strb	r3, [r7, #11]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	72bb      	strb	r3, [r7, #10]
 8004d80:	466b      	mov	r3, sp
 8004d82:	469a      	mov	sl, r3
	//Wait that previous instance of communication is done (toggled by HAL_UART_RxCpltCallback)
	//while (!mira_ready_for_comm);//{HAL_Delay(100);}
//	HAL_Delay(500);
//	mira_ready_for_comm = 0;

	uint8_t payload_len = size_data;
 8004d84:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8004d88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t message_len = payload_len + 10;
 8004d8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d90:	330a      	adds	r3, #10
 8004d92:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	HAL_StatusTypeDef status;
	//uint8_t message[9+length_val];
	uint8_t message[message_len];
 8004d96:	f897 602e 	ldrb.w	r6, [r7, #46]	; 0x2e
 8004d9a:	4633      	mov	r3, r6
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004da0:	b2f3      	uxtb	r3, r6
 8004da2:	2200      	movs	r2, #0
 8004da4:	4698      	mov	r8, r3
 8004da6:	4691      	mov	r9, r2
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	f04f 0300 	mov.w	r3, #0
 8004db0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004db4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004db8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dbc:	b2f3      	uxtb	r3, r6
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	461c      	mov	r4, r3
 8004dc2:	4615      	mov	r5, r2
 8004dc4:	f04f 0200 	mov.w	r2, #0
 8004dc8:	f04f 0300 	mov.w	r3, #0
 8004dcc:	00eb      	lsls	r3, r5, #3
 8004dce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dd2:	00e2      	lsls	r2, r4, #3
 8004dd4:	4633      	mov	r3, r6
 8004dd6:	3307      	adds	r3, #7
 8004dd8:	08db      	lsrs	r3, r3, #3
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	ebad 0d03 	sub.w	sp, sp, r3
 8004de0:	466b      	mov	r3, sp
 8004de2:	3300      	adds	r3, #0
 8004de4:	627b      	str	r3, [r7, #36]	; 0x24
	int j;
	for (j = 0; j < sizeof(message); j++) {
 8004de6:	2300      	movs	r3, #0
 8004de8:	633b      	str	r3, [r7, #48]	; 0x30
 8004dea:	e007      	b.n	8004dfc <mira_command+0x90>
		message[j] = 0;
 8004dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df0:	4413      	add	r3, r2
 8004df2:	2200      	movs	r2, #0
 8004df4:	701a      	strb	r2, [r3, #0]
	for (j = 0; j < sizeof(message); j++) {
 8004df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df8:	3301      	adds	r3, #1
 8004dfa:	633b      	str	r3, [r7, #48]	; 0x30
 8004dfc:	4632      	mov	r2, r6
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d8f3      	bhi.n	8004dec <mira_command+0x80>
	}
	uint8_t sync[2] = {0x5a, 0xce};
 8004e04:	f64c 635a 	movw	r3, #52826	; 0xce5a
 8004e08:	83bb      	strh	r3, [r7, #28]
	// do this (below) properly some other time
	uint8_t length[2] = {0x00, payload_len+1};
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	763b      	strb	r3, [r7, #24]
 8004e0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e12:	3301      	adds	r3, #1
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	767b      	strb	r3, [r7, #25]
	uint8_t src[1] = {0xc1};
 8004e18:	23c1      	movs	r3, #193	; 0xc1
 8004e1a:	753b      	strb	r3, [r7, #20]
	uint8_t dest[1] = {0xe1};
 8004e1c:	23e1      	movs	r3, #225	; 0xe1
 8004e1e:	743b      	strb	r3, [r7, #16]
	uint16_t sum = 0;
 8004e20:	2300      	movs	r3, #0
 8004e22:	847b      	strh	r3, [r7, #34]	; 0x22

	message[sizeof(message) - message_len + 0] = sync[0];
 8004e24:	4632      	mov	r2, r6
 8004e26:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	7f39      	ldrb	r1, [r7, #28]
 8004e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e30:	54d1      	strb	r1, [r2, r3]
	message[sizeof(message) - message_len + 1] = sync[1];
 8004e32:	4632      	mov	r2, r6
 8004e34:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	7f79      	ldrb	r1, [r7, #29]
 8004e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e40:	54d1      	strb	r1, [r2, r3]
	message[sizeof(message) - message_len + 2] = length[0];
 8004e42:	4632      	mov	r2, r6
 8004e44:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	3302      	adds	r3, #2
 8004e4c:	7e39      	ldrb	r1, [r7, #24]
 8004e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e50:	54d1      	strb	r1, [r2, r3]
	message[sizeof(message) - message_len + 3] = length[1];
 8004e52:	4632      	mov	r2, r6
 8004e54:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	3303      	adds	r3, #3
 8004e5c:	7e79      	ldrb	r1, [r7, #25]
 8004e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e60:	54d1      	strb	r1, [r2, r3]
	message[sizeof(message) - message_len + 4] = src[0];
 8004e62:	4632      	mov	r2, r6
 8004e64:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	7d39      	ldrb	r1, [r7, #20]
 8004e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e70:	54d1      	strb	r1, [r2, r3]
	message[sizeof(message) - message_len + 5] = dest[0];
 8004e72:	4632      	mov	r2, r6
 8004e74:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	3305      	adds	r3, #5
 8004e7c:	7c39      	ldrb	r1, [r7, #16]
 8004e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e80:	54d1      	strb	r1, [r2, r3]
	message[sizeof(message) - message_len + 6] = command;
 8004e82:	4632      	mov	r2, r6
 8004e84:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	3306      	adds	r3, #6
 8004e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e8e:	7af9      	ldrb	r1, [r7, #11]
 8004e90:	54d1      	strb	r1, [r2, r3]
	message[sizeof(message) - message_len + 7] = reg;
 8004e92:	4632      	mov	r2, r6
 8004e94:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	3307      	adds	r3, #7
 8004e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e9e:	7ab9      	ldrb	r1, [r7, #10]
 8004ea0:	54d1      	strb	r1, [r2, r3]

	int i;
	for (i = 0; i < payload_len; i++) {
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ea6:	e00f      	b.n	8004ec8 <mira_command+0x15c>
		message[sizeof(message) - message_len + 8 + i] = data[i];
 8004ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	441a      	add	r2, r3
 8004eae:	4631      	mov	r1, r6
 8004eb0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004eb4:	1ac9      	subs	r1, r1, r3
 8004eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb8:	440b      	add	r3, r1
 8004eba:	3308      	adds	r3, #8
 8004ebc:	7811      	ldrb	r1, [r2, #0]
 8004ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec0:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < payload_len; i++) {
 8004ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ec8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ecc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	dbea      	blt.n	8004ea8 <mira_command+0x13c>
	}

	sum = CRC16(message + 2, message_len-2);
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	1c9a      	adds	r2, r3, #2
 8004ed6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	3b02      	subs	r3, #2
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	4610      	mov	r0, r2
 8004ee4:	f7ff fe60 	bl	8004ba8 <CRC16>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	847b      	strh	r3, [r7, #34]	; 0x22

	message[sizeof(message)] = (sum&0xFF00)>>8;
 8004eec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004eee:	0a1b      	lsrs	r3, r3, #8
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	4632      	mov	r2, r6
 8004ef4:	b2d9      	uxtb	r1, r3
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	5499      	strb	r1, [r3, r2]
	message[sizeof(message) - message_len + 10 + i-1] = (sum&0x00FF);
 8004efa:	4632      	mov	r2, r6
 8004efc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f00:	1ad2      	subs	r2, r2, r3
 8004f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f04:	4413      	add	r3, r2
 8004f06:	3309      	adds	r3, #9
 8004f08:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004f0a:	b2d1      	uxtb	r1, r2
 8004f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0e:	54d1      	strb	r1, [r2, r3]

	//while (huart->RxState != HAL_UART_STATE_READY) {HAL_Delay(1);}

	// Enable transmitter and disable receiver
	HAL_GPIO_WritePin(RX_EN_2_GPIO_Port, RX_EN_2_Pin, GPIO_PIN_SET);
 8004f10:	2201      	movs	r2, #1
 8004f12:	2104      	movs	r1, #4
 8004f14:	481a      	ldr	r0, [pc, #104]	; (8004f80 <mira_command+0x214>)
 8004f16:	f003 f9cd 	bl	80082b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TX_EN_2_GPIO_Port, TX_EN_2_Pin, GPIO_PIN_SET);
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	2108      	movs	r1, #8
 8004f1e:	4818      	ldr	r0, [pc, #96]	; (8004f80 <mira_command+0x214>)
 8004f20:	f003 f9c8 	bl	80082b4 <HAL_GPIO_WritePin>

	// write given value to register at given address
	status = HAL_UART_Transmit(huart, message, sizeof(message), Timeout);
 8004f24:	b2b2      	uxth	r2, r6
 8004f26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f00b ffac 	bl	8010e88 <HAL_UART_Transmit>
 8004f30:	4603      	mov	r3, r0
 8004f32:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	// Enable receiver and disable transmitter
	HAL_GPIO_WritePin(RX_EN_2_GPIO_Port, RX_EN_2_Pin, GPIO_PIN_RESET);
 8004f36:	2200      	movs	r2, #0
 8004f38:	2104      	movs	r1, #4
 8004f3a:	4811      	ldr	r0, [pc, #68]	; (8004f80 <mira_command+0x214>)
 8004f3c:	f003 f9ba 	bl	80082b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TX_EN_2_GPIO_Port, TX_EN_2_Pin, GPIO_PIN_RESET);
 8004f40:	2200      	movs	r2, #0
 8004f42:	2108      	movs	r1, #8
 8004f44:	480e      	ldr	r0, [pc, #56]	; (8004f80 <mira_command+0x214>)
 8004f46:	f003 f9b5 	bl	80082b4 <HAL_GPIO_WritePin>
	if (status != HAL_OK) {return status;}
 8004f4a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d002      	beq.n	8004f58 <mira_command+0x1ec>
 8004f52:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004f56:	e00c      	b.n	8004f72 <mira_command+0x206>

	status = HAL_UART_Receive_DMA(huart, rxBuffer, (uint8_t)10);
 8004f58:	220a      	movs	r2, #10
 8004f5a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f00c f823 	bl	8010fa8 <HAL_UART_Receive_DMA>
 8004f62:	4603      	mov	r3, r0
 8004f64:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	HAL_Delay(3);
 8004f68:	2003      	movs	r0, #3
 8004f6a:	f002 faa3 	bl	80074b4 <HAL_Delay>


	return status;
 8004f6e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004f72:	46d5      	mov	sp, sl

}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3738      	adds	r7, #56	; 0x38
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f7e:	bf00      	nop
 8004f80:	48001000 	.word	0x48001000

08004f84 <mira_science_data>:
 * @param *science_Rx: pointer to the buffer that stores the science data
 * @param *response_Rx: pointer to the buffer that stores the response from MIRA
 * @param Timeout: timeout duration for UART communication in milliseconds
 * @return status: status of the UART operation
 */
HAL_StatusTypeDef mira_science_data(UART_HandleTypeDef *huart, uint8_t *science_Rx, uint8_t science_size, uint32_t Timeout){
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b088      	sub	sp, #32
 8004f88:	af02      	add	r7, sp, #8
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	603b      	str	r3, [r7, #0]
 8004f90:	4613      	mov	r3, r2
 8004f92:	71fb      	strb	r3, [r7, #7]

	HAL_StatusTypeDef status;

	// Get the science data and save it to rxBuffer
	status = mira_command_empty_payload(huart, GET_SCIENCE_DATA, science_Rx, science_size, Timeout);
 8004f94:	2140      	movs	r1, #64	; 0x40
 8004f96:	79fa      	ldrb	r2, [r7, #7]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f7ff fe2b 	bl	8004bfc <mira_command_empty_payload>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	75fb      	strb	r3, [r7, #23]

	// return status
	return status;
 8004faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <mira_init>:
 * Initialization sequence for MIRA.
 * @param *huart: pointer to the UART handle structure
 * @param Timeout: timeout duration for UART communication in milliseconds
 * @return status: status of the UART operation
 */
HAL_StatusTypeDef mira_init(UART_HandleTypeDef *huart, uint32_t Timeout){
 8004fb4:	b590      	push	{r4, r7, lr}
 8004fb6:	b0ad      	sub	sp, #180	; 0xb4
 8004fb8:	af04      	add	r7, sp, #16
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	uint8_t mira_Rx_buffer[10];

	// Set AD address
	uint8_t AD_addr = 0x03;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
	uint8_t mira_write_AD_addr[3] = {0x00,0x00,0x02}; // set value 2
 8004fc4:	4aba      	ldr	r2, [pc, #744]	; (80052b0 <mira_init+0x2fc>)
 8004fc6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004fca:	6812      	ldr	r2, [r2, #0]
 8004fcc:	4611      	mov	r1, r2
 8004fce:	8019      	strh	r1, [r3, #0]
 8004fd0:	3302      	adds	r3, #2
 8004fd2:	0c12      	lsrs	r2, r2, #16
 8004fd4:	701a      	strb	r2, [r3, #0]
	status =  mira_command(huart, WRITE_REGISTER, AD_addr, mira_write_AD_addr, sizeof(mira_write_AD_addr), mira_Rx_buffer, Timeout);
 8004fd6:	2003      	movs	r0, #3
 8004fd8:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8004fdc:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	9302      	str	r3, [sp, #8]
 8004fe4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004fe8:	9301      	str	r3, [sp, #4]
 8004fea:	2303      	movs	r3, #3
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4601      	mov	r1, r0
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7ff feba 	bl	8004d6c <mira_command>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
	if (status != HAL_OK) {return status;}
 8004ffe:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8005002:	2b00      	cmp	r3, #0
 8005004:	d002      	beq.n	800500c <mira_init+0x58>
 8005006:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 800500a:	e17f      	b.n	800530c <mira_init+0x358>

	// Enable AD converter
	uint8_t AD_en = 0x02;
 800500c:	2302      	movs	r3, #2
 800500e:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
	uint8_t mira_write_AD_en[1] = {0x01};
 8005012:	2301      	movs	r3, #1
 8005014:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	status =  mira_command(huart, WRITE_REGISTER, AD_en, mira_write_AD_en, sizeof(mira_write_AD_en), mira_Rx_buffer, Timeout);
 8005018:	2003      	movs	r0, #3
 800501a:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800501e:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	9302      	str	r3, [sp, #8]
 8005026:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800502a:	9301      	str	r3, [sp, #4]
 800502c:	2301      	movs	r3, #1
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	460b      	mov	r3, r1
 8005032:	4601      	mov	r1, r0
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f7ff fe99 	bl	8004d6c <mira_command>
 800503a:	4603      	mov	r3, r0
 800503c:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
	if (status != HAL_OK) {return status;}
 8005040:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <mira_init+0x9a>
 8005048:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 800504c:	e15e      	b.n	800530c <mira_init+0x358>

	HAL_Delay(1000);
 800504e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005052:	f002 fa2f 	bl	80074b4 <HAL_Delay>

	// Enable high voltage
	uint8_t HV_enable = 0x14;
 8005056:	2314      	movs	r3, #20
 8005058:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	uint8_t mira_write_HV_enable[1] = {0x01};
 800505c:	2301      	movs	r3, #1
 800505e:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	status =  mira_command(huart, WRITE_REGISTER, HV_enable, mira_write_HV_enable, sizeof(mira_write_HV_enable), mira_Rx_buffer, Timeout);
 8005062:	2003      	movs	r0, #3
 8005064:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8005068:	f897 2098 	ldrb.w	r2, [r7, #152]	; 0x98
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	9302      	str	r3, [sp, #8]
 8005070:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005074:	9301      	str	r3, [sp, #4]
 8005076:	2301      	movs	r3, #1
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	460b      	mov	r3, r1
 800507c:	4601      	mov	r1, r0
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7ff fe74 	bl	8004d6c <mira_command>
 8005084:	4603      	mov	r3, r0
 8005086:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
	if (status != HAL_OK) {return status;}
 800508a:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <mira_init+0xe4>
 8005092:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8005096:	e139      	b.n	800530c <mira_init+0x358>

	HAL_Delay(1000);
 8005098:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800509c:	f002 fa0a 	bl	80074b4 <HAL_Delay>

	// Set calibration values regs 7-10, 14, 15
	// Set integration time IT
	uint8_t IT = 0x07;
 80050a0:	2307      	movs	r3, #7
 80050a2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint8_t mira_write_IT[6] = {0x00,0x00,0x00,0x00,0x00, 0x0F}; // 15 s
 80050a6:	4a83      	ldr	r2, [pc, #524]	; (80052b4 <mira_init+0x300>)
 80050a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80050ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80050b0:	6018      	str	r0, [r3, #0]
 80050b2:	3304      	adds	r3, #4
 80050b4:	8019      	strh	r1, [r3, #0]
	status =  mira_command(huart, WRITE_REGISTER, IT, mira_write_IT, sizeof(mira_write_IT), mira_Rx_buffer, Timeout);
 80050b6:	2003      	movs	r0, #3
 80050b8:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80050bc:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	9302      	str	r3, [sp, #8]
 80050c4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80050c8:	9301      	str	r3, [sp, #4]
 80050ca:	2306      	movs	r3, #6
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	460b      	mov	r3, r1
 80050d0:	4601      	mov	r1, r0
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7ff fe4a 	bl	8004d6c <mira_command>
 80050d8:	4603      	mov	r3, r0
 80050da:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
	if (status != HAL_OK) {return status;}
 80050de:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <mira_init+0x138>
 80050e6:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80050ea:	e10f      	b.n	800530c <mira_init+0x358>


	// Set main trigger level
	uint8_t Trigger = 0x0B;
 80050ec:	230b      	movs	r3, #11
 80050ee:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
	uint8_t mira_write_Trigger[16] = {0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00, 0x28}; // set value 40
 80050f2:	4b71      	ldr	r3, [pc, #452]	; (80052b8 <mira_init+0x304>)
 80050f4:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80050f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80050fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	status =  mira_command(huart, WRITE_REGISTER, Trigger, mira_write_Trigger, sizeof(mira_write_Trigger), mira_Rx_buffer, Timeout);
 80050fe:	2003      	movs	r0, #3
 8005100:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005104:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	9302      	str	r3, [sp, #8]
 800510c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005110:	9301      	str	r3, [sp, #4]
 8005112:	2310      	movs	r3, #16
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	460b      	mov	r3, r1
 8005118:	4601      	mov	r1, r0
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7ff fe26 	bl	8004d6c <mira_command>
 8005120:	4603      	mov	r3, r0
 8005122:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
	if (status != HAL_OK) {return status;}
 8005126:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <mira_init+0x180>
 800512e:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8005132:	e0eb      	b.n	800530c <mira_init+0x358>


	// Set fast noise level
	uint8_t Fast_noise = 0x08;
 8005134:	2308      	movs	r3, #8
 8005136:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
	uint8_t mira_write_Fast_noise[13] = {0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x0C}; // set value 12
 800513a:	4b60      	ldr	r3, [pc, #384]	; (80052bc <mira_init+0x308>)
 800513c:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8005140:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005142:	c407      	stmia	r4!, {r0, r1, r2}
 8005144:	7023      	strb	r3, [r4, #0]
	status =  mira_command(huart, WRITE_REGISTER, Fast_noise, mira_write_Fast_noise, sizeof(mira_write_Fast_noise), mira_Rx_buffer, Timeout);
 8005146:	2003      	movs	r0, #3
 8005148:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800514c:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	9302      	str	r3, [sp, #8]
 8005154:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005158:	9301      	str	r3, [sp, #4]
 800515a:	230d      	movs	r3, #13
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	460b      	mov	r3, r1
 8005160:	4601      	mov	r1, r0
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f7ff fe02 	bl	8004d6c <mira_command>
 8005168:	4603      	mov	r3, r0
 800516a:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
	if (status != HAL_OK) {return status;}
 800516e:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8005172:	2b00      	cmp	r3, #0
 8005174:	d002      	beq.n	800517c <mira_init+0x1c8>
 8005176:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 800517a:	e0c7      	b.n	800530c <mira_init+0x358>


	// Set fast trigger level
	uint8_t Fast_trigger = 0x09;
 800517c:	2309      	movs	r3, #9
 800517e:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
	uint8_t mira_write_Fast_trigger[13] = {0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x14}; // set value 20
 8005182:	4b4f      	ldr	r3, [pc, #316]	; (80052c0 <mira_init+0x30c>)
 8005184:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8005188:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800518a:	c407      	stmia	r4!, {r0, r1, r2}
 800518c:	7023      	strb	r3, [r4, #0]
	status =  mira_command(huart, WRITE_REGISTER, Fast_trigger, mira_write_Fast_trigger, sizeof(mira_write_Fast_trigger), mira_Rx_buffer, Timeout);
 800518e:	2003      	movs	r0, #3
 8005190:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8005194:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	9302      	str	r3, [sp, #8]
 800519c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80051a0:	9301      	str	r3, [sp, #4]
 80051a2:	230d      	movs	r3, #13
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	460b      	mov	r3, r1
 80051a8:	4601      	mov	r1, r0
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7ff fdde 	bl	8004d6c <mira_command>
 80051b0:	4603      	mov	r3, r0
 80051b2:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
	if (status != HAL_OK) {return status;}
 80051b6:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <mira_init+0x210>
 80051be:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80051c2:	e0a3      	b.n	800530c <mira_init+0x358>


	// Set filter settings to 0
	uint8_t Filter_settings = 0x0A;
 80051c4:	230a      	movs	r3, #10
 80051c6:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	uint8_t mira_write_Filter_settings[4] = {0x00,0x00,0x00,0x00};
 80051ca:	2300      	movs	r3, #0
 80051cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	status =  mira_command(huart, WRITE_REGISTER, Filter_settings, mira_write_Filter_settings, sizeof(mira_write_Filter_settings), mira_Rx_buffer, Timeout);
 80051ce:	2003      	movs	r0, #3
 80051d0:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80051d4:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	9302      	str	r3, [sp, #8]
 80051dc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80051e0:	9301      	str	r3, [sp, #4]
 80051e2:	2304      	movs	r3, #4
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	460b      	mov	r3, r1
 80051e8:	4601      	mov	r1, r0
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7ff fdbe 	bl	8004d6c <mira_command>
 80051f0:	4603      	mov	r3, r0
 80051f2:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
	if (status != HAL_OK) {return status;}
 80051f6:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d002      	beq.n	8005204 <mira_init+0x250>
 80051fe:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8005202:	e083      	b.n	800530c <mira_init+0x358>


	// Set fast calibration multiplier
	uint8_t Calib_m = 0x0E;
 8005204:	230e      	movs	r3, #14
 8005206:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
	uint8_t mira_write_Calib_m[16] = {0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x27, 0x10}; // set value 10000
 800520a:	4b2e      	ldr	r3, [pc, #184]	; (80052c4 <mira_init+0x310>)
 800520c:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8005210:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005212:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	status =  mira_command(huart, WRITE_REGISTER, Calib_m, mira_write_Calib_m, sizeof(mira_write_Calib_m), mira_Rx_buffer, Timeout);
 8005216:	2003      	movs	r0, #3
 8005218:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800521c:	f897 2092 	ldrb.w	r2, [r7, #146]	; 0x92
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	9302      	str	r3, [sp, #8]
 8005224:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005228:	9301      	str	r3, [sp, #4]
 800522a:	2310      	movs	r3, #16
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	460b      	mov	r3, r1
 8005230:	4601      	mov	r1, r0
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7ff fd9a 	bl	8004d6c <mira_command>
 8005238:	4603      	mov	r3, r0
 800523a:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
	if (status != HAL_OK) {return status;}
 800523e:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8005242:	2b00      	cmp	r3, #0
 8005244:	d002      	beq.n	800524c <mira_init+0x298>
 8005246:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 800524a:	e05f      	b.n	800530c <mira_init+0x358>


	// Set time in unix time (s)
	uint8_t Time = 0x0F;
 800524c:	230f      	movs	r3, #15
 800524e:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
	uint8_t mira_write_Time[32];
	int i;
	for (i = 0; i < 32; i++) {
 8005252:	2300      	movs	r3, #0
 8005254:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005258:	e00b      	b.n	8005272 <mira_init+0x2be>
		mira_write_Time[i] = 0;
 800525a:	f107 020c 	add.w	r2, r7, #12
 800525e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005262:	4413      	add	r3, r2
 8005264:	2200      	movs	r2, #0
 8005266:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 32; i++) {
 8005268:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800526c:	3301      	adds	r3, #1
 800526e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005272:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005276:	2b1f      	cmp	r3, #31
 8005278:	ddef      	ble.n	800525a <mira_init+0x2a6>
	}
	status =  mira_command(huart, WRITE_REGISTER, Time, mira_write_Time, sizeof(mira_write_Time), mira_Rx_buffer, Timeout);
 800527a:	2003      	movs	r0, #3
 800527c:	f107 010c 	add.w	r1, r7, #12
 8005280:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	9302      	str	r3, [sp, #8]
 8005288:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800528c:	9301      	str	r3, [sp, #4]
 800528e:	2320      	movs	r3, #32
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	460b      	mov	r3, r1
 8005294:	4601      	mov	r1, r0
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7ff fd68 	bl	8004d6c <mira_command>
 800529c:	4603      	mov	r3, r0
 800529e:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
	if (status != HAL_OK) {return status;}
 80052a2:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00e      	beq.n	80052c8 <mira_init+0x314>
 80052aa:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80052ae:	e02d      	b.n	800530c <mira_init+0x358>
 80052b0:	0801ce1c 	.word	0x0801ce1c
 80052b4:	0801ce20 	.word	0x0801ce20
 80052b8:	0801ce28 	.word	0x0801ce28
 80052bc:	0801ce38 	.word	0x0801ce38
 80052c0:	0801ce48 	.word	0x0801ce48
 80052c4:	0801ce58 	.word	0x0801ce58


	// Go to science mode
	uint8_t Science_mode = 0x06;
 80052c8:	2306      	movs	r3, #6
 80052ca:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	uint8_t mira_write_Science_mode[1] = {0x01};
 80052ce:	2301      	movs	r3, #1
 80052d0:	723b      	strb	r3, [r7, #8]
	status =  mira_command(huart, WRITE_REGISTER, Science_mode, mira_write_Science_mode, sizeof(mira_write_Science_mode), mira_Rx_buffer, Timeout);
 80052d2:	2003      	movs	r0, #3
 80052d4:	f107 0108 	add.w	r1, r7, #8
 80052d8:	f897 2090 	ldrb.w	r2, [r7, #144]	; 0x90
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	9302      	str	r3, [sp, #8]
 80052e0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80052e4:	9301      	str	r3, [sp, #4]
 80052e6:	2301      	movs	r3, #1
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	460b      	mov	r3, r1
 80052ec:	4601      	mov	r1, r0
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7ff fd3c 	bl	8004d6c <mira_command>
 80052f4:	4603      	mov	r3, r0
 80052f6:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
	if (status != HAL_OK) {return status;}
 80052fa:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d002      	beq.n	8005308 <mira_init+0x354>
 8005302:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8005306:	e001      	b.n	800530c <mira_init+0x358>


	return status;
 8005308:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a

}
 800530c:	4618      	mov	r0, r3
 800530e:	37a4      	adds	r7, #164	; 0xa4
 8005310:	46bd      	mov	sp, r7
 8005312:	bd90      	pop	{r4, r7, pc}

08005314 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800531a:	4b0f      	ldr	r3, [pc, #60]	; (8005358 <HAL_MspInit+0x44>)
 800531c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800531e:	4a0e      	ldr	r2, [pc, #56]	; (8005358 <HAL_MspInit+0x44>)
 8005320:	f043 0301 	orr.w	r3, r3, #1
 8005324:	6613      	str	r3, [r2, #96]	; 0x60
 8005326:	4b0c      	ldr	r3, [pc, #48]	; (8005358 <HAL_MspInit+0x44>)
 8005328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	607b      	str	r3, [r7, #4]
 8005330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005332:	4b09      	ldr	r3, [pc, #36]	; (8005358 <HAL_MspInit+0x44>)
 8005334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005336:	4a08      	ldr	r2, [pc, #32]	; (8005358 <HAL_MspInit+0x44>)
 8005338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800533c:	6593      	str	r3, [r2, #88]	; 0x58
 800533e:	4b06      	ldr	r3, [pc, #24]	; (8005358 <HAL_MspInit+0x44>)
 8005340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005346:	603b      	str	r3, [r7, #0]
 8005348:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	40021000 	.word	0x40021000

0800535c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b0ae      	sub	sp, #184	; 0xb8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005364:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	605a      	str	r2, [r3, #4]
 800536e:	609a      	str	r2, [r3, #8]
 8005370:	60da      	str	r2, [r3, #12]
 8005372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005374:	f107 0310 	add.w	r3, r7, #16
 8005378:	2294      	movs	r2, #148	; 0x94
 800537a:	2100      	movs	r1, #0
 800537c:	4618      	mov	r0, r3
 800537e:	f014 fbfd 	bl	8019b7c <memset>
  if(hi2c->Instance==I2C1)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a21      	ldr	r2, [pc, #132]	; (800540c <HAL_I2C_MspInit+0xb0>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d13a      	bne.n	8005402 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800538c:	2340      	movs	r3, #64	; 0x40
 800538e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005390:	2300      	movs	r3, #0
 8005392:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005394:	f107 0310 	add.w	r3, r7, #16
 8005398:	4618      	mov	r0, r3
 800539a:	f006 fb43 	bl	800ba24 <HAL_RCCEx_PeriphCLKConfig>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80053a4:	f7ff fbf6 	bl	8004b94 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053a8:	4b19      	ldr	r3, [pc, #100]	; (8005410 <HAL_I2C_MspInit+0xb4>)
 80053aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ac:	4a18      	ldr	r2, [pc, #96]	; (8005410 <HAL_I2C_MspInit+0xb4>)
 80053ae:	f043 0302 	orr.w	r3, r3, #2
 80053b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053b4:	4b16      	ldr	r3, [pc, #88]	; (8005410 <HAL_I2C_MspInit+0xb4>)
 80053b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80053c0:	23c0      	movs	r3, #192	; 0xc0
 80053c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80053c6:	2312      	movs	r3, #18
 80053c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053cc:	2300      	movs	r3, #0
 80053ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053d2:	2303      	movs	r3, #3
 80053d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80053d8:	2304      	movs	r3, #4
 80053da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80053e2:	4619      	mov	r1, r3
 80053e4:	480b      	ldr	r0, [pc, #44]	; (8005414 <HAL_I2C_MspInit+0xb8>)
 80053e6:	f002 fcc9 	bl	8007d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80053ea:	4b09      	ldr	r3, [pc, #36]	; (8005410 <HAL_I2C_MspInit+0xb4>)
 80053ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ee:	4a08      	ldr	r2, [pc, #32]	; (8005410 <HAL_I2C_MspInit+0xb4>)
 80053f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053f4:	6593      	str	r3, [r2, #88]	; 0x58
 80053f6:	4b06      	ldr	r3, [pc, #24]	; (8005410 <HAL_I2C_MspInit+0xb4>)
 80053f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053fe:	60bb      	str	r3, [r7, #8]
 8005400:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005402:	bf00      	nop
 8005404:	37b8      	adds	r7, #184	; 0xb8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	40005400 	.word	0x40005400
 8005410:	40021000 	.word	0x40021000
 8005414:	48000400 	.word	0x48000400

08005418 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a0a      	ldr	r2, [pc, #40]	; (8005450 <HAL_I2C_MspDeInit+0x38>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d10d      	bne.n	8005446 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800542a:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <HAL_I2C_MspDeInit+0x3c>)
 800542c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542e:	4a09      	ldr	r2, [pc, #36]	; (8005454 <HAL_I2C_MspDeInit+0x3c>)
 8005430:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005434:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8005436:	2140      	movs	r1, #64	; 0x40
 8005438:	4807      	ldr	r0, [pc, #28]	; (8005458 <HAL_I2C_MspDeInit+0x40>)
 800543a:	f002 fe31 	bl	80080a0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800543e:	2180      	movs	r1, #128	; 0x80
 8005440:	4805      	ldr	r0, [pc, #20]	; (8005458 <HAL_I2C_MspDeInit+0x40>)
 8005442:	f002 fe2d 	bl	80080a0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8005446:	bf00      	nop
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	40005400 	.word	0x40005400
 8005454:	40021000 	.word	0x40021000
 8005458:	48000400 	.word	0x48000400

0800545c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b0b0      	sub	sp, #192	; 0xc0
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005464:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	605a      	str	r2, [r3, #4]
 800546e:	609a      	str	r2, [r3, #8]
 8005470:	60da      	str	r2, [r3, #12]
 8005472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005474:	f107 0318 	add.w	r3, r7, #24
 8005478:	2294      	movs	r2, #148	; 0x94
 800547a:	2100      	movs	r1, #0
 800547c:	4618      	mov	r0, r3
 800547e:	f014 fb7d 	bl	8019b7c <memset>
  if(hsd->Instance==SDMMC1)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a37      	ldr	r2, [pc, #220]	; (8005564 <HAL_SD_MspInit+0x108>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d166      	bne.n	800555a <HAL_SD_MspInit+0xfe>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 800548c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005490:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_HSI48;
 8005492:	2300      	movs	r3, #0
 8005494:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005498:	f107 0318 	add.w	r3, r7, #24
 800549c:	4618      	mov	r0, r3
 800549e:	f006 fac1 	bl	800ba24 <HAL_RCCEx_PeriphCLKConfig>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 80054a8:	f7ff fb74 	bl	8004b94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80054ac:	4b2e      	ldr	r3, [pc, #184]	; (8005568 <HAL_SD_MspInit+0x10c>)
 80054ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054b0:	4a2d      	ldr	r2, [pc, #180]	; (8005568 <HAL_SD_MspInit+0x10c>)
 80054b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80054b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054b8:	4b2b      	ldr	r3, [pc, #172]	; (8005568 <HAL_SD_MspInit+0x10c>)
 80054ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054c0:	617b      	str	r3, [r7, #20]
 80054c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054c4:	4b28      	ldr	r3, [pc, #160]	; (8005568 <HAL_SD_MspInit+0x10c>)
 80054c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c8:	4a27      	ldr	r2, [pc, #156]	; (8005568 <HAL_SD_MspInit+0x10c>)
 80054ca:	f043 0304 	orr.w	r3, r3, #4
 80054ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054d0:	4b25      	ldr	r3, [pc, #148]	; (8005568 <HAL_SD_MspInit+0x10c>)
 80054d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	613b      	str	r3, [r7, #16]
 80054da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80054dc:	4b22      	ldr	r3, [pc, #136]	; (8005568 <HAL_SD_MspInit+0x10c>)
 80054de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054e0:	4a21      	ldr	r2, [pc, #132]	; (8005568 <HAL_SD_MspInit+0x10c>)
 80054e2:	f043 0308 	orr.w	r3, r3, #8
 80054e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054e8:	4b1f      	ldr	r3, [pc, #124]	; (8005568 <HAL_SD_MspInit+0x10c>)
 80054ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ec:	f003 0308 	and.w	r3, r3, #8
 80054f0:	60fb      	str	r3, [r7, #12]
 80054f2:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80054f4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80054f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054fc:	2302      	movs	r3, #2
 80054fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005502:	2300      	movs	r3, #0
 8005504:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005508:	2303      	movs	r3, #3
 800550a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800550e:	230c      	movs	r3, #12
 8005510:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005514:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005518:	4619      	mov	r1, r3
 800551a:	4814      	ldr	r0, [pc, #80]	; (800556c <HAL_SD_MspInit+0x110>)
 800551c:	f002 fc2e 	bl	8007d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005520:	2304      	movs	r3, #4
 8005522:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005526:	2302      	movs	r3, #2
 8005528:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800552c:	2300      	movs	r3, #0
 800552e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005532:	2303      	movs	r3, #3
 8005534:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8005538:	230c      	movs	r3, #12
 800553a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800553e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005542:	4619      	mov	r1, r3
 8005544:	480a      	ldr	r0, [pc, #40]	; (8005570 <HAL_SD_MspInit+0x114>)
 8005546:	f002 fc19 	bl	8007d7c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800554a:	2200      	movs	r2, #0
 800554c:	2100      	movs	r1, #0
 800554e:	2031      	movs	r0, #49	; 0x31
 8005550:	f002 f8af 	bl	80076b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8005554:	2031      	movs	r0, #49	; 0x31
 8005556:	f002 f8c8 	bl	80076ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800555a:	bf00      	nop
 800555c:	37c0      	adds	r7, #192	; 0xc0
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	50062400 	.word	0x50062400
 8005568:	40021000 	.word	0x40021000
 800556c:	48000800 	.word	0x48000800
 8005570:	48000c00 	.word	0x48000c00

08005574 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b08a      	sub	sp, #40	; 0x28
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800557c:	f107 0314 	add.w	r3, r7, #20
 8005580:	2200      	movs	r2, #0
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	605a      	str	r2, [r3, #4]
 8005586:	609a      	str	r2, [r3, #8]
 8005588:	60da      	str	r2, [r3, #12]
 800558a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a17      	ldr	r2, [pc, #92]	; (80055f0 <HAL_SPI_MspInit+0x7c>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d128      	bne.n	80055e8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005596:	4b17      	ldr	r3, [pc, #92]	; (80055f4 <HAL_SPI_MspInit+0x80>)
 8005598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800559a:	4a16      	ldr	r2, [pc, #88]	; (80055f4 <HAL_SPI_MspInit+0x80>)
 800559c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80055a0:	6613      	str	r3, [r2, #96]	; 0x60
 80055a2:	4b14      	ldr	r3, [pc, #80]	; (80055f4 <HAL_SPI_MspInit+0x80>)
 80055a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055aa:	613b      	str	r3, [r7, #16]
 80055ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055ae:	4b11      	ldr	r3, [pc, #68]	; (80055f4 <HAL_SPI_MspInit+0x80>)
 80055b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055b2:	4a10      	ldr	r2, [pc, #64]	; (80055f4 <HAL_SPI_MspInit+0x80>)
 80055b4:	f043 0301 	orr.w	r3, r3, #1
 80055b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055ba:	4b0e      	ldr	r3, [pc, #56]	; (80055f4 <HAL_SPI_MspInit+0x80>)
 80055bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	60fb      	str	r3, [r7, #12]
 80055c4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|LORA0_SCK_Pin|LORA0_MISO_Pin|LORA0_MOSI_Pin;
 80055c6:	23f0      	movs	r3, #240	; 0xf0
 80055c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ca:	2302      	movs	r3, #2
 80055cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ce:	2300      	movs	r3, #0
 80055d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055d2:	2303      	movs	r3, #3
 80055d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80055d6:	2305      	movs	r3, #5
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055da:	f107 0314 	add.w	r3, r7, #20
 80055de:	4619      	mov	r1, r3
 80055e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80055e4:	f002 fbca 	bl	8007d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80055e8:	bf00      	nop
 80055ea:	3728      	adds	r7, #40	; 0x28
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	40013000 	.word	0x40013000
 80055f4:	40021000 	.word	0x40021000

080055f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a0a      	ldr	r2, [pc, #40]	; (8005630 <HAL_TIM_Base_MspInit+0x38>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d10b      	bne.n	8005622 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800560a:	4b0a      	ldr	r3, [pc, #40]	; (8005634 <HAL_TIM_Base_MspInit+0x3c>)
 800560c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800560e:	4a09      	ldr	r2, [pc, #36]	; (8005634 <HAL_TIM_Base_MspInit+0x3c>)
 8005610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005614:	6613      	str	r3, [r2, #96]	; 0x60
 8005616:	4b07      	ldr	r3, [pc, #28]	; (8005634 <HAL_TIM_Base_MspInit+0x3c>)
 8005618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800561a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8005622:	bf00      	nop
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	40014800 	.word	0x40014800
 8005634:	40021000 	.word	0x40021000

08005638 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b0b0      	sub	sp, #192	; 0xc0
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005640:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005644:	2200      	movs	r2, #0
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	605a      	str	r2, [r3, #4]
 800564a:	609a      	str	r2, [r3, #8]
 800564c:	60da      	str	r2, [r3, #12]
 800564e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005650:	f107 0318 	add.w	r3, r7, #24
 8005654:	2294      	movs	r2, #148	; 0x94
 8005656:	2100      	movs	r1, #0
 8005658:	4618      	mov	r0, r3
 800565a:	f014 fa8f 	bl	8019b7c <memset>
  if(huart->Instance==USART1)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a6d      	ldr	r2, [pc, #436]	; (8005818 <HAL_UART_MspInit+0x1e0>)
 8005664:	4293      	cmp	r3, r2
 8005666:	f040 8091 	bne.w	800578c <HAL_UART_MspInit+0x154>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800566a:	2301      	movs	r3, #1
 800566c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800566e:	2300      	movs	r3, #0
 8005670:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005672:	f107 0318 	add.w	r3, r7, #24
 8005676:	4618      	mov	r0, r3
 8005678:	f006 f9d4 	bl	800ba24 <HAL_RCCEx_PeriphCLKConfig>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005682:	f7ff fa87 	bl	8004b94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005686:	4b65      	ldr	r3, [pc, #404]	; (800581c <HAL_UART_MspInit+0x1e4>)
 8005688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800568a:	4a64      	ldr	r2, [pc, #400]	; (800581c <HAL_UART_MspInit+0x1e4>)
 800568c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005690:	6613      	str	r3, [r2, #96]	; 0x60
 8005692:	4b62      	ldr	r3, [pc, #392]	; (800581c <HAL_UART_MspInit+0x1e4>)
 8005694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800569a:	617b      	str	r3, [r7, #20]
 800569c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800569e:	4b5f      	ldr	r3, [pc, #380]	; (800581c <HAL_UART_MspInit+0x1e4>)
 80056a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056a2:	4a5e      	ldr	r2, [pc, #376]	; (800581c <HAL_UART_MspInit+0x1e4>)
 80056a4:	f043 0301 	orr.w	r3, r3, #1
 80056a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056aa:	4b5c      	ldr	r3, [pc, #368]	; (800581c <HAL_UART_MspInit+0x1e4>)
 80056ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	613b      	str	r3, [r7, #16]
 80056b4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 80056b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80056ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056be:	2302      	movs	r3, #2
 80056c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056c4:	2300      	movs	r3, #0
 80056c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056ca:	2303      	movs	r3, #3
 80056cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80056d0:	2307      	movs	r3, #7
 80056d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056d6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80056da:	4619      	mov	r1, r3
 80056dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80056e0:	f002 fb4c 	bl	8007d7c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80056e4:	4b4e      	ldr	r3, [pc, #312]	; (8005820 <HAL_UART_MspInit+0x1e8>)
 80056e6:	4a4f      	ldr	r2, [pc, #316]	; (8005824 <HAL_UART_MspInit+0x1ec>)
 80056e8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80056ea:	4b4d      	ldr	r3, [pc, #308]	; (8005820 <HAL_UART_MspInit+0x1e8>)
 80056ec:	2218      	movs	r2, #24
 80056ee:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80056f0:	4b4b      	ldr	r3, [pc, #300]	; (8005820 <HAL_UART_MspInit+0x1e8>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056f6:	4b4a      	ldr	r3, [pc, #296]	; (8005820 <HAL_UART_MspInit+0x1e8>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80056fc:	4b48      	ldr	r3, [pc, #288]	; (8005820 <HAL_UART_MspInit+0x1e8>)
 80056fe:	2280      	movs	r2, #128	; 0x80
 8005700:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005702:	4b47      	ldr	r3, [pc, #284]	; (8005820 <HAL_UART_MspInit+0x1e8>)
 8005704:	2200      	movs	r2, #0
 8005706:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005708:	4b45      	ldr	r3, [pc, #276]	; (8005820 <HAL_UART_MspInit+0x1e8>)
 800570a:	2200      	movs	r2, #0
 800570c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800570e:	4b44      	ldr	r3, [pc, #272]	; (8005820 <HAL_UART_MspInit+0x1e8>)
 8005710:	2200      	movs	r2, #0
 8005712:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005714:	4b42      	ldr	r3, [pc, #264]	; (8005820 <HAL_UART_MspInit+0x1e8>)
 8005716:	2200      	movs	r2, #0
 8005718:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800571a:	4841      	ldr	r0, [pc, #260]	; (8005820 <HAL_UART_MspInit+0x1e8>)
 800571c:	f002 f800 	bl	8007720 <HAL_DMA_Init>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8005726:	f7ff fa35 	bl	8004b94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a3c      	ldr	r2, [pc, #240]	; (8005820 <HAL_UART_MspInit+0x1e8>)
 800572e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8005732:	4a3b      	ldr	r2, [pc, #236]	; (8005820 <HAL_UART_MspInit+0x1e8>)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8005738:	4b3b      	ldr	r3, [pc, #236]	; (8005828 <HAL_UART_MspInit+0x1f0>)
 800573a:	4a3c      	ldr	r2, [pc, #240]	; (800582c <HAL_UART_MspInit+0x1f4>)
 800573c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800573e:	4b3a      	ldr	r3, [pc, #232]	; (8005828 <HAL_UART_MspInit+0x1f0>)
 8005740:	2219      	movs	r2, #25
 8005742:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005744:	4b38      	ldr	r3, [pc, #224]	; (8005828 <HAL_UART_MspInit+0x1f0>)
 8005746:	2210      	movs	r2, #16
 8005748:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800574a:	4b37      	ldr	r3, [pc, #220]	; (8005828 <HAL_UART_MspInit+0x1f0>)
 800574c:	2200      	movs	r2, #0
 800574e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005750:	4b35      	ldr	r3, [pc, #212]	; (8005828 <HAL_UART_MspInit+0x1f0>)
 8005752:	2280      	movs	r2, #128	; 0x80
 8005754:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005756:	4b34      	ldr	r3, [pc, #208]	; (8005828 <HAL_UART_MspInit+0x1f0>)
 8005758:	2200      	movs	r2, #0
 800575a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800575c:	4b32      	ldr	r3, [pc, #200]	; (8005828 <HAL_UART_MspInit+0x1f0>)
 800575e:	2200      	movs	r2, #0
 8005760:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005762:	4b31      	ldr	r3, [pc, #196]	; (8005828 <HAL_UART_MspInit+0x1f0>)
 8005764:	2200      	movs	r2, #0
 8005766:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005768:	4b2f      	ldr	r3, [pc, #188]	; (8005828 <HAL_UART_MspInit+0x1f0>)
 800576a:	2200      	movs	r2, #0
 800576c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800576e:	482e      	ldr	r0, [pc, #184]	; (8005828 <HAL_UART_MspInit+0x1f0>)
 8005770:	f001 ffd6 	bl	8007720 <HAL_DMA_Init>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <HAL_UART_MspInit+0x146>
    {
      Error_Handler();
 800577a:	f7ff fa0b 	bl	8004b94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a29      	ldr	r2, [pc, #164]	; (8005828 <HAL_UART_MspInit+0x1f0>)
 8005782:	67da      	str	r2, [r3, #124]	; 0x7c
 8005784:	4a28      	ldr	r2, [pc, #160]	; (8005828 <HAL_UART_MspInit+0x1f0>)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800578a:	e040      	b.n	800580e <HAL_UART_MspInit+0x1d6>
  else if(huart->Instance==USART2)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a27      	ldr	r2, [pc, #156]	; (8005830 <HAL_UART_MspInit+0x1f8>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d13b      	bne.n	800580e <HAL_UART_MspInit+0x1d6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005796:	2302      	movs	r3, #2
 8005798:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800579a:	2300      	movs	r3, #0
 800579c:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800579e:	f107 0318 	add.w	r3, r7, #24
 80057a2:	4618      	mov	r0, r3
 80057a4:	f006 f93e 	bl	800ba24 <HAL_RCCEx_PeriphCLKConfig>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d001      	beq.n	80057b2 <HAL_UART_MspInit+0x17a>
      Error_Handler();
 80057ae:	f7ff f9f1 	bl	8004b94 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80057b2:	4b1a      	ldr	r3, [pc, #104]	; (800581c <HAL_UART_MspInit+0x1e4>)
 80057b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b6:	4a19      	ldr	r2, [pc, #100]	; (800581c <HAL_UART_MspInit+0x1e4>)
 80057b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057bc:	6593      	str	r3, [r2, #88]	; 0x58
 80057be:	4b17      	ldr	r3, [pc, #92]	; (800581c <HAL_UART_MspInit+0x1e4>)
 80057c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057ca:	4b14      	ldr	r3, [pc, #80]	; (800581c <HAL_UART_MspInit+0x1e4>)
 80057cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ce:	4a13      	ldr	r2, [pc, #76]	; (800581c <HAL_UART_MspInit+0x1e4>)
 80057d0:	f043 0301 	orr.w	r3, r3, #1
 80057d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80057d6:	4b11      	ldr	r3, [pc, #68]	; (800581c <HAL_UART_MspInit+0x1e4>)
 80057d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	60bb      	str	r3, [r7, #8]
 80057e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 80057e2:	230c      	movs	r3, #12
 80057e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057e8:	2302      	movs	r3, #2
 80057ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ee:	2300      	movs	r3, #0
 80057f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057f4:	2303      	movs	r3, #3
 80057f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80057fa:	2307      	movs	r3, #7
 80057fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005800:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005804:	4619      	mov	r1, r3
 8005806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800580a:	f002 fab7 	bl	8007d7c <HAL_GPIO_Init>
}
 800580e:	bf00      	nop
 8005810:	37c0      	adds	r7, #192	; 0xc0
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	40013800 	.word	0x40013800
 800581c:	40021000 	.word	0x40021000
 8005820:	200007f4 	.word	0x200007f4
 8005824:	40020008 	.word	0x40020008
 8005828:	20000854 	.word	0x20000854
 800582c:	4002001c 	.word	0x4002001c
 8005830:	40004400 	.word	0x40004400

08005834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8005838:	f006 f818 	bl	800b86c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 800583c:	e7fe      	b.n	800583c <NMI_Handler+0x8>

0800583e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800583e:	b480      	push	{r7}
 8005840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005842:	e7fe      	b.n	8005842 <HardFault_Handler+0x4>

08005844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005844:	b480      	push	{r7}
 8005846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005848:	e7fe      	b.n	8005848 <MemManage_Handler+0x4>

0800584a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800584a:	b480      	push	{r7}
 800584c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800584e:	e7fe      	b.n	800584e <BusFault_Handler+0x4>

08005850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005854:	e7fe      	b.n	8005854 <UsageFault_Handler+0x4>

08005856 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005856:	b480      	push	{r7}
 8005858:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800585a:	bf00      	nop
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005864:	b480      	push	{r7}
 8005866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005868:	bf00      	nop
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005872:	b480      	push	{r7}
 8005874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005876:	bf00      	nop
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005884:	f001 fdf6 	bl	8007474 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005888:	bf00      	nop
 800588a:	bd80      	pop	{r7, pc}

0800588c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005890:	4802      	ldr	r0, [pc, #8]	; (800589c <DMA1_Channel1_IRQHandler+0x10>)
 8005892:	f002 f923 	bl	8007adc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005896:	bf00      	nop
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	200007f4 	.word	0x200007f4

080058a0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80058a4:	4802      	ldr	r0, [pc, #8]	; (80058b0 <DMA1_Channel2_IRQHandler+0x10>)
 80058a6:	f002 f919 	bl	8007adc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80058aa:	bf00      	nop
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	20000854 	.word	0x20000854

080058b4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	if (tick) {tick--;}
 80058b8:	4b14      	ldr	r3, [pc, #80]	; (800590c <TIM1_TRG_COM_TIM17_IRQHandler+0x58>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d006      	beq.n	80058d0 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>
 80058c2:	4b12      	ldr	r3, [pc, #72]	; (800590c <TIM1_TRG_COM_TIM17_IRQHandler+0x58>)
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	4b0f      	ldr	r3, [pc, #60]	; (800590c <TIM1_TRG_COM_TIM17_IRQHandler+0x58>)
 80058ce:	701a      	strb	r2, [r3, #0]
	if (tickGPS) {tickGPS--;}
 80058d0:	4b0f      	ldr	r3, [pc, #60]	; (8005910 <TIM1_TRG_COM_TIM17_IRQHandler+0x5c>)
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d006      	beq.n	80058e8 <TIM1_TRG_COM_TIM17_IRQHandler+0x34>
 80058da:	4b0d      	ldr	r3, [pc, #52]	; (8005910 <TIM1_TRG_COM_TIM17_IRQHandler+0x5c>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	4b0a      	ldr	r3, [pc, #40]	; (8005910 <TIM1_TRG_COM_TIM17_IRQHandler+0x5c>)
 80058e6:	701a      	strb	r2, [r3, #0]
	if (tickSync) {tickSync--;}
 80058e8:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <TIM1_TRG_COM_TIM17_IRQHandler+0x60>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d006      	beq.n	8005900 <TIM1_TRG_COM_TIM17_IRQHandler+0x4c>
 80058f2:	4b08      	ldr	r3, [pc, #32]	; (8005914 <TIM1_TRG_COM_TIM17_IRQHandler+0x60>)
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	3b01      	subs	r3, #1
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	4b05      	ldr	r3, [pc, #20]	; (8005914 <TIM1_TRG_COM_TIM17_IRQHandler+0x60>)
 80058fe:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8005900:	4805      	ldr	r0, [pc, #20]	; (8005918 <TIM1_TRG_COM_TIM17_IRQHandler+0x64>)
 8005902:	f00a fcb6 	bl	8010272 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8005906:	bf00      	nop
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	20000f00 	.word	0x20000f00
 8005910:	20000f01 	.word	0x20000f01
 8005914:	20000f02 	.word	0x20000f02
 8005918:	20000680 	.word	0x20000680

0800591c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	af00      	add	r7, sp, #0
//		if (mira_rxBuffer == mira_rxBuffer1) {mira_rxBuffer = mira_rxBuffer2;}
//		else {mira_rxBuffer = mira_rxBuffer1;}
//		HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
//	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005920:	4802      	ldr	r0, [pc, #8]	; (800592c <USART1_IRQHandler+0x10>)
 8005922:	f00b fb8d 	bl	8011040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005926:	bf00      	nop
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	200006cc 	.word	0x200006cc

08005930 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	char c = huart2.Instance->RDR;
 8005936:	4b22      	ldr	r3, [pc, #136]	; (80059c0 <USART2_IRQHandler+0x90>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800593c:	b29b      	uxth	r3, r3
 800593e:	71fb      	strb	r3, [r7, #7]
	if (gps_rxBufferPos < gps_RXBUFSIZE - 1)
 8005940:	4b20      	ldr	r3, [pc, #128]	; (80059c4 <USART2_IRQHandler+0x94>)
 8005942:	781b      	ldrb	r3, [r3, #0]
	{ gps_rxBuffer[gps_rxBufferPos++] = (uint8_t) c; }
 8005944:	4b20      	ldr	r3, [pc, #128]	; (80059c8 <USART2_IRQHandler+0x98>)
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	4b1e      	ldr	r3, [pc, #120]	; (80059c4 <USART2_IRQHandler+0x94>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	b2db      	uxtb	r3, r3
 800594e:	1c59      	adds	r1, r3, #1
 8005950:	b2c8      	uxtb	r0, r1
 8005952:	491c      	ldr	r1, [pc, #112]	; (80059c4 <USART2_IRQHandler+0x94>)
 8005954:	7008      	strb	r0, [r1, #0]
 8005956:	4413      	add	r3, r2
 8005958:	79fa      	ldrb	r2, [r7, #7]
 800595a:	701a      	strb	r2, [r3, #0]

	if ((c == '\n') && (gps_send_ready))// && (tickGPS == 0))// && (tickGPS == 0)) //(c == '\r') ||
 800595c:	79fb      	ldrb	r3, [r7, #7]
 800595e:	2b0a      	cmp	r3, #10
 8005960:	d126      	bne.n	80059b0 <USART2_IRQHandler+0x80>
 8005962:	4b1a      	ldr	r3, [pc, #104]	; (80059cc <USART2_IRQHandler+0x9c>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d022      	beq.n	80059b0 <USART2_IRQHandler+0x80>
	{
		//tickGPS = 1;
		gps_rxBuffer[gps_rxBufferPos] = 0;
 800596a:	4b17      	ldr	r3, [pc, #92]	; (80059c8 <USART2_IRQHandler+0x98>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a15      	ldr	r2, [pc, #84]	; (80059c4 <USART2_IRQHandler+0x94>)
 8005970:	7812      	ldrb	r2, [r2, #0]
 8005972:	b2d2      	uxtb	r2, r2
 8005974:	4413      	add	r3, r2
 8005976:	2200      	movs	r2, #0
 8005978:	701a      	strb	r2, [r3, #0]
		gps_data_ready |= 1;
 800597a:	4b15      	ldr	r3, [pc, #84]	; (80059d0 <USART2_IRQHandler+0xa0>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f043 0301 	orr.w	r3, r3, #1
 8005982:	4a13      	ldr	r2, [pc, #76]	; (80059d0 <USART2_IRQHandler+0xa0>)
 8005984:	6013      	str	r3, [r2, #0]
		gps_send_ready ^= 1;
 8005986:	4b11      	ldr	r3, [pc, #68]	; (80059cc <USART2_IRQHandler+0x9c>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f083 0301 	eor.w	r3, r3, #1
 800598e:	4a0f      	ldr	r2, [pc, #60]	; (80059cc <USART2_IRQHandler+0x9c>)
 8005990:	6013      	str	r3, [r2, #0]
		gps_rxBufferPos = 0;
 8005992:	4b0c      	ldr	r3, [pc, #48]	; (80059c4 <USART2_IRQHandler+0x94>)
 8005994:	2200      	movs	r2, #0
 8005996:	701a      	strb	r2, [r3, #0]
		if (gps_rxBuffer == gps_rxBuffer1) {gps_rxBuffer = gps_rxBuffer2;}
 8005998:	4b0b      	ldr	r3, [pc, #44]	; (80059c8 <USART2_IRQHandler+0x98>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a0d      	ldr	r2, [pc, #52]	; (80059d4 <USART2_IRQHandler+0xa4>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d103      	bne.n	80059aa <USART2_IRQHandler+0x7a>
 80059a2:	4b09      	ldr	r3, [pc, #36]	; (80059c8 <USART2_IRQHandler+0x98>)
 80059a4:	4a0c      	ldr	r2, [pc, #48]	; (80059d8 <USART2_IRQHandler+0xa8>)
 80059a6:	601a      	str	r2, [r3, #0]
 80059a8:	e002      	b.n	80059b0 <USART2_IRQHandler+0x80>
		else {gps_rxBuffer = gps_rxBuffer1;}
 80059aa:	4b07      	ldr	r3, [pc, #28]	; (80059c8 <USART2_IRQHandler+0x98>)
 80059ac:	4a09      	ldr	r2, [pc, #36]	; (80059d4 <USART2_IRQHandler+0xa4>)
 80059ae:	601a      	str	r2, [r3, #0]

	//HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
	//rchar = huart2.Instance->RDR;

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80059b0:	4803      	ldr	r0, [pc, #12]	; (80059c0 <USART2_IRQHandler+0x90>)
 80059b2:	f00b fb45 	bl	8011040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	//ATOMIC_SET_BIT(huart2.Instance->CR3, USART_CR3_EIE);
  /* USER CODE END USART2_IRQn 1 */
}
 80059b6:	bf00      	nop
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	20000760 	.word	0x20000760
 80059c4:	20000ef8 	.word	0x20000ef8
 80059c8:	20000ef4 	.word	0x20000ef4
 80059cc:	20000000 	.word	0x20000000
 80059d0:	20000efc 	.word	0x20000efc
 80059d4:	200008b4 	.word	0x200008b4
 80059d8:	20000bd4 	.word	0x20000bd4

080059dc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80059e0:	4802      	ldr	r0, [pc, #8]	; (80059ec <SDMMC1_IRQHandler+0x10>)
 80059e2:	f007 ffe3 	bl	800d9ac <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80059e6:	bf00      	nop
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	2000059c 	.word	0x2000059c

080059f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80059f4:	4802      	ldr	r0, [pc, #8]	; (8005a00 <OTG_FS_IRQHandler+0x10>)
 80059f6:	f003 ffdd 	bl	80099b4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80059fa:	bf00      	nop
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	20002890 	.word	0x20002890

08005a04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005a04:	b480      	push	{r7}
 8005a06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005a08:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <SystemInit+0x20>)
 8005a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0e:	4a05      	ldr	r2, [pc, #20]	; (8005a24 <SystemInit+0x20>)
 8005a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005a18:	bf00      	nop
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	e000ed00 	.word	0xe000ed00

08005a28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005a28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005a60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005a2c:	f7ff ffea 	bl	8005a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005a30:	480c      	ldr	r0, [pc, #48]	; (8005a64 <LoopForever+0x6>)
  ldr r1, =_edata
 8005a32:	490d      	ldr	r1, [pc, #52]	; (8005a68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005a34:	4a0d      	ldr	r2, [pc, #52]	; (8005a6c <LoopForever+0xe>)
  movs r3, #0
 8005a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a38:	e002      	b.n	8005a40 <LoopCopyDataInit>

08005a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a3e:	3304      	adds	r3, #4

08005a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a44:	d3f9      	bcc.n	8005a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a46:	4a0a      	ldr	r2, [pc, #40]	; (8005a70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005a48:	4c0a      	ldr	r4, [pc, #40]	; (8005a74 <LoopForever+0x16>)
  movs r3, #0
 8005a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a4c:	e001      	b.n	8005a52 <LoopFillZerobss>

08005a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a50:	3204      	adds	r2, #4

08005a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a54:	d3fb      	bcc.n	8005a4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005a56:	f014 f84f 	bl	8019af8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005a5a:	f7fd fd25 	bl	80034a8 <main>

08005a5e <LoopForever>:

LoopForever:
    b LoopForever
 8005a5e:	e7fe      	b.n	8005a5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005a60:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8005a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005a68:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8005a6c:	0801d648 	.word	0x0801d648
  ldr r2, =_sbss
 8005a70:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8005a74:	20002fd0 	.word	0x20002fd0

08005a78 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005a78:	e7fe      	b.n	8005a78 <ADC1_IRQHandler>
	...

08005a7c <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d103      	bne.n	8005a98 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8005a90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a94:	60fb      	str	r3, [r7, #12]
 8005a96:	e051      	b.n	8005b3c <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	689a      	ldr	r2, [r3, #8]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	7b1a      	ldrb	r2, [r3, #12]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	691a      	ldr	r2, [r3, #16]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	695a      	ldr	r2, [r3, #20]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	699a      	ldr	r2, [r3, #24]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a1d      	ldr	r2, [pc, #116]	; (8005b48 <LSM6DSO_RegisterBusIO+0xcc>)
 8005ad4:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a1c      	ldr	r2, [pc, #112]	; (8005b4c <LSM6DSO_RegisterBusIO+0xd0>)
 8005ada:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	69da      	ldr	r2, [r3, #28]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d103      	bne.n	8005afa <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8005af2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	e020      	b.n	8005b3c <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4798      	blx	r3
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8005b06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	e016      	b.n	8005b3c <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d112      	bne.n	8005b3c <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10d      	bne.n	8005b3c <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8005b20:	230c      	movs	r3, #12
 8005b22:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8005b24:	7afb      	ldrb	r3, [r7, #11]
 8005b26:	461a      	mov	r2, r3
 8005b28:	2112      	movs	r1, #18
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fc98 	bl	8006460 <LSM6DSO_Write_Reg>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8005b36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b3a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	08006905 	.word	0x08006905
 8005b4c:	0800693b 	.word	0x0800693b

08005b50 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	3320      	adds	r3, #32
 8005b5c:	2180      	movs	r1, #128	; 0x80
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f001 fb5e 	bl	8007220 <lsm6dso_i3c_disable_set>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d002      	beq.n	8005b70 <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 8005b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b6e:	e060      	b.n	8005c32 <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3320      	adds	r3, #32
 8005b74:	2101      	movs	r1, #1
 8005b76:	4618      	mov	r0, r3
 8005b78:	f001 fb2c 	bl	80071d4 <lsm6dso_auto_increment_set>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d002      	beq.n	8005b88 <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 8005b82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b86:	e054      	b.n	8005c32 <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3320      	adds	r3, #32
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f001 fa3e 	bl	8007010 <lsm6dso_block_data_update_set>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d002      	beq.n	8005ba0 <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 8005b9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b9e:	e048      	b.n	8005c32 <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	3320      	adds	r3, #32
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f001 fb80 	bl	80072ac <lsm6dso_fifo_mode_set>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 8005bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bb6:	e03c      	b.n	8005c32 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2204      	movs	r2, #4
 8005bbc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	3320      	adds	r3, #32
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 ff60 	bl	8006a8c <lsm6dso_xl_data_rate_set>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d002      	beq.n	8005bd8 <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 8005bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bd6:	e02c      	b.n	8005c32 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	3320      	adds	r3, #32
 8005bdc:	2100      	movs	r1, #0
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 fef6 	bl	80069d0 <lsm6dso_xl_full_scale_set>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d002      	beq.n	8005bf0 <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 8005bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bee:	e020      	b.n	8005c32 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2204      	movs	r2, #4
 8005bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	3320      	adds	r3, #32
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f001 f8a8 	bl	8006d54 <lsm6dso_gy_data_rate_set>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d002      	beq.n	8005c10 <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 8005c0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c0e:	e010      	b.n	8005c32 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	3320      	adds	r3, #32
 8005c14:	2106      	movs	r1, #6
 8005c16:	4618      	mov	r0, r3
 8005c18:	f001 f834 	bl	8006c84 <lsm6dso_gy_full_scale_set>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d002      	beq.n	8005c28 <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 8005c22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c26:	e004      	b.n	8005c32 <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b082      	sub	sp, #8
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d101      	bne.n	8005c50 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	e014      	b.n	8005c7a <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f103 0220 	add.w	r2, r3, #32
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4610      	mov	r0, r2
 8005c60:	f000 ff14 	bl	8006a8c <lsm6dso_xl_data_rate_set>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8005c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c6e:	e004      	b.n	8005c7a <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
	...

08005c84 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	3320      	adds	r3, #32
 8005c96:	f107 020b 	add.w	r2, r7, #11
 8005c9a:	4611      	mov	r1, r2
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 febd 	bl	8006a1c <lsm6dso_xl_full_scale_get>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d002      	beq.n	8005cae <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8005ca8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cac:	e023      	b.n	8005cf6 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8005cae:	7afb      	ldrb	r3, [r7, #11]
 8005cb0:	2b03      	cmp	r3, #3
 8005cb2:	d81b      	bhi.n	8005cec <LSM6DSO_ACC_GetSensitivity+0x68>
 8005cb4:	a201      	add	r2, pc, #4	; (adr r2, 8005cbc <LSM6DSO_ACC_GetSensitivity+0x38>)
 8005cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cba:	bf00      	nop
 8005cbc:	08005ccd 	.word	0x08005ccd
 8005cc0:	08005ce5 	.word	0x08005ce5
 8005cc4:	08005cd5 	.word	0x08005cd5
 8005cc8:	08005cdd 	.word	0x08005cdd
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	4a0c      	ldr	r2, [pc, #48]	; (8005d00 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8005cd0:	601a      	str	r2, [r3, #0]
      break;
 8005cd2:	e00f      	b.n	8005cf4 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	4a0b      	ldr	r2, [pc, #44]	; (8005d04 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8005cd8:	601a      	str	r2, [r3, #0]
      break;
 8005cda:	e00b      	b.n	8005cf4 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	4a0a      	ldr	r2, [pc, #40]	; (8005d08 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8005ce0:	601a      	str	r2, [r3, #0]
      break;
 8005ce2:	e007      	b.n	8005cf4 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	4a09      	ldr	r2, [pc, #36]	; (8005d0c <LSM6DSO_ACC_GetSensitivity+0x88>)
 8005ce8:	601a      	str	r2, [r3, #0]
      break;
 8005cea:	e003      	b.n	8005cf4 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8005cec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cf0:	60fb      	str	r3, [r7, #12]
      break;
 8005cf2:	bf00      	nop
  }

  return ret;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	3d79db23 	.word	0x3d79db23
 8005d04:	3df9db23 	.word	0x3df9db23
 8005d08:	3e79db23 	.word	0x3e79db23
 8005d0c:	3ef9db23 	.word	0x3ef9db23

08005d10 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	ed97 0a00 	vldr	s0, [r7]
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f806 	bl	8005d34 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8005d28:	4603      	mov	r3, r0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
	...

08005d34 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b08c      	sub	sp, #48	; 0x30
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	ed87 0a02 	vstr	s0, [r7, #8]
 8005d40:	460b      	mov	r3, r1
 8005d42:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8005d44:	2300      	movs	r3, #0
 8005d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 8005d4c:	79fb      	ldrb	r3, [r7, #7]
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	f000 80ea 	beq.w	8005f28 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	f300 8163 	bgt.w	8006020 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d074      	beq.n	8005e4c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 8005d62:	e15d      	b.n	8006020 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f103 0020 	add.w	r0, r3, #32
 8005d6a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005d6e:	2301      	movs	r3, #1
 8005d70:	2114      	movs	r1, #20
 8005d72:	f000 fdfd 	bl	8006970 <lsm6dso_read_reg>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8005d7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d80:	e16c      	b.n	800605c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8005d82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005d86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d025      	beq.n	8005ddc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d10b      	bne.n	8005db2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	3320      	adds	r3, #32
 8005d9e:	2100      	movs	r1, #0
 8005da0:	4618      	mov	r0, r3
 8005da2:	f000 fe73 	bl	8006a8c <lsm6dso_xl_data_rate_set>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d002      	beq.n	8005db2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8005dac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005db0:	e154      	b.n	800605c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8005db2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005db6:	f36f 13c7 	bfc	r3, #7, #1
 8005dba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f103 0020 	add.w	r0, r3, #32
 8005dc4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005dc8:	2301      	movs	r3, #1
 8005dca:	2114      	movs	r1, #20
 8005dcc:	f000 fde8 	bl	80069a0 <lsm6dso_write_reg>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d002      	beq.n	8005ddc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 8005dd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dda:	e13f      	b.n	800605c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f103 0020 	add.w	r0, r3, #32
 8005de2:	f107 0220 	add.w	r2, r7, #32
 8005de6:	2301      	movs	r3, #1
 8005de8:	2115      	movs	r1, #21
 8005dea:	f000 fdc1 	bl	8006970 <lsm6dso_read_reg>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d002      	beq.n	8005dfa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 8005df4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005df8:	e130      	b.n	800605c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8005dfa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005dfe:	f003 0310 	and.w	r3, r3, #16
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d014      	beq.n	8005e32 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8005e08:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e0c:	f36f 1304 	bfc	r3, #4, #1
 8005e10:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f103 0020 	add.w	r0, r3, #32
 8005e1a:	f107 0220 	add.w	r2, r7, #32
 8005e1e:	2301      	movs	r3, #1
 8005e20:	2115      	movs	r1, #21
 8005e22:	f000 fdbd 	bl	80069a0 <lsm6dso_write_reg>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d002      	beq.n	8005e32 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8005e2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e30:	e114      	b.n	800605c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8005e32:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005e36:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005e3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e42:	d400      	bmi.n	8005e46 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8005e44:	e0f0      	b.n	8006028 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8005e46:	4b87      	ldr	r3, [pc, #540]	; (8006064 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8005e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e4a:	e0ed      	b.n	8006028 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f103 0020 	add.w	r0, r3, #32
 8005e52:	f107 021c 	add.w	r2, r7, #28
 8005e56:	2301      	movs	r3, #1
 8005e58:	2114      	movs	r1, #20
 8005e5a:	f000 fd89 	bl	8006970 <lsm6dso_read_reg>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d002      	beq.n	8005e6a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8005e64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e68:	e0f8      	b.n	800605c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8005e6a:	7f3b      	ldrb	r3, [r7, #28]
 8005e6c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d023      	beq.n	8005ebe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d10b      	bne.n	8005e98 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	3320      	adds	r3, #32
 8005e84:	2100      	movs	r1, #0
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 fe00 	bl	8006a8c <lsm6dso_xl_data_rate_set>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d002      	beq.n	8005e98 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 8005e92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e96:	e0e1      	b.n	800605c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8005e98:	7f3b      	ldrb	r3, [r7, #28]
 8005e9a:	f36f 13c7 	bfc	r3, #7, #1
 8005e9e:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f103 0020 	add.w	r0, r3, #32
 8005ea6:	f107 021c 	add.w	r2, r7, #28
 8005eaa:	2301      	movs	r3, #1
 8005eac:	2114      	movs	r1, #20
 8005eae:	f000 fd77 	bl	80069a0 <lsm6dso_write_reg>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d002      	beq.n	8005ebe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8005eb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ebc:	e0ce      	b.n	800605c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f103 0020 	add.w	r0, r3, #32
 8005ec4:	f107 0218 	add.w	r2, r7, #24
 8005ec8:	2301      	movs	r3, #1
 8005eca:	2115      	movs	r1, #21
 8005ecc:	f000 fd50 	bl	8006970 <lsm6dso_read_reg>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 8005ed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005eda:	e0bf      	b.n	800605c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8005edc:	7e3b      	ldrb	r3, [r7, #24]
 8005ede:	f003 0310 	and.w	r3, r3, #16
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d112      	bne.n	8005f0e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8005ee8:	7e3b      	ldrb	r3, [r7, #24]
 8005eea:	f043 0310 	orr.w	r3, r3, #16
 8005eee:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f103 0020 	add.w	r0, r3, #32
 8005ef6:	f107 0218 	add.w	r2, r7, #24
 8005efa:	2301      	movs	r3, #1
 8005efc:	2115      	movs	r1, #21
 8005efe:	f000 fd4f 	bl	80069a0 <lsm6dso_write_reg>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8005f08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f0c:	e0a6      	b.n	800605c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8005f0e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005f12:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8006068 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8005f16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f1e:	dc00      	bgt.n	8005f22 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8005f20:	e082      	b.n	8006028 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8005f22:	4b52      	ldr	r3, [pc, #328]	; (800606c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8005f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f26:	e07f      	b.n	8006028 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f103 0020 	add.w	r0, r3, #32
 8005f2e:	f107 0210 	add.w	r2, r7, #16
 8005f32:	2301      	movs	r3, #1
 8005f34:	2115      	movs	r1, #21
 8005f36:	f000 fd1b 	bl	8006970 <lsm6dso_read_reg>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d002      	beq.n	8005f46 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8005f40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f44:	e08a      	b.n	800605c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8005f46:	7c3b      	ldrb	r3, [r7, #16]
 8005f48:	f003 0310 	and.w	r3, r3, #16
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d012      	beq.n	8005f78 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8005f52:	7c3b      	ldrb	r3, [r7, #16]
 8005f54:	f36f 1304 	bfc	r3, #4, #1
 8005f58:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f103 0020 	add.w	r0, r3, #32
 8005f60:	f107 0210 	add.w	r2, r7, #16
 8005f64:	2301      	movs	r3, #1
 8005f66:	2115      	movs	r1, #21
 8005f68:	f000 fd1a 	bl	80069a0 <lsm6dso_write_reg>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d002      	beq.n	8005f78 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8005f72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f76:	e071      	b.n	800605c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d108      	bne.n	8005f94 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f000 f8ef 	bl	8006166 <LSM6DSO_GYRO_Disable>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d002      	beq.n	8005f94 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8005f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f92:	e063      	b.n	800605c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f103 0020 	add.w	r0, r3, #32
 8005f9a:	f107 0214 	add.w	r2, r7, #20
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	2114      	movs	r1, #20
 8005fa2:	f000 fce5 	bl	8006970 <lsm6dso_read_reg>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d002      	beq.n	8005fb2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8005fac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fb0:	e054      	b.n	800605c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8005fb2:	7d3b      	ldrb	r3, [r7, #20]
 8005fb4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d123      	bne.n	8006006 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d10b      	bne.n	8005fe0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	3320      	adds	r3, #32
 8005fcc:	2100      	movs	r1, #0
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 fd5c 	bl	8006a8c <lsm6dso_xl_data_rate_set>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d002      	beq.n	8005fe0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8005fda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fde:	e03d      	b.n	800605c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8005fe0:	7d3b      	ldrb	r3, [r7, #20]
 8005fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fe6:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f103 0020 	add.w	r0, r3, #32
 8005fee:	f107 0214 	add.w	r2, r7, #20
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	2114      	movs	r1, #20
 8005ff6:	f000 fcd3 	bl	80069a0 <lsm6dso_write_reg>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8006000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006004:	e02a      	b.n	800605c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006006:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800600a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006068 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 800600e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006016:	dc00      	bgt.n	800601a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8006018:	e006      	b.n	8006028 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 800601a:	4b14      	ldr	r3, [pc, #80]	; (800606c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 800601c:	62bb      	str	r3, [r7, #40]	; 0x28
 800601e:	e003      	b.n	8006028 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8006020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006024:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8006026:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8006028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800602e:	d102      	bne.n	8006036 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8006030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006034:	e012      	b.n	800605c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800603c:	2b01      	cmp	r3, #1
 800603e:	d106      	bne.n	800604e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8006040:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f000 fa27 	bl	8006498 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 800604a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800604c:	e005      	b.n	800605a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 800604e:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 fab8 	bl	80065c8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8006058:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 800605a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800605c:	4618      	mov	r0, r3
 800605e:	3730      	adds	r7, #48	; 0x30
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	41480000 	.word	0x41480000
 8006068:	43500000 	.word	0x43500000
 800606c:	43500000 	.word	0x43500000

08006070 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 800607a:	f04f 0300 	mov.w	r3, #0
 800607e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3320      	adds	r3, #32
 8006084:	f107 0210 	add.w	r2, r7, #16
 8006088:	4611      	mov	r1, r2
 800608a:	4618      	mov	r0, r3
 800608c:	f001 f831 	bl	80070f2 <lsm6dso_acceleration_raw_get>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d002      	beq.n	800609c <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8006096:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800609a:	e03c      	b.n	8006116 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 800609c:	f107 030c 	add.w	r3, r7, #12
 80060a0:	4619      	mov	r1, r3
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7ff fdee 	bl	8005c84 <LSM6DSO_ACC_GetSensitivity>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d002      	beq.n	80060b4 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 80060ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060b2:	e030      	b.n	8006116 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80060b4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80060b8:	ee07 3a90 	vmov	s15, r3
 80060bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80060c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060cc:	ee17 2a90 	vmov	r2, s15
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80060d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80060d8:	ee07 3a90 	vmov	s15, r3
 80060dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80060e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060ec:	ee17 2a90 	vmov	r2, s15
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80060f4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80060f8:	ee07 3a90 	vmov	s15, r3
 80060fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006100:	edd7 7a03 	vldr	s15, [r7, #12]
 8006104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006108:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800610c:	ee17 2a90 	vmov	r2, s15
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3718      	adds	r7, #24
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b082      	sub	sp, #8
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800612c:	2b01      	cmp	r3, #1
 800612e:	d101      	bne.n	8006134 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8006130:	2300      	movs	r3, #0
 8006132:	e014      	b.n	800615e <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f103 0220 	add.w	r2, r3, #32
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006140:	4619      	mov	r1, r3
 8006142:	4610      	mov	r0, r2
 8006144:	f000 fe06 	bl	8006d54 <lsm6dso_gy_data_rate_set>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 800614e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006152:	e004      	b.n	800615e <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3708      	adds	r7, #8
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b082      	sub	sp, #8
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8006178:	2300      	movs	r3, #0
 800617a:	e01f      	b.n	80061bc <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f103 0220 	add.w	r2, r3, #32
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	3334      	adds	r3, #52	; 0x34
 8006186:	4619      	mov	r1, r3
 8006188:	4610      	mov	r0, r2
 800618a:	f000 fedf 	bl	8006f4c <lsm6dso_gy_data_rate_get>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8006194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006198:	e010      	b.n	80061bc <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	3320      	adds	r3, #32
 800619e:	2100      	movs	r1, #0
 80061a0:	4618      	mov	r0, r3
 80061a2:	f000 fdd7 	bl	8006d54 <lsm6dso_gy_data_rate_set>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d002      	beq.n	80061b2 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 80061ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061b0:	e004      	b.n	80061bc <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	3320      	adds	r3, #32
 80061d6:	f107 020b 	add.w	r2, r7, #11
 80061da:	4611      	mov	r1, r2
 80061dc:	4618      	mov	r0, r3
 80061de:	f000 fd77 	bl	8006cd0 <lsm6dso_gy_full_scale_get>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d002      	beq.n	80061ee <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80061e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061ec:	e02d      	b.n	800624a <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80061ee:	7afb      	ldrb	r3, [r7, #11]
 80061f0:	2b06      	cmp	r3, #6
 80061f2:	d825      	bhi.n	8006240 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 80061f4:	a201      	add	r2, pc, #4	; (adr r2, 80061fc <LSM6DSO_GYRO_GetSensitivity+0x38>)
 80061f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fa:	bf00      	nop
 80061fc:	08006221 	.word	0x08006221
 8006200:	08006219 	.word	0x08006219
 8006204:	08006229 	.word	0x08006229
 8006208:	08006241 	.word	0x08006241
 800620c:	08006231 	.word	0x08006231
 8006210:	08006241 	.word	0x08006241
 8006214:	08006239 	.word	0x08006239
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	4a0e      	ldr	r2, [pc, #56]	; (8006254 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 800621c:	601a      	str	r2, [r3, #0]
      break;
 800621e:	e013      	b.n	8006248 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	4a0d      	ldr	r2, [pc, #52]	; (8006258 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8006224:	601a      	str	r2, [r3, #0]
      break;
 8006226:	e00f      	b.n	8006248 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	4a0c      	ldr	r2, [pc, #48]	; (800625c <LSM6DSO_GYRO_GetSensitivity+0x98>)
 800622c:	601a      	str	r2, [r3, #0]
      break;
 800622e:	e00b      	b.n	8006248 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	4a0b      	ldr	r2, [pc, #44]	; (8006260 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8006234:	601a      	str	r2, [r3, #0]
      break;
 8006236:	e007      	b.n	8006248 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	4a0a      	ldr	r2, [pc, #40]	; (8006264 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 800623c:	601a      	str	r2, [r3, #0]
      break;
 800623e:	e003      	b.n	8006248 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8006240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006244:	60fb      	str	r3, [r7, #12]
      break;
 8006246:	bf00      	nop
  }

  return ret;
 8006248:	68fb      	ldr	r3, [r7, #12]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	408c0000 	.word	0x408c0000
 8006258:	410c0000 	.word	0x410c0000
 800625c:	418c0000 	.word	0x418c0000
 8006260:	420c0000 	.word	0x420c0000
 8006264:	428c0000 	.word	0x428c0000

08006268 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8006274:	2100      	movs	r1, #0
 8006276:	ed97 0a00 	vldr	s0, [r7]
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f806 	bl	800628c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8006280:	4603      	mov	r3, r0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
	...

0800628c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b088      	sub	sp, #32
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	ed87 0a02 	vstr	s0, [r7, #8]
 8006298:	460b      	mov	r3, r1
 800629a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 800629c:	2300      	movs	r3, #0
 800629e:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 80062a4:	79fb      	ldrb	r3, [r7, #7]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d028      	beq.n	8006300 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 80062ae:	e05c      	b.n	800636a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f103 0020 	add.w	r0, r3, #32
 80062b6:	f107 0214 	add.w	r2, r7, #20
 80062ba:	2301      	movs	r3, #1
 80062bc:	2116      	movs	r1, #22
 80062be:	f000 fb57 	bl	8006970 <lsm6dso_read_reg>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d002      	beq.n	80062ce <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 80062c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062cc:	e06c      	b.n	80063a8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 80062ce:	7d3b      	ldrb	r3, [r7, #20]
 80062d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d04b      	beq.n	8006372 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 80062da:	7d3b      	ldrb	r3, [r7, #20]
 80062dc:	f36f 13c7 	bfc	r3, #7, #1
 80062e0:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f103 0020 	add.w	r0, r3, #32
 80062e8:	f107 0214 	add.w	r2, r7, #20
 80062ec:	2301      	movs	r3, #1
 80062ee:	2116      	movs	r1, #22
 80062f0:	f000 fb56 	bl	80069a0 <lsm6dso_write_reg>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d03b      	beq.n	8006372 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 80062fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062fe:	e053      	b.n	80063a8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f103 0020 	add.w	r0, r3, #32
 8006306:	f107 0210 	add.w	r2, r7, #16
 800630a:	2301      	movs	r3, #1
 800630c:	2116      	movs	r1, #22
 800630e:	f000 fb2f 	bl	8006970 <lsm6dso_read_reg>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d002      	beq.n	800631e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8006318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800631c:	e044      	b.n	80063a8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 800631e:	7c3b      	ldrb	r3, [r7, #16]
 8006320:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d112      	bne.n	8006350 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 800632a:	7c3b      	ldrb	r3, [r7, #16]
 800632c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006330:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f103 0020 	add.w	r0, r3, #32
 8006338:	f107 0210 	add.w	r2, r7, #16
 800633c:	2301      	movs	r3, #1
 800633e:	2116      	movs	r1, #22
 8006340:	f000 fb2e 	bl	80069a0 <lsm6dso_write_reg>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d002      	beq.n	8006350 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 800634a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800634e:	e02b      	b.n	80063a8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006350:	edd7 7a06 	vldr	s15, [r7, #24]
 8006354:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80063b0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8006358:	eef4 7ac7 	vcmpe.f32	s15, s14
 800635c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006360:	dc00      	bgt.n	8006364 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 8006362:	e007      	b.n	8006374 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8006364:	4b13      	ldr	r3, [pc, #76]	; (80063b4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8006366:	61bb      	str	r3, [r7, #24]
 8006368:	e004      	b.n	8006374 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 800636a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800636e:	61fb      	str	r3, [r7, #28]
      break;
 8006370:	e000      	b.n	8006374 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 8006372:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800637a:	d102      	bne.n	8006382 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 800637c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006380:	e012      	b.n	80063a8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006388:	2b01      	cmp	r3, #1
 800638a:	d106      	bne.n	800639a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 800638c:	ed97 0a06 	vldr	s0, [r7, #24]
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f000 f9a9 	bl	80066e8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8006396:	61f8      	str	r0, [r7, #28]
 8006398:	e005      	b.n	80063a6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 800639a:	ed97 0a06 	vldr	s0, [r7, #24]
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f000 fa2e 	bl	8006800 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 80063a4:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 80063a6:	69fb      	ldr	r3, [r7, #28]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3720      	adds	r7, #32
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	43500000 	.word	0x43500000
 80063b4:	43500000 	.word	0x43500000

080063b8 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	3320      	adds	r3, #32
 80063c6:	f107 0210 	add.w	r2, r7, #16
 80063ca:	4611      	mov	r1, r2
 80063cc:	4618      	mov	r0, r3
 80063ce:	f000 fe45 	bl	800705c <lsm6dso_angular_rate_raw_get>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 80063d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063dc:	e03c      	b.n	8006458 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80063de:	f107 030c 	add.w	r3, r7, #12
 80063e2:	4619      	mov	r1, r3
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f7ff feed 	bl	80061c4 <LSM6DSO_GYRO_GetSensitivity>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d002      	beq.n	80063f6 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 80063f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063f4:	e030      	b.n	8006458 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80063f6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80063fa:	ee07 3a90 	vmov	s15, r3
 80063fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006402:	edd7 7a03 	vldr	s15, [r7, #12]
 8006406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800640a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800640e:	ee17 2a90 	vmov	r2, s15
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8006416:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800641a:	ee07 3a90 	vmov	s15, r3
 800641e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006422:	edd7 7a03 	vldr	s15, [r7, #12]
 8006426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800642a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800642e:	ee17 2a90 	vmov	r2, s15
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8006436:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800643a:	ee07 3a90 	vmov	s15, r3
 800643e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006442:	edd7 7a03 	vldr	s15, [r7, #12]
 8006446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800644a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800644e:	ee17 2a90 	vmov	r2, s15
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3718      	adds	r7, #24
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	460b      	mov	r3, r1
 800646a:	70fb      	strb	r3, [r7, #3]
 800646c:	4613      	mov	r3, r2
 800646e:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f103 0020 	add.w	r0, r3, #32
 8006476:	1cba      	adds	r2, r7, #2
 8006478:	78f9      	ldrb	r1, [r7, #3]
 800647a:	2301      	movs	r3, #1
 800647c:	f000 fa90 	bl	80069a0 <lsm6dso_write_reg>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d002      	beq.n	800648c <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8006486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800648a:	e000      	b.n	800648e <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3708      	adds	r7, #8
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
	...

08006498 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80064a4:	edd7 7a00 	vldr	s15, [r7]
 80064a8:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80065a8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 80064ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064b4:	d801      	bhi.n	80064ba <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 80064b6:	230b      	movs	r3, #11
 80064b8:	e063      	b.n	8006582 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80064ba:	edd7 7a00 	vldr	s15, [r7]
 80064be:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80064c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ca:	d801      	bhi.n	80064d0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 80064cc:	2301      	movs	r3, #1
 80064ce:	e058      	b.n	8006582 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80064d0:	edd7 7a00 	vldr	s15, [r7]
 80064d4:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80064d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064e0:	d801      	bhi.n	80064e6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80064e2:	2302      	movs	r3, #2
 80064e4:	e04d      	b.n	8006582 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80064e6:	edd7 7a00 	vldr	s15, [r7]
 80064ea:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80065ac <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 80064ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064f6:	d801      	bhi.n	80064fc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 80064f8:	2303      	movs	r3, #3
 80064fa:	e042      	b.n	8006582 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80064fc:	edd7 7a00 	vldr	s15, [r7]
 8006500:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80065b0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8006504:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800650c:	d801      	bhi.n	8006512 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800650e:	2304      	movs	r3, #4
 8006510:	e037      	b.n	8006582 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006512:	edd7 7a00 	vldr	s15, [r7]
 8006516:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80065b4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 800651a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800651e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006522:	d801      	bhi.n	8006528 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8006524:	2305      	movs	r3, #5
 8006526:	e02c      	b.n	8006582 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006528:	edd7 7a00 	vldr	s15, [r7]
 800652c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80065b8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8006530:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006538:	d801      	bhi.n	800653e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800653a:	2306      	movs	r3, #6
 800653c:	e021      	b.n	8006582 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800653e:	edd7 7a00 	vldr	s15, [r7]
 8006542:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80065bc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8006546:	eef4 7ac7 	vcmpe.f32	s15, s14
 800654a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800654e:	d801      	bhi.n	8006554 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8006550:	2307      	movs	r3, #7
 8006552:	e016      	b.n	8006582 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006554:	edd7 7a00 	vldr	s15, [r7]
 8006558:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80065c0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 800655c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006564:	d801      	bhi.n	800656a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8006566:	2308      	movs	r3, #8
 8006568:	e00b      	b.n	8006582 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800656a:	edd7 7a00 	vldr	s15, [r7]
 800656e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80065c4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8006572:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800657a:	d801      	bhi.n	8006580 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 800657c:	2309      	movs	r3, #9
 800657e:	e000      	b.n	8006582 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006580:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8006582:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	3320      	adds	r3, #32
 8006588:	7bfa      	ldrb	r2, [r7, #15]
 800658a:	4611      	mov	r1, r2
 800658c:	4618      	mov	r0, r3
 800658e:	f000 fa7d 	bl	8006a8c <lsm6dso_xl_data_rate_set>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d002      	beq.n	800659e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8006598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800659c:	e000      	b.n	80065a0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	3fcccccd 	.word	0x3fcccccd
 80065ac:	42500000 	.word	0x42500000
 80065b0:	42d00000 	.word	0x42d00000
 80065b4:	43500000 	.word	0x43500000
 80065b8:	43d08000 	.word	0x43d08000
 80065bc:	44504000 	.word	0x44504000
 80065c0:	44d06000 	.word	0x44d06000
 80065c4:	45505000 	.word	0x45505000

080065c8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80065d4:	edd7 7a00 	vldr	s15, [r7]
 80065d8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80066c8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 80065dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065e4:	d801      	bhi.n	80065ea <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 80065e6:	230b      	movs	r3, #11
 80065e8:	e063      	b.n	80066b2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80065ea:	edd7 7a00 	vldr	s15, [r7]
 80065ee:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80065f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065fa:	d801      	bhi.n	8006600 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 80065fc:	2301      	movs	r3, #1
 80065fe:	e058      	b.n	80066b2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006600:	edd7 7a00 	vldr	s15, [r7]
 8006604:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006608:	eef4 7ac7 	vcmpe.f32	s15, s14
 800660c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006610:	d801      	bhi.n	8006616 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8006612:	2302      	movs	r3, #2
 8006614:	e04d      	b.n	80066b2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006616:	edd7 7a00 	vldr	s15, [r7]
 800661a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80066cc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 800661e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006626:	d801      	bhi.n	800662c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8006628:	2303      	movs	r3, #3
 800662a:	e042      	b.n	80066b2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800662c:	edd7 7a00 	vldr	s15, [r7]
 8006630:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80066d0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8006634:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800663c:	d801      	bhi.n	8006642 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800663e:	2304      	movs	r3, #4
 8006640:	e037      	b.n	80066b2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006642:	edd7 7a00 	vldr	s15, [r7]
 8006646:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80066d4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 800664a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800664e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006652:	d801      	bhi.n	8006658 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8006654:	2305      	movs	r3, #5
 8006656:	e02c      	b.n	80066b2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006658:	edd7 7a00 	vldr	s15, [r7]
 800665c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80066d8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8006660:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006668:	d801      	bhi.n	800666e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800666a:	2306      	movs	r3, #6
 800666c:	e021      	b.n	80066b2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800666e:	edd7 7a00 	vldr	s15, [r7]
 8006672:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80066dc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 8006676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800667a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800667e:	d801      	bhi.n	8006684 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8006680:	2307      	movs	r3, #7
 8006682:	e016      	b.n	80066b2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006684:	edd7 7a00 	vldr	s15, [r7]
 8006688:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80066e0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 800668c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006694:	d801      	bhi.n	800669a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8006696:	2308      	movs	r3, #8
 8006698:	e00b      	b.n	80066b2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800669a:	edd7 7a00 	vldr	s15, [r7]
 800669e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80066e4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 80066a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066aa:	d801      	bhi.n	80066b0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80066ac:	2309      	movs	r3, #9
 80066ae:	e000      	b.n	80066b2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80066b0:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	3fcccccd 	.word	0x3fcccccd
 80066cc:	42500000 	.word	0x42500000
 80066d0:	42d00000 	.word	0x42d00000
 80066d4:	43500000 	.word	0x43500000
 80066d8:	43d08000 	.word	0x43d08000
 80066dc:	44504000 	.word	0x44504000
 80066e0:	44d06000 	.word	0x44d06000
 80066e4:	45505000 	.word	0x45505000

080066e8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80066f4:	edd7 7a00 	vldr	s15, [r7]
 80066f8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80066fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006704:	d801      	bhi.n	800670a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8006706:	2301      	movs	r3, #1
 8006708:	e058      	b.n	80067bc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800670a:	edd7 7a00 	vldr	s15, [r7]
 800670e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006712:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800671a:	d801      	bhi.n	8006720 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 800671c:	2302      	movs	r3, #2
 800671e:	e04d      	b.n	80067bc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006720:	edd7 7a00 	vldr	s15, [r7]
 8006724:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80067e4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8006728:	eef4 7ac7 	vcmpe.f32	s15, s14
 800672c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006730:	d801      	bhi.n	8006736 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8006732:	2303      	movs	r3, #3
 8006734:	e042      	b.n	80067bc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006736:	edd7 7a00 	vldr	s15, [r7]
 800673a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80067e8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800673e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006746:	d801      	bhi.n	800674c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8006748:	2304      	movs	r3, #4
 800674a:	e037      	b.n	80067bc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800674c:	edd7 7a00 	vldr	s15, [r7]
 8006750:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80067ec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8006754:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800675c:	d801      	bhi.n	8006762 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800675e:	2305      	movs	r3, #5
 8006760:	e02c      	b.n	80067bc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006762:	edd7 7a00 	vldr	s15, [r7]
 8006766:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80067f0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800676a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800676e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006772:	d801      	bhi.n	8006778 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8006774:	2306      	movs	r3, #6
 8006776:	e021      	b.n	80067bc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006778:	edd7 7a00 	vldr	s15, [r7]
 800677c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80067f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8006780:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006788:	d801      	bhi.n	800678e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800678a:	2307      	movs	r3, #7
 800678c:	e016      	b.n	80067bc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800678e:	edd7 7a00 	vldr	s15, [r7]
 8006792:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80067f8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8006796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800679a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800679e:	d801      	bhi.n	80067a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80067a0:	2308      	movs	r3, #8
 80067a2:	e00b      	b.n	80067bc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80067a4:	edd7 7a00 	vldr	s15, [r7]
 80067a8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80067fc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80067ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067b4:	d801      	bhi.n	80067ba <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80067b6:	2309      	movs	r3, #9
 80067b8:	e000      	b.n	80067bc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80067ba:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80067bc:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	3320      	adds	r3, #32
 80067c2:	7bfa      	ldrb	r2, [r7, #15]
 80067c4:	4611      	mov	r1, r2
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 fac4 	bl	8006d54 <lsm6dso_gy_data_rate_set>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d002      	beq.n	80067d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 80067d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067d6:	e000      	b.n	80067da <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	42500000 	.word	0x42500000
 80067e8:	42d00000 	.word	0x42d00000
 80067ec:	43500000 	.word	0x43500000
 80067f0:	43d08000 	.word	0x43d08000
 80067f4:	44504000 	.word	0x44504000
 80067f8:	44d06000 	.word	0x44d06000
 80067fc:	45505000 	.word	0x45505000

08006800 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 800680c:	edd7 7a00 	vldr	s15, [r7]
 8006810:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006814:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800681c:	d801      	bhi.n	8006822 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800681e:	2301      	movs	r3, #1
 8006820:	e058      	b.n	80068d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006822:	edd7 7a00 	vldr	s15, [r7]
 8006826:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800682a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800682e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006832:	d801      	bhi.n	8006838 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8006834:	2302      	movs	r3, #2
 8006836:	e04d      	b.n	80068d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006838:	edd7 7a00 	vldr	s15, [r7]
 800683c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80068e8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8006840:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006848:	d801      	bhi.n	800684e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800684a:	2303      	movs	r3, #3
 800684c:	e042      	b.n	80068d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800684e:	edd7 7a00 	vldr	s15, [r7]
 8006852:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80068ec <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8006856:	eef4 7ac7 	vcmpe.f32	s15, s14
 800685a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800685e:	d801      	bhi.n	8006864 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8006860:	2304      	movs	r3, #4
 8006862:	e037      	b.n	80068d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006864:	edd7 7a00 	vldr	s15, [r7]
 8006868:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80068f0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 800686c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006874:	d801      	bhi.n	800687a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8006876:	2305      	movs	r3, #5
 8006878:	e02c      	b.n	80068d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800687a:	edd7 7a00 	vldr	s15, [r7]
 800687e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80068f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8006882:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800688a:	d801      	bhi.n	8006890 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 800688c:	2306      	movs	r3, #6
 800688e:	e021      	b.n	80068d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006890:	edd7 7a00 	vldr	s15, [r7]
 8006894:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80068f8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8006898:	eef4 7ac7 	vcmpe.f32	s15, s14
 800689c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068a0:	d801      	bhi.n	80068a6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80068a2:	2307      	movs	r3, #7
 80068a4:	e016      	b.n	80068d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80068a6:	edd7 7a00 	vldr	s15, [r7]
 80068aa:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80068fc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80068ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068b6:	d801      	bhi.n	80068bc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80068b8:	2308      	movs	r3, #8
 80068ba:	e00b      	b.n	80068d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80068bc:	edd7 7a00 	vldr	s15, [r7]
 80068c0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8006900 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80068c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068cc:	d801      	bhi.n	80068d2 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80068ce:	2309      	movs	r3, #9
 80068d0:	e000      	b.n	80068d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80068d2:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr
 80068e8:	42500000 	.word	0x42500000
 80068ec:	42d00000 	.word	0x42d00000
 80068f0:	43500000 	.word	0x43500000
 80068f4:	43d08000 	.word	0x43d08000
 80068f8:	44504000 	.word	0x44504000
 80068fc:	44d06000 	.word	0x44d06000
 8006900:	45505000 	.word	0x45505000

08006904 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006904:	b590      	push	{r4, r7, lr}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	607a      	str	r2, [r7, #4]
 800690e:	461a      	mov	r2, r3
 8006910:	460b      	mov	r3, r1
 8006912:	72fb      	strb	r3, [r7, #11]
 8006914:	4613      	mov	r3, r2
 8006916:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	695c      	ldr	r4, [r3, #20]
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	7b1b      	ldrb	r3, [r3, #12]
 8006924:	b298      	uxth	r0, r3
 8006926:	7afb      	ldrb	r3, [r7, #11]
 8006928:	b299      	uxth	r1, r3
 800692a:	893b      	ldrh	r3, [r7, #8]
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	47a0      	blx	r4
 8006930:	4603      	mov	r3, r0
}
 8006932:	4618      	mov	r0, r3
 8006934:	371c      	adds	r7, #28
 8006936:	46bd      	mov	sp, r7
 8006938:	bd90      	pop	{r4, r7, pc}

0800693a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800693a:	b590      	push	{r4, r7, lr}
 800693c:	b087      	sub	sp, #28
 800693e:	af00      	add	r7, sp, #0
 8006940:	60f8      	str	r0, [r7, #12]
 8006942:	607a      	str	r2, [r7, #4]
 8006944:	461a      	mov	r2, r3
 8006946:	460b      	mov	r3, r1
 8006948:	72fb      	strb	r3, [r7, #11]
 800694a:	4613      	mov	r3, r2
 800694c:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	691c      	ldr	r4, [r3, #16]
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	7b1b      	ldrb	r3, [r3, #12]
 800695a:	b298      	uxth	r0, r3
 800695c:	7afb      	ldrb	r3, [r7, #11]
 800695e:	b299      	uxth	r1, r3
 8006960:	893b      	ldrh	r3, [r7, #8]
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	47a0      	blx	r4
 8006966:	4603      	mov	r3, r0
}
 8006968:	4618      	mov	r0, r3
 800696a:	371c      	adds	r7, #28
 800696c:	46bd      	mov	sp, r7
 800696e:	bd90      	pop	{r4, r7, pc}

08006970 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8006970:	b590      	push	{r4, r7, lr}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	607a      	str	r2, [r7, #4]
 800697a:	461a      	mov	r2, r3
 800697c:	460b      	mov	r3, r1
 800697e:	72fb      	strb	r3, [r7, #11]
 8006980:	4613      	mov	r3, r2
 8006982:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	685c      	ldr	r4, [r3, #4]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	68d8      	ldr	r0, [r3, #12]
 800698c:	893b      	ldrh	r3, [r7, #8]
 800698e:	7af9      	ldrb	r1, [r7, #11]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	47a0      	blx	r4
 8006994:	6178      	str	r0, [r7, #20]

  return ret;
 8006996:	697b      	ldr	r3, [r7, #20]
}
 8006998:	4618      	mov	r0, r3
 800699a:	371c      	adds	r7, #28
 800699c:	46bd      	mov	sp, r7
 800699e:	bd90      	pop	{r4, r7, pc}

080069a0 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80069a0:	b590      	push	{r4, r7, lr}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	607a      	str	r2, [r7, #4]
 80069aa:	461a      	mov	r2, r3
 80069ac:	460b      	mov	r3, r1
 80069ae:	72fb      	strb	r3, [r7, #11]
 80069b0:	4613      	mov	r3, r2
 80069b2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681c      	ldr	r4, [r3, #0]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	68d8      	ldr	r0, [r3, #12]
 80069bc:	893b      	ldrh	r3, [r7, #8]
 80069be:	7af9      	ldrb	r1, [r7, #11]
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	47a0      	blx	r4
 80069c4:	6178      	str	r0, [r7, #20]

  return ret;
 80069c6:	697b      	ldr	r3, [r7, #20]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	371c      	adds	r7, #28
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd90      	pop	{r4, r7, pc}

080069d0 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	460b      	mov	r3, r1
 80069da:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80069dc:	f107 0208 	add.w	r2, r7, #8
 80069e0:	2301      	movs	r3, #1
 80069e2:	2110      	movs	r1, #16
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f7ff ffc3 	bl	8006970 <lsm6dso_read_reg>
 80069ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10f      	bne.n	8006a12 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 80069f2:	78fb      	ldrb	r3, [r7, #3]
 80069f4:	f003 0303 	and.w	r3, r3, #3
 80069f8:	b2da      	uxtb	r2, r3
 80069fa:	7a3b      	ldrb	r3, [r7, #8]
 80069fc:	f362 0383 	bfi	r3, r2, #2, #2
 8006a00:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8006a02:	f107 0208 	add.w	r2, r7, #8
 8006a06:	2301      	movs	r3, #1
 8006a08:	2110      	movs	r1, #16
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f7ff ffc8 	bl	80069a0 <lsm6dso_write_reg>
 8006a10:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006a12:	68fb      	ldr	r3, [r7, #12]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8006a26:	f107 0208 	add.w	r2, r7, #8
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	2110      	movs	r1, #16
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7ff ff9e 	bl	8006970 <lsm6dso_read_reg>
 8006a34:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8006a36:	7a3b      	ldrb	r3, [r7, #8]
 8006a38:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	d81a      	bhi.n	8006a78 <lsm6dso_xl_full_scale_get+0x5c>
 8006a42:	a201      	add	r2, pc, #4	; (adr r2, 8006a48 <lsm6dso_xl_full_scale_get+0x2c>)
 8006a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a48:	08006a59 	.word	0x08006a59
 8006a4c:	08006a61 	.word	0x08006a61
 8006a50:	08006a69 	.word	0x08006a69
 8006a54:	08006a71 	.word	0x08006a71
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	701a      	strb	r2, [r3, #0]
      break;
 8006a5e:	e00f      	b.n	8006a80 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	2201      	movs	r2, #1
 8006a64:	701a      	strb	r2, [r3, #0]
      break;
 8006a66:	e00b      	b.n	8006a80 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	701a      	strb	r2, [r3, #0]
      break;
 8006a6e:	e007      	b.n	8006a80 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	2203      	movs	r2, #3
 8006a74:	701a      	strb	r2, [r3, #0]
      break;
 8006a76:	e003      	b.n	8006a80 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	701a      	strb	r2, [r3, #0]
      break;
 8006a7e:	bf00      	nop
  }

  return ret;
 8006a80:	68fb      	ldr	r3, [r7, #12]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop

08006a8c <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b086      	sub	sp, #24
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	460b      	mov	r3, r1
 8006a96:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8006a98:	78fb      	ldrb	r3, [r7, #3]
 8006a9a:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8006a9c:	f107 030c 	add.w	r3, r7, #12
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fc28 	bl	80072f8 <lsm6dso_fsm_enable_get>
 8006aa8:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f040 80c4 	bne.w	8006c3a <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006ab2:	7b3b      	ldrb	r3, [r7, #12]
 8006ab4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006ab8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006aba:	7b3b      	ldrb	r3, [r7, #12]
 8006abc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006ac0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006ac6:	7b3b      	ldrb	r3, [r7, #12]
 8006ac8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006acc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006ad2:	7b3b      	ldrb	r3, [r7, #12]
 8006ad4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006ad8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006ada:	4313      	orrs	r3, r2
 8006adc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006ade:	7b3b      	ldrb	r3, [r7, #12]
 8006ae0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006ae4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006aea:	7b3b      	ldrb	r3, [r7, #12]
 8006aec:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006af0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006af2:	4313      	orrs	r3, r2
 8006af4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006af6:	7b3b      	ldrb	r3, [r7, #12]
 8006af8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006afc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006afe:	4313      	orrs	r3, r2
 8006b00:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006b02:	7b3b      	ldrb	r3, [r7, #12]
 8006b04:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006b08:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006b0e:	7b7b      	ldrb	r3, [r7, #13]
 8006b10:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006b14:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006b16:	4313      	orrs	r3, r2
 8006b18:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006b1a:	7b7b      	ldrb	r3, [r7, #13]
 8006b1c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006b20:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006b22:	4313      	orrs	r3, r2
 8006b24:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006b26:	7b7b      	ldrb	r3, [r7, #13]
 8006b28:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006b2c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006b32:	7b7b      	ldrb	r3, [r7, #13]
 8006b34:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006b38:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006b3e:	7b7b      	ldrb	r3, [r7, #13]
 8006b40:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006b44:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006b46:	4313      	orrs	r3, r2
 8006b48:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006b4a:	7b7b      	ldrb	r3, [r7, #13]
 8006b4c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006b50:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006b52:	4313      	orrs	r3, r2
 8006b54:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006b56:	7b7b      	ldrb	r3, [r7, #13]
 8006b58:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006b5c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8006b62:	7b7b      	ldrb	r3, [r7, #13]
 8006b64:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006b68:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d163      	bne.n	8006c3a <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8006b72:	f107 030b 	add.w	r3, r7, #11
 8006b76:	4619      	mov	r1, r3
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fbdf 	bl	800733c <lsm6dso_fsm_data_rate_get>
 8006b7e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d159      	bne.n	8006c3a <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8006b86:	7afb      	ldrb	r3, [r7, #11]
 8006b88:	2b03      	cmp	r3, #3
 8006b8a:	d853      	bhi.n	8006c34 <lsm6dso_xl_data_rate_set+0x1a8>
 8006b8c:	a201      	add	r2, pc, #4	; (adr r2, 8006b94 <lsm6dso_xl_data_rate_set+0x108>)
 8006b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b92:	bf00      	nop
 8006b94:	08006ba5 	.word	0x08006ba5
 8006b98:	08006bb7 	.word	0x08006bb7
 8006b9c:	08006bd5 	.word	0x08006bd5
 8006ba0:	08006bff 	.word	0x08006bff
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 8006ba4:	78fb      	ldrb	r3, [r7, #3]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d102      	bne.n	8006bb0 <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8006baa:	2301      	movs	r3, #1
 8006bac:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006bae:	e045      	b.n	8006c3c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006bb0:	78fb      	ldrb	r3, [r7, #3]
 8006bb2:	75fb      	strb	r3, [r7, #23]
            break;
 8006bb4:	e042      	b.n	8006c3c <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8006bb6:	78fb      	ldrb	r3, [r7, #3]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d102      	bne.n	8006bc2 <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006bc0:	e03c      	b.n	8006c3c <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8006bc2:	78fb      	ldrb	r3, [r7, #3]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d102      	bne.n	8006bce <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8006bc8:	2302      	movs	r3, #2
 8006bca:	75fb      	strb	r3, [r7, #23]
            break;
 8006bcc:	e036      	b.n	8006c3c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006bce:	78fb      	ldrb	r3, [r7, #3]
 8006bd0:	75fb      	strb	r3, [r7, #23]
            break;
 8006bd2:	e033      	b.n	8006c3c <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8006bd4:	78fb      	ldrb	r3, [r7, #3]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d102      	bne.n	8006be0 <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006bde:	e02d      	b.n	8006c3c <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8006be0:	78fb      	ldrb	r3, [r7, #3]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d102      	bne.n	8006bec <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8006be6:	2303      	movs	r3, #3
 8006be8:	75fb      	strb	r3, [r7, #23]
            break;
 8006bea:	e027      	b.n	8006c3c <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8006bec:	78fb      	ldrb	r3, [r7, #3]
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d102      	bne.n	8006bf8 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	75fb      	strb	r3, [r7, #23]
            break;
 8006bf6:	e021      	b.n	8006c3c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006bf8:	78fb      	ldrb	r3, [r7, #3]
 8006bfa:	75fb      	strb	r3, [r7, #23]
            break;
 8006bfc:	e01e      	b.n	8006c3c <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8006bfe:	78fb      	ldrb	r3, [r7, #3]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d102      	bne.n	8006c0a <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006c04:	2304      	movs	r3, #4
 8006c06:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006c08:	e018      	b.n	8006c3c <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8006c0a:	78fb      	ldrb	r3, [r7, #3]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d102      	bne.n	8006c16 <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006c10:	2304      	movs	r3, #4
 8006c12:	75fb      	strb	r3, [r7, #23]
            break;
 8006c14:	e012      	b.n	8006c3c <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8006c16:	78fb      	ldrb	r3, [r7, #3]
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d102      	bne.n	8006c22 <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006c1c:	2304      	movs	r3, #4
 8006c1e:	75fb      	strb	r3, [r7, #23]
            break;
 8006c20:	e00c      	b.n	8006c3c <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 8006c22:	78fb      	ldrb	r3, [r7, #3]
 8006c24:	2b03      	cmp	r3, #3
 8006c26:	d102      	bne.n	8006c2e <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006c28:	2304      	movs	r3, #4
 8006c2a:	75fb      	strb	r3, [r7, #23]
            break;
 8006c2c:	e006      	b.n	8006c3c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006c2e:	78fb      	ldrb	r3, [r7, #3]
 8006c30:	75fb      	strb	r3, [r7, #23]
            break;
 8006c32:	e003      	b.n	8006c3c <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8006c34:	78fb      	ldrb	r3, [r7, #3]
 8006c36:	75fb      	strb	r3, [r7, #23]
            break;
 8006c38:	e000      	b.n	8006c3c <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 8006c3a:	bf00      	nop
    }
  }

  if (ret == 0)
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d107      	bne.n	8006c52 <lsm6dso_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8006c42:	f107 0208 	add.w	r2, r7, #8
 8006c46:	2301      	movs	r3, #1
 8006c48:	2110      	movs	r1, #16
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f7ff fe90 	bl	8006970 <lsm6dso_read_reg>
 8006c50:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d10f      	bne.n	8006c78 <lsm6dso_xl_data_rate_set+0x1ec>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8006c58:	7dfb      	ldrb	r3, [r7, #23]
 8006c5a:	f003 030f 	and.w	r3, r3, #15
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	7a3b      	ldrb	r3, [r7, #8]
 8006c62:	f362 1307 	bfi	r3, r2, #4, #4
 8006c66:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8006c68:	f107 0208 	add.w	r2, r7, #8
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	2110      	movs	r1, #16
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f7ff fe95 	bl	80069a0 <lsm6dso_write_reg>
 8006c76:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8006c78:	693b      	ldr	r3, [r7, #16]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3718      	adds	r7, #24
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop

08006c84 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006c90:	f107 0208 	add.w	r2, r7, #8
 8006c94:	2301      	movs	r3, #1
 8006c96:	2111      	movs	r1, #17
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f7ff fe69 	bl	8006970 <lsm6dso_read_reg>
 8006c9e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10f      	bne.n	8006cc6 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8006ca6:	78fb      	ldrb	r3, [r7, #3]
 8006ca8:	f003 0307 	and.w	r3, r3, #7
 8006cac:	b2da      	uxtb	r2, r3
 8006cae:	7a3b      	ldrb	r3, [r7, #8]
 8006cb0:	f362 0343 	bfi	r3, r2, #1, #3
 8006cb4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006cb6:	f107 0208 	add.w	r2, r7, #8
 8006cba:	2301      	movs	r3, #1
 8006cbc:	2111      	movs	r1, #17
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7ff fe6e 	bl	80069a0 <lsm6dso_write_reg>
 8006cc4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006cda:	f107 0208 	add.w	r2, r7, #8
 8006cde:	2301      	movs	r3, #1
 8006ce0:	2111      	movs	r1, #17
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f7ff fe44 	bl	8006970 <lsm6dso_read_reg>
 8006ce8:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8006cea:	7a3b      	ldrb	r3, [r7, #8]
 8006cec:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b06      	cmp	r3, #6
 8006cf4:	d824      	bhi.n	8006d40 <lsm6dso_gy_full_scale_get+0x70>
 8006cf6:	a201      	add	r2, pc, #4	; (adr r2, 8006cfc <lsm6dso_gy_full_scale_get+0x2c>)
 8006cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfc:	08006d19 	.word	0x08006d19
 8006d00:	08006d21 	.word	0x08006d21
 8006d04:	08006d29 	.word	0x08006d29
 8006d08:	08006d41 	.word	0x08006d41
 8006d0c:	08006d31 	.word	0x08006d31
 8006d10:	08006d41 	.word	0x08006d41
 8006d14:	08006d39 	.word	0x08006d39
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	701a      	strb	r2, [r3, #0]
      break;
 8006d1e:	e013      	b.n	8006d48 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	2201      	movs	r2, #1
 8006d24:	701a      	strb	r2, [r3, #0]
      break;
 8006d26:	e00f      	b.n	8006d48 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	701a      	strb	r2, [r3, #0]
      break;
 8006d2e:	e00b      	b.n	8006d48 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	2204      	movs	r2, #4
 8006d34:	701a      	strb	r2, [r3, #0]
      break;
 8006d36:	e007      	b.n	8006d48 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	2206      	movs	r2, #6
 8006d3c:	701a      	strb	r2, [r3, #0]
      break;
 8006d3e:	e003      	b.n	8006d48 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	2200      	movs	r2, #0
 8006d44:	701a      	strb	r2, [r3, #0]
      break;
 8006d46:	bf00      	nop
  }

  return ret;
 8006d48:	68fb      	ldr	r3, [r7, #12]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop

08006d54 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8006d60:	78fb      	ldrb	r3, [r7, #3]
 8006d62:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8006d64:	f107 030c 	add.w	r3, r7, #12
 8006d68:	4619      	mov	r1, r3
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 fac4 	bl	80072f8 <lsm6dso_fsm_enable_get>
 8006d70:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f040 80c4 	bne.w	8006f02 <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006d7a:	7b3b      	ldrb	r3, [r7, #12]
 8006d7c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006d80:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006d82:	7b3b      	ldrb	r3, [r7, #12]
 8006d84:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006d88:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006d8e:	7b3b      	ldrb	r3, [r7, #12]
 8006d90:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006d94:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006d96:	4313      	orrs	r3, r2
 8006d98:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006d9a:	7b3b      	ldrb	r3, [r7, #12]
 8006d9c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006da0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006da2:	4313      	orrs	r3, r2
 8006da4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006da6:	7b3b      	ldrb	r3, [r7, #12]
 8006da8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006dac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006dae:	4313      	orrs	r3, r2
 8006db0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006db2:	7b3b      	ldrb	r3, [r7, #12]
 8006db4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006db8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006dbe:	7b3b      	ldrb	r3, [r7, #12]
 8006dc0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006dc4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006dca:	7b3b      	ldrb	r3, [r7, #12]
 8006dcc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006dd0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006dd6:	7b7b      	ldrb	r3, [r7, #13]
 8006dd8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006ddc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006dde:	4313      	orrs	r3, r2
 8006de0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006de2:	7b7b      	ldrb	r3, [r7, #13]
 8006de4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006de8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006dea:	4313      	orrs	r3, r2
 8006dec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006dee:	7b7b      	ldrb	r3, [r7, #13]
 8006df0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006df4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006df6:	4313      	orrs	r3, r2
 8006df8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006dfa:	7b7b      	ldrb	r3, [r7, #13]
 8006dfc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006e00:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006e02:	4313      	orrs	r3, r2
 8006e04:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006e06:	7b7b      	ldrb	r3, [r7, #13]
 8006e08:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006e0c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006e12:	7b7b      	ldrb	r3, [r7, #13]
 8006e14:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006e18:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006e1e:	7b7b      	ldrb	r3, [r7, #13]
 8006e20:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006e24:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006e26:	4313      	orrs	r3, r2
 8006e28:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8006e2a:	7b7b      	ldrb	r3, [r7, #13]
 8006e2c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006e30:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006e32:	4313      	orrs	r3, r2
 8006e34:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d163      	bne.n	8006f02 <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8006e3a:	f107 030b 	add.w	r3, r7, #11
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fa7b 	bl	800733c <lsm6dso_fsm_data_rate_get>
 8006e46:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d159      	bne.n	8006f02 <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8006e4e:	7afb      	ldrb	r3, [r7, #11]
 8006e50:	2b03      	cmp	r3, #3
 8006e52:	d853      	bhi.n	8006efc <lsm6dso_gy_data_rate_set+0x1a8>
 8006e54:	a201      	add	r2, pc, #4	; (adr r2, 8006e5c <lsm6dso_gy_data_rate_set+0x108>)
 8006e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5a:	bf00      	nop
 8006e5c:	08006e6d 	.word	0x08006e6d
 8006e60:	08006e7f 	.word	0x08006e7f
 8006e64:	08006e9d 	.word	0x08006e9d
 8006e68:	08006ec7 	.word	0x08006ec7
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 8006e6c:	78fb      	ldrb	r3, [r7, #3]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d102      	bne.n	8006e78 <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8006e72:	2301      	movs	r3, #1
 8006e74:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006e76:	e045      	b.n	8006f04 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006e78:	78fb      	ldrb	r3, [r7, #3]
 8006e7a:	75fb      	strb	r3, [r7, #23]
            break;
 8006e7c:	e042      	b.n	8006f04 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8006e7e:	78fb      	ldrb	r3, [r7, #3]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d102      	bne.n	8006e8a <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8006e84:	2302      	movs	r3, #2
 8006e86:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006e88:	e03c      	b.n	8006f04 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8006e8a:	78fb      	ldrb	r3, [r7, #3]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d102      	bne.n	8006e96 <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8006e90:	2302      	movs	r3, #2
 8006e92:	75fb      	strb	r3, [r7, #23]
            break;
 8006e94:	e036      	b.n	8006f04 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006e96:	78fb      	ldrb	r3, [r7, #3]
 8006e98:	75fb      	strb	r3, [r7, #23]
            break;
 8006e9a:	e033      	b.n	8006f04 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8006e9c:	78fb      	ldrb	r3, [r7, #3]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d102      	bne.n	8006ea8 <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006ea6:	e02d      	b.n	8006f04 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8006ea8:	78fb      	ldrb	r3, [r7, #3]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d102      	bne.n	8006eb4 <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	75fb      	strb	r3, [r7, #23]
            break;
 8006eb2:	e027      	b.n	8006f04 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8006eb4:	78fb      	ldrb	r3, [r7, #3]
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d102      	bne.n	8006ec0 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	75fb      	strb	r3, [r7, #23]
            break;
 8006ebe:	e021      	b.n	8006f04 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006ec0:	78fb      	ldrb	r3, [r7, #3]
 8006ec2:	75fb      	strb	r3, [r7, #23]
            break;
 8006ec4:	e01e      	b.n	8006f04 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8006ec6:	78fb      	ldrb	r3, [r7, #3]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d102      	bne.n	8006ed2 <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006ecc:	2304      	movs	r3, #4
 8006ece:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006ed0:	e018      	b.n	8006f04 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8006ed2:	78fb      	ldrb	r3, [r7, #3]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d102      	bne.n	8006ede <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006ed8:	2304      	movs	r3, #4
 8006eda:	75fb      	strb	r3, [r7, #23]
            break;
 8006edc:	e012      	b.n	8006f04 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8006ede:	78fb      	ldrb	r3, [r7, #3]
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d102      	bne.n	8006eea <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006ee4:	2304      	movs	r3, #4
 8006ee6:	75fb      	strb	r3, [r7, #23]
            break;
 8006ee8:	e00c      	b.n	8006f04 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 8006eea:	78fb      	ldrb	r3, [r7, #3]
 8006eec:	2b03      	cmp	r3, #3
 8006eee:	d102      	bne.n	8006ef6 <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006ef0:	2304      	movs	r3, #4
 8006ef2:	75fb      	strb	r3, [r7, #23]
            break;
 8006ef4:	e006      	b.n	8006f04 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006ef6:	78fb      	ldrb	r3, [r7, #3]
 8006ef8:	75fb      	strb	r3, [r7, #23]
            break;
 8006efa:	e003      	b.n	8006f04 <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8006efc:	78fb      	ldrb	r3, [r7, #3]
 8006efe:	75fb      	strb	r3, [r7, #23]
            break;
 8006f00:	e000      	b.n	8006f04 <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 8006f02:	bf00      	nop
    }
  }

  if (ret == 0)
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d107      	bne.n	8006f1a <lsm6dso_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006f0a:	f107 0208 	add.w	r2, r7, #8
 8006f0e:	2301      	movs	r3, #1
 8006f10:	2111      	movs	r1, #17
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f7ff fd2c 	bl	8006970 <lsm6dso_read_reg>
 8006f18:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10f      	bne.n	8006f40 <lsm6dso_gy_data_rate_set+0x1ec>
  {
    reg.odr_g = (uint8_t) odr_gy;
 8006f20:	7dfb      	ldrb	r3, [r7, #23]
 8006f22:	f003 030f 	and.w	r3, r3, #15
 8006f26:	b2da      	uxtb	r2, r3
 8006f28:	7a3b      	ldrb	r3, [r7, #8]
 8006f2a:	f362 1307 	bfi	r3, r2, #4, #4
 8006f2e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006f30:	f107 0208 	add.w	r2, r7, #8
 8006f34:	2301      	movs	r3, #1
 8006f36:	2111      	movs	r1, #17
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f7ff fd31 	bl	80069a0 <lsm6dso_write_reg>
 8006f3e:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8006f40:	693b      	ldr	r3, [r7, #16]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3718      	adds	r7, #24
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop

08006f4c <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006f56:	f107 0208 	add.w	r2, r7, #8
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	2111      	movs	r1, #17
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7ff fd06 	bl	8006970 <lsm6dso_read_reg>
 8006f64:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8006f66:	7a3b      	ldrb	r3, [r7, #8]
 8006f68:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b0a      	cmp	r3, #10
 8006f70:	d844      	bhi.n	8006ffc <lsm6dso_gy_data_rate_get+0xb0>
 8006f72:	a201      	add	r2, pc, #4	; (adr r2, 8006f78 <lsm6dso_gy_data_rate_get+0x2c>)
 8006f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f78:	08006fa5 	.word	0x08006fa5
 8006f7c:	08006fad 	.word	0x08006fad
 8006f80:	08006fb5 	.word	0x08006fb5
 8006f84:	08006fbd 	.word	0x08006fbd
 8006f88:	08006fc5 	.word	0x08006fc5
 8006f8c:	08006fcd 	.word	0x08006fcd
 8006f90:	08006fd5 	.word	0x08006fd5
 8006f94:	08006fdd 	.word	0x08006fdd
 8006f98:	08006fe5 	.word	0x08006fe5
 8006f9c:	08006fed 	.word	0x08006fed
 8006fa0:	08006ff5 	.word	0x08006ff5
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	701a      	strb	r2, [r3, #0]
      break;
 8006faa:	e02b      	b.n	8007004 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	701a      	strb	r2, [r3, #0]
      break;
 8006fb2:	e027      	b.n	8007004 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	2202      	movs	r2, #2
 8006fb8:	701a      	strb	r2, [r3, #0]
      break;
 8006fba:	e023      	b.n	8007004 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	2203      	movs	r2, #3
 8006fc0:	701a      	strb	r2, [r3, #0]
      break;
 8006fc2:	e01f      	b.n	8007004 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	2204      	movs	r2, #4
 8006fc8:	701a      	strb	r2, [r3, #0]
      break;
 8006fca:	e01b      	b.n	8007004 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	2205      	movs	r2, #5
 8006fd0:	701a      	strb	r2, [r3, #0]
      break;
 8006fd2:	e017      	b.n	8007004 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	2206      	movs	r2, #6
 8006fd8:	701a      	strb	r2, [r3, #0]
      break;
 8006fda:	e013      	b.n	8007004 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	2207      	movs	r2, #7
 8006fe0:	701a      	strb	r2, [r3, #0]
      break;
 8006fe2:	e00f      	b.n	8007004 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	2208      	movs	r2, #8
 8006fe8:	701a      	strb	r2, [r3, #0]
      break;
 8006fea:	e00b      	b.n	8007004 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	2209      	movs	r2, #9
 8006ff0:	701a      	strb	r2, [r3, #0]
      break;
 8006ff2:	e007      	b.n	8007004 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	220a      	movs	r2, #10
 8006ff8:	701a      	strb	r2, [r3, #0]
      break;
 8006ffa:	e003      	b.n	8007004 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	2200      	movs	r2, #0
 8007000:	701a      	strb	r2, [r3, #0]
      break;
 8007002:	bf00      	nop
  }

  return ret;
 8007004:	68fb      	ldr	r3, [r7, #12]
}
 8007006:	4618      	mov	r0, r3
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop

08007010 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	460b      	mov	r3, r1
 800701a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800701c:	f107 0208 	add.w	r2, r7, #8
 8007020:	2301      	movs	r3, #1
 8007022:	2112      	movs	r1, #18
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7ff fca3 	bl	8006970 <lsm6dso_read_reg>
 800702a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10f      	bne.n	8007052 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8007032:	78fb      	ldrb	r3, [r7, #3]
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	b2da      	uxtb	r2, r3
 800703a:	7a3b      	ldrb	r3, [r7, #8]
 800703c:	f362 1386 	bfi	r3, r2, #6, #1
 8007040:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007042:	f107 0208 	add.w	r2, r7, #8
 8007046:	2301      	movs	r3, #1
 8007048:	2112      	movs	r1, #18
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f7ff fca8 	bl	80069a0 <lsm6dso_write_reg>
 8007050:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007052:	68fb      	ldr	r3, [r7, #12]
}
 8007054:	4618      	mov	r0, r3
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b086      	sub	sp, #24
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8007066:	f107 020c 	add.w	r2, r7, #12
 800706a:	2306      	movs	r3, #6
 800706c:	2122      	movs	r1, #34	; 0x22
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7ff fc7e 	bl	8006970 <lsm6dso_read_reg>
 8007074:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007076:	7b7b      	ldrb	r3, [r7, #13]
 8007078:	b21a      	sxth	r2, r3
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007084:	b29b      	uxth	r3, r3
 8007086:	021b      	lsls	r3, r3, #8
 8007088:	b29a      	uxth	r2, r3
 800708a:	7b3b      	ldrb	r3, [r7, #12]
 800708c:	b29b      	uxth	r3, r3
 800708e:	4413      	add	r3, r2
 8007090:	b29b      	uxth	r3, r3
 8007092:	b21a      	sxth	r2, r3
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007098:	7bfa      	ldrb	r2, [r7, #15]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	3302      	adds	r3, #2
 800709e:	b212      	sxth	r2, r2
 80070a0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	3302      	adds	r3, #2
 80070a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	021b      	lsls	r3, r3, #8
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	7bbb      	ldrb	r3, [r7, #14]
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	4413      	add	r3, r2
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	3302      	adds	r3, #2
 80070bc:	b212      	sxth	r2, r2
 80070be:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80070c0:	7c7a      	ldrb	r2, [r7, #17]
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	3304      	adds	r3, #4
 80070c6:	b212      	sxth	r2, r2
 80070c8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	3304      	adds	r3, #4
 80070ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	021b      	lsls	r3, r3, #8
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	7c3b      	ldrb	r3, [r7, #16]
 80070da:	b29b      	uxth	r3, r3
 80070dc:	4413      	add	r3, r2
 80070de:	b29a      	uxth	r2, r3
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	3304      	adds	r3, #4
 80070e4:	b212      	sxth	r2, r2
 80070e6:	801a      	strh	r2, [r3, #0]

  return ret;
 80070e8:	697b      	ldr	r3, [r7, #20]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3718      	adds	r7, #24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b086      	sub	sp, #24
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
 80070fa:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 80070fc:	f107 020c 	add.w	r2, r7, #12
 8007100:	2306      	movs	r3, #6
 8007102:	2128      	movs	r1, #40	; 0x28
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f7ff fc33 	bl	8006970 <lsm6dso_read_reg>
 800710a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800710c:	7b7b      	ldrb	r3, [r7, #13]
 800710e:	b21a      	sxth	r2, r3
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	f9b3 3000 	ldrsh.w	r3, [r3]
 800711a:	b29b      	uxth	r3, r3
 800711c:	021b      	lsls	r3, r3, #8
 800711e:	b29a      	uxth	r2, r3
 8007120:	7b3b      	ldrb	r3, [r7, #12]
 8007122:	b29b      	uxth	r3, r3
 8007124:	4413      	add	r3, r2
 8007126:	b29b      	uxth	r3, r3
 8007128:	b21a      	sxth	r2, r3
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800712e:	7bfa      	ldrb	r2, [r7, #15]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	3302      	adds	r3, #2
 8007134:	b212      	sxth	r2, r2
 8007136:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	3302      	adds	r3, #2
 800713c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007140:	b29b      	uxth	r3, r3
 8007142:	021b      	lsls	r3, r3, #8
 8007144:	b29a      	uxth	r2, r3
 8007146:	7bbb      	ldrb	r3, [r7, #14]
 8007148:	b29b      	uxth	r3, r3
 800714a:	4413      	add	r3, r2
 800714c:	b29a      	uxth	r2, r3
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	3302      	adds	r3, #2
 8007152:	b212      	sxth	r2, r2
 8007154:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007156:	7c7a      	ldrb	r2, [r7, #17]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	3304      	adds	r3, #4
 800715c:	b212      	sxth	r2, r2
 800715e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	3304      	adds	r3, #4
 8007164:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007168:	b29b      	uxth	r3, r3
 800716a:	021b      	lsls	r3, r3, #8
 800716c:	b29a      	uxth	r2, r3
 800716e:	7c3b      	ldrb	r3, [r7, #16]
 8007170:	b29b      	uxth	r3, r3
 8007172:	4413      	add	r3, r2
 8007174:	b29a      	uxth	r2, r3
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	3304      	adds	r3, #4
 800717a:	b212      	sxth	r2, r2
 800717c:	801a      	strh	r2, [r3, #0]

  return ret;
 800717e:	697b      	ldr	r3, [r7, #20]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3718      	adds	r7, #24
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	460b      	mov	r3, r1
 8007192:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8007194:	f107 0208 	add.w	r2, r7, #8
 8007198:	2301      	movs	r3, #1
 800719a:	2101      	movs	r1, #1
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7ff fbe7 	bl	8006970 <lsm6dso_read_reg>
 80071a2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10f      	bne.n	80071ca <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 80071aa:	78fb      	ldrb	r3, [r7, #3]
 80071ac:	f003 0303 	and.w	r3, r3, #3
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	7a3b      	ldrb	r3, [r7, #8]
 80071b4:	f362 1387 	bfi	r3, r2, #6, #2
 80071b8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80071ba:	f107 0208 	add.w	r2, r7, #8
 80071be:	2301      	movs	r3, #1
 80071c0:	2101      	movs	r1, #1
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f7ff fbec 	bl	80069a0 <lsm6dso_write_reg>
 80071c8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80071ca:	68fb      	ldr	r3, [r7, #12]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	460b      	mov	r3, r1
 80071de:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80071e0:	f107 0208 	add.w	r2, r7, #8
 80071e4:	2301      	movs	r3, #1
 80071e6:	2112      	movs	r1, #18
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f7ff fbc1 	bl	8006970 <lsm6dso_read_reg>
 80071ee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10f      	bne.n	8007216 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 80071f6:	78fb      	ldrb	r3, [r7, #3]
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	7a3b      	ldrb	r3, [r7, #8]
 8007200:	f362 0382 	bfi	r3, r2, #2, #1
 8007204:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007206:	f107 0208 	add.w	r2, r7, #8
 800720a:	2301      	movs	r3, #1
 800720c:	2112      	movs	r1, #18
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f7ff fbc6 	bl	80069a0 <lsm6dso_write_reg>
 8007214:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007216:	68fb      	ldr	r3, [r7, #12]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	460b      	mov	r3, r1
 800722a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 800722c:	f107 020c 	add.w	r2, r7, #12
 8007230:	2301      	movs	r3, #1
 8007232:	2118      	movs	r1, #24
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7ff fb9b 	bl	8006970 <lsm6dso_read_reg>
 800723a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d111      	bne.n	8007266 <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8007242:	78fb      	ldrb	r3, [r7, #3]
 8007244:	09db      	lsrs	r3, r3, #7
 8007246:	b2db      	uxtb	r3, r3
 8007248:	f003 0301 	and.w	r3, r3, #1
 800724c:	b2da      	uxtb	r2, r3
 800724e:	7b3b      	ldrb	r3, [r7, #12]
 8007250:	f362 0341 	bfi	r3, r2, #1, #1
 8007254:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8007256:	f107 020c 	add.w	r2, r7, #12
 800725a:	2301      	movs	r3, #1
 800725c:	2118      	movs	r1, #24
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f7ff fb9e 	bl	80069a0 <lsm6dso_write_reg>
 8007264:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d107      	bne.n	800727c <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 800726c:	f107 0210 	add.w	r2, r7, #16
 8007270:	2301      	movs	r3, #1
 8007272:	2162      	movs	r1, #98	; 0x62
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f7ff fb7b 	bl	8006970 <lsm6dso_read_reg>
 800727a:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10f      	bne.n	80072a2 <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8007282:	78fb      	ldrb	r3, [r7, #3]
 8007284:	f003 0303 	and.w	r3, r3, #3
 8007288:	b2da      	uxtb	r2, r3
 800728a:	7c3b      	ldrb	r3, [r7, #16]
 800728c:	f362 03c4 	bfi	r3, r2, #3, #2
 8007290:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8007292:	f107 0210 	add.w	r2, r7, #16
 8007296:	2301      	movs	r3, #1
 8007298:	2162      	movs	r1, #98	; 0x62
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7ff fb80 	bl	80069a0 <lsm6dso_write_reg>
 80072a0:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 80072a2:	697b      	ldr	r3, [r7, #20]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3718      	adds	r7, #24
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	460b      	mov	r3, r1
 80072b6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 80072b8:	f107 0208 	add.w	r2, r7, #8
 80072bc:	2301      	movs	r3, #1
 80072be:	210a      	movs	r1, #10
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f7ff fb55 	bl	8006970 <lsm6dso_read_reg>
 80072c6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10f      	bne.n	80072ee <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 80072ce:	78fb      	ldrb	r3, [r7, #3]
 80072d0:	f003 0307 	and.w	r3, r3, #7
 80072d4:	b2da      	uxtb	r2, r3
 80072d6:	7a3b      	ldrb	r3, [r7, #8]
 80072d8:	f362 0302 	bfi	r3, r2, #0, #3
 80072dc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 80072de:	f107 0208 	add.w	r2, r7, #8
 80072e2:	2301      	movs	r3, #1
 80072e4:	210a      	movs	r1, #10
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f7ff fb5a 	bl	80069a0 <lsm6dso_write_reg>
 80072ec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80072ee:	68fb      	ldr	r3, [r7, #12]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8007302:	2102      	movs	r1, #2
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f7ff ff3f 	bl	8007188 <lsm6dso_mem_bank_set>
 800730a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d106      	bne.n	8007320 <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8007312:	2302      	movs	r3, #2
 8007314:	683a      	ldr	r2, [r7, #0]
 8007316:	2146      	movs	r1, #70	; 0x46
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f7ff fb29 	bl	8006970 <lsm6dso_read_reg>
 800731e:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d104      	bne.n	8007330 <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007326:	2100      	movs	r1, #0
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f7ff ff2d 	bl	8007188 <lsm6dso_mem_bank_set>
 800732e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007330:	68fb      	ldr	r3, [r7, #12]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
	...

0800733c <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8007346:	2102      	movs	r1, #2
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7ff ff1d 	bl	8007188 <lsm6dso_mem_bank_set>
 800734e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d107      	bne.n	8007366 <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8007356:	f107 0208 	add.w	r2, r7, #8
 800735a:	2301      	movs	r3, #1
 800735c:	215f      	movs	r1, #95	; 0x5f
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f7ff fb06 	bl	8006970 <lsm6dso_read_reg>
 8007364:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d12a      	bne.n	80073c2 <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 800736c:	7a3b      	ldrb	r3, [r7, #8]
 800736e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007372:	b2db      	uxtb	r3, r3
 8007374:	2b03      	cmp	r3, #3
 8007376:	d81b      	bhi.n	80073b0 <lsm6dso_fsm_data_rate_get+0x74>
 8007378:	a201      	add	r2, pc, #4	; (adr r2, 8007380 <lsm6dso_fsm_data_rate_get+0x44>)
 800737a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737e:	bf00      	nop
 8007380:	08007391 	.word	0x08007391
 8007384:	08007399 	.word	0x08007399
 8007388:	080073a1 	.word	0x080073a1
 800738c:	080073a9 	.word	0x080073a9
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	2200      	movs	r2, #0
 8007394:	701a      	strb	r2, [r3, #0]
        break;
 8007396:	e00f      	b.n	80073b8 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	2201      	movs	r2, #1
 800739c:	701a      	strb	r2, [r3, #0]
        break;
 800739e:	e00b      	b.n	80073b8 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	2202      	movs	r2, #2
 80073a4:	701a      	strb	r2, [r3, #0]
        break;
 80073a6:	e007      	b.n	80073b8 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	2203      	movs	r2, #3
 80073ac:	701a      	strb	r2, [r3, #0]
        break;
 80073ae:	e003      	b.n	80073b8 <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	2200      	movs	r2, #0
 80073b4:	701a      	strb	r2, [r3, #0]
        break;
 80073b6:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80073b8:	2100      	movs	r1, #0
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f7ff fee4 	bl	8007188 <lsm6dso_mem_bank_set>
 80073c0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80073c2:	68fb      	ldr	r3, [r7, #12]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80073d2:	2300      	movs	r3, #0
 80073d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80073d6:	2003      	movs	r0, #3
 80073d8:	f000 f960 	bl	800769c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80073dc:	200f      	movs	r0, #15
 80073de:	f000 f80d 	bl	80073fc <HAL_InitTick>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d002      	beq.n	80073ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	71fb      	strb	r3, [r7, #7]
 80073ec:	e001      	b.n	80073f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80073ee:	f7fd ff91 	bl	8005314 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80073f2:	79fb      	ldrb	r3, [r7, #7]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007404:	2300      	movs	r3, #0
 8007406:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8007408:	4b17      	ldr	r3, [pc, #92]	; (8007468 <HAL_InitTick+0x6c>)
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d023      	beq.n	8007458 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8007410:	4b16      	ldr	r3, [pc, #88]	; (800746c <HAL_InitTick+0x70>)
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	4b14      	ldr	r3, [pc, #80]	; (8007468 <HAL_InitTick+0x6c>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	4619      	mov	r1, r3
 800741a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800741e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007422:	fbb2 f3f3 	udiv	r3, r2, r3
 8007426:	4618      	mov	r0, r3
 8007428:	f000 f96d 	bl	8007706 <HAL_SYSTICK_Config>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d10f      	bne.n	8007452 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2b0f      	cmp	r3, #15
 8007436:	d809      	bhi.n	800744c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007438:	2200      	movs	r2, #0
 800743a:	6879      	ldr	r1, [r7, #4]
 800743c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007440:	f000 f937 	bl	80076b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007444:	4a0a      	ldr	r2, [pc, #40]	; (8007470 <HAL_InitTick+0x74>)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6013      	str	r3, [r2, #0]
 800744a:	e007      	b.n	800745c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	73fb      	strb	r3, [r7, #15]
 8007450:	e004      	b.n	800745c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	73fb      	strb	r3, [r7, #15]
 8007456:	e001      	b.n	800745c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800745c:	7bfb      	ldrb	r3, [r7, #15]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	2000000c 	.word	0x2000000c
 800746c:	20000004 	.word	0x20000004
 8007470:	20000008 	.word	0x20000008

08007474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007474:	b480      	push	{r7}
 8007476:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007478:	4b06      	ldr	r3, [pc, #24]	; (8007494 <HAL_IncTick+0x20>)
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	461a      	mov	r2, r3
 800747e:	4b06      	ldr	r3, [pc, #24]	; (8007498 <HAL_IncTick+0x24>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4413      	add	r3, r2
 8007484:	4a04      	ldr	r2, [pc, #16]	; (8007498 <HAL_IncTick+0x24>)
 8007486:	6013      	str	r3, [r2, #0]
}
 8007488:	bf00      	nop
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	2000000c 	.word	0x2000000c
 8007498:	20000f04 	.word	0x20000f04

0800749c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800749c:	b480      	push	{r7}
 800749e:	af00      	add	r7, sp, #0
  return uwTick;
 80074a0:	4b03      	ldr	r3, [pc, #12]	; (80074b0 <HAL_GetTick+0x14>)
 80074a2:	681b      	ldr	r3, [r3, #0]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	20000f04 	.word	0x20000f04

080074b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80074bc:	f7ff ffee 	bl	800749c <HAL_GetTick>
 80074c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074cc:	d005      	beq.n	80074da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80074ce:	4b0a      	ldr	r3, [pc, #40]	; (80074f8 <HAL_Delay+0x44>)
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	461a      	mov	r2, r3
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	4413      	add	r3, r2
 80074d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80074da:	bf00      	nop
 80074dc:	f7ff ffde 	bl	800749c <HAL_GetTick>
 80074e0:	4602      	mov	r2, r0
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d8f7      	bhi.n	80074dc <HAL_Delay+0x28>
  {
  }
}
 80074ec:	bf00      	nop
 80074ee:	bf00      	nop
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	2000000c 	.word	0x2000000c

080074fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f003 0307 	and.w	r3, r3, #7
 800750a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800750c:	4b0c      	ldr	r3, [pc, #48]	; (8007540 <__NVIC_SetPriorityGrouping+0x44>)
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007518:	4013      	ands	r3, r2
 800751a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007524:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800752c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800752e:	4a04      	ldr	r2, [pc, #16]	; (8007540 <__NVIC_SetPriorityGrouping+0x44>)
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	60d3      	str	r3, [r2, #12]
}
 8007534:	bf00      	nop
 8007536:	3714      	adds	r7, #20
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr
 8007540:	e000ed00 	.word	0xe000ed00

08007544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007544:	b480      	push	{r7}
 8007546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007548:	4b04      	ldr	r3, [pc, #16]	; (800755c <__NVIC_GetPriorityGrouping+0x18>)
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	0a1b      	lsrs	r3, r3, #8
 800754e:	f003 0307 	and.w	r3, r3, #7
}
 8007552:	4618      	mov	r0, r3
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr
 800755c:	e000ed00 	.word	0xe000ed00

08007560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	4603      	mov	r3, r0
 8007568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800756a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800756e:	2b00      	cmp	r3, #0
 8007570:	db0b      	blt.n	800758a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007572:	79fb      	ldrb	r3, [r7, #7]
 8007574:	f003 021f 	and.w	r2, r3, #31
 8007578:	4907      	ldr	r1, [pc, #28]	; (8007598 <__NVIC_EnableIRQ+0x38>)
 800757a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800757e:	095b      	lsrs	r3, r3, #5
 8007580:	2001      	movs	r0, #1
 8007582:	fa00 f202 	lsl.w	r2, r0, r2
 8007586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800758a:	bf00      	nop
 800758c:	370c      	adds	r7, #12
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	e000e100 	.word	0xe000e100

0800759c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	4603      	mov	r3, r0
 80075a4:	6039      	str	r1, [r7, #0]
 80075a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	db0a      	blt.n	80075c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	b2da      	uxtb	r2, r3
 80075b4:	490c      	ldr	r1, [pc, #48]	; (80075e8 <__NVIC_SetPriority+0x4c>)
 80075b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075ba:	0112      	lsls	r2, r2, #4
 80075bc:	b2d2      	uxtb	r2, r2
 80075be:	440b      	add	r3, r1
 80075c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80075c4:	e00a      	b.n	80075dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	4908      	ldr	r1, [pc, #32]	; (80075ec <__NVIC_SetPriority+0x50>)
 80075cc:	79fb      	ldrb	r3, [r7, #7]
 80075ce:	f003 030f 	and.w	r3, r3, #15
 80075d2:	3b04      	subs	r3, #4
 80075d4:	0112      	lsls	r2, r2, #4
 80075d6:	b2d2      	uxtb	r2, r2
 80075d8:	440b      	add	r3, r1
 80075da:	761a      	strb	r2, [r3, #24]
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr
 80075e8:	e000e100 	.word	0xe000e100
 80075ec:	e000ed00 	.word	0xe000ed00

080075f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b089      	sub	sp, #36	; 0x24
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f003 0307 	and.w	r3, r3, #7
 8007602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	f1c3 0307 	rsb	r3, r3, #7
 800760a:	2b04      	cmp	r3, #4
 800760c:	bf28      	it	cs
 800760e:	2304      	movcs	r3, #4
 8007610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	3304      	adds	r3, #4
 8007616:	2b06      	cmp	r3, #6
 8007618:	d902      	bls.n	8007620 <NVIC_EncodePriority+0x30>
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	3b03      	subs	r3, #3
 800761e:	e000      	b.n	8007622 <NVIC_EncodePriority+0x32>
 8007620:	2300      	movs	r3, #0
 8007622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007624:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	fa02 f303 	lsl.w	r3, r2, r3
 800762e:	43da      	mvns	r2, r3
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	401a      	ands	r2, r3
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007638:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	fa01 f303 	lsl.w	r3, r1, r3
 8007642:	43d9      	mvns	r1, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007648:	4313      	orrs	r3, r2
         );
}
 800764a:	4618      	mov	r0, r3
 800764c:	3724      	adds	r7, #36	; 0x24
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
	...

08007658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	3b01      	subs	r3, #1
 8007664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007668:	d301      	bcc.n	800766e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800766a:	2301      	movs	r3, #1
 800766c:	e00f      	b.n	800768e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800766e:	4a0a      	ldr	r2, [pc, #40]	; (8007698 <SysTick_Config+0x40>)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	3b01      	subs	r3, #1
 8007674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007676:	210f      	movs	r1, #15
 8007678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800767c:	f7ff ff8e 	bl	800759c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007680:	4b05      	ldr	r3, [pc, #20]	; (8007698 <SysTick_Config+0x40>)
 8007682:	2200      	movs	r2, #0
 8007684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007686:	4b04      	ldr	r3, [pc, #16]	; (8007698 <SysTick_Config+0x40>)
 8007688:	2207      	movs	r2, #7
 800768a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3708      	adds	r7, #8
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	e000e010 	.word	0xe000e010

0800769c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f7ff ff29 	bl	80074fc <__NVIC_SetPriorityGrouping>
}
 80076aa:	bf00      	nop
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b086      	sub	sp, #24
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	4603      	mov	r3, r0
 80076ba:	60b9      	str	r1, [r7, #8]
 80076bc:	607a      	str	r2, [r7, #4]
 80076be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80076c0:	2300      	movs	r3, #0
 80076c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80076c4:	f7ff ff3e 	bl	8007544 <__NVIC_GetPriorityGrouping>
 80076c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	68b9      	ldr	r1, [r7, #8]
 80076ce:	6978      	ldr	r0, [r7, #20]
 80076d0:	f7ff ff8e 	bl	80075f0 <NVIC_EncodePriority>
 80076d4:	4602      	mov	r2, r0
 80076d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076da:	4611      	mov	r1, r2
 80076dc:	4618      	mov	r0, r3
 80076de:	f7ff ff5d 	bl	800759c <__NVIC_SetPriority>
}
 80076e2:	bf00      	nop
 80076e4:	3718      	adds	r7, #24
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b082      	sub	sp, #8
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	4603      	mov	r3, r0
 80076f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80076f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7ff ff31 	bl	8007560 <__NVIC_EnableIRQ>
}
 80076fe:	bf00      	nop
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b082      	sub	sp, #8
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f7ff ffa2 	bl	8007658 <SysTick_Config>
 8007714:	4603      	mov	r3, r0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
	...

08007720 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d101      	bne.n	8007732 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e08d      	b.n	800784e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	461a      	mov	r2, r3
 8007738:	4b47      	ldr	r3, [pc, #284]	; (8007858 <HAL_DMA_Init+0x138>)
 800773a:	429a      	cmp	r2, r3
 800773c:	d80f      	bhi.n	800775e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	461a      	mov	r2, r3
 8007744:	4b45      	ldr	r3, [pc, #276]	; (800785c <HAL_DMA_Init+0x13c>)
 8007746:	4413      	add	r3, r2
 8007748:	4a45      	ldr	r2, [pc, #276]	; (8007860 <HAL_DMA_Init+0x140>)
 800774a:	fba2 2303 	umull	r2, r3, r2, r3
 800774e:	091b      	lsrs	r3, r3, #4
 8007750:	009a      	lsls	r2, r3, #2
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a42      	ldr	r2, [pc, #264]	; (8007864 <HAL_DMA_Init+0x144>)
 800775a:	641a      	str	r2, [r3, #64]	; 0x40
 800775c:	e00e      	b.n	800777c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	461a      	mov	r2, r3
 8007764:	4b40      	ldr	r3, [pc, #256]	; (8007868 <HAL_DMA_Init+0x148>)
 8007766:	4413      	add	r3, r2
 8007768:	4a3d      	ldr	r2, [pc, #244]	; (8007860 <HAL_DMA_Init+0x140>)
 800776a:	fba2 2303 	umull	r2, r3, r2, r3
 800776e:	091b      	lsrs	r3, r3, #4
 8007770:	009a      	lsls	r2, r3, #2
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a3c      	ldr	r2, [pc, #240]	; (800786c <HAL_DMA_Init+0x14c>)
 800777a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2202      	movs	r2, #2
 8007780:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007796:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80077a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80077ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80077b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fa72 	bl	8007cb8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077dc:	d102      	bne.n	80077e4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685a      	ldr	r2, [r3, #4]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ec:	b2d2      	uxtb	r2, r2
 80077ee:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80077f8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d010      	beq.n	8007824 <HAL_DMA_Init+0x104>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	2b04      	cmp	r3, #4
 8007808:	d80c      	bhi.n	8007824 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fa92 	bl	8007d34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007814:	2200      	movs	r2, #0
 8007816:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007820:	605a      	str	r2, [r3, #4]
 8007822:	e008      	b.n	8007836 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	40020407 	.word	0x40020407
 800785c:	bffdfff8 	.word	0xbffdfff8
 8007860:	cccccccd 	.word	0xcccccccd
 8007864:	40020000 	.word	0x40020000
 8007868:	bffdfbf8 	.word	0xbffdfbf8
 800786c:	40020400 	.word	0x40020400

08007870 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	607a      	str	r2, [r7, #4]
 800787c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800787e:	2300      	movs	r3, #0
 8007880:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007888:	2b01      	cmp	r3, #1
 800788a:	d101      	bne.n	8007890 <HAL_DMA_Start_IT+0x20>
 800788c:	2302      	movs	r3, #2
 800788e:	e066      	b.n	800795e <HAL_DMA_Start_IT+0xee>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d155      	bne.n	8007950 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2202      	movs	r2, #2
 80078a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f022 0201 	bic.w	r2, r2, #1
 80078c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	68b9      	ldr	r1, [r7, #8]
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f000 f9b6 	bl	8007c3a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d008      	beq.n	80078e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f042 020e 	orr.w	r2, r2, #14
 80078e4:	601a      	str	r2, [r3, #0]
 80078e6:	e00f      	b.n	8007908 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f022 0204 	bic.w	r2, r2, #4
 80078f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f042 020a 	orr.w	r2, r2, #10
 8007906:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d007      	beq.n	8007926 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007920:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007924:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800792a:	2b00      	cmp	r3, #0
 800792c:	d007      	beq.n	800793e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007938:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800793c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f042 0201 	orr.w	r2, r2, #1
 800794c:	601a      	str	r2, [r3, #0]
 800794e:	e005      	b.n	800795c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007958:	2302      	movs	r3, #2
 800795a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800795c:	7dfb      	ldrb	r3, [r7, #23]
}
 800795e:	4618      	mov	r0, r3
 8007960:	3718      	adds	r7, #24
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007966:	b480      	push	{r7}
 8007968:	b085      	sub	sp, #20
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800796e:	2300      	movs	r3, #0
 8007970:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007978:	b2db      	uxtb	r3, r3
 800797a:	2b02      	cmp	r3, #2
 800797c:	d008      	beq.n	8007990 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2204      	movs	r2, #4
 8007982:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	e040      	b.n	8007a12 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f022 020e 	bic.w	r2, r2, #14
 800799e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079ae:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f022 0201 	bic.w	r2, r2, #1
 80079be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079c4:	f003 021c 	and.w	r2, r3, #28
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079cc:	2101      	movs	r1, #1
 80079ce:	fa01 f202 	lsl.w	r2, r1, r2
 80079d2:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80079dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00c      	beq.n	8007a00 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80079fe:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8007a10:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3714      	adds	r7, #20
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr

08007a1e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b084      	sub	sp, #16
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d005      	beq.n	8007a42 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2204      	movs	r2, #4
 8007a3a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	73fb      	strb	r3, [r7, #15]
 8007a40:	e047      	b.n	8007ad2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f022 020e 	bic.w	r2, r2, #14
 8007a50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f022 0201 	bic.w	r2, r2, #1
 8007a60:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a76:	f003 021c 	and.w	r2, r3, #28
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7e:	2101      	movs	r1, #1
 8007a80:	fa01 f202 	lsl.w	r2, r1, r2
 8007a84:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007a8e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00c      	beq.n	8007ab2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aa2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007aa6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007ab0:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d003      	beq.n	8007ad2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	4798      	blx	r3
    }
  }
  return status;
 8007ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007af8:	f003 031c 	and.w	r3, r3, #28
 8007afc:	2204      	movs	r2, #4
 8007afe:	409a      	lsls	r2, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	4013      	ands	r3, r2
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d026      	beq.n	8007b56 <HAL_DMA_IRQHandler+0x7a>
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	f003 0304 	and.w	r3, r3, #4
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d021      	beq.n	8007b56 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 0320 	and.w	r3, r3, #32
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d107      	bne.n	8007b30 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f022 0204 	bic.w	r2, r2, #4
 8007b2e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b34:	f003 021c 	and.w	r2, r3, #28
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3c:	2104      	movs	r1, #4
 8007b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8007b42:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d071      	beq.n	8007c30 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007b54:	e06c      	b.n	8007c30 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b5a:	f003 031c 	and.w	r3, r3, #28
 8007b5e:	2202      	movs	r2, #2
 8007b60:	409a      	lsls	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	4013      	ands	r3, r2
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d02e      	beq.n	8007bc8 <HAL_DMA_IRQHandler+0xec>
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	f003 0302 	and.w	r3, r3, #2
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d029      	beq.n	8007bc8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 0320 	and.w	r3, r3, #32
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10b      	bne.n	8007b9a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f022 020a 	bic.w	r2, r2, #10
 8007b90:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b9e:	f003 021c 	and.w	r2, r3, #28
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba6:	2102      	movs	r1, #2
 8007ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8007bac:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d038      	beq.n	8007c30 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007bc6:	e033      	b.n	8007c30 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bcc:	f003 031c 	and.w	r3, r3, #28
 8007bd0:	2208      	movs	r2, #8
 8007bd2:	409a      	lsls	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d02a      	beq.n	8007c32 <HAL_DMA_IRQHandler+0x156>
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	f003 0308 	and.w	r3, r3, #8
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d025      	beq.n	8007c32 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f022 020e 	bic.w	r2, r2, #14
 8007bf4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bfa:	f003 021c 	and.w	r2, r3, #28
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c02:	2101      	movs	r1, #1
 8007c04:	fa01 f202 	lsl.w	r2, r1, r2
 8007c08:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d004      	beq.n	8007c32 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007c30:	bf00      	nop
 8007c32:	bf00      	nop
}
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b085      	sub	sp, #20
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	60f8      	str	r0, [r7, #12]
 8007c42:	60b9      	str	r1, [r7, #8]
 8007c44:	607a      	str	r2, [r7, #4]
 8007c46:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007c50:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d004      	beq.n	8007c64 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007c62:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c68:	f003 021c 	and.w	r2, r3, #28
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c70:	2101      	movs	r1, #1
 8007c72:	fa01 f202 	lsl.w	r2, r1, r2
 8007c76:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	2b10      	cmp	r3, #16
 8007c86:	d108      	bne.n	8007c9a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007c98:	e007      	b.n	8007caa <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68ba      	ldr	r2, [r7, #8]
 8007ca0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	60da      	str	r2, [r3, #12]
}
 8007caa:	bf00      	nop
 8007cac:	3714      	adds	r7, #20
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
	...

08007cb8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	4b17      	ldr	r3, [pc, #92]	; (8007d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d80a      	bhi.n	8007ce2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd0:	089b      	lsrs	r3, r3, #2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007cd8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	6493      	str	r3, [r2, #72]	; 0x48
 8007ce0:	e007      	b.n	8007cf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ce6:	089b      	lsrs	r3, r3, #2
 8007ce8:	009a      	lsls	r2, r3, #2
 8007cea:	4b0f      	ldr	r3, [pc, #60]	; (8007d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007cec:	4413      	add	r3, r2
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	3b08      	subs	r3, #8
 8007cfa:	4a0c      	ldr	r2, [pc, #48]	; (8007d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8007d00:	091b      	lsrs	r3, r3, #4
 8007d02:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a0a      	ldr	r2, [pc, #40]	; (8007d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007d08:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f003 031f 	and.w	r3, r3, #31
 8007d10:	2201      	movs	r2, #1
 8007d12:	409a      	lsls	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007d18:	bf00      	nop
 8007d1a:	3714      	adds	r7, #20
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr
 8007d24:	40020407 	.word	0x40020407
 8007d28:	4002081c 	.word	0x4002081c
 8007d2c:	cccccccd 	.word	0xcccccccd
 8007d30:	40020880 	.word	0x40020880

08007d34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	4b0b      	ldr	r3, [pc, #44]	; (8007d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007d48:	4413      	add	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a08      	ldr	r2, [pc, #32]	; (8007d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007d56:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	f003 0303 	and.w	r3, r3, #3
 8007d60:	2201      	movs	r2, #1
 8007d62:	409a      	lsls	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007d68:	bf00      	nop
 8007d6a:	3714      	adds	r7, #20
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr
 8007d74:	1000823f 	.word	0x1000823f
 8007d78:	40020940 	.word	0x40020940

08007d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b087      	sub	sp, #28
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007d86:	2300      	movs	r3, #0
 8007d88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007d8a:	e166      	b.n	800805a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	2101      	movs	r1, #1
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	fa01 f303 	lsl.w	r3, r1, r3
 8007d98:	4013      	ands	r3, r2
 8007d9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f000 8158 	beq.w	8008054 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	f003 0303 	and.w	r3, r3, #3
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d005      	beq.n	8007dbc <HAL_GPIO_Init+0x40>
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	f003 0303 	and.w	r3, r3, #3
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d130      	bne.n	8007e1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	005b      	lsls	r3, r3, #1
 8007dc6:	2203      	movs	r2, #3
 8007dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dcc:	43db      	mvns	r3, r3
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	68da      	ldr	r2, [r3, #12]
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	005b      	lsls	r3, r3, #1
 8007ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007df2:	2201      	movs	r2, #1
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfa:	43db      	mvns	r3, r3
 8007dfc:	693a      	ldr	r2, [r7, #16]
 8007dfe:	4013      	ands	r3, r2
 8007e00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	091b      	lsrs	r3, r3, #4
 8007e08:	f003 0201 	and.w	r2, r3, #1
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	693a      	ldr	r2, [r7, #16]
 8007e1c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	f003 0303 	and.w	r3, r3, #3
 8007e26:	2b03      	cmp	r3, #3
 8007e28:	d017      	beq.n	8007e5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	005b      	lsls	r3, r3, #1
 8007e34:	2203      	movs	r2, #3
 8007e36:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3a:	43db      	mvns	r3, r3
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	4013      	ands	r3, r2
 8007e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	689a      	ldr	r2, [r3, #8]
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	005b      	lsls	r3, r3, #1
 8007e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	693a      	ldr	r2, [r7, #16]
 8007e58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	f003 0303 	and.w	r3, r3, #3
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d123      	bne.n	8007eae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	08da      	lsrs	r2, r3, #3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	3208      	adds	r2, #8
 8007e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	f003 0307 	and.w	r3, r3, #7
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	220f      	movs	r2, #15
 8007e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e82:	43db      	mvns	r3, r3
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	4013      	ands	r3, r2
 8007e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	691a      	ldr	r2, [r3, #16]
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	f003 0307 	and.w	r3, r3, #7
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	fa02 f303 	lsl.w	r3, r2, r3
 8007e9a:	693a      	ldr	r2, [r7, #16]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	08da      	lsrs	r2, r3, #3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	3208      	adds	r2, #8
 8007ea8:	6939      	ldr	r1, [r7, #16]
 8007eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	005b      	lsls	r3, r3, #1
 8007eb8:	2203      	movs	r2, #3
 8007eba:	fa02 f303 	lsl.w	r3, r2, r3
 8007ebe:	43db      	mvns	r3, r3
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	4013      	ands	r3, r2
 8007ec4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	f003 0203 	and.w	r2, r3, #3
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	005b      	lsls	r3, r3, #1
 8007ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed6:	693a      	ldr	r2, [r7, #16]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 80b2 	beq.w	8008054 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ef0:	4b61      	ldr	r3, [pc, #388]	; (8008078 <HAL_GPIO_Init+0x2fc>)
 8007ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ef4:	4a60      	ldr	r2, [pc, #384]	; (8008078 <HAL_GPIO_Init+0x2fc>)
 8007ef6:	f043 0301 	orr.w	r3, r3, #1
 8007efa:	6613      	str	r3, [r2, #96]	; 0x60
 8007efc:	4b5e      	ldr	r3, [pc, #376]	; (8008078 <HAL_GPIO_Init+0x2fc>)
 8007efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f00:	f003 0301 	and.w	r3, r3, #1
 8007f04:	60bb      	str	r3, [r7, #8]
 8007f06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007f08:	4a5c      	ldr	r2, [pc, #368]	; (800807c <HAL_GPIO_Init+0x300>)
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	089b      	lsrs	r3, r3, #2
 8007f0e:	3302      	adds	r3, #2
 8007f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	f003 0303 	and.w	r3, r3, #3
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	220f      	movs	r2, #15
 8007f20:	fa02 f303 	lsl.w	r3, r2, r3
 8007f24:	43db      	mvns	r3, r3
 8007f26:	693a      	ldr	r2, [r7, #16]
 8007f28:	4013      	ands	r3, r2
 8007f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007f32:	d02b      	beq.n	8007f8c <HAL_GPIO_Init+0x210>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a52      	ldr	r2, [pc, #328]	; (8008080 <HAL_GPIO_Init+0x304>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d025      	beq.n	8007f88 <HAL_GPIO_Init+0x20c>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a51      	ldr	r2, [pc, #324]	; (8008084 <HAL_GPIO_Init+0x308>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d01f      	beq.n	8007f84 <HAL_GPIO_Init+0x208>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a50      	ldr	r2, [pc, #320]	; (8008088 <HAL_GPIO_Init+0x30c>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d019      	beq.n	8007f80 <HAL_GPIO_Init+0x204>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a4f      	ldr	r2, [pc, #316]	; (800808c <HAL_GPIO_Init+0x310>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d013      	beq.n	8007f7c <HAL_GPIO_Init+0x200>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4a4e      	ldr	r2, [pc, #312]	; (8008090 <HAL_GPIO_Init+0x314>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d00d      	beq.n	8007f78 <HAL_GPIO_Init+0x1fc>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a4d      	ldr	r2, [pc, #308]	; (8008094 <HAL_GPIO_Init+0x318>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d007      	beq.n	8007f74 <HAL_GPIO_Init+0x1f8>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a4c      	ldr	r2, [pc, #304]	; (8008098 <HAL_GPIO_Init+0x31c>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d101      	bne.n	8007f70 <HAL_GPIO_Init+0x1f4>
 8007f6c:	2307      	movs	r3, #7
 8007f6e:	e00e      	b.n	8007f8e <HAL_GPIO_Init+0x212>
 8007f70:	2308      	movs	r3, #8
 8007f72:	e00c      	b.n	8007f8e <HAL_GPIO_Init+0x212>
 8007f74:	2306      	movs	r3, #6
 8007f76:	e00a      	b.n	8007f8e <HAL_GPIO_Init+0x212>
 8007f78:	2305      	movs	r3, #5
 8007f7a:	e008      	b.n	8007f8e <HAL_GPIO_Init+0x212>
 8007f7c:	2304      	movs	r3, #4
 8007f7e:	e006      	b.n	8007f8e <HAL_GPIO_Init+0x212>
 8007f80:	2303      	movs	r3, #3
 8007f82:	e004      	b.n	8007f8e <HAL_GPIO_Init+0x212>
 8007f84:	2302      	movs	r3, #2
 8007f86:	e002      	b.n	8007f8e <HAL_GPIO_Init+0x212>
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e000      	b.n	8007f8e <HAL_GPIO_Init+0x212>
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	f002 0203 	and.w	r2, r2, #3
 8007f94:	0092      	lsls	r2, r2, #2
 8007f96:	4093      	lsls	r3, r2
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007f9e:	4937      	ldr	r1, [pc, #220]	; (800807c <HAL_GPIO_Init+0x300>)
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	089b      	lsrs	r3, r3, #2
 8007fa4:	3302      	adds	r3, #2
 8007fa6:	693a      	ldr	r2, [r7, #16]
 8007fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007fac:	4b3b      	ldr	r3, [pc, #236]	; (800809c <HAL_GPIO_Init+0x320>)
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	43db      	mvns	r3, r3
 8007fb6:	693a      	ldr	r2, [r7, #16]
 8007fb8:	4013      	ands	r3, r2
 8007fba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d003      	beq.n	8007fd0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8007fc8:	693a      	ldr	r2, [r7, #16]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007fd0:	4a32      	ldr	r2, [pc, #200]	; (800809c <HAL_GPIO_Init+0x320>)
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007fd6:	4b31      	ldr	r3, [pc, #196]	; (800809c <HAL_GPIO_Init+0x320>)
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	43db      	mvns	r3, r3
 8007fe0:	693a      	ldr	r2, [r7, #16]
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8007ff2:	693a      	ldr	r2, [r7, #16]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007ffa:	4a28      	ldr	r2, [pc, #160]	; (800809c <HAL_GPIO_Init+0x320>)
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008000:	4b26      	ldr	r3, [pc, #152]	; (800809c <HAL_GPIO_Init+0x320>)
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	43db      	mvns	r3, r3
 800800a:	693a      	ldr	r2, [r7, #16]
 800800c:	4013      	ands	r3, r2
 800800e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008018:	2b00      	cmp	r3, #0
 800801a:	d003      	beq.n	8008024 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	4313      	orrs	r3, r2
 8008022:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008024:	4a1d      	ldr	r2, [pc, #116]	; (800809c <HAL_GPIO_Init+0x320>)
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800802a:	4b1c      	ldr	r3, [pc, #112]	; (800809c <HAL_GPIO_Init+0x320>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	43db      	mvns	r3, r3
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	4013      	ands	r3, r2
 8008038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8008046:	693a      	ldr	r2, [r7, #16]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	4313      	orrs	r3, r2
 800804c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800804e:	4a13      	ldr	r2, [pc, #76]	; (800809c <HAL_GPIO_Init+0x320>)
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	3301      	adds	r3, #1
 8008058:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	fa22 f303 	lsr.w	r3, r2, r3
 8008064:	2b00      	cmp	r3, #0
 8008066:	f47f ae91 	bne.w	8007d8c <HAL_GPIO_Init+0x10>
  }
}
 800806a:	bf00      	nop
 800806c:	bf00      	nop
 800806e:	371c      	adds	r7, #28
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr
 8008078:	40021000 	.word	0x40021000
 800807c:	40010000 	.word	0x40010000
 8008080:	48000400 	.word	0x48000400
 8008084:	48000800 	.word	0x48000800
 8008088:	48000c00 	.word	0x48000c00
 800808c:	48001000 	.word	0x48001000
 8008090:	48001400 	.word	0x48001400
 8008094:	48001800 	.word	0x48001800
 8008098:	48001c00 	.word	0x48001c00
 800809c:	40010400 	.word	0x40010400

080080a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b087      	sub	sp, #28
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80080aa:	2300      	movs	r3, #0
 80080ac:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80080ae:	e0c9      	b.n	8008244 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80080b0:	2201      	movs	r2, #1
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	fa02 f303 	lsl.w	r3, r2, r3
 80080b8:	683a      	ldr	r2, [r7, #0]
 80080ba:	4013      	ands	r3, r2
 80080bc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f000 80bc 	beq.w	800823e <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80080c6:	4a66      	ldr	r2, [pc, #408]	; (8008260 <HAL_GPIO_DeInit+0x1c0>)
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	089b      	lsrs	r3, r3, #2
 80080cc:	3302      	adds	r3, #2
 80080ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080d2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	f003 0303 	and.w	r3, r3, #3
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	220f      	movs	r2, #15
 80080de:	fa02 f303 	lsl.w	r3, r2, r3
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	4013      	ands	r3, r2
 80080e6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80080ee:	d02b      	beq.n	8008148 <HAL_GPIO_DeInit+0xa8>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a5c      	ldr	r2, [pc, #368]	; (8008264 <HAL_GPIO_DeInit+0x1c4>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d025      	beq.n	8008144 <HAL_GPIO_DeInit+0xa4>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a5b      	ldr	r2, [pc, #364]	; (8008268 <HAL_GPIO_DeInit+0x1c8>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d01f      	beq.n	8008140 <HAL_GPIO_DeInit+0xa0>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a5a      	ldr	r2, [pc, #360]	; (800826c <HAL_GPIO_DeInit+0x1cc>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d019      	beq.n	800813c <HAL_GPIO_DeInit+0x9c>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a59      	ldr	r2, [pc, #356]	; (8008270 <HAL_GPIO_DeInit+0x1d0>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d013      	beq.n	8008138 <HAL_GPIO_DeInit+0x98>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a58      	ldr	r2, [pc, #352]	; (8008274 <HAL_GPIO_DeInit+0x1d4>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d00d      	beq.n	8008134 <HAL_GPIO_DeInit+0x94>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a57      	ldr	r2, [pc, #348]	; (8008278 <HAL_GPIO_DeInit+0x1d8>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d007      	beq.n	8008130 <HAL_GPIO_DeInit+0x90>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a56      	ldr	r2, [pc, #344]	; (800827c <HAL_GPIO_DeInit+0x1dc>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d101      	bne.n	800812c <HAL_GPIO_DeInit+0x8c>
 8008128:	2307      	movs	r3, #7
 800812a:	e00e      	b.n	800814a <HAL_GPIO_DeInit+0xaa>
 800812c:	2308      	movs	r3, #8
 800812e:	e00c      	b.n	800814a <HAL_GPIO_DeInit+0xaa>
 8008130:	2306      	movs	r3, #6
 8008132:	e00a      	b.n	800814a <HAL_GPIO_DeInit+0xaa>
 8008134:	2305      	movs	r3, #5
 8008136:	e008      	b.n	800814a <HAL_GPIO_DeInit+0xaa>
 8008138:	2304      	movs	r3, #4
 800813a:	e006      	b.n	800814a <HAL_GPIO_DeInit+0xaa>
 800813c:	2303      	movs	r3, #3
 800813e:	e004      	b.n	800814a <HAL_GPIO_DeInit+0xaa>
 8008140:	2302      	movs	r3, #2
 8008142:	e002      	b.n	800814a <HAL_GPIO_DeInit+0xaa>
 8008144:	2301      	movs	r3, #1
 8008146:	e000      	b.n	800814a <HAL_GPIO_DeInit+0xaa>
 8008148:	2300      	movs	r3, #0
 800814a:	697a      	ldr	r2, [r7, #20]
 800814c:	f002 0203 	and.w	r2, r2, #3
 8008150:	0092      	lsls	r2, r2, #2
 8008152:	4093      	lsls	r3, r2
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	429a      	cmp	r2, r3
 8008158:	d132      	bne.n	80081c0 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800815a:	4b49      	ldr	r3, [pc, #292]	; (8008280 <HAL_GPIO_DeInit+0x1e0>)
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	43db      	mvns	r3, r3
 8008162:	4947      	ldr	r1, [pc, #284]	; (8008280 <HAL_GPIO_DeInit+0x1e0>)
 8008164:	4013      	ands	r3, r2
 8008166:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8008168:	4b45      	ldr	r3, [pc, #276]	; (8008280 <HAL_GPIO_DeInit+0x1e0>)
 800816a:	685a      	ldr	r2, [r3, #4]
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	43db      	mvns	r3, r3
 8008170:	4943      	ldr	r1, [pc, #268]	; (8008280 <HAL_GPIO_DeInit+0x1e0>)
 8008172:	4013      	ands	r3, r2
 8008174:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008176:	4b42      	ldr	r3, [pc, #264]	; (8008280 <HAL_GPIO_DeInit+0x1e0>)
 8008178:	68da      	ldr	r2, [r3, #12]
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	43db      	mvns	r3, r3
 800817e:	4940      	ldr	r1, [pc, #256]	; (8008280 <HAL_GPIO_DeInit+0x1e0>)
 8008180:	4013      	ands	r3, r2
 8008182:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8008184:	4b3e      	ldr	r3, [pc, #248]	; (8008280 <HAL_GPIO_DeInit+0x1e0>)
 8008186:	689a      	ldr	r2, [r3, #8]
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	43db      	mvns	r3, r3
 800818c:	493c      	ldr	r1, [pc, #240]	; (8008280 <HAL_GPIO_DeInit+0x1e0>)
 800818e:	4013      	ands	r3, r2
 8008190:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	f003 0303 	and.w	r3, r3, #3
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	220f      	movs	r2, #15
 800819c:	fa02 f303 	lsl.w	r3, r2, r3
 80081a0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80081a2:	4a2f      	ldr	r2, [pc, #188]	; (8008260 <HAL_GPIO_DeInit+0x1c0>)
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	089b      	lsrs	r3, r3, #2
 80081a8:	3302      	adds	r3, #2
 80081aa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	43da      	mvns	r2, r3
 80081b2:	482b      	ldr	r0, [pc, #172]	; (8008260 <HAL_GPIO_DeInit+0x1c0>)
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	089b      	lsrs	r3, r3, #2
 80081b8:	400a      	ands	r2, r1
 80081ba:	3302      	adds	r3, #2
 80081bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	005b      	lsls	r3, r3, #1
 80081c8:	2103      	movs	r1, #3
 80081ca:	fa01 f303 	lsl.w	r3, r1, r3
 80081ce:	431a      	orrs	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	08da      	lsrs	r2, r3, #3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	3208      	adds	r2, #8
 80081dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	f003 0307 	and.w	r3, r3, #7
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	220f      	movs	r2, #15
 80081ea:	fa02 f303 	lsl.w	r3, r2, r3
 80081ee:	43db      	mvns	r3, r3
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	08d2      	lsrs	r2, r2, #3
 80081f4:	4019      	ands	r1, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	3208      	adds	r2, #8
 80081fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	689a      	ldr	r2, [r3, #8]
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	005b      	lsls	r3, r3, #1
 8008206:	2103      	movs	r1, #3
 8008208:	fa01 f303 	lsl.w	r3, r1, r3
 800820c:	43db      	mvns	r3, r3
 800820e:	401a      	ands	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	685a      	ldr	r2, [r3, #4]
 8008218:	2101      	movs	r1, #1
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	fa01 f303 	lsl.w	r3, r1, r3
 8008220:	43db      	mvns	r3, r3
 8008222:	401a      	ands	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	68da      	ldr	r2, [r3, #12]
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	005b      	lsls	r3, r3, #1
 8008230:	2103      	movs	r1, #3
 8008232:	fa01 f303 	lsl.w	r3, r1, r3
 8008236:	43db      	mvns	r3, r3
 8008238:	401a      	ands	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	3301      	adds	r3, #1
 8008242:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8008244:	683a      	ldr	r2, [r7, #0]
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	fa22 f303 	lsr.w	r3, r2, r3
 800824c:	2b00      	cmp	r3, #0
 800824e:	f47f af2f 	bne.w	80080b0 <HAL_GPIO_DeInit+0x10>
  }
}
 8008252:	bf00      	nop
 8008254:	bf00      	nop
 8008256:	371c      	adds	r7, #28
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr
 8008260:	40010000 	.word	0x40010000
 8008264:	48000400 	.word	0x48000400
 8008268:	48000800 	.word	0x48000800
 800826c:	48000c00 	.word	0x48000c00
 8008270:	48001000 	.word	0x48001000
 8008274:	48001400 	.word	0x48001400
 8008278:	48001800 	.word	0x48001800
 800827c:	48001c00 	.word	0x48001c00
 8008280:	40010400 	.word	0x40010400

08008284 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	460b      	mov	r3, r1
 800828e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	691a      	ldr	r2, [r3, #16]
 8008294:	887b      	ldrh	r3, [r7, #2]
 8008296:	4013      	ands	r3, r2
 8008298:	2b00      	cmp	r3, #0
 800829a:	d002      	beq.n	80082a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800829c:	2301      	movs	r3, #1
 800829e:	73fb      	strb	r3, [r7, #15]
 80082a0:	e001      	b.n	80082a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80082a2:	2300      	movs	r3, #0
 80082a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80082a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3714      	adds	r7, #20
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	460b      	mov	r3, r1
 80082be:	807b      	strh	r3, [r7, #2]
 80082c0:	4613      	mov	r3, r2
 80082c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80082c4:	787b      	ldrb	r3, [r7, #1]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d003      	beq.n	80082d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80082ca:	887a      	ldrh	r2, [r7, #2]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80082d0:	e002      	b.n	80082d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80082d2:	887a      	ldrh	r2, [r7, #2]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80082d8:	bf00      	nop
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	460b      	mov	r3, r1
 80082ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	695b      	ldr	r3, [r3, #20]
 80082f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80082f6:	887a      	ldrh	r2, [r7, #2]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	4013      	ands	r3, r2
 80082fc:	041a      	lsls	r2, r3, #16
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	43d9      	mvns	r1, r3
 8008302:	887b      	ldrh	r3, [r7, #2]
 8008304:	400b      	ands	r3, r1
 8008306:	431a      	orrs	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	619a      	str	r2, [r3, #24]
}
 800830c:	bf00      	nop
 800830e:	3714      	adds	r7, #20
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d101      	bne.n	800832a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	e08d      	b.n	8008446 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008330:	b2db      	uxtb	r3, r3
 8008332:	2b00      	cmp	r3, #0
 8008334:	d106      	bne.n	8008344 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f7fd f80c 	bl	800535c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2224      	movs	r2, #36	; 0x24
 8008348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f022 0201 	bic.w	r2, r2, #1
 800835a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685a      	ldr	r2, [r3, #4]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008368:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	689a      	ldr	r2, [r3, #8]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008378:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	2b01      	cmp	r3, #1
 8008380:	d107      	bne.n	8008392 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	689a      	ldr	r2, [r3, #8]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800838e:	609a      	str	r2, [r3, #8]
 8008390:	e006      	b.n	80083a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	689a      	ldr	r2, [r3, #8]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800839e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	d108      	bne.n	80083ba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	685a      	ldr	r2, [r3, #4]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083b6:	605a      	str	r2, [r3, #4]
 80083b8:	e007      	b.n	80083ca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	685a      	ldr	r2, [r3, #4]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	6812      	ldr	r2, [r2, #0]
 80083d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80083d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68da      	ldr	r2, [r3, #12]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80083ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	691a      	ldr	r2, [r3, #16]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	695b      	ldr	r3, [r3, #20]
 80083f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	430a      	orrs	r2, r1
 8008406:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	69d9      	ldr	r1, [r3, #28]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6a1a      	ldr	r2, [r3, #32]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	430a      	orrs	r2, r1
 8008416:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f042 0201 	orr.w	r2, r2, #1
 8008426:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2220      	movs	r2, #32
 8008432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3708      	adds	r7, #8
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b082      	sub	sp, #8
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d101      	bne.n	8008460 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	e021      	b.n	80084a4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2224      	movs	r2, #36	; 0x24
 8008464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f022 0201 	bic.w	r2, r2, #1
 8008476:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f7fc ffcd 	bl	8005418 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3708      	adds	r7, #8
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b088      	sub	sp, #32
 80084b0:	af02      	add	r7, sp, #8
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	607a      	str	r2, [r7, #4]
 80084b6:	461a      	mov	r2, r3
 80084b8:	460b      	mov	r3, r1
 80084ba:	817b      	strh	r3, [r7, #10]
 80084bc:	4613      	mov	r3, r2
 80084be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	2b20      	cmp	r3, #32
 80084ca:	f040 80fd 	bne.w	80086c8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d101      	bne.n	80084dc <HAL_I2C_Master_Transmit+0x30>
 80084d8:	2302      	movs	r3, #2
 80084da:	e0f6      	b.n	80086ca <HAL_I2C_Master_Transmit+0x21e>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80084e4:	f7fe ffda 	bl	800749c <HAL_GetTick>
 80084e8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	9300      	str	r3, [sp, #0]
 80084ee:	2319      	movs	r3, #25
 80084f0:	2201      	movs	r2, #1
 80084f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f000 fe04 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d001      	beq.n	8008506 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	e0e1      	b.n	80086ca <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2221      	movs	r2, #33	; 0x21
 800850a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2210      	movs	r2, #16
 8008512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	893a      	ldrh	r2, [r7, #8]
 8008526:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2200      	movs	r2, #0
 800852c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008532:	b29b      	uxth	r3, r3
 8008534:	2bff      	cmp	r3, #255	; 0xff
 8008536:	d906      	bls.n	8008546 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	22ff      	movs	r2, #255	; 0xff
 800853c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800853e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008542:	617b      	str	r3, [r7, #20]
 8008544:	e007      	b.n	8008556 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800854a:	b29a      	uxth	r2, r3
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008550:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008554:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800855a:	2b00      	cmp	r3, #0
 800855c:	d024      	beq.n	80085a8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008562:	781a      	ldrb	r2, [r3, #0]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856e:	1c5a      	adds	r2, r3, #1
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008578:	b29b      	uxth	r3, r3
 800857a:	3b01      	subs	r3, #1
 800857c:	b29a      	uxth	r2, r3
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008586:	3b01      	subs	r3, #1
 8008588:	b29a      	uxth	r2, r3
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008592:	b2db      	uxtb	r3, r3
 8008594:	3301      	adds	r3, #1
 8008596:	b2da      	uxtb	r2, r3
 8008598:	8979      	ldrh	r1, [r7, #10]
 800859a:	4b4e      	ldr	r3, [pc, #312]	; (80086d4 <HAL_I2C_Master_Transmit+0x228>)
 800859c:	9300      	str	r3, [sp, #0]
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f000 ffeb 	bl	800957c <I2C_TransferConfig>
 80085a6:	e066      	b.n	8008676 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085ac:	b2da      	uxtb	r2, r3
 80085ae:	8979      	ldrh	r1, [r7, #10]
 80085b0:	4b48      	ldr	r3, [pc, #288]	; (80086d4 <HAL_I2C_Master_Transmit+0x228>)
 80085b2:	9300      	str	r3, [sp, #0]
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	f000 ffe0 	bl	800957c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80085bc:	e05b      	b.n	8008676 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085be:	693a      	ldr	r2, [r7, #16]
 80085c0:	6a39      	ldr	r1, [r7, #32]
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f000 fded 	bl	80091a2 <I2C_WaitOnTXISFlagUntilTimeout>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d001      	beq.n	80085d2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e07b      	b.n	80086ca <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d6:	781a      	ldrb	r2, [r3, #0]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e2:	1c5a      	adds	r2, r3, #1
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	3b01      	subs	r3, #1
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085fa:	3b01      	subs	r3, #1
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008606:	b29b      	uxth	r3, r3
 8008608:	2b00      	cmp	r3, #0
 800860a:	d034      	beq.n	8008676 <HAL_I2C_Master_Transmit+0x1ca>
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008610:	2b00      	cmp	r3, #0
 8008612:	d130      	bne.n	8008676 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	9300      	str	r3, [sp, #0]
 8008618:	6a3b      	ldr	r3, [r7, #32]
 800861a:	2200      	movs	r2, #0
 800861c:	2180      	movs	r1, #128	; 0x80
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f000 fd70 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d001      	beq.n	800862e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e04d      	b.n	80086ca <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008632:	b29b      	uxth	r3, r3
 8008634:	2bff      	cmp	r3, #255	; 0xff
 8008636:	d90e      	bls.n	8008656 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	22ff      	movs	r2, #255	; 0xff
 800863c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008642:	b2da      	uxtb	r2, r3
 8008644:	8979      	ldrh	r1, [r7, #10]
 8008646:	2300      	movs	r3, #0
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	f000 ff94 	bl	800957c <I2C_TransferConfig>
 8008654:	e00f      	b.n	8008676 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800865a:	b29a      	uxth	r2, r3
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008664:	b2da      	uxtb	r2, r3
 8008666:	8979      	ldrh	r1, [r7, #10]
 8008668:	2300      	movs	r3, #0
 800866a:	9300      	str	r3, [sp, #0]
 800866c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008670:	68f8      	ldr	r0, [r7, #12]
 8008672:	f000 ff83 	bl	800957c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800867a:	b29b      	uxth	r3, r3
 800867c:	2b00      	cmp	r3, #0
 800867e:	d19e      	bne.n	80085be <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008680:	693a      	ldr	r2, [r7, #16]
 8008682:	6a39      	ldr	r1, [r7, #32]
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f000 fdd3 	bl	8009230 <I2C_WaitOnSTOPFlagUntilTimeout>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d001      	beq.n	8008694 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e01a      	b.n	80086ca <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2220      	movs	r2, #32
 800869a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	6859      	ldr	r1, [r3, #4]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	4b0c      	ldr	r3, [pc, #48]	; (80086d8 <HAL_I2C_Master_Transmit+0x22c>)
 80086a8:	400b      	ands	r3, r1
 80086aa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2220      	movs	r2, #32
 80086b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80086c4:	2300      	movs	r3, #0
 80086c6:	e000      	b.n	80086ca <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80086c8:	2302      	movs	r3, #2
  }
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3718      	adds	r7, #24
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	80002000 	.word	0x80002000
 80086d8:	fe00e800 	.word	0xfe00e800

080086dc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b088      	sub	sp, #32
 80086e0:	af02      	add	r7, sp, #8
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	607a      	str	r2, [r7, #4]
 80086e6:	461a      	mov	r2, r3
 80086e8:	460b      	mov	r3, r1
 80086ea:	817b      	strh	r3, [r7, #10]
 80086ec:	4613      	mov	r3, r2
 80086ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	2b20      	cmp	r3, #32
 80086fa:	f040 80db 	bne.w	80088b4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008704:	2b01      	cmp	r3, #1
 8008706:	d101      	bne.n	800870c <HAL_I2C_Master_Receive+0x30>
 8008708:	2302      	movs	r3, #2
 800870a:	e0d4      	b.n	80088b6 <HAL_I2C_Master_Receive+0x1da>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008714:	f7fe fec2 	bl	800749c <HAL_GetTick>
 8008718:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	2319      	movs	r3, #25
 8008720:	2201      	movs	r2, #1
 8008722:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f000 fcec 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d001      	beq.n	8008736 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e0bf      	b.n	80088b6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2222      	movs	r2, #34	; 0x22
 800873a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2210      	movs	r2, #16
 8008742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	893a      	ldrh	r2, [r7, #8]
 8008756:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008762:	b29b      	uxth	r3, r3
 8008764:	2bff      	cmp	r3, #255	; 0xff
 8008766:	d90e      	bls.n	8008786 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	22ff      	movs	r2, #255	; 0xff
 800876c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008772:	b2da      	uxtb	r2, r3
 8008774:	8979      	ldrh	r1, [r7, #10]
 8008776:	4b52      	ldr	r3, [pc, #328]	; (80088c0 <HAL_I2C_Master_Receive+0x1e4>)
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800877e:	68f8      	ldr	r0, [r7, #12]
 8008780:	f000 fefc 	bl	800957c <I2C_TransferConfig>
 8008784:	e06d      	b.n	8008862 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800878a:	b29a      	uxth	r2, r3
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008794:	b2da      	uxtb	r2, r3
 8008796:	8979      	ldrh	r1, [r7, #10]
 8008798:	4b49      	ldr	r3, [pc, #292]	; (80088c0 <HAL_I2C_Master_Receive+0x1e4>)
 800879a:	9300      	str	r3, [sp, #0]
 800879c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f000 feeb 	bl	800957c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80087a6:	e05c      	b.n	8008862 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087a8:	697a      	ldr	r2, [r7, #20]
 80087aa:	6a39      	ldr	r1, [r7, #32]
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f000 fd83 	bl	80092b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d001      	beq.n	80087bc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e07c      	b.n	80088b6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c6:	b2d2      	uxtb	r2, r2
 80087c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ce:	1c5a      	adds	r2, r3, #1
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087d8:	3b01      	subs	r3, #1
 80087da:	b29a      	uxth	r2, r3
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	3b01      	subs	r3, #1
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d034      	beq.n	8008862 <HAL_I2C_Master_Receive+0x186>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d130      	bne.n	8008862 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	9300      	str	r3, [sp, #0]
 8008804:	6a3b      	ldr	r3, [r7, #32]
 8008806:	2200      	movs	r2, #0
 8008808:	2180      	movs	r1, #128	; 0x80
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f000 fc7a 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d001      	beq.n	800881a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e04d      	b.n	80088b6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800881e:	b29b      	uxth	r3, r3
 8008820:	2bff      	cmp	r3, #255	; 0xff
 8008822:	d90e      	bls.n	8008842 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	22ff      	movs	r2, #255	; 0xff
 8008828:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800882e:	b2da      	uxtb	r2, r3
 8008830:	8979      	ldrh	r1, [r7, #10]
 8008832:	2300      	movs	r3, #0
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800883a:	68f8      	ldr	r0, [r7, #12]
 800883c:	f000 fe9e 	bl	800957c <I2C_TransferConfig>
 8008840:	e00f      	b.n	8008862 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008846:	b29a      	uxth	r2, r3
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008850:	b2da      	uxtb	r2, r3
 8008852:	8979      	ldrh	r1, [r7, #10]
 8008854:	2300      	movs	r3, #0
 8008856:	9300      	str	r3, [sp, #0]
 8008858:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f000 fe8d 	bl	800957c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008866:	b29b      	uxth	r3, r3
 8008868:	2b00      	cmp	r3, #0
 800886a:	d19d      	bne.n	80087a8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800886c:	697a      	ldr	r2, [r7, #20]
 800886e:	6a39      	ldr	r1, [r7, #32]
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f000 fcdd 	bl	8009230 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d001      	beq.n	8008880 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	e01a      	b.n	80088b6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2220      	movs	r2, #32
 8008886:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	6859      	ldr	r1, [r3, #4]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	4b0c      	ldr	r3, [pc, #48]	; (80088c4 <HAL_I2C_Master_Receive+0x1e8>)
 8008894:	400b      	ands	r3, r1
 8008896:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2220      	movs	r2, #32
 800889c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	e000      	b.n	80088b6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80088b4:	2302      	movs	r3, #2
  }
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3718      	adds	r7, #24
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	80002400 	.word	0x80002400
 80088c4:	fe00e800 	.word	0xfe00e800

080088c8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b088      	sub	sp, #32
 80088cc:	af02      	add	r7, sp, #8
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	4608      	mov	r0, r1
 80088d2:	4611      	mov	r1, r2
 80088d4:	461a      	mov	r2, r3
 80088d6:	4603      	mov	r3, r0
 80088d8:	817b      	strh	r3, [r7, #10]
 80088da:	460b      	mov	r3, r1
 80088dc:	813b      	strh	r3, [r7, #8]
 80088de:	4613      	mov	r3, r2
 80088e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	2b20      	cmp	r3, #32
 80088ec:	f040 80f9 	bne.w	8008ae2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80088f0:	6a3b      	ldr	r3, [r7, #32]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d002      	beq.n	80088fc <HAL_I2C_Mem_Write+0x34>
 80088f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d105      	bne.n	8008908 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008902:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e0ed      	b.n	8008ae4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800890e:	2b01      	cmp	r3, #1
 8008910:	d101      	bne.n	8008916 <HAL_I2C_Mem_Write+0x4e>
 8008912:	2302      	movs	r3, #2
 8008914:	e0e6      	b.n	8008ae4 <HAL_I2C_Mem_Write+0x21c>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2201      	movs	r2, #1
 800891a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800891e:	f7fe fdbd 	bl	800749c <HAL_GetTick>
 8008922:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	9300      	str	r3, [sp, #0]
 8008928:	2319      	movs	r3, #25
 800892a:	2201      	movs	r2, #1
 800892c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f000 fbe7 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d001      	beq.n	8008940 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	e0d1      	b.n	8008ae4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2221      	movs	r2, #33	; 0x21
 8008944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2240      	movs	r2, #64	; 0x40
 800894c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6a3a      	ldr	r2, [r7, #32]
 800895a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008960:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008968:	88f8      	ldrh	r0, [r7, #6]
 800896a:	893a      	ldrh	r2, [r7, #8]
 800896c:	8979      	ldrh	r1, [r7, #10]
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	9301      	str	r3, [sp, #4]
 8008972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008974:	9300      	str	r3, [sp, #0]
 8008976:	4603      	mov	r3, r0
 8008978:	68f8      	ldr	r0, [r7, #12]
 800897a:	f000 faf7 	bl	8008f6c <I2C_RequestMemoryWrite>
 800897e:	4603      	mov	r3, r0
 8008980:	2b00      	cmp	r3, #0
 8008982:	d005      	beq.n	8008990 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	e0a9      	b.n	8008ae4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008994:	b29b      	uxth	r3, r3
 8008996:	2bff      	cmp	r3, #255	; 0xff
 8008998:	d90e      	bls.n	80089b8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	22ff      	movs	r2, #255	; 0xff
 800899e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089a4:	b2da      	uxtb	r2, r3
 80089a6:	8979      	ldrh	r1, [r7, #10]
 80089a8:	2300      	movs	r3, #0
 80089aa:	9300      	str	r3, [sp, #0]
 80089ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f000 fde3 	bl	800957c <I2C_TransferConfig>
 80089b6:	e00f      	b.n	80089d8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089bc:	b29a      	uxth	r2, r3
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089c6:	b2da      	uxtb	r2, r3
 80089c8:	8979      	ldrh	r1, [r7, #10]
 80089ca:	2300      	movs	r3, #0
 80089cc:	9300      	str	r3, [sp, #0]
 80089ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80089d2:	68f8      	ldr	r0, [r7, #12]
 80089d4:	f000 fdd2 	bl	800957c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089d8:	697a      	ldr	r2, [r7, #20]
 80089da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f000 fbe0 	bl	80091a2 <I2C_WaitOnTXISFlagUntilTimeout>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d001      	beq.n	80089ec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e07b      	b.n	8008ae4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f0:	781a      	ldrb	r2, [r3, #0]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fc:	1c5a      	adds	r2, r3, #1
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a14:	3b01      	subs	r3, #1
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d034      	beq.n	8008a90 <HAL_I2C_Mem_Write+0x1c8>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d130      	bne.n	8008a90 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a34:	2200      	movs	r2, #0
 8008a36:	2180      	movs	r1, #128	; 0x80
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f000 fb63 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d001      	beq.n	8008a48 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	e04d      	b.n	8008ae4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	2bff      	cmp	r3, #255	; 0xff
 8008a50:	d90e      	bls.n	8008a70 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	22ff      	movs	r2, #255	; 0xff
 8008a56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	8979      	ldrh	r1, [r7, #10]
 8008a60:	2300      	movs	r3, #0
 8008a62:	9300      	str	r3, [sp, #0]
 8008a64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f000 fd87 	bl	800957c <I2C_TransferConfig>
 8008a6e:	e00f      	b.n	8008a90 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a74:	b29a      	uxth	r2, r3
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a7e:	b2da      	uxtb	r2, r3
 8008a80:	8979      	ldrh	r1, [r7, #10]
 8008a82:	2300      	movs	r3, #0
 8008a84:	9300      	str	r3, [sp, #0]
 8008a86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	f000 fd76 	bl	800957c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d19e      	bne.n	80089d8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	f000 fbc6 	bl	8009230 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d001      	beq.n	8008aae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e01a      	b.n	8008ae4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2220      	movs	r2, #32
 8008ab4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	6859      	ldr	r1, [r3, #4]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	4b0a      	ldr	r3, [pc, #40]	; (8008aec <HAL_I2C_Mem_Write+0x224>)
 8008ac2:	400b      	ands	r3, r1
 8008ac4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2220      	movs	r2, #32
 8008aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	e000      	b.n	8008ae4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008ae2:	2302      	movs	r3, #2
  }
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3718      	adds	r7, #24
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	fe00e800 	.word	0xfe00e800

08008af0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b088      	sub	sp, #32
 8008af4:	af02      	add	r7, sp, #8
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	4608      	mov	r0, r1
 8008afa:	4611      	mov	r1, r2
 8008afc:	461a      	mov	r2, r3
 8008afe:	4603      	mov	r3, r0
 8008b00:	817b      	strh	r3, [r7, #10]
 8008b02:	460b      	mov	r3, r1
 8008b04:	813b      	strh	r3, [r7, #8]
 8008b06:	4613      	mov	r3, r2
 8008b08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	2b20      	cmp	r3, #32
 8008b14:	f040 80fd 	bne.w	8008d12 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b18:	6a3b      	ldr	r3, [r7, #32]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d002      	beq.n	8008b24 <HAL_I2C_Mem_Read+0x34>
 8008b1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d105      	bne.n	8008b30 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b2a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e0f1      	b.n	8008d14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d101      	bne.n	8008b3e <HAL_I2C_Mem_Read+0x4e>
 8008b3a:	2302      	movs	r3, #2
 8008b3c:	e0ea      	b.n	8008d14 <HAL_I2C_Mem_Read+0x224>
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2201      	movs	r2, #1
 8008b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008b46:	f7fe fca9 	bl	800749c <HAL_GetTick>
 8008b4a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	2319      	movs	r3, #25
 8008b52:	2201      	movs	r2, #1
 8008b54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f000 fad3 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d001      	beq.n	8008b68 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	e0d5      	b.n	8008d14 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2222      	movs	r2, #34	; 0x22
 8008b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2240      	movs	r2, #64	; 0x40
 8008b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	6a3a      	ldr	r2, [r7, #32]
 8008b82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008b88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008b90:	88f8      	ldrh	r0, [r7, #6]
 8008b92:	893a      	ldrh	r2, [r7, #8]
 8008b94:	8979      	ldrh	r1, [r7, #10]
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	9301      	str	r3, [sp, #4]
 8008b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f000 fa37 	bl	8009014 <I2C_RequestMemoryRead>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d005      	beq.n	8008bb8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e0ad      	b.n	8008d14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	2bff      	cmp	r3, #255	; 0xff
 8008bc0:	d90e      	bls.n	8008be0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	22ff      	movs	r2, #255	; 0xff
 8008bc6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bcc:	b2da      	uxtb	r2, r3
 8008bce:	8979      	ldrh	r1, [r7, #10]
 8008bd0:	4b52      	ldr	r3, [pc, #328]	; (8008d1c <HAL_I2C_Mem_Read+0x22c>)
 8008bd2:	9300      	str	r3, [sp, #0]
 8008bd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f000 fccf 	bl	800957c <I2C_TransferConfig>
 8008bde:	e00f      	b.n	8008c00 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008be4:	b29a      	uxth	r2, r3
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bee:	b2da      	uxtb	r2, r3
 8008bf0:	8979      	ldrh	r1, [r7, #10]
 8008bf2:	4b4a      	ldr	r3, [pc, #296]	; (8008d1c <HAL_I2C_Mem_Read+0x22c>)
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f000 fcbe 	bl	800957c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c06:	2200      	movs	r2, #0
 8008c08:	2104      	movs	r1, #4
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f000 fa7a 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e07c      	b.n	8008d14 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c24:	b2d2      	uxtb	r2, r2
 8008c26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2c:	1c5a      	adds	r2, r3, #1
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c36:	3b01      	subs	r3, #1
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	3b01      	subs	r3, #1
 8008c46:	b29a      	uxth	r2, r3
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d034      	beq.n	8008cc0 <HAL_I2C_Mem_Read+0x1d0>
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d130      	bne.n	8008cc0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	9300      	str	r3, [sp, #0]
 8008c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c64:	2200      	movs	r2, #0
 8008c66:	2180      	movs	r1, #128	; 0x80
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f000 fa4b 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d001      	beq.n	8008c78 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	e04d      	b.n	8008d14 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	2bff      	cmp	r3, #255	; 0xff
 8008c80:	d90e      	bls.n	8008ca0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	22ff      	movs	r2, #255	; 0xff
 8008c86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c8c:	b2da      	uxtb	r2, r3
 8008c8e:	8979      	ldrh	r1, [r7, #10]
 8008c90:	2300      	movs	r3, #0
 8008c92:	9300      	str	r3, [sp, #0]
 8008c94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f000 fc6f 	bl	800957c <I2C_TransferConfig>
 8008c9e:	e00f      	b.n	8008cc0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ca4:	b29a      	uxth	r2, r3
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	8979      	ldrh	r1, [r7, #10]
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	9300      	str	r3, [sp, #0]
 8008cb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008cba:	68f8      	ldr	r0, [r7, #12]
 8008cbc:	f000 fc5e 	bl	800957c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d19a      	bne.n	8008c00 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cce:	68f8      	ldr	r0, [r7, #12]
 8008cd0:	f000 faae 	bl	8009230 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d001      	beq.n	8008cde <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e01a      	b.n	8008d14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2220      	movs	r2, #32
 8008ce4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	6859      	ldr	r1, [r3, #4]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	4b0b      	ldr	r3, [pc, #44]	; (8008d20 <HAL_I2C_Mem_Read+0x230>)
 8008cf2:	400b      	ands	r3, r1
 8008cf4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2220      	movs	r2, #32
 8008cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2200      	movs	r2, #0
 8008d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	e000      	b.n	8008d14 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008d12:	2302      	movs	r3, #2
  }
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3718      	adds	r7, #24
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	80002400 	.word	0x80002400
 8008d20:	fe00e800 	.word	0xfe00e800

08008d24 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b08a      	sub	sp, #40	; 0x28
 8008d28:	af02      	add	r7, sp, #8
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	607a      	str	r2, [r7, #4]
 8008d2e:	603b      	str	r3, [r7, #0]
 8008d30:	460b      	mov	r3, r1
 8008d32:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8008d34:	2300      	movs	r3, #0
 8008d36:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	2b20      	cmp	r3, #32
 8008d42:	f040 80f3 	bne.w	8008f2c <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d54:	d101      	bne.n	8008d5a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8008d56:	2302      	movs	r3, #2
 8008d58:	e0e9      	b.n	8008f2e <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d101      	bne.n	8008d68 <HAL_I2C_IsDeviceReady+0x44>
 8008d64:	2302      	movs	r3, #2
 8008d66:	e0e2      	b.n	8008f2e <HAL_I2C_IsDeviceReady+0x20a>
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2224      	movs	r2, #36	; 0x24
 8008d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d107      	bne.n	8008d96 <HAL_I2C_IsDeviceReady+0x72>
 8008d86:	897b      	ldrh	r3, [r7, #10]
 8008d88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008d90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008d94:	e006      	b.n	8008da4 <HAL_I2C_IsDeviceReady+0x80>
 8008d96:	897b      	ldrh	r3, [r7, #10]
 8008d98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008da0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	6812      	ldr	r2, [r2, #0]
 8008da8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8008daa:	f7fe fb77 	bl	800749c <HAL_GetTick>
 8008dae:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	699b      	ldr	r3, [r3, #24]
 8008db6:	f003 0320 	and.w	r3, r3, #32
 8008dba:	2b20      	cmp	r3, #32
 8008dbc:	bf0c      	ite	eq
 8008dbe:	2301      	moveq	r3, #1
 8008dc0:	2300      	movne	r3, #0
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	f003 0310 	and.w	r3, r3, #16
 8008dd0:	2b10      	cmp	r3, #16
 8008dd2:	bf0c      	ite	eq
 8008dd4:	2301      	moveq	r3, #1
 8008dd6:	2300      	movne	r3, #0
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008ddc:	e034      	b.n	8008e48 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008de4:	d01a      	beq.n	8008e1c <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008de6:	f7fe fb59 	bl	800749c <HAL_GetTick>
 8008dea:	4602      	mov	r2, r0
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	1ad3      	subs	r3, r2, r3
 8008df0:	683a      	ldr	r2, [r7, #0]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d302      	bcc.n	8008dfc <HAL_I2C_IsDeviceReady+0xd8>
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d10f      	bne.n	8008e1c <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2220      	movs	r2, #32
 8008e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e08:	f043 0220 	orr.w	r2, r3, #32
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2200      	movs	r2, #0
 8008e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e088      	b.n	8008f2e <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	699b      	ldr	r3, [r3, #24]
 8008e22:	f003 0320 	and.w	r3, r3, #32
 8008e26:	2b20      	cmp	r3, #32
 8008e28:	bf0c      	ite	eq
 8008e2a:	2301      	moveq	r3, #1
 8008e2c:	2300      	movne	r3, #0
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	699b      	ldr	r3, [r3, #24]
 8008e38:	f003 0310 	and.w	r3, r3, #16
 8008e3c:	2b10      	cmp	r3, #16
 8008e3e:	bf0c      	ite	eq
 8008e40:	2301      	moveq	r3, #1
 8008e42:	2300      	movne	r3, #0
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008e48:	7ffb      	ldrb	r3, [r7, #31]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d102      	bne.n	8008e54 <HAL_I2C_IsDeviceReady+0x130>
 8008e4e:	7fbb      	ldrb	r3, [r7, #30]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d0c4      	beq.n	8008dde <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	f003 0310 	and.w	r3, r3, #16
 8008e5e:	2b10      	cmp	r3, #16
 8008e60:	d01a      	beq.n	8008e98 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	2120      	movs	r1, #32
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f000 f949 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d001      	beq.n	8008e7c <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e058      	b.n	8008f2e <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2220      	movs	r2, #32
 8008e82:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2220      	movs	r2, #32
 8008e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8008e94:	2300      	movs	r3, #0
 8008e96:	e04a      	b.n	8008f2e <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	2120      	movs	r1, #32
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f000 f92e 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d001      	beq.n	8008eb2 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e03d      	b.n	8008f2e <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2210      	movs	r2, #16
 8008eb8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2220      	movs	r2, #32
 8008ec0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d118      	bne.n	8008efc <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	685a      	ldr	r2, [r3, #4]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ed8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	9300      	str	r3, [sp, #0]
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	2120      	movs	r1, #32
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f000 f90d 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d001      	beq.n	8008ef4 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e01c      	b.n	8008f2e <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2220      	movs	r2, #32
 8008efa:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	3301      	adds	r3, #1
 8008f00:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	f63f af39 	bhi.w	8008d7e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2220      	movs	r2, #32
 8008f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f18:	f043 0220 	orr.w	r2, r3, #32
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e000      	b.n	8008f2e <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8008f2c:	2302      	movs	r3, #2
  }
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3720      	adds	r7, #32
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8008f36:	b480      	push	{r7}
 8008f38:	b083      	sub	sp, #12
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f44:	b2db      	uxtb	r3, r3
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	370c      	adds	r7, #12
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr

08008f52 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8008f52:	b480      	push	{r7}
 8008f54:	b083      	sub	sp, #12
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	370c      	adds	r7, #12
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr
	...

08008f6c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af02      	add	r7, sp, #8
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	4608      	mov	r0, r1
 8008f76:	4611      	mov	r1, r2
 8008f78:	461a      	mov	r2, r3
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	817b      	strh	r3, [r7, #10]
 8008f7e:	460b      	mov	r3, r1
 8008f80:	813b      	strh	r3, [r7, #8]
 8008f82:	4613      	mov	r3, r2
 8008f84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008f86:	88fb      	ldrh	r3, [r7, #6]
 8008f88:	b2da      	uxtb	r2, r3
 8008f8a:	8979      	ldrh	r1, [r7, #10]
 8008f8c:	4b20      	ldr	r3, [pc, #128]	; (8009010 <I2C_RequestMemoryWrite+0xa4>)
 8008f8e:	9300      	str	r3, [sp, #0]
 8008f90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f000 faf1 	bl	800957c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f9a:	69fa      	ldr	r2, [r7, #28]
 8008f9c:	69b9      	ldr	r1, [r7, #24]
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f000 f8ff 	bl	80091a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d001      	beq.n	8008fae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	e02c      	b.n	8009008 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008fae:	88fb      	ldrh	r3, [r7, #6]
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d105      	bne.n	8008fc0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008fb4:	893b      	ldrh	r3, [r7, #8]
 8008fb6:	b2da      	uxtb	r2, r3
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	629a      	str	r2, [r3, #40]	; 0x28
 8008fbe:	e015      	b.n	8008fec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008fc0:	893b      	ldrh	r3, [r7, #8]
 8008fc2:	0a1b      	lsrs	r3, r3, #8
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	b2da      	uxtb	r2, r3
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fce:	69fa      	ldr	r2, [r7, #28]
 8008fd0:	69b9      	ldr	r1, [r7, #24]
 8008fd2:	68f8      	ldr	r0, [r7, #12]
 8008fd4:	f000 f8e5 	bl	80091a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d001      	beq.n	8008fe2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e012      	b.n	8009008 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008fe2:	893b      	ldrh	r3, [r7, #8]
 8008fe4:	b2da      	uxtb	r2, r3
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	9300      	str	r3, [sp, #0]
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	2180      	movs	r1, #128	; 0x80
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f000 f884 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d001      	beq.n	8009006 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	e000      	b.n	8009008 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	80002000 	.word	0x80002000

08009014 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b086      	sub	sp, #24
 8009018:	af02      	add	r7, sp, #8
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	4608      	mov	r0, r1
 800901e:	4611      	mov	r1, r2
 8009020:	461a      	mov	r2, r3
 8009022:	4603      	mov	r3, r0
 8009024:	817b      	strh	r3, [r7, #10]
 8009026:	460b      	mov	r3, r1
 8009028:	813b      	strh	r3, [r7, #8]
 800902a:	4613      	mov	r3, r2
 800902c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800902e:	88fb      	ldrh	r3, [r7, #6]
 8009030:	b2da      	uxtb	r2, r3
 8009032:	8979      	ldrh	r1, [r7, #10]
 8009034:	4b20      	ldr	r3, [pc, #128]	; (80090b8 <I2C_RequestMemoryRead+0xa4>)
 8009036:	9300      	str	r3, [sp, #0]
 8009038:	2300      	movs	r3, #0
 800903a:	68f8      	ldr	r0, [r7, #12]
 800903c:	f000 fa9e 	bl	800957c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009040:	69fa      	ldr	r2, [r7, #28]
 8009042:	69b9      	ldr	r1, [r7, #24]
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	f000 f8ac 	bl	80091a2 <I2C_WaitOnTXISFlagUntilTimeout>
 800904a:	4603      	mov	r3, r0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d001      	beq.n	8009054 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	e02c      	b.n	80090ae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009054:	88fb      	ldrh	r3, [r7, #6]
 8009056:	2b01      	cmp	r3, #1
 8009058:	d105      	bne.n	8009066 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800905a:	893b      	ldrh	r3, [r7, #8]
 800905c:	b2da      	uxtb	r2, r3
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	629a      	str	r2, [r3, #40]	; 0x28
 8009064:	e015      	b.n	8009092 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009066:	893b      	ldrh	r3, [r7, #8]
 8009068:	0a1b      	lsrs	r3, r3, #8
 800906a:	b29b      	uxth	r3, r3
 800906c:	b2da      	uxtb	r2, r3
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009074:	69fa      	ldr	r2, [r7, #28]
 8009076:	69b9      	ldr	r1, [r7, #24]
 8009078:	68f8      	ldr	r0, [r7, #12]
 800907a:	f000 f892 	bl	80091a2 <I2C_WaitOnTXISFlagUntilTimeout>
 800907e:	4603      	mov	r3, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d001      	beq.n	8009088 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009084:	2301      	movs	r3, #1
 8009086:	e012      	b.n	80090ae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009088:	893b      	ldrh	r3, [r7, #8]
 800908a:	b2da      	uxtb	r2, r3
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	2200      	movs	r2, #0
 800909a:	2140      	movs	r1, #64	; 0x40
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f000 f831 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d001      	beq.n	80090ac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	e000      	b.n	80090ae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	80002000 	.word	0x80002000

080090bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	699b      	ldr	r3, [r3, #24]
 80090ca:	f003 0302 	and.w	r3, r3, #2
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	d103      	bne.n	80090da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2200      	movs	r2, #0
 80090d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	f003 0301 	and.w	r3, r3, #1
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d007      	beq.n	80090f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	699a      	ldr	r2, [r3, #24]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f042 0201 	orr.w	r2, r2, #1
 80090f6:	619a      	str	r2, [r3, #24]
  }
}
 80090f8:	bf00      	nop
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	603b      	str	r3, [r7, #0]
 8009110:	4613      	mov	r3, r2
 8009112:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009114:	e031      	b.n	800917a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800911c:	d02d      	beq.n	800917a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800911e:	f7fe f9bd 	bl	800749c <HAL_GetTick>
 8009122:	4602      	mov	r2, r0
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	1ad3      	subs	r3, r2, r3
 8009128:	683a      	ldr	r2, [r7, #0]
 800912a:	429a      	cmp	r2, r3
 800912c:	d302      	bcc.n	8009134 <I2C_WaitOnFlagUntilTimeout+0x30>
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d122      	bne.n	800917a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	699a      	ldr	r2, [r3, #24]
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	4013      	ands	r3, r2
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	429a      	cmp	r2, r3
 8009142:	bf0c      	ite	eq
 8009144:	2301      	moveq	r3, #1
 8009146:	2300      	movne	r3, #0
 8009148:	b2db      	uxtb	r3, r3
 800914a:	461a      	mov	r2, r3
 800914c:	79fb      	ldrb	r3, [r7, #7]
 800914e:	429a      	cmp	r2, r3
 8009150:	d113      	bne.n	800917a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009156:	f043 0220 	orr.w	r2, r3, #32
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2220      	movs	r2, #32
 8009162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2200      	movs	r2, #0
 800916a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2200      	movs	r2, #0
 8009172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	e00f      	b.n	800919a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	699a      	ldr	r2, [r3, #24]
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	4013      	ands	r3, r2
 8009184:	68ba      	ldr	r2, [r7, #8]
 8009186:	429a      	cmp	r2, r3
 8009188:	bf0c      	ite	eq
 800918a:	2301      	moveq	r3, #1
 800918c:	2300      	movne	r3, #0
 800918e:	b2db      	uxtb	r3, r3
 8009190:	461a      	mov	r2, r3
 8009192:	79fb      	ldrb	r3, [r7, #7]
 8009194:	429a      	cmp	r2, r3
 8009196:	d0be      	beq.n	8009116 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b084      	sub	sp, #16
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	60f8      	str	r0, [r7, #12]
 80091aa:	60b9      	str	r1, [r7, #8]
 80091ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80091ae:	e033      	b.n	8009218 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	68b9      	ldr	r1, [r7, #8]
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f000 f901 	bl	80093bc <I2C_IsErrorOccurred>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d001      	beq.n	80091c4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	e031      	b.n	8009228 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091ca:	d025      	beq.n	8009218 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091cc:	f7fe f966 	bl	800749c <HAL_GetTick>
 80091d0:	4602      	mov	r2, r0
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	1ad3      	subs	r3, r2, r3
 80091d6:	68ba      	ldr	r2, [r7, #8]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d302      	bcc.n	80091e2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d11a      	bne.n	8009218 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	699b      	ldr	r3, [r3, #24]
 80091e8:	f003 0302 	and.w	r3, r3, #2
 80091ec:	2b02      	cmp	r3, #2
 80091ee:	d013      	beq.n	8009218 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091f4:	f043 0220 	orr.w	r2, r3, #32
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2220      	movs	r2, #32
 8009200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2200      	movs	r2, #0
 8009208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2200      	movs	r2, #0
 8009210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	e007      	b.n	8009228 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	699b      	ldr	r3, [r3, #24]
 800921e:	f003 0302 	and.w	r3, r3, #2
 8009222:	2b02      	cmp	r3, #2
 8009224:	d1c4      	bne.n	80091b0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800923c:	e02f      	b.n	800929e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	68b9      	ldr	r1, [r7, #8]
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f000 f8ba 	bl	80093bc <I2C_IsErrorOccurred>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d001      	beq.n	8009252 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800924e:	2301      	movs	r3, #1
 8009250:	e02d      	b.n	80092ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009252:	f7fe f923 	bl	800749c <HAL_GetTick>
 8009256:	4602      	mov	r2, r0
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	1ad3      	subs	r3, r2, r3
 800925c:	68ba      	ldr	r2, [r7, #8]
 800925e:	429a      	cmp	r2, r3
 8009260:	d302      	bcc.n	8009268 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d11a      	bne.n	800929e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	699b      	ldr	r3, [r3, #24]
 800926e:	f003 0320 	and.w	r3, r3, #32
 8009272:	2b20      	cmp	r3, #32
 8009274:	d013      	beq.n	800929e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800927a:	f043 0220 	orr.w	r2, r3, #32
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2220      	movs	r2, #32
 8009286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2200      	movs	r2, #0
 800928e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	e007      	b.n	80092ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	699b      	ldr	r3, [r3, #24]
 80092a4:	f003 0320 	and.w	r3, r3, #32
 80092a8:	2b20      	cmp	r3, #32
 80092aa:	d1c8      	bne.n	800923e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
	...

080092b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80092c4:	e06b      	b.n	800939e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	68b9      	ldr	r1, [r7, #8]
 80092ca:	68f8      	ldr	r0, [r7, #12]
 80092cc:	f000 f876 	bl	80093bc <I2C_IsErrorOccurred>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d001      	beq.n	80092da <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	e069      	b.n	80093ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	699b      	ldr	r3, [r3, #24]
 80092e0:	f003 0320 	and.w	r3, r3, #32
 80092e4:	2b20      	cmp	r3, #32
 80092e6:	d138      	bne.n	800935a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	699b      	ldr	r3, [r3, #24]
 80092ee:	f003 0304 	and.w	r3, r3, #4
 80092f2:	2b04      	cmp	r3, #4
 80092f4:	d105      	bne.n	8009302 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d001      	beq.n	8009302 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80092fe:	2300      	movs	r3, #0
 8009300:	e055      	b.n	80093ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	699b      	ldr	r3, [r3, #24]
 8009308:	f003 0310 	and.w	r3, r3, #16
 800930c:	2b10      	cmp	r3, #16
 800930e:	d107      	bne.n	8009320 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2210      	movs	r2, #16
 8009316:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2204      	movs	r2, #4
 800931c:	645a      	str	r2, [r3, #68]	; 0x44
 800931e:	e002      	b.n	8009326 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2200      	movs	r2, #0
 8009324:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2220      	movs	r2, #32
 800932c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	6859      	ldr	r1, [r3, #4]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	4b1f      	ldr	r3, [pc, #124]	; (80093b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800933a:	400b      	ands	r3, r1
 800933c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2220      	movs	r2, #32
 8009342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2200      	movs	r2, #0
 8009352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	e029      	b.n	80093ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800935a:	f7fe f89f 	bl	800749c <HAL_GetTick>
 800935e:	4602      	mov	r2, r0
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	1ad3      	subs	r3, r2, r3
 8009364:	68ba      	ldr	r2, [r7, #8]
 8009366:	429a      	cmp	r2, r3
 8009368:	d302      	bcc.n	8009370 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d116      	bne.n	800939e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	699b      	ldr	r3, [r3, #24]
 8009376:	f003 0304 	and.w	r3, r3, #4
 800937a:	2b04      	cmp	r3, #4
 800937c:	d00f      	beq.n	800939e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009382:	f043 0220 	orr.w	r2, r3, #32
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2220      	movs	r2, #32
 800938e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2200      	movs	r2, #0
 8009396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e007      	b.n	80093ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	699b      	ldr	r3, [r3, #24]
 80093a4:	f003 0304 	and.w	r3, r3, #4
 80093a8:	2b04      	cmp	r3, #4
 80093aa:	d18c      	bne.n	80092c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	fe00e800 	.word	0xfe00e800

080093bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b08a      	sub	sp, #40	; 0x28
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093c8:	2300      	movs	r3, #0
 80093ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	699b      	ldr	r3, [r3, #24]
 80093d4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80093d6:	2300      	movs	r3, #0
 80093d8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	f003 0310 	and.w	r3, r3, #16
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d068      	beq.n	80094ba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2210      	movs	r2, #16
 80093ee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80093f0:	e049      	b.n	8009486 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093f8:	d045      	beq.n	8009486 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80093fa:	f7fe f84f 	bl	800749c <HAL_GetTick>
 80093fe:	4602      	mov	r2, r0
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	1ad3      	subs	r3, r2, r3
 8009404:	68ba      	ldr	r2, [r7, #8]
 8009406:	429a      	cmp	r2, r3
 8009408:	d302      	bcc.n	8009410 <I2C_IsErrorOccurred+0x54>
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d13a      	bne.n	8009486 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800941a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009422:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	699b      	ldr	r3, [r3, #24]
 800942a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800942e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009432:	d121      	bne.n	8009478 <I2C_IsErrorOccurred+0xbc>
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800943a:	d01d      	beq.n	8009478 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800943c:	7cfb      	ldrb	r3, [r7, #19]
 800943e:	2b20      	cmp	r3, #32
 8009440:	d01a      	beq.n	8009478 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	685a      	ldr	r2, [r3, #4]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009450:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009452:	f7fe f823 	bl	800749c <HAL_GetTick>
 8009456:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009458:	e00e      	b.n	8009478 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800945a:	f7fe f81f 	bl	800749c <HAL_GetTick>
 800945e:	4602      	mov	r2, r0
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	1ad3      	subs	r3, r2, r3
 8009464:	2b19      	cmp	r3, #25
 8009466:	d907      	bls.n	8009478 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009468:	6a3b      	ldr	r3, [r7, #32]
 800946a:	f043 0320 	orr.w	r3, r3, #32
 800946e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009470:	2301      	movs	r3, #1
 8009472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009476:	e006      	b.n	8009486 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	699b      	ldr	r3, [r3, #24]
 800947e:	f003 0320 	and.w	r3, r3, #32
 8009482:	2b20      	cmp	r3, #32
 8009484:	d1e9      	bne.n	800945a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	699b      	ldr	r3, [r3, #24]
 800948c:	f003 0320 	and.w	r3, r3, #32
 8009490:	2b20      	cmp	r3, #32
 8009492:	d003      	beq.n	800949c <I2C_IsErrorOccurred+0xe0>
 8009494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009498:	2b00      	cmp	r3, #0
 800949a:	d0aa      	beq.n	80093f2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800949c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d103      	bne.n	80094ac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2220      	movs	r2, #32
 80094aa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80094ac:	6a3b      	ldr	r3, [r7, #32]
 80094ae:	f043 0304 	orr.w	r3, r3, #4
 80094b2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80094b4:	2301      	movs	r3, #1
 80094b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	699b      	ldr	r3, [r3, #24]
 80094c0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d00b      	beq.n	80094e4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80094cc:	6a3b      	ldr	r3, [r7, #32]
 80094ce:	f043 0301 	orr.w	r3, r3, #1
 80094d2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80094dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00b      	beq.n	8009506 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80094ee:	6a3b      	ldr	r3, [r7, #32]
 80094f0:	f043 0308 	orr.w	r3, r3, #8
 80094f4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80094fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800950c:	2b00      	cmp	r3, #0
 800950e:	d00b      	beq.n	8009528 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009510:	6a3b      	ldr	r3, [r7, #32]
 8009512:	f043 0302 	orr.w	r3, r3, #2
 8009516:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009520:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800952c:	2b00      	cmp	r3, #0
 800952e:	d01c      	beq.n	800956a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009530:	68f8      	ldr	r0, [r7, #12]
 8009532:	f7ff fdc3 	bl	80090bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	6859      	ldr	r1, [r3, #4]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	4b0d      	ldr	r3, [pc, #52]	; (8009578 <I2C_IsErrorOccurred+0x1bc>)
 8009542:	400b      	ands	r3, r1
 8009544:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800954a:	6a3b      	ldr	r3, [r7, #32]
 800954c:	431a      	orrs	r2, r3
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2220      	movs	r2, #32
 8009556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800956a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800956e:	4618      	mov	r0, r3
 8009570:	3728      	adds	r7, #40	; 0x28
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	fe00e800 	.word	0xfe00e800

0800957c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800957c:	b480      	push	{r7}
 800957e:	b087      	sub	sp, #28
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	607b      	str	r3, [r7, #4]
 8009586:	460b      	mov	r3, r1
 8009588:	817b      	strh	r3, [r7, #10]
 800958a:	4613      	mov	r3, r2
 800958c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800958e:	897b      	ldrh	r3, [r7, #10]
 8009590:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009594:	7a7b      	ldrb	r3, [r7, #9]
 8009596:	041b      	lsls	r3, r3, #16
 8009598:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800959c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80095a2:	6a3b      	ldr	r3, [r7, #32]
 80095a4:	4313      	orrs	r3, r2
 80095a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095aa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	685a      	ldr	r2, [r3, #4]
 80095b2:	6a3b      	ldr	r3, [r7, #32]
 80095b4:	0d5b      	lsrs	r3, r3, #21
 80095b6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80095ba:	4b08      	ldr	r3, [pc, #32]	; (80095dc <I2C_TransferConfig+0x60>)
 80095bc:	430b      	orrs	r3, r1
 80095be:	43db      	mvns	r3, r3
 80095c0:	ea02 0103 	and.w	r1, r2, r3
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	697a      	ldr	r2, [r7, #20]
 80095ca:	430a      	orrs	r2, r1
 80095cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80095ce:	bf00      	nop
 80095d0:	371c      	adds	r7, #28
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	03ff63ff 	.word	0x03ff63ff

080095e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	2b20      	cmp	r3, #32
 80095f4:	d138      	bne.n	8009668 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d101      	bne.n	8009604 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009600:	2302      	movs	r3, #2
 8009602:	e032      	b.n	800966a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2201      	movs	r2, #1
 8009608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2224      	movs	r2, #36	; 0x24
 8009610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f022 0201 	bic.w	r2, r2, #1
 8009622:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009632:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	6819      	ldr	r1, [r3, #0]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	683a      	ldr	r2, [r7, #0]
 8009640:	430a      	orrs	r2, r1
 8009642:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f042 0201 	orr.w	r2, r2, #1
 8009652:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2220      	movs	r2, #32
 8009658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009664:	2300      	movs	r3, #0
 8009666:	e000      	b.n	800966a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009668:	2302      	movs	r3, #2
  }
}
 800966a:	4618      	mov	r0, r3
 800966c:	370c      	adds	r7, #12
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr

08009676 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009676:	b480      	push	{r7}
 8009678:	b085      	sub	sp, #20
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
 800967e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009686:	b2db      	uxtb	r3, r3
 8009688:	2b20      	cmp	r3, #32
 800968a:	d139      	bne.n	8009700 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009692:	2b01      	cmp	r3, #1
 8009694:	d101      	bne.n	800969a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009696:	2302      	movs	r3, #2
 8009698:	e033      	b.n	8009702 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2201      	movs	r2, #1
 800969e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2224      	movs	r2, #36	; 0x24
 80096a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f022 0201 	bic.w	r2, r2, #1
 80096b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80096c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	021b      	lsls	r3, r3, #8
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	4313      	orrs	r3, r2
 80096d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f042 0201 	orr.w	r2, r2, #1
 80096ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2220      	movs	r2, #32
 80096f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80096fc:	2300      	movs	r3, #0
 80096fe:	e000      	b.n	8009702 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009700:	2302      	movs	r3, #2
  }
}
 8009702:	4618      	mov	r0, r3
 8009704:	3714      	adds	r7, #20
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr

0800970e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800970e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009710:	b08f      	sub	sp, #60	; 0x3c
 8009712:	af0a      	add	r7, sp, #40	; 0x28
 8009714:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d101      	bne.n	8009720 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	e116      	b.n	800994e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800972c:	b2db      	uxtb	r3, r3
 800972e:	2b00      	cmp	r3, #0
 8009730:	d106      	bne.n	8009740 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f00f fdf6 	bl	801932c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2203      	movs	r2, #3
 8009744:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800974c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009750:	2b00      	cmp	r3, #0
 8009752:	d102      	bne.n	800975a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2200      	movs	r2, #0
 8009758:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4618      	mov	r0, r3
 8009760:	f009 fed9 	bl	8013516 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	603b      	str	r3, [r7, #0]
 800976a:	687e      	ldr	r6, [r7, #4]
 800976c:	466d      	mov	r5, sp
 800976e:	f106 0410 	add.w	r4, r6, #16
 8009772:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009774:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009776:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009778:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800977a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800977e:	e885 0003 	stmia.w	r5, {r0, r1}
 8009782:	1d33      	adds	r3, r6, #4
 8009784:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009786:	6838      	ldr	r0, [r7, #0]
 8009788:	f009 fdec 	bl	8013364 <USB_CoreInit>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d005      	beq.n	800979e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2202      	movs	r2, #2
 8009796:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e0d7      	b.n	800994e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	2100      	movs	r1, #0
 80097a4:	4618      	mov	r0, r3
 80097a6:	f009 fec7 	bl	8013538 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80097aa:	2300      	movs	r3, #0
 80097ac:	73fb      	strb	r3, [r7, #15]
 80097ae:	e04a      	b.n	8009846 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80097b0:	7bfa      	ldrb	r2, [r7, #15]
 80097b2:	6879      	ldr	r1, [r7, #4]
 80097b4:	4613      	mov	r3, r2
 80097b6:	00db      	lsls	r3, r3, #3
 80097b8:	4413      	add	r3, r2
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	440b      	add	r3, r1
 80097be:	333d      	adds	r3, #61	; 0x3d
 80097c0:	2201      	movs	r2, #1
 80097c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80097c4:	7bfa      	ldrb	r2, [r7, #15]
 80097c6:	6879      	ldr	r1, [r7, #4]
 80097c8:	4613      	mov	r3, r2
 80097ca:	00db      	lsls	r3, r3, #3
 80097cc:	4413      	add	r3, r2
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	440b      	add	r3, r1
 80097d2:	333c      	adds	r3, #60	; 0x3c
 80097d4:	7bfa      	ldrb	r2, [r7, #15]
 80097d6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80097d8:	7bfa      	ldrb	r2, [r7, #15]
 80097da:	7bfb      	ldrb	r3, [r7, #15]
 80097dc:	b298      	uxth	r0, r3
 80097de:	6879      	ldr	r1, [r7, #4]
 80097e0:	4613      	mov	r3, r2
 80097e2:	00db      	lsls	r3, r3, #3
 80097e4:	4413      	add	r3, r2
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	440b      	add	r3, r1
 80097ea:	3356      	adds	r3, #86	; 0x56
 80097ec:	4602      	mov	r2, r0
 80097ee:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80097f0:	7bfa      	ldrb	r2, [r7, #15]
 80097f2:	6879      	ldr	r1, [r7, #4]
 80097f4:	4613      	mov	r3, r2
 80097f6:	00db      	lsls	r3, r3, #3
 80097f8:	4413      	add	r3, r2
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	440b      	add	r3, r1
 80097fe:	3340      	adds	r3, #64	; 0x40
 8009800:	2200      	movs	r2, #0
 8009802:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009804:	7bfa      	ldrb	r2, [r7, #15]
 8009806:	6879      	ldr	r1, [r7, #4]
 8009808:	4613      	mov	r3, r2
 800980a:	00db      	lsls	r3, r3, #3
 800980c:	4413      	add	r3, r2
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	440b      	add	r3, r1
 8009812:	3344      	adds	r3, #68	; 0x44
 8009814:	2200      	movs	r2, #0
 8009816:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009818:	7bfa      	ldrb	r2, [r7, #15]
 800981a:	6879      	ldr	r1, [r7, #4]
 800981c:	4613      	mov	r3, r2
 800981e:	00db      	lsls	r3, r3, #3
 8009820:	4413      	add	r3, r2
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	440b      	add	r3, r1
 8009826:	3348      	adds	r3, #72	; 0x48
 8009828:	2200      	movs	r2, #0
 800982a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800982c:	7bfa      	ldrb	r2, [r7, #15]
 800982e:	6879      	ldr	r1, [r7, #4]
 8009830:	4613      	mov	r3, r2
 8009832:	00db      	lsls	r3, r3, #3
 8009834:	4413      	add	r3, r2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	440b      	add	r3, r1
 800983a:	334c      	adds	r3, #76	; 0x4c
 800983c:	2200      	movs	r2, #0
 800983e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009840:	7bfb      	ldrb	r3, [r7, #15]
 8009842:	3301      	adds	r3, #1
 8009844:	73fb      	strb	r3, [r7, #15]
 8009846:	7bfa      	ldrb	r2, [r7, #15]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	429a      	cmp	r2, r3
 800984e:	d3af      	bcc.n	80097b0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009850:	2300      	movs	r3, #0
 8009852:	73fb      	strb	r3, [r7, #15]
 8009854:	e044      	b.n	80098e0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009856:	7bfa      	ldrb	r2, [r7, #15]
 8009858:	6879      	ldr	r1, [r7, #4]
 800985a:	4613      	mov	r3, r2
 800985c:	00db      	lsls	r3, r3, #3
 800985e:	4413      	add	r3, r2
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	440b      	add	r3, r1
 8009864:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8009868:	2200      	movs	r2, #0
 800986a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800986c:	7bfa      	ldrb	r2, [r7, #15]
 800986e:	6879      	ldr	r1, [r7, #4]
 8009870:	4613      	mov	r3, r2
 8009872:	00db      	lsls	r3, r3, #3
 8009874:	4413      	add	r3, r2
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	440b      	add	r3, r1
 800987a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800987e:	7bfa      	ldrb	r2, [r7, #15]
 8009880:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009882:	7bfa      	ldrb	r2, [r7, #15]
 8009884:	6879      	ldr	r1, [r7, #4]
 8009886:	4613      	mov	r3, r2
 8009888:	00db      	lsls	r3, r3, #3
 800988a:	4413      	add	r3, r2
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	440b      	add	r3, r1
 8009890:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009894:	2200      	movs	r2, #0
 8009896:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009898:	7bfa      	ldrb	r2, [r7, #15]
 800989a:	6879      	ldr	r1, [r7, #4]
 800989c:	4613      	mov	r3, r2
 800989e:	00db      	lsls	r3, r3, #3
 80098a0:	4413      	add	r3, r2
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	440b      	add	r3, r1
 80098a6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80098aa:	2200      	movs	r2, #0
 80098ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80098ae:	7bfa      	ldrb	r2, [r7, #15]
 80098b0:	6879      	ldr	r1, [r7, #4]
 80098b2:	4613      	mov	r3, r2
 80098b4:	00db      	lsls	r3, r3, #3
 80098b6:	4413      	add	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	440b      	add	r3, r1
 80098bc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80098c0:	2200      	movs	r2, #0
 80098c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80098c4:	7bfa      	ldrb	r2, [r7, #15]
 80098c6:	6879      	ldr	r1, [r7, #4]
 80098c8:	4613      	mov	r3, r2
 80098ca:	00db      	lsls	r3, r3, #3
 80098cc:	4413      	add	r3, r2
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	440b      	add	r3, r1
 80098d2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80098d6:	2200      	movs	r2, #0
 80098d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80098da:	7bfb      	ldrb	r3, [r7, #15]
 80098dc:	3301      	adds	r3, #1
 80098de:	73fb      	strb	r3, [r7, #15]
 80098e0:	7bfa      	ldrb	r2, [r7, #15]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d3b5      	bcc.n	8009856 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	603b      	str	r3, [r7, #0]
 80098f0:	687e      	ldr	r6, [r7, #4]
 80098f2:	466d      	mov	r5, sp
 80098f4:	f106 0410 	add.w	r4, r6, #16
 80098f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80098fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80098fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80098fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009900:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009904:	e885 0003 	stmia.w	r5, {r0, r1}
 8009908:	1d33      	adds	r3, r6, #4
 800990a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800990c:	6838      	ldr	r0, [r7, #0]
 800990e:	f009 fe5f 	bl	80135d0 <USB_DevInit>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d005      	beq.n	8009924 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2202      	movs	r2, #2
 800991c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009920:	2301      	movs	r3, #1
 8009922:	e014      	b.n	800994e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2201      	movs	r2, #1
 8009930:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009938:	2b01      	cmp	r3, #1
 800993a:	d102      	bne.n	8009942 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f001 f869 	bl	800aa14 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4618      	mov	r0, r3
 8009948:	f00a fe0d 	bl	8014566 <USB_DevDisconnect>

  return HAL_OK;
 800994c:	2300      	movs	r3, #0
}
 800994e:	4618      	mov	r0, r3
 8009950:	3714      	adds	r7, #20
 8009952:	46bd      	mov	sp, r7
 8009954:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009956 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b084      	sub	sp, #16
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800996a:	2b01      	cmp	r3, #1
 800996c:	d101      	bne.n	8009972 <HAL_PCD_Start+0x1c>
 800996e:	2302      	movs	r3, #2
 8009970:	e01c      	b.n	80099ac <HAL_PCD_Start+0x56>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2201      	movs	r2, #1
 8009976:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800997e:	2b01      	cmp	r3, #1
 8009980:	d105      	bne.n	800998e <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009986:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4618      	mov	r0, r3
 8009994:	f009 fdae 	bl	80134f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4618      	mov	r0, r3
 800999e:	f00a fdc1 	bl	8014524 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80099aa:	2300      	movs	r3, #0
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3710      	adds	r7, #16
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80099b4:	b590      	push	{r4, r7, lr}
 80099b6:	b08d      	sub	sp, #52	; 0x34
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099c2:	6a3b      	ldr	r3, [r7, #32]
 80099c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f00a fe7f 	bl	80146ce <USB_GetMode>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	f040 847e 	bne.w	800a2d4 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4618      	mov	r0, r3
 80099de:	f00a fde3 	bl	80145a8 <USB_ReadInterrupts>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	f000 8474 	beq.w	800a2d2 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80099ea:	69fb      	ldr	r3, [r7, #28]
 80099ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	0a1b      	lsrs	r3, r3, #8
 80099f4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4618      	mov	r0, r3
 8009a04:	f00a fdd0 	bl	80145a8 <USB_ReadInterrupts>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	f003 0302 	and.w	r3, r3, #2
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d107      	bne.n	8009a22 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	695a      	ldr	r2, [r3, #20]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f002 0202 	and.w	r2, r2, #2
 8009a20:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4618      	mov	r0, r3
 8009a28:	f00a fdbe 	bl	80145a8 <USB_ReadInterrupts>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	f003 0310 	and.w	r3, r3, #16
 8009a32:	2b10      	cmp	r3, #16
 8009a34:	d161      	bne.n	8009afa <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	699a      	ldr	r2, [r3, #24]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f022 0210 	bic.w	r2, r2, #16
 8009a44:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8009a46:	6a3b      	ldr	r3, [r7, #32]
 8009a48:	6a1b      	ldr	r3, [r3, #32]
 8009a4a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	f003 020f 	and.w	r2, r3, #15
 8009a52:	4613      	mov	r3, r2
 8009a54:	00db      	lsls	r3, r3, #3
 8009a56:	4413      	add	r3, r2
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	4413      	add	r3, r2
 8009a62:	3304      	adds	r3, #4
 8009a64:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	0c5b      	lsrs	r3, r3, #17
 8009a6a:	f003 030f 	and.w	r3, r3, #15
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	d124      	bne.n	8009abc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009a72:	69ba      	ldr	r2, [r7, #24]
 8009a74:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009a78:	4013      	ands	r3, r2
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d035      	beq.n	8009aea <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	091b      	lsrs	r3, r3, #4
 8009a86:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009a88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	461a      	mov	r2, r3
 8009a90:	6a38      	ldr	r0, [r7, #32]
 8009a92:	f00a fbf5 	bl	8014280 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	68da      	ldr	r2, [r3, #12]
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	091b      	lsrs	r3, r3, #4
 8009a9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009aa2:	441a      	add	r2, r3
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	695a      	ldr	r2, [r3, #20]
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	091b      	lsrs	r3, r3, #4
 8009ab0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ab4:	441a      	add	r2, r3
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	615a      	str	r2, [r3, #20]
 8009aba:	e016      	b.n	8009aea <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	0c5b      	lsrs	r3, r3, #17
 8009ac0:	f003 030f 	and.w	r3, r3, #15
 8009ac4:	2b06      	cmp	r3, #6
 8009ac6:	d110      	bne.n	8009aea <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009ace:	2208      	movs	r2, #8
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	6a38      	ldr	r0, [r7, #32]
 8009ad4:	f00a fbd4 	bl	8014280 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	695a      	ldr	r2, [r3, #20]
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	091b      	lsrs	r3, r3, #4
 8009ae0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ae4:	441a      	add	r2, r3
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	699a      	ldr	r2, [r3, #24]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f042 0210 	orr.w	r2, r2, #16
 8009af8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4618      	mov	r0, r3
 8009b00:	f00a fd52 	bl	80145a8 <USB_ReadInterrupts>
 8009b04:	4603      	mov	r3, r0
 8009b06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009b0a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009b0e:	f040 80a7 	bne.w	8009c60 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8009b12:	2300      	movs	r3, #0
 8009b14:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f00a fd57 	bl	80145ce <USB_ReadDevAllOutEpInterrupt>
 8009b20:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009b22:	e099      	b.n	8009c58 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b26:	f003 0301 	and.w	r3, r3, #1
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	f000 808e 	beq.w	8009c4c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b36:	b2d2      	uxtb	r2, r2
 8009b38:	4611      	mov	r1, r2
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f00a fd7b 	bl	8014636 <USB_ReadDevOutEPInterrupt>
 8009b40:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	f003 0301 	and.w	r3, r3, #1
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00c      	beq.n	8009b66 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4e:	015a      	lsls	r2, r3, #5
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	4413      	add	r3, r2
 8009b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b58:	461a      	mov	r2, r3
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009b5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 fe7d 	bl	800a860 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	f003 0308 	and.w	r3, r3, #8
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00c      	beq.n	8009b8a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	015a      	lsls	r2, r3, #5
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	4413      	add	r3, r2
 8009b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	2308      	movs	r3, #8
 8009b80:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009b82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 feb9 	bl	800a8fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	f003 0310 	and.w	r3, r3, #16
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d008      	beq.n	8009ba6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b96:	015a      	lsls	r2, r3, #5
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	4413      	add	r3, r2
 8009b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	2310      	movs	r3, #16
 8009ba4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	f003 0302 	and.w	r3, r3, #2
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d030      	beq.n	8009c12 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009bb0:	6a3b      	ldr	r3, [r7, #32]
 8009bb2:	695b      	ldr	r3, [r3, #20]
 8009bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bb8:	2b80      	cmp	r3, #128	; 0x80
 8009bba:	d109      	bne.n	8009bd0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	69fa      	ldr	r2, [r7, #28]
 8009bc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009bce:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8009bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bd2:	4613      	mov	r3, r2
 8009bd4:	00db      	lsls	r3, r3, #3
 8009bd6:	4413      	add	r3, r2
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	4413      	add	r3, r2
 8009be2:	3304      	adds	r3, #4
 8009be4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	78db      	ldrb	r3, [r3, #3]
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	d108      	bne.n	8009c00 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f00f fcda 	bl	80195b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c02:	015a      	lsls	r2, r3, #5
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	4413      	add	r3, r2
 8009c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	2302      	movs	r3, #2
 8009c10:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	f003 0320 	and.w	r3, r3, #32
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d008      	beq.n	8009c2e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1e:	015a      	lsls	r2, r3, #5
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	4413      	add	r3, r2
 8009c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c28:	461a      	mov	r2, r3
 8009c2a:	2320      	movs	r3, #32
 8009c2c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d009      	beq.n	8009c4c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3a:	015a      	lsls	r2, r3, #5
 8009c3c:	69fb      	ldr	r3, [r7, #28]
 8009c3e:	4413      	add	r3, r2
 8009c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c44:	461a      	mov	r2, r3
 8009c46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009c4a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4e:	3301      	adds	r3, #1
 8009c50:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c54:	085b      	lsrs	r3, r3, #1
 8009c56:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	f47f af62 	bne.w	8009b24 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4618      	mov	r0, r3
 8009c66:	f00a fc9f 	bl	80145a8 <USB_ReadInterrupts>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009c74:	f040 80a4 	bne.w	8009dc0 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f00a fcc0 	bl	8014602 <USB_ReadDevAllInEpInterrupt>
 8009c82:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009c84:	2300      	movs	r3, #0
 8009c86:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009c88:	e096      	b.n	8009db8 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8c:	f003 0301 	and.w	r3, r3, #1
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	f000 808b 	beq.w	8009dac <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c9c:	b2d2      	uxtb	r2, r2
 8009c9e:	4611      	mov	r1, r2
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f00a fce6 	bl	8014672 <USB_ReadDevInEPInterrupt>
 8009ca6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	f003 0301 	and.w	r3, r3, #1
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d020      	beq.n	8009cf4 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb4:	f003 030f 	and.w	r3, r3, #15
 8009cb8:	2201      	movs	r2, #1
 8009cba:	fa02 f303 	lsl.w	r3, r2, r3
 8009cbe:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009cc0:	69fb      	ldr	r3, [r7, #28]
 8009cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	43db      	mvns	r3, r3
 8009ccc:	69f9      	ldr	r1, [r7, #28]
 8009cce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009cd2:	4013      	ands	r3, r2
 8009cd4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd8:	015a      	lsls	r2, r3, #5
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	4413      	add	r3, r2
 8009cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	4619      	mov	r1, r3
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f00f fbcb 	bl	801948a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	f003 0308 	and.w	r3, r3, #8
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d008      	beq.n	8009d10 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d00:	015a      	lsls	r2, r3, #5
 8009d02:	69fb      	ldr	r3, [r7, #28]
 8009d04:	4413      	add	r3, r2
 8009d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	2308      	movs	r3, #8
 8009d0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	f003 0310 	and.w	r3, r3, #16
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d008      	beq.n	8009d2c <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1c:	015a      	lsls	r2, r3, #5
 8009d1e:	69fb      	ldr	r3, [r7, #28]
 8009d20:	4413      	add	r3, r2
 8009d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d26:	461a      	mov	r2, r3
 8009d28:	2310      	movs	r3, #16
 8009d2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d008      	beq.n	8009d48 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d38:	015a      	lsls	r2, r3, #5
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d42:	461a      	mov	r2, r3
 8009d44:	2340      	movs	r3, #64	; 0x40
 8009d46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	f003 0302 	and.w	r3, r3, #2
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d023      	beq.n	8009d9a <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009d52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d54:	6a38      	ldr	r0, [r7, #32]
 8009d56:	f009 fd7d 	bl	8013854 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8009d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d5c:	4613      	mov	r3, r2
 8009d5e:	00db      	lsls	r3, r3, #3
 8009d60:	4413      	add	r3, r2
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	3338      	adds	r3, #56	; 0x38
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	4413      	add	r3, r2
 8009d6a:	3304      	adds	r3, #4
 8009d6c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	78db      	ldrb	r3, [r3, #3]
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d108      	bne.n	8009d88 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	4619      	mov	r1, r3
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f00f fc28 	bl	80195d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8a:	015a      	lsls	r2, r3, #5
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	4413      	add	r3, r2
 8009d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d94:	461a      	mov	r2, r3
 8009d96:	2302      	movs	r3, #2
 8009d98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d003      	beq.n	8009dac <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009da4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 fcd2 	bl	800a750 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dae:	3301      	adds	r3, #1
 8009db0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db4:	085b      	lsrs	r3, r3, #1
 8009db6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	f47f af65 	bne.w	8009c8a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f00a fbef 	bl	80145a8 <USB_ReadInterrupts>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009dd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009dd4:	d122      	bne.n	8009e1c <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009dd6:	69fb      	ldr	r3, [r7, #28]
 8009dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	69fa      	ldr	r2, [r7, #28]
 8009de0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009de4:	f023 0301 	bic.w	r3, r3, #1
 8009de8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d108      	bne.n	8009e06 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 fe2c 	bl	800aa5c <HAL_PCDEx_LPM_Callback>
 8009e04:	e002      	b.n	8009e0c <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f00f fbac 	bl	8019564 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	695a      	ldr	r2, [r3, #20]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009e1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4618      	mov	r0, r3
 8009e22:	f00a fbc1 	bl	80145a8 <USB_ReadInterrupts>
 8009e26:	4603      	mov	r3, r0
 8009e28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e30:	d112      	bne.n	8009e58 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009e32:	69fb      	ldr	r3, [r7, #28]
 8009e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	f003 0301 	and.w	r3, r3, #1
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d102      	bne.n	8009e48 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f00f fb68 	bl	8019518 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	695a      	ldr	r2, [r3, #20]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009e56:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f00a fba3 	bl	80145a8 <USB_ReadInterrupts>
 8009e62:	4603      	mov	r3, r0
 8009e64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e6c:	d121      	bne.n	8009eb2 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	695a      	ldr	r2, [r3, #20]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8009e7c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d111      	bne.n	8009eac <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e96:	089b      	lsrs	r3, r3, #2
 8009e98:	f003 020f 	and.w	r2, r3, #15
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009ea2:	2101      	movs	r1, #1
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 fdd9 	bl	800aa5c <HAL_PCDEx_LPM_Callback>
 8009eaa:	e002      	b.n	8009eb2 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f00f fb33 	bl	8019518 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f00a fb76 	bl	80145a8 <USB_ReadInterrupts>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ec6:	f040 80b5 	bne.w	800a034 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009eca:	69fb      	ldr	r3, [r7, #28]
 8009ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	69fa      	ldr	r2, [r7, #28]
 8009ed4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ed8:	f023 0301 	bic.w	r3, r3, #1
 8009edc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2110      	movs	r1, #16
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f009 fcb5 	bl	8013854 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009eea:	2300      	movs	r3, #0
 8009eec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009eee:	e046      	b.n	8009f7e <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef2:	015a      	lsls	r2, r3, #5
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	4413      	add	r3, r2
 8009ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009efc:	461a      	mov	r2, r3
 8009efe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009f02:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f06:	015a      	lsls	r2, r3, #5
 8009f08:	69fb      	ldr	r3, [r7, #28]
 8009f0a:	4413      	add	r3, r2
 8009f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f14:	0151      	lsls	r1, r2, #5
 8009f16:	69fa      	ldr	r2, [r7, #28]
 8009f18:	440a      	add	r2, r1
 8009f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f22:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f26:	015a      	lsls	r2, r3, #5
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	4413      	add	r3, r2
 8009f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f30:	461a      	mov	r2, r3
 8009f32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009f36:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f3a:	015a      	lsls	r2, r3, #5
 8009f3c:	69fb      	ldr	r3, [r7, #28]
 8009f3e:	4413      	add	r3, r2
 8009f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f48:	0151      	lsls	r1, r2, #5
 8009f4a:	69fa      	ldr	r2, [r7, #28]
 8009f4c:	440a      	add	r2, r1
 8009f4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f56:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5a:	015a      	lsls	r2, r3, #5
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	4413      	add	r3, r2
 8009f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f68:	0151      	lsls	r1, r2, #5
 8009f6a:	69fa      	ldr	r2, [r7, #28]
 8009f6c:	440a      	add	r2, r1
 8009f6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f76:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d3b3      	bcc.n	8009ef0 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009f88:	69fb      	ldr	r3, [r7, #28]
 8009f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f8e:	69db      	ldr	r3, [r3, #28]
 8009f90:	69fa      	ldr	r2, [r7, #28]
 8009f92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f96:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009f9a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d016      	beq.n	8009fd2 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009fa4:	69fb      	ldr	r3, [r7, #28]
 8009fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fae:	69fa      	ldr	r2, [r7, #28]
 8009fb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fb4:	f043 030b 	orr.w	r3, r3, #11
 8009fb8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fc4:	69fa      	ldr	r2, [r7, #28]
 8009fc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fca:	f043 030b 	orr.w	r3, r3, #11
 8009fce:	6453      	str	r3, [r2, #68]	; 0x44
 8009fd0:	e015      	b.n	8009ffe <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009fd2:	69fb      	ldr	r3, [r7, #28]
 8009fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fd8:	695b      	ldr	r3, [r3, #20]
 8009fda:	69fa      	ldr	r2, [r7, #28]
 8009fdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fe0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009fe4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8009fe8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009fea:	69fb      	ldr	r3, [r7, #28]
 8009fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ff0:	691b      	ldr	r3, [r3, #16]
 8009ff2:	69fa      	ldr	r2, [r7, #28]
 8009ff4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ff8:	f043 030b 	orr.w	r3, r3, #11
 8009ffc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	69fa      	ldr	r2, [r7, #28]
 800a008:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a00c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a010:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a01c:	4619      	mov	r1, r3
 800a01e:	4610      	mov	r0, r2
 800a020:	f00a fb86 	bl	8014730 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	695a      	ldr	r2, [r3, #20]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a032:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4618      	mov	r0, r3
 800a03a:	f00a fab5 	bl	80145a8 <USB_ReadInterrupts>
 800a03e:	4603      	mov	r3, r0
 800a040:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a048:	d124      	bne.n	800a094 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4618      	mov	r0, r3
 800a050:	f00a fb4b 	bl	80146ea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4618      	mov	r0, r3
 800a05a:	f009 fc78 	bl	801394e <USB_GetDevSpeed>
 800a05e:	4603      	mov	r3, r0
 800a060:	461a      	mov	r2, r3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681c      	ldr	r4, [r3, #0]
 800a06a:	f001 fbb7 	bl	800b7dc <HAL_RCC_GetHCLKFreq>
 800a06e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a074:	b2db      	uxtb	r3, r3
 800a076:	461a      	mov	r2, r3
 800a078:	4620      	mov	r0, r4
 800a07a:	f009 f99f 	bl	80133bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f00f fa2b 	bl	80194da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	695a      	ldr	r2, [r3, #20]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a092:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4618      	mov	r0, r3
 800a09a:	f00a fa85 	bl	80145a8 <USB_ReadInterrupts>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	f003 0308 	and.w	r3, r3, #8
 800a0a4:	2b08      	cmp	r3, #8
 800a0a6:	d10a      	bne.n	800a0be <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f00f fa08 	bl	80194be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	695a      	ldr	r2, [r3, #20]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f002 0208 	and.w	r2, r2, #8
 800a0bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f00a fa70 	bl	80145a8 <USB_ReadInterrupts>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0ce:	2b80      	cmp	r3, #128	; 0x80
 800a0d0:	d122      	bne.n	800a118 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800a0d2:	6a3b      	ldr	r3, [r7, #32]
 800a0d4:	699b      	ldr	r3, [r3, #24]
 800a0d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a0da:	6a3b      	ldr	r3, [r7, #32]
 800a0dc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a0de:	2301      	movs	r3, #1
 800a0e0:	627b      	str	r3, [r7, #36]	; 0x24
 800a0e2:	e014      	b.n	800a10e <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a0e4:	6879      	ldr	r1, [r7, #4]
 800a0e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0e8:	4613      	mov	r3, r2
 800a0ea:	00db      	lsls	r3, r3, #3
 800a0ec:	4413      	add	r3, r2
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	440b      	add	r3, r1
 800a0f2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d105      	bne.n	800a108 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800a0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	4619      	mov	r1, r3
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 faf3 	bl	800a6ee <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10a:	3301      	adds	r3, #1
 800a10c:	627b      	str	r3, [r7, #36]	; 0x24
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a114:	429a      	cmp	r2, r3
 800a116:	d3e5      	bcc.n	800a0e4 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4618      	mov	r0, r3
 800a11e:	f00a fa43 	bl	80145a8 <USB_ReadInterrupts>
 800a122:	4603      	mov	r3, r0
 800a124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a128:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a12c:	d13b      	bne.n	800a1a6 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a12e:	2301      	movs	r3, #1
 800a130:	627b      	str	r3, [r7, #36]	; 0x24
 800a132:	e02b      	b.n	800a18c <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a136:	015a      	lsls	r2, r3, #5
 800a138:	69fb      	ldr	r3, [r7, #28]
 800a13a:	4413      	add	r3, r2
 800a13c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a144:	6879      	ldr	r1, [r7, #4]
 800a146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a148:	4613      	mov	r3, r2
 800a14a:	00db      	lsls	r3, r3, #3
 800a14c:	4413      	add	r3, r2
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	440b      	add	r3, r1
 800a152:	3340      	adds	r3, #64	; 0x40
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	2b01      	cmp	r3, #1
 800a158:	d115      	bne.n	800a186 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800a15a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	da12      	bge.n	800a186 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a160:	6879      	ldr	r1, [r7, #4]
 800a162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a164:	4613      	mov	r3, r2
 800a166:	00db      	lsls	r3, r3, #3
 800a168:	4413      	add	r3, r2
 800a16a:	009b      	lsls	r3, r3, #2
 800a16c:	440b      	add	r3, r1
 800a16e:	333f      	adds	r3, #63	; 0x3f
 800a170:	2201      	movs	r2, #1
 800a172:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800a174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a176:	b2db      	uxtb	r3, r3
 800a178:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	4619      	mov	r1, r3
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 fab4 	bl	800a6ee <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a188:	3301      	adds	r3, #1
 800a18a:	627b      	str	r3, [r7, #36]	; 0x24
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a192:	429a      	cmp	r2, r3
 800a194:	d3ce      	bcc.n	800a134 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	695a      	ldr	r2, [r3, #20]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a1a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f00a f9fc 	bl	80145a8 <USB_ReadInterrupts>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a1b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a1ba:	d155      	bne.n	800a268 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a1bc:	2301      	movs	r3, #1
 800a1be:	627b      	str	r3, [r7, #36]	; 0x24
 800a1c0:	e045      	b.n	800a24e <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800a1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c4:	015a      	lsls	r2, r3, #5
 800a1c6:	69fb      	ldr	r3, [r7, #28]
 800a1c8:	4413      	add	r3, r2
 800a1ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a1d2:	6879      	ldr	r1, [r7, #4]
 800a1d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1d6:	4613      	mov	r3, r2
 800a1d8:	00db      	lsls	r3, r3, #3
 800a1da:	4413      	add	r3, r2
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	440b      	add	r3, r1
 800a1e0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	d12e      	bne.n	800a248 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a1ea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	da2b      	bge.n	800a248 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800a1fc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a200:	429a      	cmp	r2, r3
 800a202:	d121      	bne.n	800a248 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800a204:	6879      	ldr	r1, [r7, #4]
 800a206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a208:	4613      	mov	r3, r2
 800a20a:	00db      	lsls	r3, r3, #3
 800a20c:	4413      	add	r3, r2
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	440b      	add	r3, r1
 800a212:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800a216:	2201      	movs	r2, #1
 800a218:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800a21a:	6a3b      	ldr	r3, [r7, #32]
 800a21c:	699b      	ldr	r3, [r3, #24]
 800a21e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a222:	6a3b      	ldr	r3, [r7, #32]
 800a224:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800a226:	6a3b      	ldr	r3, [r7, #32]
 800a228:	695b      	ldr	r3, [r3, #20]
 800a22a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d10a      	bne.n	800a248 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800a232:	69fb      	ldr	r3, [r7, #28]
 800a234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	69fa      	ldr	r2, [r7, #28]
 800a23c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a240:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a244:	6053      	str	r3, [r2, #4]
            break;
 800a246:	e007      	b.n	800a258 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24a:	3301      	adds	r3, #1
 800a24c:	627b      	str	r3, [r7, #36]	; 0x24
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a254:	429a      	cmp	r2, r3
 800a256:	d3b4      	bcc.n	800a1c2 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	695a      	ldr	r2, [r3, #20]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a266:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4618      	mov	r0, r3
 800a26e:	f00a f99b 	bl	80145a8 <USB_ReadInterrupts>
 800a272:	4603      	mov	r3, r0
 800a274:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a27c:	d10a      	bne.n	800a294 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f00f f9bc 	bl	80195fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	695a      	ldr	r2, [r3, #20]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a292:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4618      	mov	r0, r3
 800a29a:	f00a f985 	bl	80145a8 <USB_ReadInterrupts>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	f003 0304 	and.w	r3, r3, #4
 800a2a4:	2b04      	cmp	r3, #4
 800a2a6:	d115      	bne.n	800a2d4 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a2b0:	69bb      	ldr	r3, [r7, #24]
 800a2b2:	f003 0304 	and.w	r3, r3, #4
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d002      	beq.n	800a2c0 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f00f f9ac 	bl	8019618 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	6859      	ldr	r1, [r3, #4]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	69ba      	ldr	r2, [r7, #24]
 800a2cc:	430a      	orrs	r2, r1
 800a2ce:	605a      	str	r2, [r3, #4]
 800a2d0:	e000      	b.n	800a2d4 <HAL_PCD_IRQHandler+0x920>
      return;
 800a2d2:	bf00      	nop
    }
  }
}
 800a2d4:	3734      	adds	r7, #52	; 0x34
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd90      	pop	{r4, r7, pc}

0800a2da <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a2da:	b580      	push	{r7, lr}
 800a2dc:	b082      	sub	sp, #8
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
 800a2e2:	460b      	mov	r3, r1
 800a2e4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d101      	bne.n	800a2f4 <HAL_PCD_SetAddress+0x1a>
 800a2f0:	2302      	movs	r3, #2
 800a2f2:	e013      	b.n	800a31c <HAL_PCD_SetAddress+0x42>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	78fa      	ldrb	r2, [r7, #3]
 800a300:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	78fa      	ldrb	r2, [r7, #3]
 800a30a:	4611      	mov	r1, r2
 800a30c:	4618      	mov	r0, r3
 800a30e:	f00a f8e3 	bl	80144d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2200      	movs	r2, #0
 800a316:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3708      	adds	r7, #8
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	4608      	mov	r0, r1
 800a32e:	4611      	mov	r1, r2
 800a330:	461a      	mov	r2, r3
 800a332:	4603      	mov	r3, r0
 800a334:	70fb      	strb	r3, [r7, #3]
 800a336:	460b      	mov	r3, r1
 800a338:	803b      	strh	r3, [r7, #0]
 800a33a:	4613      	mov	r3, r2
 800a33c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a33e:	2300      	movs	r3, #0
 800a340:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a342:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a346:	2b00      	cmp	r3, #0
 800a348:	da0f      	bge.n	800a36a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a34a:	78fb      	ldrb	r3, [r7, #3]
 800a34c:	f003 020f 	and.w	r2, r3, #15
 800a350:	4613      	mov	r3, r2
 800a352:	00db      	lsls	r3, r3, #3
 800a354:	4413      	add	r3, r2
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	3338      	adds	r3, #56	; 0x38
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	4413      	add	r3, r2
 800a35e:	3304      	adds	r3, #4
 800a360:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2201      	movs	r2, #1
 800a366:	705a      	strb	r2, [r3, #1]
 800a368:	e00f      	b.n	800a38a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a36a:	78fb      	ldrb	r3, [r7, #3]
 800a36c:	f003 020f 	and.w	r2, r3, #15
 800a370:	4613      	mov	r3, r2
 800a372:	00db      	lsls	r3, r3, #3
 800a374:	4413      	add	r3, r2
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	4413      	add	r3, r2
 800a380:	3304      	adds	r3, #4
 800a382:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2200      	movs	r2, #0
 800a388:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a38a:	78fb      	ldrb	r3, [r7, #3]
 800a38c:	f003 030f 	and.w	r3, r3, #15
 800a390:	b2da      	uxtb	r2, r3
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a396:	883a      	ldrh	r2, [r7, #0]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	78ba      	ldrb	r2, [r7, #2]
 800a3a0:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	785b      	ldrb	r3, [r3, #1]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d004      	beq.n	800a3b4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	b29a      	uxth	r2, r3
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a3b4:	78bb      	ldrb	r3, [r7, #2]
 800a3b6:	2b02      	cmp	r3, #2
 800a3b8:	d102      	bne.n	800a3c0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	d101      	bne.n	800a3ce <HAL_PCD_EP_Open+0xaa>
 800a3ca:	2302      	movs	r3, #2
 800a3cc:	e00e      	b.n	800a3ec <HAL_PCD_EP_Open+0xc8>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	68f9      	ldr	r1, [r7, #12]
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f009 fad5 	bl	801398c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800a3ea:	7afb      	ldrb	r3, [r7, #11]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3710      	adds	r7, #16
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a400:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a404:	2b00      	cmp	r3, #0
 800a406:	da0f      	bge.n	800a428 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a408:	78fb      	ldrb	r3, [r7, #3]
 800a40a:	f003 020f 	and.w	r2, r3, #15
 800a40e:	4613      	mov	r3, r2
 800a410:	00db      	lsls	r3, r3, #3
 800a412:	4413      	add	r3, r2
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	3338      	adds	r3, #56	; 0x38
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	4413      	add	r3, r2
 800a41c:	3304      	adds	r3, #4
 800a41e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2201      	movs	r2, #1
 800a424:	705a      	strb	r2, [r3, #1]
 800a426:	e00f      	b.n	800a448 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a428:	78fb      	ldrb	r3, [r7, #3]
 800a42a:	f003 020f 	and.w	r2, r3, #15
 800a42e:	4613      	mov	r3, r2
 800a430:	00db      	lsls	r3, r3, #3
 800a432:	4413      	add	r3, r2
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	4413      	add	r3, r2
 800a43e:	3304      	adds	r3, #4
 800a440:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2200      	movs	r2, #0
 800a446:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a448:	78fb      	ldrb	r3, [r7, #3]
 800a44a:	f003 030f 	and.w	r3, r3, #15
 800a44e:	b2da      	uxtb	r2, r3
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d101      	bne.n	800a462 <HAL_PCD_EP_Close+0x6e>
 800a45e:	2302      	movs	r3, #2
 800a460:	e00e      	b.n	800a480 <HAL_PCD_EP_Close+0x8c>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2201      	movs	r2, #1
 800a466:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	68f9      	ldr	r1, [r7, #12]
 800a470:	4618      	mov	r0, r3
 800a472:	f009 fb13 	bl	8013a9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2200      	movs	r2, #0
 800a47a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800a47e:	2300      	movs	r3, #0
}
 800a480:	4618      	mov	r0, r3
 800a482:	3710      	adds	r7, #16
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b086      	sub	sp, #24
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	607a      	str	r2, [r7, #4]
 800a492:	603b      	str	r3, [r7, #0]
 800a494:	460b      	mov	r3, r1
 800a496:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a498:	7afb      	ldrb	r3, [r7, #11]
 800a49a:	f003 020f 	and.w	r2, r3, #15
 800a49e:	4613      	mov	r3, r2
 800a4a0:	00db      	lsls	r3, r3, #3
 800a4a2:	4413      	add	r3, r2
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a4aa:	68fa      	ldr	r2, [r7, #12]
 800a4ac:	4413      	add	r3, r2
 800a4ae:	3304      	adds	r3, #4
 800a4b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	687a      	ldr	r2, [r7, #4]
 800a4b6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	683a      	ldr	r2, [r7, #0]
 800a4bc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a4ca:	7afb      	ldrb	r3, [r7, #11]
 800a4cc:	f003 030f 	and.w	r3, r3, #15
 800a4d0:	b2da      	uxtb	r2, r3
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	6979      	ldr	r1, [r7, #20]
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f009 fbb9 	bl	8013c54 <USB_EPStartXfer>

  return HAL_OK;
 800a4e2:	2300      	movs	r3, #0
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3718      	adds	r7, #24
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a4f8:	78fb      	ldrb	r3, [r7, #3]
 800a4fa:	f003 020f 	and.w	r2, r3, #15
 800a4fe:	6879      	ldr	r1, [r7, #4]
 800a500:	4613      	mov	r3, r2
 800a502:	00db      	lsls	r3, r3, #3
 800a504:	4413      	add	r3, r2
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	440b      	add	r3, r1
 800a50a:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800a50e:	681b      	ldr	r3, [r3, #0]
}
 800a510:	4618      	mov	r0, r3
 800a512:	370c      	adds	r7, #12
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr

0800a51c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b086      	sub	sp, #24
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	607a      	str	r2, [r7, #4]
 800a526:	603b      	str	r3, [r7, #0]
 800a528:	460b      	mov	r3, r1
 800a52a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a52c:	7afb      	ldrb	r3, [r7, #11]
 800a52e:	f003 020f 	and.w	r2, r3, #15
 800a532:	4613      	mov	r3, r2
 800a534:	00db      	lsls	r3, r3, #3
 800a536:	4413      	add	r3, r2
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	3338      	adds	r3, #56	; 0x38
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	4413      	add	r3, r2
 800a540:	3304      	adds	r3, #4
 800a542:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	683a      	ldr	r2, [r7, #0]
 800a54e:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	2200      	movs	r2, #0
 800a554:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	2201      	movs	r2, #1
 800a55a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a55c:	7afb      	ldrb	r3, [r7, #11]
 800a55e:	f003 030f 	and.w	r3, r3, #15
 800a562:	b2da      	uxtb	r2, r3
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	6979      	ldr	r1, [r7, #20]
 800a56e:	4618      	mov	r0, r3
 800a570:	f009 fb70 	bl	8013c54 <USB_EPStartXfer>

  return HAL_OK;
 800a574:	2300      	movs	r3, #0
}
 800a576:	4618      	mov	r0, r3
 800a578:	3718      	adds	r7, #24
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b084      	sub	sp, #16
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
 800a586:	460b      	mov	r3, r1
 800a588:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a58a:	78fb      	ldrb	r3, [r7, #3]
 800a58c:	f003 020f 	and.w	r2, r3, #15
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	429a      	cmp	r2, r3
 800a596:	d901      	bls.n	800a59c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a598:	2301      	movs	r3, #1
 800a59a:	e04e      	b.n	800a63a <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a59c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	da0f      	bge.n	800a5c4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a5a4:	78fb      	ldrb	r3, [r7, #3]
 800a5a6:	f003 020f 	and.w	r2, r3, #15
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	00db      	lsls	r3, r3, #3
 800a5ae:	4413      	add	r3, r2
 800a5b0:	009b      	lsls	r3, r3, #2
 800a5b2:	3338      	adds	r3, #56	; 0x38
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	4413      	add	r3, r2
 800a5b8:	3304      	adds	r3, #4
 800a5ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	705a      	strb	r2, [r3, #1]
 800a5c2:	e00d      	b.n	800a5e0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a5c4:	78fa      	ldrb	r2, [r7, #3]
 800a5c6:	4613      	mov	r3, r2
 800a5c8:	00db      	lsls	r3, r3, #3
 800a5ca:	4413      	add	r3, r2
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	3304      	adds	r3, #4
 800a5d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a5e6:	78fb      	ldrb	r3, [r7, #3]
 800a5e8:	f003 030f 	and.w	r3, r3, #15
 800a5ec:	b2da      	uxtb	r2, r3
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d101      	bne.n	800a600 <HAL_PCD_EP_SetStall+0x82>
 800a5fc:	2302      	movs	r3, #2
 800a5fe:	e01c      	b.n	800a63a <HAL_PCD_EP_SetStall+0xbc>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2201      	movs	r2, #1
 800a604:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	68f9      	ldr	r1, [r7, #12]
 800a60e:	4618      	mov	r0, r3
 800a610:	f009 fe8e 	bl	8014330 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a614:	78fb      	ldrb	r3, [r7, #3]
 800a616:	f003 030f 	and.w	r3, r3, #15
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d108      	bne.n	800a630 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681a      	ldr	r2, [r3, #0]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a628:	4619      	mov	r1, r3
 800a62a:	4610      	mov	r0, r2
 800a62c:	f00a f880 	bl	8014730 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2200      	movs	r2, #0
 800a634:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a638:	2300      	movs	r3, #0
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b084      	sub	sp, #16
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
 800a64a:	460b      	mov	r3, r1
 800a64c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a64e:	78fb      	ldrb	r3, [r7, #3]
 800a650:	f003 020f 	and.w	r2, r3, #15
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	429a      	cmp	r2, r3
 800a65a:	d901      	bls.n	800a660 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a65c:	2301      	movs	r3, #1
 800a65e:	e042      	b.n	800a6e6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a660:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a664:	2b00      	cmp	r3, #0
 800a666:	da0f      	bge.n	800a688 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a668:	78fb      	ldrb	r3, [r7, #3]
 800a66a:	f003 020f 	and.w	r2, r3, #15
 800a66e:	4613      	mov	r3, r2
 800a670:	00db      	lsls	r3, r3, #3
 800a672:	4413      	add	r3, r2
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	3338      	adds	r3, #56	; 0x38
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	4413      	add	r3, r2
 800a67c:	3304      	adds	r3, #4
 800a67e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2201      	movs	r2, #1
 800a684:	705a      	strb	r2, [r3, #1]
 800a686:	e00f      	b.n	800a6a8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a688:	78fb      	ldrb	r3, [r7, #3]
 800a68a:	f003 020f 	and.w	r2, r3, #15
 800a68e:	4613      	mov	r3, r2
 800a690:	00db      	lsls	r3, r3, #3
 800a692:	4413      	add	r3, r2
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	4413      	add	r3, r2
 800a69e:	3304      	adds	r3, #4
 800a6a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a6ae:	78fb      	ldrb	r3, [r7, #3]
 800a6b0:	f003 030f 	and.w	r3, r3, #15
 800a6b4:	b2da      	uxtb	r2, r3
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d101      	bne.n	800a6c8 <HAL_PCD_EP_ClrStall+0x86>
 800a6c4:	2302      	movs	r3, #2
 800a6c6:	e00e      	b.n	800a6e6 <HAL_PCD_EP_ClrStall+0xa4>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	68f9      	ldr	r1, [r7, #12]
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f009 fe98 	bl	801440c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a6e4:	2300      	movs	r3, #0
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b084      	sub	sp, #16
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a6fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	da0c      	bge.n	800a71c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a702:	78fb      	ldrb	r3, [r7, #3]
 800a704:	f003 020f 	and.w	r2, r3, #15
 800a708:	4613      	mov	r3, r2
 800a70a:	00db      	lsls	r3, r3, #3
 800a70c:	4413      	add	r3, r2
 800a70e:	009b      	lsls	r3, r3, #2
 800a710:	3338      	adds	r3, #56	; 0x38
 800a712:	687a      	ldr	r2, [r7, #4]
 800a714:	4413      	add	r3, r2
 800a716:	3304      	adds	r3, #4
 800a718:	60fb      	str	r3, [r7, #12]
 800a71a:	e00c      	b.n	800a736 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a71c:	78fb      	ldrb	r3, [r7, #3]
 800a71e:	f003 020f 	and.w	r2, r3, #15
 800a722:	4613      	mov	r3, r2
 800a724:	00db      	lsls	r3, r3, #3
 800a726:	4413      	add	r3, r2
 800a728:	009b      	lsls	r3, r3, #2
 800a72a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	4413      	add	r3, r2
 800a732:	3304      	adds	r3, #4
 800a734:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	68f9      	ldr	r1, [r7, #12]
 800a73c:	4618      	mov	r0, r3
 800a73e:	f009 fcbb 	bl	80140b8 <USB_EPStopXfer>
 800a742:	4603      	mov	r3, r0
 800a744:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a746:	7afb      	ldrb	r3, [r7, #11]
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3710      	adds	r7, #16
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b088      	sub	sp, #32
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a764:	683a      	ldr	r2, [r7, #0]
 800a766:	4613      	mov	r3, r2
 800a768:	00db      	lsls	r3, r3, #3
 800a76a:	4413      	add	r3, r2
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	3338      	adds	r3, #56	; 0x38
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	4413      	add	r3, r2
 800a774:	3304      	adds	r3, #4
 800a776:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	695a      	ldr	r2, [r3, #20]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	691b      	ldr	r3, [r3, #16]
 800a780:	429a      	cmp	r2, r3
 800a782:	d901      	bls.n	800a788 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	e067      	b.n	800a858 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	691a      	ldr	r2, [r3, #16]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	695b      	ldr	r3, [r3, #20]
 800a790:	1ad3      	subs	r3, r2, r3
 800a792:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	689b      	ldr	r3, [r3, #8]
 800a798:	69fa      	ldr	r2, [r7, #28]
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d902      	bls.n	800a7a4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a7a4:	69fb      	ldr	r3, [r7, #28]
 800a7a6:	3303      	adds	r3, #3
 800a7a8:	089b      	lsrs	r3, r3, #2
 800a7aa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a7ac:	e026      	b.n	800a7fc <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	691a      	ldr	r2, [r3, #16]
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	695b      	ldr	r3, [r3, #20]
 800a7b6:	1ad3      	subs	r3, r2, r3
 800a7b8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	689b      	ldr	r3, [r3, #8]
 800a7be:	69fa      	ldr	r2, [r7, #28]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d902      	bls.n	800a7ca <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a7ca:	69fb      	ldr	r3, [r7, #28]
 800a7cc:	3303      	adds	r3, #3
 800a7ce:	089b      	lsrs	r3, r3, #2
 800a7d0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	68d9      	ldr	r1, [r3, #12]
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	b2da      	uxtb	r2, r3
 800a7da:	69fb      	ldr	r3, [r7, #28]
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	6978      	ldr	r0, [r7, #20]
 800a7e0:	f009 fd14 	bl	801420c <USB_WritePacket>

    ep->xfer_buff  += len;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	68da      	ldr	r2, [r3, #12]
 800a7e8:	69fb      	ldr	r3, [r7, #28]
 800a7ea:	441a      	add	r2, r3
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	695a      	ldr	r2, [r3, #20]
 800a7f4:	69fb      	ldr	r3, [r7, #28]
 800a7f6:	441a      	add	r2, r3
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	015a      	lsls	r2, r3, #5
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	4413      	add	r3, r2
 800a804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a808:	699b      	ldr	r3, [r3, #24]
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	69ba      	ldr	r2, [r7, #24]
 800a80e:	429a      	cmp	r2, r3
 800a810:	d809      	bhi.n	800a826 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	695a      	ldr	r2, [r3, #20]
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d203      	bcs.n	800a826 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	691b      	ldr	r3, [r3, #16]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d1c3      	bne.n	800a7ae <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	691a      	ldr	r2, [r3, #16]
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	695b      	ldr	r3, [r3, #20]
 800a82e:	429a      	cmp	r2, r3
 800a830:	d811      	bhi.n	800a856 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	f003 030f 	and.w	r3, r3, #15
 800a838:	2201      	movs	r2, #1
 800a83a:	fa02 f303 	lsl.w	r3, r2, r3
 800a83e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a846:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	43db      	mvns	r3, r3
 800a84c:	6939      	ldr	r1, [r7, #16]
 800a84e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a852:	4013      	ands	r3, r2
 800a854:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a856:	2300      	movs	r3, #0
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3720      	adds	r7, #32
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b086      	sub	sp, #24
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	333c      	adds	r3, #60	; 0x3c
 800a878:	3304      	adds	r3, #4
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	015a      	lsls	r2, r3, #5
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	4413      	add	r3, r2
 800a886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	4a19      	ldr	r2, [pc, #100]	; (800a8f8 <PCD_EP_OutXfrComplete_int+0x98>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d124      	bne.n	800a8e0 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d00a      	beq.n	800a8b6 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	015a      	lsls	r2, r3, #5
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	4413      	add	r3, r2
 800a8a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8b2:	6093      	str	r3, [r2, #8]
 800a8b4:	e01a      	b.n	800a8ec <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	f003 0320 	and.w	r3, r3, #32
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d008      	beq.n	800a8d2 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	015a      	lsls	r2, r3, #5
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	4413      	add	r3, r2
 800a8c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	2320      	movs	r3, #32
 800a8d0:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	b2db      	uxtb	r3, r3
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f00e fdbb 	bl	8019454 <HAL_PCD_DataOutStageCallback>
 800a8de:	e005      	b.n	800a8ec <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f00e fdb4 	bl	8019454 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800a8ec:	2300      	movs	r3, #0
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3718      	adds	r7, #24
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	4f54310a 	.word	0x4f54310a

0800a8fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b086      	sub	sp, #24
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	333c      	adds	r3, #60	; 0x3c
 800a914:	3304      	adds	r3, #4
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	015a      	lsls	r2, r3, #5
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	4413      	add	r3, r2
 800a922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a926:	689b      	ldr	r3, [r3, #8]
 800a928:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	4a0c      	ldr	r2, [pc, #48]	; (800a960 <PCD_EP_OutSetupPacket_int+0x64>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d90e      	bls.n	800a950 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d009      	beq.n	800a950 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	015a      	lsls	r2, r3, #5
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	4413      	add	r3, r2
 800a944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a948:	461a      	mov	r2, r3
 800a94a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a94e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f00e fd6d 	bl	8019430 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800a956:	2300      	movs	r3, #0
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3718      	adds	r7, #24
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}
 800a960:	4f54300a 	.word	0x4f54300a

0800a964 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a964:	b480      	push	{r7}
 800a966:	b085      	sub	sp, #20
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	460b      	mov	r3, r1
 800a96e:	70fb      	strb	r3, [r7, #3]
 800a970:	4613      	mov	r3, r2
 800a972:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a97c:	78fb      	ldrb	r3, [r7, #3]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d107      	bne.n	800a992 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a982:	883b      	ldrh	r3, [r7, #0]
 800a984:	0419      	lsls	r1, r3, #16
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	68ba      	ldr	r2, [r7, #8]
 800a98c:	430a      	orrs	r2, r1
 800a98e:	629a      	str	r2, [r3, #40]	; 0x28
 800a990:	e028      	b.n	800a9e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a998:	0c1b      	lsrs	r3, r3, #16
 800a99a:	68ba      	ldr	r2, [r7, #8]
 800a99c:	4413      	add	r3, r2
 800a99e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	73fb      	strb	r3, [r7, #15]
 800a9a4:	e00d      	b.n	800a9c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	7bfb      	ldrb	r3, [r7, #15]
 800a9ac:	3340      	adds	r3, #64	; 0x40
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	4413      	add	r3, r2
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	0c1b      	lsrs	r3, r3, #16
 800a9b6:	68ba      	ldr	r2, [r7, #8]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a9bc:	7bfb      	ldrb	r3, [r7, #15]
 800a9be:	3301      	adds	r3, #1
 800a9c0:	73fb      	strb	r3, [r7, #15]
 800a9c2:	7bfa      	ldrb	r2, [r7, #15]
 800a9c4:	78fb      	ldrb	r3, [r7, #3]
 800a9c6:	3b01      	subs	r3, #1
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d3ec      	bcc.n	800a9a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a9cc:	883b      	ldrh	r3, [r7, #0]
 800a9ce:	0418      	lsls	r0, r3, #16
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6819      	ldr	r1, [r3, #0]
 800a9d4:	78fb      	ldrb	r3, [r7, #3]
 800a9d6:	3b01      	subs	r3, #1
 800a9d8:	68ba      	ldr	r2, [r7, #8]
 800a9da:	4302      	orrs	r2, r0
 800a9dc:	3340      	adds	r3, #64	; 0x40
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	440b      	add	r3, r1
 800a9e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a9e4:	2300      	movs	r3, #0
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3714      	adds	r7, #20
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr

0800a9f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a9f2:	b480      	push	{r7}
 800a9f4:	b083      	sub	sp, #12
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	887a      	ldrh	r2, [r7, #2]
 800aa04:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800aa06:	2300      	movs	r3, #0
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b085      	sub	sp, #20
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2201      	movs	r2, #1
 800aa26:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	699b      	ldr	r3, [r3, #24]
 800aa36:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa46:	f043 0303 	orr.w	r3, r3, #3
 800aa4a:	68fa      	ldr	r2, [r7, #12]
 800aa4c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800aa4e:	2300      	movs	r3, #0
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3714      	adds	r7, #20
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr

0800aa5c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	460b      	mov	r3, r1
 800aa66:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800aa68:	bf00      	nop
 800aa6a:	370c      	adds	r7, #12
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800aa74:	b480      	push	{r7}
 800aa76:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800aa78:	4b0d      	ldr	r3, [pc, #52]	; (800aab0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aa80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa84:	d102      	bne.n	800aa8c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800aa86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa8a:	e00b      	b.n	800aaa4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800aa8c:	4b08      	ldr	r3, [pc, #32]	; (800aab0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800aa8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa9a:	d102      	bne.n	800aaa2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800aa9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aaa0:	e000      	b.n	800aaa4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800aaa2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop
 800aab0:	40007000 	.word	0x40007000

0800aab4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d141      	bne.n	800ab46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800aac2:	4b4b      	ldr	r3, [pc, #300]	; (800abf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aaca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aace:	d131      	bne.n	800ab34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800aad0:	4b47      	ldr	r3, [pc, #284]	; (800abf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aad6:	4a46      	ldr	r2, [pc, #280]	; (800abf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aadc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800aae0:	4b43      	ldr	r3, [pc, #268]	; (800abf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800aae8:	4a41      	ldr	r2, [pc, #260]	; (800abf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aaea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aaee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800aaf0:	4b40      	ldr	r3, [pc, #256]	; (800abf4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2232      	movs	r2, #50	; 0x32
 800aaf6:	fb02 f303 	mul.w	r3, r2, r3
 800aafa:	4a3f      	ldr	r2, [pc, #252]	; (800abf8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800aafc:	fba2 2303 	umull	r2, r3, r2, r3
 800ab00:	0c9b      	lsrs	r3, r3, #18
 800ab02:	3301      	adds	r3, #1
 800ab04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ab06:	e002      	b.n	800ab0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	3b01      	subs	r3, #1
 800ab0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ab0e:	4b38      	ldr	r3, [pc, #224]	; (800abf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab10:	695b      	ldr	r3, [r3, #20]
 800ab12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab1a:	d102      	bne.n	800ab22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d1f2      	bne.n	800ab08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ab22:	4b33      	ldr	r3, [pc, #204]	; (800abf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab24:	695b      	ldr	r3, [r3, #20]
 800ab26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab2e:	d158      	bne.n	800abe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800ab30:	2303      	movs	r3, #3
 800ab32:	e057      	b.n	800abe4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ab34:	4b2e      	ldr	r3, [pc, #184]	; (800abf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab3a:	4a2d      	ldr	r2, [pc, #180]	; (800abf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800ab44:	e04d      	b.n	800abe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab4c:	d141      	bne.n	800abd2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800ab4e:	4b28      	ldr	r3, [pc, #160]	; (800abf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ab56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab5a:	d131      	bne.n	800abc0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ab5c:	4b24      	ldr	r3, [pc, #144]	; (800abf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab62:	4a23      	ldr	r2, [pc, #140]	; (800abf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ab6c:	4b20      	ldr	r3, [pc, #128]	; (800abf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ab74:	4a1e      	ldr	r2, [pc, #120]	; (800abf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ab7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800ab7c:	4b1d      	ldr	r3, [pc, #116]	; (800abf4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	2232      	movs	r2, #50	; 0x32
 800ab82:	fb02 f303 	mul.w	r3, r2, r3
 800ab86:	4a1c      	ldr	r2, [pc, #112]	; (800abf8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800ab88:	fba2 2303 	umull	r2, r3, r2, r3
 800ab8c:	0c9b      	lsrs	r3, r3, #18
 800ab8e:	3301      	adds	r3, #1
 800ab90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ab92:	e002      	b.n	800ab9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	3b01      	subs	r3, #1
 800ab98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ab9a:	4b15      	ldr	r3, [pc, #84]	; (800abf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab9c:	695b      	ldr	r3, [r3, #20]
 800ab9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aba6:	d102      	bne.n	800abae <HAL_PWREx_ControlVoltageScaling+0xfa>
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d1f2      	bne.n	800ab94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800abae:	4b10      	ldr	r3, [pc, #64]	; (800abf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abb0:	695b      	ldr	r3, [r3, #20]
 800abb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abba:	d112      	bne.n	800abe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800abbc:	2303      	movs	r3, #3
 800abbe:	e011      	b.n	800abe4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800abc0:	4b0b      	ldr	r3, [pc, #44]	; (800abf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800abc6:	4a0a      	ldr	r2, [pc, #40]	; (800abf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abcc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800abd0:	e007      	b.n	800abe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800abd2:	4b07      	ldr	r3, [pc, #28]	; (800abf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800abda:	4a05      	ldr	r2, [pc, #20]	; (800abf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abdc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800abe0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800abe2:	2300      	movs	r3, #0
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3714      	adds	r7, #20
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr
 800abf0:	40007000 	.word	0x40007000
 800abf4:	20000004 	.word	0x20000004
 800abf8:	431bde83 	.word	0x431bde83

0800abfc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800abfc:	b480      	push	{r7}
 800abfe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800ac00:	4b05      	ldr	r3, [pc, #20]	; (800ac18 <HAL_PWREx_EnableVddUSB+0x1c>)
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	4a04      	ldr	r2, [pc, #16]	; (800ac18 <HAL_PWREx_EnableVddUSB+0x1c>)
 800ac06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ac0a:	6053      	str	r3, [r2, #4]
}
 800ac0c:	bf00      	nop
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac14:	4770      	bx	lr
 800ac16:	bf00      	nop
 800ac18:	40007000 	.word	0x40007000

0800ac1c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b088      	sub	sp, #32
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d102      	bne.n	800ac30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	f000 bc08 	b.w	800b440 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ac30:	4b96      	ldr	r3, [pc, #600]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	f003 030c 	and.w	r3, r3, #12
 800ac38:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ac3a:	4b94      	ldr	r3, [pc, #592]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	f003 0303 	and.w	r3, r3, #3
 800ac42:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f003 0310 	and.w	r3, r3, #16
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	f000 80e4 	beq.w	800ae1a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ac52:	69bb      	ldr	r3, [r7, #24]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d007      	beq.n	800ac68 <HAL_RCC_OscConfig+0x4c>
 800ac58:	69bb      	ldr	r3, [r7, #24]
 800ac5a:	2b0c      	cmp	r3, #12
 800ac5c:	f040 808b 	bne.w	800ad76 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	f040 8087 	bne.w	800ad76 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ac68:	4b88      	ldr	r3, [pc, #544]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f003 0302 	and.w	r3, r3, #2
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d005      	beq.n	800ac80 <HAL_RCC_OscConfig+0x64>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	699b      	ldr	r3, [r3, #24]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d101      	bne.n	800ac80 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	e3df      	b.n	800b440 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6a1a      	ldr	r2, [r3, #32]
 800ac84:	4b81      	ldr	r3, [pc, #516]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f003 0308 	and.w	r3, r3, #8
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d004      	beq.n	800ac9a <HAL_RCC_OscConfig+0x7e>
 800ac90:	4b7e      	ldr	r3, [pc, #504]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac98:	e005      	b.n	800aca6 <HAL_RCC_OscConfig+0x8a>
 800ac9a:	4b7c      	ldr	r3, [pc, #496]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800ac9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aca0:	091b      	lsrs	r3, r3, #4
 800aca2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d223      	bcs.n	800acf2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6a1b      	ldr	r3, [r3, #32]
 800acae:	4618      	mov	r0, r3
 800acb0:	f000 fdf8 	bl	800b8a4 <RCC_SetFlashLatencyFromMSIRange>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d001      	beq.n	800acbe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800acba:	2301      	movs	r3, #1
 800acbc:	e3c0      	b.n	800b440 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800acbe:	4b73      	ldr	r3, [pc, #460]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4a72      	ldr	r2, [pc, #456]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800acc4:	f043 0308 	orr.w	r3, r3, #8
 800acc8:	6013      	str	r3, [r2, #0]
 800acca:	4b70      	ldr	r3, [pc, #448]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6a1b      	ldr	r3, [r3, #32]
 800acd6:	496d      	ldr	r1, [pc, #436]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800acd8:	4313      	orrs	r3, r2
 800acda:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800acdc:	4b6b      	ldr	r3, [pc, #428]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	69db      	ldr	r3, [r3, #28]
 800ace8:	021b      	lsls	r3, r3, #8
 800acea:	4968      	ldr	r1, [pc, #416]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800acec:	4313      	orrs	r3, r2
 800acee:	604b      	str	r3, [r1, #4]
 800acf0:	e025      	b.n	800ad3e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800acf2:	4b66      	ldr	r3, [pc, #408]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a65      	ldr	r2, [pc, #404]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800acf8:	f043 0308 	orr.w	r3, r3, #8
 800acfc:	6013      	str	r3, [r2, #0]
 800acfe:	4b63      	ldr	r3, [pc, #396]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6a1b      	ldr	r3, [r3, #32]
 800ad0a:	4960      	ldr	r1, [pc, #384]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ad10:	4b5e      	ldr	r3, [pc, #376]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	69db      	ldr	r3, [r3, #28]
 800ad1c:	021b      	lsls	r3, r3, #8
 800ad1e:	495b      	ldr	r1, [pc, #364]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800ad20:	4313      	orrs	r3, r2
 800ad22:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ad24:	69bb      	ldr	r3, [r7, #24]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d109      	bne.n	800ad3e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6a1b      	ldr	r3, [r3, #32]
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f000 fdb8 	bl	800b8a4 <RCC_SetFlashLatencyFromMSIRange>
 800ad34:	4603      	mov	r3, r0
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d001      	beq.n	800ad3e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e380      	b.n	800b440 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ad3e:	f000 fcc1 	bl	800b6c4 <HAL_RCC_GetSysClockFreq>
 800ad42:	4602      	mov	r2, r0
 800ad44:	4b51      	ldr	r3, [pc, #324]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	091b      	lsrs	r3, r3, #4
 800ad4a:	f003 030f 	and.w	r3, r3, #15
 800ad4e:	4950      	ldr	r1, [pc, #320]	; (800ae90 <HAL_RCC_OscConfig+0x274>)
 800ad50:	5ccb      	ldrb	r3, [r1, r3]
 800ad52:	f003 031f 	and.w	r3, r3, #31
 800ad56:	fa22 f303 	lsr.w	r3, r2, r3
 800ad5a:	4a4e      	ldr	r2, [pc, #312]	; (800ae94 <HAL_RCC_OscConfig+0x278>)
 800ad5c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800ad5e:	4b4e      	ldr	r3, [pc, #312]	; (800ae98 <HAL_RCC_OscConfig+0x27c>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7fc fb4a 	bl	80073fc <HAL_InitTick>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800ad6c:	7bfb      	ldrb	r3, [r7, #15]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d052      	beq.n	800ae18 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800ad72:	7bfb      	ldrb	r3, [r7, #15]
 800ad74:	e364      	b.n	800b440 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	699b      	ldr	r3, [r3, #24]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d032      	beq.n	800ade4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800ad7e:	4b43      	ldr	r3, [pc, #268]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a42      	ldr	r2, [pc, #264]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800ad84:	f043 0301 	orr.w	r3, r3, #1
 800ad88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ad8a:	f7fc fb87 	bl	800749c <HAL_GetTick>
 800ad8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ad90:	e008      	b.n	800ada4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ad92:	f7fc fb83 	bl	800749c <HAL_GetTick>
 800ad96:	4602      	mov	r2, r0
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	1ad3      	subs	r3, r2, r3
 800ad9c:	2b02      	cmp	r3, #2
 800ad9e:	d901      	bls.n	800ada4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800ada0:	2303      	movs	r3, #3
 800ada2:	e34d      	b.n	800b440 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ada4:	4b39      	ldr	r3, [pc, #228]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f003 0302 	and.w	r3, r3, #2
 800adac:	2b00      	cmp	r3, #0
 800adae:	d0f0      	beq.n	800ad92 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800adb0:	4b36      	ldr	r3, [pc, #216]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a35      	ldr	r2, [pc, #212]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800adb6:	f043 0308 	orr.w	r3, r3, #8
 800adba:	6013      	str	r3, [r2, #0]
 800adbc:	4b33      	ldr	r3, [pc, #204]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6a1b      	ldr	r3, [r3, #32]
 800adc8:	4930      	ldr	r1, [pc, #192]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800adca:	4313      	orrs	r3, r2
 800adcc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800adce:	4b2f      	ldr	r3, [pc, #188]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	69db      	ldr	r3, [r3, #28]
 800adda:	021b      	lsls	r3, r3, #8
 800addc:	492b      	ldr	r1, [pc, #172]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800adde:	4313      	orrs	r3, r2
 800ade0:	604b      	str	r3, [r1, #4]
 800ade2:	e01a      	b.n	800ae1a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800ade4:	4b29      	ldr	r3, [pc, #164]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a28      	ldr	r2, [pc, #160]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800adea:	f023 0301 	bic.w	r3, r3, #1
 800adee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800adf0:	f7fc fb54 	bl	800749c <HAL_GetTick>
 800adf4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800adf6:	e008      	b.n	800ae0a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800adf8:	f7fc fb50 	bl	800749c <HAL_GetTick>
 800adfc:	4602      	mov	r2, r0
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	1ad3      	subs	r3, r2, r3
 800ae02:	2b02      	cmp	r3, #2
 800ae04:	d901      	bls.n	800ae0a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800ae06:	2303      	movs	r3, #3
 800ae08:	e31a      	b.n	800b440 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800ae0a:	4b20      	ldr	r3, [pc, #128]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f003 0302 	and.w	r3, r3, #2
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d1f0      	bne.n	800adf8 <HAL_RCC_OscConfig+0x1dc>
 800ae16:	e000      	b.n	800ae1a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ae18:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f003 0301 	and.w	r3, r3, #1
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d073      	beq.n	800af0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800ae26:	69bb      	ldr	r3, [r7, #24]
 800ae28:	2b08      	cmp	r3, #8
 800ae2a:	d005      	beq.n	800ae38 <HAL_RCC_OscConfig+0x21c>
 800ae2c:	69bb      	ldr	r3, [r7, #24]
 800ae2e:	2b0c      	cmp	r3, #12
 800ae30:	d10e      	bne.n	800ae50 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	2b03      	cmp	r3, #3
 800ae36:	d10b      	bne.n	800ae50 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ae38:	4b14      	ldr	r3, [pc, #80]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d063      	beq.n	800af0c <HAL_RCC_OscConfig+0x2f0>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d15f      	bne.n	800af0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e2f7      	b.n	800b440 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae58:	d106      	bne.n	800ae68 <HAL_RCC_OscConfig+0x24c>
 800ae5a:	4b0c      	ldr	r3, [pc, #48]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4a0b      	ldr	r2, [pc, #44]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800ae60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae64:	6013      	str	r3, [r2, #0]
 800ae66:	e025      	b.n	800aeb4 <HAL_RCC_OscConfig+0x298>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ae70:	d114      	bne.n	800ae9c <HAL_RCC_OscConfig+0x280>
 800ae72:	4b06      	ldr	r3, [pc, #24]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4a05      	ldr	r2, [pc, #20]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800ae78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ae7c:	6013      	str	r3, [r2, #0]
 800ae7e:	4b03      	ldr	r3, [pc, #12]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4a02      	ldr	r2, [pc, #8]	; (800ae8c <HAL_RCC_OscConfig+0x270>)
 800ae84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae88:	6013      	str	r3, [r2, #0]
 800ae8a:	e013      	b.n	800aeb4 <HAL_RCC_OscConfig+0x298>
 800ae8c:	40021000 	.word	0x40021000
 800ae90:	0801d0f4 	.word	0x0801d0f4
 800ae94:	20000004 	.word	0x20000004
 800ae98:	20000008 	.word	0x20000008
 800ae9c:	4ba0      	ldr	r3, [pc, #640]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a9f      	ldr	r2, [pc, #636]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800aea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aea6:	6013      	str	r3, [r2, #0]
 800aea8:	4b9d      	ldr	r3, [pc, #628]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4a9c      	ldr	r2, [pc, #624]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800aeae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aeb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d013      	beq.n	800aee4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aebc:	f7fc faee 	bl	800749c <HAL_GetTick>
 800aec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800aec2:	e008      	b.n	800aed6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aec4:	f7fc faea 	bl	800749c <HAL_GetTick>
 800aec8:	4602      	mov	r2, r0
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	1ad3      	subs	r3, r2, r3
 800aece:	2b64      	cmp	r3, #100	; 0x64
 800aed0:	d901      	bls.n	800aed6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800aed2:	2303      	movs	r3, #3
 800aed4:	e2b4      	b.n	800b440 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800aed6:	4b92      	ldr	r3, [pc, #584]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d0f0      	beq.n	800aec4 <HAL_RCC_OscConfig+0x2a8>
 800aee2:	e014      	b.n	800af0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aee4:	f7fc fada 	bl	800749c <HAL_GetTick>
 800aee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800aeea:	e008      	b.n	800aefe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aeec:	f7fc fad6 	bl	800749c <HAL_GetTick>
 800aef0:	4602      	mov	r2, r0
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	1ad3      	subs	r3, r2, r3
 800aef6:	2b64      	cmp	r3, #100	; 0x64
 800aef8:	d901      	bls.n	800aefe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800aefa:	2303      	movs	r3, #3
 800aefc:	e2a0      	b.n	800b440 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800aefe:	4b88      	ldr	r3, [pc, #544]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af06:	2b00      	cmp	r3, #0
 800af08:	d1f0      	bne.n	800aeec <HAL_RCC_OscConfig+0x2d0>
 800af0a:	e000      	b.n	800af0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f003 0302 	and.w	r3, r3, #2
 800af16:	2b00      	cmp	r3, #0
 800af18:	d060      	beq.n	800afdc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800af1a:	69bb      	ldr	r3, [r7, #24]
 800af1c:	2b04      	cmp	r3, #4
 800af1e:	d005      	beq.n	800af2c <HAL_RCC_OscConfig+0x310>
 800af20:	69bb      	ldr	r3, [r7, #24]
 800af22:	2b0c      	cmp	r3, #12
 800af24:	d119      	bne.n	800af5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	2b02      	cmp	r3, #2
 800af2a:	d116      	bne.n	800af5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800af2c:	4b7c      	ldr	r3, [pc, #496]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af34:	2b00      	cmp	r3, #0
 800af36:	d005      	beq.n	800af44 <HAL_RCC_OscConfig+0x328>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d101      	bne.n	800af44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800af40:	2301      	movs	r3, #1
 800af42:	e27d      	b.n	800b440 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af44:	4b76      	ldr	r3, [pc, #472]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	691b      	ldr	r3, [r3, #16]
 800af50:	061b      	lsls	r3, r3, #24
 800af52:	4973      	ldr	r1, [pc, #460]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800af54:	4313      	orrs	r3, r2
 800af56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800af58:	e040      	b.n	800afdc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	68db      	ldr	r3, [r3, #12]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d023      	beq.n	800afaa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800af62:	4b6f      	ldr	r3, [pc, #444]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a6e      	ldr	r2, [pc, #440]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800af68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af6e:	f7fc fa95 	bl	800749c <HAL_GetTick>
 800af72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800af74:	e008      	b.n	800af88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800af76:	f7fc fa91 	bl	800749c <HAL_GetTick>
 800af7a:	4602      	mov	r2, r0
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	1ad3      	subs	r3, r2, r3
 800af80:	2b02      	cmp	r3, #2
 800af82:	d901      	bls.n	800af88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800af84:	2303      	movs	r3, #3
 800af86:	e25b      	b.n	800b440 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800af88:	4b65      	ldr	r3, [pc, #404]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af90:	2b00      	cmp	r3, #0
 800af92:	d0f0      	beq.n	800af76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af94:	4b62      	ldr	r3, [pc, #392]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	691b      	ldr	r3, [r3, #16]
 800afa0:	061b      	lsls	r3, r3, #24
 800afa2:	495f      	ldr	r1, [pc, #380]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800afa4:	4313      	orrs	r3, r2
 800afa6:	604b      	str	r3, [r1, #4]
 800afa8:	e018      	b.n	800afdc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800afaa:	4b5d      	ldr	r3, [pc, #372]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4a5c      	ldr	r2, [pc, #368]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800afb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800afb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afb6:	f7fc fa71 	bl	800749c <HAL_GetTick>
 800afba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800afbc:	e008      	b.n	800afd0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800afbe:	f7fc fa6d 	bl	800749c <HAL_GetTick>
 800afc2:	4602      	mov	r2, r0
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	1ad3      	subs	r3, r2, r3
 800afc8:	2b02      	cmp	r3, #2
 800afca:	d901      	bls.n	800afd0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800afcc:	2303      	movs	r3, #3
 800afce:	e237      	b.n	800b440 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800afd0:	4b53      	ldr	r3, [pc, #332]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d1f0      	bne.n	800afbe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f003 0308 	and.w	r3, r3, #8
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d03c      	beq.n	800b062 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	695b      	ldr	r3, [r3, #20]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d01c      	beq.n	800b02a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aff0:	4b4b      	ldr	r3, [pc, #300]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800aff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aff6:	4a4a      	ldr	r2, [pc, #296]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800aff8:	f043 0301 	orr.w	r3, r3, #1
 800affc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b000:	f7fc fa4c 	bl	800749c <HAL_GetTick>
 800b004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b006:	e008      	b.n	800b01a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b008:	f7fc fa48 	bl	800749c <HAL_GetTick>
 800b00c:	4602      	mov	r2, r0
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	1ad3      	subs	r3, r2, r3
 800b012:	2b02      	cmp	r3, #2
 800b014:	d901      	bls.n	800b01a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800b016:	2303      	movs	r3, #3
 800b018:	e212      	b.n	800b440 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b01a:	4b41      	ldr	r3, [pc, #260]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800b01c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b020:	f003 0302 	and.w	r3, r3, #2
 800b024:	2b00      	cmp	r3, #0
 800b026:	d0ef      	beq.n	800b008 <HAL_RCC_OscConfig+0x3ec>
 800b028:	e01b      	b.n	800b062 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b02a:	4b3d      	ldr	r3, [pc, #244]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800b02c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b030:	4a3b      	ldr	r2, [pc, #236]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800b032:	f023 0301 	bic.w	r3, r3, #1
 800b036:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b03a:	f7fc fa2f 	bl	800749c <HAL_GetTick>
 800b03e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b040:	e008      	b.n	800b054 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b042:	f7fc fa2b 	bl	800749c <HAL_GetTick>
 800b046:	4602      	mov	r2, r0
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	1ad3      	subs	r3, r2, r3
 800b04c:	2b02      	cmp	r3, #2
 800b04e:	d901      	bls.n	800b054 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800b050:	2303      	movs	r3, #3
 800b052:	e1f5      	b.n	800b440 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b054:	4b32      	ldr	r3, [pc, #200]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800b056:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b05a:	f003 0302 	and.w	r3, r3, #2
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d1ef      	bne.n	800b042 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f003 0304 	and.w	r3, r3, #4
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	f000 80a6 	beq.w	800b1bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b070:	2300      	movs	r3, #0
 800b072:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800b074:	4b2a      	ldr	r3, [pc, #168]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800b076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d10d      	bne.n	800b09c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b080:	4b27      	ldr	r3, [pc, #156]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800b082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b084:	4a26      	ldr	r2, [pc, #152]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800b086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b08a:	6593      	str	r3, [r2, #88]	; 0x58
 800b08c:	4b24      	ldr	r3, [pc, #144]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800b08e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b094:	60bb      	str	r3, [r7, #8]
 800b096:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b098:	2301      	movs	r3, #1
 800b09a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b09c:	4b21      	ldr	r3, [pc, #132]	; (800b124 <HAL_RCC_OscConfig+0x508>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d118      	bne.n	800b0da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b0a8:	4b1e      	ldr	r3, [pc, #120]	; (800b124 <HAL_RCC_OscConfig+0x508>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a1d      	ldr	r2, [pc, #116]	; (800b124 <HAL_RCC_OscConfig+0x508>)
 800b0ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b0b4:	f7fc f9f2 	bl	800749c <HAL_GetTick>
 800b0b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b0ba:	e008      	b.n	800b0ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b0bc:	f7fc f9ee 	bl	800749c <HAL_GetTick>
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	1ad3      	subs	r3, r2, r3
 800b0c6:	2b02      	cmp	r3, #2
 800b0c8:	d901      	bls.n	800b0ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800b0ca:	2303      	movs	r3, #3
 800b0cc:	e1b8      	b.n	800b440 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b0ce:	4b15      	ldr	r3, [pc, #84]	; (800b124 <HAL_RCC_OscConfig+0x508>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d0f0      	beq.n	800b0bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d108      	bne.n	800b0f4 <HAL_RCC_OscConfig+0x4d8>
 800b0e2:	4b0f      	ldr	r3, [pc, #60]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800b0e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0e8:	4a0d      	ldr	r2, [pc, #52]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800b0ea:	f043 0301 	orr.w	r3, r3, #1
 800b0ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b0f2:	e029      	b.n	800b148 <HAL_RCC_OscConfig+0x52c>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	2b05      	cmp	r3, #5
 800b0fa:	d115      	bne.n	800b128 <HAL_RCC_OscConfig+0x50c>
 800b0fc:	4b08      	ldr	r3, [pc, #32]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800b0fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b102:	4a07      	ldr	r2, [pc, #28]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800b104:	f043 0304 	orr.w	r3, r3, #4
 800b108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b10c:	4b04      	ldr	r3, [pc, #16]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800b10e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b112:	4a03      	ldr	r2, [pc, #12]	; (800b120 <HAL_RCC_OscConfig+0x504>)
 800b114:	f043 0301 	orr.w	r3, r3, #1
 800b118:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b11c:	e014      	b.n	800b148 <HAL_RCC_OscConfig+0x52c>
 800b11e:	bf00      	nop
 800b120:	40021000 	.word	0x40021000
 800b124:	40007000 	.word	0x40007000
 800b128:	4b9d      	ldr	r3, [pc, #628]	; (800b3a0 <HAL_RCC_OscConfig+0x784>)
 800b12a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b12e:	4a9c      	ldr	r2, [pc, #624]	; (800b3a0 <HAL_RCC_OscConfig+0x784>)
 800b130:	f023 0301 	bic.w	r3, r3, #1
 800b134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b138:	4b99      	ldr	r3, [pc, #612]	; (800b3a0 <HAL_RCC_OscConfig+0x784>)
 800b13a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b13e:	4a98      	ldr	r2, [pc, #608]	; (800b3a0 <HAL_RCC_OscConfig+0x784>)
 800b140:	f023 0304 	bic.w	r3, r3, #4
 800b144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	689b      	ldr	r3, [r3, #8]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d016      	beq.n	800b17e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b150:	f7fc f9a4 	bl	800749c <HAL_GetTick>
 800b154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b156:	e00a      	b.n	800b16e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b158:	f7fc f9a0 	bl	800749c <HAL_GetTick>
 800b15c:	4602      	mov	r2, r0
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	1ad3      	subs	r3, r2, r3
 800b162:	f241 3288 	movw	r2, #5000	; 0x1388
 800b166:	4293      	cmp	r3, r2
 800b168:	d901      	bls.n	800b16e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800b16a:	2303      	movs	r3, #3
 800b16c:	e168      	b.n	800b440 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b16e:	4b8c      	ldr	r3, [pc, #560]	; (800b3a0 <HAL_RCC_OscConfig+0x784>)
 800b170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b174:	f003 0302 	and.w	r3, r3, #2
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d0ed      	beq.n	800b158 <HAL_RCC_OscConfig+0x53c>
 800b17c:	e015      	b.n	800b1aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b17e:	f7fc f98d 	bl	800749c <HAL_GetTick>
 800b182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b184:	e00a      	b.n	800b19c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b186:	f7fc f989 	bl	800749c <HAL_GetTick>
 800b18a:	4602      	mov	r2, r0
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	1ad3      	subs	r3, r2, r3
 800b190:	f241 3288 	movw	r2, #5000	; 0x1388
 800b194:	4293      	cmp	r3, r2
 800b196:	d901      	bls.n	800b19c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800b198:	2303      	movs	r3, #3
 800b19a:	e151      	b.n	800b440 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b19c:	4b80      	ldr	r3, [pc, #512]	; (800b3a0 <HAL_RCC_OscConfig+0x784>)
 800b19e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1a2:	f003 0302 	and.w	r3, r3, #2
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d1ed      	bne.n	800b186 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b1aa:	7ffb      	ldrb	r3, [r7, #31]
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d105      	bne.n	800b1bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b1b0:	4b7b      	ldr	r3, [pc, #492]	; (800b3a0 <HAL_RCC_OscConfig+0x784>)
 800b1b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1b4:	4a7a      	ldr	r2, [pc, #488]	; (800b3a0 <HAL_RCC_OscConfig+0x784>)
 800b1b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f003 0320 	and.w	r3, r3, #32
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d03c      	beq.n	800b242 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d01c      	beq.n	800b20a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b1d0:	4b73      	ldr	r3, [pc, #460]	; (800b3a0 <HAL_RCC_OscConfig+0x784>)
 800b1d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b1d6:	4a72      	ldr	r2, [pc, #456]	; (800b3a0 <HAL_RCC_OscConfig+0x784>)
 800b1d8:	f043 0301 	orr.w	r3, r3, #1
 800b1dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1e0:	f7fc f95c 	bl	800749c <HAL_GetTick>
 800b1e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b1e6:	e008      	b.n	800b1fa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b1e8:	f7fc f958 	bl	800749c <HAL_GetTick>
 800b1ec:	4602      	mov	r2, r0
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	1ad3      	subs	r3, r2, r3
 800b1f2:	2b02      	cmp	r3, #2
 800b1f4:	d901      	bls.n	800b1fa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800b1f6:	2303      	movs	r3, #3
 800b1f8:	e122      	b.n	800b440 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b1fa:	4b69      	ldr	r3, [pc, #420]	; (800b3a0 <HAL_RCC_OscConfig+0x784>)
 800b1fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b200:	f003 0302 	and.w	r3, r3, #2
 800b204:	2b00      	cmp	r3, #0
 800b206:	d0ef      	beq.n	800b1e8 <HAL_RCC_OscConfig+0x5cc>
 800b208:	e01b      	b.n	800b242 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b20a:	4b65      	ldr	r3, [pc, #404]	; (800b3a0 <HAL_RCC_OscConfig+0x784>)
 800b20c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b210:	4a63      	ldr	r2, [pc, #396]	; (800b3a0 <HAL_RCC_OscConfig+0x784>)
 800b212:	f023 0301 	bic.w	r3, r3, #1
 800b216:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b21a:	f7fc f93f 	bl	800749c <HAL_GetTick>
 800b21e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b220:	e008      	b.n	800b234 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b222:	f7fc f93b 	bl	800749c <HAL_GetTick>
 800b226:	4602      	mov	r2, r0
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	1ad3      	subs	r3, r2, r3
 800b22c:	2b02      	cmp	r3, #2
 800b22e:	d901      	bls.n	800b234 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800b230:	2303      	movs	r3, #3
 800b232:	e105      	b.n	800b440 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b234:	4b5a      	ldr	r3, [pc, #360]	; (800b3a0 <HAL_RCC_OscConfig+0x784>)
 800b236:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b23a:	f003 0302 	and.w	r3, r3, #2
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d1ef      	bne.n	800b222 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b246:	2b00      	cmp	r3, #0
 800b248:	f000 80f9 	beq.w	800b43e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b250:	2b02      	cmp	r3, #2
 800b252:	f040 80cf 	bne.w	800b3f4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800b256:	4b52      	ldr	r3, [pc, #328]	; (800b3a0 <HAL_RCC_OscConfig+0x784>)
 800b258:	68db      	ldr	r3, [r3, #12]
 800b25a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	f003 0203 	and.w	r2, r3, #3
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b266:	429a      	cmp	r2, r3
 800b268:	d12c      	bne.n	800b2c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b274:	3b01      	subs	r3, #1
 800b276:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b278:	429a      	cmp	r2, r3
 800b27a:	d123      	bne.n	800b2c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b286:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b288:	429a      	cmp	r2, r3
 800b28a:	d11b      	bne.n	800b2c4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b296:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b298:	429a      	cmp	r2, r3
 800b29a:	d113      	bne.n	800b2c4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2a6:	085b      	lsrs	r3, r3, #1
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d109      	bne.n	800b2c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ba:	085b      	lsrs	r3, r3, #1
 800b2bc:	3b01      	subs	r3, #1
 800b2be:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d071      	beq.n	800b3a8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b2c4:	69bb      	ldr	r3, [r7, #24]
 800b2c6:	2b0c      	cmp	r3, #12
 800b2c8:	d068      	beq.n	800b39c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b2ca:	4b35      	ldr	r3, [pc, #212]	; (800b3a0 <HAL_RCC_OscConfig+0x784>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d105      	bne.n	800b2e2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800b2d6:	4b32      	ldr	r3, [pc, #200]	; (800b3a0 <HAL_RCC_OscConfig+0x784>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d001      	beq.n	800b2e6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	e0ac      	b.n	800b440 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b2e6:	4b2e      	ldr	r3, [pc, #184]	; (800b3a0 <HAL_RCC_OscConfig+0x784>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a2d      	ldr	r2, [pc, #180]	; (800b3a0 <HAL_RCC_OscConfig+0x784>)
 800b2ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b2f0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b2f2:	f7fc f8d3 	bl	800749c <HAL_GetTick>
 800b2f6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b2f8:	e008      	b.n	800b30c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b2fa:	f7fc f8cf 	bl	800749c <HAL_GetTick>
 800b2fe:	4602      	mov	r2, r0
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	1ad3      	subs	r3, r2, r3
 800b304:	2b02      	cmp	r3, #2
 800b306:	d901      	bls.n	800b30c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800b308:	2303      	movs	r3, #3
 800b30a:	e099      	b.n	800b440 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b30c:	4b24      	ldr	r3, [pc, #144]	; (800b3a0 <HAL_RCC_OscConfig+0x784>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b314:	2b00      	cmp	r3, #0
 800b316:	d1f0      	bne.n	800b2fa <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b318:	4b21      	ldr	r3, [pc, #132]	; (800b3a0 <HAL_RCC_OscConfig+0x784>)
 800b31a:	68da      	ldr	r2, [r3, #12]
 800b31c:	4b21      	ldr	r3, [pc, #132]	; (800b3a4 <HAL_RCC_OscConfig+0x788>)
 800b31e:	4013      	ands	r3, r2
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b328:	3a01      	subs	r2, #1
 800b32a:	0112      	lsls	r2, r2, #4
 800b32c:	4311      	orrs	r1, r2
 800b32e:	687a      	ldr	r2, [r7, #4]
 800b330:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b332:	0212      	lsls	r2, r2, #8
 800b334:	4311      	orrs	r1, r2
 800b336:	687a      	ldr	r2, [r7, #4]
 800b338:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b33a:	0852      	lsrs	r2, r2, #1
 800b33c:	3a01      	subs	r2, #1
 800b33e:	0552      	lsls	r2, r2, #21
 800b340:	4311      	orrs	r1, r2
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b346:	0852      	lsrs	r2, r2, #1
 800b348:	3a01      	subs	r2, #1
 800b34a:	0652      	lsls	r2, r2, #25
 800b34c:	4311      	orrs	r1, r2
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b352:	06d2      	lsls	r2, r2, #27
 800b354:	430a      	orrs	r2, r1
 800b356:	4912      	ldr	r1, [pc, #72]	; (800b3a0 <HAL_RCC_OscConfig+0x784>)
 800b358:	4313      	orrs	r3, r2
 800b35a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b35c:	4b10      	ldr	r3, [pc, #64]	; (800b3a0 <HAL_RCC_OscConfig+0x784>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	4a0f      	ldr	r2, [pc, #60]	; (800b3a0 <HAL_RCC_OscConfig+0x784>)
 800b362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b366:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b368:	4b0d      	ldr	r3, [pc, #52]	; (800b3a0 <HAL_RCC_OscConfig+0x784>)
 800b36a:	68db      	ldr	r3, [r3, #12]
 800b36c:	4a0c      	ldr	r2, [pc, #48]	; (800b3a0 <HAL_RCC_OscConfig+0x784>)
 800b36e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b372:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b374:	f7fc f892 	bl	800749c <HAL_GetTick>
 800b378:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b37a:	e008      	b.n	800b38e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b37c:	f7fc f88e 	bl	800749c <HAL_GetTick>
 800b380:	4602      	mov	r2, r0
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	1ad3      	subs	r3, r2, r3
 800b386:	2b02      	cmp	r3, #2
 800b388:	d901      	bls.n	800b38e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800b38a:	2303      	movs	r3, #3
 800b38c:	e058      	b.n	800b440 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b38e:	4b04      	ldr	r3, [pc, #16]	; (800b3a0 <HAL_RCC_OscConfig+0x784>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b396:	2b00      	cmp	r3, #0
 800b398:	d0f0      	beq.n	800b37c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b39a:	e050      	b.n	800b43e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b39c:	2301      	movs	r3, #1
 800b39e:	e04f      	b.n	800b440 <HAL_RCC_OscConfig+0x824>
 800b3a0:	40021000 	.word	0x40021000
 800b3a4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b3a8:	4b27      	ldr	r3, [pc, #156]	; (800b448 <HAL_RCC_OscConfig+0x82c>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d144      	bne.n	800b43e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b3b4:	4b24      	ldr	r3, [pc, #144]	; (800b448 <HAL_RCC_OscConfig+0x82c>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4a23      	ldr	r2, [pc, #140]	; (800b448 <HAL_RCC_OscConfig+0x82c>)
 800b3ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b3be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b3c0:	4b21      	ldr	r3, [pc, #132]	; (800b448 <HAL_RCC_OscConfig+0x82c>)
 800b3c2:	68db      	ldr	r3, [r3, #12]
 800b3c4:	4a20      	ldr	r2, [pc, #128]	; (800b448 <HAL_RCC_OscConfig+0x82c>)
 800b3c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b3ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b3cc:	f7fc f866 	bl	800749c <HAL_GetTick>
 800b3d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b3d2:	e008      	b.n	800b3e6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b3d4:	f7fc f862 	bl	800749c <HAL_GetTick>
 800b3d8:	4602      	mov	r2, r0
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	1ad3      	subs	r3, r2, r3
 800b3de:	2b02      	cmp	r3, #2
 800b3e0:	d901      	bls.n	800b3e6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800b3e2:	2303      	movs	r3, #3
 800b3e4:	e02c      	b.n	800b440 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b3e6:	4b18      	ldr	r3, [pc, #96]	; (800b448 <HAL_RCC_OscConfig+0x82c>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d0f0      	beq.n	800b3d4 <HAL_RCC_OscConfig+0x7b8>
 800b3f2:	e024      	b.n	800b43e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b3f4:	69bb      	ldr	r3, [r7, #24]
 800b3f6:	2b0c      	cmp	r3, #12
 800b3f8:	d01f      	beq.n	800b43a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b3fa:	4b13      	ldr	r3, [pc, #76]	; (800b448 <HAL_RCC_OscConfig+0x82c>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	4a12      	ldr	r2, [pc, #72]	; (800b448 <HAL_RCC_OscConfig+0x82c>)
 800b400:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b406:	f7fc f849 	bl	800749c <HAL_GetTick>
 800b40a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b40c:	e008      	b.n	800b420 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b40e:	f7fc f845 	bl	800749c <HAL_GetTick>
 800b412:	4602      	mov	r2, r0
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	1ad3      	subs	r3, r2, r3
 800b418:	2b02      	cmp	r3, #2
 800b41a:	d901      	bls.n	800b420 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800b41c:	2303      	movs	r3, #3
 800b41e:	e00f      	b.n	800b440 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b420:	4b09      	ldr	r3, [pc, #36]	; (800b448 <HAL_RCC_OscConfig+0x82c>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d1f0      	bne.n	800b40e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800b42c:	4b06      	ldr	r3, [pc, #24]	; (800b448 <HAL_RCC_OscConfig+0x82c>)
 800b42e:	68da      	ldr	r2, [r3, #12]
 800b430:	4905      	ldr	r1, [pc, #20]	; (800b448 <HAL_RCC_OscConfig+0x82c>)
 800b432:	4b06      	ldr	r3, [pc, #24]	; (800b44c <HAL_RCC_OscConfig+0x830>)
 800b434:	4013      	ands	r3, r2
 800b436:	60cb      	str	r3, [r1, #12]
 800b438:	e001      	b.n	800b43e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b43a:	2301      	movs	r3, #1
 800b43c:	e000      	b.n	800b440 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800b43e:	2300      	movs	r3, #0
}
 800b440:	4618      	mov	r0, r3
 800b442:	3720      	adds	r7, #32
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}
 800b448:	40021000 	.word	0x40021000
 800b44c:	feeefffc 	.word	0xfeeefffc

0800b450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b086      	sub	sp, #24
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b45a:	2300      	movs	r3, #0
 800b45c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d101      	bne.n	800b468 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b464:	2301      	movs	r3, #1
 800b466:	e11d      	b.n	800b6a4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b468:	4b90      	ldr	r3, [pc, #576]	; (800b6ac <HAL_RCC_ClockConfig+0x25c>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f003 030f 	and.w	r3, r3, #15
 800b470:	683a      	ldr	r2, [r7, #0]
 800b472:	429a      	cmp	r2, r3
 800b474:	d910      	bls.n	800b498 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b476:	4b8d      	ldr	r3, [pc, #564]	; (800b6ac <HAL_RCC_ClockConfig+0x25c>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f023 020f 	bic.w	r2, r3, #15
 800b47e:	498b      	ldr	r1, [pc, #556]	; (800b6ac <HAL_RCC_ClockConfig+0x25c>)
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	4313      	orrs	r3, r2
 800b484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b486:	4b89      	ldr	r3, [pc, #548]	; (800b6ac <HAL_RCC_ClockConfig+0x25c>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f003 030f 	and.w	r3, r3, #15
 800b48e:	683a      	ldr	r2, [r7, #0]
 800b490:	429a      	cmp	r2, r3
 800b492:	d001      	beq.n	800b498 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b494:	2301      	movs	r3, #1
 800b496:	e105      	b.n	800b6a4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f003 0302 	and.w	r3, r3, #2
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d010      	beq.n	800b4c6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	689a      	ldr	r2, [r3, #8]
 800b4a8:	4b81      	ldr	r3, [pc, #516]	; (800b6b0 <HAL_RCC_ClockConfig+0x260>)
 800b4aa:	689b      	ldr	r3, [r3, #8]
 800b4ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d908      	bls.n	800b4c6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b4b4:	4b7e      	ldr	r3, [pc, #504]	; (800b6b0 <HAL_RCC_ClockConfig+0x260>)
 800b4b6:	689b      	ldr	r3, [r3, #8]
 800b4b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	497b      	ldr	r1, [pc, #492]	; (800b6b0 <HAL_RCC_ClockConfig+0x260>)
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f003 0301 	and.w	r3, r3, #1
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d079      	beq.n	800b5c6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	685b      	ldr	r3, [r3, #4]
 800b4d6:	2b03      	cmp	r3, #3
 800b4d8:	d11e      	bne.n	800b518 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b4da:	4b75      	ldr	r3, [pc, #468]	; (800b6b0 <HAL_RCC_ClockConfig+0x260>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d101      	bne.n	800b4ea <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	e0dc      	b.n	800b6a4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800b4ea:	f000 fa35 	bl	800b958 <RCC_GetSysClockFreqFromPLLSource>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	4a70      	ldr	r2, [pc, #448]	; (800b6b4 <HAL_RCC_ClockConfig+0x264>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d946      	bls.n	800b584 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800b4f6:	4b6e      	ldr	r3, [pc, #440]	; (800b6b0 <HAL_RCC_ClockConfig+0x260>)
 800b4f8:	689b      	ldr	r3, [r3, #8]
 800b4fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d140      	bne.n	800b584 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b502:	4b6b      	ldr	r3, [pc, #428]	; (800b6b0 <HAL_RCC_ClockConfig+0x260>)
 800b504:	689b      	ldr	r3, [r3, #8]
 800b506:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b50a:	4a69      	ldr	r2, [pc, #420]	; (800b6b0 <HAL_RCC_ClockConfig+0x260>)
 800b50c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b510:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b512:	2380      	movs	r3, #128	; 0x80
 800b514:	617b      	str	r3, [r7, #20]
 800b516:	e035      	b.n	800b584 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	2b02      	cmp	r3, #2
 800b51e:	d107      	bne.n	800b530 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b520:	4b63      	ldr	r3, [pc, #396]	; (800b6b0 <HAL_RCC_ClockConfig+0x260>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d115      	bne.n	800b558 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800b52c:	2301      	movs	r3, #1
 800b52e:	e0b9      	b.n	800b6a4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d107      	bne.n	800b548 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b538:	4b5d      	ldr	r3, [pc, #372]	; (800b6b0 <HAL_RCC_ClockConfig+0x260>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f003 0302 	and.w	r3, r3, #2
 800b540:	2b00      	cmp	r3, #0
 800b542:	d109      	bne.n	800b558 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800b544:	2301      	movs	r3, #1
 800b546:	e0ad      	b.n	800b6a4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b548:	4b59      	ldr	r3, [pc, #356]	; (800b6b0 <HAL_RCC_ClockConfig+0x260>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b550:	2b00      	cmp	r3, #0
 800b552:	d101      	bne.n	800b558 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800b554:	2301      	movs	r3, #1
 800b556:	e0a5      	b.n	800b6a4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800b558:	f000 f8b4 	bl	800b6c4 <HAL_RCC_GetSysClockFreq>
 800b55c:	4603      	mov	r3, r0
 800b55e:	4a55      	ldr	r2, [pc, #340]	; (800b6b4 <HAL_RCC_ClockConfig+0x264>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d90f      	bls.n	800b584 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800b564:	4b52      	ldr	r3, [pc, #328]	; (800b6b0 <HAL_RCC_ClockConfig+0x260>)
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d109      	bne.n	800b584 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b570:	4b4f      	ldr	r3, [pc, #316]	; (800b6b0 <HAL_RCC_ClockConfig+0x260>)
 800b572:	689b      	ldr	r3, [r3, #8]
 800b574:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b578:	4a4d      	ldr	r2, [pc, #308]	; (800b6b0 <HAL_RCC_ClockConfig+0x260>)
 800b57a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b57e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b580:	2380      	movs	r3, #128	; 0x80
 800b582:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b584:	4b4a      	ldr	r3, [pc, #296]	; (800b6b0 <HAL_RCC_ClockConfig+0x260>)
 800b586:	689b      	ldr	r3, [r3, #8]
 800b588:	f023 0203 	bic.w	r2, r3, #3
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	4947      	ldr	r1, [pc, #284]	; (800b6b0 <HAL_RCC_ClockConfig+0x260>)
 800b592:	4313      	orrs	r3, r2
 800b594:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b596:	f7fb ff81 	bl	800749c <HAL_GetTick>
 800b59a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b59c:	e00a      	b.n	800b5b4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b59e:	f7fb ff7d 	bl	800749c <HAL_GetTick>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	1ad3      	subs	r3, r2, r3
 800b5a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d901      	bls.n	800b5b4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800b5b0:	2303      	movs	r3, #3
 800b5b2:	e077      	b.n	800b6a4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b5b4:	4b3e      	ldr	r3, [pc, #248]	; (800b6b0 <HAL_RCC_ClockConfig+0x260>)
 800b5b6:	689b      	ldr	r3, [r3, #8]
 800b5b8:	f003 020c 	and.w	r2, r3, #12
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	009b      	lsls	r3, r3, #2
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d1eb      	bne.n	800b59e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	2b80      	cmp	r3, #128	; 0x80
 800b5ca:	d105      	bne.n	800b5d8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b5cc:	4b38      	ldr	r3, [pc, #224]	; (800b6b0 <HAL_RCC_ClockConfig+0x260>)
 800b5ce:	689b      	ldr	r3, [r3, #8]
 800b5d0:	4a37      	ldr	r2, [pc, #220]	; (800b6b0 <HAL_RCC_ClockConfig+0x260>)
 800b5d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b5d6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f003 0302 	and.w	r3, r3, #2
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d010      	beq.n	800b606 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	689a      	ldr	r2, [r3, #8]
 800b5e8:	4b31      	ldr	r3, [pc, #196]	; (800b6b0 <HAL_RCC_ClockConfig+0x260>)
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d208      	bcs.n	800b606 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b5f4:	4b2e      	ldr	r3, [pc, #184]	; (800b6b0 <HAL_RCC_ClockConfig+0x260>)
 800b5f6:	689b      	ldr	r3, [r3, #8]
 800b5f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	689b      	ldr	r3, [r3, #8]
 800b600:	492b      	ldr	r1, [pc, #172]	; (800b6b0 <HAL_RCC_ClockConfig+0x260>)
 800b602:	4313      	orrs	r3, r2
 800b604:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b606:	4b29      	ldr	r3, [pc, #164]	; (800b6ac <HAL_RCC_ClockConfig+0x25c>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f003 030f 	and.w	r3, r3, #15
 800b60e:	683a      	ldr	r2, [r7, #0]
 800b610:	429a      	cmp	r2, r3
 800b612:	d210      	bcs.n	800b636 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b614:	4b25      	ldr	r3, [pc, #148]	; (800b6ac <HAL_RCC_ClockConfig+0x25c>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f023 020f 	bic.w	r2, r3, #15
 800b61c:	4923      	ldr	r1, [pc, #140]	; (800b6ac <HAL_RCC_ClockConfig+0x25c>)
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	4313      	orrs	r3, r2
 800b622:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b624:	4b21      	ldr	r3, [pc, #132]	; (800b6ac <HAL_RCC_ClockConfig+0x25c>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f003 030f 	and.w	r3, r3, #15
 800b62c:	683a      	ldr	r2, [r7, #0]
 800b62e:	429a      	cmp	r2, r3
 800b630:	d001      	beq.n	800b636 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800b632:	2301      	movs	r3, #1
 800b634:	e036      	b.n	800b6a4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f003 0304 	and.w	r3, r3, #4
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d008      	beq.n	800b654 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b642:	4b1b      	ldr	r3, [pc, #108]	; (800b6b0 <HAL_RCC_ClockConfig+0x260>)
 800b644:	689b      	ldr	r3, [r3, #8]
 800b646:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	68db      	ldr	r3, [r3, #12]
 800b64e:	4918      	ldr	r1, [pc, #96]	; (800b6b0 <HAL_RCC_ClockConfig+0x260>)
 800b650:	4313      	orrs	r3, r2
 800b652:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f003 0308 	and.w	r3, r3, #8
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d009      	beq.n	800b674 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b660:	4b13      	ldr	r3, [pc, #76]	; (800b6b0 <HAL_RCC_ClockConfig+0x260>)
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	691b      	ldr	r3, [r3, #16]
 800b66c:	00db      	lsls	r3, r3, #3
 800b66e:	4910      	ldr	r1, [pc, #64]	; (800b6b0 <HAL_RCC_ClockConfig+0x260>)
 800b670:	4313      	orrs	r3, r2
 800b672:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b674:	f000 f826 	bl	800b6c4 <HAL_RCC_GetSysClockFreq>
 800b678:	4602      	mov	r2, r0
 800b67a:	4b0d      	ldr	r3, [pc, #52]	; (800b6b0 <HAL_RCC_ClockConfig+0x260>)
 800b67c:	689b      	ldr	r3, [r3, #8]
 800b67e:	091b      	lsrs	r3, r3, #4
 800b680:	f003 030f 	and.w	r3, r3, #15
 800b684:	490c      	ldr	r1, [pc, #48]	; (800b6b8 <HAL_RCC_ClockConfig+0x268>)
 800b686:	5ccb      	ldrb	r3, [r1, r3]
 800b688:	f003 031f 	and.w	r3, r3, #31
 800b68c:	fa22 f303 	lsr.w	r3, r2, r3
 800b690:	4a0a      	ldr	r2, [pc, #40]	; (800b6bc <HAL_RCC_ClockConfig+0x26c>)
 800b692:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b694:	4b0a      	ldr	r3, [pc, #40]	; (800b6c0 <HAL_RCC_ClockConfig+0x270>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4618      	mov	r0, r3
 800b69a:	f7fb feaf 	bl	80073fc <HAL_InitTick>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	73fb      	strb	r3, [r7, #15]

  return status;
 800b6a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3718      	adds	r7, #24
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}
 800b6ac:	40022000 	.word	0x40022000
 800b6b0:	40021000 	.word	0x40021000
 800b6b4:	04c4b400 	.word	0x04c4b400
 800b6b8:	0801d0f4 	.word	0x0801d0f4
 800b6bc:	20000004 	.word	0x20000004
 800b6c0:	20000008 	.word	0x20000008

0800b6c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b089      	sub	sp, #36	; 0x24
 800b6c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	61fb      	str	r3, [r7, #28]
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b6d2:	4b3e      	ldr	r3, [pc, #248]	; (800b7cc <HAL_RCC_GetSysClockFreq+0x108>)
 800b6d4:	689b      	ldr	r3, [r3, #8]
 800b6d6:	f003 030c 	and.w	r3, r3, #12
 800b6da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b6dc:	4b3b      	ldr	r3, [pc, #236]	; (800b7cc <HAL_RCC_GetSysClockFreq+0x108>)
 800b6de:	68db      	ldr	r3, [r3, #12]
 800b6e0:	f003 0303 	and.w	r3, r3, #3
 800b6e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d005      	beq.n	800b6f8 <HAL_RCC_GetSysClockFreq+0x34>
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	2b0c      	cmp	r3, #12
 800b6f0:	d121      	bne.n	800b736 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d11e      	bne.n	800b736 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b6f8:	4b34      	ldr	r3, [pc, #208]	; (800b7cc <HAL_RCC_GetSysClockFreq+0x108>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f003 0308 	and.w	r3, r3, #8
 800b700:	2b00      	cmp	r3, #0
 800b702:	d107      	bne.n	800b714 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b704:	4b31      	ldr	r3, [pc, #196]	; (800b7cc <HAL_RCC_GetSysClockFreq+0x108>)
 800b706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b70a:	0a1b      	lsrs	r3, r3, #8
 800b70c:	f003 030f 	and.w	r3, r3, #15
 800b710:	61fb      	str	r3, [r7, #28]
 800b712:	e005      	b.n	800b720 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b714:	4b2d      	ldr	r3, [pc, #180]	; (800b7cc <HAL_RCC_GetSysClockFreq+0x108>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	091b      	lsrs	r3, r3, #4
 800b71a:	f003 030f 	and.w	r3, r3, #15
 800b71e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b720:	4a2b      	ldr	r2, [pc, #172]	; (800b7d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800b722:	69fb      	ldr	r3, [r7, #28]
 800b724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b728:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d10d      	bne.n	800b74c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b730:	69fb      	ldr	r3, [r7, #28]
 800b732:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b734:	e00a      	b.n	800b74c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	2b04      	cmp	r3, #4
 800b73a:	d102      	bne.n	800b742 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b73c:	4b25      	ldr	r3, [pc, #148]	; (800b7d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800b73e:	61bb      	str	r3, [r7, #24]
 800b740:	e004      	b.n	800b74c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	2b08      	cmp	r3, #8
 800b746:	d101      	bne.n	800b74c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b748:	4b23      	ldr	r3, [pc, #140]	; (800b7d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800b74a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	2b0c      	cmp	r3, #12
 800b750:	d134      	bne.n	800b7bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b752:	4b1e      	ldr	r3, [pc, #120]	; (800b7cc <HAL_RCC_GetSysClockFreq+0x108>)
 800b754:	68db      	ldr	r3, [r3, #12]
 800b756:	f003 0303 	and.w	r3, r3, #3
 800b75a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	2b02      	cmp	r3, #2
 800b760:	d003      	beq.n	800b76a <HAL_RCC_GetSysClockFreq+0xa6>
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	2b03      	cmp	r3, #3
 800b766:	d003      	beq.n	800b770 <HAL_RCC_GetSysClockFreq+0xac>
 800b768:	e005      	b.n	800b776 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800b76a:	4b1a      	ldr	r3, [pc, #104]	; (800b7d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800b76c:	617b      	str	r3, [r7, #20]
      break;
 800b76e:	e005      	b.n	800b77c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800b770:	4b19      	ldr	r3, [pc, #100]	; (800b7d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800b772:	617b      	str	r3, [r7, #20]
      break;
 800b774:	e002      	b.n	800b77c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800b776:	69fb      	ldr	r3, [r7, #28]
 800b778:	617b      	str	r3, [r7, #20]
      break;
 800b77a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b77c:	4b13      	ldr	r3, [pc, #76]	; (800b7cc <HAL_RCC_GetSysClockFreq+0x108>)
 800b77e:	68db      	ldr	r3, [r3, #12]
 800b780:	091b      	lsrs	r3, r3, #4
 800b782:	f003 030f 	and.w	r3, r3, #15
 800b786:	3301      	adds	r3, #1
 800b788:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b78a:	4b10      	ldr	r3, [pc, #64]	; (800b7cc <HAL_RCC_GetSysClockFreq+0x108>)
 800b78c:	68db      	ldr	r3, [r3, #12]
 800b78e:	0a1b      	lsrs	r3, r3, #8
 800b790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b794:	697a      	ldr	r2, [r7, #20]
 800b796:	fb03 f202 	mul.w	r2, r3, r2
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b7a2:	4b0a      	ldr	r3, [pc, #40]	; (800b7cc <HAL_RCC_GetSysClockFreq+0x108>)
 800b7a4:	68db      	ldr	r3, [r3, #12]
 800b7a6:	0e5b      	lsrs	r3, r3, #25
 800b7a8:	f003 0303 	and.w	r3, r3, #3
 800b7ac:	3301      	adds	r3, #1
 800b7ae:	005b      	lsls	r3, r3, #1
 800b7b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800b7b2:	697a      	ldr	r2, [r7, #20]
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800b7bc:	69bb      	ldr	r3, [r7, #24]
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3724      	adds	r7, #36	; 0x24
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c8:	4770      	bx	lr
 800b7ca:	bf00      	nop
 800b7cc:	40021000 	.word	0x40021000
 800b7d0:	0801d10c 	.word	0x0801d10c
 800b7d4:	00f42400 	.word	0x00f42400
 800b7d8:	007a1200 	.word	0x007a1200

0800b7dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b7e0:	4b03      	ldr	r3, [pc, #12]	; (800b7f0 <HAL_RCC_GetHCLKFreq+0x14>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr
 800b7ee:	bf00      	nop
 800b7f0:	20000004 	.word	0x20000004

0800b7f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b7f8:	f7ff fff0 	bl	800b7dc <HAL_RCC_GetHCLKFreq>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	4b06      	ldr	r3, [pc, #24]	; (800b818 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b800:	689b      	ldr	r3, [r3, #8]
 800b802:	0a1b      	lsrs	r3, r3, #8
 800b804:	f003 0307 	and.w	r3, r3, #7
 800b808:	4904      	ldr	r1, [pc, #16]	; (800b81c <HAL_RCC_GetPCLK1Freq+0x28>)
 800b80a:	5ccb      	ldrb	r3, [r1, r3]
 800b80c:	f003 031f 	and.w	r3, r3, #31
 800b810:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b814:	4618      	mov	r0, r3
 800b816:	bd80      	pop	{r7, pc}
 800b818:	40021000 	.word	0x40021000
 800b81c:	0801d104 	.word	0x0801d104

0800b820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b824:	f7ff ffda 	bl	800b7dc <HAL_RCC_GetHCLKFreq>
 800b828:	4602      	mov	r2, r0
 800b82a:	4b06      	ldr	r3, [pc, #24]	; (800b844 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b82c:	689b      	ldr	r3, [r3, #8]
 800b82e:	0adb      	lsrs	r3, r3, #11
 800b830:	f003 0307 	and.w	r3, r3, #7
 800b834:	4904      	ldr	r1, [pc, #16]	; (800b848 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b836:	5ccb      	ldrb	r3, [r1, r3]
 800b838:	f003 031f 	and.w	r3, r3, #31
 800b83c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b840:	4618      	mov	r0, r3
 800b842:	bd80      	pop	{r7, pc}
 800b844:	40021000 	.word	0x40021000
 800b848:	0801d104 	.word	0x0801d104

0800b84c <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800b84c:	b480      	push	{r7}
 800b84e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800b850:	4b05      	ldr	r3, [pc, #20]	; (800b868 <HAL_RCC_EnableCSS+0x1c>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a04      	ldr	r2, [pc, #16]	; (800b868 <HAL_RCC_EnableCSS+0x1c>)
 800b856:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b85a:	6013      	str	r3, [r2, #0]
}
 800b85c:	bf00      	nop
 800b85e:	46bd      	mov	sp, r7
 800b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b864:	4770      	bx	lr
 800b866:	bf00      	nop
 800b868:	40021000 	.word	0x40021000

0800b86c <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800b870:	4b07      	ldr	r3, [pc, #28]	; (800b890 <HAL_RCC_NMI_IRQHandler+0x24>)
 800b872:	69db      	ldr	r3, [r3, #28]
 800b874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b87c:	d105      	bne.n	800b88a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800b87e:	f000 f809 	bl	800b894 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800b882:	4b03      	ldr	r3, [pc, #12]	; (800b890 <HAL_RCC_NMI_IRQHandler+0x24>)
 800b884:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b888:	621a      	str	r2, [r3, #32]
  }
}
 800b88a:	bf00      	nop
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	bf00      	nop
 800b890:	40021000 	.word	0x40021000

0800b894 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800b894:	b480      	push	{r7}
 800b896:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800b898:	bf00      	nop
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr
	...

0800b8a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b086      	sub	sp, #24
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b8b0:	4b27      	ldr	r3, [pc, #156]	; (800b950 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b8b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d003      	beq.n	800b8c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b8bc:	f7ff f8da 	bl	800aa74 <HAL_PWREx_GetVoltageRange>
 800b8c0:	6178      	str	r0, [r7, #20]
 800b8c2:	e014      	b.n	800b8ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b8c4:	4b22      	ldr	r3, [pc, #136]	; (800b950 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b8c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8c8:	4a21      	ldr	r2, [pc, #132]	; (800b950 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b8ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b8ce:	6593      	str	r3, [r2, #88]	; 0x58
 800b8d0:	4b1f      	ldr	r3, [pc, #124]	; (800b950 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b8d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8d8:	60fb      	str	r3, [r7, #12]
 800b8da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b8dc:	f7ff f8ca 	bl	800aa74 <HAL_PWREx_GetVoltageRange>
 800b8e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b8e2:	4b1b      	ldr	r3, [pc, #108]	; (800b950 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b8e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8e6:	4a1a      	ldr	r2, [pc, #104]	; (800b950 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b8e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b8ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8f4:	d10b      	bne.n	800b90e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2b80      	cmp	r3, #128	; 0x80
 800b8fa:	d913      	bls.n	800b924 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2ba0      	cmp	r3, #160	; 0xa0
 800b900:	d902      	bls.n	800b908 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b902:	2302      	movs	r3, #2
 800b904:	613b      	str	r3, [r7, #16]
 800b906:	e00d      	b.n	800b924 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b908:	2301      	movs	r3, #1
 800b90a:	613b      	str	r3, [r7, #16]
 800b90c:	e00a      	b.n	800b924 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2b7f      	cmp	r3, #127	; 0x7f
 800b912:	d902      	bls.n	800b91a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800b914:	2302      	movs	r3, #2
 800b916:	613b      	str	r3, [r7, #16]
 800b918:	e004      	b.n	800b924 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2b70      	cmp	r3, #112	; 0x70
 800b91e:	d101      	bne.n	800b924 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b920:	2301      	movs	r3, #1
 800b922:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b924:	4b0b      	ldr	r3, [pc, #44]	; (800b954 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f023 020f 	bic.w	r2, r3, #15
 800b92c:	4909      	ldr	r1, [pc, #36]	; (800b954 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	4313      	orrs	r3, r2
 800b932:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b934:	4b07      	ldr	r3, [pc, #28]	; (800b954 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f003 030f 	and.w	r3, r3, #15
 800b93c:	693a      	ldr	r2, [r7, #16]
 800b93e:	429a      	cmp	r2, r3
 800b940:	d001      	beq.n	800b946 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800b942:	2301      	movs	r3, #1
 800b944:	e000      	b.n	800b948 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800b946:	2300      	movs	r3, #0
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3718      	adds	r7, #24
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	40021000 	.word	0x40021000
 800b954:	40022000 	.word	0x40022000

0800b958 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b958:	b480      	push	{r7}
 800b95a:	b087      	sub	sp, #28
 800b95c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b95e:	4b2d      	ldr	r3, [pc, #180]	; (800ba14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800b960:	68db      	ldr	r3, [r3, #12]
 800b962:	f003 0303 	and.w	r3, r3, #3
 800b966:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	2b03      	cmp	r3, #3
 800b96c:	d00b      	beq.n	800b986 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2b03      	cmp	r3, #3
 800b972:	d825      	bhi.n	800b9c0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2b01      	cmp	r3, #1
 800b978:	d008      	beq.n	800b98c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2b02      	cmp	r3, #2
 800b97e:	d11f      	bne.n	800b9c0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800b980:	4b25      	ldr	r3, [pc, #148]	; (800ba18 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800b982:	613b      	str	r3, [r7, #16]
    break;
 800b984:	e01f      	b.n	800b9c6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800b986:	4b25      	ldr	r3, [pc, #148]	; (800ba1c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800b988:	613b      	str	r3, [r7, #16]
    break;
 800b98a:	e01c      	b.n	800b9c6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b98c:	4b21      	ldr	r3, [pc, #132]	; (800ba14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f003 0308 	and.w	r3, r3, #8
 800b994:	2b00      	cmp	r3, #0
 800b996:	d107      	bne.n	800b9a8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b998:	4b1e      	ldr	r3, [pc, #120]	; (800ba14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800b99a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b99e:	0a1b      	lsrs	r3, r3, #8
 800b9a0:	f003 030f 	and.w	r3, r3, #15
 800b9a4:	617b      	str	r3, [r7, #20]
 800b9a6:	e005      	b.n	800b9b4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b9a8:	4b1a      	ldr	r3, [pc, #104]	; (800ba14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	091b      	lsrs	r3, r3, #4
 800b9ae:	f003 030f 	and.w	r3, r3, #15
 800b9b2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800b9b4:	4a1a      	ldr	r2, [pc, #104]	; (800ba20 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9bc:	613b      	str	r3, [r7, #16]
    break;
 800b9be:	e002      	b.n	800b9c6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	613b      	str	r3, [r7, #16]
    break;
 800b9c4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b9c6:	4b13      	ldr	r3, [pc, #76]	; (800ba14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800b9c8:	68db      	ldr	r3, [r3, #12]
 800b9ca:	091b      	lsrs	r3, r3, #4
 800b9cc:	f003 030f 	and.w	r3, r3, #15
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b9d4:	4b0f      	ldr	r3, [pc, #60]	; (800ba14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800b9d6:	68db      	ldr	r3, [r3, #12]
 800b9d8:	0a1b      	lsrs	r3, r3, #8
 800b9da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9de:	693a      	ldr	r2, [r7, #16]
 800b9e0:	fb03 f202 	mul.w	r2, r3, r2
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9ea:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b9ec:	4b09      	ldr	r3, [pc, #36]	; (800ba14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800b9ee:	68db      	ldr	r3, [r3, #12]
 800b9f0:	0e5b      	lsrs	r3, r3, #25
 800b9f2:	f003 0303 	and.w	r3, r3, #3
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	005b      	lsls	r3, r3, #1
 800b9fa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800b9fc:	693a      	ldr	r2, [r7, #16]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba04:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800ba06:	683b      	ldr	r3, [r7, #0]
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	371c      	adds	r7, #28
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr
 800ba14:	40021000 	.word	0x40021000
 800ba18:	00f42400 	.word	0x00f42400
 800ba1c:	007a1200 	.word	0x007a1200
 800ba20:	0801d10c 	.word	0x0801d10c

0800ba24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b086      	sub	sp, #24
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ba30:	2300      	movs	r3, #0
 800ba32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d040      	beq.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba44:	2b80      	cmp	r3, #128	; 0x80
 800ba46:	d02a      	beq.n	800ba9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ba48:	2b80      	cmp	r3, #128	; 0x80
 800ba4a:	d825      	bhi.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800ba4c:	2b60      	cmp	r3, #96	; 0x60
 800ba4e:	d026      	beq.n	800ba9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ba50:	2b60      	cmp	r3, #96	; 0x60
 800ba52:	d821      	bhi.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800ba54:	2b40      	cmp	r3, #64	; 0x40
 800ba56:	d006      	beq.n	800ba66 <HAL_RCCEx_PeriphCLKConfig+0x42>
 800ba58:	2b40      	cmp	r3, #64	; 0x40
 800ba5a:	d81d      	bhi.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d009      	beq.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800ba60:	2b20      	cmp	r3, #32
 800ba62:	d010      	beq.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800ba64:	e018      	b.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800ba66:	4b89      	ldr	r3, [pc, #548]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ba68:	68db      	ldr	r3, [r3, #12]
 800ba6a:	4a88      	ldr	r2, [pc, #544]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ba6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba70:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ba72:	e015      	b.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	3304      	adds	r3, #4
 800ba78:	2100      	movs	r1, #0
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f001 fa24 	bl	800cec8 <RCCEx_PLLSAI1_Config>
 800ba80:	4603      	mov	r3, r0
 800ba82:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ba84:	e00c      	b.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	3320      	adds	r3, #32
 800ba8a:	2100      	movs	r1, #0
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f001 fb0f 	bl	800d0b0 <RCCEx_PLLSAI2_Config>
 800ba92:	4603      	mov	r3, r0
 800ba94:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ba96:	e003      	b.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	74fb      	strb	r3, [r7, #19]
      break;
 800ba9c:	e000      	b.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800ba9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800baa0:	7cfb      	ldrb	r3, [r7, #19]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d10b      	bne.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800baa6:	4b79      	ldr	r3, [pc, #484]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800baa8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800baac:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bab4:	4975      	ldr	r1, [pc, #468]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bab6:	4313      	orrs	r3, r2
 800bab8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800babc:	e001      	b.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800babe:	7cfb      	ldrb	r3, [r7, #19]
 800bac0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d047      	beq.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bad6:	d030      	beq.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0x116>
 800bad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800badc:	d82a      	bhi.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800bade:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bae2:	d02a      	beq.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0x116>
 800bae4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bae8:	d824      	bhi.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800baea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800baee:	d008      	beq.n	800bb02 <HAL_RCCEx_PeriphCLKConfig+0xde>
 800baf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800baf4:	d81e      	bhi.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d00a      	beq.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800bafa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bafe:	d010      	beq.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800bb00:	e018      	b.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800bb02:	4b62      	ldr	r3, [pc, #392]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bb04:	68db      	ldr	r3, [r3, #12]
 800bb06:	4a61      	ldr	r2, [pc, #388]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bb08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb0c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800bb0e:	e015      	b.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	3304      	adds	r3, #4
 800bb14:	2100      	movs	r1, #0
 800bb16:	4618      	mov	r0, r3
 800bb18:	f001 f9d6 	bl	800cec8 <RCCEx_PLLSAI1_Config>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800bb20:	e00c      	b.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	3320      	adds	r3, #32
 800bb26:	2100      	movs	r1, #0
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f001 fac1 	bl	800d0b0 <RCCEx_PLLSAI2_Config>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800bb32:	e003      	b.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bb34:	2301      	movs	r3, #1
 800bb36:	74fb      	strb	r3, [r7, #19]
      break;
 800bb38:	e000      	b.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800bb3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb3c:	7cfb      	ldrb	r3, [r7, #19]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d10b      	bne.n	800bb5a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800bb42:	4b52      	ldr	r3, [pc, #328]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bb44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bb48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb50:	494e      	ldr	r1, [pc, #312]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bb52:	4313      	orrs	r3, r2
 800bb54:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800bb58:	e001      	b.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb5a:	7cfb      	ldrb	r3, [r7, #19]
 800bb5c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	f000 809f 	beq.w	800bcaa <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800bb70:	4b46      	ldr	r3, [pc, #280]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bb72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d101      	bne.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	e000      	b.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800bb80:	2300      	movs	r3, #0
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d00d      	beq.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bb86:	4b41      	ldr	r3, [pc, #260]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bb88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb8a:	4a40      	ldr	r2, [pc, #256]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bb8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb90:	6593      	str	r3, [r2, #88]	; 0x58
 800bb92:	4b3e      	ldr	r3, [pc, #248]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bb94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb9a:	60bb      	str	r3, [r7, #8]
 800bb9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bb9e:	2301      	movs	r3, #1
 800bba0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bba2:	4b3b      	ldr	r3, [pc, #236]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	4a3a      	ldr	r2, [pc, #232]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800bba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bbac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bbae:	f7fb fc75 	bl	800749c <HAL_GetTick>
 800bbb2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800bbb4:	e009      	b.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bbb6:	f7fb fc71 	bl	800749c <HAL_GetTick>
 800bbba:	4602      	mov	r2, r0
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	1ad3      	subs	r3, r2, r3
 800bbc0:	2b02      	cmp	r3, #2
 800bbc2:	d902      	bls.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800bbc4:	2303      	movs	r3, #3
 800bbc6:	74fb      	strb	r3, [r7, #19]
        break;
 800bbc8:	e005      	b.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800bbca:	4b31      	ldr	r3, [pc, #196]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d0ef      	beq.n	800bbb6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800bbd6:	7cfb      	ldrb	r3, [r7, #19]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d15b      	bne.n	800bc94 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bbdc:	4b2b      	ldr	r3, [pc, #172]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bbde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbe6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d01f      	beq.n	800bc2e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbf4:	697a      	ldr	r2, [r7, #20]
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d019      	beq.n	800bc2e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bbfa:	4b24      	ldr	r3, [pc, #144]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bbfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc04:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bc06:	4b21      	ldr	r3, [pc, #132]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bc08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc0c:	4a1f      	ldr	r2, [pc, #124]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bc0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bc16:	4b1d      	ldr	r3, [pc, #116]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bc18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc1c:	4a1b      	ldr	r2, [pc, #108]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bc1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bc26:	4a19      	ldr	r2, [pc, #100]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	f003 0301 	and.w	r3, r3, #1
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d016      	beq.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc38:	f7fb fc30 	bl	800749c <HAL_GetTick>
 800bc3c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bc3e:	e00b      	b.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc40:	f7fb fc2c 	bl	800749c <HAL_GetTick>
 800bc44:	4602      	mov	r2, r0
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	1ad3      	subs	r3, r2, r3
 800bc4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d902      	bls.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800bc52:	2303      	movs	r3, #3
 800bc54:	74fb      	strb	r3, [r7, #19]
            break;
 800bc56:	e006      	b.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bc58:	4b0c      	ldr	r3, [pc, #48]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bc5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc5e:	f003 0302 	and.w	r3, r3, #2
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d0ec      	beq.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800bc66:	7cfb      	ldrb	r3, [r7, #19]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d10c      	bne.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bc6c:	4b07      	ldr	r3, [pc, #28]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bc6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc7c:	4903      	ldr	r1, [pc, #12]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bc7e:	4313      	orrs	r3, r2
 800bc80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800bc84:	e008      	b.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bc86:	7cfb      	ldrb	r3, [r7, #19]
 800bc88:	74bb      	strb	r3, [r7, #18]
 800bc8a:	e005      	b.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800bc8c:	40021000 	.word	0x40021000
 800bc90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc94:	7cfb      	ldrb	r3, [r7, #19]
 800bc96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bc98:	7c7b      	ldrb	r3, [r7, #17]
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d105      	bne.n	800bcaa <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bc9e:	4ba0      	ldr	r3, [pc, #640]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bca2:	4a9f      	ldr	r2, [pc, #636]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bca4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bca8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f003 0301 	and.w	r3, r3, #1
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d00a      	beq.n	800bccc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bcb6:	4b9a      	ldr	r3, [pc, #616]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bcb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcbc:	f023 0203 	bic.w	r2, r3, #3
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcc4:	4996      	ldr	r1, [pc, #600]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f003 0302 	and.w	r3, r3, #2
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d00a      	beq.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bcd8:	4b91      	ldr	r3, [pc, #580]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bcda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcde:	f023 020c 	bic.w	r2, r3, #12
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce6:	498e      	ldr	r1, [pc, #568]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bce8:	4313      	orrs	r3, r2
 800bcea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f003 0304 	and.w	r3, r3, #4
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d00a      	beq.n	800bd10 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bcfa:	4b89      	ldr	r3, [pc, #548]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bcfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd00:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd08:	4985      	ldr	r1, [pc, #532]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f003 0308 	and.w	r3, r3, #8
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d00a      	beq.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bd1c:	4b80      	ldr	r3, [pc, #512]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd2a:	497d      	ldr	r1, [pc, #500]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f003 0310 	and.w	r3, r3, #16
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d00a      	beq.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bd3e:	4b78      	ldr	r3, [pc, #480]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd4c:	4974      	ldr	r1, [pc, #464]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f003 0320 	and.w	r3, r3, #32
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d00a      	beq.n	800bd76 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bd60:	4b6f      	ldr	r3, [pc, #444]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd6e:	496c      	ldr	r1, [pc, #432]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd70:	4313      	orrs	r3, r2
 800bd72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d00a      	beq.n	800bd98 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bd82:	4b67      	ldr	r3, [pc, #412]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd90:	4963      	ldr	r1, [pc, #396]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd92:	4313      	orrs	r3, r2
 800bd94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d00a      	beq.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bda4:	4b5e      	ldr	r3, [pc, #376]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bda6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdaa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdb2:	495b      	ldr	r1, [pc, #364]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d00a      	beq.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bdc6:	4b56      	ldr	r3, [pc, #344]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bdc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdcc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdd4:	4952      	ldr	r1, [pc, #328]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d00a      	beq.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bde8:	4b4d      	ldr	r3, [pc, #308]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bdea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdf6:	494a      	ldr	r1, [pc, #296]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be06:	2b00      	cmp	r3, #0
 800be08:	d00a      	beq.n	800be20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800be0a:	4b45      	ldr	r3, [pc, #276]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800be0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be18:	4941      	ldr	r1, [pc, #260]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800be1a:	4313      	orrs	r3, r2
 800be1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d00a      	beq.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800be2c:	4b3c      	ldr	r3, [pc, #240]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800be2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800be32:	f023 0203 	bic.w	r2, r3, #3
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be3a:	4939      	ldr	r1, [pc, #228]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800be3c:	4313      	orrs	r3, r2
 800be3e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d028      	beq.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800be4e:	4b34      	ldr	r3, [pc, #208]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800be50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be54:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be5c:	4930      	ldr	r1, [pc, #192]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800be5e:	4313      	orrs	r3, r2
 800be60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be6c:	d106      	bne.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800be6e:	4b2c      	ldr	r3, [pc, #176]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800be70:	68db      	ldr	r3, [r3, #12]
 800be72:	4a2b      	ldr	r2, [pc, #172]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800be74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be78:	60d3      	str	r3, [r2, #12]
 800be7a:	e011      	b.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be84:	d10c      	bne.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	3304      	adds	r3, #4
 800be8a:	2101      	movs	r1, #1
 800be8c:	4618      	mov	r0, r3
 800be8e:	f001 f81b 	bl	800cec8 <RCCEx_PLLSAI1_Config>
 800be92:	4603      	mov	r3, r0
 800be94:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800be96:	7cfb      	ldrb	r3, [r7, #19]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d001      	beq.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800be9c:	7cfb      	ldrb	r3, [r7, #19]
 800be9e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d04d      	beq.n	800bf48 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800beb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800beb4:	d108      	bne.n	800bec8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800beb6:	4b1a      	ldr	r3, [pc, #104]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800beb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bebc:	4a18      	ldr	r2, [pc, #96]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bebe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bec2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800bec6:	e012      	b.n	800beee <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800bec8:	4b15      	ldr	r3, [pc, #84]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800beca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bece:	4a14      	ldr	r2, [pc, #80]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bed0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bed4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800bed8:	4b11      	ldr	r3, [pc, #68]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800beda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bede:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bee6:	490e      	ldr	r1, [pc, #56]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bee8:	4313      	orrs	r3, r2
 800beea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bef2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bef6:	d106      	bne.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bef8:	4b09      	ldr	r3, [pc, #36]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800befa:	68db      	ldr	r3, [r3, #12]
 800befc:	4a08      	ldr	r2, [pc, #32]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800befe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf02:	60d3      	str	r3, [r2, #12]
 800bf04:	e020      	b.n	800bf48 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf0e:	d109      	bne.n	800bf24 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800bf10:	4b03      	ldr	r3, [pc, #12]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bf12:	68db      	ldr	r3, [r3, #12]
 800bf14:	4a02      	ldr	r2, [pc, #8]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bf16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf1a:	60d3      	str	r3, [r2, #12]
 800bf1c:	e014      	b.n	800bf48 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800bf1e:	bf00      	nop
 800bf20:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bf2c:	d10c      	bne.n	800bf48 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	3304      	adds	r3, #4
 800bf32:	2101      	movs	r1, #1
 800bf34:	4618      	mov	r0, r3
 800bf36:	f000 ffc7 	bl	800cec8 <RCCEx_PLLSAI1_Config>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bf3e:	7cfb      	ldrb	r3, [r7, #19]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d001      	beq.n	800bf48 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800bf44:	7cfb      	ldrb	r3, [r7, #19]
 800bf46:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d028      	beq.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bf54:	4b4a      	ldr	r3, [pc, #296]	; (800c080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bf56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf62:	4947      	ldr	r1, [pc, #284]	; (800c080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bf64:	4313      	orrs	r3, r2
 800bf66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf72:	d106      	bne.n	800bf82 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bf74:	4b42      	ldr	r3, [pc, #264]	; (800c080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bf76:	68db      	ldr	r3, [r3, #12]
 800bf78:	4a41      	ldr	r2, [pc, #260]	; (800c080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bf7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf7e:	60d3      	str	r3, [r2, #12]
 800bf80:	e011      	b.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bf8a:	d10c      	bne.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	3304      	adds	r3, #4
 800bf90:	2101      	movs	r1, #1
 800bf92:	4618      	mov	r0, r3
 800bf94:	f000 ff98 	bl	800cec8 <RCCEx_PLLSAI1_Config>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bf9c:	7cfb      	ldrb	r3, [r7, #19]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d001      	beq.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800bfa2:	7cfb      	ldrb	r3, [r7, #19]
 800bfa4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d01e      	beq.n	800bff0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bfb2:	4b33      	ldr	r3, [pc, #204]	; (800c080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bfb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfb8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfc2:	492f      	ldr	r1, [pc, #188]	; (800c080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bfd4:	d10c      	bne.n	800bff0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	3304      	adds	r3, #4
 800bfda:	2102      	movs	r1, #2
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f000 ff73 	bl	800cec8 <RCCEx_PLLSAI1_Config>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bfe6:	7cfb      	ldrb	r3, [r7, #19]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d001      	beq.n	800bff0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800bfec:	7cfb      	ldrb	r3, [r7, #19]
 800bfee:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d00b      	beq.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bffc:	4b20      	ldr	r3, [pc, #128]	; (800c080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bffe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c002:	f023 0204 	bic.w	r2, r3, #4
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c00c:	491c      	ldr	r1, [pc, #112]	; (800c080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c00e:	4313      	orrs	r3, r2
 800c010:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d00b      	beq.n	800c038 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800c020:	4b17      	ldr	r3, [pc, #92]	; (800c080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c022:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c026:	f023 0218 	bic.w	r2, r3, #24
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c030:	4913      	ldr	r1, [pc, #76]	; (800c080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c032:	4313      	orrs	r3, r2
 800c034:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c040:	2b00      	cmp	r3, #0
 800c042:	d017      	beq.n	800c074 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800c044:	4b0e      	ldr	r3, [pc, #56]	; (800c080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c046:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c04a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c054:	490a      	ldr	r1, [pc, #40]	; (800c080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c056:	4313      	orrs	r3, r2
 800c058:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c062:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c066:	d105      	bne.n	800c074 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c068:	4b05      	ldr	r3, [pc, #20]	; (800c080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c06a:	68db      	ldr	r3, [r3, #12]
 800c06c:	4a04      	ldr	r2, [pc, #16]	; (800c080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c06e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c072:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800c074:	7cbb      	ldrb	r3, [r7, #18]
}
 800c076:	4618      	mov	r0, r3
 800c078:	3718      	adds	r7, #24
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	bf00      	nop
 800c080:	40021000 	.word	0x40021000

0800c084 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b088      	sub	sp, #32
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800c08c:	2300      	movs	r3, #0
 800c08e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c096:	d13e      	bne.n	800c116 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800c098:	4bb6      	ldr	r3, [pc, #728]	; (800c374 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c09a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c09e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c0a2:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c0aa:	d028      	beq.n	800c0fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c0b2:	f200 86f4 	bhi.w	800ce9e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0bc:	d005      	beq.n	800c0ca <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0c4:	d00e      	beq.n	800c0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800c0c6:	f000 beea 	b.w	800ce9e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c0ca:	4baa      	ldr	r3, [pc, #680]	; (800c374 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c0cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0d0:	f003 0302 	and.w	r3, r3, #2
 800c0d4:	2b02      	cmp	r3, #2
 800c0d6:	f040 86e4 	bne.w	800cea2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 800c0da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c0de:	61fb      	str	r3, [r7, #28]
      break;
 800c0e0:	f000 bedf 	b.w	800cea2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800c0e4:	4ba3      	ldr	r3, [pc, #652]	; (800c374 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c0e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c0ea:	f003 0302 	and.w	r3, r3, #2
 800c0ee:	2b02      	cmp	r3, #2
 800c0f0:	f040 86d9 	bne.w	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 800c0f4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c0f8:	61fb      	str	r3, [r7, #28]
      break;
 800c0fa:	f000 bed4 	b.w	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c0fe:	4b9d      	ldr	r3, [pc, #628]	; (800c374 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c106:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c10a:	f040 86ce 	bne.w	800ceaa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 800c10e:	4b9a      	ldr	r3, [pc, #616]	; (800c378 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800c110:	61fb      	str	r3, [r7, #28]
      break;
 800c112:	f000 beca 	b.w	800ceaa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c116:	4b97      	ldr	r3, [pc, #604]	; (800c374 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c118:	68db      	ldr	r3, [r3, #12]
 800c11a:	f003 0303 	and.w	r3, r3, #3
 800c11e:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	2b03      	cmp	r3, #3
 800c124:	d036      	beq.n	800c194 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	2b03      	cmp	r3, #3
 800c12a:	d840      	bhi.n	800c1ae <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	2b01      	cmp	r3, #1
 800c130:	d003      	beq.n	800c13a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	2b02      	cmp	r3, #2
 800c136:	d020      	beq.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800c138:	e039      	b.n	800c1ae <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800c13a:	4b8e      	ldr	r3, [pc, #568]	; (800c374 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f003 0302 	and.w	r3, r3, #2
 800c142:	2b02      	cmp	r3, #2
 800c144:	d116      	bne.n	800c174 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800c146:	4b8b      	ldr	r3, [pc, #556]	; (800c374 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f003 0308 	and.w	r3, r3, #8
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d005      	beq.n	800c15e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800c152:	4b88      	ldr	r3, [pc, #544]	; (800c374 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	091b      	lsrs	r3, r3, #4
 800c158:	f003 030f 	and.w	r3, r3, #15
 800c15c:	e005      	b.n	800c16a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800c15e:	4b85      	ldr	r3, [pc, #532]	; (800c374 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c164:	0a1b      	lsrs	r3, r3, #8
 800c166:	f003 030f 	and.w	r3, r3, #15
 800c16a:	4a84      	ldr	r2, [pc, #528]	; (800c37c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800c16c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c170:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800c172:	e01f      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800c174:	2300      	movs	r3, #0
 800c176:	61bb      	str	r3, [r7, #24]
      break;
 800c178:	e01c      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c17a:	4b7e      	ldr	r3, [pc, #504]	; (800c374 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c186:	d102      	bne.n	800c18e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800c188:	4b7d      	ldr	r3, [pc, #500]	; (800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800c18a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800c18c:	e012      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800c18e:	2300      	movs	r3, #0
 800c190:	61bb      	str	r3, [r7, #24]
      break;
 800c192:	e00f      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c194:	4b77      	ldr	r3, [pc, #476]	; (800c374 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c19c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1a0:	d102      	bne.n	800c1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800c1a2:	4b78      	ldr	r3, [pc, #480]	; (800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800c1a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800c1a6:	e005      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	61bb      	str	r3, [r7, #24]
      break;
 800c1ac:	e002      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	61bb      	str	r3, [r7, #24]
      break;
 800c1b2:	bf00      	nop
    }

    switch(PeriphClk)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c1ba:	f000 8606 	beq.w	800cdca <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c1c4:	f200 8673 	bhi.w	800ceae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c1ce:	f000 8469 	beq.w	800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c1d8:	f200 8669 	bhi.w	800ceae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1e2:	f000 8531 	beq.w	800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1ec:	f200 865f 	bhi.w	800ceae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c1f6:	f000 8187 	beq.w	800c508 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c200:	f200 8655 	bhi.w	800ceae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c20a:	f000 80cd 	beq.w	800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c214:	f200 864b 	bhi.w	800ceae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c21e:	f000 8430 	beq.w	800ca82 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c228:	f200 8641 	bhi.w	800ceae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c232:	f000 83e4 	beq.w	800c9fe <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c23c:	f200 8637 	bhi.w	800ceae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c246:	f000 80af 	beq.w	800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c250:	f200 862d 	bhi.w	800ceae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c25a:	f000 809d 	beq.w	800c398 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c264:	f200 8623 	bhi.w	800ceae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c26e:	f000 808b 	beq.w	800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c278:	f200 8619 	bhi.w	800ceae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c282:	f000 8554 	beq.w	800cd2e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c28c:	f200 860f 	bhi.w	800ceae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c296:	f000 8500 	beq.w	800cc9a <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c2a0:	f200 8605 	bhi.w	800ceae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2aa:	f000 84a1 	beq.w	800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2b4:	f200 85fb 	bhi.w	800ceae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2b80      	cmp	r3, #128	; 0x80
 800c2bc:	f000 846c 	beq.w	800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2b80      	cmp	r3, #128	; 0x80
 800c2c4:	f200 85f3 	bhi.w	800ceae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2b20      	cmp	r3, #32
 800c2cc:	d84c      	bhi.n	800c368 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	f000 85ec 	beq.w	800ceae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	3b01      	subs	r3, #1
 800c2da:	2b1f      	cmp	r3, #31
 800c2dc:	f200 85e7 	bhi.w	800ceae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c2e0:	a201      	add	r2, pc, #4	; (adr r2, 800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800c2e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e6:	bf00      	nop
 800c2e8:	0800c6fd 	.word	0x0800c6fd
 800c2ec:	0800c76b 	.word	0x0800c76b
 800c2f0:	0800ceaf 	.word	0x0800ceaf
 800c2f4:	0800c7ff 	.word	0x0800c7ff
 800c2f8:	0800ceaf 	.word	0x0800ceaf
 800c2fc:	0800ceaf 	.word	0x0800ceaf
 800c300:	0800ceaf 	.word	0x0800ceaf
 800c304:	0800c877 	.word	0x0800c877
 800c308:	0800ceaf 	.word	0x0800ceaf
 800c30c:	0800ceaf 	.word	0x0800ceaf
 800c310:	0800ceaf 	.word	0x0800ceaf
 800c314:	0800ceaf 	.word	0x0800ceaf
 800c318:	0800ceaf 	.word	0x0800ceaf
 800c31c:	0800ceaf 	.word	0x0800ceaf
 800c320:	0800ceaf 	.word	0x0800ceaf
 800c324:	0800c8fb 	.word	0x0800c8fb
 800c328:	0800ceaf 	.word	0x0800ceaf
 800c32c:	0800ceaf 	.word	0x0800ceaf
 800c330:	0800ceaf 	.word	0x0800ceaf
 800c334:	0800ceaf 	.word	0x0800ceaf
 800c338:	0800ceaf 	.word	0x0800ceaf
 800c33c:	0800ceaf 	.word	0x0800ceaf
 800c340:	0800ceaf 	.word	0x0800ceaf
 800c344:	0800ceaf 	.word	0x0800ceaf
 800c348:	0800ceaf 	.word	0x0800ceaf
 800c34c:	0800ceaf 	.word	0x0800ceaf
 800c350:	0800ceaf 	.word	0x0800ceaf
 800c354:	0800ceaf 	.word	0x0800ceaf
 800c358:	0800ceaf 	.word	0x0800ceaf
 800c35c:	0800ceaf 	.word	0x0800ceaf
 800c360:	0800ceaf 	.word	0x0800ceaf
 800c364:	0800c97d 	.word	0x0800c97d
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2b40      	cmp	r3, #64	; 0x40
 800c36c:	f000 83e8 	beq.w	800cb40 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800c370:	f000 bd9d 	b.w	800ceae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800c374:	40021000 	.word	0x40021000
 800c378:	0003d090 	.word	0x0003d090
 800c37c:	0801d10c 	.word	0x0801d10c
 800c380:	00f42400 	.word	0x00f42400
 800c384:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800c388:	69b9      	ldr	r1, [r7, #24]
 800c38a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c38e:	f000 ff83 	bl	800d298 <RCCEx_GetSAIxPeriphCLKFreq>
 800c392:	61f8      	str	r0, [r7, #28]
      break;
 800c394:	f000 bd8e 	b.w	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800c398:	69b9      	ldr	r1, [r7, #24]
 800c39a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c39e:	f000 ff7b 	bl	800d298 <RCCEx_GetSAIxPeriphCLKFreq>
 800c3a2:	61f8      	str	r0, [r7, #28]
      break;
 800c3a4:	f000 bd86 	b.w	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800c3a8:	4b9a      	ldr	r3, [pc, #616]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c3aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3ae:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800c3b2:	60fb      	str	r3, [r7, #12]
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c3ba:	d015      	beq.n	800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c3c2:	f200 8092 	bhi.w	800c4ea <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3cc:	d029      	beq.n	800c422 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3d4:	f200 8089 	bhi.w	800c4ea <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d07b      	beq.n	800c4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c3e4:	d04a      	beq.n	800c47c <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 800c3e6:	e080      	b.n	800c4ea <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800c3e8:	4b8a      	ldr	r3, [pc, #552]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f003 0302 	and.w	r3, r3, #2
 800c3f0:	2b02      	cmp	r3, #2
 800c3f2:	d17d      	bne.n	800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800c3f4:	4b87      	ldr	r3, [pc, #540]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f003 0308 	and.w	r3, r3, #8
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d005      	beq.n	800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 800c400:	4b84      	ldr	r3, [pc, #528]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	091b      	lsrs	r3, r3, #4
 800c406:	f003 030f 	and.w	r3, r3, #15
 800c40a:	e005      	b.n	800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 800c40c:	4b81      	ldr	r3, [pc, #516]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c40e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c412:	0a1b      	lsrs	r3, r3, #8
 800c414:	f003 030f 	and.w	r3, r3, #15
 800c418:	4a7f      	ldr	r2, [pc, #508]	; (800c618 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c41a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c41e:	61fb      	str	r3, [r7, #28]
          break;
 800c420:	e066      	b.n	800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800c422:	4b7c      	ldr	r3, [pc, #496]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c42a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c42e:	d162      	bne.n	800c4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800c430:	4b78      	ldr	r3, [pc, #480]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c432:	68db      	ldr	r3, [r3, #12]
 800c434:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c438:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c43c:	d15b      	bne.n	800c4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800c43e:	4b75      	ldr	r3, [pc, #468]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c440:	68db      	ldr	r3, [r3, #12]
 800c442:	0a1b      	lsrs	r3, r3, #8
 800c444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c448:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	68ba      	ldr	r2, [r7, #8]
 800c44e:	fb03 f202 	mul.w	r2, r3, r2
 800c452:	4b70      	ldr	r3, [pc, #448]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c454:	68db      	ldr	r3, [r3, #12]
 800c456:	091b      	lsrs	r3, r3, #4
 800c458:	f003 030f 	and.w	r3, r3, #15
 800c45c:	3301      	adds	r3, #1
 800c45e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c462:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800c464:	4b6b      	ldr	r3, [pc, #428]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	0d5b      	lsrs	r3, r3, #21
 800c46a:	f003 0303 	and.w	r3, r3, #3
 800c46e:	3301      	adds	r3, #1
 800c470:	005b      	lsls	r3, r3, #1
 800c472:	69ba      	ldr	r2, [r7, #24]
 800c474:	fbb2 f3f3 	udiv	r3, r2, r3
 800c478:	61fb      	str	r3, [r7, #28]
          break;
 800c47a:	e03c      	b.n	800c4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800c47c:	4b65      	ldr	r3, [pc, #404]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c484:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c488:	d138      	bne.n	800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800c48a:	4b62      	ldr	r3, [pc, #392]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c48c:	691b      	ldr	r3, [r3, #16]
 800c48e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c496:	d131      	bne.n	800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800c498:	4b5e      	ldr	r3, [pc, #376]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c49a:	691b      	ldr	r3, [r3, #16]
 800c49c:	0a1b      	lsrs	r3, r3, #8
 800c49e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4a2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800c4a4:	69bb      	ldr	r3, [r7, #24]
 800c4a6:	68ba      	ldr	r2, [r7, #8]
 800c4a8:	fb03 f202 	mul.w	r2, r3, r2
 800c4ac:	4b59      	ldr	r3, [pc, #356]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c4ae:	691b      	ldr	r3, [r3, #16]
 800c4b0:	091b      	lsrs	r3, r3, #4
 800c4b2:	f003 030f 	and.w	r3, r3, #15
 800c4b6:	3301      	adds	r3, #1
 800c4b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4bc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800c4be:	4b55      	ldr	r3, [pc, #340]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c4c0:	691b      	ldr	r3, [r3, #16]
 800c4c2:	0d5b      	lsrs	r3, r3, #21
 800c4c4:	f003 0303 	and.w	r3, r3, #3
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	005b      	lsls	r3, r3, #1
 800c4cc:	69ba      	ldr	r2, [r7, #24]
 800c4ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4d2:	61fb      	str	r3, [r7, #28]
          break;
 800c4d4:	e012      	b.n	800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800c4d6:	4b4f      	ldr	r3, [pc, #316]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c4d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c4dc:	f003 0302 	and.w	r3, r3, #2
 800c4e0:	2b02      	cmp	r3, #2
 800c4e2:	d10e      	bne.n	800c502 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 800c4e4:	4b4d      	ldr	r3, [pc, #308]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800c4e6:	61fb      	str	r3, [r7, #28]
          break;
 800c4e8:	e00b      	b.n	800c502 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800c4ea:	bf00      	nop
 800c4ec:	f000 bce2 	b.w	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c4f0:	bf00      	nop
 800c4f2:	f000 bcdf 	b.w	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c4f6:	bf00      	nop
 800c4f8:	f000 bcdc 	b.w	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c4fc:	bf00      	nop
 800c4fe:	f000 bcd9 	b.w	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c502:	bf00      	nop
        break;
 800c504:	f000 bcd6 	b.w	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 800c508:	4b42      	ldr	r3, [pc, #264]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c50a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c50e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c512:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c516:	d13d      	bne.n	800c594 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800c518:	4b3e      	ldr	r3, [pc, #248]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c520:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c524:	f040 84c5 	bne.w	800ceb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800c528:	4b3a      	ldr	r3, [pc, #232]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c52a:	68db      	ldr	r3, [r3, #12]
 800c52c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c534:	f040 84bd 	bne.w	800ceb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800c538:	4b36      	ldr	r3, [pc, #216]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c53a:	68db      	ldr	r3, [r3, #12]
 800c53c:	0a1b      	lsrs	r3, r3, #8
 800c53e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c542:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c544:	69bb      	ldr	r3, [r7, #24]
 800c546:	68ba      	ldr	r2, [r7, #8]
 800c548:	fb03 f202 	mul.w	r2, r3, r2
 800c54c:	4b31      	ldr	r3, [pc, #196]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c54e:	68db      	ldr	r3, [r3, #12]
 800c550:	091b      	lsrs	r3, r3, #4
 800c552:	f003 030f 	and.w	r3, r3, #15
 800c556:	3301      	adds	r3, #1
 800c558:	fbb2 f3f3 	udiv	r3, r2, r3
 800c55c:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800c55e:	4b2d      	ldr	r3, [pc, #180]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c560:	68db      	ldr	r3, [r3, #12]
 800c562:	0edb      	lsrs	r3, r3, #27
 800c564:	f003 031f 	and.w	r3, r3, #31
 800c568:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d10a      	bne.n	800c586 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800c570:	4b28      	ldr	r3, [pc, #160]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c572:	68db      	ldr	r3, [r3, #12]
 800c574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d002      	beq.n	800c582 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 800c57c:	2311      	movs	r3, #17
 800c57e:	617b      	str	r3, [r7, #20]
 800c580:	e001      	b.n	800c586 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 800c582:	2307      	movs	r3, #7
 800c584:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800c586:	69ba      	ldr	r2, [r7, #24]
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c58e:	61fb      	str	r3, [r7, #28]
      break;
 800c590:	f000 bc8f 	b.w	800ceb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800c594:	4b1f      	ldr	r3, [pc, #124]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c59a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800c59e:	60fb      	str	r3, [r7, #12]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c5a6:	d016      	beq.n	800c5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c5ae:	f200 809b 	bhi.w	800c6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5b8:	d032      	beq.n	800c620 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5c0:	f200 8092 	bhi.w	800c6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	f000 8084 	beq.w	800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c5d2:	d052      	beq.n	800c67a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 800c5d4:	e088      	b.n	800c6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800c5d6:	4b0f      	ldr	r3, [pc, #60]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f003 0302 	and.w	r3, r3, #2
 800c5de:	2b02      	cmp	r3, #2
 800c5e0:	f040 8084 	bne.w	800c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800c5e4:	4b0b      	ldr	r3, [pc, #44]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f003 0308 	and.w	r3, r3, #8
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d005      	beq.n	800c5fc <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800c5f0:	4b08      	ldr	r3, [pc, #32]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	091b      	lsrs	r3, r3, #4
 800c5f6:	f003 030f 	and.w	r3, r3, #15
 800c5fa:	e005      	b.n	800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 800c5fc:	4b05      	ldr	r3, [pc, #20]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c5fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c602:	0a1b      	lsrs	r3, r3, #8
 800c604:	f003 030f 	and.w	r3, r3, #15
 800c608:	4a03      	ldr	r2, [pc, #12]	; (800c618 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c60a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c60e:	61fb      	str	r3, [r7, #28]
          break;
 800c610:	e06c      	b.n	800c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800c612:	bf00      	nop
 800c614:	40021000 	.word	0x40021000
 800c618:	0801d10c 	.word	0x0801d10c
 800c61c:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800c620:	4ba5      	ldr	r3, [pc, #660]	; (800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c628:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c62c:	d160      	bne.n	800c6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800c62e:	4ba2      	ldr	r3, [pc, #648]	; (800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c630:	68db      	ldr	r3, [r3, #12]
 800c632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c636:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c63a:	d159      	bne.n	800c6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800c63c:	4b9e      	ldr	r3, [pc, #632]	; (800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c63e:	68db      	ldr	r3, [r3, #12]
 800c640:	0a1b      	lsrs	r3, r3, #8
 800c642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c646:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c648:	69bb      	ldr	r3, [r7, #24]
 800c64a:	68ba      	ldr	r2, [r7, #8]
 800c64c:	fb03 f202 	mul.w	r2, r3, r2
 800c650:	4b99      	ldr	r3, [pc, #612]	; (800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c652:	68db      	ldr	r3, [r3, #12]
 800c654:	091b      	lsrs	r3, r3, #4
 800c656:	f003 030f 	and.w	r3, r3, #15
 800c65a:	3301      	adds	r3, #1
 800c65c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c660:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800c662:	4b95      	ldr	r3, [pc, #596]	; (800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c664:	68db      	ldr	r3, [r3, #12]
 800c666:	0d5b      	lsrs	r3, r3, #21
 800c668:	f003 0303 	and.w	r3, r3, #3
 800c66c:	3301      	adds	r3, #1
 800c66e:	005b      	lsls	r3, r3, #1
 800c670:	69ba      	ldr	r2, [r7, #24]
 800c672:	fbb2 f3f3 	udiv	r3, r2, r3
 800c676:	61fb      	str	r3, [r7, #28]
          break;
 800c678:	e03a      	b.n	800c6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800c67a:	4b8f      	ldr	r3, [pc, #572]	; (800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c682:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c686:	d135      	bne.n	800c6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800c688:	4b8b      	ldr	r3, [pc, #556]	; (800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c68a:	691b      	ldr	r3, [r3, #16]
 800c68c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c690:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c694:	d12e      	bne.n	800c6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800c696:	4b88      	ldr	r3, [pc, #544]	; (800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c698:	691b      	ldr	r3, [r3, #16]
 800c69a:	0a1b      	lsrs	r3, r3, #8
 800c69c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6a0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800c6a2:	69bb      	ldr	r3, [r7, #24]
 800c6a4:	68ba      	ldr	r2, [r7, #8]
 800c6a6:	fb03 f202 	mul.w	r2, r3, r2
 800c6aa:	4b83      	ldr	r3, [pc, #524]	; (800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c6ac:	691b      	ldr	r3, [r3, #16]
 800c6ae:	091b      	lsrs	r3, r3, #4
 800c6b0:	f003 030f 	and.w	r3, r3, #15
 800c6b4:	3301      	adds	r3, #1
 800c6b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6ba:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800c6bc:	4b7e      	ldr	r3, [pc, #504]	; (800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c6be:	691b      	ldr	r3, [r3, #16]
 800c6c0:	0d5b      	lsrs	r3, r3, #21
 800c6c2:	f003 0303 	and.w	r3, r3, #3
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	005b      	lsls	r3, r3, #1
 800c6ca:	69ba      	ldr	r2, [r7, #24]
 800c6cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6d0:	61fb      	str	r3, [r7, #28]
          break;
 800c6d2:	e00f      	b.n	800c6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800c6d4:	4b78      	ldr	r3, [pc, #480]	; (800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c6d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c6da:	f003 0302 	and.w	r3, r3, #2
 800c6de:	2b02      	cmp	r3, #2
 800c6e0:	d10a      	bne.n	800c6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 800c6e2:	4b76      	ldr	r3, [pc, #472]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800c6e4:	61fb      	str	r3, [r7, #28]
          break;
 800c6e6:	e007      	b.n	800c6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 800c6e8:	bf00      	nop
 800c6ea:	e3e2      	b.n	800ceb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800c6ec:	bf00      	nop
 800c6ee:	e3e0      	b.n	800ceb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800c6f0:	bf00      	nop
 800c6f2:	e3de      	b.n	800ceb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800c6f4:	bf00      	nop
 800c6f6:	e3dc      	b.n	800ceb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800c6f8:	bf00      	nop
      break;
 800c6fa:	e3da      	b.n	800ceb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800c6fc:	4b6e      	ldr	r3, [pc, #440]	; (800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c6fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c702:	f003 0303 	and.w	r3, r3, #3
 800c706:	60fb      	str	r3, [r7, #12]
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2b03      	cmp	r3, #3
 800c70c:	d827      	bhi.n	800c75e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800c70e:	a201      	add	r2, pc, #4	; (adr r2, 800c714 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 800c710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c714:	0800c725 	.word	0x0800c725
 800c718:	0800c72d 	.word	0x0800c72d
 800c71c:	0800c735 	.word	0x0800c735
 800c720:	0800c749 	.word	0x0800c749
          frequency = HAL_RCC_GetPCLK2Freq();
 800c724:	f7ff f87c 	bl	800b820 <HAL_RCC_GetPCLK2Freq>
 800c728:	61f8      	str	r0, [r7, #28]
          break;
 800c72a:	e01d      	b.n	800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 800c72c:	f7fe ffca 	bl	800b6c4 <HAL_RCC_GetSysClockFreq>
 800c730:	61f8      	str	r0, [r7, #28]
          break;
 800c732:	e019      	b.n	800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c734:	4b60      	ldr	r3, [pc, #384]	; (800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c73c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c740:	d10f      	bne.n	800c762 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 800c742:	4b5f      	ldr	r3, [pc, #380]	; (800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c744:	61fb      	str	r3, [r7, #28]
          break;
 800c746:	e00c      	b.n	800c762 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c748:	4b5b      	ldr	r3, [pc, #364]	; (800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c74a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c74e:	f003 0302 	and.w	r3, r3, #2
 800c752:	2b02      	cmp	r3, #2
 800c754:	d107      	bne.n	800c766 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 800c756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c75a:	61fb      	str	r3, [r7, #28]
          break;
 800c75c:	e003      	b.n	800c766 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 800c75e:	bf00      	nop
 800c760:	e3a8      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c762:	bf00      	nop
 800c764:	e3a6      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c766:	bf00      	nop
        break;
 800c768:	e3a4      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800c76a:	4b53      	ldr	r3, [pc, #332]	; (800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c76c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c770:	f003 030c 	and.w	r3, r3, #12
 800c774:	60fb      	str	r3, [r7, #12]
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	2b0c      	cmp	r3, #12
 800c77a:	d83a      	bhi.n	800c7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c77c:	a201      	add	r2, pc, #4	; (adr r2, 800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 800c77e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c782:	bf00      	nop
 800c784:	0800c7b9 	.word	0x0800c7b9
 800c788:	0800c7f3 	.word	0x0800c7f3
 800c78c:	0800c7f3 	.word	0x0800c7f3
 800c790:	0800c7f3 	.word	0x0800c7f3
 800c794:	0800c7c1 	.word	0x0800c7c1
 800c798:	0800c7f3 	.word	0x0800c7f3
 800c79c:	0800c7f3 	.word	0x0800c7f3
 800c7a0:	0800c7f3 	.word	0x0800c7f3
 800c7a4:	0800c7c9 	.word	0x0800c7c9
 800c7a8:	0800c7f3 	.word	0x0800c7f3
 800c7ac:	0800c7f3 	.word	0x0800c7f3
 800c7b0:	0800c7f3 	.word	0x0800c7f3
 800c7b4:	0800c7dd 	.word	0x0800c7dd
          frequency = HAL_RCC_GetPCLK1Freq();
 800c7b8:	f7ff f81c 	bl	800b7f4 <HAL_RCC_GetPCLK1Freq>
 800c7bc:	61f8      	str	r0, [r7, #28]
          break;
 800c7be:	e01d      	b.n	800c7fc <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 800c7c0:	f7fe ff80 	bl	800b6c4 <HAL_RCC_GetSysClockFreq>
 800c7c4:	61f8      	str	r0, [r7, #28]
          break;
 800c7c6:	e019      	b.n	800c7fc <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c7c8:	4b3b      	ldr	r3, [pc, #236]	; (800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c7d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7d4:	d10f      	bne.n	800c7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 800c7d6:	4b3a      	ldr	r3, [pc, #232]	; (800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c7d8:	61fb      	str	r3, [r7, #28]
          break;
 800c7da:	e00c      	b.n	800c7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c7dc:	4b36      	ldr	r3, [pc, #216]	; (800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c7de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7e2:	f003 0302 	and.w	r3, r3, #2
 800c7e6:	2b02      	cmp	r3, #2
 800c7e8:	d107      	bne.n	800c7fa <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 800c7ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c7ee:	61fb      	str	r3, [r7, #28]
          break;
 800c7f0:	e003      	b.n	800c7fa <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 800c7f2:	bf00      	nop
 800c7f4:	e35e      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c7f6:	bf00      	nop
 800c7f8:	e35c      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c7fa:	bf00      	nop
        break;
 800c7fc:	e35a      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800c7fe:	4b2e      	ldr	r3, [pc, #184]	; (800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c804:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c808:	60fb      	str	r3, [r7, #12]
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2b30      	cmp	r3, #48	; 0x30
 800c80e:	d021      	beq.n	800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	2b30      	cmp	r3, #48	; 0x30
 800c814:	d829      	bhi.n	800c86a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	2b20      	cmp	r3, #32
 800c81a:	d011      	beq.n	800c840 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	2b20      	cmp	r3, #32
 800c820:	d823      	bhi.n	800c86a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d003      	beq.n	800c830 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2b10      	cmp	r3, #16
 800c82c:	d004      	beq.n	800c838 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800c82e:	e01c      	b.n	800c86a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c830:	f7fe ffe0 	bl	800b7f4 <HAL_RCC_GetPCLK1Freq>
 800c834:	61f8      	str	r0, [r7, #28]
          break;
 800c836:	e01d      	b.n	800c874 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800c838:	f7fe ff44 	bl	800b6c4 <HAL_RCC_GetSysClockFreq>
 800c83c:	61f8      	str	r0, [r7, #28]
          break;
 800c83e:	e019      	b.n	800c874 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c840:	4b1d      	ldr	r3, [pc, #116]	; (800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c84c:	d10f      	bne.n	800c86e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 800c84e:	4b1c      	ldr	r3, [pc, #112]	; (800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c850:	61fb      	str	r3, [r7, #28]
          break;
 800c852:	e00c      	b.n	800c86e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c854:	4b18      	ldr	r3, [pc, #96]	; (800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c85a:	f003 0302 	and.w	r3, r3, #2
 800c85e:	2b02      	cmp	r3, #2
 800c860:	d107      	bne.n	800c872 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 800c862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c866:	61fb      	str	r3, [r7, #28]
          break;
 800c868:	e003      	b.n	800c872 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 800c86a:	bf00      	nop
 800c86c:	e322      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c86e:	bf00      	nop
 800c870:	e320      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c872:	bf00      	nop
        break;
 800c874:	e31e      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800c876:	4b10      	ldr	r3, [pc, #64]	; (800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c87c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c880:	60fb      	str	r3, [r7, #12]
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2bc0      	cmp	r3, #192	; 0xc0
 800c886:	d027      	beq.n	800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	2bc0      	cmp	r3, #192	; 0xc0
 800c88c:	d82f      	bhi.n	800c8ee <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	2b80      	cmp	r3, #128	; 0x80
 800c892:	d017      	beq.n	800c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	2b80      	cmp	r3, #128	; 0x80
 800c898:	d829      	bhi.n	800c8ee <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d003      	beq.n	800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	2b40      	cmp	r3, #64	; 0x40
 800c8a4:	d004      	beq.n	800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 800c8a6:	e022      	b.n	800c8ee <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c8a8:	f7fe ffa4 	bl	800b7f4 <HAL_RCC_GetPCLK1Freq>
 800c8ac:	61f8      	str	r0, [r7, #28]
          break;
 800c8ae:	e023      	b.n	800c8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 800c8b0:	f7fe ff08 	bl	800b6c4 <HAL_RCC_GetSysClockFreq>
 800c8b4:	61f8      	str	r0, [r7, #28]
          break;
 800c8b6:	e01f      	b.n	800c8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 800c8b8:	40021000 	.word	0x40021000
 800c8bc:	02dc6c00 	.word	0x02dc6c00
 800c8c0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c8c4:	4b9b      	ldr	r3, [pc, #620]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c8cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c8d0:	d10f      	bne.n	800c8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 800c8d2:	4b99      	ldr	r3, [pc, #612]	; (800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800c8d4:	61fb      	str	r3, [r7, #28]
          break;
 800c8d6:	e00c      	b.n	800c8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c8d8:	4b96      	ldr	r3, [pc, #600]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c8da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8de:	f003 0302 	and.w	r3, r3, #2
 800c8e2:	2b02      	cmp	r3, #2
 800c8e4:	d107      	bne.n	800c8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 800c8e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c8ea:	61fb      	str	r3, [r7, #28]
          break;
 800c8ec:	e003      	b.n	800c8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 800c8ee:	bf00      	nop
 800c8f0:	e2e0      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c8f2:	bf00      	nop
 800c8f4:	e2de      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c8f6:	bf00      	nop
        break;
 800c8f8:	e2dc      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800c8fa:	4b8e      	ldr	r3, [pc, #568]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c8fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c904:	60fb      	str	r3, [r7, #12]
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c90c:	d025      	beq.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c914:	d82c      	bhi.n	800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c91c:	d013      	beq.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c924:	d824      	bhi.n	800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d004      	beq.n	800c936 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c932:	d004      	beq.n	800c93e <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 800c934:	e01c      	b.n	800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c936:	f7fe ff5d 	bl	800b7f4 <HAL_RCC_GetPCLK1Freq>
 800c93a:	61f8      	str	r0, [r7, #28]
          break;
 800c93c:	e01d      	b.n	800c97a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800c93e:	f7fe fec1 	bl	800b6c4 <HAL_RCC_GetSysClockFreq>
 800c942:	61f8      	str	r0, [r7, #28]
          break;
 800c944:	e019      	b.n	800c97a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c946:	4b7b      	ldr	r3, [pc, #492]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c94e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c952:	d10f      	bne.n	800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 800c954:	4b78      	ldr	r3, [pc, #480]	; (800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800c956:	61fb      	str	r3, [r7, #28]
          break;
 800c958:	e00c      	b.n	800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c95a:	4b76      	ldr	r3, [pc, #472]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c95c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c960:	f003 0302 	and.w	r3, r3, #2
 800c964:	2b02      	cmp	r3, #2
 800c966:	d107      	bne.n	800c978 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 800c968:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c96c:	61fb      	str	r3, [r7, #28]
          break;
 800c96e:	e003      	b.n	800c978 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 800c970:	bf00      	nop
 800c972:	e29f      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c974:	bf00      	nop
 800c976:	e29d      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c978:	bf00      	nop
        break;
 800c97a:	e29b      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800c97c:	4b6d      	ldr	r3, [pc, #436]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c97e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c982:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c986:	60fb      	str	r3, [r7, #12]
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c98e:	d025      	beq.n	800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c996:	d82c      	bhi.n	800c9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c99e:	d013      	beq.n	800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c9a6:	d824      	bhi.n	800c9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d004      	beq.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c9b4:	d004      	beq.n	800c9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 800c9b6:	e01c      	b.n	800c9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c9b8:	f7fe ff1c 	bl	800b7f4 <HAL_RCC_GetPCLK1Freq>
 800c9bc:	61f8      	str	r0, [r7, #28]
          break;
 800c9be:	e01d      	b.n	800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 800c9c0:	f7fe fe80 	bl	800b6c4 <HAL_RCC_GetSysClockFreq>
 800c9c4:	61f8      	str	r0, [r7, #28]
          break;
 800c9c6:	e019      	b.n	800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c9c8:	4b5a      	ldr	r3, [pc, #360]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c9d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c9d4:	d10f      	bne.n	800c9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 800c9d6:	4b58      	ldr	r3, [pc, #352]	; (800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800c9d8:	61fb      	str	r3, [r7, #28]
          break;
 800c9da:	e00c      	b.n	800c9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c9dc:	4b55      	ldr	r3, [pc, #340]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c9de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9e2:	f003 0302 	and.w	r3, r3, #2
 800c9e6:	2b02      	cmp	r3, #2
 800c9e8:	d107      	bne.n	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 800c9ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c9ee:	61fb      	str	r3, [r7, #28]
          break;
 800c9f0:	e003      	b.n	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 800c9f2:	bf00      	nop
 800c9f4:	e25e      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c9f6:	bf00      	nop
 800c9f8:	e25c      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c9fa:	bf00      	nop
        break;
 800c9fc:	e25a      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c9fe:	4b4d      	ldr	r3, [pc, #308]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ca00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ca08:	60fb      	str	r3, [r7, #12]
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca10:	d007      	beq.n	800ca22 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ca18:	d12f      	bne.n	800ca7a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800ca1a:	f7fe fe53 	bl	800b6c4 <HAL_RCC_GetSysClockFreq>
 800ca1e:	61f8      	str	r0, [r7, #28]
          break;
 800ca20:	e02e      	b.n	800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800ca22:	4b44      	ldr	r3, [pc, #272]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca2e:	d126      	bne.n	800ca7e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800ca30:	4b40      	ldr	r3, [pc, #256]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ca32:	691b      	ldr	r3, [r3, #16]
 800ca34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d020      	beq.n	800ca7e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800ca3c:	4b3d      	ldr	r3, [pc, #244]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ca3e:	691b      	ldr	r3, [r3, #16]
 800ca40:	0a1b      	lsrs	r3, r3, #8
 800ca42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca46:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800ca48:	69bb      	ldr	r3, [r7, #24]
 800ca4a:	68ba      	ldr	r2, [r7, #8]
 800ca4c:	fb03 f202 	mul.w	r2, r3, r2
 800ca50:	4b38      	ldr	r3, [pc, #224]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ca52:	691b      	ldr	r3, [r3, #16]
 800ca54:	091b      	lsrs	r3, r3, #4
 800ca56:	f003 030f 	and.w	r3, r3, #15
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca60:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800ca62:	4b34      	ldr	r3, [pc, #208]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ca64:	691b      	ldr	r3, [r3, #16]
 800ca66:	0e5b      	lsrs	r3, r3, #25
 800ca68:	f003 0303 	and.w	r3, r3, #3
 800ca6c:	3301      	adds	r3, #1
 800ca6e:	005b      	lsls	r3, r3, #1
 800ca70:	69ba      	ldr	r2, [r7, #24]
 800ca72:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca76:	61fb      	str	r3, [r7, #28]
          break;
 800ca78:	e001      	b.n	800ca7e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 800ca7a:	bf00      	nop
 800ca7c:	e21a      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ca7e:	bf00      	nop
        break;
 800ca80:	e218      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800ca82:	4b2c      	ldr	r3, [pc, #176]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ca84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ca88:	f003 0304 	and.w	r3, r3, #4
 800ca8c:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d103      	bne.n	800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 800ca94:	f7fe fec4 	bl	800b820 <HAL_RCC_GetPCLK2Freq>
 800ca98:	61f8      	str	r0, [r7, #28]
        break;
 800ca9a:	e20b      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 800ca9c:	f7fe fe12 	bl	800b6c4 <HAL_RCC_GetSysClockFreq>
 800caa0:	61f8      	str	r0, [r7, #28]
        break;
 800caa2:	e207      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800caa4:	4b23      	ldr	r3, [pc, #140]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800caa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800caaa:	f003 0318 	and.w	r3, r3, #24
 800caae:	60fb      	str	r3, [r7, #12]
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2b10      	cmp	r3, #16
 800cab4:	d010      	beq.n	800cad8 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	2b10      	cmp	r3, #16
 800caba:	d834      	bhi.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d003      	beq.n	800caca <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	2b08      	cmp	r3, #8
 800cac6:	d024      	beq.n	800cb12 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 800cac8:	e02d      	b.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800caca:	69b9      	ldr	r1, [r7, #24]
 800cacc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800cad0:	f000 fbe2 	bl	800d298 <RCCEx_GetSAIxPeriphCLKFreq>
 800cad4:	61f8      	str	r0, [r7, #28]
          break;
 800cad6:	e02b      	b.n	800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800cad8:	4b16      	ldr	r3, [pc, #88]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	f003 0302 	and.w	r3, r3, #2
 800cae0:	2b02      	cmp	r3, #2
 800cae2:	d122      	bne.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800cae4:	4b13      	ldr	r3, [pc, #76]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f003 0308 	and.w	r3, r3, #8
 800caec:	2b00      	cmp	r3, #0
 800caee:	d005      	beq.n	800cafc <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800caf0:	4b10      	ldr	r3, [pc, #64]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	091b      	lsrs	r3, r3, #4
 800caf6:	f003 030f 	and.w	r3, r3, #15
 800cafa:	e005      	b.n	800cb08 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 800cafc:	4b0d      	ldr	r3, [pc, #52]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800cafe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cb02:	0a1b      	lsrs	r3, r3, #8
 800cb04:	f003 030f 	and.w	r3, r3, #15
 800cb08:	4a0c      	ldr	r2, [pc, #48]	; (800cb3c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800cb0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb0e:	61fb      	str	r3, [r7, #28]
          break;
 800cb10:	e00b      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cb12:	4b08      	ldr	r3, [pc, #32]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb1e:	d106      	bne.n	800cb2e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 800cb20:	4b05      	ldr	r3, [pc, #20]	; (800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800cb22:	61fb      	str	r3, [r7, #28]
          break;
 800cb24:	e003      	b.n	800cb2e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 800cb26:	bf00      	nop
 800cb28:	e1c4      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800cb2a:	bf00      	nop
 800cb2c:	e1c2      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800cb2e:	bf00      	nop
        break;
 800cb30:	e1c0      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800cb32:	bf00      	nop
 800cb34:	40021000 	.word	0x40021000
 800cb38:	00f42400 	.word	0x00f42400
 800cb3c:	0801d10c 	.word	0x0801d10c
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800cb40:	4b96      	ldr	r3, [pc, #600]	; (800cd9c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800cb42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb46:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800cb4a:	60fb      	str	r3, [r7, #12]
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb52:	d013      	beq.n	800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb5a:	d819      	bhi.n	800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d004      	beq.n	800cb6c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb68:	d004      	beq.n	800cb74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 800cb6a:	e011      	b.n	800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800cb6c:	f7fe fe42 	bl	800b7f4 <HAL_RCC_GetPCLK1Freq>
 800cb70:	61f8      	str	r0, [r7, #28]
          break;
 800cb72:	e010      	b.n	800cb96 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 800cb74:	f7fe fda6 	bl	800b6c4 <HAL_RCC_GetSysClockFreq>
 800cb78:	61f8      	str	r0, [r7, #28]
          break;
 800cb7a:	e00c      	b.n	800cb96 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cb7c:	4b87      	ldr	r3, [pc, #540]	; (800cd9c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb88:	d104      	bne.n	800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 800cb8a:	4b85      	ldr	r3, [pc, #532]	; (800cda0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800cb8c:	61fb      	str	r3, [r7, #28]
          break;
 800cb8e:	e001      	b.n	800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 800cb90:	bf00      	nop
 800cb92:	e18f      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800cb94:	bf00      	nop
        break;
 800cb96:	e18d      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800cb98:	4b80      	ldr	r3, [pc, #512]	; (800cd9c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800cb9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb9e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800cba2:	60fb      	str	r3, [r7, #12]
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cbaa:	d013      	beq.n	800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cbb2:	d819      	bhi.n	800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d004      	beq.n	800cbc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cbc0:	d004      	beq.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 800cbc2:	e011      	b.n	800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800cbc4:	f7fe fe16 	bl	800b7f4 <HAL_RCC_GetPCLK1Freq>
 800cbc8:	61f8      	str	r0, [r7, #28]
          break;
 800cbca:	e010      	b.n	800cbee <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 800cbcc:	f7fe fd7a 	bl	800b6c4 <HAL_RCC_GetSysClockFreq>
 800cbd0:	61f8      	str	r0, [r7, #28]
          break;
 800cbd2:	e00c      	b.n	800cbee <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cbd4:	4b71      	ldr	r3, [pc, #452]	; (800cd9c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cbdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cbe0:	d104      	bne.n	800cbec <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 800cbe2:	4b6f      	ldr	r3, [pc, #444]	; (800cda0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800cbe4:	61fb      	str	r3, [r7, #28]
          break;
 800cbe6:	e001      	b.n	800cbec <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 800cbe8:	bf00      	nop
 800cbea:	e163      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800cbec:	bf00      	nop
        break;
 800cbee:	e161      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800cbf0:	4b6a      	ldr	r3, [pc, #424]	; (800cd9c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800cbf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbf6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cbfa:	60fb      	str	r3, [r7, #12]
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc02:	d013      	beq.n	800cc2c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc0a:	d819      	bhi.n	800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d004      	beq.n	800cc1c <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc18:	d004      	beq.n	800cc24 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 800cc1a:	e011      	b.n	800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800cc1c:	f7fe fdea 	bl	800b7f4 <HAL_RCC_GetPCLK1Freq>
 800cc20:	61f8      	str	r0, [r7, #28]
          break;
 800cc22:	e010      	b.n	800cc46 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 800cc24:	f7fe fd4e 	bl	800b6c4 <HAL_RCC_GetSysClockFreq>
 800cc28:	61f8      	str	r0, [r7, #28]
          break;
 800cc2a:	e00c      	b.n	800cc46 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cc2c:	4b5b      	ldr	r3, [pc, #364]	; (800cd9c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cc34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc38:	d104      	bne.n	800cc44 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 800cc3a:	4b59      	ldr	r3, [pc, #356]	; (800cda0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800cc3c:	61fb      	str	r3, [r7, #28]
          break;
 800cc3e:	e001      	b.n	800cc44 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 800cc40:	bf00      	nop
 800cc42:	e137      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800cc44:	bf00      	nop
        break;
 800cc46:	e135      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800cc48:	4b54      	ldr	r3, [pc, #336]	; (800cd9c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800cc4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cc4e:	f003 0303 	and.w	r3, r3, #3
 800cc52:	60fb      	str	r3, [r7, #12]
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	2b02      	cmp	r3, #2
 800cc58:	d011      	beq.n	800cc7e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	2b02      	cmp	r3, #2
 800cc5e:	d818      	bhi.n	800cc92 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d003      	beq.n	800cc6e <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d004      	beq.n	800cc76 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 800cc6c:	e011      	b.n	800cc92 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800cc6e:	f7fe fdc1 	bl	800b7f4 <HAL_RCC_GetPCLK1Freq>
 800cc72:	61f8      	str	r0, [r7, #28]
          break;
 800cc74:	e010      	b.n	800cc98 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 800cc76:	f7fe fd25 	bl	800b6c4 <HAL_RCC_GetSysClockFreq>
 800cc7a:	61f8      	str	r0, [r7, #28]
          break;
 800cc7c:	e00c      	b.n	800cc98 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cc7e:	4b47      	ldr	r3, [pc, #284]	; (800cd9c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cc86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc8a:	d104      	bne.n	800cc96 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 800cc8c:	4b44      	ldr	r3, [pc, #272]	; (800cda0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800cc8e:	61fb      	str	r3, [r7, #28]
          break;
 800cc90:	e001      	b.n	800cc96 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 800cc92:	bf00      	nop
 800cc94:	e10e      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800cc96:	bf00      	nop
        break;
 800cc98:	e10c      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800cc9a:	4b40      	ldr	r3, [pc, #256]	; (800cd9c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800cc9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cca0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800cca4:	60fb      	str	r3, [r7, #12]
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ccac:	d02c      	beq.n	800cd08 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ccb4:	d833      	bhi.n	800cd1e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ccbc:	d01a      	beq.n	800ccf4 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ccc4:	d82b      	bhi.n	800cd1e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d004      	beq.n	800ccd6 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ccd2:	d004      	beq.n	800ccde <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 800ccd4:	e023      	b.n	800cd1e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ccd6:	f7fe fd8d 	bl	800b7f4 <HAL_RCC_GetPCLK1Freq>
 800ccda:	61f8      	str	r0, [r7, #28]
          break;
 800ccdc:	e026      	b.n	800cd2c <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800ccde:	4b2f      	ldr	r3, [pc, #188]	; (800cd9c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800cce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cce4:	f003 0302 	and.w	r3, r3, #2
 800cce8:	2b02      	cmp	r3, #2
 800ccea:	d11a      	bne.n	800cd22 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 800ccec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ccf0:	61fb      	str	r3, [r7, #28]
          break;
 800ccf2:	e016      	b.n	800cd22 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ccf4:	4b29      	ldr	r3, [pc, #164]	; (800cd9c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ccfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd00:	d111      	bne.n	800cd26 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 800cd02:	4b27      	ldr	r3, [pc, #156]	; (800cda0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800cd04:	61fb      	str	r3, [r7, #28]
          break;
 800cd06:	e00e      	b.n	800cd26 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800cd08:	4b24      	ldr	r3, [pc, #144]	; (800cd9c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800cd0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd0e:	f003 0302 	and.w	r3, r3, #2
 800cd12:	2b02      	cmp	r3, #2
 800cd14:	d109      	bne.n	800cd2a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 800cd16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd1a:	61fb      	str	r3, [r7, #28]
          break;
 800cd1c:	e005      	b.n	800cd2a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 800cd1e:	bf00      	nop
 800cd20:	e0c8      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800cd22:	bf00      	nop
 800cd24:	e0c6      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800cd26:	bf00      	nop
 800cd28:	e0c4      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800cd2a:	bf00      	nop
        break;
 800cd2c:	e0c2      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800cd2e:	4b1b      	ldr	r3, [pc, #108]	; (800cd9c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800cd30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd34:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800cd38:	60fb      	str	r3, [r7, #12]
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cd40:	d030      	beq.n	800cda4 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cd48:	d837      	bhi.n	800cdba <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd50:	d01a      	beq.n	800cd88 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd58:	d82f      	bhi.n	800cdba <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d004      	beq.n	800cd6a <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd66:	d004      	beq.n	800cd72 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 800cd68:	e027      	b.n	800cdba <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 800cd6a:	f7fe fd43 	bl	800b7f4 <HAL_RCC_GetPCLK1Freq>
 800cd6e:	61f8      	str	r0, [r7, #28]
          break;
 800cd70:	e02a      	b.n	800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800cd72:	4b0a      	ldr	r3, [pc, #40]	; (800cd9c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800cd74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cd78:	f003 0302 	and.w	r3, r3, #2
 800cd7c:	2b02      	cmp	r3, #2
 800cd7e:	d11e      	bne.n	800cdbe <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 800cd80:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800cd84:	61fb      	str	r3, [r7, #28]
          break;
 800cd86:	e01a      	b.n	800cdbe <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cd88:	4b04      	ldr	r3, [pc, #16]	; (800cd9c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cd90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd94:	d115      	bne.n	800cdc2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 800cd96:	4b02      	ldr	r3, [pc, #8]	; (800cda0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800cd98:	61fb      	str	r3, [r7, #28]
          break;
 800cd9a:	e012      	b.n	800cdc2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800cd9c:	40021000 	.word	0x40021000
 800cda0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800cda4:	4b46      	ldr	r3, [pc, #280]	; (800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800cda6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdaa:	f003 0302 	and.w	r3, r3, #2
 800cdae:	2b02      	cmp	r3, #2
 800cdb0:	d109      	bne.n	800cdc6 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 800cdb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cdb6:	61fb      	str	r3, [r7, #28]
          break;
 800cdb8:	e005      	b.n	800cdc6 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 800cdba:	bf00      	nop
 800cdbc:	e07a      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800cdbe:	bf00      	nop
 800cdc0:	e078      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800cdc2:	bf00      	nop
 800cdc4:	e076      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800cdc6:	bf00      	nop
        break;
 800cdc8:	e074      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800cdca:	4b3d      	ldr	r3, [pc, #244]	; (800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800cdcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cdd0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800cdd4:	60fb      	str	r3, [r7, #12]
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cddc:	d02c      	beq.n	800ce38 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cde4:	d855      	bhi.n	800ce92 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d004      	beq.n	800cdf6 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cdf2:	d004      	beq.n	800cdfe <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 800cdf4:	e04d      	b.n	800ce92 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800cdf6:	f7fe fc65 	bl	800b6c4 <HAL_RCC_GetSysClockFreq>
 800cdfa:	61f8      	str	r0, [r7, #28]
          break;
 800cdfc:	e04e      	b.n	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800cdfe:	4b30      	ldr	r3, [pc, #192]	; (800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f003 0302 	and.w	r3, r3, #2
 800ce06:	2b02      	cmp	r3, #2
 800ce08:	d145      	bne.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800ce0a:	4b2d      	ldr	r3, [pc, #180]	; (800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f003 0308 	and.w	r3, r3, #8
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d005      	beq.n	800ce22 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800ce16:	4b2a      	ldr	r3, [pc, #168]	; (800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	091b      	lsrs	r3, r3, #4
 800ce1c:	f003 030f 	and.w	r3, r3, #15
 800ce20:	e005      	b.n	800ce2e <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800ce22:	4b27      	ldr	r3, [pc, #156]	; (800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800ce24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ce28:	0a1b      	lsrs	r3, r3, #8
 800ce2a:	f003 030f 	and.w	r3, r3, #15
 800ce2e:	4a25      	ldr	r2, [pc, #148]	; (800cec4 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 800ce30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce34:	61fb      	str	r3, [r7, #28]
          break;
 800ce36:	e02e      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800ce38:	4b21      	ldr	r3, [pc, #132]	; (800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce44:	d129      	bne.n	800ce9a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800ce46:	4b1e      	ldr	r3, [pc, #120]	; (800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800ce48:	68db      	ldr	r3, [r3, #12]
 800ce4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ce4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce52:	d122      	bne.n	800ce9a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800ce54:	4b1a      	ldr	r3, [pc, #104]	; (800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800ce56:	68db      	ldr	r3, [r3, #12]
 800ce58:	0a1b      	lsrs	r3, r3, #8
 800ce5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce5e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ce60:	69bb      	ldr	r3, [r7, #24]
 800ce62:	68ba      	ldr	r2, [r7, #8]
 800ce64:	fb03 f202 	mul.w	r2, r3, r2
 800ce68:	4b15      	ldr	r3, [pc, #84]	; (800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800ce6a:	68db      	ldr	r3, [r3, #12]
 800ce6c:	091b      	lsrs	r3, r3, #4
 800ce6e:	f003 030f 	and.w	r3, r3, #15
 800ce72:	3301      	adds	r3, #1
 800ce74:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce78:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800ce7a:	4b11      	ldr	r3, [pc, #68]	; (800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800ce7c:	68db      	ldr	r3, [r3, #12]
 800ce7e:	0d5b      	lsrs	r3, r3, #21
 800ce80:	f003 0303 	and.w	r3, r3, #3
 800ce84:	3301      	adds	r3, #1
 800ce86:	005b      	lsls	r3, r3, #1
 800ce88:	69ba      	ldr	r2, [r7, #24]
 800ce8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce8e:	61fb      	str	r3, [r7, #28]
          break;
 800ce90:	e003      	b.n	800ce9a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 800ce92:	bf00      	nop
 800ce94:	e00e      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ce96:	bf00      	nop
 800ce98:	e00c      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ce9a:	bf00      	nop
        break;
 800ce9c:	e00a      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800ce9e:	bf00      	nop
 800cea0:	e008      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800cea2:	bf00      	nop
 800cea4:	e006      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800cea6:	bf00      	nop
 800cea8:	e004      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800ceaa:	bf00      	nop
 800ceac:	e002      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800ceae:	bf00      	nop
 800ceb0:	e000      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800ceb2:	bf00      	nop
    }
  }

  return(frequency);
 800ceb4:	69fb      	ldr	r3, [r7, #28]
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3720      	adds	r7, #32
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
 800cebe:	bf00      	nop
 800cec0:	40021000 	.word	0x40021000
 800cec4:	0801d10c 	.word	0x0801d10c

0800cec8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b084      	sub	sp, #16
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
 800ced0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ced2:	2300      	movs	r3, #0
 800ced4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800ced6:	4b72      	ldr	r3, [pc, #456]	; (800d0a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800ced8:	68db      	ldr	r3, [r3, #12]
 800ceda:	f003 0303 	and.w	r3, r3, #3
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d00e      	beq.n	800cf00 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800cee2:	4b6f      	ldr	r3, [pc, #444]	; (800d0a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cee4:	68db      	ldr	r3, [r3, #12]
 800cee6:	f003 0203 	and.w	r2, r3, #3
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d103      	bne.n	800cefa <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
       ||
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d142      	bne.n	800cf80 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800cefa:	2301      	movs	r3, #1
 800cefc:	73fb      	strb	r3, [r7, #15]
 800cefe:	e03f      	b.n	800cf80 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	2b03      	cmp	r3, #3
 800cf06:	d018      	beq.n	800cf3a <RCCEx_PLLSAI1_Config+0x72>
 800cf08:	2b03      	cmp	r3, #3
 800cf0a:	d825      	bhi.n	800cf58 <RCCEx_PLLSAI1_Config+0x90>
 800cf0c:	2b01      	cmp	r3, #1
 800cf0e:	d002      	beq.n	800cf16 <RCCEx_PLLSAI1_Config+0x4e>
 800cf10:	2b02      	cmp	r3, #2
 800cf12:	d009      	beq.n	800cf28 <RCCEx_PLLSAI1_Config+0x60>
 800cf14:	e020      	b.n	800cf58 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800cf16:	4b62      	ldr	r3, [pc, #392]	; (800d0a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f003 0302 	and.w	r3, r3, #2
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d11d      	bne.n	800cf5e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800cf22:	2301      	movs	r3, #1
 800cf24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cf26:	e01a      	b.n	800cf5e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800cf28:	4b5d      	ldr	r3, [pc, #372]	; (800d0a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d116      	bne.n	800cf62 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800cf34:	2301      	movs	r3, #1
 800cf36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cf38:	e013      	b.n	800cf62 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800cf3a:	4b59      	ldr	r3, [pc, #356]	; (800d0a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d10f      	bne.n	800cf66 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800cf46:	4b56      	ldr	r3, [pc, #344]	; (800d0a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d109      	bne.n	800cf66 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800cf52:	2301      	movs	r3, #1
 800cf54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cf56:	e006      	b.n	800cf66 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800cf58:	2301      	movs	r3, #1
 800cf5a:	73fb      	strb	r3, [r7, #15]
      break;
 800cf5c:	e004      	b.n	800cf68 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800cf5e:	bf00      	nop
 800cf60:	e002      	b.n	800cf68 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800cf62:	bf00      	nop
 800cf64:	e000      	b.n	800cf68 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800cf66:	bf00      	nop
    }

    if(status == HAL_OK)
 800cf68:	7bfb      	ldrb	r3, [r7, #15]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d108      	bne.n	800cf80 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800cf6e:	4b4c      	ldr	r3, [pc, #304]	; (800d0a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cf70:	68db      	ldr	r3, [r3, #12]
 800cf72:	f023 0203 	bic.w	r2, r3, #3
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	4949      	ldr	r1, [pc, #292]	; (800d0a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cf7c:	4313      	orrs	r3, r2
 800cf7e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800cf80:	7bfb      	ldrb	r3, [r7, #15]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	f040 8086 	bne.w	800d094 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800cf88:	4b45      	ldr	r3, [pc, #276]	; (800d0a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	4a44      	ldr	r2, [pc, #272]	; (800d0a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cf8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cf92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf94:	f7fa fa82 	bl	800749c <HAL_GetTick>
 800cf98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800cf9a:	e009      	b.n	800cfb0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cf9c:	f7fa fa7e 	bl	800749c <HAL_GetTick>
 800cfa0:	4602      	mov	r2, r0
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	1ad3      	subs	r3, r2, r3
 800cfa6:	2b02      	cmp	r3, #2
 800cfa8:	d902      	bls.n	800cfb0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800cfaa:	2303      	movs	r3, #3
 800cfac:	73fb      	strb	r3, [r7, #15]
        break;
 800cfae:	e005      	b.n	800cfbc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800cfb0:	4b3b      	ldr	r3, [pc, #236]	; (800d0a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d1ef      	bne.n	800cf9c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800cfbc:	7bfb      	ldrb	r3, [r7, #15]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d168      	bne.n	800d094 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d113      	bne.n	800cff0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cfc8:	4b35      	ldr	r3, [pc, #212]	; (800d0a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cfca:	691a      	ldr	r2, [r3, #16]
 800cfcc:	4b35      	ldr	r3, [pc, #212]	; (800d0a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800cfce:	4013      	ands	r3, r2
 800cfd0:	687a      	ldr	r2, [r7, #4]
 800cfd2:	6892      	ldr	r2, [r2, #8]
 800cfd4:	0211      	lsls	r1, r2, #8
 800cfd6:	687a      	ldr	r2, [r7, #4]
 800cfd8:	68d2      	ldr	r2, [r2, #12]
 800cfda:	06d2      	lsls	r2, r2, #27
 800cfdc:	4311      	orrs	r1, r2
 800cfde:	687a      	ldr	r2, [r7, #4]
 800cfe0:	6852      	ldr	r2, [r2, #4]
 800cfe2:	3a01      	subs	r2, #1
 800cfe4:	0112      	lsls	r2, r2, #4
 800cfe6:	430a      	orrs	r2, r1
 800cfe8:	492d      	ldr	r1, [pc, #180]	; (800d0a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cfea:	4313      	orrs	r3, r2
 800cfec:	610b      	str	r3, [r1, #16]
 800cfee:	e02d      	b.n	800d04c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	2b01      	cmp	r3, #1
 800cff4:	d115      	bne.n	800d022 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cff6:	4b2a      	ldr	r3, [pc, #168]	; (800d0a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cff8:	691a      	ldr	r2, [r3, #16]
 800cffa:	4b2b      	ldr	r3, [pc, #172]	; (800d0a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cffc:	4013      	ands	r3, r2
 800cffe:	687a      	ldr	r2, [r7, #4]
 800d000:	6892      	ldr	r2, [r2, #8]
 800d002:	0211      	lsls	r1, r2, #8
 800d004:	687a      	ldr	r2, [r7, #4]
 800d006:	6912      	ldr	r2, [r2, #16]
 800d008:	0852      	lsrs	r2, r2, #1
 800d00a:	3a01      	subs	r2, #1
 800d00c:	0552      	lsls	r2, r2, #21
 800d00e:	4311      	orrs	r1, r2
 800d010:	687a      	ldr	r2, [r7, #4]
 800d012:	6852      	ldr	r2, [r2, #4]
 800d014:	3a01      	subs	r2, #1
 800d016:	0112      	lsls	r2, r2, #4
 800d018:	430a      	orrs	r2, r1
 800d01a:	4921      	ldr	r1, [pc, #132]	; (800d0a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800d01c:	4313      	orrs	r3, r2
 800d01e:	610b      	str	r3, [r1, #16]
 800d020:	e014      	b.n	800d04c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d022:	4b1f      	ldr	r3, [pc, #124]	; (800d0a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800d024:	691a      	ldr	r2, [r3, #16]
 800d026:	4b21      	ldr	r3, [pc, #132]	; (800d0ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800d028:	4013      	ands	r3, r2
 800d02a:	687a      	ldr	r2, [r7, #4]
 800d02c:	6892      	ldr	r2, [r2, #8]
 800d02e:	0211      	lsls	r1, r2, #8
 800d030:	687a      	ldr	r2, [r7, #4]
 800d032:	6952      	ldr	r2, [r2, #20]
 800d034:	0852      	lsrs	r2, r2, #1
 800d036:	3a01      	subs	r2, #1
 800d038:	0652      	lsls	r2, r2, #25
 800d03a:	4311      	orrs	r1, r2
 800d03c:	687a      	ldr	r2, [r7, #4]
 800d03e:	6852      	ldr	r2, [r2, #4]
 800d040:	3a01      	subs	r2, #1
 800d042:	0112      	lsls	r2, r2, #4
 800d044:	430a      	orrs	r2, r1
 800d046:	4916      	ldr	r1, [pc, #88]	; (800d0a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800d048:	4313      	orrs	r3, r2
 800d04a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800d04c:	4b14      	ldr	r3, [pc, #80]	; (800d0a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4a13      	ldr	r2, [pc, #76]	; (800d0a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800d052:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d056:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d058:	f7fa fa20 	bl	800749c <HAL_GetTick>
 800d05c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d05e:	e009      	b.n	800d074 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d060:	f7fa fa1c 	bl	800749c <HAL_GetTick>
 800d064:	4602      	mov	r2, r0
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	1ad3      	subs	r3, r2, r3
 800d06a:	2b02      	cmp	r3, #2
 800d06c:	d902      	bls.n	800d074 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800d06e:	2303      	movs	r3, #3
 800d070:	73fb      	strb	r3, [r7, #15]
          break;
 800d072:	e005      	b.n	800d080 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d074:	4b0a      	ldr	r3, [pc, #40]	; (800d0a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d0ef      	beq.n	800d060 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800d080:	7bfb      	ldrb	r3, [r7, #15]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d106      	bne.n	800d094 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800d086:	4b06      	ldr	r3, [pc, #24]	; (800d0a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800d088:	691a      	ldr	r2, [r3, #16]
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	699b      	ldr	r3, [r3, #24]
 800d08e:	4904      	ldr	r1, [pc, #16]	; (800d0a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800d090:	4313      	orrs	r3, r2
 800d092:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800d094:	7bfb      	ldrb	r3, [r7, #15]
}
 800d096:	4618      	mov	r0, r3
 800d098:	3710      	adds	r7, #16
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}
 800d09e:	bf00      	nop
 800d0a0:	40021000 	.word	0x40021000
 800d0a4:	07ff800f 	.word	0x07ff800f
 800d0a8:	ff9f800f 	.word	0xff9f800f
 800d0ac:	f9ff800f 	.word	0xf9ff800f

0800d0b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b084      	sub	sp, #16
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800d0be:	4b72      	ldr	r3, [pc, #456]	; (800d288 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d0c0:	68db      	ldr	r3, [r3, #12]
 800d0c2:	f003 0303 	and.w	r3, r3, #3
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d00e      	beq.n	800d0e8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800d0ca:	4b6f      	ldr	r3, [pc, #444]	; (800d288 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d0cc:	68db      	ldr	r3, [r3, #12]
 800d0ce:	f003 0203 	and.w	r2, r3, #3
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	429a      	cmp	r2, r3
 800d0d8:	d103      	bne.n	800d0e2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
       ||
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d142      	bne.n	800d168 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	73fb      	strb	r3, [r7, #15]
 800d0e6:	e03f      	b.n	800d168 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	2b03      	cmp	r3, #3
 800d0ee:	d018      	beq.n	800d122 <RCCEx_PLLSAI2_Config+0x72>
 800d0f0:	2b03      	cmp	r3, #3
 800d0f2:	d825      	bhi.n	800d140 <RCCEx_PLLSAI2_Config+0x90>
 800d0f4:	2b01      	cmp	r3, #1
 800d0f6:	d002      	beq.n	800d0fe <RCCEx_PLLSAI2_Config+0x4e>
 800d0f8:	2b02      	cmp	r3, #2
 800d0fa:	d009      	beq.n	800d110 <RCCEx_PLLSAI2_Config+0x60>
 800d0fc:	e020      	b.n	800d140 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800d0fe:	4b62      	ldr	r3, [pc, #392]	; (800d288 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f003 0302 	and.w	r3, r3, #2
 800d106:	2b00      	cmp	r3, #0
 800d108:	d11d      	bne.n	800d146 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800d10a:	2301      	movs	r3, #1
 800d10c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d10e:	e01a      	b.n	800d146 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800d110:	4b5d      	ldr	r3, [pc, #372]	; (800d288 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d116      	bne.n	800d14a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800d11c:	2301      	movs	r3, #1
 800d11e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d120:	e013      	b.n	800d14a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800d122:	4b59      	ldr	r3, [pc, #356]	; (800d288 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d10f      	bne.n	800d14e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800d12e:	4b56      	ldr	r3, [pc, #344]	; (800d288 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d136:	2b00      	cmp	r3, #0
 800d138:	d109      	bne.n	800d14e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800d13a:	2301      	movs	r3, #1
 800d13c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d13e:	e006      	b.n	800d14e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800d140:	2301      	movs	r3, #1
 800d142:	73fb      	strb	r3, [r7, #15]
      break;
 800d144:	e004      	b.n	800d150 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800d146:	bf00      	nop
 800d148:	e002      	b.n	800d150 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800d14a:	bf00      	nop
 800d14c:	e000      	b.n	800d150 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800d14e:	bf00      	nop
    }

    if(status == HAL_OK)
 800d150:	7bfb      	ldrb	r3, [r7, #15]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d108      	bne.n	800d168 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800d156:	4b4c      	ldr	r3, [pc, #304]	; (800d288 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d158:	68db      	ldr	r3, [r3, #12]
 800d15a:	f023 0203 	bic.w	r2, r3, #3
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	4949      	ldr	r1, [pc, #292]	; (800d288 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d164:	4313      	orrs	r3, r2
 800d166:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800d168:	7bfb      	ldrb	r3, [r7, #15]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	f040 8086 	bne.w	800d27c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800d170:	4b45      	ldr	r3, [pc, #276]	; (800d288 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	4a44      	ldr	r2, [pc, #272]	; (800d288 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d17a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d17c:	f7fa f98e 	bl	800749c <HAL_GetTick>
 800d180:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d182:	e009      	b.n	800d198 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800d184:	f7fa f98a 	bl	800749c <HAL_GetTick>
 800d188:	4602      	mov	r2, r0
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	1ad3      	subs	r3, r2, r3
 800d18e:	2b02      	cmp	r3, #2
 800d190:	d902      	bls.n	800d198 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800d192:	2303      	movs	r3, #3
 800d194:	73fb      	strb	r3, [r7, #15]
        break;
 800d196:	e005      	b.n	800d1a4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d198:	4b3b      	ldr	r3, [pc, #236]	; (800d288 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d1ef      	bne.n	800d184 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800d1a4:	7bfb      	ldrb	r3, [r7, #15]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d168      	bne.n	800d27c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d113      	bne.n	800d1d8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d1b0:	4b35      	ldr	r3, [pc, #212]	; (800d288 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d1b2:	695a      	ldr	r2, [r3, #20]
 800d1b4:	4b35      	ldr	r3, [pc, #212]	; (800d28c <RCCEx_PLLSAI2_Config+0x1dc>)
 800d1b6:	4013      	ands	r3, r2
 800d1b8:	687a      	ldr	r2, [r7, #4]
 800d1ba:	6892      	ldr	r2, [r2, #8]
 800d1bc:	0211      	lsls	r1, r2, #8
 800d1be:	687a      	ldr	r2, [r7, #4]
 800d1c0:	68d2      	ldr	r2, [r2, #12]
 800d1c2:	06d2      	lsls	r2, r2, #27
 800d1c4:	4311      	orrs	r1, r2
 800d1c6:	687a      	ldr	r2, [r7, #4]
 800d1c8:	6852      	ldr	r2, [r2, #4]
 800d1ca:	3a01      	subs	r2, #1
 800d1cc:	0112      	lsls	r2, r2, #4
 800d1ce:	430a      	orrs	r2, r1
 800d1d0:	492d      	ldr	r1, [pc, #180]	; (800d288 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d1d2:	4313      	orrs	r3, r2
 800d1d4:	614b      	str	r3, [r1, #20]
 800d1d6:	e02d      	b.n	800d234 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	2b01      	cmp	r3, #1
 800d1dc:	d115      	bne.n	800d20a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d1de:	4b2a      	ldr	r3, [pc, #168]	; (800d288 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d1e0:	695a      	ldr	r2, [r3, #20]
 800d1e2:	4b2b      	ldr	r3, [pc, #172]	; (800d290 <RCCEx_PLLSAI2_Config+0x1e0>)
 800d1e4:	4013      	ands	r3, r2
 800d1e6:	687a      	ldr	r2, [r7, #4]
 800d1e8:	6892      	ldr	r2, [r2, #8]
 800d1ea:	0211      	lsls	r1, r2, #8
 800d1ec:	687a      	ldr	r2, [r7, #4]
 800d1ee:	6912      	ldr	r2, [r2, #16]
 800d1f0:	0852      	lsrs	r2, r2, #1
 800d1f2:	3a01      	subs	r2, #1
 800d1f4:	0552      	lsls	r2, r2, #21
 800d1f6:	4311      	orrs	r1, r2
 800d1f8:	687a      	ldr	r2, [r7, #4]
 800d1fa:	6852      	ldr	r2, [r2, #4]
 800d1fc:	3a01      	subs	r2, #1
 800d1fe:	0112      	lsls	r2, r2, #4
 800d200:	430a      	orrs	r2, r1
 800d202:	4921      	ldr	r1, [pc, #132]	; (800d288 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d204:	4313      	orrs	r3, r2
 800d206:	614b      	str	r3, [r1, #20]
 800d208:	e014      	b.n	800d234 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d20a:	4b1f      	ldr	r3, [pc, #124]	; (800d288 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d20c:	695a      	ldr	r2, [r3, #20]
 800d20e:	4b21      	ldr	r3, [pc, #132]	; (800d294 <RCCEx_PLLSAI2_Config+0x1e4>)
 800d210:	4013      	ands	r3, r2
 800d212:	687a      	ldr	r2, [r7, #4]
 800d214:	6892      	ldr	r2, [r2, #8]
 800d216:	0211      	lsls	r1, r2, #8
 800d218:	687a      	ldr	r2, [r7, #4]
 800d21a:	6952      	ldr	r2, [r2, #20]
 800d21c:	0852      	lsrs	r2, r2, #1
 800d21e:	3a01      	subs	r2, #1
 800d220:	0652      	lsls	r2, r2, #25
 800d222:	4311      	orrs	r1, r2
 800d224:	687a      	ldr	r2, [r7, #4]
 800d226:	6852      	ldr	r2, [r2, #4]
 800d228:	3a01      	subs	r2, #1
 800d22a:	0112      	lsls	r2, r2, #4
 800d22c:	430a      	orrs	r2, r1
 800d22e:	4916      	ldr	r1, [pc, #88]	; (800d288 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d230:	4313      	orrs	r3, r2
 800d232:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800d234:	4b14      	ldr	r3, [pc, #80]	; (800d288 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	4a13      	ldr	r2, [pc, #76]	; (800d288 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d23a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d23e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d240:	f7fa f92c 	bl	800749c <HAL_GetTick>
 800d244:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800d246:	e009      	b.n	800d25c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800d248:	f7fa f928 	bl	800749c <HAL_GetTick>
 800d24c:	4602      	mov	r2, r0
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	1ad3      	subs	r3, r2, r3
 800d252:	2b02      	cmp	r3, #2
 800d254:	d902      	bls.n	800d25c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800d256:	2303      	movs	r3, #3
 800d258:	73fb      	strb	r3, [r7, #15]
          break;
 800d25a:	e005      	b.n	800d268 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800d25c:	4b0a      	ldr	r3, [pc, #40]	; (800d288 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d264:	2b00      	cmp	r3, #0
 800d266:	d0ef      	beq.n	800d248 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800d268:	7bfb      	ldrb	r3, [r7, #15]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d106      	bne.n	800d27c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800d26e:	4b06      	ldr	r3, [pc, #24]	; (800d288 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d270:	695a      	ldr	r2, [r3, #20]
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	699b      	ldr	r3, [r3, #24]
 800d276:	4904      	ldr	r1, [pc, #16]	; (800d288 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d278:	4313      	orrs	r3, r2
 800d27a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800d27c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3710      	adds	r7, #16
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}
 800d286:	bf00      	nop
 800d288:	40021000 	.word	0x40021000
 800d28c:	07ff800f 	.word	0x07ff800f
 800d290:	ff9f800f 	.word	0xff9f800f
 800d294:	f9ff800f 	.word	0xf9ff800f

0800d298 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800d298:	b480      	push	{r7}
 800d29a:	b089      	sub	sp, #36	; 0x24
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d2b4:	d10b      	bne.n	800d2ce <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800d2b6:	4b7e      	ldr	r3, [pc, #504]	; (800d4b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d2b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d2bc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800d2c0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800d2c2:	69bb      	ldr	r3, [r7, #24]
 800d2c4:	2b60      	cmp	r3, #96	; 0x60
 800d2c6:	d112      	bne.n	800d2ee <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800d2c8:	4b7a      	ldr	r3, [pc, #488]	; (800d4b4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800d2ca:	61fb      	str	r3, [r7, #28]
 800d2cc:	e00f      	b.n	800d2ee <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2d4:	d10b      	bne.n	800d2ee <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800d2d6:	4b76      	ldr	r3, [pc, #472]	; (800d4b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d2d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d2dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d2e0:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800d2e2:	69bb      	ldr	r3, [r7, #24]
 800d2e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d2e8:	d101      	bne.n	800d2ee <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800d2ea:	4b72      	ldr	r3, [pc, #456]	; (800d4b4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800d2ec:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800d2ee:	69fb      	ldr	r3, [r7, #28]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	f040 80d6 	bne.w	800d4a2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800d2fa:	69bb      	ldr	r3, [r7, #24]
 800d2fc:	2b40      	cmp	r3, #64	; 0x40
 800d2fe:	d003      	beq.n	800d308 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 800d300:	69bb      	ldr	r3, [r7, #24]
 800d302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d306:	d13b      	bne.n	800d380 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800d308:	4b69      	ldr	r3, [pc, #420]	; (800d4b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d310:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d314:	f040 80c4 	bne.w	800d4a0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 800d318:	4b65      	ldr	r3, [pc, #404]	; (800d4b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d31a:	68db      	ldr	r3, [r3, #12]
 800d31c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d320:	2b00      	cmp	r3, #0
 800d322:	f000 80bd 	beq.w	800d4a0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800d326:	4b62      	ldr	r3, [pc, #392]	; (800d4b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d328:	68db      	ldr	r3, [r3, #12]
 800d32a:	091b      	lsrs	r3, r3, #4
 800d32c:	f003 030f 	and.w	r3, r3, #15
 800d330:	3301      	adds	r3, #1
 800d332:	693a      	ldr	r2, [r7, #16]
 800d334:	fbb2 f3f3 	udiv	r3, r2, r3
 800d338:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800d33a:	4b5d      	ldr	r3, [pc, #372]	; (800d4b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d33c:	68db      	ldr	r3, [r3, #12]
 800d33e:	0a1b      	lsrs	r3, r3, #8
 800d340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d344:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800d346:	4b5a      	ldr	r3, [pc, #360]	; (800d4b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d348:	68db      	ldr	r3, [r3, #12]
 800d34a:	0edb      	lsrs	r3, r3, #27
 800d34c:	f003 031f 	and.w	r3, r3, #31
 800d350:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d10a      	bne.n	800d36e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800d358:	4b55      	ldr	r3, [pc, #340]	; (800d4b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d35a:	68db      	ldr	r3, [r3, #12]
 800d35c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d360:	2b00      	cmp	r3, #0
 800d362:	d002      	beq.n	800d36a <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800d364:	2311      	movs	r3, #17
 800d366:	617b      	str	r3, [r7, #20]
 800d368:	e001      	b.n	800d36e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800d36a:	2307      	movs	r3, #7
 800d36c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	68fa      	ldr	r2, [r7, #12]
 800d372:	fb03 f202 	mul.w	r2, r3, r2
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	fbb2 f3f3 	udiv	r3, r2, r3
 800d37c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800d37e:	e08f      	b.n	800d4a0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800d380:	69bb      	ldr	r3, [r7, #24]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d13a      	bne.n	800d3fc <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800d386:	4b4a      	ldr	r3, [pc, #296]	; (800d4b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d38e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d392:	f040 8086 	bne.w	800d4a2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800d396:	4b46      	ldr	r3, [pc, #280]	; (800d4b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d398:	691b      	ldr	r3, [r3, #16]
 800d39a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d07f      	beq.n	800d4a2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800d3a2:	4b43      	ldr	r3, [pc, #268]	; (800d4b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d3a4:	691b      	ldr	r3, [r3, #16]
 800d3a6:	091b      	lsrs	r3, r3, #4
 800d3a8:	f003 030f 	and.w	r3, r3, #15
 800d3ac:	3301      	adds	r3, #1
 800d3ae:	693a      	ldr	r2, [r7, #16]
 800d3b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3b4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800d3b6:	4b3e      	ldr	r3, [pc, #248]	; (800d4b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d3b8:	691b      	ldr	r3, [r3, #16]
 800d3ba:	0a1b      	lsrs	r3, r3, #8
 800d3bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3c0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800d3c2:	4b3b      	ldr	r3, [pc, #236]	; (800d4b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d3c4:	691b      	ldr	r3, [r3, #16]
 800d3c6:	0edb      	lsrs	r3, r3, #27
 800d3c8:	f003 031f 	and.w	r3, r3, #31
 800d3cc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d10a      	bne.n	800d3ea <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800d3d4:	4b36      	ldr	r3, [pc, #216]	; (800d4b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d3d6:	691b      	ldr	r3, [r3, #16]
 800d3d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d002      	beq.n	800d3e6 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 800d3e0:	2311      	movs	r3, #17
 800d3e2:	617b      	str	r3, [r7, #20]
 800d3e4:	e001      	b.n	800d3ea <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800d3e6:	2307      	movs	r3, #7
 800d3e8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	68fa      	ldr	r2, [r7, #12]
 800d3ee:	fb03 f202 	mul.w	r2, r3, r2
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3f8:	61fb      	str	r3, [r7, #28]
 800d3fa:	e052      	b.n	800d4a2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800d3fc:	69bb      	ldr	r3, [r7, #24]
 800d3fe:	2b80      	cmp	r3, #128	; 0x80
 800d400:	d003      	beq.n	800d40a <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800d402:	69bb      	ldr	r3, [r7, #24]
 800d404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d408:	d109      	bne.n	800d41e <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d40a:	4b29      	ldr	r3, [pc, #164]	; (800d4b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d416:	d144      	bne.n	800d4a2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 800d418:	4b27      	ldr	r3, [pc, #156]	; (800d4b8 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800d41a:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d41c:	e041      	b.n	800d4a2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800d41e:	69bb      	ldr	r3, [r7, #24]
 800d420:	2b20      	cmp	r3, #32
 800d422:	d003      	beq.n	800d42c <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800d424:	69bb      	ldr	r3, [r7, #24]
 800d426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d42a:	d13a      	bne.n	800d4a2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800d42c:	4b20      	ldr	r3, [pc, #128]	; (800d4b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d438:	d133      	bne.n	800d4a2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800d43a:	4b1d      	ldr	r3, [pc, #116]	; (800d4b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d43c:	695b      	ldr	r3, [r3, #20]
 800d43e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d442:	2b00      	cmp	r3, #0
 800d444:	d02d      	beq.n	800d4a2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800d446:	4b1a      	ldr	r3, [pc, #104]	; (800d4b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d448:	695b      	ldr	r3, [r3, #20]
 800d44a:	091b      	lsrs	r3, r3, #4
 800d44c:	f003 030f 	and.w	r3, r3, #15
 800d450:	3301      	adds	r3, #1
 800d452:	693a      	ldr	r2, [r7, #16]
 800d454:	fbb2 f3f3 	udiv	r3, r2, r3
 800d458:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800d45a:	4b15      	ldr	r3, [pc, #84]	; (800d4b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d45c:	695b      	ldr	r3, [r3, #20]
 800d45e:	0a1b      	lsrs	r3, r3, #8
 800d460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d464:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800d466:	4b12      	ldr	r3, [pc, #72]	; (800d4b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d468:	695b      	ldr	r3, [r3, #20]
 800d46a:	0edb      	lsrs	r3, r3, #27
 800d46c:	f003 031f 	and.w	r3, r3, #31
 800d470:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d10a      	bne.n	800d48e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800d478:	4b0d      	ldr	r3, [pc, #52]	; (800d4b0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d47a:	695b      	ldr	r3, [r3, #20]
 800d47c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d480:	2b00      	cmp	r3, #0
 800d482:	d002      	beq.n	800d48a <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 800d484:	2311      	movs	r3, #17
 800d486:	617b      	str	r3, [r7, #20]
 800d488:	e001      	b.n	800d48e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800d48a:	2307      	movs	r3, #7
 800d48c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	68fa      	ldr	r2, [r7, #12]
 800d492:	fb03 f202 	mul.w	r2, r3, r2
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	fbb2 f3f3 	udiv	r3, r2, r3
 800d49c:	61fb      	str	r3, [r7, #28]
 800d49e:	e000      	b.n	800d4a2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800d4a0:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800d4a2:	69fb      	ldr	r3, [r7, #28]
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3724      	adds	r7, #36	; 0x24
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr
 800d4b0:	40021000 	.word	0x40021000
 800d4b4:	001fff68 	.word	0x001fff68
 800d4b8:	00f42400 	.word	0x00f42400

0800d4bc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b08a      	sub	sp, #40	; 0x28
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d101      	bne.n	800d4ce <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	e078      	b.n	800d5c0 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d4d4:	b2db      	uxtb	r3, r3
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d105      	bne.n	800d4e6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2200      	movs	r2, #0
 800d4de:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f7f7 ffbb 	bl	800545c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2203      	movs	r2, #3
 800d4ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f000 f86a 	bl	800d5c8 <HAL_SD_InitCard>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d001      	beq.n	800d4fe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	e060      	b.n	800d5c0 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d4fe:	f107 0308 	add.w	r3, r7, #8
 800d502:	4619      	mov	r1, r3
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f000 fdb5 	bl	800e074 <HAL_SD_GetCardStatus>
 800d50a:	4603      	mov	r3, r0
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d001      	beq.n	800d514 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800d510:	2301      	movs	r3, #1
 800d512:	e055      	b.n	800d5c0 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d514:	7e3b      	ldrb	r3, [r7, #24]
 800d516:	b2db      	uxtb	r3, r3
 800d518:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d51a:	7e7b      	ldrb	r3, [r7, #25]
 800d51c:	b2db      	uxtb	r3, r3
 800d51e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d524:	2b01      	cmp	r3, #1
 800d526:	d10a      	bne.n	800d53e <HAL_SD_Init+0x82>
 800d528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d102      	bne.n	800d534 <HAL_SD_Init+0x78>
 800d52e:	6a3b      	ldr	r3, [r7, #32]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d004      	beq.n	800d53e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d53a:	65da      	str	r2, [r3, #92]	; 0x5c
 800d53c:	e00b      	b.n	800d556 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d542:	2b01      	cmp	r3, #1
 800d544:	d104      	bne.n	800d550 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d54c:	65da      	str	r2, [r3, #92]	; 0x5c
 800d54e:	e002      	b.n	800d556 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2200      	movs	r2, #0
 800d554:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	68db      	ldr	r3, [r3, #12]
 800d55a:	4619      	mov	r1, r3
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f000 fe6b 	bl	800e238 <HAL_SD_ConfigWideBusOperation>
 800d562:	4603      	mov	r3, r0
 800d564:	2b00      	cmp	r3, #0
 800d566:	d001      	beq.n	800d56c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d568:	2301      	movs	r3, #1
 800d56a:	e029      	b.n	800d5c0 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d56c:	f7f9 ff96 	bl	800749c <HAL_GetTick>
 800d570:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d572:	e014      	b.n	800d59e <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800d574:	f7f9 ff92 	bl	800749c <HAL_GetTick>
 800d578:	4602      	mov	r2, r0
 800d57a:	69fb      	ldr	r3, [r7, #28]
 800d57c:	1ad3      	subs	r3, r2, r3
 800d57e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d582:	d10c      	bne.n	800d59e <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d58a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2201      	movs	r2, #1
 800d590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2200      	movs	r2, #0
 800d598:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800d59a:	2303      	movs	r3, #3
 800d59c:	e010      	b.n	800d5c0 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f000 ff5e 	bl	800e460 <HAL_SD_GetCardState>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	2b04      	cmp	r3, #4
 800d5a8:	d1e4      	bne.n	800d574 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2201      	movs	r2, #1
 800d5ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d5be:	2300      	movs	r3, #0
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3728      	adds	r7, #40	; 0x28
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d5c8:	b5b0      	push	{r4, r5, r7, lr}
 800d5ca:	b08e      	sub	sp, #56	; 0x38
 800d5cc:	af04      	add	r7, sp, #16
 800d5ce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800d5e0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800d5e4:	f7fe fd4e 	bl	800c084 <HAL_RCCEx_GetPeriphCLKFreq>
 800d5e8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d109      	bne.n	800d604 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2201      	movs	r2, #1
 800d5f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d5fe:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d600:	2301      	movs	r3, #1
 800d602:	e079      	b.n	800d6f8 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d606:	0a1b      	lsrs	r3, r3, #8
 800d608:	4a3d      	ldr	r2, [pc, #244]	; (800d700 <HAL_SD_InitCard+0x138>)
 800d60a:	fba2 2303 	umull	r2, r3, r2, r3
 800d60e:	091b      	lsrs	r3, r3, #4
 800d610:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	699b      	ldr	r3, [r3, #24]
 800d616:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	699b      	ldr	r3, [r3, #24]
 800d61c:	2b01      	cmp	r3, #1
 800d61e:	d107      	bne.n	800d630 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	681a      	ldr	r2, [r3, #0]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f042 0210 	orr.w	r2, r2, #16
 800d62e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681d      	ldr	r5, [r3, #0]
 800d634:	466c      	mov	r4, sp
 800d636:	f107 0314 	add.w	r3, r7, #20
 800d63a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d63e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d642:	f107 0308 	add.w	r3, r7, #8
 800d646:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d648:	4628      	mov	r0, r5
 800d64a:	f005 f8a5 	bl	8012798 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	4618      	mov	r0, r3
 800d654:	f005 f8e8 	bl	8012828 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800d658:	69bb      	ldr	r3, [r7, #24]
 800d65a:	005b      	lsls	r3, r3, #1
 800d65c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d65e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d662:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800d664:	4a27      	ldr	r2, [pc, #156]	; (800d704 <HAL_SD_InitCard+0x13c>)
 800d666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d668:	fbb2 f3f3 	udiv	r3, r2, r3
 800d66c:	3301      	adds	r3, #1
 800d66e:	4618      	mov	r0, r3
 800d670:	f7f9 ff20 	bl	80074b4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f000 ffd3 	bl	800e620 <SD_PowerON>
 800d67a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d67c:	6a3b      	ldr	r3, [r7, #32]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d00b      	beq.n	800d69a <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2201      	movs	r2, #1
 800d686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d68e:	6a3b      	ldr	r3, [r7, #32]
 800d690:	431a      	orrs	r2, r3
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d696:	2301      	movs	r3, #1
 800d698:	e02e      	b.n	800d6f8 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f000 ff00 	bl	800e4a0 <SD_InitCard>
 800d6a0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d6a2:	6a3b      	ldr	r3, [r7, #32]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d00b      	beq.n	800d6c0 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2201      	movs	r2, #1
 800d6ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6b4:	6a3b      	ldr	r3, [r7, #32]
 800d6b6:	431a      	orrs	r2, r3
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d6bc:	2301      	movs	r3, #1
 800d6be:	e01b      	b.n	800d6f8 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f005 f943 	bl	8012954 <SDMMC_CmdBlockLength>
 800d6ce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d6d0:	6a3b      	ldr	r3, [r7, #32]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d00f      	beq.n	800d6f6 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	4a0b      	ldr	r2, [pc, #44]	; (800d708 <HAL_SD_InitCard+0x140>)
 800d6dc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6e2:	6a3b      	ldr	r3, [r7, #32]
 800d6e4:	431a      	orrs	r2, r3
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2201      	movs	r2, #1
 800d6ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	e000      	b.n	800d6f8 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 800d6f6:	2300      	movs	r3, #0
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3728      	adds	r7, #40	; 0x28
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bdb0      	pop	{r4, r5, r7, pc}
 800d700:	014f8b59 	.word	0x014f8b59
 800d704:	00012110 	.word	0x00012110
 800d708:	1fe00fff 	.word	0x1fe00fff

0800d70c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b08c      	sub	sp, #48	; 0x30
 800d710:	af00      	add	r7, sp, #0
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	607a      	str	r2, [r7, #4]
 800d718:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d107      	bne.n	800d734 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d728:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d730:	2301      	movs	r3, #1
 800d732:	e08d      	b.n	800d850 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d73a:	b2db      	uxtb	r3, r3
 800d73c:	2b01      	cmp	r3, #1
 800d73e:	f040 8086 	bne.w	800d84e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	2200      	movs	r2, #0
 800d746:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	441a      	add	r2, r3
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d752:	429a      	cmp	r2, r3
 800d754:	d907      	bls.n	800d766 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d75a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d762:	2301      	movs	r3, #1
 800d764:	e074      	b.n	800d850 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2203      	movs	r2, #3
 800d76a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	2200      	movs	r2, #0
 800d774:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	68ba      	ldr	r2, [r7, #8]
 800d77a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	025a      	lsls	r2, r3, #9
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d788:	2b01      	cmp	r3, #1
 800d78a:	d002      	beq.n	800d792 <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 800d78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d78e:	025b      	lsls	r3, r3, #9
 800d790:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d796:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	025b      	lsls	r3, r3, #9
 800d79c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d79e:	2390      	movs	r3, #144	; 0x90
 800d7a0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d7a2:	2302      	movs	r3, #2
 800d7a4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	f107 0210 	add.w	r2, r7, #16
 800d7b6:	4611      	mov	r1, r2
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f005 f89f 	bl	80128fc <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	68da      	ldr	r2, [r3, #12]
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d7cc:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	68ba      	ldr	r2, [r7, #8]
 800d7d4:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	2201      	movs	r2, #1
 800d7dc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d90a      	bls.n	800d7fa <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	2282      	movs	r2, #130	; 0x82
 800d7e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f005 f8f5 	bl	80129e0 <SDMMC_CmdReadMultiBlock>
 800d7f6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d7f8:	e009      	b.n	800d80e <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	2281      	movs	r2, #129	; 0x81
 800d7fe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d806:	4618      	mov	r0, r3
 800d808:	f005 f8c7 	bl	801299a <SDMMC_CmdReadSingleBlock>
 800d80c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d810:	2b00      	cmp	r3, #0
 800d812:	d012      	beq.n	800d83a <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	4a0f      	ldr	r2, [pc, #60]	; (800d858 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d81a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d822:	431a      	orrs	r2, r3
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	2201      	movs	r2, #1
 800d82c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	2200      	movs	r2, #0
 800d834:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d836:	2301      	movs	r3, #1
 800d838:	e00a      	b.n	800d850 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d848:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 800d84a:	2300      	movs	r3, #0
 800d84c:	e000      	b.n	800d850 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800d84e:	2302      	movs	r3, #2
  }
}
 800d850:	4618      	mov	r0, r3
 800d852:	3730      	adds	r7, #48	; 0x30
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}
 800d858:	1fe00fff 	.word	0x1fe00fff

0800d85c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b08c      	sub	sp, #48	; 0x30
 800d860:	af00      	add	r7, sp, #0
 800d862:	60f8      	str	r0, [r7, #12]
 800d864:	60b9      	str	r1, [r7, #8]
 800d866:	607a      	str	r2, [r7, #4]
 800d868:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d107      	bne.n	800d884 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d878:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d880:	2301      	movs	r3, #1
 800d882:	e08d      	b.n	800d9a0 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d88a:	b2db      	uxtb	r3, r3
 800d88c:	2b01      	cmp	r3, #1
 800d88e:	f040 8086 	bne.w	800d99e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	2200      	movs	r2, #0
 800d896:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d898:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	441a      	add	r2, r3
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d907      	bls.n	800d8b6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8aa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	e074      	b.n	800d9a0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	2203      	movs	r2, #3
 800d8ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	68ba      	ldr	r2, [r7, #8]
 800d8ca:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	025a      	lsls	r2, r3, #9
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8d8:	2b01      	cmp	r3, #1
 800d8da:	d002      	beq.n	800d8e2 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8de:	025b      	lsls	r3, r3, #9
 800d8e0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d8e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d8e6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	025b      	lsls	r3, r3, #9
 800d8ec:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d8ee:	2390      	movs	r3, #144	; 0x90
 800d8f0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	f107 0210 	add.w	r2, r7, #16
 800d906:	4611      	mov	r1, r2
 800d908:	4618      	mov	r0, r3
 800d90a:	f004 fff7 	bl	80128fc <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	68da      	ldr	r2, [r3, #12]
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d91c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	68ba      	ldr	r2, [r7, #8]
 800d924:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	2201      	movs	r2, #1
 800d92c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	2b01      	cmp	r3, #1
 800d932:	d90a      	bls.n	800d94a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	22a0      	movs	r2, #160	; 0xa0
 800d938:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d940:	4618      	mov	r0, r3
 800d942:	f005 f893 	bl	8012a6c <SDMMC_CmdWriteMultiBlock>
 800d946:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d948:	e009      	b.n	800d95e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	2290      	movs	r2, #144	; 0x90
 800d94e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d956:	4618      	mov	r0, r3
 800d958:	f005 f865 	bl	8012a26 <SDMMC_CmdWriteSingleBlock>
 800d95c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d960:	2b00      	cmp	r3, #0
 800d962:	d012      	beq.n	800d98a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	4a0f      	ldr	r2, [pc, #60]	; (800d9a8 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d96a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d972:	431a      	orrs	r2, r3
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	2201      	movs	r2, #1
 800d97c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	2200      	movs	r2, #0
 800d984:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d986:	2301      	movs	r3, #1
 800d988:	e00a      	b.n	800d9a0 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d998:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 800d99a:	2300      	movs	r3, #0
 800d99c:	e000      	b.n	800d9a0 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800d99e:	2302      	movs	r3, #2
  }
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3730      	adds	r7, #48	; 0x30
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}
 800d9a8:	1fe00fff 	.word	0x1fe00fff

0800d9ac <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b084      	sub	sp, #16
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9b8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d008      	beq.n	800d9da <HAL_SD_IRQHandler+0x2e>
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	f003 0308 	and.w	r3, r3, #8
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d003      	beq.n	800d9da <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f001 f98e 	bl	800ecf4 <SD_Read_IT>
 800d9d8:	e199      	b.n	800dd0e <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	f000 80ae 	beq.w	800db46 <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d9f2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9fa:	687a      	ldr	r2, [r7, #4]
 800d9fc:	6812      	ldr	r2, [r2, #0]
 800d9fe:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800da02:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800da06:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800da16:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	68da      	ldr	r2, [r3, #12]
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800da26:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	f003 0308 	and.w	r3, r3, #8
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d038      	beq.n	800daa4 <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	f003 0302 	and.w	r3, r3, #2
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d104      	bne.n	800da46 <HAL_SD_IRQHandler+0x9a>
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	f003 0320 	and.w	r3, r3, #32
 800da42:	2b00      	cmp	r3, #0
 800da44:	d011      	beq.n	800da6a <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	4618      	mov	r0, r3
 800da4c:	f005 f832 	bl	8012ab4 <SDMMC_CmdStopTransfer>
 800da50:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d008      	beq.n	800da6a <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	431a      	orrs	r2, r3
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f000 f957 	bl	800dd18 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	4a90      	ldr	r2, [pc, #576]	; (800dcb0 <HAL_SD_IRQHandler+0x304>)
 800da70:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2201      	movs	r2, #1
 800da76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2200      	movs	r2, #0
 800da7e:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	f003 0301 	and.w	r3, r3, #1
 800da86:	2b00      	cmp	r3, #0
 800da88:	d104      	bne.n	800da94 <HAL_SD_IRQHandler+0xe8>
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	f003 0302 	and.w	r3, r3, #2
 800da90:	2b00      	cmp	r3, #0
 800da92:	d003      	beq.n	800da9c <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f006 ff63 	bl	8014960 <HAL_SD_RxCpltCallback>
 800da9a:	e138      	b.n	800dd0e <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f006 ff55 	bl	801494c <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 800daa2:	e134      	b.n	800dd0e <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800daaa:	2b00      	cmp	r3, #0
 800daac:	f000 812f 	beq.w	800dd0e <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	2200      	movs	r2, #0
 800dab6:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	2200      	movs	r2, #0
 800dabe:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	2200      	movs	r2, #0
 800dac6:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	f003 0302 	and.w	r3, r3, #2
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d104      	bne.n	800dadc <HAL_SD_IRQHandler+0x130>
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	f003 0320 	and.w	r3, r3, #32
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d011      	beq.n	800db00 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	4618      	mov	r0, r3
 800dae2:	f004 ffe7 	bl	8012ab4 <SDMMC_CmdStopTransfer>
 800dae6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d008      	beq.n	800db00 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	431a      	orrs	r2, r3
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f000 f90c 	bl	800dd18 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2201      	movs	r2, #1
 800db04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2200      	movs	r2, #0
 800db0c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	f003 0310 	and.w	r3, r3, #16
 800db14:	2b00      	cmp	r3, #0
 800db16:	d104      	bne.n	800db22 <HAL_SD_IRQHandler+0x176>
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f003 0320 	and.w	r3, r3, #32
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d002      	beq.n	800db28 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f006 ff12 	bl	801494c <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	f003 0301 	and.w	r3, r3, #1
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d105      	bne.n	800db3e <HAL_SD_IRQHandler+0x192>
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	f003 0302 	and.w	r3, r3, #2
 800db38:	2b00      	cmp	r3, #0
 800db3a:	f000 80e8 	beq.w	800dd0e <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f006 ff0e 	bl	8014960 <HAL_SD_RxCpltCallback>
}
 800db44:	e0e3      	b.n	800dd0e <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800db50:	2b00      	cmp	r3, #0
 800db52:	d008      	beq.n	800db66 <HAL_SD_IRQHandler+0x1ba>
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	f003 0308 	and.w	r3, r3, #8
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d003      	beq.n	800db66 <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f001 f919 	bl	800ed96 <SD_Write_IT>
 800db64:	e0d3      	b.n	800dd0e <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db6c:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800db70:	2b00      	cmp	r3, #0
 800db72:	f000 809f 	beq.w	800dcb4 <HAL_SD_IRQHandler+0x308>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db7c:	f003 0302 	and.w	r3, r3, #2
 800db80:	2b00      	cmp	r3, #0
 800db82:	d005      	beq.n	800db90 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db88:	f043 0202 	orr.w	r2, r3, #2
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db96:	f003 0308 	and.w	r3, r3, #8
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d005      	beq.n	800dbaa <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dba2:	f043 0208 	orr.w	r2, r3, #8
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbb0:	f003 0320 	and.w	r3, r3, #32
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d005      	beq.n	800dbc4 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbbc:	f043 0220 	orr.w	r2, r3, #32
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbca:	f003 0310 	and.w	r3, r3, #16
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d005      	beq.n	800dbde <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbd6:	f043 0210 	orr.w	r2, r3, #16
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	4a33      	ldr	r2, [pc, #204]	; (800dcb0 <HAL_SD_IRQHandler+0x304>)
 800dbe4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800dbf4:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	68da      	ldr	r2, [r3, #12]
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dc04:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dc14:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	68da      	ldr	r2, [r3, #12]
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800dc24:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f004 ff42 	bl	8012ab4 <SDMMC_CmdStopTransfer>
 800dc30:	4602      	mov	r2, r0
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc36:	431a      	orrs	r2, r3
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	68da      	ldr	r2, [r3, #12]
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dc4a:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dc54:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	f003 0308 	and.w	r3, r3, #8
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d00a      	beq.n	800dc76 <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2201      	movs	r2, #1
 800dc64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f000 f852 	bl	800dd18 <HAL_SD_ErrorCallback>
}
 800dc74:	e04b      	b.n	800dd0e <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d046      	beq.n	800dd0e <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d042      	beq.n	800dd0e <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800dc96:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2201      	movs	r2, #1
 800dca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	f000 f835 	bl	800dd18 <HAL_SD_ErrorCallback>
}
 800dcae:	e02e      	b.n	800dd0e <HAL_SD_IRQHandler+0x362>
 800dcb0:	18000f3a 	.word	0x18000f3a
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d025      	beq.n	800dd0e <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcca:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcd2:	f003 0304 	and.w	r3, r3, #4
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d10c      	bne.n	800dcf4 <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	f003 0320 	and.w	r3, r3, #32
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d003      	beq.n	800dcec <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f001 f8d4 	bl	800ee92 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 800dcea:	e010      	b.n	800dd0e <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f001 f8bc 	bl	800ee6a <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 800dcf2:	e00c      	b.n	800dd0e <HAL_SD_IRQHandler+0x362>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	f003 0320 	and.w	r3, r3, #32
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d003      	beq.n	800dd06 <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f001 f8bd 	bl	800ee7e <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 800dd04:	e003      	b.n	800dd0e <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f001 f8a5 	bl	800ee56 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 800dd0c:	e7ff      	b.n	800dd0e <HAL_SD_IRQHandler+0x362>
 800dd0e:	bf00      	nop
 800dd10:	3710      	adds	r7, #16
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
 800dd16:	bf00      	nop

0800dd18 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800dd18:	b480      	push	{r7}
 800dd1a:	b083      	sub	sp, #12
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800dd20:	bf00      	nop
 800dd22:	370c      	adds	r7, #12
 800dd24:	46bd      	mov	sp, r7
 800dd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2a:	4770      	bx	lr

0800dd2c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800dd2c:	b480      	push	{r7}
 800dd2e:	b083      	sub	sp, #12
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
 800dd34:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd3a:	0f9b      	lsrs	r3, r3, #30
 800dd3c:	b2da      	uxtb	r2, r3
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd46:	0e9b      	lsrs	r3, r3, #26
 800dd48:	b2db      	uxtb	r3, r3
 800dd4a:	f003 030f 	and.w	r3, r3, #15
 800dd4e:	b2da      	uxtb	r2, r3
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd58:	0e1b      	lsrs	r3, r3, #24
 800dd5a:	b2db      	uxtb	r3, r3
 800dd5c:	f003 0303 	and.w	r3, r3, #3
 800dd60:	b2da      	uxtb	r2, r3
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd6a:	0c1b      	lsrs	r3, r3, #16
 800dd6c:	b2da      	uxtb	r2, r3
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd76:	0a1b      	lsrs	r3, r3, #8
 800dd78:	b2da      	uxtb	r2, r3
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd82:	b2da      	uxtb	r2, r3
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd8c:	0d1b      	lsrs	r3, r3, #20
 800dd8e:	b29a      	uxth	r2, r3
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd98:	0c1b      	lsrs	r3, r3, #16
 800dd9a:	b2db      	uxtb	r3, r3
 800dd9c:	f003 030f 	and.w	r3, r3, #15
 800dda0:	b2da      	uxtb	r2, r3
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddaa:	0bdb      	lsrs	r3, r3, #15
 800ddac:	b2db      	uxtb	r3, r3
 800ddae:	f003 0301 	and.w	r3, r3, #1
 800ddb2:	b2da      	uxtb	r2, r3
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddbc:	0b9b      	lsrs	r3, r3, #14
 800ddbe:	b2db      	uxtb	r3, r3
 800ddc0:	f003 0301 	and.w	r3, r3, #1
 800ddc4:	b2da      	uxtb	r2, r3
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddce:	0b5b      	lsrs	r3, r3, #13
 800ddd0:	b2db      	uxtb	r3, r3
 800ddd2:	f003 0301 	and.w	r3, r3, #1
 800ddd6:	b2da      	uxtb	r2, r3
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dde0:	0b1b      	lsrs	r3, r3, #12
 800dde2:	b2db      	uxtb	r3, r3
 800dde4:	f003 0301 	and.w	r3, r3, #1
 800dde8:	b2da      	uxtb	r2, r3
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d163      	bne.n	800dec4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de00:	009a      	lsls	r2, r3, #2
 800de02:	f640 73fc 	movw	r3, #4092	; 0xffc
 800de06:	4013      	ands	r3, r2
 800de08:	687a      	ldr	r2, [r7, #4]
 800de0a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800de0c:	0f92      	lsrs	r2, r2, #30
 800de0e:	431a      	orrs	r2, r3
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de18:	0edb      	lsrs	r3, r3, #27
 800de1a:	b2db      	uxtb	r3, r3
 800de1c:	f003 0307 	and.w	r3, r3, #7
 800de20:	b2da      	uxtb	r2, r3
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de2a:	0e1b      	lsrs	r3, r3, #24
 800de2c:	b2db      	uxtb	r3, r3
 800de2e:	f003 0307 	and.w	r3, r3, #7
 800de32:	b2da      	uxtb	r2, r3
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de3c:	0d5b      	lsrs	r3, r3, #21
 800de3e:	b2db      	uxtb	r3, r3
 800de40:	f003 0307 	and.w	r3, r3, #7
 800de44:	b2da      	uxtb	r2, r3
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de4e:	0c9b      	lsrs	r3, r3, #18
 800de50:	b2db      	uxtb	r3, r3
 800de52:	f003 0307 	and.w	r3, r3, #7
 800de56:	b2da      	uxtb	r2, r3
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de60:	0bdb      	lsrs	r3, r3, #15
 800de62:	b2db      	uxtb	r3, r3
 800de64:	f003 0307 	and.w	r3, r3, #7
 800de68:	b2da      	uxtb	r2, r3
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	691b      	ldr	r3, [r3, #16]
 800de72:	1c5a      	adds	r2, r3, #1
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	7e1b      	ldrb	r3, [r3, #24]
 800de7c:	b2db      	uxtb	r3, r3
 800de7e:	f003 0307 	and.w	r3, r3, #7
 800de82:	3302      	adds	r3, #2
 800de84:	2201      	movs	r2, #1
 800de86:	fa02 f303 	lsl.w	r3, r2, r3
 800de8a:	687a      	ldr	r2, [r7, #4]
 800de8c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800de8e:	fb03 f202 	mul.w	r2, r3, r2
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	7a1b      	ldrb	r3, [r3, #8]
 800de9a:	b2db      	uxtb	r3, r3
 800de9c:	f003 030f 	and.w	r3, r3, #15
 800dea0:	2201      	movs	r2, #1
 800dea2:	409a      	lsls	r2, r3
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800deac:	687a      	ldr	r2, [r7, #4]
 800deae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800deb0:	0a52      	lsrs	r2, r2, #9
 800deb2:	fb03 f202 	mul.w	r2, r3, r2
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dec0:	659a      	str	r2, [r3, #88]	; 0x58
 800dec2:	e031      	b.n	800df28 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dec8:	2b01      	cmp	r3, #1
 800deca:	d11d      	bne.n	800df08 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ded0:	041b      	lsls	r3, r3, #16
 800ded2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800deda:	0c1b      	lsrs	r3, r3, #16
 800dedc:	431a      	orrs	r2, r3
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	691b      	ldr	r3, [r3, #16]
 800dee6:	3301      	adds	r3, #1
 800dee8:	029a      	lsls	r2, r3, #10
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800defc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	659a      	str	r2, [r3, #88]	; 0x58
 800df06:	e00f      	b.n	800df28 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	4a58      	ldr	r2, [pc, #352]	; (800e070 <HAL_SD_GetCardCSD+0x344>)
 800df0e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2201      	movs	r2, #1
 800df20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800df24:	2301      	movs	r3, #1
 800df26:	e09d      	b.n	800e064 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df2c:	0b9b      	lsrs	r3, r3, #14
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	f003 0301 	and.w	r3, r3, #1
 800df34:	b2da      	uxtb	r2, r3
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df3e:	09db      	lsrs	r3, r3, #7
 800df40:	b2db      	uxtb	r3, r3
 800df42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df46:	b2da      	uxtb	r2, r3
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df50:	b2db      	uxtb	r3, r3
 800df52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df56:	b2da      	uxtb	r2, r3
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df60:	0fdb      	lsrs	r3, r3, #31
 800df62:	b2da      	uxtb	r2, r3
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df6c:	0f5b      	lsrs	r3, r3, #29
 800df6e:	b2db      	uxtb	r3, r3
 800df70:	f003 0303 	and.w	r3, r3, #3
 800df74:	b2da      	uxtb	r2, r3
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df7e:	0e9b      	lsrs	r3, r3, #26
 800df80:	b2db      	uxtb	r3, r3
 800df82:	f003 0307 	and.w	r3, r3, #7
 800df86:	b2da      	uxtb	r2, r3
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df90:	0d9b      	lsrs	r3, r3, #22
 800df92:	b2db      	uxtb	r3, r3
 800df94:	f003 030f 	and.w	r3, r3, #15
 800df98:	b2da      	uxtb	r2, r3
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfa2:	0d5b      	lsrs	r3, r3, #21
 800dfa4:	b2db      	uxtb	r3, r3
 800dfa6:	f003 0301 	and.w	r3, r3, #1
 800dfaa:	b2da      	uxtb	r2, r3
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfbe:	0c1b      	lsrs	r3, r3, #16
 800dfc0:	b2db      	uxtb	r3, r3
 800dfc2:	f003 0301 	and.w	r3, r3, #1
 800dfc6:	b2da      	uxtb	r2, r3
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfd2:	0bdb      	lsrs	r3, r3, #15
 800dfd4:	b2db      	uxtb	r3, r3
 800dfd6:	f003 0301 	and.w	r3, r3, #1
 800dfda:	b2da      	uxtb	r2, r3
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfe6:	0b9b      	lsrs	r3, r3, #14
 800dfe8:	b2db      	uxtb	r3, r3
 800dfea:	f003 0301 	and.w	r3, r3, #1
 800dfee:	b2da      	uxtb	r2, r3
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dffa:	0b5b      	lsrs	r3, r3, #13
 800dffc:	b2db      	uxtb	r3, r3
 800dffe:	f003 0301 	and.w	r3, r3, #1
 800e002:	b2da      	uxtb	r2, r3
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e00e:	0b1b      	lsrs	r3, r3, #12
 800e010:	b2db      	uxtb	r3, r3
 800e012:	f003 0301 	and.w	r3, r3, #1
 800e016:	b2da      	uxtb	r2, r3
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e022:	0a9b      	lsrs	r3, r3, #10
 800e024:	b2db      	uxtb	r3, r3
 800e026:	f003 0303 	and.w	r3, r3, #3
 800e02a:	b2da      	uxtb	r2, r3
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e036:	0a1b      	lsrs	r3, r3, #8
 800e038:	b2db      	uxtb	r3, r3
 800e03a:	f003 0303 	and.w	r3, r3, #3
 800e03e:	b2da      	uxtb	r2, r3
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e04a:	085b      	lsrs	r3, r3, #1
 800e04c:	b2db      	uxtb	r3, r3
 800e04e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e052:	b2da      	uxtb	r2, r3
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	2201      	movs	r2, #1
 800e05e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e062:	2300      	movs	r3, #0
}
 800e064:	4618      	mov	r0, r3
 800e066:	370c      	adds	r7, #12
 800e068:	46bd      	mov	sp, r7
 800e06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06e:	4770      	bx	lr
 800e070:	1fe00fff 	.word	0x1fe00fff

0800e074 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b094      	sub	sp, #80	; 0x50
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
 800e07c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e07e:	2300      	movs	r3, #0
 800e080:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800e084:	f107 0308 	add.w	r3, r7, #8
 800e088:	4619      	mov	r1, r3
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f000 fbd4 	bl	800e838 <SD_SendSDStatus>
 800e090:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800e092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e094:	2b00      	cmp	r3, #0
 800e096:	d011      	beq.n	800e0bc <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	4a4f      	ldr	r2, [pc, #316]	; (800e1dc <HAL_SD_GetCardStatus+0x168>)
 800e09e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e0a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0a6:	431a      	orrs	r2, r3
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2201      	movs	r2, #1
 800e0b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e0ba:	e070      	b.n	800e19e <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	099b      	lsrs	r3, r3, #6
 800e0c0:	b2db      	uxtb	r3, r3
 800e0c2:	f003 0303 	and.w	r3, r3, #3
 800e0c6:	b2da      	uxtb	r2, r3
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	095b      	lsrs	r3, r3, #5
 800e0d0:	b2db      	uxtb	r3, r3
 800e0d2:	f003 0301 	and.w	r3, r3, #1
 800e0d6:	b2da      	uxtb	r2, r3
 800e0d8:	683b      	ldr	r3, [r7, #0]
 800e0da:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	0a1b      	lsrs	r3, r3, #8
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e0e6:	b29a      	uxth	r2, r3
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	0e1b      	lsrs	r3, r3, #24
 800e0ec:	b29b      	uxth	r3, r3
 800e0ee:	4313      	orrs	r3, r2
 800e0f0:	b29a      	uxth	r2, r3
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	061a      	lsls	r2, r3, #24
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	021b      	lsls	r3, r3, #8
 800e0fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e102:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	0a1b      	lsrs	r3, r3, #8
 800e108:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e10c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	0e1b      	lsrs	r3, r3, #24
 800e112:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e118:	693b      	ldr	r3, [r7, #16]
 800e11a:	b2da      	uxtb	r2, r3
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	0a1b      	lsrs	r3, r3, #8
 800e124:	b2da      	uxtb	r2, r3
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e12a:	693b      	ldr	r3, [r7, #16]
 800e12c:	0d1b      	lsrs	r3, r3, #20
 800e12e:	b2db      	uxtb	r3, r3
 800e130:	f003 030f 	and.w	r3, r3, #15
 800e134:	b2da      	uxtb	r2, r3
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e13a:	693b      	ldr	r3, [r7, #16]
 800e13c:	0c1b      	lsrs	r3, r3, #16
 800e13e:	b29b      	uxth	r3, r3
 800e140:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e144:	b29a      	uxth	r2, r3
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	b29b      	uxth	r3, r3
 800e14a:	b2db      	uxtb	r3, r3
 800e14c:	b29b      	uxth	r3, r3
 800e14e:	4313      	orrs	r3, r2
 800e150:	b29a      	uxth	r2, r3
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	0a9b      	lsrs	r3, r3, #10
 800e15a:	b2db      	uxtb	r3, r3
 800e15c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e160:	b2da      	uxtb	r2, r3
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	0a1b      	lsrs	r3, r3, #8
 800e16a:	b2db      	uxtb	r3, r3
 800e16c:	f003 0303 	and.w	r3, r3, #3
 800e170:	b2da      	uxtb	r2, r3
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e176:	697b      	ldr	r3, [r7, #20]
 800e178:	091b      	lsrs	r3, r3, #4
 800e17a:	b2db      	uxtb	r3, r3
 800e17c:	f003 030f 	and.w	r3, r3, #15
 800e180:	b2da      	uxtb	r2, r3
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e186:	697b      	ldr	r3, [r7, #20]
 800e188:	b2db      	uxtb	r3, r3
 800e18a:	f003 030f 	and.w	r3, r3, #15
 800e18e:	b2da      	uxtb	r2, r3
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e194:	69bb      	ldr	r3, [r7, #24]
 800e196:	0e1b      	lsrs	r3, r3, #24
 800e198:	b2da      	uxtb	r2, r3
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f004 fbd4 	bl	8012954 <SDMMC_CmdBlockLength>
 800e1ac:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800e1ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d00d      	beq.n	800e1d0 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	4a08      	ldr	r2, [pc, #32]	; (800e1dc <HAL_SD_GetCardStatus+0x168>)
 800e1ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e1c0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2201      	movs	r2, #1
 800e1c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800e1d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3750      	adds	r7, #80	; 0x50
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}
 800e1dc:	1fe00fff 	.word	0x1fe00fff

0800e1e0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e1e0:	b480      	push	{r7}
 800e1e2:	b083      	sub	sp, #12
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e22a:	2300      	movs	r3, #0
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	370c      	adds	r7, #12
 800e230:	46bd      	mov	sp, r7
 800e232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e236:	4770      	bx	lr

0800e238 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e238:	b5b0      	push	{r4, r5, r7, lr}
 800e23a:	b090      	sub	sp, #64	; 0x40
 800e23c:	af04      	add	r7, sp, #16
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800e242:	2300      	movs	r3, #0
 800e244:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2203      	movs	r2, #3
 800e24c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e254:	2b03      	cmp	r3, #3
 800e256:	d02e      	beq.n	800e2b6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e25e:	d106      	bne.n	800e26e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e264:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	639a      	str	r2, [r3, #56]	; 0x38
 800e26c:	e029      	b.n	800e2c2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e274:	d10a      	bne.n	800e28c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f000 fbd6 	bl	800ea28 <SD_WideBus_Enable>
 800e27c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e284:	431a      	orrs	r2, r3
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	639a      	str	r2, [r3, #56]	; 0x38
 800e28a:	e01a      	b.n	800e2c2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d10a      	bne.n	800e2a8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f000 fc13 	bl	800eabe <SD_WideBus_Disable>
 800e298:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a0:	431a      	orrs	r2, r3
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	639a      	str	r2, [r3, #56]	; 0x38
 800e2a6:	e00c      	b.n	800e2c2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2ac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	639a      	str	r2, [r3, #56]	; 0x38
 800e2b4:	e005      	b.n	800e2c2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2ba:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d007      	beq.n	800e2da <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	4a60      	ldr	r2, [pc, #384]	; (800e450 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e2d0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e2d8:	e097      	b.n	800e40a <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800e2da:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800e2de:	f7fd fed1 	bl	800c084 <HAL_RCCEx_GetPeriphCLKFreq>
 800e2e2:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800e2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	f000 8086 	beq.w	800e3f8 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	685b      	ldr	r3, [r3, #4]
 800e2f0:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	689b      	ldr	r3, [r3, #8]
 800e2f6:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	691b      	ldr	r3, [r3, #16]
 800e300:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	695a      	ldr	r2, [r3, #20]
 800e306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e308:	4952      	ldr	r1, [pc, #328]	; (800e454 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e30a:	fba1 1303 	umull	r1, r3, r1, r3
 800e30e:	0e1b      	lsrs	r3, r3, #24
 800e310:	429a      	cmp	r2, r3
 800e312:	d303      	bcc.n	800e31c <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	695b      	ldr	r3, [r3, #20]
 800e318:	61fb      	str	r3, [r7, #28]
 800e31a:	e05a      	b.n	800e3d2 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e324:	d103      	bne.n	800e32e <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	695b      	ldr	r3, [r3, #20]
 800e32a:	61fb      	str	r3, [r7, #28]
 800e32c:	e051      	b.n	800e3d2 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e336:	d126      	bne.n	800e386 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	695b      	ldr	r3, [r3, #20]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d10e      	bne.n	800e35e <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800e340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e342:	4a45      	ldr	r2, [pc, #276]	; (800e458 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e344:	4293      	cmp	r3, r2
 800e346:	d906      	bls.n	800e356 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e34a:	4a42      	ldr	r2, [pc, #264]	; (800e454 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e34c:	fba2 2303 	umull	r2, r3, r2, r3
 800e350:	0e5b      	lsrs	r3, r3, #25
 800e352:	61fb      	str	r3, [r7, #28]
 800e354:	e03d      	b.n	800e3d2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	695b      	ldr	r3, [r3, #20]
 800e35a:	61fb      	str	r3, [r7, #28]
 800e35c:	e039      	b.n	800e3d2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	695b      	ldr	r3, [r3, #20]
 800e362:	005b      	lsls	r3, r3, #1
 800e364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e366:	fbb2 f3f3 	udiv	r3, r2, r3
 800e36a:	4a3b      	ldr	r2, [pc, #236]	; (800e458 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e36c:	4293      	cmp	r3, r2
 800e36e:	d906      	bls.n	800e37e <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e372:	4a38      	ldr	r2, [pc, #224]	; (800e454 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e374:	fba2 2303 	umull	r2, r3, r2, r3
 800e378:	0e5b      	lsrs	r3, r3, #25
 800e37a:	61fb      	str	r3, [r7, #28]
 800e37c:	e029      	b.n	800e3d2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	695b      	ldr	r3, [r3, #20]
 800e382:	61fb      	str	r3, [r7, #28]
 800e384:	e025      	b.n	800e3d2 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	695b      	ldr	r3, [r3, #20]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d10e      	bne.n	800e3ac <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800e38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e390:	4a32      	ldr	r2, [pc, #200]	; (800e45c <HAL_SD_ConfigWideBusOperation+0x224>)
 800e392:	4293      	cmp	r3, r2
 800e394:	d906      	bls.n	800e3a4 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e398:	4a2e      	ldr	r2, [pc, #184]	; (800e454 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e39a:	fba2 2303 	umull	r2, r3, r2, r3
 800e39e:	0e1b      	lsrs	r3, r3, #24
 800e3a0:	61fb      	str	r3, [r7, #28]
 800e3a2:	e016      	b.n	800e3d2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	695b      	ldr	r3, [r3, #20]
 800e3a8:	61fb      	str	r3, [r7, #28]
 800e3aa:	e012      	b.n	800e3d2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	695b      	ldr	r3, [r3, #20]
 800e3b0:	005b      	lsls	r3, r3, #1
 800e3b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3b8:	4a28      	ldr	r2, [pc, #160]	; (800e45c <HAL_SD_ConfigWideBusOperation+0x224>)
 800e3ba:	4293      	cmp	r3, r2
 800e3bc:	d906      	bls.n	800e3cc <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c0:	4a24      	ldr	r2, [pc, #144]	; (800e454 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e3c2:	fba2 2303 	umull	r2, r3, r2, r3
 800e3c6:	0e1b      	lsrs	r3, r3, #24
 800e3c8:	61fb      	str	r3, [r7, #28]
 800e3ca:	e002      	b.n	800e3d2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	695b      	ldr	r3, [r3, #20]
 800e3d0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	699b      	ldr	r3, [r3, #24]
 800e3d6:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681d      	ldr	r5, [r3, #0]
 800e3dc:	466c      	mov	r4, sp
 800e3de:	f107 0318 	add.w	r3, r7, #24
 800e3e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e3e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e3ea:	f107 030c 	add.w	r3, r7, #12
 800e3ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e3f0:	4628      	mov	r0, r5
 800e3f2:	f004 f9d1 	bl	8012798 <SDMMC_Init>
 800e3f6:	e008      	b.n	800e40a <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3fc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800e404:	2301      	movs	r3, #1
 800e406:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e412:	4618      	mov	r0, r3
 800e414:	f004 fa9e 	bl	8012954 <SDMMC_CmdBlockLength>
 800e418:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d00c      	beq.n	800e43a <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	4a0a      	ldr	r2, [pc, #40]	; (800e450 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e426:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e42e:	431a      	orrs	r2, r3
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e434:	2301      	movs	r3, #1
 800e436:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2201      	movs	r2, #1
 800e43e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800e442:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e446:	4618      	mov	r0, r3
 800e448:	3730      	adds	r7, #48	; 0x30
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bdb0      	pop	{r4, r5, r7, pc}
 800e44e:	bf00      	nop
 800e450:	1fe00fff 	.word	0x1fe00fff
 800e454:	55e63b89 	.word	0x55e63b89
 800e458:	02faf080 	.word	0x02faf080
 800e45c:	017d7840 	.word	0x017d7840

0800e460 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b086      	sub	sp, #24
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e468:	2300      	movs	r3, #0
 800e46a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e46c:	f107 030c 	add.w	r3, r7, #12
 800e470:	4619      	mov	r1, r3
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	f000 fab0 	bl	800e9d8 <SD_SendStatus>
 800e478:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d005      	beq.n	800e48c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	431a      	orrs	r2, r3
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	0a5b      	lsrs	r3, r3, #9
 800e490:	f003 030f 	and.w	r3, r3, #15
 800e494:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e496:	693b      	ldr	r3, [r7, #16]
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3718      	adds	r7, #24
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}

0800e4a0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e4a0:	b5b0      	push	{r4, r5, r7, lr}
 800e4a2:	b090      	sub	sp, #64	; 0x40
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e4a8:	2301      	movs	r3, #1
 800e4aa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f004 f9cb 	bl	801284c <SDMMC_GetPowerState>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d102      	bne.n	800e4c2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e4bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e4c0:	e0a9      	b.n	800e616 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4c6:	2b03      	cmp	r3, #3
 800e4c8:	d02e      	beq.n	800e528 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f004 fc10 	bl	8012cf4 <SDMMC_CmdSendCID>
 800e4d4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e4d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d001      	beq.n	800e4e0 <SD_InitCard+0x40>
    {
      return errorstate;
 800e4dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4de:	e09a      	b.n	800e616 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	2100      	movs	r1, #0
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f004 f9f5 	bl	80128d6 <SDMMC_GetResponse>
 800e4ec:	4602      	mov	r2, r0
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	2104      	movs	r1, #4
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f004 f9ec 	bl	80128d6 <SDMMC_GetResponse>
 800e4fe:	4602      	mov	r2, r0
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	2108      	movs	r1, #8
 800e50a:	4618      	mov	r0, r3
 800e50c:	f004 f9e3 	bl	80128d6 <SDMMC_GetResponse>
 800e510:	4602      	mov	r2, r0
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	210c      	movs	r1, #12
 800e51c:	4618      	mov	r0, r3
 800e51e:	f004 f9da 	bl	80128d6 <SDMMC_GetResponse>
 800e522:	4602      	mov	r2, r0
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e52c:	2b03      	cmp	r3, #3
 800e52e:	d00d      	beq.n	800e54c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	f107 020e 	add.w	r2, r7, #14
 800e538:	4611      	mov	r1, r2
 800e53a:	4618      	mov	r0, r3
 800e53c:	f004 fc19 	bl	8012d72 <SDMMC_CmdSetRelAdd>
 800e540:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e544:	2b00      	cmp	r3, #0
 800e546:	d001      	beq.n	800e54c <SD_InitCard+0xac>
    {
      return errorstate;
 800e548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e54a:	e064      	b.n	800e616 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e550:	2b03      	cmp	r3, #3
 800e552:	d036      	beq.n	800e5c2 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e554:	89fb      	ldrh	r3, [r7, #14]
 800e556:	461a      	mov	r2, r3
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681a      	ldr	r2, [r3, #0]
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e564:	041b      	lsls	r3, r3, #16
 800e566:	4619      	mov	r1, r3
 800e568:	4610      	mov	r0, r2
 800e56a:	f004 fbe2 	bl	8012d32 <SDMMC_CmdSendCSD>
 800e56e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e572:	2b00      	cmp	r3, #0
 800e574:	d001      	beq.n	800e57a <SD_InitCard+0xda>
    {
      return errorstate;
 800e576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e578:	e04d      	b.n	800e616 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	2100      	movs	r1, #0
 800e580:	4618      	mov	r0, r3
 800e582:	f004 f9a8 	bl	80128d6 <SDMMC_GetResponse>
 800e586:	4602      	mov	r2, r0
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	2104      	movs	r1, #4
 800e592:	4618      	mov	r0, r3
 800e594:	f004 f99f 	bl	80128d6 <SDMMC_GetResponse>
 800e598:	4602      	mov	r2, r0
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	2108      	movs	r1, #8
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f004 f996 	bl	80128d6 <SDMMC_GetResponse>
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	210c      	movs	r1, #12
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f004 f98d 	bl	80128d6 <SDMMC_GetResponse>
 800e5bc:	4602      	mov	r2, r0
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	2104      	movs	r1, #4
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f004 f984 	bl	80128d6 <SDMMC_GetResponse>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	0d1a      	lsrs	r2, r3, #20
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e5d6:	f107 0310 	add.w	r3, r7, #16
 800e5da:	4619      	mov	r1, r3
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	f7ff fba5 	bl	800dd2c <HAL_SD_GetCardCSD>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d002      	beq.n	800e5ee <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e5e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e5ec:	e013      	b.n	800e616 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6819      	ldr	r1, [r3, #0]
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5f6:	041b      	lsls	r3, r3, #16
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	461c      	mov	r4, r3
 800e5fc:	4615      	mov	r5, r2
 800e5fe:	4622      	mov	r2, r4
 800e600:	462b      	mov	r3, r5
 800e602:	4608      	mov	r0, r1
 800e604:	f004 fa8c 	bl	8012b20 <SDMMC_CmdSelDesel>
 800e608:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e60a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d001      	beq.n	800e614 <SD_InitCard+0x174>
  {
    return errorstate;
 800e610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e612:	e000      	b.n	800e616 <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e614:	2300      	movs	r3, #0
}
 800e616:	4618      	mov	r0, r3
 800e618:	3740      	adds	r7, #64	; 0x40
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e620 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b088      	sub	sp, #32
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e628:	2300      	movs	r3, #0
 800e62a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800e62c:	2300      	movs	r3, #0
 800e62e:	61fb      	str	r3, [r7, #28]
 800e630:	2300      	movs	r3, #0
 800e632:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 800e634:	f7f8 ff32 	bl	800749c <HAL_GetTick>
 800e638:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	4618      	mov	r0, r3
 800e640:	f004 fa92 	bl	8012b68 <SDMMC_CmdGoIdleState>
 800e644:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d001      	beq.n	800e650 <SD_PowerON+0x30>
  {
    return errorstate;
 800e64c:	693b      	ldr	r3, [r7, #16]
 800e64e:	e0ed      	b.n	800e82c <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	4618      	mov	r0, r3
 800e656:	f004 faa5 	bl	8012ba4 <SDMMC_CmdOperCond>
 800e65a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d00d      	beq.n	800e67e <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	2200      	movs	r2, #0
 800e666:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	4618      	mov	r0, r3
 800e66e:	f004 fa7b 	bl	8012b68 <SDMMC_CmdGoIdleState>
 800e672:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e674:	693b      	ldr	r3, [r7, #16]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d004      	beq.n	800e684 <SD_PowerON+0x64>
    {
      return errorstate;
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	e0d6      	b.n	800e82c <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2201      	movs	r2, #1
 800e682:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e688:	2b01      	cmp	r3, #1
 800e68a:	d137      	bne.n	800e6fc <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	2100      	movs	r1, #0
 800e692:	4618      	mov	r0, r3
 800e694:	f004 faa6 	bl	8012be4 <SDMMC_CmdAppCommand>
 800e698:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e69a:	693b      	ldr	r3, [r7, #16]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d02d      	beq.n	800e6fc <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e6a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e6a4:	e0c2      	b.n	800e82c <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	2100      	movs	r1, #0
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f004 fa99 	bl	8012be4 <SDMMC_CmdAppCommand>
 800e6b2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d001      	beq.n	800e6be <SD_PowerON+0x9e>
    {
      return errorstate;
 800e6ba:	693b      	ldr	r3, [r7, #16]
 800e6bc:	e0b6      	b.n	800e82c <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	495c      	ldr	r1, [pc, #368]	; (800e834 <SD_PowerON+0x214>)
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f004 fab0 	bl	8012c2a <SDMMC_CmdAppOperCommand>
 800e6ca:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d002      	beq.n	800e6d8 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e6d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e6d6:	e0a9      	b.n	800e82c <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	2100      	movs	r1, #0
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f004 f8f9 	bl	80128d6 <SDMMC_GetResponse>
 800e6e4:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e6e6:	69fb      	ldr	r3, [r7, #28]
 800e6e8:	0fdb      	lsrs	r3, r3, #31
 800e6ea:	2b01      	cmp	r3, #1
 800e6ec:	d101      	bne.n	800e6f2 <SD_PowerON+0xd2>
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	e000      	b.n	800e6f4 <SD_PowerON+0xd4>
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	61bb      	str	r3, [r7, #24]

    count++;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	3301      	adds	r3, #1
 800e6fa:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e702:	4293      	cmp	r3, r2
 800e704:	d802      	bhi.n	800e70c <SD_PowerON+0xec>
 800e706:	69bb      	ldr	r3, [r7, #24]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d0cc      	beq.n	800e6a6 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e712:	4293      	cmp	r3, r2
 800e714:	d902      	bls.n	800e71c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e716:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e71a:	e087      	b.n	800e82c <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e71c:	69fb      	ldr	r3, [r7, #28]
 800e71e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e722:	2b00      	cmp	r3, #0
 800e724:	d07e      	beq.n	800e824 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	2201      	movs	r2, #1
 800e72a:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	699b      	ldr	r3, [r3, #24]
 800e730:	2b01      	cmp	r3, #1
 800e732:	d17a      	bne.n	800e82a <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800e734:	69fb      	ldr	r3, [r7, #28]
 800e736:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d075      	beq.n	800e82a <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e744:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	681a      	ldr	r2, [r3, #0]
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	f042 0208 	orr.w	r2, r2, #8
 800e754:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	4618      	mov	r0, r3
 800e75c:	f004 fb70 	bl	8012e40 <SDMMC_CmdVoltageSwitch>
 800e760:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800e762:	693b      	ldr	r3, [r7, #16]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d00c      	beq.n	800e782 <SD_PowerON+0x162>
        {
          return errorstate;
 800e768:	693b      	ldr	r3, [r7, #16]
 800e76a:	e05f      	b.n	800e82c <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e76c:	f7f8 fe96 	bl	800749c <HAL_GetTick>
 800e770:	4602      	mov	r2, r0
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	1ad3      	subs	r3, r2, r3
 800e776:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e77a:	d102      	bne.n	800e782 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800e77c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e780:	e054      	b.n	800e82c <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e788:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e78c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e790:	d1ec      	bne.n	800e76c <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800e79a:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e7a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e7aa:	d002      	beq.n	800e7b2 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800e7ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e7b0:	e03c      	b.n	800e82c <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800e7b2:	2001      	movs	r0, #1
 800e7b4:	f000 fb44 	bl	800ee40 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	681a      	ldr	r2, [r3, #0]
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	f042 0204 	orr.w	r2, r2, #4
 800e7c6:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800e7c8:	e00a      	b.n	800e7e0 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e7ca:	f7f8 fe67 	bl	800749c <HAL_GetTick>
 800e7ce:	4602      	mov	r2, r0
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	1ad3      	subs	r3, r2, r3
 800e7d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e7d8:	d102      	bne.n	800e7e0 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800e7da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e7de:	e025      	b.n	800e82c <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e7ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e7ee:	d1ec      	bne.n	800e7ca <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e7f8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e800:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e804:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e808:	d102      	bne.n	800e810 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e80a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e80e:	e00d      	b.n	800e82c <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	2213      	movs	r2, #19
 800e816:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e820:	639a      	str	r2, [r3, #56]	; 0x38
 800e822:	e002      	b.n	800e82a <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2200      	movs	r2, #0
 800e828:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800e82a:	2300      	movs	r3, #0
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	3720      	adds	r7, #32
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}
 800e834:	c1100000 	.word	0xc1100000

0800e838 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b08c      	sub	sp, #48	; 0x30
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
 800e840:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e842:	f7f8 fe2b 	bl	800749c <HAL_GetTick>
 800e846:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	2100      	movs	r1, #0
 800e852:	4618      	mov	r0, r3
 800e854:	f004 f83f 	bl	80128d6 <SDMMC_GetResponse>
 800e858:	4603      	mov	r3, r0
 800e85a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e85e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e862:	d102      	bne.n	800e86a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e864:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e868:	e0b0      	b.n	800e9cc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	2140      	movs	r1, #64	; 0x40
 800e870:	4618      	mov	r0, r3
 800e872:	f004 f86f 	bl	8012954 <SDMMC_CmdBlockLength>
 800e876:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e878:	6a3b      	ldr	r3, [r7, #32]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d005      	beq.n	800e88a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e886:	6a3b      	ldr	r3, [r7, #32]
 800e888:	e0a0      	b.n	800e9cc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681a      	ldr	r2, [r3, #0]
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e892:	041b      	lsls	r3, r3, #16
 800e894:	4619      	mov	r1, r3
 800e896:	4610      	mov	r0, r2
 800e898:	f004 f9a4 	bl	8012be4 <SDMMC_CmdAppCommand>
 800e89c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e89e:	6a3b      	ldr	r3, [r7, #32]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d005      	beq.n	800e8b0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e8ac:	6a3b      	ldr	r3, [r7, #32]
 800e8ae:	e08d      	b.n	800e9cc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e8b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e8b4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e8b6:	2340      	movs	r3, #64	; 0x40
 800e8b8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e8ba:	2360      	movs	r3, #96	; 0x60
 800e8bc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e8be:	2302      	movs	r3, #2
 800e8c0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e8c6:	2301      	movs	r3, #1
 800e8c8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	f107 0208 	add.w	r2, r7, #8
 800e8d2:	4611      	mov	r1, r2
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f004 f811 	bl	80128fc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f004 fa8c 	bl	8012dfc <SDMMC_CmdStatusRegister>
 800e8e4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e8e6:	6a3b      	ldr	r3, [r7, #32]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d02b      	beq.n	800e944 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e8f4:	6a3b      	ldr	r3, [r7, #32]
 800e8f6:	e069      	b.n	800e9cc <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e902:	2b00      	cmp	r3, #0
 800e904:	d013      	beq.n	800e92e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800e906:	2300      	movs	r3, #0
 800e908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e90a:	e00d      	b.n	800e928 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	4618      	mov	r0, r3
 800e912:	f003 ff6b 	bl	80127ec <SDMMC_ReadFIFO>
 800e916:	4602      	mov	r2, r0
 800e918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e91a:	601a      	str	r2, [r3, #0]
        pData++;
 800e91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e91e:	3304      	adds	r3, #4
 800e920:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800e922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e924:	3301      	adds	r3, #1
 800e926:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e92a:	2b07      	cmp	r3, #7
 800e92c:	d9ee      	bls.n	800e90c <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e92e:	f7f8 fdb5 	bl	800749c <HAL_GetTick>
 800e932:	4602      	mov	r2, r0
 800e934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e936:	1ad3      	subs	r3, r2, r3
 800e938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e93c:	d102      	bne.n	800e944 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e93e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e942:	e043      	b.n	800e9cc <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e94a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d0d2      	beq.n	800e8f8 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e958:	f003 0308 	and.w	r3, r3, #8
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d001      	beq.n	800e964 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e960:	2308      	movs	r3, #8
 800e962:	e033      	b.n	800e9cc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e96a:	f003 0302 	and.w	r3, r3, #2
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d001      	beq.n	800e976 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e972:	2302      	movs	r3, #2
 800e974:	e02a      	b.n	800e9cc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e97c:	f003 0320 	and.w	r3, r3, #32
 800e980:	2b00      	cmp	r3, #0
 800e982:	d017      	beq.n	800e9b4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e984:	2320      	movs	r3, #32
 800e986:	e021      	b.n	800e9cc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	4618      	mov	r0, r3
 800e98e:	f003 ff2d 	bl	80127ec <SDMMC_ReadFIFO>
 800e992:	4602      	mov	r2, r0
 800e994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e996:	601a      	str	r2, [r3, #0]
    pData++;
 800e998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e99a:	3304      	adds	r3, #4
 800e99c:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e99e:	f7f8 fd7d 	bl	800749c <HAL_GetTick>
 800e9a2:	4602      	mov	r2, r0
 800e9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a6:	1ad3      	subs	r3, r2, r3
 800e9a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e9ac:	d102      	bne.n	800e9b4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e9ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e9b2:	e00b      	b.n	800e9cc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d1e2      	bne.n	800e988 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	4a03      	ldr	r2, [pc, #12]	; (800e9d4 <SD_SendSDStatus+0x19c>)
 800e9c8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e9ca:	2300      	movs	r3, #0
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	3730      	adds	r7, #48	; 0x30
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}
 800e9d4:	18000f3a 	.word	0x18000f3a

0800e9d8 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b084      	sub	sp, #16
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d102      	bne.n	800e9ee <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e9e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e9ec:	e018      	b.n	800ea20 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681a      	ldr	r2, [r3, #0]
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9f6:	041b      	lsls	r3, r3, #16
 800e9f8:	4619      	mov	r1, r3
 800e9fa:	4610      	mov	r0, r2
 800e9fc:	f004 f9db 	bl	8012db6 <SDMMC_CmdSendStatus>
 800ea00:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d001      	beq.n	800ea0c <SD_SendStatus+0x34>
  {
    return errorstate;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	e009      	b.n	800ea20 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	2100      	movs	r1, #0
 800ea12:	4618      	mov	r0, r3
 800ea14:	f003 ff5f 	bl	80128d6 <SDMMC_GetResponse>
 800ea18:	4602      	mov	r2, r0
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ea1e:	2300      	movs	r3, #0
}
 800ea20:	4618      	mov	r0, r3
 800ea22:	3710      	adds	r7, #16
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}

0800ea28 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b086      	sub	sp, #24
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ea30:	2300      	movs	r3, #0
 800ea32:	60fb      	str	r3, [r7, #12]
 800ea34:	2300      	movs	r3, #0
 800ea36:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	2100      	movs	r1, #0
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f003 ff49 	bl	80128d6 <SDMMC_GetResponse>
 800ea44:	4603      	mov	r3, r0
 800ea46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ea4e:	d102      	bne.n	800ea56 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ea50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ea54:	e02f      	b.n	800eab6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ea56:	f107 030c 	add.w	r3, r7, #12
 800ea5a:	4619      	mov	r1, r3
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f000 f879 	bl	800eb54 <SD_FindSCR>
 800ea62:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d001      	beq.n	800ea6e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ea6a:	697b      	ldr	r3, [r7, #20]
 800ea6c:	e023      	b.n	800eab6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ea6e:	693b      	ldr	r3, [r7, #16]
 800ea70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d01c      	beq.n	800eab2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681a      	ldr	r2, [r3, #0]
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea80:	041b      	lsls	r3, r3, #16
 800ea82:	4619      	mov	r1, r3
 800ea84:	4610      	mov	r0, r2
 800ea86:	f004 f8ad 	bl	8012be4 <SDMMC_CmdAppCommand>
 800ea8a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ea8c:	697b      	ldr	r3, [r7, #20]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d001      	beq.n	800ea96 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ea92:	697b      	ldr	r3, [r7, #20]
 800ea94:	e00f      	b.n	800eab6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	2102      	movs	r1, #2
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f004 f8e4 	bl	8012c6a <SDMMC_CmdBusWidth>
 800eaa2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800eaa4:	697b      	ldr	r3, [r7, #20]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d001      	beq.n	800eaae <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800eaaa:	697b      	ldr	r3, [r7, #20]
 800eaac:	e003      	b.n	800eab6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800eaae:	2300      	movs	r3, #0
 800eab0:	e001      	b.n	800eab6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eab2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	3718      	adds	r7, #24
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}

0800eabe <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800eabe:	b580      	push	{r7, lr}
 800eac0:	b086      	sub	sp, #24
 800eac2:	af00      	add	r7, sp, #0
 800eac4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800eac6:	2300      	movs	r3, #0
 800eac8:	60fb      	str	r3, [r7, #12]
 800eaca:	2300      	movs	r3, #0
 800eacc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	2100      	movs	r1, #0
 800ead4:	4618      	mov	r0, r3
 800ead6:	f003 fefe 	bl	80128d6 <SDMMC_GetResponse>
 800eada:	4603      	mov	r3, r0
 800eadc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eae0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eae4:	d102      	bne.n	800eaec <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800eae6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eaea:	e02f      	b.n	800eb4c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800eaec:	f107 030c 	add.w	r3, r7, #12
 800eaf0:	4619      	mov	r1, r3
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f000 f82e 	bl	800eb54 <SD_FindSCR>
 800eaf8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800eafa:	697b      	ldr	r3, [r7, #20]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d001      	beq.n	800eb04 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800eb00:	697b      	ldr	r3, [r7, #20]
 800eb02:	e023      	b.n	800eb4c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800eb04:	693b      	ldr	r3, [r7, #16]
 800eb06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d01c      	beq.n	800eb48 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681a      	ldr	r2, [r3, #0]
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb16:	041b      	lsls	r3, r3, #16
 800eb18:	4619      	mov	r1, r3
 800eb1a:	4610      	mov	r0, r2
 800eb1c:	f004 f862 	bl	8012be4 <SDMMC_CmdAppCommand>
 800eb20:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800eb22:	697b      	ldr	r3, [r7, #20]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d001      	beq.n	800eb2c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800eb28:	697b      	ldr	r3, [r7, #20]
 800eb2a:	e00f      	b.n	800eb4c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	2100      	movs	r1, #0
 800eb32:	4618      	mov	r0, r3
 800eb34:	f004 f899 	bl	8012c6a <SDMMC_CmdBusWidth>
 800eb38:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d001      	beq.n	800eb44 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800eb40:	697b      	ldr	r3, [r7, #20]
 800eb42:	e003      	b.n	800eb4c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800eb44:	2300      	movs	r3, #0
 800eb46:	e001      	b.n	800eb4c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eb48:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3718      	adds	r7, #24
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}

0800eb54 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b08e      	sub	sp, #56	; 0x38
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800eb5e:	f7f8 fc9d 	bl	800749c <HAL_GetTick>
 800eb62:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800eb64:	2300      	movs	r3, #0
 800eb66:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800eb68:	2300      	movs	r3, #0
 800eb6a:	60bb      	str	r3, [r7, #8]
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	2108      	movs	r1, #8
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f003 feea 	bl	8012954 <SDMMC_CmdBlockLength>
 800eb80:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800eb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d001      	beq.n	800eb8c <SD_FindSCR+0x38>
  {
    return errorstate;
 800eb88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb8a:	e0ad      	b.n	800ece8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681a      	ldr	r2, [r3, #0]
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb94:	041b      	lsls	r3, r3, #16
 800eb96:	4619      	mov	r1, r3
 800eb98:	4610      	mov	r0, r2
 800eb9a:	f004 f823 	bl	8012be4 <SDMMC_CmdAppCommand>
 800eb9e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800eba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d001      	beq.n	800ebaa <SD_FindSCR+0x56>
  {
    return errorstate;
 800eba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba8:	e09e      	b.n	800ece8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ebaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ebae:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ebb0:	2308      	movs	r3, #8
 800ebb2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ebb4:	2330      	movs	r3, #48	; 0x30
 800ebb6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ebb8:	2302      	movs	r3, #2
 800ebba:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f107 0210 	add.w	r2, r7, #16
 800ebcc:	4611      	mov	r1, r2
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f003 fe94 	bl	80128fc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f004 f869 	bl	8012cb0 <SDMMC_CmdSendSCR>
 800ebde:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ebe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d027      	beq.n	800ec36 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800ebe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe8:	e07e      	b.n	800ece8 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d113      	bne.n	800ec20 <SD_FindSCR+0xcc>
 800ebf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d110      	bne.n	800ec20 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	4618      	mov	r0, r3
 800ec04:	f003 fdf2 	bl	80127ec <SDMMC_ReadFIFO>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	4618      	mov	r0, r3
 800ec12:	f003 fdeb 	bl	80127ec <SDMMC_ReadFIFO>
 800ec16:	4603      	mov	r3, r0
 800ec18:	60fb      	str	r3, [r7, #12]
      index++;
 800ec1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec1c:	3301      	adds	r3, #1
 800ec1e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ec20:	f7f8 fc3c 	bl	800749c <HAL_GetTick>
 800ec24:	4602      	mov	r2, r0
 800ec26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec28:	1ad3      	subs	r3, r2, r3
 800ec2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec2e:	d102      	bne.n	800ec36 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ec30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ec34:	e058      	b.n	800ece8 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec3c:	f240 532a 	movw	r3, #1322	; 0x52a
 800ec40:	4013      	ands	r3, r2
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d0d1      	beq.n	800ebea <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec4c:	f003 0308 	and.w	r3, r3, #8
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d005      	beq.n	800ec60 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	2208      	movs	r2, #8
 800ec5a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ec5c:	2308      	movs	r3, #8
 800ec5e:	e043      	b.n	800ece8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec66:	f003 0302 	and.w	r3, r3, #2
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d005      	beq.n	800ec7a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	2202      	movs	r2, #2
 800ec74:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ec76:	2302      	movs	r3, #2
 800ec78:	e036      	b.n	800ece8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec80:	f003 0320 	and.w	r3, r3, #32
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d005      	beq.n	800ec94 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	2220      	movs	r2, #32
 800ec8e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ec90:	2320      	movs	r3, #32
 800ec92:	e029      	b.n	800ece8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	4a15      	ldr	r2, [pc, #84]	; (800ecf0 <SD_FindSCR+0x19c>)
 800ec9a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	061a      	lsls	r2, r3, #24
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	021b      	lsls	r3, r3, #8
 800eca4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eca8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	0a1b      	lsrs	r3, r3, #8
 800ecae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ecb2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	0e1b      	lsrs	r3, r3, #24
 800ecb8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ecba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecbc:	601a      	str	r2, [r3, #0]
    scr++;
 800ecbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc0:	3304      	adds	r3, #4
 800ecc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	061a      	lsls	r2, r3, #24
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	021b      	lsls	r3, r3, #8
 800eccc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ecd0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ecd2:	68bb      	ldr	r3, [r7, #8]
 800ecd4:	0a1b      	lsrs	r3, r3, #8
 800ecd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ecda:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ecdc:	68bb      	ldr	r3, [r7, #8]
 800ecde:	0e1b      	lsrs	r3, r3, #24
 800ece0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ece2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ece6:	2300      	movs	r3, #0
}
 800ece8:	4618      	mov	r0, r3
 800ecea:	3738      	adds	r7, #56	; 0x38
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}
 800ecf0:	18000f3a 	.word	0x18000f3a

0800ecf4 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b086      	sub	sp, #24
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed00:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed06:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800ed08:	693b      	ldr	r3, [r7, #16]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d03f      	beq.n	800ed8e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800ed0e:	2300      	movs	r3, #0
 800ed10:	617b      	str	r3, [r7, #20]
 800ed12:	e033      	b.n	800ed7c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f003 fd67 	bl	80127ec <SDMMC_ReadFIFO>
 800ed1e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	b2da      	uxtb	r2, r3
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	3b01      	subs	r3, #1
 800ed32:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ed34:	68bb      	ldr	r3, [r7, #8]
 800ed36:	0a1b      	lsrs	r3, r3, #8
 800ed38:	b2da      	uxtb	r2, r3
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	3301      	adds	r3, #1
 800ed42:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ed44:	693b      	ldr	r3, [r7, #16]
 800ed46:	3b01      	subs	r3, #1
 800ed48:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ed4a:	68bb      	ldr	r3, [r7, #8]
 800ed4c:	0c1b      	lsrs	r3, r3, #16
 800ed4e:	b2da      	uxtb	r2, r3
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	3301      	adds	r3, #1
 800ed58:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ed5a:	693b      	ldr	r3, [r7, #16]
 800ed5c:	3b01      	subs	r3, #1
 800ed5e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ed60:	68bb      	ldr	r3, [r7, #8]
 800ed62:	0e1b      	lsrs	r3, r3, #24
 800ed64:	b2da      	uxtb	r2, r3
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	3301      	adds	r3, #1
 800ed6e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ed70:	693b      	ldr	r3, [r7, #16]
 800ed72:	3b01      	subs	r3, #1
 800ed74:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	3301      	adds	r3, #1
 800ed7a:	617b      	str	r3, [r7, #20]
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	2b07      	cmp	r3, #7
 800ed80:	d9c8      	bls.n	800ed14 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	68fa      	ldr	r2, [r7, #12]
 800ed86:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	693a      	ldr	r2, [r7, #16]
 800ed8c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800ed8e:	bf00      	nop
 800ed90:	3718      	adds	r7, #24
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}

0800ed96 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ed96:	b580      	push	{r7, lr}
 800ed98:	b086      	sub	sp, #24
 800ed9a:	af00      	add	r7, sp, #0
 800ed9c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6a1b      	ldr	r3, [r3, #32]
 800eda2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eda8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800edaa:	693b      	ldr	r3, [r7, #16]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d043      	beq.n	800ee38 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800edb0:	2300      	movs	r3, #0
 800edb2:	617b      	str	r3, [r7, #20]
 800edb4:	e037      	b.n	800ee26 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	781b      	ldrb	r3, [r3, #0]
 800edba:	60bb      	str	r3, [r7, #8]
      tmp++;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	3301      	adds	r3, #1
 800edc0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800edc2:	693b      	ldr	r3, [r7, #16]
 800edc4:	3b01      	subs	r3, #1
 800edc6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	781b      	ldrb	r3, [r3, #0]
 800edcc:	021a      	lsls	r2, r3, #8
 800edce:	68bb      	ldr	r3, [r7, #8]
 800edd0:	4313      	orrs	r3, r2
 800edd2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	3301      	adds	r3, #1
 800edd8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800edda:	693b      	ldr	r3, [r7, #16]
 800eddc:	3b01      	subs	r3, #1
 800edde:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	781b      	ldrb	r3, [r3, #0]
 800ede4:	041a      	lsls	r2, r3, #16
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	4313      	orrs	r3, r2
 800edea:	60bb      	str	r3, [r7, #8]
      tmp++;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	3301      	adds	r3, #1
 800edf0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800edf2:	693b      	ldr	r3, [r7, #16]
 800edf4:	3b01      	subs	r3, #1
 800edf6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	781b      	ldrb	r3, [r3, #0]
 800edfc:	061a      	lsls	r2, r3, #24
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	4313      	orrs	r3, r2
 800ee02:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	3301      	adds	r3, #1
 800ee08:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	3b01      	subs	r3, #1
 800ee0e:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	f107 0208 	add.w	r2, r7, #8
 800ee18:	4611      	mov	r1, r2
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f003 fcf3 	bl	8012806 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800ee20:	697b      	ldr	r3, [r7, #20]
 800ee22:	3301      	adds	r3, #1
 800ee24:	617b      	str	r3, [r7, #20]
 800ee26:	697b      	ldr	r3, [r7, #20]
 800ee28:	2b07      	cmp	r3, #7
 800ee2a:	d9c4      	bls.n	800edb6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	68fa      	ldr	r2, [r7, #12]
 800ee30:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	693a      	ldr	r2, [r7, #16]
 800ee36:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800ee38:	bf00      	nop
 800ee3a:	3718      	adds	r7, #24
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800ee40:	b480      	push	{r7}
 800ee42:	b083      	sub	sp, #12
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	4603      	mov	r3, r0
 800ee48:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800ee4a:	bf00      	nop
 800ee4c:	370c      	adds	r7, #12
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee54:	4770      	bx	lr

0800ee56 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ee56:	b480      	push	{r7}
 800ee58:	b083      	sub	sp, #12
 800ee5a:	af00      	add	r7, sp, #0
 800ee5c:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800ee5e:	bf00      	nop
 800ee60:	370c      	adds	r7, #12
 800ee62:	46bd      	mov	sp, r7
 800ee64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee68:	4770      	bx	lr

0800ee6a <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ee6a:	b480      	push	{r7}
 800ee6c:	b083      	sub	sp, #12
 800ee6e:	af00      	add	r7, sp, #0
 800ee70:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 800ee72:	bf00      	nop
 800ee74:	370c      	adds	r7, #12
 800ee76:	46bd      	mov	sp, r7
 800ee78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7c:	4770      	bx	lr

0800ee7e <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ee7e:	b480      	push	{r7}
 800ee80:	b083      	sub	sp, #12
 800ee82:	af00      	add	r7, sp, #0
 800ee84:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800ee86:	bf00      	nop
 800ee88:	370c      	adds	r7, #12
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee90:	4770      	bx	lr

0800ee92 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ee92:	b480      	push	{r7}
 800ee94:	b083      	sub	sp, #12
 800ee96:	af00      	add	r7, sp, #0
 800ee98:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800ee9a:	bf00      	nop
 800ee9c:	370c      	adds	r7, #12
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea4:	4770      	bx	lr

0800eea6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800eea6:	b580      	push	{r7, lr}
 800eea8:	b084      	sub	sp, #16
 800eeaa:	af00      	add	r7, sp, #0
 800eeac:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d101      	bne.n	800eeb8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	e095      	b.n	800efe4 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d108      	bne.n	800eed2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	685b      	ldr	r3, [r3, #4]
 800eec4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eec8:	d009      	beq.n	800eede <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	2200      	movs	r2, #0
 800eece:	61da      	str	r2, [r3, #28]
 800eed0:	e005      	b.n	800eede <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	2200      	movs	r2, #0
 800eed6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2200      	movs	r2, #0
 800eedc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2200      	movs	r2, #0
 800eee2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800eeea:	b2db      	uxtb	r3, r3
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d106      	bne.n	800eefe <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2200      	movs	r2, #0
 800eef4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	f7f6 fb3b 	bl	8005574 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2202      	movs	r2, #2
 800ef02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	681a      	ldr	r2, [r3, #0]
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ef14:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	68db      	ldr	r3, [r3, #12]
 800ef1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ef1e:	d902      	bls.n	800ef26 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ef20:	2300      	movs	r3, #0
 800ef22:	60fb      	str	r3, [r7, #12]
 800ef24:	e002      	b.n	800ef2c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ef26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ef2a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	68db      	ldr	r3, [r3, #12]
 800ef30:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800ef34:	d007      	beq.n	800ef46 <HAL_SPI_Init+0xa0>
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	68db      	ldr	r3, [r3, #12]
 800ef3a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ef3e:	d002      	beq.n	800ef46 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2200      	movs	r2, #0
 800ef44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	685b      	ldr	r3, [r3, #4]
 800ef4a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	689b      	ldr	r3, [r3, #8]
 800ef52:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ef56:	431a      	orrs	r2, r3
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	691b      	ldr	r3, [r3, #16]
 800ef5c:	f003 0302 	and.w	r3, r3, #2
 800ef60:	431a      	orrs	r2, r3
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	695b      	ldr	r3, [r3, #20]
 800ef66:	f003 0301 	and.w	r3, r3, #1
 800ef6a:	431a      	orrs	r2, r3
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	699b      	ldr	r3, [r3, #24]
 800ef70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ef74:	431a      	orrs	r2, r3
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	69db      	ldr	r3, [r3, #28]
 800ef7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ef7e:	431a      	orrs	r2, r3
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	6a1b      	ldr	r3, [r3, #32]
 800ef84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef88:	ea42 0103 	orr.w	r1, r2, r3
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	430a      	orrs	r2, r1
 800ef9a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	699b      	ldr	r3, [r3, #24]
 800efa0:	0c1b      	lsrs	r3, r3, #16
 800efa2:	f003 0204 	and.w	r2, r3, #4
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efaa:	f003 0310 	and.w	r3, r3, #16
 800efae:	431a      	orrs	r2, r3
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efb4:	f003 0308 	and.w	r3, r3, #8
 800efb8:	431a      	orrs	r2, r3
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	68db      	ldr	r3, [r3, #12]
 800efbe:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800efc2:	ea42 0103 	orr.w	r1, r2, r3
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	430a      	orrs	r2, r1
 800efd2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2200      	movs	r2, #0
 800efd8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2201      	movs	r2, #1
 800efde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800efe2:	2300      	movs	r3, #0
}
 800efe4:	4618      	mov	r0, r3
 800efe6:	3710      	adds	r7, #16
 800efe8:	46bd      	mov	sp, r7
 800efea:	bd80      	pop	{r7, pc}

0800efec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b088      	sub	sp, #32
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	60f8      	str	r0, [r7, #12]
 800eff4:	60b9      	str	r1, [r7, #8]
 800eff6:	603b      	str	r3, [r7, #0]
 800eff8:	4613      	mov	r3, r2
 800effa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800effc:	2300      	movs	r3, #0
 800effe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f006:	2b01      	cmp	r3, #1
 800f008:	d101      	bne.n	800f00e <HAL_SPI_Transmit+0x22>
 800f00a:	2302      	movs	r3, #2
 800f00c:	e15f      	b.n	800f2ce <HAL_SPI_Transmit+0x2e2>
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	2201      	movs	r2, #1
 800f012:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f016:	f7f8 fa41 	bl	800749c <HAL_GetTick>
 800f01a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800f01c:	88fb      	ldrh	r3, [r7, #6]
 800f01e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f026:	b2db      	uxtb	r3, r3
 800f028:	2b01      	cmp	r3, #1
 800f02a:	d002      	beq.n	800f032 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800f02c:	2302      	movs	r3, #2
 800f02e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f030:	e148      	b.n	800f2c4 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d002      	beq.n	800f03e <HAL_SPI_Transmit+0x52>
 800f038:	88fb      	ldrh	r3, [r7, #6]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d102      	bne.n	800f044 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800f03e:	2301      	movs	r3, #1
 800f040:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f042:	e13f      	b.n	800f2c4 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	2203      	movs	r2, #3
 800f048:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	2200      	movs	r2, #0
 800f050:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	68ba      	ldr	r2, [r7, #8]
 800f056:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	88fa      	ldrh	r2, [r7, #6]
 800f05c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	88fa      	ldrh	r2, [r7, #6]
 800f062:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	2200      	movs	r2, #0
 800f068:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	2200      	movs	r2, #0
 800f06e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	2200      	movs	r2, #0
 800f076:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	2200      	movs	r2, #0
 800f07e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	2200      	movs	r2, #0
 800f084:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	689b      	ldr	r3, [r3, #8]
 800f08a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f08e:	d10f      	bne.n	800f0b0 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	681a      	ldr	r2, [r3, #0]
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f09e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	681a      	ldr	r2, [r3, #0]
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f0ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0ba:	2b40      	cmp	r3, #64	; 0x40
 800f0bc:	d007      	beq.n	800f0ce <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	681a      	ldr	r2, [r3, #0]
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f0cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	68db      	ldr	r3, [r3, #12]
 800f0d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f0d6:	d94f      	bls.n	800f178 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	685b      	ldr	r3, [r3, #4]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d002      	beq.n	800f0e6 <HAL_SPI_Transmit+0xfa>
 800f0e0:	8afb      	ldrh	r3, [r7, #22]
 800f0e2:	2b01      	cmp	r3, #1
 800f0e4:	d142      	bne.n	800f16c <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0ea:	881a      	ldrh	r2, [r3, #0]
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0f6:	1c9a      	adds	r2, r3, #2
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f100:	b29b      	uxth	r3, r3
 800f102:	3b01      	subs	r3, #1
 800f104:	b29a      	uxth	r2, r3
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f10a:	e02f      	b.n	800f16c <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	689b      	ldr	r3, [r3, #8]
 800f112:	f003 0302 	and.w	r3, r3, #2
 800f116:	2b02      	cmp	r3, #2
 800f118:	d112      	bne.n	800f140 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f11e:	881a      	ldrh	r2, [r3, #0]
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f12a:	1c9a      	adds	r2, r3, #2
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f134:	b29b      	uxth	r3, r3
 800f136:	3b01      	subs	r3, #1
 800f138:	b29a      	uxth	r2, r3
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f13e:	e015      	b.n	800f16c <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f140:	f7f8 f9ac 	bl	800749c <HAL_GetTick>
 800f144:	4602      	mov	r2, r0
 800f146:	69bb      	ldr	r3, [r7, #24]
 800f148:	1ad3      	subs	r3, r2, r3
 800f14a:	683a      	ldr	r2, [r7, #0]
 800f14c:	429a      	cmp	r2, r3
 800f14e:	d803      	bhi.n	800f158 <HAL_SPI_Transmit+0x16c>
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f156:	d102      	bne.n	800f15e <HAL_SPI_Transmit+0x172>
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d106      	bne.n	800f16c <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800f15e:	2303      	movs	r3, #3
 800f160:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	2201      	movs	r2, #1
 800f166:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800f16a:	e0ab      	b.n	800f2c4 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f170:	b29b      	uxth	r3, r3
 800f172:	2b00      	cmp	r3, #0
 800f174:	d1ca      	bne.n	800f10c <HAL_SPI_Transmit+0x120>
 800f176:	e080      	b.n	800f27a <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	685b      	ldr	r3, [r3, #4]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d002      	beq.n	800f186 <HAL_SPI_Transmit+0x19a>
 800f180:	8afb      	ldrh	r3, [r7, #22]
 800f182:	2b01      	cmp	r3, #1
 800f184:	d174      	bne.n	800f270 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f18a:	b29b      	uxth	r3, r3
 800f18c:	2b01      	cmp	r3, #1
 800f18e:	d912      	bls.n	800f1b6 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f194:	881a      	ldrh	r2, [r3, #0]
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1a0:	1c9a      	adds	r2, r3, #2
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f1aa:	b29b      	uxth	r3, r3
 800f1ac:	3b02      	subs	r3, #2
 800f1ae:	b29a      	uxth	r2, r3
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f1b4:	e05c      	b.n	800f270 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	330c      	adds	r3, #12
 800f1c0:	7812      	ldrb	r2, [r2, #0]
 800f1c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1c8:	1c5a      	adds	r2, r3, #1
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f1d2:	b29b      	uxth	r3, r3
 800f1d4:	3b01      	subs	r3, #1
 800f1d6:	b29a      	uxth	r2, r3
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800f1dc:	e048      	b.n	800f270 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	689b      	ldr	r3, [r3, #8]
 800f1e4:	f003 0302 	and.w	r3, r3, #2
 800f1e8:	2b02      	cmp	r3, #2
 800f1ea:	d12b      	bne.n	800f244 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f1f0:	b29b      	uxth	r3, r3
 800f1f2:	2b01      	cmp	r3, #1
 800f1f4:	d912      	bls.n	800f21c <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1fa:	881a      	ldrh	r2, [r3, #0]
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f206:	1c9a      	adds	r2, r3, #2
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f210:	b29b      	uxth	r3, r3
 800f212:	3b02      	subs	r3, #2
 800f214:	b29a      	uxth	r2, r3
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f21a:	e029      	b.n	800f270 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	330c      	adds	r3, #12
 800f226:	7812      	ldrb	r2, [r2, #0]
 800f228:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f22e:	1c5a      	adds	r2, r3, #1
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f238:	b29b      	uxth	r3, r3
 800f23a:	3b01      	subs	r3, #1
 800f23c:	b29a      	uxth	r2, r3
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f242:	e015      	b.n	800f270 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f244:	f7f8 f92a 	bl	800749c <HAL_GetTick>
 800f248:	4602      	mov	r2, r0
 800f24a:	69bb      	ldr	r3, [r7, #24]
 800f24c:	1ad3      	subs	r3, r2, r3
 800f24e:	683a      	ldr	r2, [r7, #0]
 800f250:	429a      	cmp	r2, r3
 800f252:	d803      	bhi.n	800f25c <HAL_SPI_Transmit+0x270>
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f25a:	d102      	bne.n	800f262 <HAL_SPI_Transmit+0x276>
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d106      	bne.n	800f270 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800f262:	2303      	movs	r3, #3
 800f264:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	2201      	movs	r2, #1
 800f26a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800f26e:	e029      	b.n	800f2c4 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f274:	b29b      	uxth	r3, r3
 800f276:	2b00      	cmp	r3, #0
 800f278:	d1b1      	bne.n	800f1de <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f27a:	69ba      	ldr	r2, [r7, #24]
 800f27c:	6839      	ldr	r1, [r7, #0]
 800f27e:	68f8      	ldr	r0, [r7, #12]
 800f280:	f000 fe88 	bl	800ff94 <SPI_EndRxTxTransaction>
 800f284:	4603      	mov	r3, r0
 800f286:	2b00      	cmp	r3, #0
 800f288:	d002      	beq.n	800f290 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	2220      	movs	r2, #32
 800f28e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	689b      	ldr	r3, [r3, #8]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d10a      	bne.n	800f2ae <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f298:	2300      	movs	r3, #0
 800f29a:	613b      	str	r3, [r7, #16]
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	68db      	ldr	r3, [r3, #12]
 800f2a2:	613b      	str	r3, [r7, #16]
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	689b      	ldr	r3, [r3, #8]
 800f2aa:	613b      	str	r3, [r7, #16]
 800f2ac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d002      	beq.n	800f2bc <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800f2b6:	2301      	movs	r3, #1
 800f2b8:	77fb      	strb	r3, [r7, #31]
 800f2ba:	e003      	b.n	800f2c4 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	2201      	movs	r2, #1
 800f2c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800f2cc:	7ffb      	ldrb	r3, [r7, #31]
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3720      	adds	r7, #32
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}

0800f2d6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f2d6:	b580      	push	{r7, lr}
 800f2d8:	b088      	sub	sp, #32
 800f2da:	af02      	add	r7, sp, #8
 800f2dc:	60f8      	str	r0, [r7, #12]
 800f2de:	60b9      	str	r1, [r7, #8]
 800f2e0:	603b      	str	r3, [r7, #0]
 800f2e2:	4613      	mov	r3, r2
 800f2e4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f2f0:	b2db      	uxtb	r3, r3
 800f2f2:	2b01      	cmp	r3, #1
 800f2f4:	d002      	beq.n	800f2fc <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800f2f6:	2302      	movs	r3, #2
 800f2f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f2fa:	e11a      	b.n	800f532 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	685b      	ldr	r3, [r3, #4]
 800f300:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f304:	d112      	bne.n	800f32c <HAL_SPI_Receive+0x56>
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	689b      	ldr	r3, [r3, #8]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d10e      	bne.n	800f32c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	2204      	movs	r2, #4
 800f312:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800f316:	88fa      	ldrh	r2, [r7, #6]
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	9300      	str	r3, [sp, #0]
 800f31c:	4613      	mov	r3, r2
 800f31e:	68ba      	ldr	r2, [r7, #8]
 800f320:	68b9      	ldr	r1, [r7, #8]
 800f322:	68f8      	ldr	r0, [r7, #12]
 800f324:	f000 f90e 	bl	800f544 <HAL_SPI_TransmitReceive>
 800f328:	4603      	mov	r3, r0
 800f32a:	e107      	b.n	800f53c <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f332:	2b01      	cmp	r3, #1
 800f334:	d101      	bne.n	800f33a <HAL_SPI_Receive+0x64>
 800f336:	2302      	movs	r3, #2
 800f338:	e100      	b.n	800f53c <HAL_SPI_Receive+0x266>
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	2201      	movs	r2, #1
 800f33e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f342:	f7f8 f8ab 	bl	800749c <HAL_GetTick>
 800f346:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d002      	beq.n	800f354 <HAL_SPI_Receive+0x7e>
 800f34e:	88fb      	ldrh	r3, [r7, #6]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d102      	bne.n	800f35a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800f354:	2301      	movs	r3, #1
 800f356:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f358:	e0eb      	b.n	800f532 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	2204      	movs	r2, #4
 800f35e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	2200      	movs	r2, #0
 800f366:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	68ba      	ldr	r2, [r7, #8]
 800f36c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	88fa      	ldrh	r2, [r7, #6]
 800f372:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	88fa      	ldrh	r2, [r7, #6]
 800f37a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	2200      	movs	r2, #0
 800f382:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	2200      	movs	r2, #0
 800f388:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	2200      	movs	r2, #0
 800f38e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	2200      	movs	r2, #0
 800f394:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	2200      	movs	r2, #0
 800f39a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	68db      	ldr	r3, [r3, #12]
 800f3a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f3a4:	d908      	bls.n	800f3b8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	685a      	ldr	r2, [r3, #4]
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f3b4:	605a      	str	r2, [r3, #4]
 800f3b6:	e007      	b.n	800f3c8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	685a      	ldr	r2, [r3, #4]
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f3c6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	689b      	ldr	r3, [r3, #8]
 800f3cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f3d0:	d10f      	bne.n	800f3f2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	681a      	ldr	r2, [r3, #0]
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f3e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	681a      	ldr	r2, [r3, #0]
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800f3f0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3fc:	2b40      	cmp	r3, #64	; 0x40
 800f3fe:	d007      	beq.n	800f410 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	681a      	ldr	r2, [r3, #0]
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f40e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	68db      	ldr	r3, [r3, #12]
 800f414:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f418:	d86f      	bhi.n	800f4fa <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800f41a:	e034      	b.n	800f486 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	689b      	ldr	r3, [r3, #8]
 800f422:	f003 0301 	and.w	r3, r3, #1
 800f426:	2b01      	cmp	r3, #1
 800f428:	d117      	bne.n	800f45a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	f103 020c 	add.w	r2, r3, #12
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f436:	7812      	ldrb	r2, [r2, #0]
 800f438:	b2d2      	uxtb	r2, r2
 800f43a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f440:	1c5a      	adds	r2, r3, #1
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f44c:	b29b      	uxth	r3, r3
 800f44e:	3b01      	subs	r3, #1
 800f450:	b29a      	uxth	r2, r3
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800f458:	e015      	b.n	800f486 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f45a:	f7f8 f81f 	bl	800749c <HAL_GetTick>
 800f45e:	4602      	mov	r2, r0
 800f460:	693b      	ldr	r3, [r7, #16]
 800f462:	1ad3      	subs	r3, r2, r3
 800f464:	683a      	ldr	r2, [r7, #0]
 800f466:	429a      	cmp	r2, r3
 800f468:	d803      	bhi.n	800f472 <HAL_SPI_Receive+0x19c>
 800f46a:	683b      	ldr	r3, [r7, #0]
 800f46c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f470:	d102      	bne.n	800f478 <HAL_SPI_Receive+0x1a2>
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d106      	bne.n	800f486 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800f478:	2303      	movs	r3, #3
 800f47a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	2201      	movs	r2, #1
 800f480:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800f484:	e055      	b.n	800f532 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f48c:	b29b      	uxth	r3, r3
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d1c4      	bne.n	800f41c <HAL_SPI_Receive+0x146>
 800f492:	e038      	b.n	800f506 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	689b      	ldr	r3, [r3, #8]
 800f49a:	f003 0301 	and.w	r3, r3, #1
 800f49e:	2b01      	cmp	r3, #1
 800f4a0:	d115      	bne.n	800f4ce <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	68da      	ldr	r2, [r3, #12]
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4ac:	b292      	uxth	r2, r2
 800f4ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4b4:	1c9a      	adds	r2, r3, #2
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f4c0:	b29b      	uxth	r3, r3
 800f4c2:	3b01      	subs	r3, #1
 800f4c4:	b29a      	uxth	r2, r3
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800f4cc:	e015      	b.n	800f4fa <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f4ce:	f7f7 ffe5 	bl	800749c <HAL_GetTick>
 800f4d2:	4602      	mov	r2, r0
 800f4d4:	693b      	ldr	r3, [r7, #16]
 800f4d6:	1ad3      	subs	r3, r2, r3
 800f4d8:	683a      	ldr	r2, [r7, #0]
 800f4da:	429a      	cmp	r2, r3
 800f4dc:	d803      	bhi.n	800f4e6 <HAL_SPI_Receive+0x210>
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f4e4:	d102      	bne.n	800f4ec <HAL_SPI_Receive+0x216>
 800f4e6:	683b      	ldr	r3, [r7, #0]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d106      	bne.n	800f4fa <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800f4ec:	2303      	movs	r3, #3
 800f4ee:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	2201      	movs	r2, #1
 800f4f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800f4f8:	e01b      	b.n	800f532 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f500:	b29b      	uxth	r3, r3
 800f502:	2b00      	cmp	r3, #0
 800f504:	d1c6      	bne.n	800f494 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f506:	693a      	ldr	r2, [r7, #16]
 800f508:	6839      	ldr	r1, [r7, #0]
 800f50a:	68f8      	ldr	r0, [r7, #12]
 800f50c:	f000 fcea 	bl	800fee4 <SPI_EndRxTransaction>
 800f510:	4603      	mov	r3, r0
 800f512:	2b00      	cmp	r3, #0
 800f514:	d002      	beq.n	800f51c <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	2220      	movs	r2, #32
 800f51a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f520:	2b00      	cmp	r3, #0
 800f522:	d002      	beq.n	800f52a <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800f524:	2301      	movs	r3, #1
 800f526:	75fb      	strb	r3, [r7, #23]
 800f528:	e003      	b.n	800f532 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	2201      	movs	r2, #1
 800f52e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	2200      	movs	r2, #0
 800f536:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800f53a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f53c:	4618      	mov	r0, r3
 800f53e:	3718      	adds	r7, #24
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}

0800f544 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b08a      	sub	sp, #40	; 0x28
 800f548:	af00      	add	r7, sp, #0
 800f54a:	60f8      	str	r0, [r7, #12]
 800f54c:	60b9      	str	r1, [r7, #8]
 800f54e:	607a      	str	r2, [r7, #4]
 800f550:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f552:	2301      	movs	r3, #1
 800f554:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800f556:	2300      	movs	r3, #0
 800f558:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f562:	2b01      	cmp	r3, #1
 800f564:	d101      	bne.n	800f56a <HAL_SPI_TransmitReceive+0x26>
 800f566:	2302      	movs	r3, #2
 800f568:	e20a      	b.n	800f980 <HAL_SPI_TransmitReceive+0x43c>
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	2201      	movs	r2, #1
 800f56e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f572:	f7f7 ff93 	bl	800749c <HAL_GetTick>
 800f576:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f57e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	685b      	ldr	r3, [r3, #4]
 800f584:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800f586:	887b      	ldrh	r3, [r7, #2]
 800f588:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800f58a:	887b      	ldrh	r3, [r7, #2]
 800f58c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f58e:	7efb      	ldrb	r3, [r7, #27]
 800f590:	2b01      	cmp	r3, #1
 800f592:	d00e      	beq.n	800f5b2 <HAL_SPI_TransmitReceive+0x6e>
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f59a:	d106      	bne.n	800f5aa <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	689b      	ldr	r3, [r3, #8]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d102      	bne.n	800f5aa <HAL_SPI_TransmitReceive+0x66>
 800f5a4:	7efb      	ldrb	r3, [r7, #27]
 800f5a6:	2b04      	cmp	r3, #4
 800f5a8:	d003      	beq.n	800f5b2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800f5aa:	2302      	movs	r3, #2
 800f5ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800f5b0:	e1e0      	b.n	800f974 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d005      	beq.n	800f5c4 <HAL_SPI_TransmitReceive+0x80>
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d002      	beq.n	800f5c4 <HAL_SPI_TransmitReceive+0x80>
 800f5be:	887b      	ldrh	r3, [r7, #2]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d103      	bne.n	800f5cc <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800f5c4:	2301      	movs	r3, #1
 800f5c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800f5ca:	e1d3      	b.n	800f974 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f5d2:	b2db      	uxtb	r3, r3
 800f5d4:	2b04      	cmp	r3, #4
 800f5d6:	d003      	beq.n	800f5e0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	2205      	movs	r2, #5
 800f5dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	687a      	ldr	r2, [r7, #4]
 800f5ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	887a      	ldrh	r2, [r7, #2]
 800f5f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	887a      	ldrh	r2, [r7, #2]
 800f5f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	68ba      	ldr	r2, [r7, #8]
 800f600:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	887a      	ldrh	r2, [r7, #2]
 800f606:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	887a      	ldrh	r2, [r7, #2]
 800f60c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	2200      	movs	r2, #0
 800f612:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	2200      	movs	r2, #0
 800f618:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	68db      	ldr	r3, [r3, #12]
 800f61e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f622:	d802      	bhi.n	800f62a <HAL_SPI_TransmitReceive+0xe6>
 800f624:	8a3b      	ldrh	r3, [r7, #16]
 800f626:	2b01      	cmp	r3, #1
 800f628:	d908      	bls.n	800f63c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	685a      	ldr	r2, [r3, #4]
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f638:	605a      	str	r2, [r3, #4]
 800f63a:	e007      	b.n	800f64c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	685a      	ldr	r2, [r3, #4]
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f64a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f656:	2b40      	cmp	r3, #64	; 0x40
 800f658:	d007      	beq.n	800f66a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	681a      	ldr	r2, [r3, #0]
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f668:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	68db      	ldr	r3, [r3, #12]
 800f66e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f672:	f240 8081 	bls.w	800f778 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	685b      	ldr	r3, [r3, #4]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d002      	beq.n	800f684 <HAL_SPI_TransmitReceive+0x140>
 800f67e:	8a7b      	ldrh	r3, [r7, #18]
 800f680:	2b01      	cmp	r3, #1
 800f682:	d16d      	bne.n	800f760 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f688:	881a      	ldrh	r2, [r3, #0]
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f694:	1c9a      	adds	r2, r3, #2
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f69e:	b29b      	uxth	r3, r3
 800f6a0:	3b01      	subs	r3, #1
 800f6a2:	b29a      	uxth	r2, r3
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f6a8:	e05a      	b.n	800f760 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	689b      	ldr	r3, [r3, #8]
 800f6b0:	f003 0302 	and.w	r3, r3, #2
 800f6b4:	2b02      	cmp	r3, #2
 800f6b6:	d11b      	bne.n	800f6f0 <HAL_SPI_TransmitReceive+0x1ac>
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f6bc:	b29b      	uxth	r3, r3
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d016      	beq.n	800f6f0 <HAL_SPI_TransmitReceive+0x1ac>
 800f6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6c4:	2b01      	cmp	r3, #1
 800f6c6:	d113      	bne.n	800f6f0 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6cc:	881a      	ldrh	r2, [r3, #0]
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6d8:	1c9a      	adds	r2, r3, #2
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f6e2:	b29b      	uxth	r3, r3
 800f6e4:	3b01      	subs	r3, #1
 800f6e6:	b29a      	uxth	r2, r3
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	689b      	ldr	r3, [r3, #8]
 800f6f6:	f003 0301 	and.w	r3, r3, #1
 800f6fa:	2b01      	cmp	r3, #1
 800f6fc:	d11c      	bne.n	800f738 <HAL_SPI_TransmitReceive+0x1f4>
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f704:	b29b      	uxth	r3, r3
 800f706:	2b00      	cmp	r3, #0
 800f708:	d016      	beq.n	800f738 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	68da      	ldr	r2, [r3, #12]
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f714:	b292      	uxth	r2, r2
 800f716:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f71c:	1c9a      	adds	r2, r3, #2
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f728:	b29b      	uxth	r3, r3
 800f72a:	3b01      	subs	r3, #1
 800f72c:	b29a      	uxth	r2, r3
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f734:	2301      	movs	r3, #1
 800f736:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f738:	f7f7 feb0 	bl	800749c <HAL_GetTick>
 800f73c:	4602      	mov	r2, r0
 800f73e:	69fb      	ldr	r3, [r7, #28]
 800f740:	1ad3      	subs	r3, r2, r3
 800f742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f744:	429a      	cmp	r2, r3
 800f746:	d80b      	bhi.n	800f760 <HAL_SPI_TransmitReceive+0x21c>
 800f748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f74a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f74e:	d007      	beq.n	800f760 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800f750:	2303      	movs	r3, #3
 800f752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	2201      	movs	r2, #1
 800f75a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800f75e:	e109      	b.n	800f974 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f764:	b29b      	uxth	r3, r3
 800f766:	2b00      	cmp	r3, #0
 800f768:	d19f      	bne.n	800f6aa <HAL_SPI_TransmitReceive+0x166>
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f770:	b29b      	uxth	r3, r3
 800f772:	2b00      	cmp	r3, #0
 800f774:	d199      	bne.n	800f6aa <HAL_SPI_TransmitReceive+0x166>
 800f776:	e0e3      	b.n	800f940 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	685b      	ldr	r3, [r3, #4]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d003      	beq.n	800f788 <HAL_SPI_TransmitReceive+0x244>
 800f780:	8a7b      	ldrh	r3, [r7, #18]
 800f782:	2b01      	cmp	r3, #1
 800f784:	f040 80cf 	bne.w	800f926 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f78c:	b29b      	uxth	r3, r3
 800f78e:	2b01      	cmp	r3, #1
 800f790:	d912      	bls.n	800f7b8 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f796:	881a      	ldrh	r2, [r3, #0]
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7a2:	1c9a      	adds	r2, r3, #2
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f7ac:	b29b      	uxth	r3, r3
 800f7ae:	3b02      	subs	r3, #2
 800f7b0:	b29a      	uxth	r2, r3
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f7b6:	e0b6      	b.n	800f926 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	330c      	adds	r3, #12
 800f7c2:	7812      	ldrb	r2, [r2, #0]
 800f7c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7ca:	1c5a      	adds	r2, r3, #1
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f7d4:	b29b      	uxth	r3, r3
 800f7d6:	3b01      	subs	r3, #1
 800f7d8:	b29a      	uxth	r2, r3
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f7de:	e0a2      	b.n	800f926 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	689b      	ldr	r3, [r3, #8]
 800f7e6:	f003 0302 	and.w	r3, r3, #2
 800f7ea:	2b02      	cmp	r3, #2
 800f7ec:	d134      	bne.n	800f858 <HAL_SPI_TransmitReceive+0x314>
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f7f2:	b29b      	uxth	r3, r3
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d02f      	beq.n	800f858 <HAL_SPI_TransmitReceive+0x314>
 800f7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7fa:	2b01      	cmp	r3, #1
 800f7fc:	d12c      	bne.n	800f858 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f802:	b29b      	uxth	r3, r3
 800f804:	2b01      	cmp	r3, #1
 800f806:	d912      	bls.n	800f82e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f80c:	881a      	ldrh	r2, [r3, #0]
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f818:	1c9a      	adds	r2, r3, #2
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f822:	b29b      	uxth	r3, r3
 800f824:	3b02      	subs	r3, #2
 800f826:	b29a      	uxth	r2, r3
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f82c:	e012      	b.n	800f854 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	330c      	adds	r3, #12
 800f838:	7812      	ldrb	r2, [r2, #0]
 800f83a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f840:	1c5a      	adds	r2, r3, #1
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f84a:	b29b      	uxth	r3, r3
 800f84c:	3b01      	subs	r3, #1
 800f84e:	b29a      	uxth	r2, r3
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f854:	2300      	movs	r3, #0
 800f856:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	689b      	ldr	r3, [r3, #8]
 800f85e:	f003 0301 	and.w	r3, r3, #1
 800f862:	2b01      	cmp	r3, #1
 800f864:	d148      	bne.n	800f8f8 <HAL_SPI_TransmitReceive+0x3b4>
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f86c:	b29b      	uxth	r3, r3
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d042      	beq.n	800f8f8 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f878:	b29b      	uxth	r3, r3
 800f87a:	2b01      	cmp	r3, #1
 800f87c:	d923      	bls.n	800f8c6 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	68da      	ldr	r2, [r3, #12]
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f888:	b292      	uxth	r2, r2
 800f88a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f890:	1c9a      	adds	r2, r3, #2
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f89c:	b29b      	uxth	r3, r3
 800f89e:	3b02      	subs	r3, #2
 800f8a0:	b29a      	uxth	r2, r3
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f8ae:	b29b      	uxth	r3, r3
 800f8b0:	2b01      	cmp	r3, #1
 800f8b2:	d81f      	bhi.n	800f8f4 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	685a      	ldr	r2, [r3, #4]
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f8c2:	605a      	str	r2, [r3, #4]
 800f8c4:	e016      	b.n	800f8f4 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	f103 020c 	add.w	r2, r3, #12
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8d2:	7812      	ldrb	r2, [r2, #0]
 800f8d4:	b2d2      	uxtb	r2, r2
 800f8d6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8dc:	1c5a      	adds	r2, r3, #1
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f8e8:	b29b      	uxth	r3, r3
 800f8ea:	3b01      	subs	r3, #1
 800f8ec:	b29a      	uxth	r2, r3
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f8f4:	2301      	movs	r3, #1
 800f8f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f8f8:	f7f7 fdd0 	bl	800749c <HAL_GetTick>
 800f8fc:	4602      	mov	r2, r0
 800f8fe:	69fb      	ldr	r3, [r7, #28]
 800f900:	1ad3      	subs	r3, r2, r3
 800f902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f904:	429a      	cmp	r2, r3
 800f906:	d803      	bhi.n	800f910 <HAL_SPI_TransmitReceive+0x3cc>
 800f908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f90a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f90e:	d102      	bne.n	800f916 <HAL_SPI_TransmitReceive+0x3d2>
 800f910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f912:	2b00      	cmp	r3, #0
 800f914:	d107      	bne.n	800f926 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800f916:	2303      	movs	r3, #3
 800f918:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	2201      	movs	r2, #1
 800f920:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800f924:	e026      	b.n	800f974 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f92a:	b29b      	uxth	r3, r3
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	f47f af57 	bne.w	800f7e0 <HAL_SPI_TransmitReceive+0x29c>
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f938:	b29b      	uxth	r3, r3
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	f47f af50 	bne.w	800f7e0 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f940:	69fa      	ldr	r2, [r7, #28]
 800f942:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f944:	68f8      	ldr	r0, [r7, #12]
 800f946:	f000 fb25 	bl	800ff94 <SPI_EndRxTxTransaction>
 800f94a:	4603      	mov	r3, r0
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d005      	beq.n	800f95c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800f950:	2301      	movs	r3, #1
 800f952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	2220      	movs	r2, #32
 800f95a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f960:	2b00      	cmp	r3, #0
 800f962:	d003      	beq.n	800f96c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800f964:	2301      	movs	r3, #1
 800f966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f96a:	e003      	b.n	800f974 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	2201      	movs	r2, #1
 800f970:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	2200      	movs	r2, #0
 800f978:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800f97c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800f980:	4618      	mov	r0, r3
 800f982:	3728      	adds	r7, #40	; 0x28
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}

0800f988 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b086      	sub	sp, #24
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	60f8      	str	r0, [r7, #12]
 800f990:	60b9      	str	r1, [r7, #8]
 800f992:	4613      	mov	r3, r2
 800f994:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f996:	2300      	movs	r3, #0
 800f998:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f9a0:	2b01      	cmp	r3, #1
 800f9a2:	d101      	bne.n	800f9a8 <HAL_SPI_Transmit_DMA+0x20>
 800f9a4:	2302      	movs	r3, #2
 800f9a6:	e0d4      	b.n	800fb52 <HAL_SPI_Transmit_DMA+0x1ca>
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	2201      	movs	r2, #1
 800f9ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f9b6:	b2db      	uxtb	r3, r3
 800f9b8:	2b01      	cmp	r3, #1
 800f9ba:	d002      	beq.n	800f9c2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800f9bc:	2302      	movs	r3, #2
 800f9be:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f9c0:	e0c2      	b.n	800fb48 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800f9c2:	68bb      	ldr	r3, [r7, #8]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d002      	beq.n	800f9ce <HAL_SPI_Transmit_DMA+0x46>
 800f9c8:	88fb      	ldrh	r3, [r7, #6]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d102      	bne.n	800f9d4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800f9ce:	2301      	movs	r3, #1
 800f9d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f9d2:	e0b9      	b.n	800fb48 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	2203      	movs	r2, #3
 800f9d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	2200      	movs	r2, #0
 800f9e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	68ba      	ldr	r2, [r7, #8]
 800f9e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	88fa      	ldrh	r2, [r7, #6]
 800f9ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	88fa      	ldrh	r2, [r7, #6]
 800f9f2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	2200      	movs	r2, #0
 800fa04:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	2200      	movs	r2, #0
 800fa0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	2200      	movs	r2, #0
 800fa12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	689b      	ldr	r3, [r3, #8]
 800fa1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa1e:	d10f      	bne.n	800fa40 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	681a      	ldr	r2, [r3, #0]
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fa2e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	681a      	ldr	r2, [r3, #0]
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fa3e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa44:	4a45      	ldr	r2, [pc, #276]	; (800fb5c <HAL_SPI_Transmit_DMA+0x1d4>)
 800fa46:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa4c:	4a44      	ldr	r2, [pc, #272]	; (800fb60 <HAL_SPI_Transmit_DMA+0x1d8>)
 800fa4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa54:	4a43      	ldr	r2, [pc, #268]	; (800fb64 <HAL_SPI_Transmit_DMA+0x1dc>)
 800fa56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	685a      	ldr	r2, [r3, #4]
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800fa6e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	68db      	ldr	r3, [r3, #12]
 800fa74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800fa78:	d82d      	bhi.n	800fad6 <HAL_SPI_Transmit_DMA+0x14e>
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa7e:	699b      	ldr	r3, [r3, #24]
 800fa80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fa84:	d127      	bne.n	800fad6 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fa8a:	b29b      	uxth	r3, r3
 800fa8c:	f003 0301 	and.w	r3, r3, #1
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d10f      	bne.n	800fab4 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	685a      	ldr	r2, [r3, #4]
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800faa2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800faa8:	b29b      	uxth	r3, r3
 800faaa:	085b      	lsrs	r3, r3, #1
 800faac:	b29a      	uxth	r2, r3
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800fab2:	e010      	b.n	800fad6 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	685a      	ldr	r2, [r3, #4]
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fac2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fac8:	b29b      	uxth	r3, r3
 800faca:	085b      	lsrs	r3, r3, #1
 800facc:	b29b      	uxth	r3, r3
 800face:	3301      	adds	r3, #1
 800fad0:	b29a      	uxth	r2, r3
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fade:	4619      	mov	r1, r3
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	330c      	adds	r3, #12
 800fae6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800faec:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800faee:	f7f7 febf 	bl	8007870 <HAL_DMA_Start_IT>
 800faf2:	4603      	mov	r3, r0
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d008      	beq.n	800fb0a <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fafc:	f043 0210 	orr.w	r2, r3, #16
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800fb04:	2301      	movs	r3, #1
 800fb06:	75fb      	strb	r3, [r7, #23]

    goto error;
 800fb08:	e01e      	b.n	800fb48 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb14:	2b40      	cmp	r3, #64	; 0x40
 800fb16:	d007      	beq.n	800fb28 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	681a      	ldr	r2, [r3, #0]
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fb26:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	685a      	ldr	r2, [r3, #4]
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	f042 0220 	orr.w	r2, r2, #32
 800fb36:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	685a      	ldr	r2, [r3, #4]
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	f042 0202 	orr.w	r2, r2, #2
 800fb46:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800fb50:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb52:	4618      	mov	r0, r3
 800fb54:	3718      	adds	r7, #24
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}
 800fb5a:	bf00      	nop
 800fb5c:	0800fc4b 	.word	0x0800fc4b
 800fb60:	0800fba5 	.word	0x0800fba5
 800fb64:	0800fc67 	.word	0x0800fc67

0800fb68 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800fb68:	b480      	push	{r7}
 800fb6a:	b083      	sub	sp, #12
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800fb70:	bf00      	nop
 800fb72:	370c      	adds	r7, #12
 800fb74:	46bd      	mov	sp, r7
 800fb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7a:	4770      	bx	lr

0800fb7c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800fb7c:	b480      	push	{r7}
 800fb7e:	b083      	sub	sp, #12
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800fb84:	bf00      	nop
 800fb86:	370c      	adds	r7, #12
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8e:	4770      	bx	lr

0800fb90 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800fb90:	b480      	push	{r7}
 800fb92:	b083      	sub	sp, #12
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800fb98:	bf00      	nop
 800fb9a:	370c      	adds	r7, #12
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba2:	4770      	bx	lr

0800fba4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b086      	sub	sp, #24
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbb0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fbb2:	f7f7 fc73 	bl	800749c <HAL_GetTick>
 800fbb6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	f003 0320 	and.w	r3, r3, #32
 800fbc2:	2b20      	cmp	r3, #32
 800fbc4:	d03b      	beq.n	800fc3e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800fbc6:	697b      	ldr	r3, [r7, #20]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	685a      	ldr	r2, [r3, #4]
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	f022 0220 	bic.w	r2, r2, #32
 800fbd4:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	685a      	ldr	r2, [r3, #4]
 800fbdc:	697b      	ldr	r3, [r7, #20]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	f022 0202 	bic.w	r2, r2, #2
 800fbe4:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800fbe6:	693a      	ldr	r2, [r7, #16]
 800fbe8:	2164      	movs	r1, #100	; 0x64
 800fbea:	6978      	ldr	r0, [r7, #20]
 800fbec:	f000 f9d2 	bl	800ff94 <SPI_EndRxTxTransaction>
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d005      	beq.n	800fc02 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fbf6:	697b      	ldr	r3, [r7, #20]
 800fbf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fbfa:	f043 0220 	orr.w	r2, r3, #32
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	689b      	ldr	r3, [r3, #8]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d10a      	bne.n	800fc20 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	60fb      	str	r3, [r7, #12]
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	68db      	ldr	r3, [r3, #12]
 800fc14:	60fb      	str	r3, [r7, #12]
 800fc16:	697b      	ldr	r3, [r7, #20]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	689b      	ldr	r3, [r3, #8]
 800fc1c:	60fb      	str	r3, [r7, #12]
 800fc1e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	2200      	movs	r2, #0
 800fc24:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	2201      	movs	r2, #1
 800fc2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fc2e:	697b      	ldr	r3, [r7, #20]
 800fc30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d003      	beq.n	800fc3e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800fc36:	6978      	ldr	r0, [r7, #20]
 800fc38:	f7ff ffaa 	bl	800fb90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800fc3c:	e002      	b.n	800fc44 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800fc3e:	6978      	ldr	r0, [r7, #20]
 800fc40:	f7ff ff92 	bl	800fb68 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800fc44:	3718      	adds	r7, #24
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}

0800fc4a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fc4a:	b580      	push	{r7, lr}
 800fc4c:	b084      	sub	sp, #16
 800fc4e:	af00      	add	r7, sp, #0
 800fc50:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc56:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800fc58:	68f8      	ldr	r0, [r7, #12]
 800fc5a:	f7ff ff8f 	bl	800fb7c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800fc5e:	bf00      	nop
 800fc60:	3710      	adds	r7, #16
 800fc62:	46bd      	mov	sp, r7
 800fc64:	bd80      	pop	{r7, pc}

0800fc66 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800fc66:	b580      	push	{r7, lr}
 800fc68:	b084      	sub	sp, #16
 800fc6a:	af00      	add	r7, sp, #0
 800fc6c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc72:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	685a      	ldr	r2, [r3, #4]
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	f022 0203 	bic.w	r2, r2, #3
 800fc82:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fc88:	f043 0210 	orr.w	r2, r3, #16
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	2201      	movs	r2, #1
 800fc94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800fc98:	68f8      	ldr	r0, [r7, #12]
 800fc9a:	f7ff ff79 	bl	800fb90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800fc9e:	bf00      	nop
 800fca0:	3710      	adds	r7, #16
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}
	...

0800fca8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b088      	sub	sp, #32
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	60f8      	str	r0, [r7, #12]
 800fcb0:	60b9      	str	r1, [r7, #8]
 800fcb2:	603b      	str	r3, [r7, #0]
 800fcb4:	4613      	mov	r3, r2
 800fcb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800fcb8:	f7f7 fbf0 	bl	800749c <HAL_GetTick>
 800fcbc:	4602      	mov	r2, r0
 800fcbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcc0:	1a9b      	subs	r3, r3, r2
 800fcc2:	683a      	ldr	r2, [r7, #0]
 800fcc4:	4413      	add	r3, r2
 800fcc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800fcc8:	f7f7 fbe8 	bl	800749c <HAL_GetTick>
 800fccc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800fcce:	4b39      	ldr	r3, [pc, #228]	; (800fdb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	015b      	lsls	r3, r3, #5
 800fcd4:	0d1b      	lsrs	r3, r3, #20
 800fcd6:	69fa      	ldr	r2, [r7, #28]
 800fcd8:	fb02 f303 	mul.w	r3, r2, r3
 800fcdc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fcde:	e054      	b.n	800fd8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800fce0:	683b      	ldr	r3, [r7, #0]
 800fce2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fce6:	d050      	beq.n	800fd8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800fce8:	f7f7 fbd8 	bl	800749c <HAL_GetTick>
 800fcec:	4602      	mov	r2, r0
 800fcee:	69bb      	ldr	r3, [r7, #24]
 800fcf0:	1ad3      	subs	r3, r2, r3
 800fcf2:	69fa      	ldr	r2, [r7, #28]
 800fcf4:	429a      	cmp	r2, r3
 800fcf6:	d902      	bls.n	800fcfe <SPI_WaitFlagStateUntilTimeout+0x56>
 800fcf8:	69fb      	ldr	r3, [r7, #28]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d13d      	bne.n	800fd7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	685a      	ldr	r2, [r3, #4]
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800fd0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	685b      	ldr	r3, [r3, #4]
 800fd12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fd16:	d111      	bne.n	800fd3c <SPI_WaitFlagStateUntilTimeout+0x94>
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	689b      	ldr	r3, [r3, #8]
 800fd1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd20:	d004      	beq.n	800fd2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	689b      	ldr	r3, [r3, #8]
 800fd26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fd2a:	d107      	bne.n	800fd3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	681a      	ldr	r2, [r3, #0]
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fd3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fd44:	d10f      	bne.n	800fd66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	681a      	ldr	r2, [r3, #0]
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fd54:	601a      	str	r2, [r3, #0]
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	681a      	ldr	r2, [r3, #0]
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fd64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	2201      	movs	r2, #1
 800fd6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	2200      	movs	r2, #0
 800fd72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800fd76:	2303      	movs	r3, #3
 800fd78:	e017      	b.n	800fdaa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d101      	bne.n	800fd84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800fd80:	2300      	movs	r3, #0
 800fd82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800fd84:	697b      	ldr	r3, [r7, #20]
 800fd86:	3b01      	subs	r3, #1
 800fd88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	689a      	ldr	r2, [r3, #8]
 800fd90:	68bb      	ldr	r3, [r7, #8]
 800fd92:	4013      	ands	r3, r2
 800fd94:	68ba      	ldr	r2, [r7, #8]
 800fd96:	429a      	cmp	r2, r3
 800fd98:	bf0c      	ite	eq
 800fd9a:	2301      	moveq	r3, #1
 800fd9c:	2300      	movne	r3, #0
 800fd9e:	b2db      	uxtb	r3, r3
 800fda0:	461a      	mov	r2, r3
 800fda2:	79fb      	ldrb	r3, [r7, #7]
 800fda4:	429a      	cmp	r2, r3
 800fda6:	d19b      	bne.n	800fce0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800fda8:	2300      	movs	r3, #0
}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	3720      	adds	r7, #32
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}
 800fdb2:	bf00      	nop
 800fdb4:	20000004 	.word	0x20000004

0800fdb8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b08a      	sub	sp, #40	; 0x28
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	60f8      	str	r0, [r7, #12]
 800fdc0:	60b9      	str	r1, [r7, #8]
 800fdc2:	607a      	str	r2, [r7, #4]
 800fdc4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800fdca:	f7f7 fb67 	bl	800749c <HAL_GetTick>
 800fdce:	4602      	mov	r2, r0
 800fdd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdd2:	1a9b      	subs	r3, r3, r2
 800fdd4:	683a      	ldr	r2, [r7, #0]
 800fdd6:	4413      	add	r3, r2
 800fdd8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800fdda:	f7f7 fb5f 	bl	800749c <HAL_GetTick>
 800fdde:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	330c      	adds	r3, #12
 800fde6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800fde8:	4b3d      	ldr	r3, [pc, #244]	; (800fee0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800fdea:	681a      	ldr	r2, [r3, #0]
 800fdec:	4613      	mov	r3, r2
 800fdee:	009b      	lsls	r3, r3, #2
 800fdf0:	4413      	add	r3, r2
 800fdf2:	00da      	lsls	r2, r3, #3
 800fdf4:	1ad3      	subs	r3, r2, r3
 800fdf6:	0d1b      	lsrs	r3, r3, #20
 800fdf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdfa:	fb02 f303 	mul.w	r3, r2, r3
 800fdfe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800fe00:	e060      	b.n	800fec4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800fe08:	d107      	bne.n	800fe1a <SPI_WaitFifoStateUntilTimeout+0x62>
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d104      	bne.n	800fe1a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800fe10:	69fb      	ldr	r3, [r7, #28]
 800fe12:	781b      	ldrb	r3, [r3, #0]
 800fe14:	b2db      	uxtb	r3, r3
 800fe16:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800fe18:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fe20:	d050      	beq.n	800fec4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800fe22:	f7f7 fb3b 	bl	800749c <HAL_GetTick>
 800fe26:	4602      	mov	r2, r0
 800fe28:	6a3b      	ldr	r3, [r7, #32]
 800fe2a:	1ad3      	subs	r3, r2, r3
 800fe2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe2e:	429a      	cmp	r2, r3
 800fe30:	d902      	bls.n	800fe38 <SPI_WaitFifoStateUntilTimeout+0x80>
 800fe32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d13d      	bne.n	800feb4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	685a      	ldr	r2, [r3, #4]
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800fe46:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	685b      	ldr	r3, [r3, #4]
 800fe4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fe50:	d111      	bne.n	800fe76 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	689b      	ldr	r3, [r3, #8]
 800fe56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fe5a:	d004      	beq.n	800fe66 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	689b      	ldr	r3, [r3, #8]
 800fe60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fe64:	d107      	bne.n	800fe76 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	681a      	ldr	r2, [r3, #0]
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fe74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fe7e:	d10f      	bne.n	800fea0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	681a      	ldr	r2, [r3, #0]
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fe8e:	601a      	str	r2, [r3, #0]
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	681a      	ldr	r2, [r3, #0]
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fe9e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	2201      	movs	r2, #1
 800fea4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	2200      	movs	r2, #0
 800feac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800feb0:	2303      	movs	r3, #3
 800feb2:	e010      	b.n	800fed6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800feb4:	69bb      	ldr	r3, [r7, #24]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d101      	bne.n	800febe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800feba:	2300      	movs	r3, #0
 800febc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800febe:	69bb      	ldr	r3, [r7, #24]
 800fec0:	3b01      	subs	r3, #1
 800fec2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	689a      	ldr	r2, [r3, #8]
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	4013      	ands	r3, r2
 800fece:	687a      	ldr	r2, [r7, #4]
 800fed0:	429a      	cmp	r2, r3
 800fed2:	d196      	bne.n	800fe02 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800fed4:	2300      	movs	r3, #0
}
 800fed6:	4618      	mov	r0, r3
 800fed8:	3728      	adds	r7, #40	; 0x28
 800feda:	46bd      	mov	sp, r7
 800fedc:	bd80      	pop	{r7, pc}
 800fede:	bf00      	nop
 800fee0:	20000004 	.word	0x20000004

0800fee4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b086      	sub	sp, #24
 800fee8:	af02      	add	r7, sp, #8
 800feea:	60f8      	str	r0, [r7, #12]
 800feec:	60b9      	str	r1, [r7, #8]
 800feee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	685b      	ldr	r3, [r3, #4]
 800fef4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fef8:	d111      	bne.n	800ff1e <SPI_EndRxTransaction+0x3a>
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	689b      	ldr	r3, [r3, #8]
 800fefe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff02:	d004      	beq.n	800ff0e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	689b      	ldr	r3, [r3, #8]
 800ff08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ff0c:	d107      	bne.n	800ff1e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	681a      	ldr	r2, [r3, #0]
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ff1c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	9300      	str	r3, [sp, #0]
 800ff22:	68bb      	ldr	r3, [r7, #8]
 800ff24:	2200      	movs	r2, #0
 800ff26:	2180      	movs	r1, #128	; 0x80
 800ff28:	68f8      	ldr	r0, [r7, #12]
 800ff2a:	f7ff febd 	bl	800fca8 <SPI_WaitFlagStateUntilTimeout>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d007      	beq.n	800ff44 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ff38:	f043 0220 	orr.w	r2, r3, #32
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ff40:	2303      	movs	r3, #3
 800ff42:	e023      	b.n	800ff8c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	685b      	ldr	r3, [r3, #4]
 800ff48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ff4c:	d11d      	bne.n	800ff8a <SPI_EndRxTransaction+0xa6>
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	689b      	ldr	r3, [r3, #8]
 800ff52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff56:	d004      	beq.n	800ff62 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	689b      	ldr	r3, [r3, #8]
 800ff5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ff60:	d113      	bne.n	800ff8a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	9300      	str	r3, [sp, #0]
 800ff66:	68bb      	ldr	r3, [r7, #8]
 800ff68:	2200      	movs	r2, #0
 800ff6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ff6e:	68f8      	ldr	r0, [r7, #12]
 800ff70:	f7ff ff22 	bl	800fdb8 <SPI_WaitFifoStateUntilTimeout>
 800ff74:	4603      	mov	r3, r0
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d007      	beq.n	800ff8a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ff7e:	f043 0220 	orr.w	r2, r3, #32
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800ff86:	2303      	movs	r3, #3
 800ff88:	e000      	b.n	800ff8c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800ff8a:	2300      	movs	r3, #0
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3710      	adds	r7, #16
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd80      	pop	{r7, pc}

0800ff94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b086      	sub	sp, #24
 800ff98:	af02      	add	r7, sp, #8
 800ff9a:	60f8      	str	r0, [r7, #12]
 800ff9c:	60b9      	str	r1, [r7, #8]
 800ff9e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	9300      	str	r3, [sp, #0]
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800ffac:	68f8      	ldr	r0, [r7, #12]
 800ffae:	f7ff ff03 	bl	800fdb8 <SPI_WaitFifoStateUntilTimeout>
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d007      	beq.n	800ffc8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ffbc:	f043 0220 	orr.w	r2, r3, #32
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ffc4:	2303      	movs	r3, #3
 800ffc6:	e027      	b.n	8010018 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	9300      	str	r3, [sp, #0]
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	2200      	movs	r2, #0
 800ffd0:	2180      	movs	r1, #128	; 0x80
 800ffd2:	68f8      	ldr	r0, [r7, #12]
 800ffd4:	f7ff fe68 	bl	800fca8 <SPI_WaitFlagStateUntilTimeout>
 800ffd8:	4603      	mov	r3, r0
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d007      	beq.n	800ffee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ffe2:	f043 0220 	orr.w	r2, r3, #32
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ffea:	2303      	movs	r3, #3
 800ffec:	e014      	b.n	8010018 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	9300      	str	r3, [sp, #0]
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	2200      	movs	r2, #0
 800fff6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800fffa:	68f8      	ldr	r0, [r7, #12]
 800fffc:	f7ff fedc 	bl	800fdb8 <SPI_WaitFifoStateUntilTimeout>
 8010000:	4603      	mov	r3, r0
 8010002:	2b00      	cmp	r3, #0
 8010004:	d007      	beq.n	8010016 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801000a:	f043 0220 	orr.w	r2, r3, #32
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8010012:	2303      	movs	r3, #3
 8010014:	e000      	b.n	8010018 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8010016:	2300      	movs	r3, #0
}
 8010018:	4618      	mov	r0, r3
 801001a:	3710      	adds	r7, #16
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}

08010020 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b082      	sub	sp, #8
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d101      	bne.n	8010032 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801002e:	2301      	movs	r3, #1
 8010030:	e049      	b.n	80100c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010038:	b2db      	uxtb	r3, r3
 801003a:	2b00      	cmp	r3, #0
 801003c:	d106      	bne.n	801004c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	2200      	movs	r2, #0
 8010042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010046:	6878      	ldr	r0, [r7, #4]
 8010048:	f7f5 fad6 	bl	80055f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	2202      	movs	r2, #2
 8010050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681a      	ldr	r2, [r3, #0]
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	3304      	adds	r3, #4
 801005c:	4619      	mov	r1, r3
 801005e:	4610      	mov	r0, r2
 8010060:	f000 fab6 	bl	80105d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	2201      	movs	r2, #1
 8010068:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2201      	movs	r2, #1
 8010070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2201      	movs	r2, #1
 8010078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2201      	movs	r2, #1
 8010080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	2201      	movs	r2, #1
 8010088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	2201      	movs	r2, #1
 8010090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2201      	movs	r2, #1
 8010098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2201      	movs	r2, #1
 80100a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2201      	movs	r2, #1
 80100a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	2201      	movs	r2, #1
 80100b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	2201      	movs	r2, #1
 80100b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	2201      	movs	r2, #1
 80100c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80100c4:	2300      	movs	r3, #0
}
 80100c6:	4618      	mov	r0, r3
 80100c8:	3708      	adds	r7, #8
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}
	...

080100d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80100d0:	b480      	push	{r7}
 80100d2:	b085      	sub	sp, #20
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80100de:	b2db      	uxtb	r3, r3
 80100e0:	2b01      	cmp	r3, #1
 80100e2:	d001      	beq.n	80100e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80100e4:	2301      	movs	r3, #1
 80100e6:	e04f      	b.n	8010188 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	2202      	movs	r2, #2
 80100ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	68da      	ldr	r2, [r3, #12]
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	f042 0201 	orr.w	r2, r2, #1
 80100fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	4a23      	ldr	r2, [pc, #140]	; (8010194 <HAL_TIM_Base_Start_IT+0xc4>)
 8010106:	4293      	cmp	r3, r2
 8010108:	d01d      	beq.n	8010146 <HAL_TIM_Base_Start_IT+0x76>
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010112:	d018      	beq.n	8010146 <HAL_TIM_Base_Start_IT+0x76>
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	4a1f      	ldr	r2, [pc, #124]	; (8010198 <HAL_TIM_Base_Start_IT+0xc8>)
 801011a:	4293      	cmp	r3, r2
 801011c:	d013      	beq.n	8010146 <HAL_TIM_Base_Start_IT+0x76>
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	4a1e      	ldr	r2, [pc, #120]	; (801019c <HAL_TIM_Base_Start_IT+0xcc>)
 8010124:	4293      	cmp	r3, r2
 8010126:	d00e      	beq.n	8010146 <HAL_TIM_Base_Start_IT+0x76>
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	4a1c      	ldr	r2, [pc, #112]	; (80101a0 <HAL_TIM_Base_Start_IT+0xd0>)
 801012e:	4293      	cmp	r3, r2
 8010130:	d009      	beq.n	8010146 <HAL_TIM_Base_Start_IT+0x76>
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	4a1b      	ldr	r2, [pc, #108]	; (80101a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8010138:	4293      	cmp	r3, r2
 801013a:	d004      	beq.n	8010146 <HAL_TIM_Base_Start_IT+0x76>
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	4a19      	ldr	r2, [pc, #100]	; (80101a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8010142:	4293      	cmp	r3, r2
 8010144:	d115      	bne.n	8010172 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	689a      	ldr	r2, [r3, #8]
 801014c:	4b17      	ldr	r3, [pc, #92]	; (80101ac <HAL_TIM_Base_Start_IT+0xdc>)
 801014e:	4013      	ands	r3, r2
 8010150:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	2b06      	cmp	r3, #6
 8010156:	d015      	beq.n	8010184 <HAL_TIM_Base_Start_IT+0xb4>
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801015e:	d011      	beq.n	8010184 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	681a      	ldr	r2, [r3, #0]
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	f042 0201 	orr.w	r2, r2, #1
 801016e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010170:	e008      	b.n	8010184 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	681a      	ldr	r2, [r3, #0]
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	f042 0201 	orr.w	r2, r2, #1
 8010180:	601a      	str	r2, [r3, #0]
 8010182:	e000      	b.n	8010186 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010184:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010186:	2300      	movs	r3, #0
}
 8010188:	4618      	mov	r0, r3
 801018a:	3714      	adds	r7, #20
 801018c:	46bd      	mov	sp, r7
 801018e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010192:	4770      	bx	lr
 8010194:	40012c00 	.word	0x40012c00
 8010198:	40000400 	.word	0x40000400
 801019c:	40000800 	.word	0x40000800
 80101a0:	40000c00 	.word	0x40000c00
 80101a4:	40013400 	.word	0x40013400
 80101a8:	40014000 	.word	0x40014000
 80101ac:	00010007 	.word	0x00010007

080101b0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b082      	sub	sp, #8
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d101      	bne.n	80101c2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80101be:	2301      	movs	r3, #1
 80101c0:	e049      	b.n	8010256 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80101c8:	b2db      	uxtb	r3, r3
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d106      	bne.n	80101dc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	2200      	movs	r2, #0
 80101d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f000 f841 	bl	801025e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2202      	movs	r2, #2
 80101e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681a      	ldr	r2, [r3, #0]
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	3304      	adds	r3, #4
 80101ec:	4619      	mov	r1, r3
 80101ee:	4610      	mov	r0, r2
 80101f0:	f000 f9ee 	bl	80105d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2201      	movs	r2, #1
 80101f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2201      	movs	r2, #1
 8010200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	2201      	movs	r2, #1
 8010208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	2201      	movs	r2, #1
 8010210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2201      	movs	r2, #1
 8010218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2201      	movs	r2, #1
 8010220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	2201      	movs	r2, #1
 8010228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	2201      	movs	r2, #1
 8010230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	2201      	movs	r2, #1
 8010238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	2201      	movs	r2, #1
 8010240:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	2201      	movs	r2, #1
 8010248:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	2201      	movs	r2, #1
 8010250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010254:	2300      	movs	r3, #0
}
 8010256:	4618      	mov	r0, r3
 8010258:	3708      	adds	r7, #8
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}

0801025e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 801025e:	b480      	push	{r7}
 8010260:	b083      	sub	sp, #12
 8010262:	af00      	add	r7, sp, #0
 8010264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8010266:	bf00      	nop
 8010268:	370c      	adds	r7, #12
 801026a:	46bd      	mov	sp, r7
 801026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010270:	4770      	bx	lr

08010272 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010272:	b580      	push	{r7, lr}
 8010274:	b084      	sub	sp, #16
 8010276:	af00      	add	r7, sp, #0
 8010278:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	68db      	ldr	r3, [r3, #12]
 8010280:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	691b      	ldr	r3, [r3, #16]
 8010288:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801028a:	68bb      	ldr	r3, [r7, #8]
 801028c:	f003 0302 	and.w	r3, r3, #2
 8010290:	2b00      	cmp	r3, #0
 8010292:	d020      	beq.n	80102d6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	f003 0302 	and.w	r3, r3, #2
 801029a:	2b00      	cmp	r3, #0
 801029c:	d01b      	beq.n	80102d6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	f06f 0202 	mvn.w	r2, #2
 80102a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	2201      	movs	r2, #1
 80102ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	699b      	ldr	r3, [r3, #24]
 80102b4:	f003 0303 	and.w	r3, r3, #3
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d003      	beq.n	80102c4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f000 f969 	bl	8010594 <HAL_TIM_IC_CaptureCallback>
 80102c2:	e005      	b.n	80102d0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	f000 f95b 	bl	8010580 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80102ca:	6878      	ldr	r0, [r7, #4]
 80102cc:	f000 f96c 	bl	80105a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	2200      	movs	r2, #0
 80102d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80102d6:	68bb      	ldr	r3, [r7, #8]
 80102d8:	f003 0304 	and.w	r3, r3, #4
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d020      	beq.n	8010322 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	f003 0304 	and.w	r3, r3, #4
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d01b      	beq.n	8010322 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	f06f 0204 	mvn.w	r2, #4
 80102f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2202      	movs	r2, #2
 80102f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	699b      	ldr	r3, [r3, #24]
 8010300:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010304:	2b00      	cmp	r3, #0
 8010306:	d003      	beq.n	8010310 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010308:	6878      	ldr	r0, [r7, #4]
 801030a:	f000 f943 	bl	8010594 <HAL_TIM_IC_CaptureCallback>
 801030e:	e005      	b.n	801031c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f000 f935 	bl	8010580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010316:	6878      	ldr	r0, [r7, #4]
 8010318:	f000 f946 	bl	80105a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2200      	movs	r2, #0
 8010320:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8010322:	68bb      	ldr	r3, [r7, #8]
 8010324:	f003 0308 	and.w	r3, r3, #8
 8010328:	2b00      	cmp	r3, #0
 801032a:	d020      	beq.n	801036e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	f003 0308 	and.w	r3, r3, #8
 8010332:	2b00      	cmp	r3, #0
 8010334:	d01b      	beq.n	801036e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	f06f 0208 	mvn.w	r2, #8
 801033e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	2204      	movs	r2, #4
 8010344:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	69db      	ldr	r3, [r3, #28]
 801034c:	f003 0303 	and.w	r3, r3, #3
 8010350:	2b00      	cmp	r3, #0
 8010352:	d003      	beq.n	801035c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010354:	6878      	ldr	r0, [r7, #4]
 8010356:	f000 f91d 	bl	8010594 <HAL_TIM_IC_CaptureCallback>
 801035a:	e005      	b.n	8010368 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801035c:	6878      	ldr	r0, [r7, #4]
 801035e:	f000 f90f 	bl	8010580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010362:	6878      	ldr	r0, [r7, #4]
 8010364:	f000 f920 	bl	80105a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	2200      	movs	r2, #0
 801036c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	f003 0310 	and.w	r3, r3, #16
 8010374:	2b00      	cmp	r3, #0
 8010376:	d020      	beq.n	80103ba <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	f003 0310 	and.w	r3, r3, #16
 801037e:	2b00      	cmp	r3, #0
 8010380:	d01b      	beq.n	80103ba <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	f06f 0210 	mvn.w	r2, #16
 801038a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	2208      	movs	r2, #8
 8010390:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	69db      	ldr	r3, [r3, #28]
 8010398:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801039c:	2b00      	cmp	r3, #0
 801039e:	d003      	beq.n	80103a8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80103a0:	6878      	ldr	r0, [r7, #4]
 80103a2:	f000 f8f7 	bl	8010594 <HAL_TIM_IC_CaptureCallback>
 80103a6:	e005      	b.n	80103b4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80103a8:	6878      	ldr	r0, [r7, #4]
 80103aa:	f000 f8e9 	bl	8010580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f000 f8fa 	bl	80105a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	2200      	movs	r2, #0
 80103b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80103ba:	68bb      	ldr	r3, [r7, #8]
 80103bc:	f003 0301 	and.w	r3, r3, #1
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d00c      	beq.n	80103de <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	f003 0301 	and.w	r3, r3, #1
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d007      	beq.n	80103de <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	f06f 0201 	mvn.w	r2, #1
 80103d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80103d8:	6878      	ldr	r0, [r7, #4]
 80103da:	f000 f8c7 	bl	801056c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d00c      	beq.n	8010402 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d007      	beq.n	8010402 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80103fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80103fc:	6878      	ldr	r0, [r7, #4]
 80103fe:	f000 fcdf 	bl	8010dc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8010402:	68bb      	ldr	r3, [r7, #8]
 8010404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010408:	2b00      	cmp	r3, #0
 801040a:	d00c      	beq.n	8010426 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010412:	2b00      	cmp	r3, #0
 8010414:	d007      	beq.n	8010426 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801041e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f000 fcd7 	bl	8010dd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8010426:	68bb      	ldr	r3, [r7, #8]
 8010428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801042c:	2b00      	cmp	r3, #0
 801042e:	d00c      	beq.n	801044a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010436:	2b00      	cmp	r3, #0
 8010438:	d007      	beq.n	801044a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010444:	6878      	ldr	r0, [r7, #4]
 8010446:	f000 f8b9 	bl	80105bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801044a:	68bb      	ldr	r3, [r7, #8]
 801044c:	f003 0320 	and.w	r3, r3, #32
 8010450:	2b00      	cmp	r3, #0
 8010452:	d00c      	beq.n	801046e <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	f003 0320 	and.w	r3, r3, #32
 801045a:	2b00      	cmp	r3, #0
 801045c:	d007      	beq.n	801046e <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	f06f 0220 	mvn.w	r2, #32
 8010466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010468:	6878      	ldr	r0, [r7, #4]
 801046a:	f000 fc9f 	bl	8010dac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801046e:	bf00      	nop
 8010470:	3710      	adds	r7, #16
 8010472:	46bd      	mov	sp, r7
 8010474:	bd80      	pop	{r7, pc}
	...

08010478 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b086      	sub	sp, #24
 801047c:	af00      	add	r7, sp, #0
 801047e:	60f8      	str	r0, [r7, #12]
 8010480:	60b9      	str	r1, [r7, #8]
 8010482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010484:	2300      	movs	r3, #0
 8010486:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801048e:	2b01      	cmp	r3, #1
 8010490:	d101      	bne.n	8010496 <HAL_TIM_OC_ConfigChannel+0x1e>
 8010492:	2302      	movs	r3, #2
 8010494:	e066      	b.n	8010564 <HAL_TIM_OC_ConfigChannel+0xec>
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	2201      	movs	r2, #1
 801049a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	2b14      	cmp	r3, #20
 80104a2:	d857      	bhi.n	8010554 <HAL_TIM_OC_ConfigChannel+0xdc>
 80104a4:	a201      	add	r2, pc, #4	; (adr r2, 80104ac <HAL_TIM_OC_ConfigChannel+0x34>)
 80104a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104aa:	bf00      	nop
 80104ac:	08010501 	.word	0x08010501
 80104b0:	08010555 	.word	0x08010555
 80104b4:	08010555 	.word	0x08010555
 80104b8:	08010555 	.word	0x08010555
 80104bc:	0801050f 	.word	0x0801050f
 80104c0:	08010555 	.word	0x08010555
 80104c4:	08010555 	.word	0x08010555
 80104c8:	08010555 	.word	0x08010555
 80104cc:	0801051d 	.word	0x0801051d
 80104d0:	08010555 	.word	0x08010555
 80104d4:	08010555 	.word	0x08010555
 80104d8:	08010555 	.word	0x08010555
 80104dc:	0801052b 	.word	0x0801052b
 80104e0:	08010555 	.word	0x08010555
 80104e4:	08010555 	.word	0x08010555
 80104e8:	08010555 	.word	0x08010555
 80104ec:	08010539 	.word	0x08010539
 80104f0:	08010555 	.word	0x08010555
 80104f4:	08010555 	.word	0x08010555
 80104f8:	08010555 	.word	0x08010555
 80104fc:	08010547 	.word	0x08010547
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	68b9      	ldr	r1, [r7, #8]
 8010506:	4618      	mov	r0, r3
 8010508:	f000 f8fc 	bl	8010704 <TIM_OC1_SetConfig>
      break;
 801050c:	e025      	b.n	801055a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	68b9      	ldr	r1, [r7, #8]
 8010514:	4618      	mov	r0, r3
 8010516:	f000 f985 	bl	8010824 <TIM_OC2_SetConfig>
      break;
 801051a:	e01e      	b.n	801055a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	68b9      	ldr	r1, [r7, #8]
 8010522:	4618      	mov	r0, r3
 8010524:	f000 fa08 	bl	8010938 <TIM_OC3_SetConfig>
      break;
 8010528:	e017      	b.n	801055a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	68b9      	ldr	r1, [r7, #8]
 8010530:	4618      	mov	r0, r3
 8010532:	f000 fa89 	bl	8010a48 <TIM_OC4_SetConfig>
      break;
 8010536:	e010      	b.n	801055a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	68b9      	ldr	r1, [r7, #8]
 801053e:	4618      	mov	r0, r3
 8010540:	f000 faec 	bl	8010b1c <TIM_OC5_SetConfig>
      break;
 8010544:	e009      	b.n	801055a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	68b9      	ldr	r1, [r7, #8]
 801054c:	4618      	mov	r0, r3
 801054e:	f000 fb49 	bl	8010be4 <TIM_OC6_SetConfig>
      break;
 8010552:	e002      	b.n	801055a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8010554:	2301      	movs	r3, #1
 8010556:	75fb      	strb	r3, [r7, #23]
      break;
 8010558:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	2200      	movs	r2, #0
 801055e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010562:	7dfb      	ldrb	r3, [r7, #23]
}
 8010564:	4618      	mov	r0, r3
 8010566:	3718      	adds	r7, #24
 8010568:	46bd      	mov	sp, r7
 801056a:	bd80      	pop	{r7, pc}

0801056c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801056c:	b480      	push	{r7}
 801056e:	b083      	sub	sp, #12
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8010574:	bf00      	nop
 8010576:	370c      	adds	r7, #12
 8010578:	46bd      	mov	sp, r7
 801057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057e:	4770      	bx	lr

08010580 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010580:	b480      	push	{r7}
 8010582:	b083      	sub	sp, #12
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010588:	bf00      	nop
 801058a:	370c      	adds	r7, #12
 801058c:	46bd      	mov	sp, r7
 801058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010592:	4770      	bx	lr

08010594 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010594:	b480      	push	{r7}
 8010596:	b083      	sub	sp, #12
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801059c:	bf00      	nop
 801059e:	370c      	adds	r7, #12
 80105a0:	46bd      	mov	sp, r7
 80105a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a6:	4770      	bx	lr

080105a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80105a8:	b480      	push	{r7}
 80105aa:	b083      	sub	sp, #12
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80105b0:	bf00      	nop
 80105b2:	370c      	adds	r7, #12
 80105b4:	46bd      	mov	sp, r7
 80105b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ba:	4770      	bx	lr

080105bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80105bc:	b480      	push	{r7}
 80105be:	b083      	sub	sp, #12
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80105c4:	bf00      	nop
 80105c6:	370c      	adds	r7, #12
 80105c8:	46bd      	mov	sp, r7
 80105ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ce:	4770      	bx	lr

080105d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80105d0:	b480      	push	{r7}
 80105d2:	b085      	sub	sp, #20
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
 80105d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	4a40      	ldr	r2, [pc, #256]	; (80106e4 <TIM_Base_SetConfig+0x114>)
 80105e4:	4293      	cmp	r3, r2
 80105e6:	d013      	beq.n	8010610 <TIM_Base_SetConfig+0x40>
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80105ee:	d00f      	beq.n	8010610 <TIM_Base_SetConfig+0x40>
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	4a3d      	ldr	r2, [pc, #244]	; (80106e8 <TIM_Base_SetConfig+0x118>)
 80105f4:	4293      	cmp	r3, r2
 80105f6:	d00b      	beq.n	8010610 <TIM_Base_SetConfig+0x40>
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	4a3c      	ldr	r2, [pc, #240]	; (80106ec <TIM_Base_SetConfig+0x11c>)
 80105fc:	4293      	cmp	r3, r2
 80105fe:	d007      	beq.n	8010610 <TIM_Base_SetConfig+0x40>
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	4a3b      	ldr	r2, [pc, #236]	; (80106f0 <TIM_Base_SetConfig+0x120>)
 8010604:	4293      	cmp	r3, r2
 8010606:	d003      	beq.n	8010610 <TIM_Base_SetConfig+0x40>
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	4a3a      	ldr	r2, [pc, #232]	; (80106f4 <TIM_Base_SetConfig+0x124>)
 801060c:	4293      	cmp	r3, r2
 801060e:	d108      	bne.n	8010622 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010616:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010618:	683b      	ldr	r3, [r7, #0]
 801061a:	685b      	ldr	r3, [r3, #4]
 801061c:	68fa      	ldr	r2, [r7, #12]
 801061e:	4313      	orrs	r3, r2
 8010620:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	4a2f      	ldr	r2, [pc, #188]	; (80106e4 <TIM_Base_SetConfig+0x114>)
 8010626:	4293      	cmp	r3, r2
 8010628:	d01f      	beq.n	801066a <TIM_Base_SetConfig+0x9a>
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010630:	d01b      	beq.n	801066a <TIM_Base_SetConfig+0x9a>
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	4a2c      	ldr	r2, [pc, #176]	; (80106e8 <TIM_Base_SetConfig+0x118>)
 8010636:	4293      	cmp	r3, r2
 8010638:	d017      	beq.n	801066a <TIM_Base_SetConfig+0x9a>
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	4a2b      	ldr	r2, [pc, #172]	; (80106ec <TIM_Base_SetConfig+0x11c>)
 801063e:	4293      	cmp	r3, r2
 8010640:	d013      	beq.n	801066a <TIM_Base_SetConfig+0x9a>
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	4a2a      	ldr	r2, [pc, #168]	; (80106f0 <TIM_Base_SetConfig+0x120>)
 8010646:	4293      	cmp	r3, r2
 8010648:	d00f      	beq.n	801066a <TIM_Base_SetConfig+0x9a>
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	4a29      	ldr	r2, [pc, #164]	; (80106f4 <TIM_Base_SetConfig+0x124>)
 801064e:	4293      	cmp	r3, r2
 8010650:	d00b      	beq.n	801066a <TIM_Base_SetConfig+0x9a>
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	4a28      	ldr	r2, [pc, #160]	; (80106f8 <TIM_Base_SetConfig+0x128>)
 8010656:	4293      	cmp	r3, r2
 8010658:	d007      	beq.n	801066a <TIM_Base_SetConfig+0x9a>
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	4a27      	ldr	r2, [pc, #156]	; (80106fc <TIM_Base_SetConfig+0x12c>)
 801065e:	4293      	cmp	r3, r2
 8010660:	d003      	beq.n	801066a <TIM_Base_SetConfig+0x9a>
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	4a26      	ldr	r2, [pc, #152]	; (8010700 <TIM_Base_SetConfig+0x130>)
 8010666:	4293      	cmp	r3, r2
 8010668:	d108      	bne.n	801067c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010672:	683b      	ldr	r3, [r7, #0]
 8010674:	68db      	ldr	r3, [r3, #12]
 8010676:	68fa      	ldr	r2, [r7, #12]
 8010678:	4313      	orrs	r3, r2
 801067a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	695b      	ldr	r3, [r3, #20]
 8010686:	4313      	orrs	r3, r2
 8010688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	68fa      	ldr	r2, [r7, #12]
 801068e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	689a      	ldr	r2, [r3, #8]
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	681a      	ldr	r2, [r3, #0]
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	4a10      	ldr	r2, [pc, #64]	; (80106e4 <TIM_Base_SetConfig+0x114>)
 80106a4:	4293      	cmp	r3, r2
 80106a6:	d00f      	beq.n	80106c8 <TIM_Base_SetConfig+0xf8>
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	4a12      	ldr	r2, [pc, #72]	; (80106f4 <TIM_Base_SetConfig+0x124>)
 80106ac:	4293      	cmp	r3, r2
 80106ae:	d00b      	beq.n	80106c8 <TIM_Base_SetConfig+0xf8>
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	4a11      	ldr	r2, [pc, #68]	; (80106f8 <TIM_Base_SetConfig+0x128>)
 80106b4:	4293      	cmp	r3, r2
 80106b6:	d007      	beq.n	80106c8 <TIM_Base_SetConfig+0xf8>
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	4a10      	ldr	r2, [pc, #64]	; (80106fc <TIM_Base_SetConfig+0x12c>)
 80106bc:	4293      	cmp	r3, r2
 80106be:	d003      	beq.n	80106c8 <TIM_Base_SetConfig+0xf8>
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	4a0f      	ldr	r2, [pc, #60]	; (8010700 <TIM_Base_SetConfig+0x130>)
 80106c4:	4293      	cmp	r3, r2
 80106c6:	d103      	bne.n	80106d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80106c8:	683b      	ldr	r3, [r7, #0]
 80106ca:	691a      	ldr	r2, [r3, #16]
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2201      	movs	r2, #1
 80106d4:	615a      	str	r2, [r3, #20]
}
 80106d6:	bf00      	nop
 80106d8:	3714      	adds	r7, #20
 80106da:	46bd      	mov	sp, r7
 80106dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e0:	4770      	bx	lr
 80106e2:	bf00      	nop
 80106e4:	40012c00 	.word	0x40012c00
 80106e8:	40000400 	.word	0x40000400
 80106ec:	40000800 	.word	0x40000800
 80106f0:	40000c00 	.word	0x40000c00
 80106f4:	40013400 	.word	0x40013400
 80106f8:	40014000 	.word	0x40014000
 80106fc:	40014400 	.word	0x40014400
 8010700:	40014800 	.word	0x40014800

08010704 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010704:	b480      	push	{r7}
 8010706:	b087      	sub	sp, #28
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
 801070c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	6a1b      	ldr	r3, [r3, #32]
 8010712:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	6a1b      	ldr	r3, [r3, #32]
 8010718:	f023 0201 	bic.w	r2, r3, #1
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	685b      	ldr	r3, [r3, #4]
 8010724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	699b      	ldr	r3, [r3, #24]
 801072a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	f023 0303 	bic.w	r3, r3, #3
 801073e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	68fa      	ldr	r2, [r7, #12]
 8010746:	4313      	orrs	r3, r2
 8010748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801074a:	697b      	ldr	r3, [r7, #20]
 801074c:	f023 0302 	bic.w	r3, r3, #2
 8010750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010752:	683b      	ldr	r3, [r7, #0]
 8010754:	689b      	ldr	r3, [r3, #8]
 8010756:	697a      	ldr	r2, [r7, #20]
 8010758:	4313      	orrs	r3, r2
 801075a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	4a2c      	ldr	r2, [pc, #176]	; (8010810 <TIM_OC1_SetConfig+0x10c>)
 8010760:	4293      	cmp	r3, r2
 8010762:	d00f      	beq.n	8010784 <TIM_OC1_SetConfig+0x80>
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	4a2b      	ldr	r2, [pc, #172]	; (8010814 <TIM_OC1_SetConfig+0x110>)
 8010768:	4293      	cmp	r3, r2
 801076a:	d00b      	beq.n	8010784 <TIM_OC1_SetConfig+0x80>
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	4a2a      	ldr	r2, [pc, #168]	; (8010818 <TIM_OC1_SetConfig+0x114>)
 8010770:	4293      	cmp	r3, r2
 8010772:	d007      	beq.n	8010784 <TIM_OC1_SetConfig+0x80>
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	4a29      	ldr	r2, [pc, #164]	; (801081c <TIM_OC1_SetConfig+0x118>)
 8010778:	4293      	cmp	r3, r2
 801077a:	d003      	beq.n	8010784 <TIM_OC1_SetConfig+0x80>
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	4a28      	ldr	r2, [pc, #160]	; (8010820 <TIM_OC1_SetConfig+0x11c>)
 8010780:	4293      	cmp	r3, r2
 8010782:	d10c      	bne.n	801079e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010784:	697b      	ldr	r3, [r7, #20]
 8010786:	f023 0308 	bic.w	r3, r3, #8
 801078a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	68db      	ldr	r3, [r3, #12]
 8010790:	697a      	ldr	r2, [r7, #20]
 8010792:	4313      	orrs	r3, r2
 8010794:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010796:	697b      	ldr	r3, [r7, #20]
 8010798:	f023 0304 	bic.w	r3, r3, #4
 801079c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	4a1b      	ldr	r2, [pc, #108]	; (8010810 <TIM_OC1_SetConfig+0x10c>)
 80107a2:	4293      	cmp	r3, r2
 80107a4:	d00f      	beq.n	80107c6 <TIM_OC1_SetConfig+0xc2>
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	4a1a      	ldr	r2, [pc, #104]	; (8010814 <TIM_OC1_SetConfig+0x110>)
 80107aa:	4293      	cmp	r3, r2
 80107ac:	d00b      	beq.n	80107c6 <TIM_OC1_SetConfig+0xc2>
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	4a19      	ldr	r2, [pc, #100]	; (8010818 <TIM_OC1_SetConfig+0x114>)
 80107b2:	4293      	cmp	r3, r2
 80107b4:	d007      	beq.n	80107c6 <TIM_OC1_SetConfig+0xc2>
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	4a18      	ldr	r2, [pc, #96]	; (801081c <TIM_OC1_SetConfig+0x118>)
 80107ba:	4293      	cmp	r3, r2
 80107bc:	d003      	beq.n	80107c6 <TIM_OC1_SetConfig+0xc2>
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	4a17      	ldr	r2, [pc, #92]	; (8010820 <TIM_OC1_SetConfig+0x11c>)
 80107c2:	4293      	cmp	r3, r2
 80107c4:	d111      	bne.n	80107ea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80107c6:	693b      	ldr	r3, [r7, #16]
 80107c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80107cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80107ce:	693b      	ldr	r3, [r7, #16]
 80107d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80107d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80107d6:	683b      	ldr	r3, [r7, #0]
 80107d8:	695b      	ldr	r3, [r3, #20]
 80107da:	693a      	ldr	r2, [r7, #16]
 80107dc:	4313      	orrs	r3, r2
 80107de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80107e0:	683b      	ldr	r3, [r7, #0]
 80107e2:	699b      	ldr	r3, [r3, #24]
 80107e4:	693a      	ldr	r2, [r7, #16]
 80107e6:	4313      	orrs	r3, r2
 80107e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	693a      	ldr	r2, [r7, #16]
 80107ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	68fa      	ldr	r2, [r7, #12]
 80107f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	685a      	ldr	r2, [r3, #4]
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	697a      	ldr	r2, [r7, #20]
 8010802:	621a      	str	r2, [r3, #32]
}
 8010804:	bf00      	nop
 8010806:	371c      	adds	r7, #28
 8010808:	46bd      	mov	sp, r7
 801080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080e:	4770      	bx	lr
 8010810:	40012c00 	.word	0x40012c00
 8010814:	40013400 	.word	0x40013400
 8010818:	40014000 	.word	0x40014000
 801081c:	40014400 	.word	0x40014400
 8010820:	40014800 	.word	0x40014800

08010824 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010824:	b480      	push	{r7}
 8010826:	b087      	sub	sp, #28
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
 801082c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	6a1b      	ldr	r3, [r3, #32]
 8010832:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	6a1b      	ldr	r3, [r3, #32]
 8010838:	f023 0210 	bic.w	r2, r3, #16
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	685b      	ldr	r3, [r3, #4]
 8010844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	699b      	ldr	r3, [r3, #24]
 801084a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801085e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010860:	683b      	ldr	r3, [r7, #0]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	021b      	lsls	r3, r3, #8
 8010866:	68fa      	ldr	r2, [r7, #12]
 8010868:	4313      	orrs	r3, r2
 801086a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801086c:	697b      	ldr	r3, [r7, #20]
 801086e:	f023 0320 	bic.w	r3, r3, #32
 8010872:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	689b      	ldr	r3, [r3, #8]
 8010878:	011b      	lsls	r3, r3, #4
 801087a:	697a      	ldr	r2, [r7, #20]
 801087c:	4313      	orrs	r3, r2
 801087e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	4a28      	ldr	r2, [pc, #160]	; (8010924 <TIM_OC2_SetConfig+0x100>)
 8010884:	4293      	cmp	r3, r2
 8010886:	d003      	beq.n	8010890 <TIM_OC2_SetConfig+0x6c>
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	4a27      	ldr	r2, [pc, #156]	; (8010928 <TIM_OC2_SetConfig+0x104>)
 801088c:	4293      	cmp	r3, r2
 801088e:	d10d      	bne.n	80108ac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010890:	697b      	ldr	r3, [r7, #20]
 8010892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010896:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010898:	683b      	ldr	r3, [r7, #0]
 801089a:	68db      	ldr	r3, [r3, #12]
 801089c:	011b      	lsls	r3, r3, #4
 801089e:	697a      	ldr	r2, [r7, #20]
 80108a0:	4313      	orrs	r3, r2
 80108a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80108a4:	697b      	ldr	r3, [r7, #20]
 80108a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80108aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	4a1d      	ldr	r2, [pc, #116]	; (8010924 <TIM_OC2_SetConfig+0x100>)
 80108b0:	4293      	cmp	r3, r2
 80108b2:	d00f      	beq.n	80108d4 <TIM_OC2_SetConfig+0xb0>
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	4a1c      	ldr	r2, [pc, #112]	; (8010928 <TIM_OC2_SetConfig+0x104>)
 80108b8:	4293      	cmp	r3, r2
 80108ba:	d00b      	beq.n	80108d4 <TIM_OC2_SetConfig+0xb0>
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	4a1b      	ldr	r2, [pc, #108]	; (801092c <TIM_OC2_SetConfig+0x108>)
 80108c0:	4293      	cmp	r3, r2
 80108c2:	d007      	beq.n	80108d4 <TIM_OC2_SetConfig+0xb0>
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	4a1a      	ldr	r2, [pc, #104]	; (8010930 <TIM_OC2_SetConfig+0x10c>)
 80108c8:	4293      	cmp	r3, r2
 80108ca:	d003      	beq.n	80108d4 <TIM_OC2_SetConfig+0xb0>
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	4a19      	ldr	r2, [pc, #100]	; (8010934 <TIM_OC2_SetConfig+0x110>)
 80108d0:	4293      	cmp	r3, r2
 80108d2:	d113      	bne.n	80108fc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80108d4:	693b      	ldr	r3, [r7, #16]
 80108d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80108da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80108dc:	693b      	ldr	r3, [r7, #16]
 80108de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80108e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80108e4:	683b      	ldr	r3, [r7, #0]
 80108e6:	695b      	ldr	r3, [r3, #20]
 80108e8:	009b      	lsls	r3, r3, #2
 80108ea:	693a      	ldr	r2, [r7, #16]
 80108ec:	4313      	orrs	r3, r2
 80108ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	699b      	ldr	r3, [r3, #24]
 80108f4:	009b      	lsls	r3, r3, #2
 80108f6:	693a      	ldr	r2, [r7, #16]
 80108f8:	4313      	orrs	r3, r2
 80108fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	693a      	ldr	r2, [r7, #16]
 8010900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	68fa      	ldr	r2, [r7, #12]
 8010906:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010908:	683b      	ldr	r3, [r7, #0]
 801090a:	685a      	ldr	r2, [r3, #4]
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	697a      	ldr	r2, [r7, #20]
 8010914:	621a      	str	r2, [r3, #32]
}
 8010916:	bf00      	nop
 8010918:	371c      	adds	r7, #28
 801091a:	46bd      	mov	sp, r7
 801091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010920:	4770      	bx	lr
 8010922:	bf00      	nop
 8010924:	40012c00 	.word	0x40012c00
 8010928:	40013400 	.word	0x40013400
 801092c:	40014000 	.word	0x40014000
 8010930:	40014400 	.word	0x40014400
 8010934:	40014800 	.word	0x40014800

08010938 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010938:	b480      	push	{r7}
 801093a:	b087      	sub	sp, #28
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
 8010940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	6a1b      	ldr	r3, [r3, #32]
 8010946:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	6a1b      	ldr	r3, [r3, #32]
 801094c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	685b      	ldr	r3, [r3, #4]
 8010958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	69db      	ldr	r3, [r3, #28]
 801095e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801096a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	f023 0303 	bic.w	r3, r3, #3
 8010972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010974:	683b      	ldr	r3, [r7, #0]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	68fa      	ldr	r2, [r7, #12]
 801097a:	4313      	orrs	r3, r2
 801097c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801097e:	697b      	ldr	r3, [r7, #20]
 8010980:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010986:	683b      	ldr	r3, [r7, #0]
 8010988:	689b      	ldr	r3, [r3, #8]
 801098a:	021b      	lsls	r3, r3, #8
 801098c:	697a      	ldr	r2, [r7, #20]
 801098e:	4313      	orrs	r3, r2
 8010990:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	4a27      	ldr	r2, [pc, #156]	; (8010a34 <TIM_OC3_SetConfig+0xfc>)
 8010996:	4293      	cmp	r3, r2
 8010998:	d003      	beq.n	80109a2 <TIM_OC3_SetConfig+0x6a>
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	4a26      	ldr	r2, [pc, #152]	; (8010a38 <TIM_OC3_SetConfig+0x100>)
 801099e:	4293      	cmp	r3, r2
 80109a0:	d10d      	bne.n	80109be <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80109a2:	697b      	ldr	r3, [r7, #20]
 80109a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80109a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80109aa:	683b      	ldr	r3, [r7, #0]
 80109ac:	68db      	ldr	r3, [r3, #12]
 80109ae:	021b      	lsls	r3, r3, #8
 80109b0:	697a      	ldr	r2, [r7, #20]
 80109b2:	4313      	orrs	r3, r2
 80109b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80109b6:	697b      	ldr	r3, [r7, #20]
 80109b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80109bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	4a1c      	ldr	r2, [pc, #112]	; (8010a34 <TIM_OC3_SetConfig+0xfc>)
 80109c2:	4293      	cmp	r3, r2
 80109c4:	d00f      	beq.n	80109e6 <TIM_OC3_SetConfig+0xae>
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	4a1b      	ldr	r2, [pc, #108]	; (8010a38 <TIM_OC3_SetConfig+0x100>)
 80109ca:	4293      	cmp	r3, r2
 80109cc:	d00b      	beq.n	80109e6 <TIM_OC3_SetConfig+0xae>
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	4a1a      	ldr	r2, [pc, #104]	; (8010a3c <TIM_OC3_SetConfig+0x104>)
 80109d2:	4293      	cmp	r3, r2
 80109d4:	d007      	beq.n	80109e6 <TIM_OC3_SetConfig+0xae>
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	4a19      	ldr	r2, [pc, #100]	; (8010a40 <TIM_OC3_SetConfig+0x108>)
 80109da:	4293      	cmp	r3, r2
 80109dc:	d003      	beq.n	80109e6 <TIM_OC3_SetConfig+0xae>
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	4a18      	ldr	r2, [pc, #96]	; (8010a44 <TIM_OC3_SetConfig+0x10c>)
 80109e2:	4293      	cmp	r3, r2
 80109e4:	d113      	bne.n	8010a0e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80109e6:	693b      	ldr	r3, [r7, #16]
 80109e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80109ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80109ee:	693b      	ldr	r3, [r7, #16]
 80109f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80109f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	695b      	ldr	r3, [r3, #20]
 80109fa:	011b      	lsls	r3, r3, #4
 80109fc:	693a      	ldr	r2, [r7, #16]
 80109fe:	4313      	orrs	r3, r2
 8010a00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010a02:	683b      	ldr	r3, [r7, #0]
 8010a04:	699b      	ldr	r3, [r3, #24]
 8010a06:	011b      	lsls	r3, r3, #4
 8010a08:	693a      	ldr	r2, [r7, #16]
 8010a0a:	4313      	orrs	r3, r2
 8010a0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	693a      	ldr	r2, [r7, #16]
 8010a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	68fa      	ldr	r2, [r7, #12]
 8010a18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010a1a:	683b      	ldr	r3, [r7, #0]
 8010a1c:	685a      	ldr	r2, [r3, #4]
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	697a      	ldr	r2, [r7, #20]
 8010a26:	621a      	str	r2, [r3, #32]
}
 8010a28:	bf00      	nop
 8010a2a:	371c      	adds	r7, #28
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a32:	4770      	bx	lr
 8010a34:	40012c00 	.word	0x40012c00
 8010a38:	40013400 	.word	0x40013400
 8010a3c:	40014000 	.word	0x40014000
 8010a40:	40014400 	.word	0x40014400
 8010a44:	40014800 	.word	0x40014800

08010a48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010a48:	b480      	push	{r7}
 8010a4a:	b087      	sub	sp, #28
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
 8010a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	6a1b      	ldr	r3, [r3, #32]
 8010a56:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	6a1b      	ldr	r3, [r3, #32]
 8010a5c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	685b      	ldr	r3, [r3, #4]
 8010a68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	69db      	ldr	r3, [r3, #28]
 8010a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010a82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010a84:	683b      	ldr	r3, [r7, #0]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	021b      	lsls	r3, r3, #8
 8010a8a:	68fa      	ldr	r2, [r7, #12]
 8010a8c:	4313      	orrs	r3, r2
 8010a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010a90:	693b      	ldr	r3, [r7, #16]
 8010a92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010a96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010a98:	683b      	ldr	r3, [r7, #0]
 8010a9a:	689b      	ldr	r3, [r3, #8]
 8010a9c:	031b      	lsls	r3, r3, #12
 8010a9e:	693a      	ldr	r2, [r7, #16]
 8010aa0:	4313      	orrs	r3, r2
 8010aa2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	4a18      	ldr	r2, [pc, #96]	; (8010b08 <TIM_OC4_SetConfig+0xc0>)
 8010aa8:	4293      	cmp	r3, r2
 8010aaa:	d00f      	beq.n	8010acc <TIM_OC4_SetConfig+0x84>
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	4a17      	ldr	r2, [pc, #92]	; (8010b0c <TIM_OC4_SetConfig+0xc4>)
 8010ab0:	4293      	cmp	r3, r2
 8010ab2:	d00b      	beq.n	8010acc <TIM_OC4_SetConfig+0x84>
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	4a16      	ldr	r2, [pc, #88]	; (8010b10 <TIM_OC4_SetConfig+0xc8>)
 8010ab8:	4293      	cmp	r3, r2
 8010aba:	d007      	beq.n	8010acc <TIM_OC4_SetConfig+0x84>
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	4a15      	ldr	r2, [pc, #84]	; (8010b14 <TIM_OC4_SetConfig+0xcc>)
 8010ac0:	4293      	cmp	r3, r2
 8010ac2:	d003      	beq.n	8010acc <TIM_OC4_SetConfig+0x84>
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	4a14      	ldr	r2, [pc, #80]	; (8010b18 <TIM_OC4_SetConfig+0xd0>)
 8010ac8:	4293      	cmp	r3, r2
 8010aca:	d109      	bne.n	8010ae0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010acc:	697b      	ldr	r3, [r7, #20]
 8010ace:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010ad2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010ad4:	683b      	ldr	r3, [r7, #0]
 8010ad6:	695b      	ldr	r3, [r3, #20]
 8010ad8:	019b      	lsls	r3, r3, #6
 8010ada:	697a      	ldr	r2, [r7, #20]
 8010adc:	4313      	orrs	r3, r2
 8010ade:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	697a      	ldr	r2, [r7, #20]
 8010ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	68fa      	ldr	r2, [r7, #12]
 8010aea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010aec:	683b      	ldr	r3, [r7, #0]
 8010aee:	685a      	ldr	r2, [r3, #4]
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	693a      	ldr	r2, [r7, #16]
 8010af8:	621a      	str	r2, [r3, #32]
}
 8010afa:	bf00      	nop
 8010afc:	371c      	adds	r7, #28
 8010afe:	46bd      	mov	sp, r7
 8010b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b04:	4770      	bx	lr
 8010b06:	bf00      	nop
 8010b08:	40012c00 	.word	0x40012c00
 8010b0c:	40013400 	.word	0x40013400
 8010b10:	40014000 	.word	0x40014000
 8010b14:	40014400 	.word	0x40014400
 8010b18:	40014800 	.word	0x40014800

08010b1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010b1c:	b480      	push	{r7}
 8010b1e:	b087      	sub	sp, #28
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
 8010b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	6a1b      	ldr	r3, [r3, #32]
 8010b2a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	6a1b      	ldr	r3, [r3, #32]
 8010b30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	685b      	ldr	r3, [r3, #4]
 8010b3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	68fa      	ldr	r2, [r7, #12]
 8010b56:	4313      	orrs	r3, r2
 8010b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010b5a:	693b      	ldr	r3, [r7, #16]
 8010b5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010b60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010b62:	683b      	ldr	r3, [r7, #0]
 8010b64:	689b      	ldr	r3, [r3, #8]
 8010b66:	041b      	lsls	r3, r3, #16
 8010b68:	693a      	ldr	r2, [r7, #16]
 8010b6a:	4313      	orrs	r3, r2
 8010b6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	4a17      	ldr	r2, [pc, #92]	; (8010bd0 <TIM_OC5_SetConfig+0xb4>)
 8010b72:	4293      	cmp	r3, r2
 8010b74:	d00f      	beq.n	8010b96 <TIM_OC5_SetConfig+0x7a>
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	4a16      	ldr	r2, [pc, #88]	; (8010bd4 <TIM_OC5_SetConfig+0xb8>)
 8010b7a:	4293      	cmp	r3, r2
 8010b7c:	d00b      	beq.n	8010b96 <TIM_OC5_SetConfig+0x7a>
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	4a15      	ldr	r2, [pc, #84]	; (8010bd8 <TIM_OC5_SetConfig+0xbc>)
 8010b82:	4293      	cmp	r3, r2
 8010b84:	d007      	beq.n	8010b96 <TIM_OC5_SetConfig+0x7a>
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	4a14      	ldr	r2, [pc, #80]	; (8010bdc <TIM_OC5_SetConfig+0xc0>)
 8010b8a:	4293      	cmp	r3, r2
 8010b8c:	d003      	beq.n	8010b96 <TIM_OC5_SetConfig+0x7a>
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	4a13      	ldr	r2, [pc, #76]	; (8010be0 <TIM_OC5_SetConfig+0xc4>)
 8010b92:	4293      	cmp	r3, r2
 8010b94:	d109      	bne.n	8010baa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010b96:	697b      	ldr	r3, [r7, #20]
 8010b98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010b9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010b9e:	683b      	ldr	r3, [r7, #0]
 8010ba0:	695b      	ldr	r3, [r3, #20]
 8010ba2:	021b      	lsls	r3, r3, #8
 8010ba4:	697a      	ldr	r2, [r7, #20]
 8010ba6:	4313      	orrs	r3, r2
 8010ba8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	697a      	ldr	r2, [r7, #20]
 8010bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	68fa      	ldr	r2, [r7, #12]
 8010bb4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010bb6:	683b      	ldr	r3, [r7, #0]
 8010bb8:	685a      	ldr	r2, [r3, #4]
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	693a      	ldr	r2, [r7, #16]
 8010bc2:	621a      	str	r2, [r3, #32]
}
 8010bc4:	bf00      	nop
 8010bc6:	371c      	adds	r7, #28
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bce:	4770      	bx	lr
 8010bd0:	40012c00 	.word	0x40012c00
 8010bd4:	40013400 	.word	0x40013400
 8010bd8:	40014000 	.word	0x40014000
 8010bdc:	40014400 	.word	0x40014400
 8010be0:	40014800 	.word	0x40014800

08010be4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010be4:	b480      	push	{r7}
 8010be6:	b087      	sub	sp, #28
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
 8010bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	6a1b      	ldr	r3, [r3, #32]
 8010bf2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	6a1b      	ldr	r3, [r3, #32]
 8010bf8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	685b      	ldr	r3, [r3, #4]
 8010c04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010c18:	683b      	ldr	r3, [r7, #0]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	021b      	lsls	r3, r3, #8
 8010c1e:	68fa      	ldr	r2, [r7, #12]
 8010c20:	4313      	orrs	r3, r2
 8010c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010c24:	693b      	ldr	r3, [r7, #16]
 8010c26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010c2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010c2c:	683b      	ldr	r3, [r7, #0]
 8010c2e:	689b      	ldr	r3, [r3, #8]
 8010c30:	051b      	lsls	r3, r3, #20
 8010c32:	693a      	ldr	r2, [r7, #16]
 8010c34:	4313      	orrs	r3, r2
 8010c36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	4a18      	ldr	r2, [pc, #96]	; (8010c9c <TIM_OC6_SetConfig+0xb8>)
 8010c3c:	4293      	cmp	r3, r2
 8010c3e:	d00f      	beq.n	8010c60 <TIM_OC6_SetConfig+0x7c>
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	4a17      	ldr	r2, [pc, #92]	; (8010ca0 <TIM_OC6_SetConfig+0xbc>)
 8010c44:	4293      	cmp	r3, r2
 8010c46:	d00b      	beq.n	8010c60 <TIM_OC6_SetConfig+0x7c>
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	4a16      	ldr	r2, [pc, #88]	; (8010ca4 <TIM_OC6_SetConfig+0xc0>)
 8010c4c:	4293      	cmp	r3, r2
 8010c4e:	d007      	beq.n	8010c60 <TIM_OC6_SetConfig+0x7c>
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	4a15      	ldr	r2, [pc, #84]	; (8010ca8 <TIM_OC6_SetConfig+0xc4>)
 8010c54:	4293      	cmp	r3, r2
 8010c56:	d003      	beq.n	8010c60 <TIM_OC6_SetConfig+0x7c>
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	4a14      	ldr	r2, [pc, #80]	; (8010cac <TIM_OC6_SetConfig+0xc8>)
 8010c5c:	4293      	cmp	r3, r2
 8010c5e:	d109      	bne.n	8010c74 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010c60:	697b      	ldr	r3, [r7, #20]
 8010c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010c66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	695b      	ldr	r3, [r3, #20]
 8010c6c:	029b      	lsls	r3, r3, #10
 8010c6e:	697a      	ldr	r2, [r7, #20]
 8010c70:	4313      	orrs	r3, r2
 8010c72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	697a      	ldr	r2, [r7, #20]
 8010c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	68fa      	ldr	r2, [r7, #12]
 8010c7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010c80:	683b      	ldr	r3, [r7, #0]
 8010c82:	685a      	ldr	r2, [r3, #4]
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	693a      	ldr	r2, [r7, #16]
 8010c8c:	621a      	str	r2, [r3, #32]
}
 8010c8e:	bf00      	nop
 8010c90:	371c      	adds	r7, #28
 8010c92:	46bd      	mov	sp, r7
 8010c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c98:	4770      	bx	lr
 8010c9a:	bf00      	nop
 8010c9c:	40012c00 	.word	0x40012c00
 8010ca0:	40013400 	.word	0x40013400
 8010ca4:	40014000 	.word	0x40014000
 8010ca8:	40014400 	.word	0x40014400
 8010cac:	40014800 	.word	0x40014800

08010cb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010cb0:	b480      	push	{r7}
 8010cb2:	b085      	sub	sp, #20
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
 8010cb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010cba:	2300      	movs	r3, #0
 8010cbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010cc4:	2b01      	cmp	r3, #1
 8010cc6:	d101      	bne.n	8010ccc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010cc8:	2302      	movs	r3, #2
 8010cca:	e065      	b.n	8010d98 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	2201      	movs	r2, #1
 8010cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010cda:	683b      	ldr	r3, [r7, #0]
 8010cdc:	68db      	ldr	r3, [r3, #12]
 8010cde:	4313      	orrs	r3, r2
 8010ce0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	689b      	ldr	r3, [r3, #8]
 8010cec:	4313      	orrs	r3, r2
 8010cee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8010cf6:	683b      	ldr	r3, [r7, #0]
 8010cf8:	685b      	ldr	r3, [r3, #4]
 8010cfa:	4313      	orrs	r3, r2
 8010cfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010d04:	683b      	ldr	r3, [r7, #0]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	4313      	orrs	r3, r2
 8010d0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010d12:	683b      	ldr	r3, [r7, #0]
 8010d14:	691b      	ldr	r3, [r3, #16]
 8010d16:	4313      	orrs	r3, r2
 8010d18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	695b      	ldr	r3, [r3, #20]
 8010d24:	4313      	orrs	r3, r2
 8010d26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8010d2e:	683b      	ldr	r3, [r7, #0]
 8010d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d32:	4313      	orrs	r3, r2
 8010d34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	699b      	ldr	r3, [r3, #24]
 8010d40:	041b      	lsls	r3, r3, #16
 8010d42:	4313      	orrs	r3, r2
 8010d44:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	4a16      	ldr	r2, [pc, #88]	; (8010da4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8010d4c:	4293      	cmp	r3, r2
 8010d4e:	d004      	beq.n	8010d5a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	4a14      	ldr	r2, [pc, #80]	; (8010da8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8010d56:	4293      	cmp	r3, r2
 8010d58:	d115      	bne.n	8010d86 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010d60:	683b      	ldr	r3, [r7, #0]
 8010d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d64:	051b      	lsls	r3, r3, #20
 8010d66:	4313      	orrs	r3, r2
 8010d68:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	69db      	ldr	r3, [r3, #28]
 8010d74:	4313      	orrs	r3, r2
 8010d76:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8010d7e:	683b      	ldr	r3, [r7, #0]
 8010d80:	6a1b      	ldr	r3, [r3, #32]
 8010d82:	4313      	orrs	r3, r2
 8010d84:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	68fa      	ldr	r2, [r7, #12]
 8010d8c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	2200      	movs	r2, #0
 8010d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010d96:	2300      	movs	r3, #0
}
 8010d98:	4618      	mov	r0, r3
 8010d9a:	3714      	adds	r7, #20
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da2:	4770      	bx	lr
 8010da4:	40012c00 	.word	0x40012c00
 8010da8:	40013400 	.word	0x40013400

08010dac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010dac:	b480      	push	{r7}
 8010dae:	b083      	sub	sp, #12
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010db4:	bf00      	nop
 8010db6:	370c      	adds	r7, #12
 8010db8:	46bd      	mov	sp, r7
 8010dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dbe:	4770      	bx	lr

08010dc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010dc0:	b480      	push	{r7}
 8010dc2:	b083      	sub	sp, #12
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010dc8:	bf00      	nop
 8010dca:	370c      	adds	r7, #12
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd2:	4770      	bx	lr

08010dd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010dd4:	b480      	push	{r7}
 8010dd6:	b083      	sub	sp, #12
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010ddc:	bf00      	nop
 8010dde:	370c      	adds	r7, #12
 8010de0:	46bd      	mov	sp, r7
 8010de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de6:	4770      	bx	lr

08010de8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b082      	sub	sp, #8
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d101      	bne.n	8010dfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010df6:	2301      	movs	r3, #1
 8010df8:	e042      	b.n	8010e80 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d106      	bne.n	8010e12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	2200      	movs	r2, #0
 8010e08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010e0c:	6878      	ldr	r0, [r7, #4]
 8010e0e:	f7f4 fc13 	bl	8005638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	2224      	movs	r2, #36	; 0x24
 8010e16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	681a      	ldr	r2, [r3, #0]
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	f022 0201 	bic.w	r2, r2, #1
 8010e28:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d002      	beq.n	8010e38 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8010e32:	6878      	ldr	r0, [r7, #4]
 8010e34:	f000 ff58 	bl	8011ce8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010e38:	6878      	ldr	r0, [r7, #4]
 8010e3a:	f000 fc59 	bl	80116f0 <UART_SetConfig>
 8010e3e:	4603      	mov	r3, r0
 8010e40:	2b01      	cmp	r3, #1
 8010e42:	d101      	bne.n	8010e48 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010e44:	2301      	movs	r3, #1
 8010e46:	e01b      	b.n	8010e80 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	685a      	ldr	r2, [r3, #4]
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010e56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	689a      	ldr	r2, [r3, #8]
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010e66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	681a      	ldr	r2, [r3, #0]
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	f042 0201 	orr.w	r2, r2, #1
 8010e76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010e78:	6878      	ldr	r0, [r7, #4]
 8010e7a:	f000 ffd7 	bl	8011e2c <UART_CheckIdleState>
 8010e7e:	4603      	mov	r3, r0
}
 8010e80:	4618      	mov	r0, r3
 8010e82:	3708      	adds	r7, #8
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}

08010e88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b08a      	sub	sp, #40	; 0x28
 8010e8c:	af02      	add	r7, sp, #8
 8010e8e:	60f8      	str	r0, [r7, #12]
 8010e90:	60b9      	str	r1, [r7, #8]
 8010e92:	603b      	str	r3, [r7, #0]
 8010e94:	4613      	mov	r3, r2
 8010e96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e9e:	2b20      	cmp	r3, #32
 8010ea0:	d17c      	bne.n	8010f9c <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8010ea2:	68bb      	ldr	r3, [r7, #8]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d002      	beq.n	8010eae <HAL_UART_Transmit+0x26>
 8010ea8:	88fb      	ldrh	r3, [r7, #6]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d101      	bne.n	8010eb2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8010eae:	2301      	movs	r3, #1
 8010eb0:	e075      	b.n	8010f9e <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	2221      	movs	r2, #33	; 0x21
 8010ebe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010ec2:	f7f6 faeb 	bl	800749c <HAL_GetTick>
 8010ec6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	88fa      	ldrh	r2, [r7, #6]
 8010ecc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	88fa      	ldrh	r2, [r7, #6]
 8010ed4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	689b      	ldr	r3, [r3, #8]
 8010edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ee0:	d108      	bne.n	8010ef4 <HAL_UART_Transmit+0x6c>
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	691b      	ldr	r3, [r3, #16]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d104      	bne.n	8010ef4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8010eea:	2300      	movs	r3, #0
 8010eec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010eee:	68bb      	ldr	r3, [r7, #8]
 8010ef0:	61bb      	str	r3, [r7, #24]
 8010ef2:	e003      	b.n	8010efc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8010ef4:	68bb      	ldr	r3, [r7, #8]
 8010ef6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010ef8:	2300      	movs	r3, #0
 8010efa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010efc:	e031      	b.n	8010f62 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010efe:	683b      	ldr	r3, [r7, #0]
 8010f00:	9300      	str	r3, [sp, #0]
 8010f02:	697b      	ldr	r3, [r7, #20]
 8010f04:	2200      	movs	r2, #0
 8010f06:	2180      	movs	r1, #128	; 0x80
 8010f08:	68f8      	ldr	r0, [r7, #12]
 8010f0a:	f001 f839 	bl	8011f80 <UART_WaitOnFlagUntilTimeout>
 8010f0e:	4603      	mov	r3, r0
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d005      	beq.n	8010f20 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	2220      	movs	r2, #32
 8010f18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8010f1c:	2303      	movs	r3, #3
 8010f1e:	e03e      	b.n	8010f9e <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8010f20:	69fb      	ldr	r3, [r7, #28]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d10b      	bne.n	8010f3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010f26:	69bb      	ldr	r3, [r7, #24]
 8010f28:	881a      	ldrh	r2, [r3, #0]
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010f32:	b292      	uxth	r2, r2
 8010f34:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8010f36:	69bb      	ldr	r3, [r7, #24]
 8010f38:	3302      	adds	r3, #2
 8010f3a:	61bb      	str	r3, [r7, #24]
 8010f3c:	e008      	b.n	8010f50 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010f3e:	69fb      	ldr	r3, [r7, #28]
 8010f40:	781a      	ldrb	r2, [r3, #0]
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	b292      	uxth	r2, r2
 8010f48:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010f4a:	69fb      	ldr	r3, [r7, #28]
 8010f4c:	3301      	adds	r3, #1
 8010f4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010f56:	b29b      	uxth	r3, r3
 8010f58:	3b01      	subs	r3, #1
 8010f5a:	b29a      	uxth	r2, r3
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010f68:	b29b      	uxth	r3, r3
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d1c7      	bne.n	8010efe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010f6e:	683b      	ldr	r3, [r7, #0]
 8010f70:	9300      	str	r3, [sp, #0]
 8010f72:	697b      	ldr	r3, [r7, #20]
 8010f74:	2200      	movs	r2, #0
 8010f76:	2140      	movs	r1, #64	; 0x40
 8010f78:	68f8      	ldr	r0, [r7, #12]
 8010f7a:	f001 f801 	bl	8011f80 <UART_WaitOnFlagUntilTimeout>
 8010f7e:	4603      	mov	r3, r0
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d005      	beq.n	8010f90 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	2220      	movs	r2, #32
 8010f88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8010f8c:	2303      	movs	r3, #3
 8010f8e:	e006      	b.n	8010f9e <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	2220      	movs	r2, #32
 8010f94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8010f98:	2300      	movs	r3, #0
 8010f9a:	e000      	b.n	8010f9e <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8010f9c:	2302      	movs	r3, #2
  }
}
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	3720      	adds	r7, #32
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	bd80      	pop	{r7, pc}
	...

08010fa8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010fa8:	b580      	push	{r7, lr}
 8010faa:	b08a      	sub	sp, #40	; 0x28
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	60f8      	str	r0, [r7, #12]
 8010fb0:	60b9      	str	r1, [r7, #8]
 8010fb2:	4613      	mov	r3, r2
 8010fb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010fbc:	2b20      	cmp	r3, #32
 8010fbe:	d137      	bne.n	8011030 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010fc0:	68bb      	ldr	r3, [r7, #8]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d002      	beq.n	8010fcc <HAL_UART_Receive_DMA+0x24>
 8010fc6:	88fb      	ldrh	r3, [r7, #6]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d101      	bne.n	8010fd0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8010fcc:	2301      	movs	r3, #1
 8010fce:	e030      	b.n	8011032 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	4a18      	ldr	r2, [pc, #96]	; (801103c <HAL_UART_Receive_DMA+0x94>)
 8010fdc:	4293      	cmp	r3, r2
 8010fde:	d01f      	beq.n	8011020 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	685b      	ldr	r3, [r3, #4]
 8010fe6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d018      	beq.n	8011020 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ff4:	697b      	ldr	r3, [r7, #20]
 8010ff6:	e853 3f00 	ldrex	r3, [r3]
 8010ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8010ffc:	693b      	ldr	r3, [r7, #16]
 8010ffe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011002:	627b      	str	r3, [r7, #36]	; 0x24
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	461a      	mov	r2, r3
 801100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801100c:	623b      	str	r3, [r7, #32]
 801100e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011010:	69f9      	ldr	r1, [r7, #28]
 8011012:	6a3a      	ldr	r2, [r7, #32]
 8011014:	e841 2300 	strex	r3, r2, [r1]
 8011018:	61bb      	str	r3, [r7, #24]
   return(result);
 801101a:	69bb      	ldr	r3, [r7, #24]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d1e6      	bne.n	8010fee <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8011020:	88fb      	ldrh	r3, [r7, #6]
 8011022:	461a      	mov	r2, r3
 8011024:	68b9      	ldr	r1, [r7, #8]
 8011026:	68f8      	ldr	r0, [r7, #12]
 8011028:	f001 f812 	bl	8012050 <UART_Start_Receive_DMA>
 801102c:	4603      	mov	r3, r0
 801102e:	e000      	b.n	8011032 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8011030:	2302      	movs	r3, #2
  }
}
 8011032:	4618      	mov	r0, r3
 8011034:	3728      	adds	r7, #40	; 0x28
 8011036:	46bd      	mov	sp, r7
 8011038:	bd80      	pop	{r7, pc}
 801103a:	bf00      	nop
 801103c:	40008000 	.word	0x40008000

08011040 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011040:	b580      	push	{r7, lr}
 8011042:	b0ba      	sub	sp, #232	; 0xe8
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	69db      	ldr	r3, [r3, #28]
 801104e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	689b      	ldr	r3, [r3, #8]
 8011062:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8011066:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801106a:	f640 030f 	movw	r3, #2063	; 0x80f
 801106e:	4013      	ands	r3, r2
 8011070:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8011074:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011078:	2b00      	cmp	r3, #0
 801107a:	d11b      	bne.n	80110b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801107c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011080:	f003 0320 	and.w	r3, r3, #32
 8011084:	2b00      	cmp	r3, #0
 8011086:	d015      	beq.n	80110b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801108c:	f003 0320 	and.w	r3, r3, #32
 8011090:	2b00      	cmp	r3, #0
 8011092:	d105      	bne.n	80110a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801109c:	2b00      	cmp	r3, #0
 801109e:	d009      	beq.n	80110b4 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	f000 82e3 	beq.w	8011670 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80110ae:	6878      	ldr	r0, [r7, #4]
 80110b0:	4798      	blx	r3
      }
      return;
 80110b2:	e2dd      	b.n	8011670 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80110b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	f000 8123 	beq.w	8011304 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80110be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80110c2:	4b8d      	ldr	r3, [pc, #564]	; (80112f8 <HAL_UART_IRQHandler+0x2b8>)
 80110c4:	4013      	ands	r3, r2
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d106      	bne.n	80110d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80110ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80110ce:	4b8b      	ldr	r3, [pc, #556]	; (80112fc <HAL_UART_IRQHandler+0x2bc>)
 80110d0:	4013      	ands	r3, r2
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	f000 8116 	beq.w	8011304 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80110d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80110dc:	f003 0301 	and.w	r3, r3, #1
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d011      	beq.n	8011108 <HAL_UART_IRQHandler+0xc8>
 80110e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80110e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d00b      	beq.n	8011108 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	2201      	movs	r2, #1
 80110f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80110fe:	f043 0201 	orr.w	r2, r3, #1
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801110c:	f003 0302 	and.w	r3, r3, #2
 8011110:	2b00      	cmp	r3, #0
 8011112:	d011      	beq.n	8011138 <HAL_UART_IRQHandler+0xf8>
 8011114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011118:	f003 0301 	and.w	r3, r3, #1
 801111c:	2b00      	cmp	r3, #0
 801111e:	d00b      	beq.n	8011138 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	2202      	movs	r2, #2
 8011126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801112e:	f043 0204 	orr.w	r2, r3, #4
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801113c:	f003 0304 	and.w	r3, r3, #4
 8011140:	2b00      	cmp	r3, #0
 8011142:	d011      	beq.n	8011168 <HAL_UART_IRQHandler+0x128>
 8011144:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011148:	f003 0301 	and.w	r3, r3, #1
 801114c:	2b00      	cmp	r3, #0
 801114e:	d00b      	beq.n	8011168 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	2204      	movs	r2, #4
 8011156:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801115e:	f043 0202 	orr.w	r2, r3, #2
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801116c:	f003 0308 	and.w	r3, r3, #8
 8011170:	2b00      	cmp	r3, #0
 8011172:	d017      	beq.n	80111a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011178:	f003 0320 	and.w	r3, r3, #32
 801117c:	2b00      	cmp	r3, #0
 801117e:	d105      	bne.n	801118c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8011180:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8011184:	4b5c      	ldr	r3, [pc, #368]	; (80112f8 <HAL_UART_IRQHandler+0x2b8>)
 8011186:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011188:	2b00      	cmp	r3, #0
 801118a:	d00b      	beq.n	80111a4 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	2208      	movs	r2, #8
 8011192:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801119a:	f043 0208 	orr.w	r2, r3, #8
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80111a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80111a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d012      	beq.n	80111d6 <HAL_UART_IRQHandler+0x196>
 80111b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80111b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d00c      	beq.n	80111d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80111c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80111cc:	f043 0220 	orr.w	r2, r3, #32
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80111dc:	2b00      	cmp	r3, #0
 80111de:	f000 8249 	beq.w	8011674 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80111e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80111e6:	f003 0320 	and.w	r3, r3, #32
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d013      	beq.n	8011216 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80111ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80111f2:	f003 0320 	and.w	r3, r3, #32
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d105      	bne.n	8011206 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80111fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80111fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011202:	2b00      	cmp	r3, #0
 8011204:	d007      	beq.n	8011216 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801120a:	2b00      	cmp	r3, #0
 801120c:	d003      	beq.n	8011216 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011212:	6878      	ldr	r0, [r7, #4]
 8011214:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801121c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	689b      	ldr	r3, [r3, #8]
 8011226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801122a:	2b40      	cmp	r3, #64	; 0x40
 801122c:	d005      	beq.n	801123a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801122e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011232:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011236:	2b00      	cmp	r3, #0
 8011238:	d054      	beq.n	80112e4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801123a:	6878      	ldr	r0, [r7, #4]
 801123c:	f000 ffef 	bl	801221e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	689b      	ldr	r3, [r3, #8]
 8011246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801124a:	2b40      	cmp	r3, #64	; 0x40
 801124c:	d146      	bne.n	80112dc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	3308      	adds	r3, #8
 8011254:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011258:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801125c:	e853 3f00 	ldrex	r3, [r3]
 8011260:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8011264:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801126c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	3308      	adds	r3, #8
 8011276:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801127a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801127e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011282:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8011286:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801128a:	e841 2300 	strex	r3, r2, [r1]
 801128e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8011292:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011296:	2b00      	cmp	r3, #0
 8011298:	d1d9      	bne.n	801124e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d017      	beq.n	80112d4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80112aa:	4a15      	ldr	r2, [pc, #84]	; (8011300 <HAL_UART_IRQHandler+0x2c0>)
 80112ac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80112b4:	4618      	mov	r0, r3
 80112b6:	f7f6 fbb2 	bl	8007a1e <HAL_DMA_Abort_IT>
 80112ba:	4603      	mov	r3, r0
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d019      	beq.n	80112f4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80112c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112c8:	687a      	ldr	r2, [r7, #4]
 80112ca:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80112ce:	4610      	mov	r0, r2
 80112d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80112d2:	e00f      	b.n	80112f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80112d4:	6878      	ldr	r0, [r7, #4]
 80112d6:	f000 f9f5 	bl	80116c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80112da:	e00b      	b.n	80112f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80112dc:	6878      	ldr	r0, [r7, #4]
 80112de:	f000 f9f1 	bl	80116c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80112e2:	e007      	b.n	80112f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80112e4:	6878      	ldr	r0, [r7, #4]
 80112e6:	f000 f9ed 	bl	80116c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	2200      	movs	r2, #0
 80112ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80112f2:	e1bf      	b.n	8011674 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80112f4:	bf00      	nop
    return;
 80112f6:	e1bd      	b.n	8011674 <HAL_UART_IRQHandler+0x634>
 80112f8:	10000001 	.word	0x10000001
 80112fc:	04000120 	.word	0x04000120
 8011300:	080124d5 	.word	0x080124d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011308:	2b01      	cmp	r3, #1
 801130a:	f040 8153 	bne.w	80115b4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801130e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011312:	f003 0310 	and.w	r3, r3, #16
 8011316:	2b00      	cmp	r3, #0
 8011318:	f000 814c 	beq.w	80115b4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801131c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011320:	f003 0310 	and.w	r3, r3, #16
 8011324:	2b00      	cmp	r3, #0
 8011326:	f000 8145 	beq.w	80115b4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	2210      	movs	r2, #16
 8011330:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	689b      	ldr	r3, [r3, #8]
 8011338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801133c:	2b40      	cmp	r3, #64	; 0x40
 801133e:	f040 80bb 	bne.w	80114b8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	685b      	ldr	r3, [r3, #4]
 801134c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8011350:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8011354:	2b00      	cmp	r3, #0
 8011356:	f000 818f 	beq.w	8011678 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011360:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8011364:	429a      	cmp	r2, r3
 8011366:	f080 8187 	bcs.w	8011678 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8011370:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	f003 0320 	and.w	r3, r3, #32
 8011382:	2b00      	cmp	r3, #0
 8011384:	f040 8087 	bne.w	8011496 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011390:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011394:	e853 3f00 	ldrex	r3, [r3]
 8011398:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801139c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80113a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80113a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	461a      	mov	r2, r3
 80113ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80113b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80113b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80113be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80113c2:	e841 2300 	strex	r3, r2, [r1]
 80113c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80113ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d1da      	bne.n	8011388 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	3308      	adds	r3, #8
 80113d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80113dc:	e853 3f00 	ldrex	r3, [r3]
 80113e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80113e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80113e4:	f023 0301 	bic.w	r3, r3, #1
 80113e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	3308      	adds	r3, #8
 80113f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80113f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80113fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80113fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011402:	e841 2300 	strex	r3, r2, [r1]
 8011406:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8011408:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801140a:	2b00      	cmp	r3, #0
 801140c:	d1e1      	bne.n	80113d2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	3308      	adds	r3, #8
 8011414:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011418:	e853 3f00 	ldrex	r3, [r3]
 801141c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801141e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011424:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	3308      	adds	r3, #8
 801142e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8011432:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011434:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011436:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011438:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801143a:	e841 2300 	strex	r3, r2, [r1]
 801143e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011440:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011442:	2b00      	cmp	r3, #0
 8011444:	d1e3      	bne.n	801140e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	2220      	movs	r2, #32
 801144a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	2200      	movs	r2, #0
 8011452:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801145a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801145c:	e853 3f00 	ldrex	r3, [r3]
 8011460:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011464:	f023 0310 	bic.w	r3, r3, #16
 8011468:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	461a      	mov	r2, r3
 8011472:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011476:	65bb      	str	r3, [r7, #88]	; 0x58
 8011478:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801147a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801147c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801147e:	e841 2300 	strex	r3, r2, [r1]
 8011482:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011486:	2b00      	cmp	r3, #0
 8011488:	d1e4      	bne.n	8011454 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011490:	4618      	mov	r0, r3
 8011492:	f7f6 fa68 	bl	8007966 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	2202      	movs	r2, #2
 801149a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80114a8:	b29b      	uxth	r3, r3
 80114aa:	1ad3      	subs	r3, r2, r3
 80114ac:	b29b      	uxth	r3, r3
 80114ae:	4619      	mov	r1, r3
 80114b0:	6878      	ldr	r0, [r7, #4]
 80114b2:	f000 f911 	bl	80116d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80114b6:	e0df      	b.n	8011678 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80114c4:	b29b      	uxth	r3, r3
 80114c6:	1ad3      	subs	r3, r2, r3
 80114c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80114d2:	b29b      	uxth	r3, r3
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	f000 80d1 	beq.w	801167c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80114da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80114de:	2b00      	cmp	r3, #0
 80114e0:	f000 80cc 	beq.w	801167c <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ec:	e853 3f00 	ldrex	r3, [r3]
 80114f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80114f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80114f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	461a      	mov	r2, r3
 8011502:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011506:	647b      	str	r3, [r7, #68]	; 0x44
 8011508:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801150a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801150c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801150e:	e841 2300 	strex	r3, r2, [r1]
 8011512:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011516:	2b00      	cmp	r3, #0
 8011518:	d1e4      	bne.n	80114e4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	3308      	adds	r3, #8
 8011520:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011524:	e853 3f00 	ldrex	r3, [r3]
 8011528:	623b      	str	r3, [r7, #32]
   return(result);
 801152a:	6a3b      	ldr	r3, [r7, #32]
 801152c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011530:	f023 0301 	bic.w	r3, r3, #1
 8011534:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	3308      	adds	r3, #8
 801153e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8011542:	633a      	str	r2, [r7, #48]	; 0x30
 8011544:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011546:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801154a:	e841 2300 	strex	r3, r2, [r1]
 801154e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011552:	2b00      	cmp	r3, #0
 8011554:	d1e1      	bne.n	801151a <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	2220      	movs	r2, #32
 801155a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	2200      	movs	r2, #0
 8011562:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2200      	movs	r2, #0
 8011568:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011570:	693b      	ldr	r3, [r7, #16]
 8011572:	e853 3f00 	ldrex	r3, [r3]
 8011576:	60fb      	str	r3, [r7, #12]
   return(result);
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	f023 0310 	bic.w	r3, r3, #16
 801157e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	461a      	mov	r2, r3
 8011588:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801158c:	61fb      	str	r3, [r7, #28]
 801158e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011590:	69b9      	ldr	r1, [r7, #24]
 8011592:	69fa      	ldr	r2, [r7, #28]
 8011594:	e841 2300 	strex	r3, r2, [r1]
 8011598:	617b      	str	r3, [r7, #20]
   return(result);
 801159a:	697b      	ldr	r3, [r7, #20]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d1e4      	bne.n	801156a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	2202      	movs	r2, #2
 80115a4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80115a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80115aa:	4619      	mov	r1, r3
 80115ac:	6878      	ldr	r0, [r7, #4]
 80115ae:	f000 f893 	bl	80116d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80115b2:	e063      	b.n	801167c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80115b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80115b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d00e      	beq.n	80115de <HAL_UART_IRQHandler+0x59e>
 80115c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80115c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d008      	beq.n	80115de <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80115d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80115d6:	6878      	ldr	r0, [r7, #4]
 80115d8:	f000 ffbd 	bl	8012556 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80115dc:	e051      	b.n	8011682 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80115de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80115e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d014      	beq.n	8011614 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80115ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80115ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d105      	bne.n	8011602 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80115f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80115fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d008      	beq.n	8011614 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011606:	2b00      	cmp	r3, #0
 8011608:	d03a      	beq.n	8011680 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801160e:	6878      	ldr	r0, [r7, #4]
 8011610:	4798      	blx	r3
    }
    return;
 8011612:	e035      	b.n	8011680 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801161c:	2b00      	cmp	r3, #0
 801161e:	d009      	beq.n	8011634 <HAL_UART_IRQHandler+0x5f4>
 8011620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011628:	2b00      	cmp	r3, #0
 801162a:	d003      	beq.n	8011634 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 801162c:	6878      	ldr	r0, [r7, #4]
 801162e:	f000 ff67 	bl	8012500 <UART_EndTransmit_IT>
    return;
 8011632:	e026      	b.n	8011682 <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8011634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011638:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801163c:	2b00      	cmp	r3, #0
 801163e:	d009      	beq.n	8011654 <HAL_UART_IRQHandler+0x614>
 8011640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011644:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011648:	2b00      	cmp	r3, #0
 801164a:	d003      	beq.n	8011654 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801164c:	6878      	ldr	r0, [r7, #4]
 801164e:	f000 ff96 	bl	801257e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011652:	e016      	b.n	8011682 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8011654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011658:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801165c:	2b00      	cmp	r3, #0
 801165e:	d010      	beq.n	8011682 <HAL_UART_IRQHandler+0x642>
 8011660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011664:	2b00      	cmp	r3, #0
 8011666:	da0c      	bge.n	8011682 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8011668:	6878      	ldr	r0, [r7, #4]
 801166a:	f000 ff7e 	bl	801256a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801166e:	e008      	b.n	8011682 <HAL_UART_IRQHandler+0x642>
      return;
 8011670:	bf00      	nop
 8011672:	e006      	b.n	8011682 <HAL_UART_IRQHandler+0x642>
    return;
 8011674:	bf00      	nop
 8011676:	e004      	b.n	8011682 <HAL_UART_IRQHandler+0x642>
      return;
 8011678:	bf00      	nop
 801167a:	e002      	b.n	8011682 <HAL_UART_IRQHandler+0x642>
      return;
 801167c:	bf00      	nop
 801167e:	e000      	b.n	8011682 <HAL_UART_IRQHandler+0x642>
    return;
 8011680:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8011682:	37e8      	adds	r7, #232	; 0xe8
 8011684:	46bd      	mov	sp, r7
 8011686:	bd80      	pop	{r7, pc}

08011688 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011688:	b480      	push	{r7}
 801168a:	b083      	sub	sp, #12
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011690:	bf00      	nop
 8011692:	370c      	adds	r7, #12
 8011694:	46bd      	mov	sp, r7
 8011696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169a:	4770      	bx	lr

0801169c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801169c:	b480      	push	{r7}
 801169e:	b083      	sub	sp, #12
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80116a4:	bf00      	nop
 80116a6:	370c      	adds	r7, #12
 80116a8:	46bd      	mov	sp, r7
 80116aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ae:	4770      	bx	lr

080116b0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80116b0:	b480      	push	{r7}
 80116b2:	b083      	sub	sp, #12
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80116b8:	bf00      	nop
 80116ba:	370c      	adds	r7, #12
 80116bc:	46bd      	mov	sp, r7
 80116be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c2:	4770      	bx	lr

080116c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80116c4:	b480      	push	{r7}
 80116c6:	b083      	sub	sp, #12
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80116cc:	bf00      	nop
 80116ce:	370c      	adds	r7, #12
 80116d0:	46bd      	mov	sp, r7
 80116d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d6:	4770      	bx	lr

080116d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80116d8:	b480      	push	{r7}
 80116da:	b083      	sub	sp, #12
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
 80116e0:	460b      	mov	r3, r1
 80116e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80116e4:	bf00      	nop
 80116e6:	370c      	adds	r7, #12
 80116e8:	46bd      	mov	sp, r7
 80116ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ee:	4770      	bx	lr

080116f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80116f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80116f4:	b08c      	sub	sp, #48	; 0x30
 80116f6:	af00      	add	r7, sp, #0
 80116f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80116fa:	2300      	movs	r3, #0
 80116fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011700:	697b      	ldr	r3, [r7, #20]
 8011702:	689a      	ldr	r2, [r3, #8]
 8011704:	697b      	ldr	r3, [r7, #20]
 8011706:	691b      	ldr	r3, [r3, #16]
 8011708:	431a      	orrs	r2, r3
 801170a:	697b      	ldr	r3, [r7, #20]
 801170c:	695b      	ldr	r3, [r3, #20]
 801170e:	431a      	orrs	r2, r3
 8011710:	697b      	ldr	r3, [r7, #20]
 8011712:	69db      	ldr	r3, [r3, #28]
 8011714:	4313      	orrs	r3, r2
 8011716:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011718:	697b      	ldr	r3, [r7, #20]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	681a      	ldr	r2, [r3, #0]
 801171e:	4baa      	ldr	r3, [pc, #680]	; (80119c8 <UART_SetConfig+0x2d8>)
 8011720:	4013      	ands	r3, r2
 8011722:	697a      	ldr	r2, [r7, #20]
 8011724:	6812      	ldr	r2, [r2, #0]
 8011726:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011728:	430b      	orrs	r3, r1
 801172a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801172c:	697b      	ldr	r3, [r7, #20]
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	685b      	ldr	r3, [r3, #4]
 8011732:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011736:	697b      	ldr	r3, [r7, #20]
 8011738:	68da      	ldr	r2, [r3, #12]
 801173a:	697b      	ldr	r3, [r7, #20]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	430a      	orrs	r2, r1
 8011740:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011742:	697b      	ldr	r3, [r7, #20]
 8011744:	699b      	ldr	r3, [r3, #24]
 8011746:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011748:	697b      	ldr	r3, [r7, #20]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	4a9f      	ldr	r2, [pc, #636]	; (80119cc <UART_SetConfig+0x2dc>)
 801174e:	4293      	cmp	r3, r2
 8011750:	d004      	beq.n	801175c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011752:	697b      	ldr	r3, [r7, #20]
 8011754:	6a1b      	ldr	r3, [r3, #32]
 8011756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011758:	4313      	orrs	r3, r2
 801175a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801175c:	697b      	ldr	r3, [r7, #20]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	689b      	ldr	r3, [r3, #8]
 8011762:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8011766:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801176a:	697a      	ldr	r2, [r7, #20]
 801176c:	6812      	ldr	r2, [r2, #0]
 801176e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011770:	430b      	orrs	r3, r1
 8011772:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011774:	697b      	ldr	r3, [r7, #20]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801177a:	f023 010f 	bic.w	r1, r3, #15
 801177e:	697b      	ldr	r3, [r7, #20]
 8011780:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011782:	697b      	ldr	r3, [r7, #20]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	430a      	orrs	r2, r1
 8011788:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801178a:	697b      	ldr	r3, [r7, #20]
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	4a90      	ldr	r2, [pc, #576]	; (80119d0 <UART_SetConfig+0x2e0>)
 8011790:	4293      	cmp	r3, r2
 8011792:	d125      	bne.n	80117e0 <UART_SetConfig+0xf0>
 8011794:	4b8f      	ldr	r3, [pc, #572]	; (80119d4 <UART_SetConfig+0x2e4>)
 8011796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801179a:	f003 0303 	and.w	r3, r3, #3
 801179e:	2b03      	cmp	r3, #3
 80117a0:	d81a      	bhi.n	80117d8 <UART_SetConfig+0xe8>
 80117a2:	a201      	add	r2, pc, #4	; (adr r2, 80117a8 <UART_SetConfig+0xb8>)
 80117a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117a8:	080117b9 	.word	0x080117b9
 80117ac:	080117c9 	.word	0x080117c9
 80117b0:	080117c1 	.word	0x080117c1
 80117b4:	080117d1 	.word	0x080117d1
 80117b8:	2301      	movs	r3, #1
 80117ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80117be:	e116      	b.n	80119ee <UART_SetConfig+0x2fe>
 80117c0:	2302      	movs	r3, #2
 80117c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80117c6:	e112      	b.n	80119ee <UART_SetConfig+0x2fe>
 80117c8:	2304      	movs	r3, #4
 80117ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80117ce:	e10e      	b.n	80119ee <UART_SetConfig+0x2fe>
 80117d0:	2308      	movs	r3, #8
 80117d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80117d6:	e10a      	b.n	80119ee <UART_SetConfig+0x2fe>
 80117d8:	2310      	movs	r3, #16
 80117da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80117de:	e106      	b.n	80119ee <UART_SetConfig+0x2fe>
 80117e0:	697b      	ldr	r3, [r7, #20]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	4a7c      	ldr	r2, [pc, #496]	; (80119d8 <UART_SetConfig+0x2e8>)
 80117e6:	4293      	cmp	r3, r2
 80117e8:	d138      	bne.n	801185c <UART_SetConfig+0x16c>
 80117ea:	4b7a      	ldr	r3, [pc, #488]	; (80119d4 <UART_SetConfig+0x2e4>)
 80117ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80117f0:	f003 030c 	and.w	r3, r3, #12
 80117f4:	2b0c      	cmp	r3, #12
 80117f6:	d82d      	bhi.n	8011854 <UART_SetConfig+0x164>
 80117f8:	a201      	add	r2, pc, #4	; (adr r2, 8011800 <UART_SetConfig+0x110>)
 80117fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117fe:	bf00      	nop
 8011800:	08011835 	.word	0x08011835
 8011804:	08011855 	.word	0x08011855
 8011808:	08011855 	.word	0x08011855
 801180c:	08011855 	.word	0x08011855
 8011810:	08011845 	.word	0x08011845
 8011814:	08011855 	.word	0x08011855
 8011818:	08011855 	.word	0x08011855
 801181c:	08011855 	.word	0x08011855
 8011820:	0801183d 	.word	0x0801183d
 8011824:	08011855 	.word	0x08011855
 8011828:	08011855 	.word	0x08011855
 801182c:	08011855 	.word	0x08011855
 8011830:	0801184d 	.word	0x0801184d
 8011834:	2300      	movs	r3, #0
 8011836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801183a:	e0d8      	b.n	80119ee <UART_SetConfig+0x2fe>
 801183c:	2302      	movs	r3, #2
 801183e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011842:	e0d4      	b.n	80119ee <UART_SetConfig+0x2fe>
 8011844:	2304      	movs	r3, #4
 8011846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801184a:	e0d0      	b.n	80119ee <UART_SetConfig+0x2fe>
 801184c:	2308      	movs	r3, #8
 801184e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011852:	e0cc      	b.n	80119ee <UART_SetConfig+0x2fe>
 8011854:	2310      	movs	r3, #16
 8011856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801185a:	e0c8      	b.n	80119ee <UART_SetConfig+0x2fe>
 801185c:	697b      	ldr	r3, [r7, #20]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	4a5e      	ldr	r2, [pc, #376]	; (80119dc <UART_SetConfig+0x2ec>)
 8011862:	4293      	cmp	r3, r2
 8011864:	d125      	bne.n	80118b2 <UART_SetConfig+0x1c2>
 8011866:	4b5b      	ldr	r3, [pc, #364]	; (80119d4 <UART_SetConfig+0x2e4>)
 8011868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801186c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8011870:	2b30      	cmp	r3, #48	; 0x30
 8011872:	d016      	beq.n	80118a2 <UART_SetConfig+0x1b2>
 8011874:	2b30      	cmp	r3, #48	; 0x30
 8011876:	d818      	bhi.n	80118aa <UART_SetConfig+0x1ba>
 8011878:	2b20      	cmp	r3, #32
 801187a:	d00a      	beq.n	8011892 <UART_SetConfig+0x1a2>
 801187c:	2b20      	cmp	r3, #32
 801187e:	d814      	bhi.n	80118aa <UART_SetConfig+0x1ba>
 8011880:	2b00      	cmp	r3, #0
 8011882:	d002      	beq.n	801188a <UART_SetConfig+0x19a>
 8011884:	2b10      	cmp	r3, #16
 8011886:	d008      	beq.n	801189a <UART_SetConfig+0x1aa>
 8011888:	e00f      	b.n	80118aa <UART_SetConfig+0x1ba>
 801188a:	2300      	movs	r3, #0
 801188c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011890:	e0ad      	b.n	80119ee <UART_SetConfig+0x2fe>
 8011892:	2302      	movs	r3, #2
 8011894:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011898:	e0a9      	b.n	80119ee <UART_SetConfig+0x2fe>
 801189a:	2304      	movs	r3, #4
 801189c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80118a0:	e0a5      	b.n	80119ee <UART_SetConfig+0x2fe>
 80118a2:	2308      	movs	r3, #8
 80118a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80118a8:	e0a1      	b.n	80119ee <UART_SetConfig+0x2fe>
 80118aa:	2310      	movs	r3, #16
 80118ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80118b0:	e09d      	b.n	80119ee <UART_SetConfig+0x2fe>
 80118b2:	697b      	ldr	r3, [r7, #20]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	4a4a      	ldr	r2, [pc, #296]	; (80119e0 <UART_SetConfig+0x2f0>)
 80118b8:	4293      	cmp	r3, r2
 80118ba:	d125      	bne.n	8011908 <UART_SetConfig+0x218>
 80118bc:	4b45      	ldr	r3, [pc, #276]	; (80119d4 <UART_SetConfig+0x2e4>)
 80118be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80118c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80118c6:	2bc0      	cmp	r3, #192	; 0xc0
 80118c8:	d016      	beq.n	80118f8 <UART_SetConfig+0x208>
 80118ca:	2bc0      	cmp	r3, #192	; 0xc0
 80118cc:	d818      	bhi.n	8011900 <UART_SetConfig+0x210>
 80118ce:	2b80      	cmp	r3, #128	; 0x80
 80118d0:	d00a      	beq.n	80118e8 <UART_SetConfig+0x1f8>
 80118d2:	2b80      	cmp	r3, #128	; 0x80
 80118d4:	d814      	bhi.n	8011900 <UART_SetConfig+0x210>
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d002      	beq.n	80118e0 <UART_SetConfig+0x1f0>
 80118da:	2b40      	cmp	r3, #64	; 0x40
 80118dc:	d008      	beq.n	80118f0 <UART_SetConfig+0x200>
 80118de:	e00f      	b.n	8011900 <UART_SetConfig+0x210>
 80118e0:	2300      	movs	r3, #0
 80118e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80118e6:	e082      	b.n	80119ee <UART_SetConfig+0x2fe>
 80118e8:	2302      	movs	r3, #2
 80118ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80118ee:	e07e      	b.n	80119ee <UART_SetConfig+0x2fe>
 80118f0:	2304      	movs	r3, #4
 80118f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80118f6:	e07a      	b.n	80119ee <UART_SetConfig+0x2fe>
 80118f8:	2308      	movs	r3, #8
 80118fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80118fe:	e076      	b.n	80119ee <UART_SetConfig+0x2fe>
 8011900:	2310      	movs	r3, #16
 8011902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011906:	e072      	b.n	80119ee <UART_SetConfig+0x2fe>
 8011908:	697b      	ldr	r3, [r7, #20]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	4a35      	ldr	r2, [pc, #212]	; (80119e4 <UART_SetConfig+0x2f4>)
 801190e:	4293      	cmp	r3, r2
 8011910:	d12a      	bne.n	8011968 <UART_SetConfig+0x278>
 8011912:	4b30      	ldr	r3, [pc, #192]	; (80119d4 <UART_SetConfig+0x2e4>)
 8011914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011918:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801191c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011920:	d01a      	beq.n	8011958 <UART_SetConfig+0x268>
 8011922:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011926:	d81b      	bhi.n	8011960 <UART_SetConfig+0x270>
 8011928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801192c:	d00c      	beq.n	8011948 <UART_SetConfig+0x258>
 801192e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011932:	d815      	bhi.n	8011960 <UART_SetConfig+0x270>
 8011934:	2b00      	cmp	r3, #0
 8011936:	d003      	beq.n	8011940 <UART_SetConfig+0x250>
 8011938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801193c:	d008      	beq.n	8011950 <UART_SetConfig+0x260>
 801193e:	e00f      	b.n	8011960 <UART_SetConfig+0x270>
 8011940:	2300      	movs	r3, #0
 8011942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011946:	e052      	b.n	80119ee <UART_SetConfig+0x2fe>
 8011948:	2302      	movs	r3, #2
 801194a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801194e:	e04e      	b.n	80119ee <UART_SetConfig+0x2fe>
 8011950:	2304      	movs	r3, #4
 8011952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011956:	e04a      	b.n	80119ee <UART_SetConfig+0x2fe>
 8011958:	2308      	movs	r3, #8
 801195a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801195e:	e046      	b.n	80119ee <UART_SetConfig+0x2fe>
 8011960:	2310      	movs	r3, #16
 8011962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011966:	e042      	b.n	80119ee <UART_SetConfig+0x2fe>
 8011968:	697b      	ldr	r3, [r7, #20]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	4a17      	ldr	r2, [pc, #92]	; (80119cc <UART_SetConfig+0x2dc>)
 801196e:	4293      	cmp	r3, r2
 8011970:	d13a      	bne.n	80119e8 <UART_SetConfig+0x2f8>
 8011972:	4b18      	ldr	r3, [pc, #96]	; (80119d4 <UART_SetConfig+0x2e4>)
 8011974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011978:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801197c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011980:	d01a      	beq.n	80119b8 <UART_SetConfig+0x2c8>
 8011982:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011986:	d81b      	bhi.n	80119c0 <UART_SetConfig+0x2d0>
 8011988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801198c:	d00c      	beq.n	80119a8 <UART_SetConfig+0x2b8>
 801198e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011992:	d815      	bhi.n	80119c0 <UART_SetConfig+0x2d0>
 8011994:	2b00      	cmp	r3, #0
 8011996:	d003      	beq.n	80119a0 <UART_SetConfig+0x2b0>
 8011998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801199c:	d008      	beq.n	80119b0 <UART_SetConfig+0x2c0>
 801199e:	e00f      	b.n	80119c0 <UART_SetConfig+0x2d0>
 80119a0:	2300      	movs	r3, #0
 80119a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80119a6:	e022      	b.n	80119ee <UART_SetConfig+0x2fe>
 80119a8:	2302      	movs	r3, #2
 80119aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80119ae:	e01e      	b.n	80119ee <UART_SetConfig+0x2fe>
 80119b0:	2304      	movs	r3, #4
 80119b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80119b6:	e01a      	b.n	80119ee <UART_SetConfig+0x2fe>
 80119b8:	2308      	movs	r3, #8
 80119ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80119be:	e016      	b.n	80119ee <UART_SetConfig+0x2fe>
 80119c0:	2310      	movs	r3, #16
 80119c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80119c6:	e012      	b.n	80119ee <UART_SetConfig+0x2fe>
 80119c8:	cfff69f3 	.word	0xcfff69f3
 80119cc:	40008000 	.word	0x40008000
 80119d0:	40013800 	.word	0x40013800
 80119d4:	40021000 	.word	0x40021000
 80119d8:	40004400 	.word	0x40004400
 80119dc:	40004800 	.word	0x40004800
 80119e0:	40004c00 	.word	0x40004c00
 80119e4:	40005000 	.word	0x40005000
 80119e8:	2310      	movs	r3, #16
 80119ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80119ee:	697b      	ldr	r3, [r7, #20]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	4aae      	ldr	r2, [pc, #696]	; (8011cac <UART_SetConfig+0x5bc>)
 80119f4:	4293      	cmp	r3, r2
 80119f6:	f040 8097 	bne.w	8011b28 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80119fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80119fe:	2b08      	cmp	r3, #8
 8011a00:	d823      	bhi.n	8011a4a <UART_SetConfig+0x35a>
 8011a02:	a201      	add	r2, pc, #4	; (adr r2, 8011a08 <UART_SetConfig+0x318>)
 8011a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a08:	08011a2d 	.word	0x08011a2d
 8011a0c:	08011a4b 	.word	0x08011a4b
 8011a10:	08011a35 	.word	0x08011a35
 8011a14:	08011a4b 	.word	0x08011a4b
 8011a18:	08011a3b 	.word	0x08011a3b
 8011a1c:	08011a4b 	.word	0x08011a4b
 8011a20:	08011a4b 	.word	0x08011a4b
 8011a24:	08011a4b 	.word	0x08011a4b
 8011a28:	08011a43 	.word	0x08011a43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011a2c:	f7f9 fee2 	bl	800b7f4 <HAL_RCC_GetPCLK1Freq>
 8011a30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011a32:	e010      	b.n	8011a56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011a34:	4b9e      	ldr	r3, [pc, #632]	; (8011cb0 <UART_SetConfig+0x5c0>)
 8011a36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011a38:	e00d      	b.n	8011a56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011a3a:	f7f9 fe43 	bl	800b6c4 <HAL_RCC_GetSysClockFreq>
 8011a3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011a40:	e009      	b.n	8011a56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011a46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011a48:	e005      	b.n	8011a56 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8011a4e:	2301      	movs	r3, #1
 8011a50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8011a54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	f000 8130 	beq.w	8011cbe <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011a5e:	697b      	ldr	r3, [r7, #20]
 8011a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a62:	4a94      	ldr	r2, [pc, #592]	; (8011cb4 <UART_SetConfig+0x5c4>)
 8011a64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011a68:	461a      	mov	r2, r3
 8011a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011a70:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011a72:	697b      	ldr	r3, [r7, #20]
 8011a74:	685a      	ldr	r2, [r3, #4]
 8011a76:	4613      	mov	r3, r2
 8011a78:	005b      	lsls	r3, r3, #1
 8011a7a:	4413      	add	r3, r2
 8011a7c:	69ba      	ldr	r2, [r7, #24]
 8011a7e:	429a      	cmp	r2, r3
 8011a80:	d305      	bcc.n	8011a8e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011a82:	697b      	ldr	r3, [r7, #20]
 8011a84:	685b      	ldr	r3, [r3, #4]
 8011a86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011a88:	69ba      	ldr	r2, [r7, #24]
 8011a8a:	429a      	cmp	r2, r3
 8011a8c:	d903      	bls.n	8011a96 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8011a8e:	2301      	movs	r3, #1
 8011a90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8011a94:	e113      	b.n	8011cbe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a98:	2200      	movs	r2, #0
 8011a9a:	60bb      	str	r3, [r7, #8]
 8011a9c:	60fa      	str	r2, [r7, #12]
 8011a9e:	697b      	ldr	r3, [r7, #20]
 8011aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011aa2:	4a84      	ldr	r2, [pc, #528]	; (8011cb4 <UART_SetConfig+0x5c4>)
 8011aa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011aa8:	b29b      	uxth	r3, r3
 8011aaa:	2200      	movs	r2, #0
 8011aac:	603b      	str	r3, [r7, #0]
 8011aae:	607a      	str	r2, [r7, #4]
 8011ab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011ab4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011ab8:	f7ef f8de 	bl	8000c78 <__aeabi_uldivmod>
 8011abc:	4602      	mov	r2, r0
 8011abe:	460b      	mov	r3, r1
 8011ac0:	4610      	mov	r0, r2
 8011ac2:	4619      	mov	r1, r3
 8011ac4:	f04f 0200 	mov.w	r2, #0
 8011ac8:	f04f 0300 	mov.w	r3, #0
 8011acc:	020b      	lsls	r3, r1, #8
 8011ace:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011ad2:	0202      	lsls	r2, r0, #8
 8011ad4:	6979      	ldr	r1, [r7, #20]
 8011ad6:	6849      	ldr	r1, [r1, #4]
 8011ad8:	0849      	lsrs	r1, r1, #1
 8011ada:	2000      	movs	r0, #0
 8011adc:	460c      	mov	r4, r1
 8011ade:	4605      	mov	r5, r0
 8011ae0:	eb12 0804 	adds.w	r8, r2, r4
 8011ae4:	eb43 0905 	adc.w	r9, r3, r5
 8011ae8:	697b      	ldr	r3, [r7, #20]
 8011aea:	685b      	ldr	r3, [r3, #4]
 8011aec:	2200      	movs	r2, #0
 8011aee:	469a      	mov	sl, r3
 8011af0:	4693      	mov	fp, r2
 8011af2:	4652      	mov	r2, sl
 8011af4:	465b      	mov	r3, fp
 8011af6:	4640      	mov	r0, r8
 8011af8:	4649      	mov	r1, r9
 8011afa:	f7ef f8bd 	bl	8000c78 <__aeabi_uldivmod>
 8011afe:	4602      	mov	r2, r0
 8011b00:	460b      	mov	r3, r1
 8011b02:	4613      	mov	r3, r2
 8011b04:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011b06:	6a3b      	ldr	r3, [r7, #32]
 8011b08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011b0c:	d308      	bcc.n	8011b20 <UART_SetConfig+0x430>
 8011b0e:	6a3b      	ldr	r3, [r7, #32]
 8011b10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011b14:	d204      	bcs.n	8011b20 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8011b16:	697b      	ldr	r3, [r7, #20]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	6a3a      	ldr	r2, [r7, #32]
 8011b1c:	60da      	str	r2, [r3, #12]
 8011b1e:	e0ce      	b.n	8011cbe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8011b20:	2301      	movs	r3, #1
 8011b22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8011b26:	e0ca      	b.n	8011cbe <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011b28:	697b      	ldr	r3, [r7, #20]
 8011b2a:	69db      	ldr	r3, [r3, #28]
 8011b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011b30:	d166      	bne.n	8011c00 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8011b32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011b36:	2b08      	cmp	r3, #8
 8011b38:	d827      	bhi.n	8011b8a <UART_SetConfig+0x49a>
 8011b3a:	a201      	add	r2, pc, #4	; (adr r2, 8011b40 <UART_SetConfig+0x450>)
 8011b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b40:	08011b65 	.word	0x08011b65
 8011b44:	08011b6d 	.word	0x08011b6d
 8011b48:	08011b75 	.word	0x08011b75
 8011b4c:	08011b8b 	.word	0x08011b8b
 8011b50:	08011b7b 	.word	0x08011b7b
 8011b54:	08011b8b 	.word	0x08011b8b
 8011b58:	08011b8b 	.word	0x08011b8b
 8011b5c:	08011b8b 	.word	0x08011b8b
 8011b60:	08011b83 	.word	0x08011b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011b64:	f7f9 fe46 	bl	800b7f4 <HAL_RCC_GetPCLK1Freq>
 8011b68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011b6a:	e014      	b.n	8011b96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011b6c:	f7f9 fe58 	bl	800b820 <HAL_RCC_GetPCLK2Freq>
 8011b70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011b72:	e010      	b.n	8011b96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011b74:	4b4e      	ldr	r3, [pc, #312]	; (8011cb0 <UART_SetConfig+0x5c0>)
 8011b76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011b78:	e00d      	b.n	8011b96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011b7a:	f7f9 fda3 	bl	800b6c4 <HAL_RCC_GetSysClockFreq>
 8011b7e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011b80:	e009      	b.n	8011b96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011b86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011b88:	e005      	b.n	8011b96 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8011b8e:	2301      	movs	r3, #1
 8011b90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8011b94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	f000 8090 	beq.w	8011cbe <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011b9e:	697b      	ldr	r3, [r7, #20]
 8011ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ba2:	4a44      	ldr	r2, [pc, #272]	; (8011cb4 <UART_SetConfig+0x5c4>)
 8011ba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011ba8:	461a      	mov	r2, r3
 8011baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bac:	fbb3 f3f2 	udiv	r3, r3, r2
 8011bb0:	005a      	lsls	r2, r3, #1
 8011bb2:	697b      	ldr	r3, [r7, #20]
 8011bb4:	685b      	ldr	r3, [r3, #4]
 8011bb6:	085b      	lsrs	r3, r3, #1
 8011bb8:	441a      	add	r2, r3
 8011bba:	697b      	ldr	r3, [r7, #20]
 8011bbc:	685b      	ldr	r3, [r3, #4]
 8011bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8011bc2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011bc4:	6a3b      	ldr	r3, [r7, #32]
 8011bc6:	2b0f      	cmp	r3, #15
 8011bc8:	d916      	bls.n	8011bf8 <UART_SetConfig+0x508>
 8011bca:	6a3b      	ldr	r3, [r7, #32]
 8011bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011bd0:	d212      	bcs.n	8011bf8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011bd2:	6a3b      	ldr	r3, [r7, #32]
 8011bd4:	b29b      	uxth	r3, r3
 8011bd6:	f023 030f 	bic.w	r3, r3, #15
 8011bda:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011bdc:	6a3b      	ldr	r3, [r7, #32]
 8011bde:	085b      	lsrs	r3, r3, #1
 8011be0:	b29b      	uxth	r3, r3
 8011be2:	f003 0307 	and.w	r3, r3, #7
 8011be6:	b29a      	uxth	r2, r3
 8011be8:	8bfb      	ldrh	r3, [r7, #30]
 8011bea:	4313      	orrs	r3, r2
 8011bec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8011bee:	697b      	ldr	r3, [r7, #20]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	8bfa      	ldrh	r2, [r7, #30]
 8011bf4:	60da      	str	r2, [r3, #12]
 8011bf6:	e062      	b.n	8011cbe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8011bf8:	2301      	movs	r3, #1
 8011bfa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8011bfe:	e05e      	b.n	8011cbe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011c00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011c04:	2b08      	cmp	r3, #8
 8011c06:	d828      	bhi.n	8011c5a <UART_SetConfig+0x56a>
 8011c08:	a201      	add	r2, pc, #4	; (adr r2, 8011c10 <UART_SetConfig+0x520>)
 8011c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c0e:	bf00      	nop
 8011c10:	08011c35 	.word	0x08011c35
 8011c14:	08011c3d 	.word	0x08011c3d
 8011c18:	08011c45 	.word	0x08011c45
 8011c1c:	08011c5b 	.word	0x08011c5b
 8011c20:	08011c4b 	.word	0x08011c4b
 8011c24:	08011c5b 	.word	0x08011c5b
 8011c28:	08011c5b 	.word	0x08011c5b
 8011c2c:	08011c5b 	.word	0x08011c5b
 8011c30:	08011c53 	.word	0x08011c53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011c34:	f7f9 fdde 	bl	800b7f4 <HAL_RCC_GetPCLK1Freq>
 8011c38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011c3a:	e014      	b.n	8011c66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011c3c:	f7f9 fdf0 	bl	800b820 <HAL_RCC_GetPCLK2Freq>
 8011c40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011c42:	e010      	b.n	8011c66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011c44:	4b1a      	ldr	r3, [pc, #104]	; (8011cb0 <UART_SetConfig+0x5c0>)
 8011c46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011c48:	e00d      	b.n	8011c66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011c4a:	f7f9 fd3b 	bl	800b6c4 <HAL_RCC_GetSysClockFreq>
 8011c4e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011c50:	e009      	b.n	8011c66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011c52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011c56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011c58:	e005      	b.n	8011c66 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8011c5e:	2301      	movs	r3, #1
 8011c60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8011c64:	bf00      	nop
    }

    if (pclk != 0U)
 8011c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d028      	beq.n	8011cbe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011c6c:	697b      	ldr	r3, [r7, #20]
 8011c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c70:	4a10      	ldr	r2, [pc, #64]	; (8011cb4 <UART_SetConfig+0x5c4>)
 8011c72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011c76:	461a      	mov	r2, r3
 8011c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8011c7e:	697b      	ldr	r3, [r7, #20]
 8011c80:	685b      	ldr	r3, [r3, #4]
 8011c82:	085b      	lsrs	r3, r3, #1
 8011c84:	441a      	add	r2, r3
 8011c86:	697b      	ldr	r3, [r7, #20]
 8011c88:	685b      	ldr	r3, [r3, #4]
 8011c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8011c8e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011c90:	6a3b      	ldr	r3, [r7, #32]
 8011c92:	2b0f      	cmp	r3, #15
 8011c94:	d910      	bls.n	8011cb8 <UART_SetConfig+0x5c8>
 8011c96:	6a3b      	ldr	r3, [r7, #32]
 8011c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011c9c:	d20c      	bcs.n	8011cb8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011c9e:	6a3b      	ldr	r3, [r7, #32]
 8011ca0:	b29a      	uxth	r2, r3
 8011ca2:	697b      	ldr	r3, [r7, #20]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	60da      	str	r2, [r3, #12]
 8011ca8:	e009      	b.n	8011cbe <UART_SetConfig+0x5ce>
 8011caa:	bf00      	nop
 8011cac:	40008000 	.word	0x40008000
 8011cb0:	00f42400 	.word	0x00f42400
 8011cb4:	0801d13c 	.word	0x0801d13c
      }
      else
      {
        ret = HAL_ERROR;
 8011cb8:	2301      	movs	r3, #1
 8011cba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011cbe:	697b      	ldr	r3, [r7, #20]
 8011cc0:	2201      	movs	r2, #1
 8011cc2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011cc6:	697b      	ldr	r3, [r7, #20]
 8011cc8:	2201      	movs	r2, #1
 8011cca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011cce:	697b      	ldr	r3, [r7, #20]
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011cd4:	697b      	ldr	r3, [r7, #20]
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011cda:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8011cde:	4618      	mov	r0, r3
 8011ce0:	3730      	adds	r7, #48	; 0x30
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011ce8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011ce8:	b480      	push	{r7}
 8011cea:	b083      	sub	sp, #12
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cf4:	f003 0308 	and.w	r3, r3, #8
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d00a      	beq.n	8011d12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	685b      	ldr	r3, [r3, #4]
 8011d02:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	430a      	orrs	r2, r1
 8011d10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d16:	f003 0301 	and.w	r3, r3, #1
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d00a      	beq.n	8011d34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	685b      	ldr	r3, [r3, #4]
 8011d24:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	430a      	orrs	r2, r1
 8011d32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d38:	f003 0302 	and.w	r3, r3, #2
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d00a      	beq.n	8011d56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	685b      	ldr	r3, [r3, #4]
 8011d46:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	430a      	orrs	r2, r1
 8011d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d5a:	f003 0304 	and.w	r3, r3, #4
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d00a      	beq.n	8011d78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	685b      	ldr	r3, [r3, #4]
 8011d68:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	430a      	orrs	r2, r1
 8011d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d7c:	f003 0310 	and.w	r3, r3, #16
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d00a      	beq.n	8011d9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	689b      	ldr	r3, [r3, #8]
 8011d8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	430a      	orrs	r2, r1
 8011d98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d9e:	f003 0320 	and.w	r3, r3, #32
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d00a      	beq.n	8011dbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	689b      	ldr	r3, [r3, #8]
 8011dac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	430a      	orrs	r2, r1
 8011dba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d01a      	beq.n	8011dfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	685b      	ldr	r3, [r3, #4]
 8011dce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	430a      	orrs	r2, r1
 8011ddc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011de2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011de6:	d10a      	bne.n	8011dfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	685b      	ldr	r3, [r3, #4]
 8011dee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	430a      	orrs	r2, r1
 8011dfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d00a      	beq.n	8011e20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	685b      	ldr	r3, [r3, #4]
 8011e10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	430a      	orrs	r2, r1
 8011e1e:	605a      	str	r2, [r3, #4]
  }
}
 8011e20:	bf00      	nop
 8011e22:	370c      	adds	r7, #12
 8011e24:	46bd      	mov	sp, r7
 8011e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2a:	4770      	bx	lr

08011e2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b098      	sub	sp, #96	; 0x60
 8011e30:	af02      	add	r7, sp, #8
 8011e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	2200      	movs	r2, #0
 8011e38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011e3c:	f7f5 fb2e 	bl	800749c <HAL_GetTick>
 8011e40:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	f003 0308 	and.w	r3, r3, #8
 8011e4c:	2b08      	cmp	r3, #8
 8011e4e:	d12f      	bne.n	8011eb0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011e50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011e54:	9300      	str	r3, [sp, #0]
 8011e56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e58:	2200      	movs	r2, #0
 8011e5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011e5e:	6878      	ldr	r0, [r7, #4]
 8011e60:	f000 f88e 	bl	8011f80 <UART_WaitOnFlagUntilTimeout>
 8011e64:	4603      	mov	r3, r0
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d022      	beq.n	8011eb0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e72:	e853 3f00 	ldrex	r3, [r3]
 8011e76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011e7e:	653b      	str	r3, [r7, #80]	; 0x50
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	461a      	mov	r2, r3
 8011e86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e88:	647b      	str	r3, [r7, #68]	; 0x44
 8011e8a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011e8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011e90:	e841 2300 	strex	r3, r2, [r1]
 8011e94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d1e6      	bne.n	8011e6a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	2220      	movs	r2, #32
 8011ea0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011eac:	2303      	movs	r3, #3
 8011eae:	e063      	b.n	8011f78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	f003 0304 	and.w	r3, r3, #4
 8011eba:	2b04      	cmp	r3, #4
 8011ebc:	d149      	bne.n	8011f52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011ebe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011ec2:	9300      	str	r3, [sp, #0]
 8011ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011ecc:	6878      	ldr	r0, [r7, #4]
 8011ece:	f000 f857 	bl	8011f80 <UART_WaitOnFlagUntilTimeout>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d03c      	beq.n	8011f52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee0:	e853 3f00 	ldrex	r3, [r3]
 8011ee4:	623b      	str	r3, [r7, #32]
   return(result);
 8011ee6:	6a3b      	ldr	r3, [r7, #32]
 8011ee8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011eec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	461a      	mov	r2, r3
 8011ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ef6:	633b      	str	r3, [r7, #48]	; 0x30
 8011ef8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011efa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011efe:	e841 2300 	strex	r3, r2, [r1]
 8011f02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d1e6      	bne.n	8011ed8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	3308      	adds	r3, #8
 8011f10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f12:	693b      	ldr	r3, [r7, #16]
 8011f14:	e853 3f00 	ldrex	r3, [r3]
 8011f18:	60fb      	str	r3, [r7, #12]
   return(result);
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	f023 0301 	bic.w	r3, r3, #1
 8011f20:	64bb      	str	r3, [r7, #72]	; 0x48
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	3308      	adds	r3, #8
 8011f28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f2a:	61fa      	str	r2, [r7, #28]
 8011f2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f2e:	69b9      	ldr	r1, [r7, #24]
 8011f30:	69fa      	ldr	r2, [r7, #28]
 8011f32:	e841 2300 	strex	r3, r2, [r1]
 8011f36:	617b      	str	r3, [r7, #20]
   return(result);
 8011f38:	697b      	ldr	r3, [r7, #20]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d1e5      	bne.n	8011f0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	2220      	movs	r2, #32
 8011f42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	2200      	movs	r2, #0
 8011f4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011f4e:	2303      	movs	r3, #3
 8011f50:	e012      	b.n	8011f78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	2220      	movs	r2, #32
 8011f56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	2220      	movs	r2, #32
 8011f5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	2200      	movs	r2, #0
 8011f66:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	2200      	movs	r2, #0
 8011f72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011f76:	2300      	movs	r3, #0
}
 8011f78:	4618      	mov	r0, r3
 8011f7a:	3758      	adds	r7, #88	; 0x58
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	bd80      	pop	{r7, pc}

08011f80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b084      	sub	sp, #16
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	60f8      	str	r0, [r7, #12]
 8011f88:	60b9      	str	r1, [r7, #8]
 8011f8a:	603b      	str	r3, [r7, #0]
 8011f8c:	4613      	mov	r3, r2
 8011f8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011f90:	e049      	b.n	8012026 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011f92:	69bb      	ldr	r3, [r7, #24]
 8011f94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011f98:	d045      	beq.n	8012026 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011f9a:	f7f5 fa7f 	bl	800749c <HAL_GetTick>
 8011f9e:	4602      	mov	r2, r0
 8011fa0:	683b      	ldr	r3, [r7, #0]
 8011fa2:	1ad3      	subs	r3, r2, r3
 8011fa4:	69ba      	ldr	r2, [r7, #24]
 8011fa6:	429a      	cmp	r2, r3
 8011fa8:	d302      	bcc.n	8011fb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8011faa:	69bb      	ldr	r3, [r7, #24]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d101      	bne.n	8011fb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011fb0:	2303      	movs	r3, #3
 8011fb2:	e048      	b.n	8012046 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	f003 0304 	and.w	r3, r3, #4
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d031      	beq.n	8012026 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	69db      	ldr	r3, [r3, #28]
 8011fc8:	f003 0308 	and.w	r3, r3, #8
 8011fcc:	2b08      	cmp	r3, #8
 8011fce:	d110      	bne.n	8011ff2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	2208      	movs	r2, #8
 8011fd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011fd8:	68f8      	ldr	r0, [r7, #12]
 8011fda:	f000 f920 	bl	801221e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	2208      	movs	r2, #8
 8011fe2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	2200      	movs	r2, #0
 8011fea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011fee:	2301      	movs	r3, #1
 8011ff0:	e029      	b.n	8012046 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	69db      	ldr	r3, [r3, #28]
 8011ff8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011ffc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012000:	d111      	bne.n	8012026 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801200a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801200c:	68f8      	ldr	r0, [r7, #12]
 801200e:	f000 f906 	bl	801221e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	2220      	movs	r2, #32
 8012016:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	2200      	movs	r2, #0
 801201e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8012022:	2303      	movs	r3, #3
 8012024:	e00f      	b.n	8012046 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	69da      	ldr	r2, [r3, #28]
 801202c:	68bb      	ldr	r3, [r7, #8]
 801202e:	4013      	ands	r3, r2
 8012030:	68ba      	ldr	r2, [r7, #8]
 8012032:	429a      	cmp	r2, r3
 8012034:	bf0c      	ite	eq
 8012036:	2301      	moveq	r3, #1
 8012038:	2300      	movne	r3, #0
 801203a:	b2db      	uxtb	r3, r3
 801203c:	461a      	mov	r2, r3
 801203e:	79fb      	ldrb	r3, [r7, #7]
 8012040:	429a      	cmp	r2, r3
 8012042:	d0a6      	beq.n	8011f92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012044:	2300      	movs	r3, #0
}
 8012046:	4618      	mov	r0, r3
 8012048:	3710      	adds	r7, #16
 801204a:	46bd      	mov	sp, r7
 801204c:	bd80      	pop	{r7, pc}
	...

08012050 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b096      	sub	sp, #88	; 0x58
 8012054:	af00      	add	r7, sp, #0
 8012056:	60f8      	str	r0, [r7, #12]
 8012058:	60b9      	str	r1, [r7, #8]
 801205a:	4613      	mov	r3, r2
 801205c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	68ba      	ldr	r2, [r7, #8]
 8012062:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	88fa      	ldrh	r2, [r7, #6]
 8012068:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	2200      	movs	r2, #0
 8012070:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	2222      	movs	r2, #34	; 0x22
 8012078:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012082:	2b00      	cmp	r3, #0
 8012084:	d02d      	beq.n	80120e2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801208c:	4a40      	ldr	r2, [pc, #256]	; (8012190 <UART_Start_Receive_DMA+0x140>)
 801208e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012096:	4a3f      	ldr	r2, [pc, #252]	; (8012194 <UART_Start_Receive_DMA+0x144>)
 8012098:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80120a0:	4a3d      	ldr	r2, [pc, #244]	; (8012198 <UART_Start_Receive_DMA+0x148>)
 80120a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80120aa:	2200      	movs	r2, #0
 80120ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	3324      	adds	r3, #36	; 0x24
 80120ba:	4619      	mov	r1, r3
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120c0:	461a      	mov	r2, r3
 80120c2:	88fb      	ldrh	r3, [r7, #6]
 80120c4:	f7f5 fbd4 	bl	8007870 <HAL_DMA_Start_IT>
 80120c8:	4603      	mov	r3, r0
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d009      	beq.n	80120e2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	2210      	movs	r2, #16
 80120d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	2220      	movs	r2, #32
 80120da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 80120de:	2301      	movs	r3, #1
 80120e0:	e051      	b.n	8012186 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	691b      	ldr	r3, [r3, #16]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d018      	beq.n	801211c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120f2:	e853 3f00 	ldrex	r3, [r3]
 80120f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80120f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80120fe:	657b      	str	r3, [r7, #84]	; 0x54
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	461a      	mov	r2, r3
 8012106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012108:	64bb      	str	r3, [r7, #72]	; 0x48
 801210a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801210c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801210e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012110:	e841 2300 	strex	r3, r2, [r1]
 8012114:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8012116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012118:	2b00      	cmp	r3, #0
 801211a:	d1e6      	bne.n	80120ea <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	3308      	adds	r3, #8
 8012122:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012126:	e853 3f00 	ldrex	r3, [r3]
 801212a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801212e:	f043 0301 	orr.w	r3, r3, #1
 8012132:	653b      	str	r3, [r7, #80]	; 0x50
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	3308      	adds	r3, #8
 801213a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801213c:	637a      	str	r2, [r7, #52]	; 0x34
 801213e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012140:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012144:	e841 2300 	strex	r3, r2, [r1]
 8012148:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801214a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801214c:	2b00      	cmp	r3, #0
 801214e:	d1e5      	bne.n	801211c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	3308      	adds	r3, #8
 8012156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012158:	697b      	ldr	r3, [r7, #20]
 801215a:	e853 3f00 	ldrex	r3, [r3]
 801215e:	613b      	str	r3, [r7, #16]
   return(result);
 8012160:	693b      	ldr	r3, [r7, #16]
 8012162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012166:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	3308      	adds	r3, #8
 801216e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012170:	623a      	str	r2, [r7, #32]
 8012172:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012174:	69f9      	ldr	r1, [r7, #28]
 8012176:	6a3a      	ldr	r2, [r7, #32]
 8012178:	e841 2300 	strex	r3, r2, [r1]
 801217c:	61bb      	str	r3, [r7, #24]
   return(result);
 801217e:	69bb      	ldr	r3, [r7, #24]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d1e5      	bne.n	8012150 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8012184:	2300      	movs	r3, #0
}
 8012186:	4618      	mov	r0, r3
 8012188:	3758      	adds	r7, #88	; 0x58
 801218a:	46bd      	mov	sp, r7
 801218c:	bd80      	pop	{r7, pc}
 801218e:	bf00      	nop
 8012190:	080122eb 	.word	0x080122eb
 8012194:	08012417 	.word	0x08012417
 8012198:	08012455 	.word	0x08012455

0801219c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801219c:	b480      	push	{r7}
 801219e:	b08f      	sub	sp, #60	; 0x3c
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121aa:	6a3b      	ldr	r3, [r7, #32]
 80121ac:	e853 3f00 	ldrex	r3, [r3]
 80121b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80121b2:	69fb      	ldr	r3, [r7, #28]
 80121b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80121b8:	637b      	str	r3, [r7, #52]	; 0x34
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	461a      	mov	r2, r3
 80121c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80121c4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80121c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121ca:	e841 2300 	strex	r3, r2, [r1]
 80121ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80121d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d1e6      	bne.n	80121a4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	3308      	adds	r3, #8
 80121dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	e853 3f00 	ldrex	r3, [r3]
 80121e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80121e6:	68bb      	ldr	r3, [r7, #8]
 80121e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80121ec:	633b      	str	r3, [r7, #48]	; 0x30
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	3308      	adds	r3, #8
 80121f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121f6:	61ba      	str	r2, [r7, #24]
 80121f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121fa:	6979      	ldr	r1, [r7, #20]
 80121fc:	69ba      	ldr	r2, [r7, #24]
 80121fe:	e841 2300 	strex	r3, r2, [r1]
 8012202:	613b      	str	r3, [r7, #16]
   return(result);
 8012204:	693b      	ldr	r3, [r7, #16]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d1e5      	bne.n	80121d6 <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	2220      	movs	r2, #32
 801220e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8012212:	bf00      	nop
 8012214:	373c      	adds	r7, #60	; 0x3c
 8012216:	46bd      	mov	sp, r7
 8012218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221c:	4770      	bx	lr

0801221e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801221e:	b480      	push	{r7}
 8012220:	b095      	sub	sp, #84	; 0x54
 8012222:	af00      	add	r7, sp, #0
 8012224:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801222c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801222e:	e853 3f00 	ldrex	r3, [r3]
 8012232:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012236:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801223a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	461a      	mov	r2, r3
 8012242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012244:	643b      	str	r3, [r7, #64]	; 0x40
 8012246:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012248:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801224a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801224c:	e841 2300 	strex	r3, r2, [r1]
 8012250:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012254:	2b00      	cmp	r3, #0
 8012256:	d1e6      	bne.n	8012226 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	3308      	adds	r3, #8
 801225e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012260:	6a3b      	ldr	r3, [r7, #32]
 8012262:	e853 3f00 	ldrex	r3, [r3]
 8012266:	61fb      	str	r3, [r7, #28]
   return(result);
 8012268:	69fb      	ldr	r3, [r7, #28]
 801226a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801226e:	f023 0301 	bic.w	r3, r3, #1
 8012272:	64bb      	str	r3, [r7, #72]	; 0x48
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	3308      	adds	r3, #8
 801227a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801227c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801227e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012280:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012284:	e841 2300 	strex	r3, r2, [r1]
 8012288:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801228c:	2b00      	cmp	r3, #0
 801228e:	d1e3      	bne.n	8012258 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012294:	2b01      	cmp	r3, #1
 8012296:	d118      	bne.n	80122ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	e853 3f00 	ldrex	r3, [r3]
 80122a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80122a6:	68bb      	ldr	r3, [r7, #8]
 80122a8:	f023 0310 	bic.w	r3, r3, #16
 80122ac:	647b      	str	r3, [r7, #68]	; 0x44
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	461a      	mov	r2, r3
 80122b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122b6:	61bb      	str	r3, [r7, #24]
 80122b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122ba:	6979      	ldr	r1, [r7, #20]
 80122bc:	69ba      	ldr	r2, [r7, #24]
 80122be:	e841 2300 	strex	r3, r2, [r1]
 80122c2:	613b      	str	r3, [r7, #16]
   return(result);
 80122c4:	693b      	ldr	r3, [r7, #16]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d1e6      	bne.n	8012298 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	2220      	movs	r2, #32
 80122ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	2200      	movs	r2, #0
 80122d6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	2200      	movs	r2, #0
 80122dc:	675a      	str	r2, [r3, #116]	; 0x74
}
 80122de:	bf00      	nop
 80122e0:	3754      	adds	r7, #84	; 0x54
 80122e2:	46bd      	mov	sp, r7
 80122e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e8:	4770      	bx	lr

080122ea <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80122ea:	b580      	push	{r7, lr}
 80122ec:	b09c      	sub	sp, #112	; 0x70
 80122ee:	af00      	add	r7, sp, #0
 80122f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122f6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	f003 0320 	and.w	r3, r3, #32
 8012302:	2b00      	cmp	r3, #0
 8012304:	d171      	bne.n	80123ea <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8012306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012308:	2200      	movs	r2, #0
 801230a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801230e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012316:	e853 3f00 	ldrex	r3, [r3]
 801231a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801231c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801231e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012322:	66bb      	str	r3, [r7, #104]	; 0x68
 8012324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	461a      	mov	r2, r3
 801232a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801232c:	65bb      	str	r3, [r7, #88]	; 0x58
 801232e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012330:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012332:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012334:	e841 2300 	strex	r3, r2, [r1]
 8012338:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801233a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801233c:	2b00      	cmp	r3, #0
 801233e:	d1e6      	bne.n	801230e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	3308      	adds	r3, #8
 8012346:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801234a:	e853 3f00 	ldrex	r3, [r3]
 801234e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012352:	f023 0301 	bic.w	r3, r3, #1
 8012356:	667b      	str	r3, [r7, #100]	; 0x64
 8012358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	3308      	adds	r3, #8
 801235e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012360:	647a      	str	r2, [r7, #68]	; 0x44
 8012362:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012364:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012366:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012368:	e841 2300 	strex	r3, r2, [r1]
 801236c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801236e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012370:	2b00      	cmp	r3, #0
 8012372:	d1e5      	bne.n	8012340 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	3308      	adds	r3, #8
 801237a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801237e:	e853 3f00 	ldrex	r3, [r3]
 8012382:	623b      	str	r3, [r7, #32]
   return(result);
 8012384:	6a3b      	ldr	r3, [r7, #32]
 8012386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801238a:	663b      	str	r3, [r7, #96]	; 0x60
 801238c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	3308      	adds	r3, #8
 8012392:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012394:	633a      	str	r2, [r7, #48]	; 0x30
 8012396:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012398:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801239a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801239c:	e841 2300 	strex	r3, r2, [r1]
 80123a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80123a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d1e5      	bne.n	8012374 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80123a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80123aa:	2220      	movs	r2, #32
 80123ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80123b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80123b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123b4:	2b01      	cmp	r3, #1
 80123b6:	d118      	bne.n	80123ea <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80123b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123be:	693b      	ldr	r3, [r7, #16]
 80123c0:	e853 3f00 	ldrex	r3, [r3]
 80123c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	f023 0310 	bic.w	r3, r3, #16
 80123cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80123ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	461a      	mov	r2, r3
 80123d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80123d6:	61fb      	str	r3, [r7, #28]
 80123d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123da:	69b9      	ldr	r1, [r7, #24]
 80123dc:	69fa      	ldr	r2, [r7, #28]
 80123de:	e841 2300 	strex	r3, r2, [r1]
 80123e2:	617b      	str	r3, [r7, #20]
   return(result);
 80123e4:	697b      	ldr	r3, [r7, #20]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d1e6      	bne.n	80123b8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80123ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80123ec:	2200      	movs	r2, #0
 80123ee:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80123f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80123f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123f4:	2b01      	cmp	r3, #1
 80123f6:	d107      	bne.n	8012408 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80123f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80123fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80123fe:	4619      	mov	r1, r3
 8012400:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8012402:	f7ff f969 	bl	80116d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012406:	e002      	b.n	801240e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8012408:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801240a:	f7ff f947 	bl	801169c <HAL_UART_RxCpltCallback>
}
 801240e:	bf00      	nop
 8012410:	3770      	adds	r7, #112	; 0x70
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}

08012416 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012416:	b580      	push	{r7, lr}
 8012418:	b084      	sub	sp, #16
 801241a:	af00      	add	r7, sp, #0
 801241c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012422:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	2201      	movs	r2, #1
 8012428:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801242e:	2b01      	cmp	r3, #1
 8012430:	d109      	bne.n	8012446 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012438:	085b      	lsrs	r3, r3, #1
 801243a:	b29b      	uxth	r3, r3
 801243c:	4619      	mov	r1, r3
 801243e:	68f8      	ldr	r0, [r7, #12]
 8012440:	f7ff f94a 	bl	80116d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012444:	e002      	b.n	801244c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8012446:	68f8      	ldr	r0, [r7, #12]
 8012448:	f7ff f932 	bl	80116b0 <HAL_UART_RxHalfCpltCallback>
}
 801244c:	bf00      	nop
 801244e:	3710      	adds	r7, #16
 8012450:	46bd      	mov	sp, r7
 8012452:	bd80      	pop	{r7, pc}

08012454 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b086      	sub	sp, #24
 8012458:	af00      	add	r7, sp, #0
 801245a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012460:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8012462:	697b      	ldr	r3, [r7, #20]
 8012464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012468:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801246a:	697b      	ldr	r3, [r7, #20]
 801246c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012470:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8012472:	697b      	ldr	r3, [r7, #20]
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	689b      	ldr	r3, [r3, #8]
 8012478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801247c:	2b80      	cmp	r3, #128	; 0x80
 801247e:	d109      	bne.n	8012494 <UART_DMAError+0x40>
 8012480:	693b      	ldr	r3, [r7, #16]
 8012482:	2b21      	cmp	r3, #33	; 0x21
 8012484:	d106      	bne.n	8012494 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8012486:	697b      	ldr	r3, [r7, #20]
 8012488:	2200      	movs	r2, #0
 801248a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 801248e:	6978      	ldr	r0, [r7, #20]
 8012490:	f7ff fe84 	bl	801219c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8012494:	697b      	ldr	r3, [r7, #20]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	689b      	ldr	r3, [r3, #8]
 801249a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801249e:	2b40      	cmp	r3, #64	; 0x40
 80124a0:	d109      	bne.n	80124b6 <UART_DMAError+0x62>
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	2b22      	cmp	r3, #34	; 0x22
 80124a6:	d106      	bne.n	80124b6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80124a8:	697b      	ldr	r3, [r7, #20]
 80124aa:	2200      	movs	r2, #0
 80124ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80124b0:	6978      	ldr	r0, [r7, #20]
 80124b2:	f7ff feb4 	bl	801221e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80124b6:	697b      	ldr	r3, [r7, #20]
 80124b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124bc:	f043 0210 	orr.w	r2, r3, #16
 80124c0:	697b      	ldr	r3, [r7, #20]
 80124c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80124c6:	6978      	ldr	r0, [r7, #20]
 80124c8:	f7ff f8fc 	bl	80116c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80124cc:	bf00      	nop
 80124ce:	3718      	adds	r7, #24
 80124d0:	46bd      	mov	sp, r7
 80124d2:	bd80      	pop	{r7, pc}

080124d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b084      	sub	sp, #16
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	2200      	movs	r2, #0
 80124e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	2200      	movs	r2, #0
 80124ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80124f2:	68f8      	ldr	r0, [r7, #12]
 80124f4:	f7ff f8e6 	bl	80116c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80124f8:	bf00      	nop
 80124fa:	3710      	adds	r7, #16
 80124fc:	46bd      	mov	sp, r7
 80124fe:	bd80      	pop	{r7, pc}

08012500 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012500:	b580      	push	{r7, lr}
 8012502:	b088      	sub	sp, #32
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	e853 3f00 	ldrex	r3, [r3]
 8012514:	60bb      	str	r3, [r7, #8]
   return(result);
 8012516:	68bb      	ldr	r3, [r7, #8]
 8012518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801251c:	61fb      	str	r3, [r7, #28]
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	461a      	mov	r2, r3
 8012524:	69fb      	ldr	r3, [r7, #28]
 8012526:	61bb      	str	r3, [r7, #24]
 8012528:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801252a:	6979      	ldr	r1, [r7, #20]
 801252c:	69ba      	ldr	r2, [r7, #24]
 801252e:	e841 2300 	strex	r3, r2, [r1]
 8012532:	613b      	str	r3, [r7, #16]
   return(result);
 8012534:	693b      	ldr	r3, [r7, #16]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d1e6      	bne.n	8012508 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	2220      	movs	r2, #32
 801253e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	2200      	movs	r2, #0
 8012546:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012548:	6878      	ldr	r0, [r7, #4]
 801254a:	f7ff f89d 	bl	8011688 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801254e:	bf00      	nop
 8012550:	3720      	adds	r7, #32
 8012552:	46bd      	mov	sp, r7
 8012554:	bd80      	pop	{r7, pc}

08012556 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012556:	b480      	push	{r7}
 8012558:	b083      	sub	sp, #12
 801255a:	af00      	add	r7, sp, #0
 801255c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801255e:	bf00      	nop
 8012560:	370c      	adds	r7, #12
 8012562:	46bd      	mov	sp, r7
 8012564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012568:	4770      	bx	lr

0801256a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801256a:	b480      	push	{r7}
 801256c:	b083      	sub	sp, #12
 801256e:	af00      	add	r7, sp, #0
 8012570:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012572:	bf00      	nop
 8012574:	370c      	adds	r7, #12
 8012576:	46bd      	mov	sp, r7
 8012578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801257c:	4770      	bx	lr

0801257e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801257e:	b480      	push	{r7}
 8012580:	b083      	sub	sp, #12
 8012582:	af00      	add	r7, sp, #0
 8012584:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012586:	bf00      	nop
 8012588:	370c      	adds	r7, #12
 801258a:	46bd      	mov	sp, r7
 801258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012590:	4770      	bx	lr

08012592 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012592:	b480      	push	{r7}
 8012594:	b085      	sub	sp, #20
 8012596:	af00      	add	r7, sp, #0
 8012598:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80125a0:	2b01      	cmp	r3, #1
 80125a2:	d101      	bne.n	80125a8 <HAL_UARTEx_DisableFifoMode+0x16>
 80125a4:	2302      	movs	r3, #2
 80125a6:	e027      	b.n	80125f8 <HAL_UARTEx_DisableFifoMode+0x66>
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	2201      	movs	r2, #1
 80125ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	2224      	movs	r2, #36	; 0x24
 80125b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	681a      	ldr	r2, [r3, #0]
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	f022 0201 	bic.w	r2, r2, #1
 80125ce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80125d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	2200      	movs	r2, #0
 80125dc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	68fa      	ldr	r2, [r7, #12]
 80125e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	2220      	movs	r2, #32
 80125ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	2200      	movs	r2, #0
 80125f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80125f6:	2300      	movs	r3, #0
}
 80125f8:	4618      	mov	r0, r3
 80125fa:	3714      	adds	r7, #20
 80125fc:	46bd      	mov	sp, r7
 80125fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012602:	4770      	bx	lr

08012604 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012604:	b580      	push	{r7, lr}
 8012606:	b084      	sub	sp, #16
 8012608:	af00      	add	r7, sp, #0
 801260a:	6078      	str	r0, [r7, #4]
 801260c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012614:	2b01      	cmp	r3, #1
 8012616:	d101      	bne.n	801261c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012618:	2302      	movs	r3, #2
 801261a:	e02d      	b.n	8012678 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	2201      	movs	r2, #1
 8012620:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	2224      	movs	r2, #36	; 0x24
 8012628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	681a      	ldr	r2, [r3, #0]
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	f022 0201 	bic.w	r2, r2, #1
 8012642:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	689b      	ldr	r3, [r3, #8]
 801264a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	683a      	ldr	r2, [r7, #0]
 8012654:	430a      	orrs	r2, r1
 8012656:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012658:	6878      	ldr	r0, [r7, #4]
 801265a:	f000 f84f 	bl	80126fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	68fa      	ldr	r2, [r7, #12]
 8012664:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	2220      	movs	r2, #32
 801266a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	2200      	movs	r2, #0
 8012672:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012676:	2300      	movs	r3, #0
}
 8012678:	4618      	mov	r0, r3
 801267a:	3710      	adds	r7, #16
 801267c:	46bd      	mov	sp, r7
 801267e:	bd80      	pop	{r7, pc}

08012680 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012680:	b580      	push	{r7, lr}
 8012682:	b084      	sub	sp, #16
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012690:	2b01      	cmp	r3, #1
 8012692:	d101      	bne.n	8012698 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012694:	2302      	movs	r3, #2
 8012696:	e02d      	b.n	80126f4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	2201      	movs	r2, #1
 801269c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	2224      	movs	r2, #36	; 0x24
 80126a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	681a      	ldr	r2, [r3, #0]
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	f022 0201 	bic.w	r2, r2, #1
 80126be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	689b      	ldr	r3, [r3, #8]
 80126c6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	683a      	ldr	r2, [r7, #0]
 80126d0:	430a      	orrs	r2, r1
 80126d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80126d4:	6878      	ldr	r0, [r7, #4]
 80126d6:	f000 f811 	bl	80126fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	68fa      	ldr	r2, [r7, #12]
 80126e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	2220      	movs	r2, #32
 80126e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	2200      	movs	r2, #0
 80126ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80126f2:	2300      	movs	r3, #0
}
 80126f4:	4618      	mov	r0, r3
 80126f6:	3710      	adds	r7, #16
 80126f8:	46bd      	mov	sp, r7
 80126fa:	bd80      	pop	{r7, pc}

080126fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80126fc:	b480      	push	{r7}
 80126fe:	b085      	sub	sp, #20
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012708:	2b00      	cmp	r3, #0
 801270a:	d108      	bne.n	801271e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	2201      	movs	r2, #1
 8012710:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	2201      	movs	r2, #1
 8012718:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801271c:	e031      	b.n	8012782 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801271e:	2308      	movs	r3, #8
 8012720:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012722:	2308      	movs	r3, #8
 8012724:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	689b      	ldr	r3, [r3, #8]
 801272c:	0e5b      	lsrs	r3, r3, #25
 801272e:	b2db      	uxtb	r3, r3
 8012730:	f003 0307 	and.w	r3, r3, #7
 8012734:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	689b      	ldr	r3, [r3, #8]
 801273c:	0f5b      	lsrs	r3, r3, #29
 801273e:	b2db      	uxtb	r3, r3
 8012740:	f003 0307 	and.w	r3, r3, #7
 8012744:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012746:	7bbb      	ldrb	r3, [r7, #14]
 8012748:	7b3a      	ldrb	r2, [r7, #12]
 801274a:	4911      	ldr	r1, [pc, #68]	; (8012790 <UARTEx_SetNbDataToProcess+0x94>)
 801274c:	5c8a      	ldrb	r2, [r1, r2]
 801274e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012752:	7b3a      	ldrb	r2, [r7, #12]
 8012754:	490f      	ldr	r1, [pc, #60]	; (8012794 <UARTEx_SetNbDataToProcess+0x98>)
 8012756:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012758:	fb93 f3f2 	sdiv	r3, r3, r2
 801275c:	b29a      	uxth	r2, r3
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012764:	7bfb      	ldrb	r3, [r7, #15]
 8012766:	7b7a      	ldrb	r2, [r7, #13]
 8012768:	4909      	ldr	r1, [pc, #36]	; (8012790 <UARTEx_SetNbDataToProcess+0x94>)
 801276a:	5c8a      	ldrb	r2, [r1, r2]
 801276c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012770:	7b7a      	ldrb	r2, [r7, #13]
 8012772:	4908      	ldr	r1, [pc, #32]	; (8012794 <UARTEx_SetNbDataToProcess+0x98>)
 8012774:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012776:	fb93 f3f2 	sdiv	r3, r3, r2
 801277a:	b29a      	uxth	r2, r3
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012782:	bf00      	nop
 8012784:	3714      	adds	r7, #20
 8012786:	46bd      	mov	sp, r7
 8012788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278c:	4770      	bx	lr
 801278e:	bf00      	nop
 8012790:	0801d154 	.word	0x0801d154
 8012794:	0801d15c 	.word	0x0801d15c

08012798 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012798:	b084      	sub	sp, #16
 801279a:	b480      	push	{r7}
 801279c:	b085      	sub	sp, #20
 801279e:	af00      	add	r7, sp, #0
 80127a0:	6078      	str	r0, [r7, #4]
 80127a2:	f107 001c 	add.w	r0, r7, #28
 80127a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80127aa:	2300      	movs	r3, #0
 80127ac:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 80127ae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 80127b0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80127b2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80127b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 80127b6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80127b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 80127ba:	431a      	orrs	r2, r3
             Init.ClockDiv
 80127bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 80127be:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80127c0:	68fa      	ldr	r2, [r7, #12]
 80127c2:	4313      	orrs	r3, r2
 80127c4:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	685a      	ldr	r2, [r3, #4]
 80127ca:	4b07      	ldr	r3, [pc, #28]	; (80127e8 <SDMMC_Init+0x50>)
 80127cc:	4013      	ands	r3, r2
 80127ce:	68fa      	ldr	r2, [r7, #12]
 80127d0:	431a      	orrs	r2, r3
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80127d6:	2300      	movs	r3, #0
}
 80127d8:	4618      	mov	r0, r3
 80127da:	3714      	adds	r7, #20
 80127dc:	46bd      	mov	sp, r7
 80127de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e2:	b004      	add	sp, #16
 80127e4:	4770      	bx	lr
 80127e6:	bf00      	nop
 80127e8:	ffc02c00 	.word	0xffc02c00

080127ec <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80127ec:	b480      	push	{r7}
 80127ee:	b083      	sub	sp, #12
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80127fa:	4618      	mov	r0, r3
 80127fc:	370c      	adds	r7, #12
 80127fe:	46bd      	mov	sp, r7
 8012800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012804:	4770      	bx	lr

08012806 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8012806:	b480      	push	{r7}
 8012808:	b083      	sub	sp, #12
 801280a:	af00      	add	r7, sp, #0
 801280c:	6078      	str	r0, [r7, #4]
 801280e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8012810:	683b      	ldr	r3, [r7, #0]
 8012812:	681a      	ldr	r2, [r3, #0]
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801281a:	2300      	movs	r3, #0
}
 801281c:	4618      	mov	r0, r3
 801281e:	370c      	adds	r7, #12
 8012820:	46bd      	mov	sp, r7
 8012822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012826:	4770      	bx	lr

08012828 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8012828:	b580      	push	{r7, lr}
 801282a:	b082      	sub	sp, #8
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	f043 0203 	orr.w	r2, r3, #3
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 801283c:	2002      	movs	r0, #2
 801283e:	f7f4 fe39 	bl	80074b4 <HAL_Delay>

  return HAL_OK;
 8012842:	2300      	movs	r3, #0
}
 8012844:	4618      	mov	r0, r3
 8012846:	3708      	adds	r7, #8
 8012848:	46bd      	mov	sp, r7
 801284a:	bd80      	pop	{r7, pc}

0801284c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 801284c:	b480      	push	{r7}
 801284e:	b083      	sub	sp, #12
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	f003 0303 	and.w	r3, r3, #3
}
 801285c:	4618      	mov	r0, r3
 801285e:	370c      	adds	r7, #12
 8012860:	46bd      	mov	sp, r7
 8012862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012866:	4770      	bx	lr

08012868 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012868:	b480      	push	{r7}
 801286a:	b085      	sub	sp, #20
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
 8012870:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012872:	2300      	movs	r3, #0
 8012874:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012876:	683b      	ldr	r3, [r7, #0]
 8012878:	681a      	ldr	r2, [r3, #0]
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801287e:	683b      	ldr	r3, [r7, #0]
 8012880:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8012882:	683b      	ldr	r3, [r7, #0]
 8012884:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012886:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8012888:	683b      	ldr	r3, [r7, #0]
 801288a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 801288c:	431a      	orrs	r2, r3
                       Command->CPSM);
 801288e:	683b      	ldr	r3, [r7, #0]
 8012890:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8012892:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012894:	68fa      	ldr	r2, [r7, #12]
 8012896:	4313      	orrs	r3, r2
 8012898:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	68da      	ldr	r2, [r3, #12]
 801289e:	4b06      	ldr	r3, [pc, #24]	; (80128b8 <SDMMC_SendCommand+0x50>)
 80128a0:	4013      	ands	r3, r2
 80128a2:	68fa      	ldr	r2, [r7, #12]
 80128a4:	431a      	orrs	r2, r3
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80128aa:	2300      	movs	r3, #0
}
 80128ac:	4618      	mov	r0, r3
 80128ae:	3714      	adds	r7, #20
 80128b0:	46bd      	mov	sp, r7
 80128b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b6:	4770      	bx	lr
 80128b8:	fffee0c0 	.word	0xfffee0c0

080128bc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80128bc:	b480      	push	{r7}
 80128be:	b083      	sub	sp, #12
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	691b      	ldr	r3, [r3, #16]
 80128c8:	b2db      	uxtb	r3, r3
}
 80128ca:	4618      	mov	r0, r3
 80128cc:	370c      	adds	r7, #12
 80128ce:	46bd      	mov	sp, r7
 80128d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d4:	4770      	bx	lr

080128d6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80128d6:	b480      	push	{r7}
 80128d8:	b085      	sub	sp, #20
 80128da:	af00      	add	r7, sp, #0
 80128dc:	6078      	str	r0, [r7, #4]
 80128de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	3314      	adds	r3, #20
 80128e4:	461a      	mov	r2, r3
 80128e6:	683b      	ldr	r3, [r7, #0]
 80128e8:	4413      	add	r3, r2
 80128ea:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	681b      	ldr	r3, [r3, #0]
}
 80128f0:	4618      	mov	r0, r3
 80128f2:	3714      	adds	r7, #20
 80128f4:	46bd      	mov	sp, r7
 80128f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fa:	4770      	bx	lr

080128fc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80128fc:	b480      	push	{r7}
 80128fe:	b085      	sub	sp, #20
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
 8012904:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012906:	2300      	movs	r3, #0
 8012908:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801290a:	683b      	ldr	r3, [r7, #0]
 801290c:	681a      	ldr	r2, [r3, #0]
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8012912:	683b      	ldr	r3, [r7, #0]
 8012914:	685a      	ldr	r2, [r3, #4]
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801291a:	683b      	ldr	r3, [r7, #0]
 801291c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801291e:	683b      	ldr	r3, [r7, #0]
 8012920:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012922:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8012924:	683b      	ldr	r3, [r7, #0]
 8012926:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8012928:	431a      	orrs	r2, r3
                       Data->DPSM);
 801292a:	683b      	ldr	r3, [r7, #0]
 801292c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801292e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012930:	68fa      	ldr	r2, [r7, #12]
 8012932:	4313      	orrs	r3, r2
 8012934:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801293a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	431a      	orrs	r2, r3
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8012946:	2300      	movs	r3, #0

}
 8012948:	4618      	mov	r0, r3
 801294a:	3714      	adds	r7, #20
 801294c:	46bd      	mov	sp, r7
 801294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012952:	4770      	bx	lr

08012954 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b088      	sub	sp, #32
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]
 801295c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801295e:	683b      	ldr	r3, [r7, #0]
 8012960:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8012962:	2310      	movs	r3, #16
 8012964:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012966:	f44f 7380 	mov.w	r3, #256	; 0x100
 801296a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801296c:	2300      	movs	r3, #0
 801296e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012974:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012976:	f107 0308 	add.w	r3, r7, #8
 801297a:	4619      	mov	r1, r3
 801297c:	6878      	ldr	r0, [r7, #4]
 801297e:	f7ff ff73 	bl	8012868 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8012982:	f241 3288 	movw	r2, #5000	; 0x1388
 8012986:	2110      	movs	r1, #16
 8012988:	6878      	ldr	r0, [r7, #4]
 801298a:	f000 fa7b 	bl	8012e84 <SDMMC_GetCmdResp1>
 801298e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012990:	69fb      	ldr	r3, [r7, #28]
}
 8012992:	4618      	mov	r0, r3
 8012994:	3720      	adds	r7, #32
 8012996:	46bd      	mov	sp, r7
 8012998:	bd80      	pop	{r7, pc}

0801299a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801299a:	b580      	push	{r7, lr}
 801299c:	b088      	sub	sp, #32
 801299e:	af00      	add	r7, sp, #0
 80129a0:	6078      	str	r0, [r7, #4]
 80129a2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80129a4:	683b      	ldr	r3, [r7, #0]
 80129a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80129a8:	2311      	movs	r3, #17
 80129aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80129ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80129b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80129b2:	2300      	movs	r3, #0
 80129b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80129b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80129ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80129bc:	f107 0308 	add.w	r3, r7, #8
 80129c0:	4619      	mov	r1, r3
 80129c2:	6878      	ldr	r0, [r7, #4]
 80129c4:	f7ff ff50 	bl	8012868 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80129c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80129cc:	2111      	movs	r1, #17
 80129ce:	6878      	ldr	r0, [r7, #4]
 80129d0:	f000 fa58 	bl	8012e84 <SDMMC_GetCmdResp1>
 80129d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80129d6:	69fb      	ldr	r3, [r7, #28]
}
 80129d8:	4618      	mov	r0, r3
 80129da:	3720      	adds	r7, #32
 80129dc:	46bd      	mov	sp, r7
 80129de:	bd80      	pop	{r7, pc}

080129e0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b088      	sub	sp, #32
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
 80129e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80129ea:	683b      	ldr	r3, [r7, #0]
 80129ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80129ee:	2312      	movs	r3, #18
 80129f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80129f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80129f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80129f8:	2300      	movs	r3, #0
 80129fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80129fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012a02:	f107 0308 	add.w	r3, r7, #8
 8012a06:	4619      	mov	r1, r3
 8012a08:	6878      	ldr	r0, [r7, #4]
 8012a0a:	f7ff ff2d 	bl	8012868 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a12:	2112      	movs	r1, #18
 8012a14:	6878      	ldr	r0, [r7, #4]
 8012a16:	f000 fa35 	bl	8012e84 <SDMMC_GetCmdResp1>
 8012a1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012a1c:	69fb      	ldr	r3, [r7, #28]
}
 8012a1e:	4618      	mov	r0, r3
 8012a20:	3720      	adds	r7, #32
 8012a22:	46bd      	mov	sp, r7
 8012a24:	bd80      	pop	{r7, pc}

08012a26 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012a26:	b580      	push	{r7, lr}
 8012a28:	b088      	sub	sp, #32
 8012a2a:	af00      	add	r7, sp, #0
 8012a2c:	6078      	str	r0, [r7, #4]
 8012a2e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012a30:	683b      	ldr	r3, [r7, #0]
 8012a32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8012a34:	2318      	movs	r3, #24
 8012a36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012a38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012a3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012a3e:	2300      	movs	r3, #0
 8012a40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012a42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012a48:	f107 0308 	add.w	r3, r7, #8
 8012a4c:	4619      	mov	r1, r3
 8012a4e:	6878      	ldr	r0, [r7, #4]
 8012a50:	f7ff ff0a 	bl	8012868 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a58:	2118      	movs	r1, #24
 8012a5a:	6878      	ldr	r0, [r7, #4]
 8012a5c:	f000 fa12 	bl	8012e84 <SDMMC_GetCmdResp1>
 8012a60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012a62:	69fb      	ldr	r3, [r7, #28]
}
 8012a64:	4618      	mov	r0, r3
 8012a66:	3720      	adds	r7, #32
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	bd80      	pop	{r7, pc}

08012a6c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b088      	sub	sp, #32
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
 8012a74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012a76:	683b      	ldr	r3, [r7, #0]
 8012a78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012a7a:	2319      	movs	r3, #25
 8012a7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012a82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012a84:	2300      	movs	r3, #0
 8012a86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012a8e:	f107 0308 	add.w	r3, r7, #8
 8012a92:	4619      	mov	r1, r3
 8012a94:	6878      	ldr	r0, [r7, #4]
 8012a96:	f7ff fee7 	bl	8012868 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a9e:	2119      	movs	r1, #25
 8012aa0:	6878      	ldr	r0, [r7, #4]
 8012aa2:	f000 f9ef 	bl	8012e84 <SDMMC_GetCmdResp1>
 8012aa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012aa8:	69fb      	ldr	r3, [r7, #28]
}
 8012aaa:	4618      	mov	r0, r3
 8012aac:	3720      	adds	r7, #32
 8012aae:	46bd      	mov	sp, r7
 8012ab0:	bd80      	pop	{r7, pc}
	...

08012ab4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b088      	sub	sp, #32
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012abc:	2300      	movs	r3, #0
 8012abe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012ac0:	230c      	movs	r3, #12
 8012ac2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012ac8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012aca:	2300      	movs	r3, #0
 8012acc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012ace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012ad2:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	68db      	ldr	r3, [r3, #12]
 8012ad8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	68db      	ldr	r3, [r3, #12]
 8012ae4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012aec:	f107 0308 	add.w	r3, r7, #8
 8012af0:	4619      	mov	r1, r3
 8012af2:	6878      	ldr	r0, [r7, #4]
 8012af4:	f7ff feb8 	bl	8012868 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8012af8:	4a08      	ldr	r2, [pc, #32]	; (8012b1c <SDMMC_CmdStopTransfer+0x68>)
 8012afa:	210c      	movs	r1, #12
 8012afc:	6878      	ldr	r0, [r7, #4]
 8012afe:	f000 f9c1 	bl	8012e84 <SDMMC_GetCmdResp1>
 8012b02:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	68db      	ldr	r3, [r3, #12]
 8012b08:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8012b10:	69fb      	ldr	r3, [r7, #28]
}
 8012b12:	4618      	mov	r0, r3
 8012b14:	3720      	adds	r7, #32
 8012b16:	46bd      	mov	sp, r7
 8012b18:	bd80      	pop	{r7, pc}
 8012b1a:	bf00      	nop
 8012b1c:	05f5e100 	.word	0x05f5e100

08012b20 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b08a      	sub	sp, #40	; 0x28
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	60f8      	str	r0, [r7, #12]
 8012b28:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012b2c:	683b      	ldr	r3, [r7, #0]
 8012b2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8012b30:	2307      	movs	r3, #7
 8012b32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012b34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012b38:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012b42:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012b44:	f107 0310 	add.w	r3, r7, #16
 8012b48:	4619      	mov	r1, r3
 8012b4a:	68f8      	ldr	r0, [r7, #12]
 8012b4c:	f7ff fe8c 	bl	8012868 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8012b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8012b54:	2107      	movs	r1, #7
 8012b56:	68f8      	ldr	r0, [r7, #12]
 8012b58:	f000 f994 	bl	8012e84 <SDMMC_GetCmdResp1>
 8012b5c:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8012b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012b60:	4618      	mov	r0, r3
 8012b62:	3728      	adds	r7, #40	; 0x28
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd80      	pop	{r7, pc}

08012b68 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b088      	sub	sp, #32
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012b70:	2300      	movs	r3, #0
 8012b72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8012b74:	2300      	movs	r3, #0
 8012b76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8012b78:	2300      	movs	r3, #0
 8012b7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012b80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012b84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012b86:	f107 0308 	add.w	r3, r7, #8
 8012b8a:	4619      	mov	r1, r3
 8012b8c:	6878      	ldr	r0, [r7, #4]
 8012b8e:	f7ff fe6b 	bl	8012868 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012b92:	6878      	ldr	r0, [r7, #4]
 8012b94:	f000 fbb8 	bl	8013308 <SDMMC_GetCmdError>
 8012b98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012b9a:	69fb      	ldr	r3, [r7, #28]
}
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	3720      	adds	r7, #32
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	bd80      	pop	{r7, pc}

08012ba4 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b088      	sub	sp, #32
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8012bac:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8012bb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012bb2:	2308      	movs	r3, #8
 8012bb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012bb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012bba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012bc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012bc6:	f107 0308 	add.w	r3, r7, #8
 8012bca:	4619      	mov	r1, r3
 8012bcc:	6878      	ldr	r0, [r7, #4]
 8012bce:	f7ff fe4b 	bl	8012868 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8012bd2:	6878      	ldr	r0, [r7, #4]
 8012bd4:	f000 fb4a 	bl	801326c <SDMMC_GetCmdResp7>
 8012bd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012bda:	69fb      	ldr	r3, [r7, #28]
}
 8012bdc:	4618      	mov	r0, r3
 8012bde:	3720      	adds	r7, #32
 8012be0:	46bd      	mov	sp, r7
 8012be2:	bd80      	pop	{r7, pc}

08012be4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b088      	sub	sp, #32
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	6078      	str	r0, [r7, #4]
 8012bec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012bee:	683b      	ldr	r3, [r7, #0]
 8012bf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8012bf2:	2337      	movs	r3, #55	; 0x37
 8012bf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012bf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012bfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012c04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c06:	f107 0308 	add.w	r3, r7, #8
 8012c0a:	4619      	mov	r1, r3
 8012c0c:	6878      	ldr	r0, [r7, #4]
 8012c0e:	f7ff fe2b 	bl	8012868 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8012c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c16:	2137      	movs	r1, #55	; 0x37
 8012c18:	6878      	ldr	r0, [r7, #4]
 8012c1a:	f000 f933 	bl	8012e84 <SDMMC_GetCmdResp1>
 8012c1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012c20:	69fb      	ldr	r3, [r7, #28]
}
 8012c22:	4618      	mov	r0, r3
 8012c24:	3720      	adds	r7, #32
 8012c26:	46bd      	mov	sp, r7
 8012c28:	bd80      	pop	{r7, pc}

08012c2a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012c2a:	b580      	push	{r7, lr}
 8012c2c:	b088      	sub	sp, #32
 8012c2e:	af00      	add	r7, sp, #0
 8012c30:	6078      	str	r0, [r7, #4]
 8012c32:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8012c34:	683b      	ldr	r3, [r7, #0]
 8012c36:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012c38:	2329      	movs	r3, #41	; 0x29
 8012c3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012c3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012c40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012c42:	2300      	movs	r3, #0
 8012c44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012c4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c4c:	f107 0308 	add.w	r3, r7, #8
 8012c50:	4619      	mov	r1, r3
 8012c52:	6878      	ldr	r0, [r7, #4]
 8012c54:	f7ff fe08 	bl	8012868 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8012c58:	6878      	ldr	r0, [r7, #4]
 8012c5a:	f000 fa4f 	bl	80130fc <SDMMC_GetCmdResp3>
 8012c5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012c60:	69fb      	ldr	r3, [r7, #28]
}
 8012c62:	4618      	mov	r0, r3
 8012c64:	3720      	adds	r7, #32
 8012c66:	46bd      	mov	sp, r7
 8012c68:	bd80      	pop	{r7, pc}

08012c6a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012c6a:	b580      	push	{r7, lr}
 8012c6c:	b088      	sub	sp, #32
 8012c6e:	af00      	add	r7, sp, #0
 8012c70:	6078      	str	r0, [r7, #4]
 8012c72:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012c78:	2306      	movs	r3, #6
 8012c7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012c80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012c82:	2300      	movs	r3, #0
 8012c84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012c8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c8c:	f107 0308 	add.w	r3, r7, #8
 8012c90:	4619      	mov	r1, r3
 8012c92:	6878      	ldr	r0, [r7, #4]
 8012c94:	f7ff fde8 	bl	8012868 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c9c:	2106      	movs	r1, #6
 8012c9e:	6878      	ldr	r0, [r7, #4]
 8012ca0:	f000 f8f0 	bl	8012e84 <SDMMC_GetCmdResp1>
 8012ca4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ca6:	69fb      	ldr	r3, [r7, #28]
}
 8012ca8:	4618      	mov	r0, r3
 8012caa:	3720      	adds	r7, #32
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bd80      	pop	{r7, pc}

08012cb0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b088      	sub	sp, #32
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012cb8:	2300      	movs	r3, #0
 8012cba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012cbc:	2333      	movs	r3, #51	; 0x33
 8012cbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012cc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012cc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012cce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012cd0:	f107 0308 	add.w	r3, r7, #8
 8012cd4:	4619      	mov	r1, r3
 8012cd6:	6878      	ldr	r0, [r7, #4]
 8012cd8:	f7ff fdc6 	bl	8012868 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8012cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ce0:	2133      	movs	r1, #51	; 0x33
 8012ce2:	6878      	ldr	r0, [r7, #4]
 8012ce4:	f000 f8ce 	bl	8012e84 <SDMMC_GetCmdResp1>
 8012ce8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012cea:	69fb      	ldr	r3, [r7, #28]
}
 8012cec:	4618      	mov	r0, r3
 8012cee:	3720      	adds	r7, #32
 8012cf0:	46bd      	mov	sp, r7
 8012cf2:	bd80      	pop	{r7, pc}

08012cf4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8012cf4:	b580      	push	{r7, lr}
 8012cf6:	b088      	sub	sp, #32
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8012cfc:	2300      	movs	r3, #0
 8012cfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012d00:	2302      	movs	r3, #2
 8012d02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012d04:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012d08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012d0a:	2300      	movs	r3, #0
 8012d0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012d12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012d14:	f107 0308 	add.w	r3, r7, #8
 8012d18:	4619      	mov	r1, r3
 8012d1a:	6878      	ldr	r0, [r7, #4]
 8012d1c:	f7ff fda4 	bl	8012868 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012d20:	6878      	ldr	r0, [r7, #4]
 8012d22:	f000 f9a1 	bl	8013068 <SDMMC_GetCmdResp2>
 8012d26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012d28:	69fb      	ldr	r3, [r7, #28]
}
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	3720      	adds	r7, #32
 8012d2e:	46bd      	mov	sp, r7
 8012d30:	bd80      	pop	{r7, pc}

08012d32 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012d32:	b580      	push	{r7, lr}
 8012d34:	b088      	sub	sp, #32
 8012d36:	af00      	add	r7, sp, #0
 8012d38:	6078      	str	r0, [r7, #4]
 8012d3a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012d3c:	683b      	ldr	r3, [r7, #0]
 8012d3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012d40:	2309      	movs	r3, #9
 8012d42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012d44:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012d48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012d52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012d54:	f107 0308 	add.w	r3, r7, #8
 8012d58:	4619      	mov	r1, r3
 8012d5a:	6878      	ldr	r0, [r7, #4]
 8012d5c:	f7ff fd84 	bl	8012868 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012d60:	6878      	ldr	r0, [r7, #4]
 8012d62:	f000 f981 	bl	8013068 <SDMMC_GetCmdResp2>
 8012d66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012d68:	69fb      	ldr	r3, [r7, #28]
}
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	3720      	adds	r7, #32
 8012d6e:	46bd      	mov	sp, r7
 8012d70:	bd80      	pop	{r7, pc}

08012d72 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012d72:	b580      	push	{r7, lr}
 8012d74:	b088      	sub	sp, #32
 8012d76:	af00      	add	r7, sp, #0
 8012d78:	6078      	str	r0, [r7, #4]
 8012d7a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012d7c:	2300      	movs	r3, #0
 8012d7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012d80:	2303      	movs	r3, #3
 8012d82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012d84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012d88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012d92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012d94:	f107 0308 	add.w	r3, r7, #8
 8012d98:	4619      	mov	r1, r3
 8012d9a:	6878      	ldr	r0, [r7, #4]
 8012d9c:	f7ff fd64 	bl	8012868 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8012da0:	683a      	ldr	r2, [r7, #0]
 8012da2:	2103      	movs	r1, #3
 8012da4:	6878      	ldr	r0, [r7, #4]
 8012da6:	f000 f9e9 	bl	801317c <SDMMC_GetCmdResp6>
 8012daa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012dac:	69fb      	ldr	r3, [r7, #28]
}
 8012dae:	4618      	mov	r0, r3
 8012db0:	3720      	adds	r7, #32
 8012db2:	46bd      	mov	sp, r7
 8012db4:	bd80      	pop	{r7, pc}

08012db6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012db6:	b580      	push	{r7, lr}
 8012db8:	b088      	sub	sp, #32
 8012dba:	af00      	add	r7, sp, #0
 8012dbc:	6078      	str	r0, [r7, #4]
 8012dbe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012dc0:	683b      	ldr	r3, [r7, #0]
 8012dc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8012dc4:	230d      	movs	r3, #13
 8012dc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012dc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012dcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012dce:	2300      	movs	r3, #0
 8012dd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012dd6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012dd8:	f107 0308 	add.w	r3, r7, #8
 8012ddc:	4619      	mov	r1, r3
 8012dde:	6878      	ldr	r0, [r7, #4]
 8012de0:	f7ff fd42 	bl	8012868 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8012de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8012de8:	210d      	movs	r1, #13
 8012dea:	6878      	ldr	r0, [r7, #4]
 8012dec:	f000 f84a 	bl	8012e84 <SDMMC_GetCmdResp1>
 8012df0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012df2:	69fb      	ldr	r3, [r7, #28]
}
 8012df4:	4618      	mov	r0, r3
 8012df6:	3720      	adds	r7, #32
 8012df8:	46bd      	mov	sp, r7
 8012dfa:	bd80      	pop	{r7, pc}

08012dfc <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b088      	sub	sp, #32
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012e04:	2300      	movs	r3, #0
 8012e06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8012e08:	230d      	movs	r3, #13
 8012e0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012e0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012e10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012e12:	2300      	movs	r3, #0
 8012e14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012e1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012e1c:	f107 0308 	add.w	r3, r7, #8
 8012e20:	4619      	mov	r1, r3
 8012e22:	6878      	ldr	r0, [r7, #4]
 8012e24:	f7ff fd20 	bl	8012868 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8012e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e2c:	210d      	movs	r1, #13
 8012e2e:	6878      	ldr	r0, [r7, #4]
 8012e30:	f000 f828 	bl	8012e84 <SDMMC_GetCmdResp1>
 8012e34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012e36:	69fb      	ldr	r3, [r7, #28]
}
 8012e38:	4618      	mov	r0, r3
 8012e3a:	3720      	adds	r7, #32
 8012e3c:	46bd      	mov	sp, r7
 8012e3e:	bd80      	pop	{r7, pc}

08012e40 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b088      	sub	sp, #32
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8012e48:	2300      	movs	r3, #0
 8012e4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8012e4c:	230b      	movs	r3, #11
 8012e4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012e50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012e54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012e56:	2300      	movs	r3, #0
 8012e58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012e5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012e5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012e60:	f107 0308 	add.w	r3, r7, #8
 8012e64:	4619      	mov	r1, r3
 8012e66:	6878      	ldr	r0, [r7, #4]
 8012e68:	f7ff fcfe 	bl	8012868 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8012e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e70:	210b      	movs	r1, #11
 8012e72:	6878      	ldr	r0, [r7, #4]
 8012e74:	f000 f806 	bl	8012e84 <SDMMC_GetCmdResp1>
 8012e78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012e7a:	69fb      	ldr	r3, [r7, #28]
}
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	3720      	adds	r7, #32
 8012e80:	46bd      	mov	sp, r7
 8012e82:	bd80      	pop	{r7, pc}

08012e84 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012e84:	b580      	push	{r7, lr}
 8012e86:	b088      	sub	sp, #32
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	60f8      	str	r0, [r7, #12]
 8012e8c:	460b      	mov	r3, r1
 8012e8e:	607a      	str	r2, [r7, #4]
 8012e90:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012e92:	4b70      	ldr	r3, [pc, #448]	; (8013054 <SDMMC_GetCmdResp1+0x1d0>)
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	4a70      	ldr	r2, [pc, #448]	; (8013058 <SDMMC_GetCmdResp1+0x1d4>)
 8012e98:	fba2 2303 	umull	r2, r3, r2, r3
 8012e9c:	0a5a      	lsrs	r2, r3, #9
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	fb02 f303 	mul.w	r3, r2, r3
 8012ea4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012ea6:	69fb      	ldr	r3, [r7, #28]
 8012ea8:	1e5a      	subs	r2, r3, #1
 8012eaa:	61fa      	str	r2, [r7, #28]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d102      	bne.n	8012eb6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012eb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012eb4:	e0c9      	b.n	801304a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012eba:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012ebc:	69ba      	ldr	r2, [r7, #24]
 8012ebe:	4b67      	ldr	r3, [pc, #412]	; (801305c <SDMMC_GetCmdResp1+0x1d8>)
 8012ec0:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d0ef      	beq.n	8012ea6 <SDMMC_GetCmdResp1+0x22>
 8012ec6:	69bb      	ldr	r3, [r7, #24]
 8012ec8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d1ea      	bne.n	8012ea6 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ed4:	f003 0304 	and.w	r3, r3, #4
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d004      	beq.n	8012ee6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	2204      	movs	r2, #4
 8012ee0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012ee2:	2304      	movs	r3, #4
 8012ee4:	e0b1      	b.n	801304a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012eea:	f003 0301 	and.w	r3, r3, #1
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d004      	beq.n	8012efc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	2201      	movs	r2, #1
 8012ef6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012ef8:	2301      	movs	r3, #1
 8012efa:	e0a6      	b.n	801304a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	4a58      	ldr	r2, [pc, #352]	; (8013060 <SDMMC_GetCmdResp1+0x1dc>)
 8012f00:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012f02:	68f8      	ldr	r0, [r7, #12]
 8012f04:	f7ff fcda 	bl	80128bc <SDMMC_GetCommandResponse>
 8012f08:	4603      	mov	r3, r0
 8012f0a:	461a      	mov	r2, r3
 8012f0c:	7afb      	ldrb	r3, [r7, #11]
 8012f0e:	4293      	cmp	r3, r2
 8012f10:	d001      	beq.n	8012f16 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012f12:	2301      	movs	r3, #1
 8012f14:	e099      	b.n	801304a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012f16:	2100      	movs	r1, #0
 8012f18:	68f8      	ldr	r0, [r7, #12]
 8012f1a:	f7ff fcdc 	bl	80128d6 <SDMMC_GetResponse>
 8012f1e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012f20:	697a      	ldr	r2, [r7, #20]
 8012f22:	4b50      	ldr	r3, [pc, #320]	; (8013064 <SDMMC_GetCmdResp1+0x1e0>)
 8012f24:	4013      	ands	r3, r2
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d101      	bne.n	8012f2e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	e08d      	b.n	801304a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012f2e:	697b      	ldr	r3, [r7, #20]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	da02      	bge.n	8012f3a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012f34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012f38:	e087      	b.n	801304a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012f3a:	697b      	ldr	r3, [r7, #20]
 8012f3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d001      	beq.n	8012f48 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012f44:	2340      	movs	r3, #64	; 0x40
 8012f46:	e080      	b.n	801304a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012f48:	697b      	ldr	r3, [r7, #20]
 8012f4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d001      	beq.n	8012f56 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012f52:	2380      	movs	r3, #128	; 0x80
 8012f54:	e079      	b.n	801304a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012f56:	697b      	ldr	r3, [r7, #20]
 8012f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d002      	beq.n	8012f66 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012f60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012f64:	e071      	b.n	801304a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012f66:	697b      	ldr	r3, [r7, #20]
 8012f68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d002      	beq.n	8012f76 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012f70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012f74:	e069      	b.n	801304a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012f76:	697b      	ldr	r3, [r7, #20]
 8012f78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d002      	beq.n	8012f86 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012f80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012f84:	e061      	b.n	801304a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012f86:	697b      	ldr	r3, [r7, #20]
 8012f88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d002      	beq.n	8012f96 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012f90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012f94:	e059      	b.n	801304a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012f96:	697b      	ldr	r3, [r7, #20]
 8012f98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d002      	beq.n	8012fa6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012fa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012fa4:	e051      	b.n	801304a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012fa6:	697b      	ldr	r3, [r7, #20]
 8012fa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d002      	beq.n	8012fb6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012fb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012fb4:	e049      	b.n	801304a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012fb6:	697b      	ldr	r3, [r7, #20]
 8012fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d002      	beq.n	8012fc6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012fc0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012fc4:	e041      	b.n	801304a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012fc6:	697b      	ldr	r3, [r7, #20]
 8012fc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d002      	beq.n	8012fd6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012fd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012fd4:	e039      	b.n	801304a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012fd6:	697b      	ldr	r3, [r7, #20]
 8012fd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d002      	beq.n	8012fe6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012fe0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012fe4:	e031      	b.n	801304a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012fe6:	697b      	ldr	r3, [r7, #20]
 8012fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d002      	beq.n	8012ff6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012ff0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012ff4:	e029      	b.n	801304a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012ff6:	697b      	ldr	r3, [r7, #20]
 8012ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d002      	beq.n	8013006 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013000:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013004:	e021      	b.n	801304a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8013006:	697b      	ldr	r3, [r7, #20]
 8013008:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801300c:	2b00      	cmp	r3, #0
 801300e:	d002      	beq.n	8013016 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013010:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8013014:	e019      	b.n	801304a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8013016:	697b      	ldr	r3, [r7, #20]
 8013018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801301c:	2b00      	cmp	r3, #0
 801301e:	d002      	beq.n	8013026 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013020:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013024:	e011      	b.n	801304a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8013026:	697b      	ldr	r3, [r7, #20]
 8013028:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801302c:	2b00      	cmp	r3, #0
 801302e:	d002      	beq.n	8013036 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8013030:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013034:	e009      	b.n	801304a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8013036:	697b      	ldr	r3, [r7, #20]
 8013038:	f003 0308 	and.w	r3, r3, #8
 801303c:	2b00      	cmp	r3, #0
 801303e:	d002      	beq.n	8013046 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8013040:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8013044:	e001      	b.n	801304a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013046:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801304a:	4618      	mov	r0, r3
 801304c:	3720      	adds	r7, #32
 801304e:	46bd      	mov	sp, r7
 8013050:	bd80      	pop	{r7, pc}
 8013052:	bf00      	nop
 8013054:	20000004 	.word	0x20000004
 8013058:	10624dd3 	.word	0x10624dd3
 801305c:	00200045 	.word	0x00200045
 8013060:	002000c5 	.word	0x002000c5
 8013064:	fdffe008 	.word	0xfdffe008

08013068 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8013068:	b480      	push	{r7}
 801306a:	b085      	sub	sp, #20
 801306c:	af00      	add	r7, sp, #0
 801306e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013070:	4b1f      	ldr	r3, [pc, #124]	; (80130f0 <SDMMC_GetCmdResp2+0x88>)
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	4a1f      	ldr	r2, [pc, #124]	; (80130f4 <SDMMC_GetCmdResp2+0x8c>)
 8013076:	fba2 2303 	umull	r2, r3, r2, r3
 801307a:	0a5b      	lsrs	r3, r3, #9
 801307c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013080:	fb02 f303 	mul.w	r3, r2, r3
 8013084:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	1e5a      	subs	r2, r3, #1
 801308a:	60fa      	str	r2, [r7, #12]
 801308c:	2b00      	cmp	r3, #0
 801308e:	d102      	bne.n	8013096 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013090:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013094:	e026      	b.n	80130e4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801309a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801309c:	68bb      	ldr	r3, [r7, #8]
 801309e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d0ef      	beq.n	8013086 <SDMMC_GetCmdResp2+0x1e>
 80130a6:	68bb      	ldr	r3, [r7, #8]
 80130a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d1ea      	bne.n	8013086 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80130b4:	f003 0304 	and.w	r3, r3, #4
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d004      	beq.n	80130c6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	2204      	movs	r2, #4
 80130c0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80130c2:	2304      	movs	r3, #4
 80130c4:	e00e      	b.n	80130e4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80130ca:	f003 0301 	and.w	r3, r3, #1
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d004      	beq.n	80130dc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	2201      	movs	r2, #1
 80130d6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80130d8:	2301      	movs	r3, #1
 80130da:	e003      	b.n	80130e4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	4a06      	ldr	r2, [pc, #24]	; (80130f8 <SDMMC_GetCmdResp2+0x90>)
 80130e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80130e2:	2300      	movs	r3, #0
}
 80130e4:	4618      	mov	r0, r3
 80130e6:	3714      	adds	r7, #20
 80130e8:	46bd      	mov	sp, r7
 80130ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ee:	4770      	bx	lr
 80130f0:	20000004 	.word	0x20000004
 80130f4:	10624dd3 	.word	0x10624dd3
 80130f8:	002000c5 	.word	0x002000c5

080130fc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80130fc:	b480      	push	{r7}
 80130fe:	b085      	sub	sp, #20
 8013100:	af00      	add	r7, sp, #0
 8013102:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013104:	4b1a      	ldr	r3, [pc, #104]	; (8013170 <SDMMC_GetCmdResp3+0x74>)
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	4a1a      	ldr	r2, [pc, #104]	; (8013174 <SDMMC_GetCmdResp3+0x78>)
 801310a:	fba2 2303 	umull	r2, r3, r2, r3
 801310e:	0a5b      	lsrs	r3, r3, #9
 8013110:	f241 3288 	movw	r2, #5000	; 0x1388
 8013114:	fb02 f303 	mul.w	r3, r2, r3
 8013118:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	1e5a      	subs	r2, r3, #1
 801311e:	60fa      	str	r2, [r7, #12]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d102      	bne.n	801312a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013124:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013128:	e01b      	b.n	8013162 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801312e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013130:	68bb      	ldr	r3, [r7, #8]
 8013132:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013136:	2b00      	cmp	r3, #0
 8013138:	d0ef      	beq.n	801311a <SDMMC_GetCmdResp3+0x1e>
 801313a:	68bb      	ldr	r3, [r7, #8]
 801313c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013140:	2b00      	cmp	r3, #0
 8013142:	d1ea      	bne.n	801311a <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013148:	f003 0304 	and.w	r3, r3, #4
 801314c:	2b00      	cmp	r3, #0
 801314e:	d004      	beq.n	801315a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	2204      	movs	r2, #4
 8013154:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013156:	2304      	movs	r3, #4
 8013158:	e003      	b.n	8013162 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	4a06      	ldr	r2, [pc, #24]	; (8013178 <SDMMC_GetCmdResp3+0x7c>)
 801315e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8013160:	2300      	movs	r3, #0
}
 8013162:	4618      	mov	r0, r3
 8013164:	3714      	adds	r7, #20
 8013166:	46bd      	mov	sp, r7
 8013168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801316c:	4770      	bx	lr
 801316e:	bf00      	nop
 8013170:	20000004 	.word	0x20000004
 8013174:	10624dd3 	.word	0x10624dd3
 8013178:	002000c5 	.word	0x002000c5

0801317c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 801317c:	b580      	push	{r7, lr}
 801317e:	b088      	sub	sp, #32
 8013180:	af00      	add	r7, sp, #0
 8013182:	60f8      	str	r0, [r7, #12]
 8013184:	460b      	mov	r3, r1
 8013186:	607a      	str	r2, [r7, #4]
 8013188:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801318a:	4b35      	ldr	r3, [pc, #212]	; (8013260 <SDMMC_GetCmdResp6+0xe4>)
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	4a35      	ldr	r2, [pc, #212]	; (8013264 <SDMMC_GetCmdResp6+0xe8>)
 8013190:	fba2 2303 	umull	r2, r3, r2, r3
 8013194:	0a5b      	lsrs	r3, r3, #9
 8013196:	f241 3288 	movw	r2, #5000	; 0x1388
 801319a:	fb02 f303 	mul.w	r3, r2, r3
 801319e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80131a0:	69fb      	ldr	r3, [r7, #28]
 80131a2:	1e5a      	subs	r2, r3, #1
 80131a4:	61fa      	str	r2, [r7, #28]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d102      	bne.n	80131b0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80131aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80131ae:	e052      	b.n	8013256 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80131b4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80131b6:	69bb      	ldr	r3, [r7, #24]
 80131b8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d0ef      	beq.n	80131a0 <SDMMC_GetCmdResp6+0x24>
 80131c0:	69bb      	ldr	r3, [r7, #24]
 80131c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d1ea      	bne.n	80131a0 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80131ce:	f003 0304 	and.w	r3, r3, #4
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d004      	beq.n	80131e0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	2204      	movs	r2, #4
 80131da:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80131dc:	2304      	movs	r3, #4
 80131de:	e03a      	b.n	8013256 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80131e4:	f003 0301 	and.w	r3, r3, #1
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d004      	beq.n	80131f6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	2201      	movs	r2, #1
 80131f0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80131f2:	2301      	movs	r3, #1
 80131f4:	e02f      	b.n	8013256 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80131f6:	68f8      	ldr	r0, [r7, #12]
 80131f8:	f7ff fb60 	bl	80128bc <SDMMC_GetCommandResponse>
 80131fc:	4603      	mov	r3, r0
 80131fe:	461a      	mov	r2, r3
 8013200:	7afb      	ldrb	r3, [r7, #11]
 8013202:	4293      	cmp	r3, r2
 8013204:	d001      	beq.n	801320a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013206:	2301      	movs	r3, #1
 8013208:	e025      	b.n	8013256 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	4a16      	ldr	r2, [pc, #88]	; (8013268 <SDMMC_GetCmdResp6+0xec>)
 801320e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013210:	2100      	movs	r1, #0
 8013212:	68f8      	ldr	r0, [r7, #12]
 8013214:	f7ff fb5f 	bl	80128d6 <SDMMC_GetResponse>
 8013218:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 801321a:	697b      	ldr	r3, [r7, #20]
 801321c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8013220:	2b00      	cmp	r3, #0
 8013222:	d106      	bne.n	8013232 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8013224:	697b      	ldr	r3, [r7, #20]
 8013226:	0c1b      	lsrs	r3, r3, #16
 8013228:	b29a      	uxth	r2, r3
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 801322e:	2300      	movs	r3, #0
 8013230:	e011      	b.n	8013256 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8013232:	697b      	ldr	r3, [r7, #20]
 8013234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013238:	2b00      	cmp	r3, #0
 801323a:	d002      	beq.n	8013242 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801323c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013240:	e009      	b.n	8013256 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8013242:	697b      	ldr	r3, [r7, #20]
 8013244:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013248:	2b00      	cmp	r3, #0
 801324a:	d002      	beq.n	8013252 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801324c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013250:	e001      	b.n	8013256 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013252:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8013256:	4618      	mov	r0, r3
 8013258:	3720      	adds	r7, #32
 801325a:	46bd      	mov	sp, r7
 801325c:	bd80      	pop	{r7, pc}
 801325e:	bf00      	nop
 8013260:	20000004 	.word	0x20000004
 8013264:	10624dd3 	.word	0x10624dd3
 8013268:	002000c5 	.word	0x002000c5

0801326c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 801326c:	b480      	push	{r7}
 801326e:	b085      	sub	sp, #20
 8013270:	af00      	add	r7, sp, #0
 8013272:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013274:	4b22      	ldr	r3, [pc, #136]	; (8013300 <SDMMC_GetCmdResp7+0x94>)
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	4a22      	ldr	r2, [pc, #136]	; (8013304 <SDMMC_GetCmdResp7+0x98>)
 801327a:	fba2 2303 	umull	r2, r3, r2, r3
 801327e:	0a5b      	lsrs	r3, r3, #9
 8013280:	f241 3288 	movw	r2, #5000	; 0x1388
 8013284:	fb02 f303 	mul.w	r3, r2, r3
 8013288:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	1e5a      	subs	r2, r3, #1
 801328e:	60fa      	str	r2, [r7, #12]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d102      	bne.n	801329a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013294:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013298:	e02c      	b.n	80132f4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801329e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80132a0:	68bb      	ldr	r3, [r7, #8]
 80132a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d0ef      	beq.n	801328a <SDMMC_GetCmdResp7+0x1e>
 80132aa:	68bb      	ldr	r3, [r7, #8]
 80132ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d1ea      	bne.n	801328a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132b8:	f003 0304 	and.w	r3, r3, #4
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d004      	beq.n	80132ca <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	2204      	movs	r2, #4
 80132c4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80132c6:	2304      	movs	r3, #4
 80132c8:	e014      	b.n	80132f4 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132ce:	f003 0301 	and.w	r3, r3, #1
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d004      	beq.n	80132e0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	2201      	movs	r2, #1
 80132da:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80132dc:	2301      	movs	r3, #1
 80132de:	e009      	b.n	80132f4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d002      	beq.n	80132f2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	2240      	movs	r2, #64	; 0x40
 80132f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80132f2:	2300      	movs	r3, #0

}
 80132f4:	4618      	mov	r0, r3
 80132f6:	3714      	adds	r7, #20
 80132f8:	46bd      	mov	sp, r7
 80132fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132fe:	4770      	bx	lr
 8013300:	20000004 	.word	0x20000004
 8013304:	10624dd3 	.word	0x10624dd3

08013308 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8013308:	b480      	push	{r7}
 801330a:	b085      	sub	sp, #20
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013310:	4b11      	ldr	r3, [pc, #68]	; (8013358 <SDMMC_GetCmdError+0x50>)
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	4a11      	ldr	r2, [pc, #68]	; (801335c <SDMMC_GetCmdError+0x54>)
 8013316:	fba2 2303 	umull	r2, r3, r2, r3
 801331a:	0a5b      	lsrs	r3, r3, #9
 801331c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013320:	fb02 f303 	mul.w	r3, r2, r3
 8013324:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	1e5a      	subs	r2, r3, #1
 801332a:	60fa      	str	r2, [r7, #12]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d102      	bne.n	8013336 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013330:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013334:	e009      	b.n	801334a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801333a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801333e:	2b00      	cmp	r3, #0
 8013340:	d0f1      	beq.n	8013326 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	4a06      	ldr	r2, [pc, #24]	; (8013360 <SDMMC_GetCmdError+0x58>)
 8013346:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8013348:	2300      	movs	r3, #0
}
 801334a:	4618      	mov	r0, r3
 801334c:	3714      	adds	r7, #20
 801334e:	46bd      	mov	sp, r7
 8013350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013354:	4770      	bx	lr
 8013356:	bf00      	nop
 8013358:	20000004 	.word	0x20000004
 801335c:	10624dd3 	.word	0x10624dd3
 8013360:	002000c5 	.word	0x002000c5

08013364 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013364:	b084      	sub	sp, #16
 8013366:	b580      	push	{r7, lr}
 8013368:	b084      	sub	sp, #16
 801336a:	af00      	add	r7, sp, #0
 801336c:	6078      	str	r0, [r7, #4]
 801336e:	f107 001c 	add.w	r0, r7, #28
 8013372:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	68db      	ldr	r3, [r3, #12]
 801337a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8013382:	6878      	ldr	r0, [r7, #4]
 8013384:	f001 fa1c 	bl	80147c0 <USB_CoreReset>
 8013388:	4603      	mov	r3, r0
 801338a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 801338c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801338e:	2b00      	cmp	r3, #0
 8013390:	d106      	bne.n	80133a0 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013396:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	639a      	str	r2, [r3, #56]	; 0x38
 801339e:	e005      	b.n	80133ac <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80133ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80133ae:	4618      	mov	r0, r3
 80133b0:	3710      	adds	r7, #16
 80133b2:	46bd      	mov	sp, r7
 80133b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80133b8:	b004      	add	sp, #16
 80133ba:	4770      	bx	lr

080133bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80133bc:	b480      	push	{r7}
 80133be:	b087      	sub	sp, #28
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	60f8      	str	r0, [r7, #12]
 80133c4:	60b9      	str	r1, [r7, #8]
 80133c6:	4613      	mov	r3, r2
 80133c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80133ca:	79fb      	ldrb	r3, [r7, #7]
 80133cc:	2b02      	cmp	r3, #2
 80133ce:	d165      	bne.n	801349c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80133d0:	68bb      	ldr	r3, [r7, #8]
 80133d2:	4a3e      	ldr	r2, [pc, #248]	; (80134cc <USB_SetTurnaroundTime+0x110>)
 80133d4:	4293      	cmp	r3, r2
 80133d6:	d906      	bls.n	80133e6 <USB_SetTurnaroundTime+0x2a>
 80133d8:	68bb      	ldr	r3, [r7, #8]
 80133da:	4a3d      	ldr	r2, [pc, #244]	; (80134d0 <USB_SetTurnaroundTime+0x114>)
 80133dc:	4293      	cmp	r3, r2
 80133de:	d202      	bcs.n	80133e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80133e0:	230f      	movs	r3, #15
 80133e2:	617b      	str	r3, [r7, #20]
 80133e4:	e05c      	b.n	80134a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80133e6:	68bb      	ldr	r3, [r7, #8]
 80133e8:	4a39      	ldr	r2, [pc, #228]	; (80134d0 <USB_SetTurnaroundTime+0x114>)
 80133ea:	4293      	cmp	r3, r2
 80133ec:	d306      	bcc.n	80133fc <USB_SetTurnaroundTime+0x40>
 80133ee:	68bb      	ldr	r3, [r7, #8]
 80133f0:	4a38      	ldr	r2, [pc, #224]	; (80134d4 <USB_SetTurnaroundTime+0x118>)
 80133f2:	4293      	cmp	r3, r2
 80133f4:	d202      	bcs.n	80133fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80133f6:	230e      	movs	r3, #14
 80133f8:	617b      	str	r3, [r7, #20]
 80133fa:	e051      	b.n	80134a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80133fc:	68bb      	ldr	r3, [r7, #8]
 80133fe:	4a35      	ldr	r2, [pc, #212]	; (80134d4 <USB_SetTurnaroundTime+0x118>)
 8013400:	4293      	cmp	r3, r2
 8013402:	d306      	bcc.n	8013412 <USB_SetTurnaroundTime+0x56>
 8013404:	68bb      	ldr	r3, [r7, #8]
 8013406:	4a34      	ldr	r2, [pc, #208]	; (80134d8 <USB_SetTurnaroundTime+0x11c>)
 8013408:	4293      	cmp	r3, r2
 801340a:	d202      	bcs.n	8013412 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801340c:	230d      	movs	r3, #13
 801340e:	617b      	str	r3, [r7, #20]
 8013410:	e046      	b.n	80134a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8013412:	68bb      	ldr	r3, [r7, #8]
 8013414:	4a30      	ldr	r2, [pc, #192]	; (80134d8 <USB_SetTurnaroundTime+0x11c>)
 8013416:	4293      	cmp	r3, r2
 8013418:	d306      	bcc.n	8013428 <USB_SetTurnaroundTime+0x6c>
 801341a:	68bb      	ldr	r3, [r7, #8]
 801341c:	4a2f      	ldr	r2, [pc, #188]	; (80134dc <USB_SetTurnaroundTime+0x120>)
 801341e:	4293      	cmp	r3, r2
 8013420:	d802      	bhi.n	8013428 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8013422:	230c      	movs	r3, #12
 8013424:	617b      	str	r3, [r7, #20]
 8013426:	e03b      	b.n	80134a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8013428:	68bb      	ldr	r3, [r7, #8]
 801342a:	4a2c      	ldr	r2, [pc, #176]	; (80134dc <USB_SetTurnaroundTime+0x120>)
 801342c:	4293      	cmp	r3, r2
 801342e:	d906      	bls.n	801343e <USB_SetTurnaroundTime+0x82>
 8013430:	68bb      	ldr	r3, [r7, #8]
 8013432:	4a2b      	ldr	r2, [pc, #172]	; (80134e0 <USB_SetTurnaroundTime+0x124>)
 8013434:	4293      	cmp	r3, r2
 8013436:	d802      	bhi.n	801343e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8013438:	230b      	movs	r3, #11
 801343a:	617b      	str	r3, [r7, #20]
 801343c:	e030      	b.n	80134a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801343e:	68bb      	ldr	r3, [r7, #8]
 8013440:	4a27      	ldr	r2, [pc, #156]	; (80134e0 <USB_SetTurnaroundTime+0x124>)
 8013442:	4293      	cmp	r3, r2
 8013444:	d906      	bls.n	8013454 <USB_SetTurnaroundTime+0x98>
 8013446:	68bb      	ldr	r3, [r7, #8]
 8013448:	4a26      	ldr	r2, [pc, #152]	; (80134e4 <USB_SetTurnaroundTime+0x128>)
 801344a:	4293      	cmp	r3, r2
 801344c:	d802      	bhi.n	8013454 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801344e:	230a      	movs	r3, #10
 8013450:	617b      	str	r3, [r7, #20]
 8013452:	e025      	b.n	80134a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8013454:	68bb      	ldr	r3, [r7, #8]
 8013456:	4a23      	ldr	r2, [pc, #140]	; (80134e4 <USB_SetTurnaroundTime+0x128>)
 8013458:	4293      	cmp	r3, r2
 801345a:	d906      	bls.n	801346a <USB_SetTurnaroundTime+0xae>
 801345c:	68bb      	ldr	r3, [r7, #8]
 801345e:	4a22      	ldr	r2, [pc, #136]	; (80134e8 <USB_SetTurnaroundTime+0x12c>)
 8013460:	4293      	cmp	r3, r2
 8013462:	d202      	bcs.n	801346a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8013464:	2309      	movs	r3, #9
 8013466:	617b      	str	r3, [r7, #20]
 8013468:	e01a      	b.n	80134a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801346a:	68bb      	ldr	r3, [r7, #8]
 801346c:	4a1e      	ldr	r2, [pc, #120]	; (80134e8 <USB_SetTurnaroundTime+0x12c>)
 801346e:	4293      	cmp	r3, r2
 8013470:	d306      	bcc.n	8013480 <USB_SetTurnaroundTime+0xc4>
 8013472:	68bb      	ldr	r3, [r7, #8]
 8013474:	4a1d      	ldr	r2, [pc, #116]	; (80134ec <USB_SetTurnaroundTime+0x130>)
 8013476:	4293      	cmp	r3, r2
 8013478:	d802      	bhi.n	8013480 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801347a:	2308      	movs	r3, #8
 801347c:	617b      	str	r3, [r7, #20]
 801347e:	e00f      	b.n	80134a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8013480:	68bb      	ldr	r3, [r7, #8]
 8013482:	4a1a      	ldr	r2, [pc, #104]	; (80134ec <USB_SetTurnaroundTime+0x130>)
 8013484:	4293      	cmp	r3, r2
 8013486:	d906      	bls.n	8013496 <USB_SetTurnaroundTime+0xda>
 8013488:	68bb      	ldr	r3, [r7, #8]
 801348a:	4a19      	ldr	r2, [pc, #100]	; (80134f0 <USB_SetTurnaroundTime+0x134>)
 801348c:	4293      	cmp	r3, r2
 801348e:	d202      	bcs.n	8013496 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8013490:	2307      	movs	r3, #7
 8013492:	617b      	str	r3, [r7, #20]
 8013494:	e004      	b.n	80134a0 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8013496:	2306      	movs	r3, #6
 8013498:	617b      	str	r3, [r7, #20]
 801349a:	e001      	b.n	80134a0 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801349c:	2309      	movs	r3, #9
 801349e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	68db      	ldr	r3, [r3, #12]
 80134a4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	68da      	ldr	r2, [r3, #12]
 80134b0:	697b      	ldr	r3, [r7, #20]
 80134b2:	029b      	lsls	r3, r3, #10
 80134b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80134b8:	431a      	orrs	r2, r3
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80134be:	2300      	movs	r3, #0
}
 80134c0:	4618      	mov	r0, r3
 80134c2:	371c      	adds	r7, #28
 80134c4:	46bd      	mov	sp, r7
 80134c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ca:	4770      	bx	lr
 80134cc:	00d8acbf 	.word	0x00d8acbf
 80134d0:	00e4e1c0 	.word	0x00e4e1c0
 80134d4:	00f42400 	.word	0x00f42400
 80134d8:	01067380 	.word	0x01067380
 80134dc:	011a499f 	.word	0x011a499f
 80134e0:	01312cff 	.word	0x01312cff
 80134e4:	014ca43f 	.word	0x014ca43f
 80134e8:	016e3600 	.word	0x016e3600
 80134ec:	01a6ab1f 	.word	0x01a6ab1f
 80134f0:	01e84800 	.word	0x01e84800

080134f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80134f4:	b480      	push	{r7}
 80134f6:	b083      	sub	sp, #12
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	689b      	ldr	r3, [r3, #8]
 8013500:	f043 0201 	orr.w	r2, r3, #1
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013508:	2300      	movs	r3, #0
}
 801350a:	4618      	mov	r0, r3
 801350c:	370c      	adds	r7, #12
 801350e:	46bd      	mov	sp, r7
 8013510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013514:	4770      	bx	lr

08013516 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013516:	b480      	push	{r7}
 8013518:	b083      	sub	sp, #12
 801351a:	af00      	add	r7, sp, #0
 801351c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	689b      	ldr	r3, [r3, #8]
 8013522:	f023 0201 	bic.w	r2, r3, #1
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801352a:	2300      	movs	r3, #0
}
 801352c:	4618      	mov	r0, r3
 801352e:	370c      	adds	r7, #12
 8013530:	46bd      	mov	sp, r7
 8013532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013536:	4770      	bx	lr

08013538 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8013538:	b580      	push	{r7, lr}
 801353a:	b084      	sub	sp, #16
 801353c:	af00      	add	r7, sp, #0
 801353e:	6078      	str	r0, [r7, #4]
 8013540:	460b      	mov	r3, r1
 8013542:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8013544:	2300      	movs	r3, #0
 8013546:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	68db      	ldr	r3, [r3, #12]
 801354c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8013554:	78fb      	ldrb	r3, [r7, #3]
 8013556:	2b01      	cmp	r3, #1
 8013558:	d115      	bne.n	8013586 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	68db      	ldr	r3, [r3, #12]
 801355e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013566:	2001      	movs	r0, #1
 8013568:	f7f3 ffa4 	bl	80074b4 <HAL_Delay>
      ms++;
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	3301      	adds	r3, #1
 8013570:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8013572:	6878      	ldr	r0, [r7, #4]
 8013574:	f001 f8ab 	bl	80146ce <USB_GetMode>
 8013578:	4603      	mov	r3, r0
 801357a:	2b01      	cmp	r3, #1
 801357c:	d01e      	beq.n	80135bc <USB_SetCurrentMode+0x84>
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	2b31      	cmp	r3, #49	; 0x31
 8013582:	d9f0      	bls.n	8013566 <USB_SetCurrentMode+0x2e>
 8013584:	e01a      	b.n	80135bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8013586:	78fb      	ldrb	r3, [r7, #3]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d115      	bne.n	80135b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	68db      	ldr	r3, [r3, #12]
 8013590:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013598:	2001      	movs	r0, #1
 801359a:	f7f3 ff8b 	bl	80074b4 <HAL_Delay>
      ms++;
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	3301      	adds	r3, #1
 80135a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80135a4:	6878      	ldr	r0, [r7, #4]
 80135a6:	f001 f892 	bl	80146ce <USB_GetMode>
 80135aa:	4603      	mov	r3, r0
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d005      	beq.n	80135bc <USB_SetCurrentMode+0x84>
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	2b31      	cmp	r3, #49	; 0x31
 80135b4:	d9f0      	bls.n	8013598 <USB_SetCurrentMode+0x60>
 80135b6:	e001      	b.n	80135bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80135b8:	2301      	movs	r3, #1
 80135ba:	e005      	b.n	80135c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	2b32      	cmp	r3, #50	; 0x32
 80135c0:	d101      	bne.n	80135c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80135c2:	2301      	movs	r3, #1
 80135c4:	e000      	b.n	80135c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80135c6:	2300      	movs	r3, #0
}
 80135c8:	4618      	mov	r0, r3
 80135ca:	3710      	adds	r7, #16
 80135cc:	46bd      	mov	sp, r7
 80135ce:	bd80      	pop	{r7, pc}

080135d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80135d0:	b084      	sub	sp, #16
 80135d2:	b580      	push	{r7, lr}
 80135d4:	b086      	sub	sp, #24
 80135d6:	af00      	add	r7, sp, #0
 80135d8:	6078      	str	r0, [r7, #4]
 80135da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80135de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80135e2:	2300      	movs	r3, #0
 80135e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80135ea:	2300      	movs	r3, #0
 80135ec:	613b      	str	r3, [r7, #16]
 80135ee:	e009      	b.n	8013604 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80135f0:	687a      	ldr	r2, [r7, #4]
 80135f2:	693b      	ldr	r3, [r7, #16]
 80135f4:	3340      	adds	r3, #64	; 0x40
 80135f6:	009b      	lsls	r3, r3, #2
 80135f8:	4413      	add	r3, r2
 80135fa:	2200      	movs	r2, #0
 80135fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80135fe:	693b      	ldr	r3, [r7, #16]
 8013600:	3301      	adds	r3, #1
 8013602:	613b      	str	r3, [r7, #16]
 8013604:	693b      	ldr	r3, [r7, #16]
 8013606:	2b0e      	cmp	r3, #14
 8013608:	d9f2      	bls.n	80135f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801360a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801360c:	2b00      	cmp	r3, #0
 801360e:	d11c      	bne.n	801364a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013616:	685b      	ldr	r3, [r3, #4]
 8013618:	68fa      	ldr	r2, [r7, #12]
 801361a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801361e:	f043 0302 	orr.w	r3, r3, #2
 8013622:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013628:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	601a      	str	r2, [r3, #0]
 8013648:	e005      	b.n	8013656 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801364e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801365c:	461a      	mov	r2, r3
 801365e:	2300      	movs	r3, #0
 8013660:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8013662:	2103      	movs	r1, #3
 8013664:	6878      	ldr	r0, [r7, #4]
 8013666:	f000 f959 	bl	801391c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801366a:	2110      	movs	r1, #16
 801366c:	6878      	ldr	r0, [r7, #4]
 801366e:	f000 f8f1 	bl	8013854 <USB_FlushTxFifo>
 8013672:	4603      	mov	r3, r0
 8013674:	2b00      	cmp	r3, #0
 8013676:	d001      	beq.n	801367c <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8013678:	2301      	movs	r3, #1
 801367a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801367c:	6878      	ldr	r0, [r7, #4]
 801367e:	f000 f91d 	bl	80138bc <USB_FlushRxFifo>
 8013682:	4603      	mov	r3, r0
 8013684:	2b00      	cmp	r3, #0
 8013686:	d001      	beq.n	801368c <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8013688:	2301      	movs	r3, #1
 801368a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013692:	461a      	mov	r2, r3
 8013694:	2300      	movs	r3, #0
 8013696:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801369e:	461a      	mov	r2, r3
 80136a0:	2300      	movs	r3, #0
 80136a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80136aa:	461a      	mov	r2, r3
 80136ac:	2300      	movs	r3, #0
 80136ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80136b0:	2300      	movs	r3, #0
 80136b2:	613b      	str	r3, [r7, #16]
 80136b4:	e043      	b.n	801373e <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80136b6:	693b      	ldr	r3, [r7, #16]
 80136b8:	015a      	lsls	r2, r3, #5
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	4413      	add	r3, r2
 80136be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80136c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80136cc:	d118      	bne.n	8013700 <USB_DevInit+0x130>
    {
      if (i == 0U)
 80136ce:	693b      	ldr	r3, [r7, #16]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d10a      	bne.n	80136ea <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80136d4:	693b      	ldr	r3, [r7, #16]
 80136d6:	015a      	lsls	r2, r3, #5
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	4413      	add	r3, r2
 80136dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136e0:	461a      	mov	r2, r3
 80136e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80136e6:	6013      	str	r3, [r2, #0]
 80136e8:	e013      	b.n	8013712 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80136ea:	693b      	ldr	r3, [r7, #16]
 80136ec:	015a      	lsls	r2, r3, #5
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	4413      	add	r3, r2
 80136f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136f6:	461a      	mov	r2, r3
 80136f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80136fc:	6013      	str	r3, [r2, #0]
 80136fe:	e008      	b.n	8013712 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013700:	693b      	ldr	r3, [r7, #16]
 8013702:	015a      	lsls	r2, r3, #5
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	4413      	add	r3, r2
 8013708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801370c:	461a      	mov	r2, r3
 801370e:	2300      	movs	r3, #0
 8013710:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8013712:	693b      	ldr	r3, [r7, #16]
 8013714:	015a      	lsls	r2, r3, #5
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	4413      	add	r3, r2
 801371a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801371e:	461a      	mov	r2, r3
 8013720:	2300      	movs	r3, #0
 8013722:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013724:	693b      	ldr	r3, [r7, #16]
 8013726:	015a      	lsls	r2, r3, #5
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	4413      	add	r3, r2
 801372c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013730:	461a      	mov	r2, r3
 8013732:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013736:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013738:	693b      	ldr	r3, [r7, #16]
 801373a:	3301      	adds	r3, #1
 801373c:	613b      	str	r3, [r7, #16]
 801373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013740:	693a      	ldr	r2, [r7, #16]
 8013742:	429a      	cmp	r2, r3
 8013744:	d3b7      	bcc.n	80136b6 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013746:	2300      	movs	r3, #0
 8013748:	613b      	str	r3, [r7, #16]
 801374a:	e043      	b.n	80137d4 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801374c:	693b      	ldr	r3, [r7, #16]
 801374e:	015a      	lsls	r2, r3, #5
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	4413      	add	r3, r2
 8013754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801375e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013762:	d118      	bne.n	8013796 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8013764:	693b      	ldr	r3, [r7, #16]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d10a      	bne.n	8013780 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801376a:	693b      	ldr	r3, [r7, #16]
 801376c:	015a      	lsls	r2, r3, #5
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	4413      	add	r3, r2
 8013772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013776:	461a      	mov	r2, r3
 8013778:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801377c:	6013      	str	r3, [r2, #0]
 801377e:	e013      	b.n	80137a8 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013780:	693b      	ldr	r3, [r7, #16]
 8013782:	015a      	lsls	r2, r3, #5
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	4413      	add	r3, r2
 8013788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801378c:	461a      	mov	r2, r3
 801378e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013792:	6013      	str	r3, [r2, #0]
 8013794:	e008      	b.n	80137a8 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013796:	693b      	ldr	r3, [r7, #16]
 8013798:	015a      	lsls	r2, r3, #5
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	4413      	add	r3, r2
 801379e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137a2:	461a      	mov	r2, r3
 80137a4:	2300      	movs	r3, #0
 80137a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80137a8:	693b      	ldr	r3, [r7, #16]
 80137aa:	015a      	lsls	r2, r3, #5
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	4413      	add	r3, r2
 80137b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137b4:	461a      	mov	r2, r3
 80137b6:	2300      	movs	r3, #0
 80137b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80137ba:	693b      	ldr	r3, [r7, #16]
 80137bc:	015a      	lsls	r2, r3, #5
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	4413      	add	r3, r2
 80137c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137c6:	461a      	mov	r2, r3
 80137c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80137cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80137ce:	693b      	ldr	r3, [r7, #16]
 80137d0:	3301      	adds	r3, #1
 80137d2:	613b      	str	r3, [r7, #16]
 80137d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137d6:	693a      	ldr	r2, [r7, #16]
 80137d8:	429a      	cmp	r2, r3
 80137da:	d3b7      	bcc.n	801374c <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80137e2:	691b      	ldr	r3, [r3, #16]
 80137e4:	68fa      	ldr	r2, [r7, #12]
 80137e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80137ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80137ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	2200      	movs	r2, #0
 80137f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80137fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	699b      	ldr	r3, [r3, #24]
 8013802:	f043 0210 	orr.w	r2, r3, #16
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	699a      	ldr	r2, [r3, #24]
 801380e:	4b10      	ldr	r3, [pc, #64]	; (8013850 <USB_DevInit+0x280>)
 8013810:	4313      	orrs	r3, r2
 8013812:	687a      	ldr	r2, [r7, #4]
 8013814:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013818:	2b00      	cmp	r3, #0
 801381a:	d005      	beq.n	8013828 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	699b      	ldr	r3, [r3, #24]
 8013820:	f043 0208 	orr.w	r2, r3, #8
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801382a:	2b01      	cmp	r3, #1
 801382c:	d107      	bne.n	801383e <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	699b      	ldr	r3, [r3, #24]
 8013832:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013836:	f043 0304 	orr.w	r3, r3, #4
 801383a:	687a      	ldr	r2, [r7, #4]
 801383c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801383e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013840:	4618      	mov	r0, r3
 8013842:	3718      	adds	r7, #24
 8013844:	46bd      	mov	sp, r7
 8013846:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801384a:	b004      	add	sp, #16
 801384c:	4770      	bx	lr
 801384e:	bf00      	nop
 8013850:	803c3800 	.word	0x803c3800

08013854 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013854:	b480      	push	{r7}
 8013856:	b085      	sub	sp, #20
 8013858:	af00      	add	r7, sp, #0
 801385a:	6078      	str	r0, [r7, #4]
 801385c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801385e:	2300      	movs	r3, #0
 8013860:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	3301      	adds	r3, #1
 8013866:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	4a13      	ldr	r2, [pc, #76]	; (80138b8 <USB_FlushTxFifo+0x64>)
 801386c:	4293      	cmp	r3, r2
 801386e:	d901      	bls.n	8013874 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8013870:	2303      	movs	r3, #3
 8013872:	e01b      	b.n	80138ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	691b      	ldr	r3, [r3, #16]
 8013878:	2b00      	cmp	r3, #0
 801387a:	daf2      	bge.n	8013862 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801387c:	2300      	movs	r3, #0
 801387e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013880:	683b      	ldr	r3, [r7, #0]
 8013882:	019b      	lsls	r3, r3, #6
 8013884:	f043 0220 	orr.w	r2, r3, #32
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	3301      	adds	r3, #1
 8013890:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	4a08      	ldr	r2, [pc, #32]	; (80138b8 <USB_FlushTxFifo+0x64>)
 8013896:	4293      	cmp	r3, r2
 8013898:	d901      	bls.n	801389e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801389a:	2303      	movs	r3, #3
 801389c:	e006      	b.n	80138ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	691b      	ldr	r3, [r3, #16]
 80138a2:	f003 0320 	and.w	r3, r3, #32
 80138a6:	2b20      	cmp	r3, #32
 80138a8:	d0f0      	beq.n	801388c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80138aa:	2300      	movs	r3, #0
}
 80138ac:	4618      	mov	r0, r3
 80138ae:	3714      	adds	r7, #20
 80138b0:	46bd      	mov	sp, r7
 80138b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b6:	4770      	bx	lr
 80138b8:	00030d40 	.word	0x00030d40

080138bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80138bc:	b480      	push	{r7}
 80138be:	b085      	sub	sp, #20
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80138c4:	2300      	movs	r3, #0
 80138c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	3301      	adds	r3, #1
 80138cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	4a11      	ldr	r2, [pc, #68]	; (8013918 <USB_FlushRxFifo+0x5c>)
 80138d2:	4293      	cmp	r3, r2
 80138d4:	d901      	bls.n	80138da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80138d6:	2303      	movs	r3, #3
 80138d8:	e018      	b.n	801390c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	691b      	ldr	r3, [r3, #16]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	daf2      	bge.n	80138c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80138e2:	2300      	movs	r3, #0
 80138e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	2210      	movs	r2, #16
 80138ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	3301      	adds	r3, #1
 80138f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	4a08      	ldr	r2, [pc, #32]	; (8013918 <USB_FlushRxFifo+0x5c>)
 80138f6:	4293      	cmp	r3, r2
 80138f8:	d901      	bls.n	80138fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80138fa:	2303      	movs	r3, #3
 80138fc:	e006      	b.n	801390c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	691b      	ldr	r3, [r3, #16]
 8013902:	f003 0310 	and.w	r3, r3, #16
 8013906:	2b10      	cmp	r3, #16
 8013908:	d0f0      	beq.n	80138ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801390a:	2300      	movs	r3, #0
}
 801390c:	4618      	mov	r0, r3
 801390e:	3714      	adds	r7, #20
 8013910:	46bd      	mov	sp, r7
 8013912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013916:	4770      	bx	lr
 8013918:	00030d40 	.word	0x00030d40

0801391c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801391c:	b480      	push	{r7}
 801391e:	b085      	sub	sp, #20
 8013920:	af00      	add	r7, sp, #0
 8013922:	6078      	str	r0, [r7, #4]
 8013924:	460b      	mov	r3, r1
 8013926:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013932:	681a      	ldr	r2, [r3, #0]
 8013934:	78fb      	ldrb	r3, [r7, #3]
 8013936:	68f9      	ldr	r1, [r7, #12]
 8013938:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801393c:	4313      	orrs	r3, r2
 801393e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013940:	2300      	movs	r3, #0
}
 8013942:	4618      	mov	r0, r3
 8013944:	3714      	adds	r7, #20
 8013946:	46bd      	mov	sp, r7
 8013948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801394c:	4770      	bx	lr

0801394e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801394e:	b480      	push	{r7}
 8013950:	b087      	sub	sp, #28
 8013952:	af00      	add	r7, sp, #0
 8013954:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801395a:	693b      	ldr	r3, [r7, #16]
 801395c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013960:	689b      	ldr	r3, [r3, #8]
 8013962:	f003 0306 	and.w	r3, r3, #6
 8013966:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	2b02      	cmp	r3, #2
 801396c:	d002      	beq.n	8013974 <USB_GetDevSpeed+0x26>
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	2b06      	cmp	r3, #6
 8013972:	d102      	bne.n	801397a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8013974:	2302      	movs	r3, #2
 8013976:	75fb      	strb	r3, [r7, #23]
 8013978:	e001      	b.n	801397e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 801397a:	230f      	movs	r3, #15
 801397c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801397e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013980:	4618      	mov	r0, r3
 8013982:	371c      	adds	r7, #28
 8013984:	46bd      	mov	sp, r7
 8013986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801398a:	4770      	bx	lr

0801398c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801398c:	b480      	push	{r7}
 801398e:	b085      	sub	sp, #20
 8013990:	af00      	add	r7, sp, #0
 8013992:	6078      	str	r0, [r7, #4]
 8013994:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801399a:	683b      	ldr	r3, [r7, #0]
 801399c:	781b      	ldrb	r3, [r3, #0]
 801399e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80139a0:	683b      	ldr	r3, [r7, #0]
 80139a2:	785b      	ldrb	r3, [r3, #1]
 80139a4:	2b01      	cmp	r3, #1
 80139a6:	d13a      	bne.n	8013a1e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80139ae:	69da      	ldr	r2, [r3, #28]
 80139b0:	683b      	ldr	r3, [r7, #0]
 80139b2:	781b      	ldrb	r3, [r3, #0]
 80139b4:	f003 030f 	and.w	r3, r3, #15
 80139b8:	2101      	movs	r1, #1
 80139ba:	fa01 f303 	lsl.w	r3, r1, r3
 80139be:	b29b      	uxth	r3, r3
 80139c0:	68f9      	ldr	r1, [r7, #12]
 80139c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80139c6:	4313      	orrs	r3, r2
 80139c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80139ca:	68bb      	ldr	r3, [r7, #8]
 80139cc:	015a      	lsls	r2, r3, #5
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	4413      	add	r3, r2
 80139d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d155      	bne.n	8013a8c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80139e0:	68bb      	ldr	r3, [r7, #8]
 80139e2:	015a      	lsls	r2, r3, #5
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	4413      	add	r3, r2
 80139e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139ec:	681a      	ldr	r2, [r3, #0]
 80139ee:	683b      	ldr	r3, [r7, #0]
 80139f0:	689b      	ldr	r3, [r3, #8]
 80139f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80139f6:	683b      	ldr	r3, [r7, #0]
 80139f8:	791b      	ldrb	r3, [r3, #4]
 80139fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80139fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80139fe:	68bb      	ldr	r3, [r7, #8]
 8013a00:	059b      	lsls	r3, r3, #22
 8013a02:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013a04:	4313      	orrs	r3, r2
 8013a06:	68ba      	ldr	r2, [r7, #8]
 8013a08:	0151      	lsls	r1, r2, #5
 8013a0a:	68fa      	ldr	r2, [r7, #12]
 8013a0c:	440a      	add	r2, r1
 8013a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013a1a:	6013      	str	r3, [r2, #0]
 8013a1c:	e036      	b.n	8013a8c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a24:	69da      	ldr	r2, [r3, #28]
 8013a26:	683b      	ldr	r3, [r7, #0]
 8013a28:	781b      	ldrb	r3, [r3, #0]
 8013a2a:	f003 030f 	and.w	r3, r3, #15
 8013a2e:	2101      	movs	r1, #1
 8013a30:	fa01 f303 	lsl.w	r3, r1, r3
 8013a34:	041b      	lsls	r3, r3, #16
 8013a36:	68f9      	ldr	r1, [r7, #12]
 8013a38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013a3c:	4313      	orrs	r3, r2
 8013a3e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8013a40:	68bb      	ldr	r3, [r7, #8]
 8013a42:	015a      	lsls	r2, r3, #5
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	4413      	add	r3, r2
 8013a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d11a      	bne.n	8013a8c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013a56:	68bb      	ldr	r3, [r7, #8]
 8013a58:	015a      	lsls	r2, r3, #5
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	4413      	add	r3, r2
 8013a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a62:	681a      	ldr	r2, [r3, #0]
 8013a64:	683b      	ldr	r3, [r7, #0]
 8013a66:	689b      	ldr	r3, [r3, #8]
 8013a68:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8013a6c:	683b      	ldr	r3, [r7, #0]
 8013a6e:	791b      	ldrb	r3, [r3, #4]
 8013a70:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013a72:	430b      	orrs	r3, r1
 8013a74:	4313      	orrs	r3, r2
 8013a76:	68ba      	ldr	r2, [r7, #8]
 8013a78:	0151      	lsls	r1, r2, #5
 8013a7a:	68fa      	ldr	r2, [r7, #12]
 8013a7c:	440a      	add	r2, r1
 8013a7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013a8a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8013a8c:	2300      	movs	r3, #0
}
 8013a8e:	4618      	mov	r0, r3
 8013a90:	3714      	adds	r7, #20
 8013a92:	46bd      	mov	sp, r7
 8013a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a98:	4770      	bx	lr
	...

08013a9c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013a9c:	b480      	push	{r7}
 8013a9e:	b085      	sub	sp, #20
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	6078      	str	r0, [r7, #4]
 8013aa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013aaa:	683b      	ldr	r3, [r7, #0]
 8013aac:	781b      	ldrb	r3, [r3, #0]
 8013aae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8013ab0:	683b      	ldr	r3, [r7, #0]
 8013ab2:	785b      	ldrb	r3, [r3, #1]
 8013ab4:	2b01      	cmp	r3, #1
 8013ab6:	d161      	bne.n	8013b7c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013ab8:	68bb      	ldr	r3, [r7, #8]
 8013aba:	015a      	lsls	r2, r3, #5
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	4413      	add	r3, r2
 8013ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013aca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013ace:	d11f      	bne.n	8013b10 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013ad0:	68bb      	ldr	r3, [r7, #8]
 8013ad2:	015a      	lsls	r2, r3, #5
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	4413      	add	r3, r2
 8013ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	68ba      	ldr	r2, [r7, #8]
 8013ae0:	0151      	lsls	r1, r2, #5
 8013ae2:	68fa      	ldr	r2, [r7, #12]
 8013ae4:	440a      	add	r2, r1
 8013ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013aea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013aee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013af0:	68bb      	ldr	r3, [r7, #8]
 8013af2:	015a      	lsls	r2, r3, #5
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	4413      	add	r3, r2
 8013af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	68ba      	ldr	r2, [r7, #8]
 8013b00:	0151      	lsls	r1, r2, #5
 8013b02:	68fa      	ldr	r2, [r7, #12]
 8013b04:	440a      	add	r2, r1
 8013b06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013b0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013b0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013b18:	683b      	ldr	r3, [r7, #0]
 8013b1a:	781b      	ldrb	r3, [r3, #0]
 8013b1c:	f003 030f 	and.w	r3, r3, #15
 8013b20:	2101      	movs	r1, #1
 8013b22:	fa01 f303 	lsl.w	r3, r1, r3
 8013b26:	b29b      	uxth	r3, r3
 8013b28:	43db      	mvns	r3, r3
 8013b2a:	68f9      	ldr	r1, [r7, #12]
 8013b2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013b30:	4013      	ands	r3, r2
 8013b32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b3a:	69da      	ldr	r2, [r3, #28]
 8013b3c:	683b      	ldr	r3, [r7, #0]
 8013b3e:	781b      	ldrb	r3, [r3, #0]
 8013b40:	f003 030f 	and.w	r3, r3, #15
 8013b44:	2101      	movs	r1, #1
 8013b46:	fa01 f303 	lsl.w	r3, r1, r3
 8013b4a:	b29b      	uxth	r3, r3
 8013b4c:	43db      	mvns	r3, r3
 8013b4e:	68f9      	ldr	r1, [r7, #12]
 8013b50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013b54:	4013      	ands	r3, r2
 8013b56:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013b58:	68bb      	ldr	r3, [r7, #8]
 8013b5a:	015a      	lsls	r2, r3, #5
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	4413      	add	r3, r2
 8013b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b64:	681a      	ldr	r2, [r3, #0]
 8013b66:	68bb      	ldr	r3, [r7, #8]
 8013b68:	0159      	lsls	r1, r3, #5
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	440b      	add	r3, r1
 8013b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b72:	4619      	mov	r1, r3
 8013b74:	4b35      	ldr	r3, [pc, #212]	; (8013c4c <USB_DeactivateEndpoint+0x1b0>)
 8013b76:	4013      	ands	r3, r2
 8013b78:	600b      	str	r3, [r1, #0]
 8013b7a:	e060      	b.n	8013c3e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013b7c:	68bb      	ldr	r3, [r7, #8]
 8013b7e:	015a      	lsls	r2, r3, #5
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	4413      	add	r3, r2
 8013b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013b8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013b92:	d11f      	bne.n	8013bd4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013b94:	68bb      	ldr	r3, [r7, #8]
 8013b96:	015a      	lsls	r2, r3, #5
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	4413      	add	r3, r2
 8013b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	68ba      	ldr	r2, [r7, #8]
 8013ba4:	0151      	lsls	r1, r2, #5
 8013ba6:	68fa      	ldr	r2, [r7, #12]
 8013ba8:	440a      	add	r2, r1
 8013baa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013bae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013bb2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013bb4:	68bb      	ldr	r3, [r7, #8]
 8013bb6:	015a      	lsls	r2, r3, #5
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	4413      	add	r3, r2
 8013bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	68ba      	ldr	r2, [r7, #8]
 8013bc4:	0151      	lsls	r1, r2, #5
 8013bc6:	68fa      	ldr	r2, [r7, #12]
 8013bc8:	440a      	add	r2, r1
 8013bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013bce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013bd2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013bda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013bdc:	683b      	ldr	r3, [r7, #0]
 8013bde:	781b      	ldrb	r3, [r3, #0]
 8013be0:	f003 030f 	and.w	r3, r3, #15
 8013be4:	2101      	movs	r1, #1
 8013be6:	fa01 f303 	lsl.w	r3, r1, r3
 8013bea:	041b      	lsls	r3, r3, #16
 8013bec:	43db      	mvns	r3, r3
 8013bee:	68f9      	ldr	r1, [r7, #12]
 8013bf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013bf4:	4013      	ands	r3, r2
 8013bf6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013bfe:	69da      	ldr	r2, [r3, #28]
 8013c00:	683b      	ldr	r3, [r7, #0]
 8013c02:	781b      	ldrb	r3, [r3, #0]
 8013c04:	f003 030f 	and.w	r3, r3, #15
 8013c08:	2101      	movs	r1, #1
 8013c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8013c0e:	041b      	lsls	r3, r3, #16
 8013c10:	43db      	mvns	r3, r3
 8013c12:	68f9      	ldr	r1, [r7, #12]
 8013c14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013c18:	4013      	ands	r3, r2
 8013c1a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013c1c:	68bb      	ldr	r3, [r7, #8]
 8013c1e:	015a      	lsls	r2, r3, #5
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	4413      	add	r3, r2
 8013c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c28:	681a      	ldr	r2, [r3, #0]
 8013c2a:	68bb      	ldr	r3, [r7, #8]
 8013c2c:	0159      	lsls	r1, r3, #5
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	440b      	add	r3, r1
 8013c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c36:	4619      	mov	r1, r3
 8013c38:	4b05      	ldr	r3, [pc, #20]	; (8013c50 <USB_DeactivateEndpoint+0x1b4>)
 8013c3a:	4013      	ands	r3, r2
 8013c3c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8013c3e:	2300      	movs	r3, #0
}
 8013c40:	4618      	mov	r0, r3
 8013c42:	3714      	adds	r7, #20
 8013c44:	46bd      	mov	sp, r7
 8013c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c4a:	4770      	bx	lr
 8013c4c:	ec337800 	.word	0xec337800
 8013c50:	eff37800 	.word	0xeff37800

08013c54 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013c54:	b580      	push	{r7, lr}
 8013c56:	b086      	sub	sp, #24
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]
 8013c5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8013c62:	683b      	ldr	r3, [r7, #0]
 8013c64:	781b      	ldrb	r3, [r3, #0]
 8013c66:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013c68:	683b      	ldr	r3, [r7, #0]
 8013c6a:	785b      	ldrb	r3, [r3, #1]
 8013c6c:	2b01      	cmp	r3, #1
 8013c6e:	f040 8128 	bne.w	8013ec2 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8013c72:	683b      	ldr	r3, [r7, #0]
 8013c74:	691b      	ldr	r3, [r3, #16]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d132      	bne.n	8013ce0 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013c7a:	693b      	ldr	r3, [r7, #16]
 8013c7c:	015a      	lsls	r2, r3, #5
 8013c7e:	697b      	ldr	r3, [r7, #20]
 8013c80:	4413      	add	r3, r2
 8013c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c86:	691b      	ldr	r3, [r3, #16]
 8013c88:	693a      	ldr	r2, [r7, #16]
 8013c8a:	0151      	lsls	r1, r2, #5
 8013c8c:	697a      	ldr	r2, [r7, #20]
 8013c8e:	440a      	add	r2, r1
 8013c90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8013c98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8013c9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013c9e:	693b      	ldr	r3, [r7, #16]
 8013ca0:	015a      	lsls	r2, r3, #5
 8013ca2:	697b      	ldr	r3, [r7, #20]
 8013ca4:	4413      	add	r3, r2
 8013ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013caa:	691b      	ldr	r3, [r3, #16]
 8013cac:	693a      	ldr	r2, [r7, #16]
 8013cae:	0151      	lsls	r1, r2, #5
 8013cb0:	697a      	ldr	r2, [r7, #20]
 8013cb2:	440a      	add	r2, r1
 8013cb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013cb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013cbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013cbe:	693b      	ldr	r3, [r7, #16]
 8013cc0:	015a      	lsls	r2, r3, #5
 8013cc2:	697b      	ldr	r3, [r7, #20]
 8013cc4:	4413      	add	r3, r2
 8013cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cca:	691b      	ldr	r3, [r3, #16]
 8013ccc:	693a      	ldr	r2, [r7, #16]
 8013cce:	0151      	lsls	r1, r2, #5
 8013cd0:	697a      	ldr	r2, [r7, #20]
 8013cd2:	440a      	add	r2, r1
 8013cd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013cd8:	0cdb      	lsrs	r3, r3, #19
 8013cda:	04db      	lsls	r3, r3, #19
 8013cdc:	6113      	str	r3, [r2, #16]
 8013cde:	e092      	b.n	8013e06 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013ce0:	693b      	ldr	r3, [r7, #16]
 8013ce2:	015a      	lsls	r2, r3, #5
 8013ce4:	697b      	ldr	r3, [r7, #20]
 8013ce6:	4413      	add	r3, r2
 8013ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cec:	691b      	ldr	r3, [r3, #16]
 8013cee:	693a      	ldr	r2, [r7, #16]
 8013cf0:	0151      	lsls	r1, r2, #5
 8013cf2:	697a      	ldr	r2, [r7, #20]
 8013cf4:	440a      	add	r2, r1
 8013cf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013cfa:	0cdb      	lsrs	r3, r3, #19
 8013cfc:	04db      	lsls	r3, r3, #19
 8013cfe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013d00:	693b      	ldr	r3, [r7, #16]
 8013d02:	015a      	lsls	r2, r3, #5
 8013d04:	697b      	ldr	r3, [r7, #20]
 8013d06:	4413      	add	r3, r2
 8013d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d0c:	691b      	ldr	r3, [r3, #16]
 8013d0e:	693a      	ldr	r2, [r7, #16]
 8013d10:	0151      	lsls	r1, r2, #5
 8013d12:	697a      	ldr	r2, [r7, #20]
 8013d14:	440a      	add	r2, r1
 8013d16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d1a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8013d1e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8013d22:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8013d24:	693b      	ldr	r3, [r7, #16]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d11a      	bne.n	8013d60 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8013d2a:	683b      	ldr	r3, [r7, #0]
 8013d2c:	691a      	ldr	r2, [r3, #16]
 8013d2e:	683b      	ldr	r3, [r7, #0]
 8013d30:	689b      	ldr	r3, [r3, #8]
 8013d32:	429a      	cmp	r2, r3
 8013d34:	d903      	bls.n	8013d3e <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8013d36:	683b      	ldr	r3, [r7, #0]
 8013d38:	689a      	ldr	r2, [r3, #8]
 8013d3a:	683b      	ldr	r3, [r7, #0]
 8013d3c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013d3e:	693b      	ldr	r3, [r7, #16]
 8013d40:	015a      	lsls	r2, r3, #5
 8013d42:	697b      	ldr	r3, [r7, #20]
 8013d44:	4413      	add	r3, r2
 8013d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d4a:	691b      	ldr	r3, [r3, #16]
 8013d4c:	693a      	ldr	r2, [r7, #16]
 8013d4e:	0151      	lsls	r1, r2, #5
 8013d50:	697a      	ldr	r2, [r7, #20]
 8013d52:	440a      	add	r2, r1
 8013d54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013d5c:	6113      	str	r3, [r2, #16]
 8013d5e:	e01b      	b.n	8013d98 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013d60:	693b      	ldr	r3, [r7, #16]
 8013d62:	015a      	lsls	r2, r3, #5
 8013d64:	697b      	ldr	r3, [r7, #20]
 8013d66:	4413      	add	r3, r2
 8013d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d6c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8013d6e:	683b      	ldr	r3, [r7, #0]
 8013d70:	6919      	ldr	r1, [r3, #16]
 8013d72:	683b      	ldr	r3, [r7, #0]
 8013d74:	689b      	ldr	r3, [r3, #8]
 8013d76:	440b      	add	r3, r1
 8013d78:	1e59      	subs	r1, r3, #1
 8013d7a:	683b      	ldr	r3, [r7, #0]
 8013d7c:	689b      	ldr	r3, [r3, #8]
 8013d7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8013d82:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013d84:	4b8d      	ldr	r3, [pc, #564]	; (8013fbc <USB_EPStartXfer+0x368>)
 8013d86:	400b      	ands	r3, r1
 8013d88:	6939      	ldr	r1, [r7, #16]
 8013d8a:	0148      	lsls	r0, r1, #5
 8013d8c:	6979      	ldr	r1, [r7, #20]
 8013d8e:	4401      	add	r1, r0
 8013d90:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013d94:	4313      	orrs	r3, r2
 8013d96:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013d98:	693b      	ldr	r3, [r7, #16]
 8013d9a:	015a      	lsls	r2, r3, #5
 8013d9c:	697b      	ldr	r3, [r7, #20]
 8013d9e:	4413      	add	r3, r2
 8013da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013da4:	691a      	ldr	r2, [r3, #16]
 8013da6:	683b      	ldr	r3, [r7, #0]
 8013da8:	691b      	ldr	r3, [r3, #16]
 8013daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013dae:	6939      	ldr	r1, [r7, #16]
 8013db0:	0148      	lsls	r0, r1, #5
 8013db2:	6979      	ldr	r1, [r7, #20]
 8013db4:	4401      	add	r1, r0
 8013db6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013dba:	4313      	orrs	r3, r2
 8013dbc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8013dbe:	683b      	ldr	r3, [r7, #0]
 8013dc0:	791b      	ldrb	r3, [r3, #4]
 8013dc2:	2b01      	cmp	r3, #1
 8013dc4:	d11f      	bne.n	8013e06 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013dc6:	693b      	ldr	r3, [r7, #16]
 8013dc8:	015a      	lsls	r2, r3, #5
 8013dca:	697b      	ldr	r3, [r7, #20]
 8013dcc:	4413      	add	r3, r2
 8013dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013dd2:	691b      	ldr	r3, [r3, #16]
 8013dd4:	693a      	ldr	r2, [r7, #16]
 8013dd6:	0151      	lsls	r1, r2, #5
 8013dd8:	697a      	ldr	r2, [r7, #20]
 8013dda:	440a      	add	r2, r1
 8013ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013de0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013de4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8013de6:	693b      	ldr	r3, [r7, #16]
 8013de8:	015a      	lsls	r2, r3, #5
 8013dea:	697b      	ldr	r3, [r7, #20]
 8013dec:	4413      	add	r3, r2
 8013dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013df2:	691b      	ldr	r3, [r3, #16]
 8013df4:	693a      	ldr	r2, [r7, #16]
 8013df6:	0151      	lsls	r1, r2, #5
 8013df8:	697a      	ldr	r2, [r7, #20]
 8013dfa:	440a      	add	r2, r1
 8013dfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013e00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013e04:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013e06:	693b      	ldr	r3, [r7, #16]
 8013e08:	015a      	lsls	r2, r3, #5
 8013e0a:	697b      	ldr	r3, [r7, #20]
 8013e0c:	4413      	add	r3, r2
 8013e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	693a      	ldr	r2, [r7, #16]
 8013e16:	0151      	lsls	r1, r2, #5
 8013e18:	697a      	ldr	r2, [r7, #20]
 8013e1a:	440a      	add	r2, r1
 8013e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013e20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013e24:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8013e26:	683b      	ldr	r3, [r7, #0]
 8013e28:	791b      	ldrb	r3, [r3, #4]
 8013e2a:	2b01      	cmp	r3, #1
 8013e2c:	d015      	beq.n	8013e5a <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8013e2e:	683b      	ldr	r3, [r7, #0]
 8013e30:	691b      	ldr	r3, [r3, #16]
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	f000 8139 	beq.w	80140aa <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013e38:	697b      	ldr	r3, [r7, #20]
 8013e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013e40:	683b      	ldr	r3, [r7, #0]
 8013e42:	781b      	ldrb	r3, [r3, #0]
 8013e44:	f003 030f 	and.w	r3, r3, #15
 8013e48:	2101      	movs	r1, #1
 8013e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8013e4e:	6979      	ldr	r1, [r7, #20]
 8013e50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013e54:	4313      	orrs	r3, r2
 8013e56:	634b      	str	r3, [r1, #52]	; 0x34
 8013e58:	e127      	b.n	80140aa <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013e5a:	697b      	ldr	r3, [r7, #20]
 8013e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e60:	689b      	ldr	r3, [r3, #8]
 8013e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d110      	bne.n	8013e8c <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013e6a:	693b      	ldr	r3, [r7, #16]
 8013e6c:	015a      	lsls	r2, r3, #5
 8013e6e:	697b      	ldr	r3, [r7, #20]
 8013e70:	4413      	add	r3, r2
 8013e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	693a      	ldr	r2, [r7, #16]
 8013e7a:	0151      	lsls	r1, r2, #5
 8013e7c:	697a      	ldr	r2, [r7, #20]
 8013e7e:	440a      	add	r2, r1
 8013e80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013e84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013e88:	6013      	str	r3, [r2, #0]
 8013e8a:	e00f      	b.n	8013eac <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013e8c:	693b      	ldr	r3, [r7, #16]
 8013e8e:	015a      	lsls	r2, r3, #5
 8013e90:	697b      	ldr	r3, [r7, #20]
 8013e92:	4413      	add	r3, r2
 8013e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	693a      	ldr	r2, [r7, #16]
 8013e9c:	0151      	lsls	r1, r2, #5
 8013e9e:	697a      	ldr	r2, [r7, #20]
 8013ea0:	440a      	add	r2, r1
 8013ea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013eaa:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8013eac:	683b      	ldr	r3, [r7, #0]
 8013eae:	68d9      	ldr	r1, [r3, #12]
 8013eb0:	683b      	ldr	r3, [r7, #0]
 8013eb2:	781a      	ldrb	r2, [r3, #0]
 8013eb4:	683b      	ldr	r3, [r7, #0]
 8013eb6:	691b      	ldr	r3, [r3, #16]
 8013eb8:	b29b      	uxth	r3, r3
 8013eba:	6878      	ldr	r0, [r7, #4]
 8013ebc:	f000 f9a6 	bl	801420c <USB_WritePacket>
 8013ec0:	e0f3      	b.n	80140aa <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013ec2:	693b      	ldr	r3, [r7, #16]
 8013ec4:	015a      	lsls	r2, r3, #5
 8013ec6:	697b      	ldr	r3, [r7, #20]
 8013ec8:	4413      	add	r3, r2
 8013eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ece:	691b      	ldr	r3, [r3, #16]
 8013ed0:	693a      	ldr	r2, [r7, #16]
 8013ed2:	0151      	lsls	r1, r2, #5
 8013ed4:	697a      	ldr	r2, [r7, #20]
 8013ed6:	440a      	add	r2, r1
 8013ed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013edc:	0cdb      	lsrs	r3, r3, #19
 8013ede:	04db      	lsls	r3, r3, #19
 8013ee0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013ee2:	693b      	ldr	r3, [r7, #16]
 8013ee4:	015a      	lsls	r2, r3, #5
 8013ee6:	697b      	ldr	r3, [r7, #20]
 8013ee8:	4413      	add	r3, r2
 8013eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013eee:	691b      	ldr	r3, [r3, #16]
 8013ef0:	693a      	ldr	r2, [r7, #16]
 8013ef2:	0151      	lsls	r1, r2, #5
 8013ef4:	697a      	ldr	r2, [r7, #20]
 8013ef6:	440a      	add	r2, r1
 8013ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013efc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8013f00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8013f04:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8013f06:	693b      	ldr	r3, [r7, #16]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d12f      	bne.n	8013f6c <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8013f0c:	683b      	ldr	r3, [r7, #0]
 8013f0e:	691b      	ldr	r3, [r3, #16]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d003      	beq.n	8013f1c <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8013f14:	683b      	ldr	r3, [r7, #0]
 8013f16:	689a      	ldr	r2, [r3, #8]
 8013f18:	683b      	ldr	r3, [r7, #0]
 8013f1a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8013f1c:	683b      	ldr	r3, [r7, #0]
 8013f1e:	689a      	ldr	r2, [r3, #8]
 8013f20:	683b      	ldr	r3, [r7, #0]
 8013f22:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8013f24:	693b      	ldr	r3, [r7, #16]
 8013f26:	015a      	lsls	r2, r3, #5
 8013f28:	697b      	ldr	r3, [r7, #20]
 8013f2a:	4413      	add	r3, r2
 8013f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f30:	691a      	ldr	r2, [r3, #16]
 8013f32:	683b      	ldr	r3, [r7, #0]
 8013f34:	6a1b      	ldr	r3, [r3, #32]
 8013f36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013f3a:	6939      	ldr	r1, [r7, #16]
 8013f3c:	0148      	lsls	r0, r1, #5
 8013f3e:	6979      	ldr	r1, [r7, #20]
 8013f40:	4401      	add	r1, r0
 8013f42:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013f46:	4313      	orrs	r3, r2
 8013f48:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013f4a:	693b      	ldr	r3, [r7, #16]
 8013f4c:	015a      	lsls	r2, r3, #5
 8013f4e:	697b      	ldr	r3, [r7, #20]
 8013f50:	4413      	add	r3, r2
 8013f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f56:	691b      	ldr	r3, [r3, #16]
 8013f58:	693a      	ldr	r2, [r7, #16]
 8013f5a:	0151      	lsls	r1, r2, #5
 8013f5c:	697a      	ldr	r2, [r7, #20]
 8013f5e:	440a      	add	r2, r1
 8013f60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013f64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013f68:	6113      	str	r3, [r2, #16]
 8013f6a:	e061      	b.n	8014030 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8013f6c:	683b      	ldr	r3, [r7, #0]
 8013f6e:	691b      	ldr	r3, [r3, #16]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d125      	bne.n	8013fc0 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013f74:	693b      	ldr	r3, [r7, #16]
 8013f76:	015a      	lsls	r2, r3, #5
 8013f78:	697b      	ldr	r3, [r7, #20]
 8013f7a:	4413      	add	r3, r2
 8013f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f80:	691a      	ldr	r2, [r3, #16]
 8013f82:	683b      	ldr	r3, [r7, #0]
 8013f84:	689b      	ldr	r3, [r3, #8]
 8013f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013f8a:	6939      	ldr	r1, [r7, #16]
 8013f8c:	0148      	lsls	r0, r1, #5
 8013f8e:	6979      	ldr	r1, [r7, #20]
 8013f90:	4401      	add	r1, r0
 8013f92:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013f96:	4313      	orrs	r3, r2
 8013f98:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013f9a:	693b      	ldr	r3, [r7, #16]
 8013f9c:	015a      	lsls	r2, r3, #5
 8013f9e:	697b      	ldr	r3, [r7, #20]
 8013fa0:	4413      	add	r3, r2
 8013fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fa6:	691b      	ldr	r3, [r3, #16]
 8013fa8:	693a      	ldr	r2, [r7, #16]
 8013faa:	0151      	lsls	r1, r2, #5
 8013fac:	697a      	ldr	r2, [r7, #20]
 8013fae:	440a      	add	r2, r1
 8013fb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013fb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013fb8:	6113      	str	r3, [r2, #16]
 8013fba:	e039      	b.n	8014030 <USB_EPStartXfer+0x3dc>
 8013fbc:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013fc0:	683b      	ldr	r3, [r7, #0]
 8013fc2:	691a      	ldr	r2, [r3, #16]
 8013fc4:	683b      	ldr	r3, [r7, #0]
 8013fc6:	689b      	ldr	r3, [r3, #8]
 8013fc8:	4413      	add	r3, r2
 8013fca:	1e5a      	subs	r2, r3, #1
 8013fcc:	683b      	ldr	r3, [r7, #0]
 8013fce:	689b      	ldr	r3, [r3, #8]
 8013fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8013fd4:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8013fd6:	683b      	ldr	r3, [r7, #0]
 8013fd8:	689b      	ldr	r3, [r3, #8]
 8013fda:	89fa      	ldrh	r2, [r7, #14]
 8013fdc:	fb03 f202 	mul.w	r2, r3, r2
 8013fe0:	683b      	ldr	r3, [r7, #0]
 8013fe2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013fe4:	693b      	ldr	r3, [r7, #16]
 8013fe6:	015a      	lsls	r2, r3, #5
 8013fe8:	697b      	ldr	r3, [r7, #20]
 8013fea:	4413      	add	r3, r2
 8013fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ff0:	691a      	ldr	r2, [r3, #16]
 8013ff2:	89fb      	ldrh	r3, [r7, #14]
 8013ff4:	04d9      	lsls	r1, r3, #19
 8013ff6:	4b2f      	ldr	r3, [pc, #188]	; (80140b4 <USB_EPStartXfer+0x460>)
 8013ff8:	400b      	ands	r3, r1
 8013ffa:	6939      	ldr	r1, [r7, #16]
 8013ffc:	0148      	lsls	r0, r1, #5
 8013ffe:	6979      	ldr	r1, [r7, #20]
 8014000:	4401      	add	r1, r0
 8014002:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014006:	4313      	orrs	r3, r2
 8014008:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801400a:	693b      	ldr	r3, [r7, #16]
 801400c:	015a      	lsls	r2, r3, #5
 801400e:	697b      	ldr	r3, [r7, #20]
 8014010:	4413      	add	r3, r2
 8014012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014016:	691a      	ldr	r2, [r3, #16]
 8014018:	683b      	ldr	r3, [r7, #0]
 801401a:	6a1b      	ldr	r3, [r3, #32]
 801401c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014020:	6939      	ldr	r1, [r7, #16]
 8014022:	0148      	lsls	r0, r1, #5
 8014024:	6979      	ldr	r1, [r7, #20]
 8014026:	4401      	add	r1, r0
 8014028:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801402c:	4313      	orrs	r3, r2
 801402e:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8014030:	683b      	ldr	r3, [r7, #0]
 8014032:	791b      	ldrb	r3, [r3, #4]
 8014034:	2b01      	cmp	r3, #1
 8014036:	d128      	bne.n	801408a <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014038:	697b      	ldr	r3, [r7, #20]
 801403a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801403e:	689b      	ldr	r3, [r3, #8]
 8014040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014044:	2b00      	cmp	r3, #0
 8014046:	d110      	bne.n	801406a <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8014048:	693b      	ldr	r3, [r7, #16]
 801404a:	015a      	lsls	r2, r3, #5
 801404c:	697b      	ldr	r3, [r7, #20]
 801404e:	4413      	add	r3, r2
 8014050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	693a      	ldr	r2, [r7, #16]
 8014058:	0151      	lsls	r1, r2, #5
 801405a:	697a      	ldr	r2, [r7, #20]
 801405c:	440a      	add	r2, r1
 801405e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014062:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014066:	6013      	str	r3, [r2, #0]
 8014068:	e00f      	b.n	801408a <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801406a:	693b      	ldr	r3, [r7, #16]
 801406c:	015a      	lsls	r2, r3, #5
 801406e:	697b      	ldr	r3, [r7, #20]
 8014070:	4413      	add	r3, r2
 8014072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	693a      	ldr	r2, [r7, #16]
 801407a:	0151      	lsls	r1, r2, #5
 801407c:	697a      	ldr	r2, [r7, #20]
 801407e:	440a      	add	r2, r1
 8014080:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014088:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801408a:	693b      	ldr	r3, [r7, #16]
 801408c:	015a      	lsls	r2, r3, #5
 801408e:	697b      	ldr	r3, [r7, #20]
 8014090:	4413      	add	r3, r2
 8014092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	693a      	ldr	r2, [r7, #16]
 801409a:	0151      	lsls	r1, r2, #5
 801409c:	697a      	ldr	r2, [r7, #20]
 801409e:	440a      	add	r2, r1
 80140a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80140a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80140a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80140aa:	2300      	movs	r3, #0
}
 80140ac:	4618      	mov	r0, r3
 80140ae:	3718      	adds	r7, #24
 80140b0:	46bd      	mov	sp, r7
 80140b2:	bd80      	pop	{r7, pc}
 80140b4:	1ff80000 	.word	0x1ff80000

080140b8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80140b8:	b480      	push	{r7}
 80140ba:	b087      	sub	sp, #28
 80140bc:	af00      	add	r7, sp, #0
 80140be:	6078      	str	r0, [r7, #4]
 80140c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80140c2:	2300      	movs	r3, #0
 80140c4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80140c6:	2300      	movs	r3, #0
 80140c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80140ce:	683b      	ldr	r3, [r7, #0]
 80140d0:	785b      	ldrb	r3, [r3, #1]
 80140d2:	2b01      	cmp	r3, #1
 80140d4:	d14a      	bne.n	801416c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80140d6:	683b      	ldr	r3, [r7, #0]
 80140d8:	781b      	ldrb	r3, [r3, #0]
 80140da:	015a      	lsls	r2, r3, #5
 80140dc:	693b      	ldr	r3, [r7, #16]
 80140de:	4413      	add	r3, r2
 80140e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80140ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80140ee:	f040 8086 	bne.w	80141fe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80140f2:	683b      	ldr	r3, [r7, #0]
 80140f4:	781b      	ldrb	r3, [r3, #0]
 80140f6:	015a      	lsls	r2, r3, #5
 80140f8:	693b      	ldr	r3, [r7, #16]
 80140fa:	4413      	add	r3, r2
 80140fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	683a      	ldr	r2, [r7, #0]
 8014104:	7812      	ldrb	r2, [r2, #0]
 8014106:	0151      	lsls	r1, r2, #5
 8014108:	693a      	ldr	r2, [r7, #16]
 801410a:	440a      	add	r2, r1
 801410c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014110:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014114:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8014116:	683b      	ldr	r3, [r7, #0]
 8014118:	781b      	ldrb	r3, [r3, #0]
 801411a:	015a      	lsls	r2, r3, #5
 801411c:	693b      	ldr	r3, [r7, #16]
 801411e:	4413      	add	r3, r2
 8014120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	683a      	ldr	r2, [r7, #0]
 8014128:	7812      	ldrb	r2, [r2, #0]
 801412a:	0151      	lsls	r1, r2, #5
 801412c:	693a      	ldr	r2, [r7, #16]
 801412e:	440a      	add	r2, r1
 8014130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014134:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014138:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	3301      	adds	r3, #1
 801413e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	f242 7210 	movw	r2, #10000	; 0x2710
 8014146:	4293      	cmp	r3, r2
 8014148:	d902      	bls.n	8014150 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801414a:	2301      	movs	r3, #1
 801414c:	75fb      	strb	r3, [r7, #23]
          break;
 801414e:	e056      	b.n	80141fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8014150:	683b      	ldr	r3, [r7, #0]
 8014152:	781b      	ldrb	r3, [r3, #0]
 8014154:	015a      	lsls	r2, r3, #5
 8014156:	693b      	ldr	r3, [r7, #16]
 8014158:	4413      	add	r3, r2
 801415a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014164:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014168:	d0e7      	beq.n	801413a <USB_EPStopXfer+0x82>
 801416a:	e048      	b.n	80141fe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801416c:	683b      	ldr	r3, [r7, #0]
 801416e:	781b      	ldrb	r3, [r3, #0]
 8014170:	015a      	lsls	r2, r3, #5
 8014172:	693b      	ldr	r3, [r7, #16]
 8014174:	4413      	add	r3, r2
 8014176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014180:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014184:	d13b      	bne.n	80141fe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8014186:	683b      	ldr	r3, [r7, #0]
 8014188:	781b      	ldrb	r3, [r3, #0]
 801418a:	015a      	lsls	r2, r3, #5
 801418c:	693b      	ldr	r3, [r7, #16]
 801418e:	4413      	add	r3, r2
 8014190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	683a      	ldr	r2, [r7, #0]
 8014198:	7812      	ldrb	r2, [r2, #0]
 801419a:	0151      	lsls	r1, r2, #5
 801419c:	693a      	ldr	r2, [r7, #16]
 801419e:	440a      	add	r2, r1
 80141a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80141a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80141a8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80141aa:	683b      	ldr	r3, [r7, #0]
 80141ac:	781b      	ldrb	r3, [r3, #0]
 80141ae:	015a      	lsls	r2, r3, #5
 80141b0:	693b      	ldr	r3, [r7, #16]
 80141b2:	4413      	add	r3, r2
 80141b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	683a      	ldr	r2, [r7, #0]
 80141bc:	7812      	ldrb	r2, [r2, #0]
 80141be:	0151      	lsls	r1, r2, #5
 80141c0:	693a      	ldr	r2, [r7, #16]
 80141c2:	440a      	add	r2, r1
 80141c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80141c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80141cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	3301      	adds	r3, #1
 80141d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80141da:	4293      	cmp	r3, r2
 80141dc:	d902      	bls.n	80141e4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80141de:	2301      	movs	r3, #1
 80141e0:	75fb      	strb	r3, [r7, #23]
          break;
 80141e2:	e00c      	b.n	80141fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80141e4:	683b      	ldr	r3, [r7, #0]
 80141e6:	781b      	ldrb	r3, [r3, #0]
 80141e8:	015a      	lsls	r2, r3, #5
 80141ea:	693b      	ldr	r3, [r7, #16]
 80141ec:	4413      	add	r3, r2
 80141ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80141f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80141fc:	d0e7      	beq.n	80141ce <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80141fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8014200:	4618      	mov	r0, r3
 8014202:	371c      	adds	r7, #28
 8014204:	46bd      	mov	sp, r7
 8014206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801420a:	4770      	bx	lr

0801420c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 801420c:	b480      	push	{r7}
 801420e:	b089      	sub	sp, #36	; 0x24
 8014210:	af00      	add	r7, sp, #0
 8014212:	60f8      	str	r0, [r7, #12]
 8014214:	60b9      	str	r1, [r7, #8]
 8014216:	4611      	mov	r1, r2
 8014218:	461a      	mov	r2, r3
 801421a:	460b      	mov	r3, r1
 801421c:	71fb      	strb	r3, [r7, #7]
 801421e:	4613      	mov	r3, r2
 8014220:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8014226:	68bb      	ldr	r3, [r7, #8]
 8014228:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 801422a:	88bb      	ldrh	r3, [r7, #4]
 801422c:	3303      	adds	r3, #3
 801422e:	089b      	lsrs	r3, r3, #2
 8014230:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8014232:	2300      	movs	r3, #0
 8014234:	61bb      	str	r3, [r7, #24]
 8014236:	e018      	b.n	801426a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014238:	79fb      	ldrb	r3, [r7, #7]
 801423a:	031a      	lsls	r2, r3, #12
 801423c:	697b      	ldr	r3, [r7, #20]
 801423e:	4413      	add	r3, r2
 8014240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014244:	461a      	mov	r2, r3
 8014246:	69fb      	ldr	r3, [r7, #28]
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	6013      	str	r3, [r2, #0]
    pSrc++;
 801424c:	69fb      	ldr	r3, [r7, #28]
 801424e:	3301      	adds	r3, #1
 8014250:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8014252:	69fb      	ldr	r3, [r7, #28]
 8014254:	3301      	adds	r3, #1
 8014256:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8014258:	69fb      	ldr	r3, [r7, #28]
 801425a:	3301      	adds	r3, #1
 801425c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 801425e:	69fb      	ldr	r3, [r7, #28]
 8014260:	3301      	adds	r3, #1
 8014262:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8014264:	69bb      	ldr	r3, [r7, #24]
 8014266:	3301      	adds	r3, #1
 8014268:	61bb      	str	r3, [r7, #24]
 801426a:	69ba      	ldr	r2, [r7, #24]
 801426c:	693b      	ldr	r3, [r7, #16]
 801426e:	429a      	cmp	r2, r3
 8014270:	d3e2      	bcc.n	8014238 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8014272:	2300      	movs	r3, #0
}
 8014274:	4618      	mov	r0, r3
 8014276:	3724      	adds	r7, #36	; 0x24
 8014278:	46bd      	mov	sp, r7
 801427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801427e:	4770      	bx	lr

08014280 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8014280:	b480      	push	{r7}
 8014282:	b08b      	sub	sp, #44	; 0x2c
 8014284:	af00      	add	r7, sp, #0
 8014286:	60f8      	str	r0, [r7, #12]
 8014288:	60b9      	str	r1, [r7, #8]
 801428a:	4613      	mov	r3, r2
 801428c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8014292:	68bb      	ldr	r3, [r7, #8]
 8014294:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8014296:	88fb      	ldrh	r3, [r7, #6]
 8014298:	089b      	lsrs	r3, r3, #2
 801429a:	b29b      	uxth	r3, r3
 801429c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801429e:	88fb      	ldrh	r3, [r7, #6]
 80142a0:	f003 0303 	and.w	r3, r3, #3
 80142a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80142a6:	2300      	movs	r3, #0
 80142a8:	623b      	str	r3, [r7, #32]
 80142aa:	e014      	b.n	80142d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80142ac:	69bb      	ldr	r3, [r7, #24]
 80142ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80142b2:	681a      	ldr	r2, [r3, #0]
 80142b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80142b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ba:	3301      	adds	r3, #1
 80142bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80142be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142c0:	3301      	adds	r3, #1
 80142c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80142c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142c6:	3301      	adds	r3, #1
 80142c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80142ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142cc:	3301      	adds	r3, #1
 80142ce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80142d0:	6a3b      	ldr	r3, [r7, #32]
 80142d2:	3301      	adds	r3, #1
 80142d4:	623b      	str	r3, [r7, #32]
 80142d6:	6a3a      	ldr	r2, [r7, #32]
 80142d8:	697b      	ldr	r3, [r7, #20]
 80142da:	429a      	cmp	r2, r3
 80142dc:	d3e6      	bcc.n	80142ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80142de:	8bfb      	ldrh	r3, [r7, #30]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d01e      	beq.n	8014322 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80142e4:	2300      	movs	r3, #0
 80142e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80142e8:	69bb      	ldr	r3, [r7, #24]
 80142ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80142ee:	461a      	mov	r2, r3
 80142f0:	f107 0310 	add.w	r3, r7, #16
 80142f4:	6812      	ldr	r2, [r2, #0]
 80142f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80142f8:	693a      	ldr	r2, [r7, #16]
 80142fa:	6a3b      	ldr	r3, [r7, #32]
 80142fc:	b2db      	uxtb	r3, r3
 80142fe:	00db      	lsls	r3, r3, #3
 8014300:	fa22 f303 	lsr.w	r3, r2, r3
 8014304:	b2da      	uxtb	r2, r3
 8014306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014308:	701a      	strb	r2, [r3, #0]
      i++;
 801430a:	6a3b      	ldr	r3, [r7, #32]
 801430c:	3301      	adds	r3, #1
 801430e:	623b      	str	r3, [r7, #32]
      pDest++;
 8014310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014312:	3301      	adds	r3, #1
 8014314:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8014316:	8bfb      	ldrh	r3, [r7, #30]
 8014318:	3b01      	subs	r3, #1
 801431a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801431c:	8bfb      	ldrh	r3, [r7, #30]
 801431e:	2b00      	cmp	r3, #0
 8014320:	d1ea      	bne.n	80142f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8014322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014324:	4618      	mov	r0, r3
 8014326:	372c      	adds	r7, #44	; 0x2c
 8014328:	46bd      	mov	sp, r7
 801432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801432e:	4770      	bx	lr

08014330 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014330:	b480      	push	{r7}
 8014332:	b085      	sub	sp, #20
 8014334:	af00      	add	r7, sp, #0
 8014336:	6078      	str	r0, [r7, #4]
 8014338:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801433e:	683b      	ldr	r3, [r7, #0]
 8014340:	781b      	ldrb	r3, [r3, #0]
 8014342:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014344:	683b      	ldr	r3, [r7, #0]
 8014346:	785b      	ldrb	r3, [r3, #1]
 8014348:	2b01      	cmp	r3, #1
 801434a:	d12c      	bne.n	80143a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801434c:	68bb      	ldr	r3, [r7, #8]
 801434e:	015a      	lsls	r2, r3, #5
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	4413      	add	r3, r2
 8014354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	2b00      	cmp	r3, #0
 801435c:	db12      	blt.n	8014384 <USB_EPSetStall+0x54>
 801435e:	68bb      	ldr	r3, [r7, #8]
 8014360:	2b00      	cmp	r3, #0
 8014362:	d00f      	beq.n	8014384 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8014364:	68bb      	ldr	r3, [r7, #8]
 8014366:	015a      	lsls	r2, r3, #5
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	4413      	add	r3, r2
 801436c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	68ba      	ldr	r2, [r7, #8]
 8014374:	0151      	lsls	r1, r2, #5
 8014376:	68fa      	ldr	r2, [r7, #12]
 8014378:	440a      	add	r2, r1
 801437a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801437e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014382:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8014384:	68bb      	ldr	r3, [r7, #8]
 8014386:	015a      	lsls	r2, r3, #5
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	4413      	add	r3, r2
 801438c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	68ba      	ldr	r2, [r7, #8]
 8014394:	0151      	lsls	r1, r2, #5
 8014396:	68fa      	ldr	r2, [r7, #12]
 8014398:	440a      	add	r2, r1
 801439a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801439e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80143a2:	6013      	str	r3, [r2, #0]
 80143a4:	e02b      	b.n	80143fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80143a6:	68bb      	ldr	r3, [r7, #8]
 80143a8:	015a      	lsls	r2, r3, #5
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	4413      	add	r3, r2
 80143ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	db12      	blt.n	80143de <USB_EPSetStall+0xae>
 80143b8:	68bb      	ldr	r3, [r7, #8]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d00f      	beq.n	80143de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80143be:	68bb      	ldr	r3, [r7, #8]
 80143c0:	015a      	lsls	r2, r3, #5
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	4413      	add	r3, r2
 80143c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	68ba      	ldr	r2, [r7, #8]
 80143ce:	0151      	lsls	r1, r2, #5
 80143d0:	68fa      	ldr	r2, [r7, #12]
 80143d2:	440a      	add	r2, r1
 80143d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80143d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80143dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80143de:	68bb      	ldr	r3, [r7, #8]
 80143e0:	015a      	lsls	r2, r3, #5
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	4413      	add	r3, r2
 80143e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	68ba      	ldr	r2, [r7, #8]
 80143ee:	0151      	lsls	r1, r2, #5
 80143f0:	68fa      	ldr	r2, [r7, #12]
 80143f2:	440a      	add	r2, r1
 80143f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80143f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80143fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80143fe:	2300      	movs	r3, #0
}
 8014400:	4618      	mov	r0, r3
 8014402:	3714      	adds	r7, #20
 8014404:	46bd      	mov	sp, r7
 8014406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801440a:	4770      	bx	lr

0801440c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801440c:	b480      	push	{r7}
 801440e:	b085      	sub	sp, #20
 8014410:	af00      	add	r7, sp, #0
 8014412:	6078      	str	r0, [r7, #4]
 8014414:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801441a:	683b      	ldr	r3, [r7, #0]
 801441c:	781b      	ldrb	r3, [r3, #0]
 801441e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014420:	683b      	ldr	r3, [r7, #0]
 8014422:	785b      	ldrb	r3, [r3, #1]
 8014424:	2b01      	cmp	r3, #1
 8014426:	d128      	bne.n	801447a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014428:	68bb      	ldr	r3, [r7, #8]
 801442a:	015a      	lsls	r2, r3, #5
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	4413      	add	r3, r2
 8014430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	68ba      	ldr	r2, [r7, #8]
 8014438:	0151      	lsls	r1, r2, #5
 801443a:	68fa      	ldr	r2, [r7, #12]
 801443c:	440a      	add	r2, r1
 801443e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014442:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014446:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014448:	683b      	ldr	r3, [r7, #0]
 801444a:	791b      	ldrb	r3, [r3, #4]
 801444c:	2b03      	cmp	r3, #3
 801444e:	d003      	beq.n	8014458 <USB_EPClearStall+0x4c>
 8014450:	683b      	ldr	r3, [r7, #0]
 8014452:	791b      	ldrb	r3, [r3, #4]
 8014454:	2b02      	cmp	r3, #2
 8014456:	d138      	bne.n	80144ca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014458:	68bb      	ldr	r3, [r7, #8]
 801445a:	015a      	lsls	r2, r3, #5
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	4413      	add	r3, r2
 8014460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	68ba      	ldr	r2, [r7, #8]
 8014468:	0151      	lsls	r1, r2, #5
 801446a:	68fa      	ldr	r2, [r7, #12]
 801446c:	440a      	add	r2, r1
 801446e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014476:	6013      	str	r3, [r2, #0]
 8014478:	e027      	b.n	80144ca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801447a:	68bb      	ldr	r3, [r7, #8]
 801447c:	015a      	lsls	r2, r3, #5
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	4413      	add	r3, r2
 8014482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	68ba      	ldr	r2, [r7, #8]
 801448a:	0151      	lsls	r1, r2, #5
 801448c:	68fa      	ldr	r2, [r7, #12]
 801448e:	440a      	add	r2, r1
 8014490:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014494:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014498:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801449a:	683b      	ldr	r3, [r7, #0]
 801449c:	791b      	ldrb	r3, [r3, #4]
 801449e:	2b03      	cmp	r3, #3
 80144a0:	d003      	beq.n	80144aa <USB_EPClearStall+0x9e>
 80144a2:	683b      	ldr	r3, [r7, #0]
 80144a4:	791b      	ldrb	r3, [r3, #4]
 80144a6:	2b02      	cmp	r3, #2
 80144a8:	d10f      	bne.n	80144ca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80144aa:	68bb      	ldr	r3, [r7, #8]
 80144ac:	015a      	lsls	r2, r3, #5
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	4413      	add	r3, r2
 80144b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	68ba      	ldr	r2, [r7, #8]
 80144ba:	0151      	lsls	r1, r2, #5
 80144bc:	68fa      	ldr	r2, [r7, #12]
 80144be:	440a      	add	r2, r1
 80144c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80144c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80144c8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80144ca:	2300      	movs	r3, #0
}
 80144cc:	4618      	mov	r0, r3
 80144ce:	3714      	adds	r7, #20
 80144d0:	46bd      	mov	sp, r7
 80144d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d6:	4770      	bx	lr

080144d8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80144d8:	b480      	push	{r7}
 80144da:	b085      	sub	sp, #20
 80144dc:	af00      	add	r7, sp, #0
 80144de:	6078      	str	r0, [r7, #4]
 80144e0:	460b      	mov	r3, r1
 80144e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	68fa      	ldr	r2, [r7, #12]
 80144f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80144f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80144fa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014502:	681a      	ldr	r2, [r3, #0]
 8014504:	78fb      	ldrb	r3, [r7, #3]
 8014506:	011b      	lsls	r3, r3, #4
 8014508:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801450c:	68f9      	ldr	r1, [r7, #12]
 801450e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014512:	4313      	orrs	r3, r2
 8014514:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8014516:	2300      	movs	r3, #0
}
 8014518:	4618      	mov	r0, r3
 801451a:	3714      	adds	r7, #20
 801451c:	46bd      	mov	sp, r7
 801451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014522:	4770      	bx	lr

08014524 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014524:	b480      	push	{r7}
 8014526:	b085      	sub	sp, #20
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	68fa      	ldr	r2, [r7, #12]
 801453a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801453e:	f023 0303 	bic.w	r3, r3, #3
 8014542:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801454a:	685b      	ldr	r3, [r3, #4]
 801454c:	68fa      	ldr	r2, [r7, #12]
 801454e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014552:	f023 0302 	bic.w	r3, r3, #2
 8014556:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014558:	2300      	movs	r3, #0
}
 801455a:	4618      	mov	r0, r3
 801455c:	3714      	adds	r7, #20
 801455e:	46bd      	mov	sp, r7
 8014560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014564:	4770      	bx	lr

08014566 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014566:	b480      	push	{r7}
 8014568:	b085      	sub	sp, #20
 801456a:	af00      	add	r7, sp, #0
 801456c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	68fa      	ldr	r2, [r7, #12]
 801457c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014580:	f023 0303 	bic.w	r3, r3, #3
 8014584:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801458c:	685b      	ldr	r3, [r3, #4]
 801458e:	68fa      	ldr	r2, [r7, #12]
 8014590:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014594:	f043 0302 	orr.w	r3, r3, #2
 8014598:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801459a:	2300      	movs	r3, #0
}
 801459c:	4618      	mov	r0, r3
 801459e:	3714      	adds	r7, #20
 80145a0:	46bd      	mov	sp, r7
 80145a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a6:	4770      	bx	lr

080145a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80145a8:	b480      	push	{r7}
 80145aa:	b085      	sub	sp, #20
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	695b      	ldr	r3, [r3, #20]
 80145b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	699b      	ldr	r3, [r3, #24]
 80145ba:	68fa      	ldr	r2, [r7, #12]
 80145bc:	4013      	ands	r3, r2
 80145be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80145c0:	68fb      	ldr	r3, [r7, #12]
}
 80145c2:	4618      	mov	r0, r3
 80145c4:	3714      	adds	r7, #20
 80145c6:	46bd      	mov	sp, r7
 80145c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145cc:	4770      	bx	lr

080145ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80145ce:	b480      	push	{r7}
 80145d0:	b085      	sub	sp, #20
 80145d2:	af00      	add	r7, sp, #0
 80145d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80145e0:	699b      	ldr	r3, [r3, #24]
 80145e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80145ea:	69db      	ldr	r3, [r3, #28]
 80145ec:	68ba      	ldr	r2, [r7, #8]
 80145ee:	4013      	ands	r3, r2
 80145f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80145f2:	68bb      	ldr	r3, [r7, #8]
 80145f4:	0c1b      	lsrs	r3, r3, #16
}
 80145f6:	4618      	mov	r0, r3
 80145f8:	3714      	adds	r7, #20
 80145fa:	46bd      	mov	sp, r7
 80145fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014600:	4770      	bx	lr

08014602 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014602:	b480      	push	{r7}
 8014604:	b085      	sub	sp, #20
 8014606:	af00      	add	r7, sp, #0
 8014608:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014614:	699b      	ldr	r3, [r3, #24]
 8014616:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801461e:	69db      	ldr	r3, [r3, #28]
 8014620:	68ba      	ldr	r2, [r7, #8]
 8014622:	4013      	ands	r3, r2
 8014624:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014626:	68bb      	ldr	r3, [r7, #8]
 8014628:	b29b      	uxth	r3, r3
}
 801462a:	4618      	mov	r0, r3
 801462c:	3714      	adds	r7, #20
 801462e:	46bd      	mov	sp, r7
 8014630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014634:	4770      	bx	lr

08014636 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014636:	b480      	push	{r7}
 8014638:	b085      	sub	sp, #20
 801463a:	af00      	add	r7, sp, #0
 801463c:	6078      	str	r0, [r7, #4]
 801463e:	460b      	mov	r3, r1
 8014640:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014646:	78fb      	ldrb	r3, [r7, #3]
 8014648:	015a      	lsls	r2, r3, #5
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	4413      	add	r3, r2
 801464e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014652:	689b      	ldr	r3, [r3, #8]
 8014654:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801465c:	695b      	ldr	r3, [r3, #20]
 801465e:	68ba      	ldr	r2, [r7, #8]
 8014660:	4013      	ands	r3, r2
 8014662:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014664:	68bb      	ldr	r3, [r7, #8]
}
 8014666:	4618      	mov	r0, r3
 8014668:	3714      	adds	r7, #20
 801466a:	46bd      	mov	sp, r7
 801466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014670:	4770      	bx	lr

08014672 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014672:	b480      	push	{r7}
 8014674:	b087      	sub	sp, #28
 8014676:	af00      	add	r7, sp, #0
 8014678:	6078      	str	r0, [r7, #4]
 801467a:	460b      	mov	r3, r1
 801467c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8014682:	697b      	ldr	r3, [r7, #20]
 8014684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014688:	691b      	ldr	r3, [r3, #16]
 801468a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801468c:	697b      	ldr	r3, [r7, #20]
 801468e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014694:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014696:	78fb      	ldrb	r3, [r7, #3]
 8014698:	f003 030f 	and.w	r3, r3, #15
 801469c:	68fa      	ldr	r2, [r7, #12]
 801469e:	fa22 f303 	lsr.w	r3, r2, r3
 80146a2:	01db      	lsls	r3, r3, #7
 80146a4:	b2db      	uxtb	r3, r3
 80146a6:	693a      	ldr	r2, [r7, #16]
 80146a8:	4313      	orrs	r3, r2
 80146aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80146ac:	78fb      	ldrb	r3, [r7, #3]
 80146ae:	015a      	lsls	r2, r3, #5
 80146b0:	697b      	ldr	r3, [r7, #20]
 80146b2:	4413      	add	r3, r2
 80146b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80146b8:	689b      	ldr	r3, [r3, #8]
 80146ba:	693a      	ldr	r2, [r7, #16]
 80146bc:	4013      	ands	r3, r2
 80146be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80146c0:	68bb      	ldr	r3, [r7, #8]
}
 80146c2:	4618      	mov	r0, r3
 80146c4:	371c      	adds	r7, #28
 80146c6:	46bd      	mov	sp, r7
 80146c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146cc:	4770      	bx	lr

080146ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80146ce:	b480      	push	{r7}
 80146d0:	b083      	sub	sp, #12
 80146d2:	af00      	add	r7, sp, #0
 80146d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	695b      	ldr	r3, [r3, #20]
 80146da:	f003 0301 	and.w	r3, r3, #1
}
 80146de:	4618      	mov	r0, r3
 80146e0:	370c      	adds	r7, #12
 80146e2:	46bd      	mov	sp, r7
 80146e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e8:	4770      	bx	lr

080146ea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80146ea:	b480      	push	{r7}
 80146ec:	b085      	sub	sp, #20
 80146ee:	af00      	add	r7, sp, #0
 80146f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	68fa      	ldr	r2, [r7, #12]
 8014700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014704:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8014708:	f023 0307 	bic.w	r3, r3, #7
 801470c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014714:	685b      	ldr	r3, [r3, #4]
 8014716:	68fa      	ldr	r2, [r7, #12]
 8014718:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801471c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014720:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014722:	2300      	movs	r3, #0
}
 8014724:	4618      	mov	r0, r3
 8014726:	3714      	adds	r7, #20
 8014728:	46bd      	mov	sp, r7
 801472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801472e:	4770      	bx	lr

08014730 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8014730:	b480      	push	{r7}
 8014732:	b085      	sub	sp, #20
 8014734:	af00      	add	r7, sp, #0
 8014736:	6078      	str	r0, [r7, #4]
 8014738:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	333c      	adds	r3, #60	; 0x3c
 8014742:	3304      	adds	r3, #4
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014748:	68bb      	ldr	r3, [r7, #8]
 801474a:	4a1c      	ldr	r2, [pc, #112]	; (80147bc <USB_EP0_OutStart+0x8c>)
 801474c:	4293      	cmp	r3, r2
 801474e:	d90a      	bls.n	8014766 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801475c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014760:	d101      	bne.n	8014766 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8014762:	2300      	movs	r3, #0
 8014764:	e024      	b.n	80147b0 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801476c:	461a      	mov	r2, r3
 801476e:	2300      	movs	r3, #0
 8014770:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014778:	691b      	ldr	r3, [r3, #16]
 801477a:	68fa      	ldr	r2, [r7, #12]
 801477c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014780:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014784:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801478c:	691b      	ldr	r3, [r3, #16]
 801478e:	68fa      	ldr	r2, [r7, #12]
 8014790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014794:	f043 0318 	orr.w	r3, r3, #24
 8014798:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80147a0:	691b      	ldr	r3, [r3, #16]
 80147a2:	68fa      	ldr	r2, [r7, #12]
 80147a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80147a8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80147ac:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80147ae:	2300      	movs	r3, #0
}
 80147b0:	4618      	mov	r0, r3
 80147b2:	3714      	adds	r7, #20
 80147b4:	46bd      	mov	sp, r7
 80147b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ba:	4770      	bx	lr
 80147bc:	4f54300a 	.word	0x4f54300a

080147c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80147c0:	b480      	push	{r7}
 80147c2:	b085      	sub	sp, #20
 80147c4:	af00      	add	r7, sp, #0
 80147c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80147c8:	2300      	movs	r3, #0
 80147ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	3301      	adds	r3, #1
 80147d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	4a13      	ldr	r2, [pc, #76]	; (8014824 <USB_CoreReset+0x64>)
 80147d6:	4293      	cmp	r3, r2
 80147d8:	d901      	bls.n	80147de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80147da:	2303      	movs	r3, #3
 80147dc:	e01b      	b.n	8014816 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	691b      	ldr	r3, [r3, #16]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	daf2      	bge.n	80147cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80147e6:	2300      	movs	r3, #0
 80147e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	691b      	ldr	r3, [r3, #16]
 80147ee:	f043 0201 	orr.w	r2, r3, #1
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	3301      	adds	r3, #1
 80147fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	4a09      	ldr	r2, [pc, #36]	; (8014824 <USB_CoreReset+0x64>)
 8014800:	4293      	cmp	r3, r2
 8014802:	d901      	bls.n	8014808 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014804:	2303      	movs	r3, #3
 8014806:	e006      	b.n	8014816 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	691b      	ldr	r3, [r3, #16]
 801480c:	f003 0301 	and.w	r3, r3, #1
 8014810:	2b01      	cmp	r3, #1
 8014812:	d0f0      	beq.n	80147f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8014814:	2300      	movs	r3, #0
}
 8014816:	4618      	mov	r0, r3
 8014818:	3714      	adds	r7, #20
 801481a:	46bd      	mov	sp, r7
 801481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014820:	4770      	bx	lr
 8014822:	bf00      	nop
 8014824:	00030d40 	.word	0x00030d40

08014828 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8014828:	b580      	push	{r7, lr}
 801482a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801482c:	4904      	ldr	r1, [pc, #16]	; (8014840 <MX_FATFS_Init+0x18>)
 801482e:	4805      	ldr	r0, [pc, #20]	; (8014844 <MX_FATFS_Init+0x1c>)
 8014830:	f004 fb56 	bl	8018ee0 <FATFS_LinkDriver>
 8014834:	4603      	mov	r3, r0
 8014836:	461a      	mov	r2, r3
 8014838:	4b03      	ldr	r3, [pc, #12]	; (8014848 <MX_FATFS_Init+0x20>)
 801483a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801483c:	bf00      	nop
 801483e:	bd80      	pop	{r7, pc}
 8014840:	20000f0c 	.word	0x20000f0c
 8014844:	0801d164 	.word	0x0801d164
 8014848:	20000f08 	.word	0x20000f08

0801484c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801484c:	b480      	push	{r7}
 801484e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8014850:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8014852:	4618      	mov	r0, r3
 8014854:	46bd      	mov	sp, r7
 8014856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801485a:	4770      	bx	lr

0801485c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801485c:	b580      	push	{r7, lr}
 801485e:	b082      	sub	sp, #8
 8014860:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8014862:	2300      	movs	r3, #0
 8014864:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8014866:	f000 f885 	bl	8014974 <BSP_SD_IsDetected>
 801486a:	4603      	mov	r3, r0
 801486c:	2b01      	cmp	r3, #1
 801486e:	d001      	beq.n	8014874 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8014870:	2302      	movs	r3, #2
 8014872:	e012      	b.n	801489a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8014874:	480b      	ldr	r0, [pc, #44]	; (80148a4 <BSP_SD_Init+0x48>)
 8014876:	f7f8 fe21 	bl	800d4bc <HAL_SD_Init>
 801487a:	4603      	mov	r3, r0
 801487c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801487e:	79fb      	ldrb	r3, [r7, #7]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d109      	bne.n	8014898 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8014884:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8014888:	4806      	ldr	r0, [pc, #24]	; (80148a4 <BSP_SD_Init+0x48>)
 801488a:	f7f9 fcd5 	bl	800e238 <HAL_SD_ConfigWideBusOperation>
 801488e:	4603      	mov	r3, r0
 8014890:	2b00      	cmp	r3, #0
 8014892:	d001      	beq.n	8014898 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8014894:	2301      	movs	r3, #1
 8014896:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8014898:	79fb      	ldrb	r3, [r7, #7]
}
 801489a:	4618      	mov	r0, r3
 801489c:	3708      	adds	r7, #8
 801489e:	46bd      	mov	sp, r7
 80148a0:	bd80      	pop	{r7, pc}
 80148a2:	bf00      	nop
 80148a4:	2000059c 	.word	0x2000059c

080148a8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80148a8:	b580      	push	{r7, lr}
 80148aa:	b086      	sub	sp, #24
 80148ac:	af00      	add	r7, sp, #0
 80148ae:	60f8      	str	r0, [r7, #12]
 80148b0:	60b9      	str	r1, [r7, #8]
 80148b2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80148b4:	2300      	movs	r3, #0
 80148b6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	68ba      	ldr	r2, [r7, #8]
 80148bc:	68f9      	ldr	r1, [r7, #12]
 80148be:	4806      	ldr	r0, [pc, #24]	; (80148d8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80148c0:	f7f8 ff24 	bl	800d70c <HAL_SD_ReadBlocks_DMA>
 80148c4:	4603      	mov	r3, r0
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d001      	beq.n	80148ce <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80148ca:	2301      	movs	r3, #1
 80148cc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80148ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80148d0:	4618      	mov	r0, r3
 80148d2:	3718      	adds	r7, #24
 80148d4:	46bd      	mov	sp, r7
 80148d6:	bd80      	pop	{r7, pc}
 80148d8:	2000059c 	.word	0x2000059c

080148dc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	b086      	sub	sp, #24
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	60f8      	str	r0, [r7, #12]
 80148e4:	60b9      	str	r1, [r7, #8]
 80148e6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80148e8:	2300      	movs	r3, #0
 80148ea:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	68ba      	ldr	r2, [r7, #8]
 80148f0:	68f9      	ldr	r1, [r7, #12]
 80148f2:	4806      	ldr	r0, [pc, #24]	; (801490c <BSP_SD_WriteBlocks_DMA+0x30>)
 80148f4:	f7f8 ffb2 	bl	800d85c <HAL_SD_WriteBlocks_DMA>
 80148f8:	4603      	mov	r3, r0
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d001      	beq.n	8014902 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80148fe:	2301      	movs	r3, #1
 8014900:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014902:	7dfb      	ldrb	r3, [r7, #23]
}
 8014904:	4618      	mov	r0, r3
 8014906:	3718      	adds	r7, #24
 8014908:	46bd      	mov	sp, r7
 801490a:	bd80      	pop	{r7, pc}
 801490c:	2000059c 	.word	0x2000059c

08014910 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8014910:	b580      	push	{r7, lr}
 8014912:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8014914:	4805      	ldr	r0, [pc, #20]	; (801492c <BSP_SD_GetCardState+0x1c>)
 8014916:	f7f9 fda3 	bl	800e460 <HAL_SD_GetCardState>
 801491a:	4603      	mov	r3, r0
 801491c:	2b04      	cmp	r3, #4
 801491e:	bf14      	ite	ne
 8014920:	2301      	movne	r3, #1
 8014922:	2300      	moveq	r3, #0
 8014924:	b2db      	uxtb	r3, r3
}
 8014926:	4618      	mov	r0, r3
 8014928:	bd80      	pop	{r7, pc}
 801492a:	bf00      	nop
 801492c:	2000059c 	.word	0x2000059c

08014930 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8014930:	b580      	push	{r7, lr}
 8014932:	b082      	sub	sp, #8
 8014934:	af00      	add	r7, sp, #0
 8014936:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8014938:	6879      	ldr	r1, [r7, #4]
 801493a:	4803      	ldr	r0, [pc, #12]	; (8014948 <BSP_SD_GetCardInfo+0x18>)
 801493c:	f7f9 fc50 	bl	800e1e0 <HAL_SD_GetCardInfo>
}
 8014940:	bf00      	nop
 8014942:	3708      	adds	r7, #8
 8014944:	46bd      	mov	sp, r7
 8014946:	bd80      	pop	{r7, pc}
 8014948:	2000059c 	.word	0x2000059c

0801494c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801494c:	b580      	push	{r7, lr}
 801494e:	b082      	sub	sp, #8
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8014954:	f000 f99e 	bl	8014c94 <BSP_SD_WriteCpltCallback>
}
 8014958:	bf00      	nop
 801495a:	3708      	adds	r7, #8
 801495c:	46bd      	mov	sp, r7
 801495e:	bd80      	pop	{r7, pc}

08014960 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014960:	b580      	push	{r7, lr}
 8014962:	b082      	sub	sp, #8
 8014964:	af00      	add	r7, sp, #0
 8014966:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8014968:	f000 f9a0 	bl	8014cac <BSP_SD_ReadCpltCallback>
}
 801496c:	bf00      	nop
 801496e:	3708      	adds	r7, #8
 8014970:	46bd      	mov	sp, r7
 8014972:	bd80      	pop	{r7, pc}

08014974 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8014974:	b580      	push	{r7, lr}
 8014976:	b082      	sub	sp, #8
 8014978:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801497a:	2301      	movs	r3, #1
 801497c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 801497e:	f000 f80b 	bl	8014998 <BSP_PlatformIsDetected>
 8014982:	4603      	mov	r3, r0
 8014984:	2b00      	cmp	r3, #0
 8014986:	d101      	bne.n	801498c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8014988:	2300      	movs	r3, #0
 801498a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801498c:	79fb      	ldrb	r3, [r7, #7]
 801498e:	b2db      	uxtb	r3, r3
}
 8014990:	4618      	mov	r0, r3
 8014992:	3708      	adds	r7, #8
 8014994:	46bd      	mov	sp, r7
 8014996:	bd80      	pop	{r7, pc}

08014998 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8014998:	b580      	push	{r7, lr}
 801499a:	b082      	sub	sp, #8
 801499c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801499e:	2301      	movs	r3, #1
 80149a0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 80149a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80149a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80149aa:	f7f3 fc6b 	bl	8008284 <HAL_GPIO_ReadPin>
 80149ae:	4603      	mov	r3, r0
 80149b0:	2b01      	cmp	r3, #1
 80149b2:	d001      	beq.n	80149b8 <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 80149b4:	2300      	movs	r3, #0
 80149b6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80149b8:	79fb      	ldrb	r3, [r7, #7]
}
 80149ba:	4618      	mov	r0, r3
 80149bc:	3708      	adds	r7, #8
 80149be:	46bd      	mov	sp, r7
 80149c0:	bd80      	pop	{r7, pc}

080149c2 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80149c2:	b580      	push	{r7, lr}
 80149c4:	b084      	sub	sp, #16
 80149c6:	af00      	add	r7, sp, #0
 80149c8:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80149ca:	f7f2 fd67 	bl	800749c <HAL_GetTick>
 80149ce:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80149d0:	e006      	b.n	80149e0 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80149d2:	f7ff ff9d 	bl	8014910 <BSP_SD_GetCardState>
 80149d6:	4603      	mov	r3, r0
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d101      	bne.n	80149e0 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80149dc:	2300      	movs	r3, #0
 80149de:	e009      	b.n	80149f4 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80149e0:	f7f2 fd5c 	bl	800749c <HAL_GetTick>
 80149e4:	4602      	mov	r2, r0
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	1ad3      	subs	r3, r2, r3
 80149ea:	687a      	ldr	r2, [r7, #4]
 80149ec:	429a      	cmp	r2, r3
 80149ee:	d8f0      	bhi.n	80149d2 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80149f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80149f4:	4618      	mov	r0, r3
 80149f6:	3710      	adds	r7, #16
 80149f8:	46bd      	mov	sp, r7
 80149fa:	bd80      	pop	{r7, pc}

080149fc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b082      	sub	sp, #8
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	4603      	mov	r3, r0
 8014a04:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8014a06:	4b0b      	ldr	r3, [pc, #44]	; (8014a34 <SD_CheckStatus+0x38>)
 8014a08:	2201      	movs	r2, #1
 8014a0a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8014a0c:	f7ff ff80 	bl	8014910 <BSP_SD_GetCardState>
 8014a10:	4603      	mov	r3, r0
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d107      	bne.n	8014a26 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8014a16:	4b07      	ldr	r3, [pc, #28]	; (8014a34 <SD_CheckStatus+0x38>)
 8014a18:	781b      	ldrb	r3, [r3, #0]
 8014a1a:	b2db      	uxtb	r3, r3
 8014a1c:	f023 0301 	bic.w	r3, r3, #1
 8014a20:	b2da      	uxtb	r2, r3
 8014a22:	4b04      	ldr	r3, [pc, #16]	; (8014a34 <SD_CheckStatus+0x38>)
 8014a24:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8014a26:	4b03      	ldr	r3, [pc, #12]	; (8014a34 <SD_CheckStatus+0x38>)
 8014a28:	781b      	ldrb	r3, [r3, #0]
 8014a2a:	b2db      	uxtb	r3, r3
}
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	3708      	adds	r7, #8
 8014a30:	46bd      	mov	sp, r7
 8014a32:	bd80      	pop	{r7, pc}
 8014a34:	2000000d 	.word	0x2000000d

08014a38 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	b082      	sub	sp, #8
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	4603      	mov	r3, r0
 8014a40:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8014a42:	f7ff ff0b 	bl	801485c <BSP_SD_Init>
 8014a46:	4603      	mov	r3, r0
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d107      	bne.n	8014a5c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8014a4c:	79fb      	ldrb	r3, [r7, #7]
 8014a4e:	4618      	mov	r0, r3
 8014a50:	f7ff ffd4 	bl	80149fc <SD_CheckStatus>
 8014a54:	4603      	mov	r3, r0
 8014a56:	461a      	mov	r2, r3
 8014a58:	4b04      	ldr	r3, [pc, #16]	; (8014a6c <SD_initialize+0x34>)
 8014a5a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8014a5c:	4b03      	ldr	r3, [pc, #12]	; (8014a6c <SD_initialize+0x34>)
 8014a5e:	781b      	ldrb	r3, [r3, #0]
 8014a60:	b2db      	uxtb	r3, r3
}
 8014a62:	4618      	mov	r0, r3
 8014a64:	3708      	adds	r7, #8
 8014a66:	46bd      	mov	sp, r7
 8014a68:	bd80      	pop	{r7, pc}
 8014a6a:	bf00      	nop
 8014a6c:	2000000d 	.word	0x2000000d

08014a70 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8014a70:	b580      	push	{r7, lr}
 8014a72:	b082      	sub	sp, #8
 8014a74:	af00      	add	r7, sp, #0
 8014a76:	4603      	mov	r3, r0
 8014a78:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8014a7a:	79fb      	ldrb	r3, [r7, #7]
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	f7ff ffbd 	bl	80149fc <SD_CheckStatus>
 8014a82:	4603      	mov	r3, r0
}
 8014a84:	4618      	mov	r0, r3
 8014a86:	3708      	adds	r7, #8
 8014a88:	46bd      	mov	sp, r7
 8014a8a:	bd80      	pop	{r7, pc}

08014a8c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b086      	sub	sp, #24
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	60b9      	str	r1, [r7, #8]
 8014a94:	607a      	str	r2, [r7, #4]
 8014a96:	603b      	str	r3, [r7, #0]
 8014a98:	4603      	mov	r3, r0
 8014a9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014a9c:	2301      	movs	r3, #1
 8014a9e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014aa0:	f247 5030 	movw	r0, #30000	; 0x7530
 8014aa4:	f7ff ff8d 	bl	80149c2 <SD_CheckStatusWithTimeout>
 8014aa8:	4603      	mov	r3, r0
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	da01      	bge.n	8014ab2 <SD_read+0x26>
  {
    return res;
 8014aae:	7dfb      	ldrb	r3, [r7, #23]
 8014ab0:	e03b      	b.n	8014b2a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8014ab2:	683a      	ldr	r2, [r7, #0]
 8014ab4:	6879      	ldr	r1, [r7, #4]
 8014ab6:	68b8      	ldr	r0, [r7, #8]
 8014ab8:	f7ff fef6 	bl	80148a8 <BSP_SD_ReadBlocks_DMA>
 8014abc:	4603      	mov	r3, r0
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d132      	bne.n	8014b28 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8014ac2:	4b1c      	ldr	r3, [pc, #112]	; (8014b34 <SD_read+0xa8>)
 8014ac4:	2200      	movs	r2, #0
 8014ac6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8014ac8:	f7f2 fce8 	bl	800749c <HAL_GetTick>
 8014acc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014ace:	bf00      	nop
 8014ad0:	4b18      	ldr	r3, [pc, #96]	; (8014b34 <SD_read+0xa8>)
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d108      	bne.n	8014aea <SD_read+0x5e>
 8014ad8:	f7f2 fce0 	bl	800749c <HAL_GetTick>
 8014adc:	4602      	mov	r2, r0
 8014ade:	693b      	ldr	r3, [r7, #16]
 8014ae0:	1ad3      	subs	r3, r2, r3
 8014ae2:	f247 522f 	movw	r2, #29999	; 0x752f
 8014ae6:	4293      	cmp	r3, r2
 8014ae8:	d9f2      	bls.n	8014ad0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8014aea:	4b12      	ldr	r3, [pc, #72]	; (8014b34 <SD_read+0xa8>)
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d102      	bne.n	8014af8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8014af2:	2301      	movs	r3, #1
 8014af4:	75fb      	strb	r3, [r7, #23]
 8014af6:	e017      	b.n	8014b28 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8014af8:	4b0e      	ldr	r3, [pc, #56]	; (8014b34 <SD_read+0xa8>)
 8014afa:	2200      	movs	r2, #0
 8014afc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014afe:	f7f2 fccd 	bl	800749c <HAL_GetTick>
 8014b02:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014b04:	e007      	b.n	8014b16 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014b06:	f7ff ff03 	bl	8014910 <BSP_SD_GetCardState>
 8014b0a:	4603      	mov	r3, r0
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d102      	bne.n	8014b16 <SD_read+0x8a>
          {
            res = RES_OK;
 8014b10:	2300      	movs	r3, #0
 8014b12:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8014b14:	e008      	b.n	8014b28 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014b16:	f7f2 fcc1 	bl	800749c <HAL_GetTick>
 8014b1a:	4602      	mov	r2, r0
 8014b1c:	693b      	ldr	r3, [r7, #16]
 8014b1e:	1ad3      	subs	r3, r2, r3
 8014b20:	f247 522f 	movw	r2, #29999	; 0x752f
 8014b24:	4293      	cmp	r3, r2
 8014b26:	d9ee      	bls.n	8014b06 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8014b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	3718      	adds	r7, #24
 8014b2e:	46bd      	mov	sp, r7
 8014b30:	bd80      	pop	{r7, pc}
 8014b32:	bf00      	nop
 8014b34:	20001374 	.word	0x20001374

08014b38 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8014b38:	b580      	push	{r7, lr}
 8014b3a:	b086      	sub	sp, #24
 8014b3c:	af00      	add	r7, sp, #0
 8014b3e:	60b9      	str	r1, [r7, #8]
 8014b40:	607a      	str	r2, [r7, #4]
 8014b42:	603b      	str	r3, [r7, #0]
 8014b44:	4603      	mov	r3, r0
 8014b46:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014b48:	2301      	movs	r3, #1
 8014b4a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8014b4c:	4b24      	ldr	r3, [pc, #144]	; (8014be0 <SD_write+0xa8>)
 8014b4e:	2200      	movs	r2, #0
 8014b50:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014b52:	f247 5030 	movw	r0, #30000	; 0x7530
 8014b56:	f7ff ff34 	bl	80149c2 <SD_CheckStatusWithTimeout>
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	da01      	bge.n	8014b64 <SD_write+0x2c>
  {
    return res;
 8014b60:	7dfb      	ldrb	r3, [r7, #23]
 8014b62:	e038      	b.n	8014bd6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8014b64:	683a      	ldr	r2, [r7, #0]
 8014b66:	6879      	ldr	r1, [r7, #4]
 8014b68:	68b8      	ldr	r0, [r7, #8]
 8014b6a:	f7ff feb7 	bl	80148dc <BSP_SD_WriteBlocks_DMA>
 8014b6e:	4603      	mov	r3, r0
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d12f      	bne.n	8014bd4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8014b74:	f7f2 fc92 	bl	800749c <HAL_GetTick>
 8014b78:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014b7a:	bf00      	nop
 8014b7c:	4b18      	ldr	r3, [pc, #96]	; (8014be0 <SD_write+0xa8>)
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d108      	bne.n	8014b96 <SD_write+0x5e>
 8014b84:	f7f2 fc8a 	bl	800749c <HAL_GetTick>
 8014b88:	4602      	mov	r2, r0
 8014b8a:	693b      	ldr	r3, [r7, #16]
 8014b8c:	1ad3      	subs	r3, r2, r3
 8014b8e:	f247 522f 	movw	r2, #29999	; 0x752f
 8014b92:	4293      	cmp	r3, r2
 8014b94:	d9f2      	bls.n	8014b7c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8014b96:	4b12      	ldr	r3, [pc, #72]	; (8014be0 <SD_write+0xa8>)
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d102      	bne.n	8014ba4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8014b9e:	2301      	movs	r3, #1
 8014ba0:	75fb      	strb	r3, [r7, #23]
 8014ba2:	e017      	b.n	8014bd4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8014ba4:	4b0e      	ldr	r3, [pc, #56]	; (8014be0 <SD_write+0xa8>)
 8014ba6:	2200      	movs	r2, #0
 8014ba8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014baa:	f7f2 fc77 	bl	800749c <HAL_GetTick>
 8014bae:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014bb0:	e007      	b.n	8014bc2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014bb2:	f7ff fead 	bl	8014910 <BSP_SD_GetCardState>
 8014bb6:	4603      	mov	r3, r0
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d102      	bne.n	8014bc2 <SD_write+0x8a>
          {
            res = RES_OK;
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	75fb      	strb	r3, [r7, #23]
            break;
 8014bc0:	e008      	b.n	8014bd4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014bc2:	f7f2 fc6b 	bl	800749c <HAL_GetTick>
 8014bc6:	4602      	mov	r2, r0
 8014bc8:	693b      	ldr	r3, [r7, #16]
 8014bca:	1ad3      	subs	r3, r2, r3
 8014bcc:	f247 522f 	movw	r2, #29999	; 0x752f
 8014bd0:	4293      	cmp	r3, r2
 8014bd2:	d9ee      	bls.n	8014bb2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8014bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	3718      	adds	r7, #24
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	bd80      	pop	{r7, pc}
 8014bde:	bf00      	nop
 8014be0:	20001370 	.word	0x20001370

08014be4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b08c      	sub	sp, #48	; 0x30
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	4603      	mov	r3, r0
 8014bec:	603a      	str	r2, [r7, #0]
 8014bee:	71fb      	strb	r3, [r7, #7]
 8014bf0:	460b      	mov	r3, r1
 8014bf2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014bf4:	2301      	movs	r3, #1
 8014bf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8014bfa:	4b25      	ldr	r3, [pc, #148]	; (8014c90 <SD_ioctl+0xac>)
 8014bfc:	781b      	ldrb	r3, [r3, #0]
 8014bfe:	b2db      	uxtb	r3, r3
 8014c00:	f003 0301 	and.w	r3, r3, #1
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d001      	beq.n	8014c0c <SD_ioctl+0x28>
 8014c08:	2303      	movs	r3, #3
 8014c0a:	e03c      	b.n	8014c86 <SD_ioctl+0xa2>

  switch (cmd)
 8014c0c:	79bb      	ldrb	r3, [r7, #6]
 8014c0e:	2b03      	cmp	r3, #3
 8014c10:	d834      	bhi.n	8014c7c <SD_ioctl+0x98>
 8014c12:	a201      	add	r2, pc, #4	; (adr r2, 8014c18 <SD_ioctl+0x34>)
 8014c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c18:	08014c29 	.word	0x08014c29
 8014c1c:	08014c31 	.word	0x08014c31
 8014c20:	08014c49 	.word	0x08014c49
 8014c24:	08014c63 	.word	0x08014c63
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8014c28:	2300      	movs	r3, #0
 8014c2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014c2e:	e028      	b.n	8014c82 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8014c30:	f107 0308 	add.w	r3, r7, #8
 8014c34:	4618      	mov	r0, r3
 8014c36:	f7ff fe7b 	bl	8014930 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8014c3a:	6a3a      	ldr	r2, [r7, #32]
 8014c3c:	683b      	ldr	r3, [r7, #0]
 8014c3e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014c40:	2300      	movs	r3, #0
 8014c42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014c46:	e01c      	b.n	8014c82 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014c48:	f107 0308 	add.w	r3, r7, #8
 8014c4c:	4618      	mov	r0, r3
 8014c4e:	f7ff fe6f 	bl	8014930 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8014c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c54:	b29a      	uxth	r2, r3
 8014c56:	683b      	ldr	r3, [r7, #0]
 8014c58:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014c60:	e00f      	b.n	8014c82 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014c62:	f107 0308 	add.w	r3, r7, #8
 8014c66:	4618      	mov	r0, r3
 8014c68:	f7ff fe62 	bl	8014930 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c6e:	0a5a      	lsrs	r2, r3, #9
 8014c70:	683b      	ldr	r3, [r7, #0]
 8014c72:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014c74:	2300      	movs	r3, #0
 8014c76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014c7a:	e002      	b.n	8014c82 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014c7c:	2304      	movs	r3, #4
 8014c7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8014c82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014c86:	4618      	mov	r0, r3
 8014c88:	3730      	adds	r7, #48	; 0x30
 8014c8a:	46bd      	mov	sp, r7
 8014c8c:	bd80      	pop	{r7, pc}
 8014c8e:	bf00      	nop
 8014c90:	2000000d 	.word	0x2000000d

08014c94 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8014c94:	b480      	push	{r7}
 8014c96:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8014c98:	4b03      	ldr	r3, [pc, #12]	; (8014ca8 <BSP_SD_WriteCpltCallback+0x14>)
 8014c9a:	2201      	movs	r2, #1
 8014c9c:	601a      	str	r2, [r3, #0]
}
 8014c9e:	bf00      	nop
 8014ca0:	46bd      	mov	sp, r7
 8014ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ca6:	4770      	bx	lr
 8014ca8:	20001370 	.word	0x20001370

08014cac <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014cac:	b480      	push	{r7}
 8014cae:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8014cb0:	4b03      	ldr	r3, [pc, #12]	; (8014cc0 <BSP_SD_ReadCpltCallback+0x14>)
 8014cb2:	2201      	movs	r2, #1
 8014cb4:	601a      	str	r2, [r3, #0]
}
 8014cb6:	bf00      	nop
 8014cb8:	46bd      	mov	sp, r7
 8014cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cbe:	4770      	bx	lr
 8014cc0:	20001374 	.word	0x20001374

08014cc4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014cc4:	b580      	push	{r7, lr}
 8014cc6:	b084      	sub	sp, #16
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	6078      	str	r0, [r7, #4]
 8014ccc:	460b      	mov	r3, r1
 8014cce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014cd0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014cd4:	f004 fef2 	bl	8019abc <USBD_static_malloc>
 8014cd8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d109      	bne.n	8014cf4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	32b0      	adds	r2, #176	; 0xb0
 8014cea:	2100      	movs	r1, #0
 8014cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014cf0:	2302      	movs	r3, #2
 8014cf2:	e0d4      	b.n	8014e9e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014cf4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8014cf8:	2100      	movs	r1, #0
 8014cfa:	68f8      	ldr	r0, [r7, #12]
 8014cfc:	f004 ff3e 	bl	8019b7c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	32b0      	adds	r2, #176	; 0xb0
 8014d0a:	68f9      	ldr	r1, [r7, #12]
 8014d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	32b0      	adds	r2, #176	; 0xb0
 8014d1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	7c1b      	ldrb	r3, [r3, #16]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d138      	bne.n	8014d9e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014d2c:	4b5e      	ldr	r3, [pc, #376]	; (8014ea8 <USBD_CDC_Init+0x1e4>)
 8014d2e:	7819      	ldrb	r1, [r3, #0]
 8014d30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014d34:	2202      	movs	r2, #2
 8014d36:	6878      	ldr	r0, [r7, #4]
 8014d38:	f004 fcfa 	bl	8019730 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014d3c:	4b5a      	ldr	r3, [pc, #360]	; (8014ea8 <USBD_CDC_Init+0x1e4>)
 8014d3e:	781b      	ldrb	r3, [r3, #0]
 8014d40:	f003 020f 	and.w	r2, r3, #15
 8014d44:	6879      	ldr	r1, [r7, #4]
 8014d46:	4613      	mov	r3, r2
 8014d48:	009b      	lsls	r3, r3, #2
 8014d4a:	4413      	add	r3, r2
 8014d4c:	009b      	lsls	r3, r3, #2
 8014d4e:	440b      	add	r3, r1
 8014d50:	3324      	adds	r3, #36	; 0x24
 8014d52:	2201      	movs	r2, #1
 8014d54:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014d56:	4b55      	ldr	r3, [pc, #340]	; (8014eac <USBD_CDC_Init+0x1e8>)
 8014d58:	7819      	ldrb	r1, [r3, #0]
 8014d5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014d5e:	2202      	movs	r2, #2
 8014d60:	6878      	ldr	r0, [r7, #4]
 8014d62:	f004 fce5 	bl	8019730 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014d66:	4b51      	ldr	r3, [pc, #324]	; (8014eac <USBD_CDC_Init+0x1e8>)
 8014d68:	781b      	ldrb	r3, [r3, #0]
 8014d6a:	f003 020f 	and.w	r2, r3, #15
 8014d6e:	6879      	ldr	r1, [r7, #4]
 8014d70:	4613      	mov	r3, r2
 8014d72:	009b      	lsls	r3, r3, #2
 8014d74:	4413      	add	r3, r2
 8014d76:	009b      	lsls	r3, r3, #2
 8014d78:	440b      	add	r3, r1
 8014d7a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014d7e:	2201      	movs	r2, #1
 8014d80:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014d82:	4b4b      	ldr	r3, [pc, #300]	; (8014eb0 <USBD_CDC_Init+0x1ec>)
 8014d84:	781b      	ldrb	r3, [r3, #0]
 8014d86:	f003 020f 	and.w	r2, r3, #15
 8014d8a:	6879      	ldr	r1, [r7, #4]
 8014d8c:	4613      	mov	r3, r2
 8014d8e:	009b      	lsls	r3, r3, #2
 8014d90:	4413      	add	r3, r2
 8014d92:	009b      	lsls	r3, r3, #2
 8014d94:	440b      	add	r3, r1
 8014d96:	3326      	adds	r3, #38	; 0x26
 8014d98:	2210      	movs	r2, #16
 8014d9a:	801a      	strh	r2, [r3, #0]
 8014d9c:	e035      	b.n	8014e0a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014d9e:	4b42      	ldr	r3, [pc, #264]	; (8014ea8 <USBD_CDC_Init+0x1e4>)
 8014da0:	7819      	ldrb	r1, [r3, #0]
 8014da2:	2340      	movs	r3, #64	; 0x40
 8014da4:	2202      	movs	r2, #2
 8014da6:	6878      	ldr	r0, [r7, #4]
 8014da8:	f004 fcc2 	bl	8019730 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014dac:	4b3e      	ldr	r3, [pc, #248]	; (8014ea8 <USBD_CDC_Init+0x1e4>)
 8014dae:	781b      	ldrb	r3, [r3, #0]
 8014db0:	f003 020f 	and.w	r2, r3, #15
 8014db4:	6879      	ldr	r1, [r7, #4]
 8014db6:	4613      	mov	r3, r2
 8014db8:	009b      	lsls	r3, r3, #2
 8014dba:	4413      	add	r3, r2
 8014dbc:	009b      	lsls	r3, r3, #2
 8014dbe:	440b      	add	r3, r1
 8014dc0:	3324      	adds	r3, #36	; 0x24
 8014dc2:	2201      	movs	r2, #1
 8014dc4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014dc6:	4b39      	ldr	r3, [pc, #228]	; (8014eac <USBD_CDC_Init+0x1e8>)
 8014dc8:	7819      	ldrb	r1, [r3, #0]
 8014dca:	2340      	movs	r3, #64	; 0x40
 8014dcc:	2202      	movs	r2, #2
 8014dce:	6878      	ldr	r0, [r7, #4]
 8014dd0:	f004 fcae 	bl	8019730 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014dd4:	4b35      	ldr	r3, [pc, #212]	; (8014eac <USBD_CDC_Init+0x1e8>)
 8014dd6:	781b      	ldrb	r3, [r3, #0]
 8014dd8:	f003 020f 	and.w	r2, r3, #15
 8014ddc:	6879      	ldr	r1, [r7, #4]
 8014dde:	4613      	mov	r3, r2
 8014de0:	009b      	lsls	r3, r3, #2
 8014de2:	4413      	add	r3, r2
 8014de4:	009b      	lsls	r3, r3, #2
 8014de6:	440b      	add	r3, r1
 8014de8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014dec:	2201      	movs	r2, #1
 8014dee:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014df0:	4b2f      	ldr	r3, [pc, #188]	; (8014eb0 <USBD_CDC_Init+0x1ec>)
 8014df2:	781b      	ldrb	r3, [r3, #0]
 8014df4:	f003 020f 	and.w	r2, r3, #15
 8014df8:	6879      	ldr	r1, [r7, #4]
 8014dfa:	4613      	mov	r3, r2
 8014dfc:	009b      	lsls	r3, r3, #2
 8014dfe:	4413      	add	r3, r2
 8014e00:	009b      	lsls	r3, r3, #2
 8014e02:	440b      	add	r3, r1
 8014e04:	3326      	adds	r3, #38	; 0x26
 8014e06:	2210      	movs	r2, #16
 8014e08:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014e0a:	4b29      	ldr	r3, [pc, #164]	; (8014eb0 <USBD_CDC_Init+0x1ec>)
 8014e0c:	7819      	ldrb	r1, [r3, #0]
 8014e0e:	2308      	movs	r3, #8
 8014e10:	2203      	movs	r2, #3
 8014e12:	6878      	ldr	r0, [r7, #4]
 8014e14:	f004 fc8c 	bl	8019730 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8014e18:	4b25      	ldr	r3, [pc, #148]	; (8014eb0 <USBD_CDC_Init+0x1ec>)
 8014e1a:	781b      	ldrb	r3, [r3, #0]
 8014e1c:	f003 020f 	and.w	r2, r3, #15
 8014e20:	6879      	ldr	r1, [r7, #4]
 8014e22:	4613      	mov	r3, r2
 8014e24:	009b      	lsls	r3, r3, #2
 8014e26:	4413      	add	r3, r2
 8014e28:	009b      	lsls	r3, r3, #2
 8014e2a:	440b      	add	r3, r1
 8014e2c:	3324      	adds	r3, #36	; 0x24
 8014e2e:	2201      	movs	r2, #1
 8014e30:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	2200      	movs	r2, #0
 8014e36:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014e40:	687a      	ldr	r2, [r7, #4]
 8014e42:	33b0      	adds	r3, #176	; 0xb0
 8014e44:	009b      	lsls	r3, r3, #2
 8014e46:	4413      	add	r3, r2
 8014e48:	685b      	ldr	r3, [r3, #4]
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	2200      	movs	r2, #0
 8014e52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	2200      	movs	r2, #0
 8014e5a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d101      	bne.n	8014e6c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8014e68:	2302      	movs	r3, #2
 8014e6a:	e018      	b.n	8014e9e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	7c1b      	ldrb	r3, [r3, #16]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d10a      	bne.n	8014e8a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014e74:	4b0d      	ldr	r3, [pc, #52]	; (8014eac <USBD_CDC_Init+0x1e8>)
 8014e76:	7819      	ldrb	r1, [r3, #0]
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014e7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014e82:	6878      	ldr	r0, [r7, #4]
 8014e84:	f004 fdce 	bl	8019a24 <USBD_LL_PrepareReceive>
 8014e88:	e008      	b.n	8014e9c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014e8a:	4b08      	ldr	r3, [pc, #32]	; (8014eac <USBD_CDC_Init+0x1e8>)
 8014e8c:	7819      	ldrb	r1, [r3, #0]
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014e94:	2340      	movs	r3, #64	; 0x40
 8014e96:	6878      	ldr	r0, [r7, #4]
 8014e98:	f004 fdc4 	bl	8019a24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014e9c:	2300      	movs	r3, #0
}
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	3710      	adds	r7, #16
 8014ea2:	46bd      	mov	sp, r7
 8014ea4:	bd80      	pop	{r7, pc}
 8014ea6:	bf00      	nop
 8014ea8:	20000097 	.word	0x20000097
 8014eac:	20000098 	.word	0x20000098
 8014eb0:	20000099 	.word	0x20000099

08014eb4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014eb4:	b580      	push	{r7, lr}
 8014eb6:	b082      	sub	sp, #8
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	6078      	str	r0, [r7, #4]
 8014ebc:	460b      	mov	r3, r1
 8014ebe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014ec0:	4b3a      	ldr	r3, [pc, #232]	; (8014fac <USBD_CDC_DeInit+0xf8>)
 8014ec2:	781b      	ldrb	r3, [r3, #0]
 8014ec4:	4619      	mov	r1, r3
 8014ec6:	6878      	ldr	r0, [r7, #4]
 8014ec8:	f004 fc70 	bl	80197ac <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014ecc:	4b37      	ldr	r3, [pc, #220]	; (8014fac <USBD_CDC_DeInit+0xf8>)
 8014ece:	781b      	ldrb	r3, [r3, #0]
 8014ed0:	f003 020f 	and.w	r2, r3, #15
 8014ed4:	6879      	ldr	r1, [r7, #4]
 8014ed6:	4613      	mov	r3, r2
 8014ed8:	009b      	lsls	r3, r3, #2
 8014eda:	4413      	add	r3, r2
 8014edc:	009b      	lsls	r3, r3, #2
 8014ede:	440b      	add	r3, r1
 8014ee0:	3324      	adds	r3, #36	; 0x24
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8014ee6:	4b32      	ldr	r3, [pc, #200]	; (8014fb0 <USBD_CDC_DeInit+0xfc>)
 8014ee8:	781b      	ldrb	r3, [r3, #0]
 8014eea:	4619      	mov	r1, r3
 8014eec:	6878      	ldr	r0, [r7, #4]
 8014eee:	f004 fc5d 	bl	80197ac <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014ef2:	4b2f      	ldr	r3, [pc, #188]	; (8014fb0 <USBD_CDC_DeInit+0xfc>)
 8014ef4:	781b      	ldrb	r3, [r3, #0]
 8014ef6:	f003 020f 	and.w	r2, r3, #15
 8014efa:	6879      	ldr	r1, [r7, #4]
 8014efc:	4613      	mov	r3, r2
 8014efe:	009b      	lsls	r3, r3, #2
 8014f00:	4413      	add	r3, r2
 8014f02:	009b      	lsls	r3, r3, #2
 8014f04:	440b      	add	r3, r1
 8014f06:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014f0a:	2200      	movs	r2, #0
 8014f0c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014f0e:	4b29      	ldr	r3, [pc, #164]	; (8014fb4 <USBD_CDC_DeInit+0x100>)
 8014f10:	781b      	ldrb	r3, [r3, #0]
 8014f12:	4619      	mov	r1, r3
 8014f14:	6878      	ldr	r0, [r7, #4]
 8014f16:	f004 fc49 	bl	80197ac <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8014f1a:	4b26      	ldr	r3, [pc, #152]	; (8014fb4 <USBD_CDC_DeInit+0x100>)
 8014f1c:	781b      	ldrb	r3, [r3, #0]
 8014f1e:	f003 020f 	and.w	r2, r3, #15
 8014f22:	6879      	ldr	r1, [r7, #4]
 8014f24:	4613      	mov	r3, r2
 8014f26:	009b      	lsls	r3, r3, #2
 8014f28:	4413      	add	r3, r2
 8014f2a:	009b      	lsls	r3, r3, #2
 8014f2c:	440b      	add	r3, r1
 8014f2e:	3324      	adds	r3, #36	; 0x24
 8014f30:	2200      	movs	r2, #0
 8014f32:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014f34:	4b1f      	ldr	r3, [pc, #124]	; (8014fb4 <USBD_CDC_DeInit+0x100>)
 8014f36:	781b      	ldrb	r3, [r3, #0]
 8014f38:	f003 020f 	and.w	r2, r3, #15
 8014f3c:	6879      	ldr	r1, [r7, #4]
 8014f3e:	4613      	mov	r3, r2
 8014f40:	009b      	lsls	r3, r3, #2
 8014f42:	4413      	add	r3, r2
 8014f44:	009b      	lsls	r3, r3, #2
 8014f46:	440b      	add	r3, r1
 8014f48:	3326      	adds	r3, #38	; 0x26
 8014f4a:	2200      	movs	r2, #0
 8014f4c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	32b0      	adds	r2, #176	; 0xb0
 8014f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d01f      	beq.n	8014fa0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014f66:	687a      	ldr	r2, [r7, #4]
 8014f68:	33b0      	adds	r3, #176	; 0xb0
 8014f6a:	009b      	lsls	r3, r3, #2
 8014f6c:	4413      	add	r3, r2
 8014f6e:	685b      	ldr	r3, [r3, #4]
 8014f70:	685b      	ldr	r3, [r3, #4]
 8014f72:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	32b0      	adds	r2, #176	; 0xb0
 8014f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f82:	4618      	mov	r0, r3
 8014f84:	f004 fda8 	bl	8019ad8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	32b0      	adds	r2, #176	; 0xb0
 8014f92:	2100      	movs	r1, #0
 8014f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	2200      	movs	r2, #0
 8014f9c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014fa0:	2300      	movs	r3, #0
}
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	3708      	adds	r7, #8
 8014fa6:	46bd      	mov	sp, r7
 8014fa8:	bd80      	pop	{r7, pc}
 8014faa:	bf00      	nop
 8014fac:	20000097 	.word	0x20000097
 8014fb0:	20000098 	.word	0x20000098
 8014fb4:	20000099 	.word	0x20000099

08014fb8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b086      	sub	sp, #24
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	6078      	str	r0, [r7, #4]
 8014fc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	32b0      	adds	r2, #176	; 0xb0
 8014fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014fd0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014fd2:	2300      	movs	r3, #0
 8014fd4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014fda:	2300      	movs	r3, #0
 8014fdc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014fde:	693b      	ldr	r3, [r7, #16]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d101      	bne.n	8014fe8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014fe4:	2303      	movs	r3, #3
 8014fe6:	e0bf      	b.n	8015168 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014fe8:	683b      	ldr	r3, [r7, #0]
 8014fea:	781b      	ldrb	r3, [r3, #0]
 8014fec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d050      	beq.n	8015096 <USBD_CDC_Setup+0xde>
 8014ff4:	2b20      	cmp	r3, #32
 8014ff6:	f040 80af 	bne.w	8015158 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014ffa:	683b      	ldr	r3, [r7, #0]
 8014ffc:	88db      	ldrh	r3, [r3, #6]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d03a      	beq.n	8015078 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8015002:	683b      	ldr	r3, [r7, #0]
 8015004:	781b      	ldrb	r3, [r3, #0]
 8015006:	b25b      	sxtb	r3, r3
 8015008:	2b00      	cmp	r3, #0
 801500a:	da1b      	bge.n	8015044 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015012:	687a      	ldr	r2, [r7, #4]
 8015014:	33b0      	adds	r3, #176	; 0xb0
 8015016:	009b      	lsls	r3, r3, #2
 8015018:	4413      	add	r3, r2
 801501a:	685b      	ldr	r3, [r3, #4]
 801501c:	689b      	ldr	r3, [r3, #8]
 801501e:	683a      	ldr	r2, [r7, #0]
 8015020:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8015022:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015024:	683a      	ldr	r2, [r7, #0]
 8015026:	88d2      	ldrh	r2, [r2, #6]
 8015028:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801502a:	683b      	ldr	r3, [r7, #0]
 801502c:	88db      	ldrh	r3, [r3, #6]
 801502e:	2b07      	cmp	r3, #7
 8015030:	bf28      	it	cs
 8015032:	2307      	movcs	r3, #7
 8015034:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8015036:	693b      	ldr	r3, [r7, #16]
 8015038:	89fa      	ldrh	r2, [r7, #14]
 801503a:	4619      	mov	r1, r3
 801503c:	6878      	ldr	r0, [r7, #4]
 801503e:	f001 fd89 	bl	8016b54 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8015042:	e090      	b.n	8015166 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8015044:	683b      	ldr	r3, [r7, #0]
 8015046:	785a      	ldrb	r2, [r3, #1]
 8015048:	693b      	ldr	r3, [r7, #16]
 801504a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801504e:	683b      	ldr	r3, [r7, #0]
 8015050:	88db      	ldrh	r3, [r3, #6]
 8015052:	2b3f      	cmp	r3, #63	; 0x3f
 8015054:	d803      	bhi.n	801505e <USBD_CDC_Setup+0xa6>
 8015056:	683b      	ldr	r3, [r7, #0]
 8015058:	88db      	ldrh	r3, [r3, #6]
 801505a:	b2da      	uxtb	r2, r3
 801505c:	e000      	b.n	8015060 <USBD_CDC_Setup+0xa8>
 801505e:	2240      	movs	r2, #64	; 0x40
 8015060:	693b      	ldr	r3, [r7, #16]
 8015062:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8015066:	6939      	ldr	r1, [r7, #16]
 8015068:	693b      	ldr	r3, [r7, #16]
 801506a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801506e:	461a      	mov	r2, r3
 8015070:	6878      	ldr	r0, [r7, #4]
 8015072:	f001 fd9b 	bl	8016bac <USBD_CtlPrepareRx>
      break;
 8015076:	e076      	b.n	8015166 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801507e:	687a      	ldr	r2, [r7, #4]
 8015080:	33b0      	adds	r3, #176	; 0xb0
 8015082:	009b      	lsls	r3, r3, #2
 8015084:	4413      	add	r3, r2
 8015086:	685b      	ldr	r3, [r3, #4]
 8015088:	689b      	ldr	r3, [r3, #8]
 801508a:	683a      	ldr	r2, [r7, #0]
 801508c:	7850      	ldrb	r0, [r2, #1]
 801508e:	2200      	movs	r2, #0
 8015090:	6839      	ldr	r1, [r7, #0]
 8015092:	4798      	blx	r3
      break;
 8015094:	e067      	b.n	8015166 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015096:	683b      	ldr	r3, [r7, #0]
 8015098:	785b      	ldrb	r3, [r3, #1]
 801509a:	2b0b      	cmp	r3, #11
 801509c:	d851      	bhi.n	8015142 <USBD_CDC_Setup+0x18a>
 801509e:	a201      	add	r2, pc, #4	; (adr r2, 80150a4 <USBD_CDC_Setup+0xec>)
 80150a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150a4:	080150d5 	.word	0x080150d5
 80150a8:	08015151 	.word	0x08015151
 80150ac:	08015143 	.word	0x08015143
 80150b0:	08015143 	.word	0x08015143
 80150b4:	08015143 	.word	0x08015143
 80150b8:	08015143 	.word	0x08015143
 80150bc:	08015143 	.word	0x08015143
 80150c0:	08015143 	.word	0x08015143
 80150c4:	08015143 	.word	0x08015143
 80150c8:	08015143 	.word	0x08015143
 80150cc:	080150ff 	.word	0x080150ff
 80150d0:	08015129 	.word	0x08015129
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80150da:	b2db      	uxtb	r3, r3
 80150dc:	2b03      	cmp	r3, #3
 80150de:	d107      	bne.n	80150f0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80150e0:	f107 030a 	add.w	r3, r7, #10
 80150e4:	2202      	movs	r2, #2
 80150e6:	4619      	mov	r1, r3
 80150e8:	6878      	ldr	r0, [r7, #4]
 80150ea:	f001 fd33 	bl	8016b54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80150ee:	e032      	b.n	8015156 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80150f0:	6839      	ldr	r1, [r7, #0]
 80150f2:	6878      	ldr	r0, [r7, #4]
 80150f4:	f001 fcbd 	bl	8016a72 <USBD_CtlError>
            ret = USBD_FAIL;
 80150f8:	2303      	movs	r3, #3
 80150fa:	75fb      	strb	r3, [r7, #23]
          break;
 80150fc:	e02b      	b.n	8015156 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015104:	b2db      	uxtb	r3, r3
 8015106:	2b03      	cmp	r3, #3
 8015108:	d107      	bne.n	801511a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801510a:	f107 030d 	add.w	r3, r7, #13
 801510e:	2201      	movs	r2, #1
 8015110:	4619      	mov	r1, r3
 8015112:	6878      	ldr	r0, [r7, #4]
 8015114:	f001 fd1e 	bl	8016b54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015118:	e01d      	b.n	8015156 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801511a:	6839      	ldr	r1, [r7, #0]
 801511c:	6878      	ldr	r0, [r7, #4]
 801511e:	f001 fca8 	bl	8016a72 <USBD_CtlError>
            ret = USBD_FAIL;
 8015122:	2303      	movs	r3, #3
 8015124:	75fb      	strb	r3, [r7, #23]
          break;
 8015126:	e016      	b.n	8015156 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801512e:	b2db      	uxtb	r3, r3
 8015130:	2b03      	cmp	r3, #3
 8015132:	d00f      	beq.n	8015154 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8015134:	6839      	ldr	r1, [r7, #0]
 8015136:	6878      	ldr	r0, [r7, #4]
 8015138:	f001 fc9b 	bl	8016a72 <USBD_CtlError>
            ret = USBD_FAIL;
 801513c:	2303      	movs	r3, #3
 801513e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8015140:	e008      	b.n	8015154 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8015142:	6839      	ldr	r1, [r7, #0]
 8015144:	6878      	ldr	r0, [r7, #4]
 8015146:	f001 fc94 	bl	8016a72 <USBD_CtlError>
          ret = USBD_FAIL;
 801514a:	2303      	movs	r3, #3
 801514c:	75fb      	strb	r3, [r7, #23]
          break;
 801514e:	e002      	b.n	8015156 <USBD_CDC_Setup+0x19e>
          break;
 8015150:	bf00      	nop
 8015152:	e008      	b.n	8015166 <USBD_CDC_Setup+0x1ae>
          break;
 8015154:	bf00      	nop
      }
      break;
 8015156:	e006      	b.n	8015166 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8015158:	6839      	ldr	r1, [r7, #0]
 801515a:	6878      	ldr	r0, [r7, #4]
 801515c:	f001 fc89 	bl	8016a72 <USBD_CtlError>
      ret = USBD_FAIL;
 8015160:	2303      	movs	r3, #3
 8015162:	75fb      	strb	r3, [r7, #23]
      break;
 8015164:	bf00      	nop
  }

  return (uint8_t)ret;
 8015166:	7dfb      	ldrb	r3, [r7, #23]
}
 8015168:	4618      	mov	r0, r3
 801516a:	3718      	adds	r7, #24
 801516c:	46bd      	mov	sp, r7
 801516e:	bd80      	pop	{r7, pc}

08015170 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015170:	b580      	push	{r7, lr}
 8015172:	b084      	sub	sp, #16
 8015174:	af00      	add	r7, sp, #0
 8015176:	6078      	str	r0, [r7, #4]
 8015178:	460b      	mov	r3, r1
 801517a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015182:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	32b0      	adds	r2, #176	; 0xb0
 801518e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d101      	bne.n	801519a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8015196:	2303      	movs	r3, #3
 8015198:	e065      	b.n	8015266 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	32b0      	adds	r2, #176	; 0xb0
 80151a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151a8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80151aa:	78fb      	ldrb	r3, [r7, #3]
 80151ac:	f003 020f 	and.w	r2, r3, #15
 80151b0:	6879      	ldr	r1, [r7, #4]
 80151b2:	4613      	mov	r3, r2
 80151b4:	009b      	lsls	r3, r3, #2
 80151b6:	4413      	add	r3, r2
 80151b8:	009b      	lsls	r3, r3, #2
 80151ba:	440b      	add	r3, r1
 80151bc:	3318      	adds	r3, #24
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d02f      	beq.n	8015224 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80151c4:	78fb      	ldrb	r3, [r7, #3]
 80151c6:	f003 020f 	and.w	r2, r3, #15
 80151ca:	6879      	ldr	r1, [r7, #4]
 80151cc:	4613      	mov	r3, r2
 80151ce:	009b      	lsls	r3, r3, #2
 80151d0:	4413      	add	r3, r2
 80151d2:	009b      	lsls	r3, r3, #2
 80151d4:	440b      	add	r3, r1
 80151d6:	3318      	adds	r3, #24
 80151d8:	681a      	ldr	r2, [r3, #0]
 80151da:	78fb      	ldrb	r3, [r7, #3]
 80151dc:	f003 010f 	and.w	r1, r3, #15
 80151e0:	68f8      	ldr	r0, [r7, #12]
 80151e2:	460b      	mov	r3, r1
 80151e4:	00db      	lsls	r3, r3, #3
 80151e6:	440b      	add	r3, r1
 80151e8:	009b      	lsls	r3, r3, #2
 80151ea:	4403      	add	r3, r0
 80151ec:	3344      	adds	r3, #68	; 0x44
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	fbb2 f1f3 	udiv	r1, r2, r3
 80151f4:	fb01 f303 	mul.w	r3, r1, r3
 80151f8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d112      	bne.n	8015224 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80151fe:	78fb      	ldrb	r3, [r7, #3]
 8015200:	f003 020f 	and.w	r2, r3, #15
 8015204:	6879      	ldr	r1, [r7, #4]
 8015206:	4613      	mov	r3, r2
 8015208:	009b      	lsls	r3, r3, #2
 801520a:	4413      	add	r3, r2
 801520c:	009b      	lsls	r3, r3, #2
 801520e:	440b      	add	r3, r1
 8015210:	3318      	adds	r3, #24
 8015212:	2200      	movs	r2, #0
 8015214:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015216:	78f9      	ldrb	r1, [r7, #3]
 8015218:	2300      	movs	r3, #0
 801521a:	2200      	movs	r2, #0
 801521c:	6878      	ldr	r0, [r7, #4]
 801521e:	f004 fbc9 	bl	80199b4 <USBD_LL_Transmit>
 8015222:	e01f      	b.n	8015264 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8015224:	68bb      	ldr	r3, [r7, #8]
 8015226:	2200      	movs	r2, #0
 8015228:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015232:	687a      	ldr	r2, [r7, #4]
 8015234:	33b0      	adds	r3, #176	; 0xb0
 8015236:	009b      	lsls	r3, r3, #2
 8015238:	4413      	add	r3, r2
 801523a:	685b      	ldr	r3, [r3, #4]
 801523c:	691b      	ldr	r3, [r3, #16]
 801523e:	2b00      	cmp	r3, #0
 8015240:	d010      	beq.n	8015264 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015248:	687a      	ldr	r2, [r7, #4]
 801524a:	33b0      	adds	r3, #176	; 0xb0
 801524c:	009b      	lsls	r3, r3, #2
 801524e:	4413      	add	r3, r2
 8015250:	685b      	ldr	r3, [r3, #4]
 8015252:	691b      	ldr	r3, [r3, #16]
 8015254:	68ba      	ldr	r2, [r7, #8]
 8015256:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801525a:	68ba      	ldr	r2, [r7, #8]
 801525c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8015260:	78fa      	ldrb	r2, [r7, #3]
 8015262:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8015264:	2300      	movs	r3, #0
}
 8015266:	4618      	mov	r0, r3
 8015268:	3710      	adds	r7, #16
 801526a:	46bd      	mov	sp, r7
 801526c:	bd80      	pop	{r7, pc}

0801526e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801526e:	b580      	push	{r7, lr}
 8015270:	b084      	sub	sp, #16
 8015272:	af00      	add	r7, sp, #0
 8015274:	6078      	str	r0, [r7, #4]
 8015276:	460b      	mov	r3, r1
 8015278:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	32b0      	adds	r2, #176	; 0xb0
 8015284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015288:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	32b0      	adds	r2, #176	; 0xb0
 8015294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015298:	2b00      	cmp	r3, #0
 801529a:	d101      	bne.n	80152a0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801529c:	2303      	movs	r3, #3
 801529e:	e01a      	b.n	80152d6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80152a0:	78fb      	ldrb	r3, [r7, #3]
 80152a2:	4619      	mov	r1, r3
 80152a4:	6878      	ldr	r0, [r7, #4]
 80152a6:	f004 fbf5 	bl	8019a94 <USBD_LL_GetRxDataSize>
 80152aa:	4602      	mov	r2, r0
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80152b8:	687a      	ldr	r2, [r7, #4]
 80152ba:	33b0      	adds	r3, #176	; 0xb0
 80152bc:	009b      	lsls	r3, r3, #2
 80152be:	4413      	add	r3, r2
 80152c0:	685b      	ldr	r3, [r3, #4]
 80152c2:	68db      	ldr	r3, [r3, #12]
 80152c4:	68fa      	ldr	r2, [r7, #12]
 80152c6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80152ca:	68fa      	ldr	r2, [r7, #12]
 80152cc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80152d0:	4611      	mov	r1, r2
 80152d2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80152d4:	2300      	movs	r3, #0
}
 80152d6:	4618      	mov	r0, r3
 80152d8:	3710      	adds	r7, #16
 80152da:	46bd      	mov	sp, r7
 80152dc:	bd80      	pop	{r7, pc}

080152de <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80152de:	b580      	push	{r7, lr}
 80152e0:	b084      	sub	sp, #16
 80152e2:	af00      	add	r7, sp, #0
 80152e4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	32b0      	adds	r2, #176	; 0xb0
 80152f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d101      	bne.n	8015300 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80152fc:	2303      	movs	r3, #3
 80152fe:	e025      	b.n	801534c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015306:	687a      	ldr	r2, [r7, #4]
 8015308:	33b0      	adds	r3, #176	; 0xb0
 801530a:	009b      	lsls	r3, r3, #2
 801530c:	4413      	add	r3, r2
 801530e:	685b      	ldr	r3, [r3, #4]
 8015310:	2b00      	cmp	r3, #0
 8015312:	d01a      	beq.n	801534a <USBD_CDC_EP0_RxReady+0x6c>
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801531a:	2bff      	cmp	r3, #255	; 0xff
 801531c:	d015      	beq.n	801534a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015324:	687a      	ldr	r2, [r7, #4]
 8015326:	33b0      	adds	r3, #176	; 0xb0
 8015328:	009b      	lsls	r3, r3, #2
 801532a:	4413      	add	r3, r2
 801532c:	685b      	ldr	r3, [r3, #4]
 801532e:	689b      	ldr	r3, [r3, #8]
 8015330:	68fa      	ldr	r2, [r7, #12]
 8015332:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8015336:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8015338:	68fa      	ldr	r2, [r7, #12]
 801533a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801533e:	b292      	uxth	r2, r2
 8015340:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	22ff      	movs	r2, #255	; 0xff
 8015346:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801534a:	2300      	movs	r3, #0
}
 801534c:	4618      	mov	r0, r3
 801534e:	3710      	adds	r7, #16
 8015350:	46bd      	mov	sp, r7
 8015352:	bd80      	pop	{r7, pc}

08015354 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015354:	b580      	push	{r7, lr}
 8015356:	b086      	sub	sp, #24
 8015358:	af00      	add	r7, sp, #0
 801535a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801535c:	2182      	movs	r1, #130	; 0x82
 801535e:	4818      	ldr	r0, [pc, #96]	; (80153c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015360:	f000 fd4f 	bl	8015e02 <USBD_GetEpDesc>
 8015364:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015366:	2101      	movs	r1, #1
 8015368:	4815      	ldr	r0, [pc, #84]	; (80153c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801536a:	f000 fd4a 	bl	8015e02 <USBD_GetEpDesc>
 801536e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015370:	2181      	movs	r1, #129	; 0x81
 8015372:	4813      	ldr	r0, [pc, #76]	; (80153c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015374:	f000 fd45 	bl	8015e02 <USBD_GetEpDesc>
 8015378:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801537a:	697b      	ldr	r3, [r7, #20]
 801537c:	2b00      	cmp	r3, #0
 801537e:	d002      	beq.n	8015386 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015380:	697b      	ldr	r3, [r7, #20]
 8015382:	2210      	movs	r2, #16
 8015384:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015386:	693b      	ldr	r3, [r7, #16]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d006      	beq.n	801539a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801538c:	693b      	ldr	r3, [r7, #16]
 801538e:	2200      	movs	r2, #0
 8015390:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015394:	711a      	strb	r2, [r3, #4]
 8015396:	2200      	movs	r2, #0
 8015398:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	2b00      	cmp	r3, #0
 801539e:	d006      	beq.n	80153ae <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	2200      	movs	r2, #0
 80153a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80153a8:	711a      	strb	r2, [r3, #4]
 80153aa:	2200      	movs	r2, #0
 80153ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	2243      	movs	r2, #67	; 0x43
 80153b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80153b4:	4b02      	ldr	r3, [pc, #8]	; (80153c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80153b6:	4618      	mov	r0, r3
 80153b8:	3718      	adds	r7, #24
 80153ba:	46bd      	mov	sp, r7
 80153bc:	bd80      	pop	{r7, pc}
 80153be:	bf00      	nop
 80153c0:	20000054 	.word	0x20000054

080153c4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80153c4:	b580      	push	{r7, lr}
 80153c6:	b086      	sub	sp, #24
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80153cc:	2182      	movs	r1, #130	; 0x82
 80153ce:	4818      	ldr	r0, [pc, #96]	; (8015430 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80153d0:	f000 fd17 	bl	8015e02 <USBD_GetEpDesc>
 80153d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80153d6:	2101      	movs	r1, #1
 80153d8:	4815      	ldr	r0, [pc, #84]	; (8015430 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80153da:	f000 fd12 	bl	8015e02 <USBD_GetEpDesc>
 80153de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80153e0:	2181      	movs	r1, #129	; 0x81
 80153e2:	4813      	ldr	r0, [pc, #76]	; (8015430 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80153e4:	f000 fd0d 	bl	8015e02 <USBD_GetEpDesc>
 80153e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80153ea:	697b      	ldr	r3, [r7, #20]
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d002      	beq.n	80153f6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80153f0:	697b      	ldr	r3, [r7, #20]
 80153f2:	2210      	movs	r2, #16
 80153f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80153f6:	693b      	ldr	r3, [r7, #16]
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d006      	beq.n	801540a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80153fc:	693b      	ldr	r3, [r7, #16]
 80153fe:	2200      	movs	r2, #0
 8015400:	711a      	strb	r2, [r3, #4]
 8015402:	2200      	movs	r2, #0
 8015404:	f042 0202 	orr.w	r2, r2, #2
 8015408:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	2b00      	cmp	r3, #0
 801540e:	d006      	beq.n	801541e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	2200      	movs	r2, #0
 8015414:	711a      	strb	r2, [r3, #4]
 8015416:	2200      	movs	r2, #0
 8015418:	f042 0202 	orr.w	r2, r2, #2
 801541c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	2243      	movs	r2, #67	; 0x43
 8015422:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015424:	4b02      	ldr	r3, [pc, #8]	; (8015430 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8015426:	4618      	mov	r0, r3
 8015428:	3718      	adds	r7, #24
 801542a:	46bd      	mov	sp, r7
 801542c:	bd80      	pop	{r7, pc}
 801542e:	bf00      	nop
 8015430:	20000054 	.word	0x20000054

08015434 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015434:	b580      	push	{r7, lr}
 8015436:	b086      	sub	sp, #24
 8015438:	af00      	add	r7, sp, #0
 801543a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801543c:	2182      	movs	r1, #130	; 0x82
 801543e:	4818      	ldr	r0, [pc, #96]	; (80154a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015440:	f000 fcdf 	bl	8015e02 <USBD_GetEpDesc>
 8015444:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015446:	2101      	movs	r1, #1
 8015448:	4815      	ldr	r0, [pc, #84]	; (80154a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801544a:	f000 fcda 	bl	8015e02 <USBD_GetEpDesc>
 801544e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015450:	2181      	movs	r1, #129	; 0x81
 8015452:	4813      	ldr	r0, [pc, #76]	; (80154a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015454:	f000 fcd5 	bl	8015e02 <USBD_GetEpDesc>
 8015458:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801545a:	697b      	ldr	r3, [r7, #20]
 801545c:	2b00      	cmp	r3, #0
 801545e:	d002      	beq.n	8015466 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015460:	697b      	ldr	r3, [r7, #20]
 8015462:	2210      	movs	r2, #16
 8015464:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015466:	693b      	ldr	r3, [r7, #16]
 8015468:	2b00      	cmp	r3, #0
 801546a:	d006      	beq.n	801547a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801546c:	693b      	ldr	r3, [r7, #16]
 801546e:	2200      	movs	r2, #0
 8015470:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015474:	711a      	strb	r2, [r3, #4]
 8015476:	2200      	movs	r2, #0
 8015478:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	2b00      	cmp	r3, #0
 801547e:	d006      	beq.n	801548e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	2200      	movs	r2, #0
 8015484:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015488:	711a      	strb	r2, [r3, #4]
 801548a:	2200      	movs	r2, #0
 801548c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	2243      	movs	r2, #67	; 0x43
 8015492:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015494:	4b02      	ldr	r3, [pc, #8]	; (80154a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8015496:	4618      	mov	r0, r3
 8015498:	3718      	adds	r7, #24
 801549a:	46bd      	mov	sp, r7
 801549c:	bd80      	pop	{r7, pc}
 801549e:	bf00      	nop
 80154a0:	20000054 	.word	0x20000054

080154a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80154a4:	b480      	push	{r7}
 80154a6:	b083      	sub	sp, #12
 80154a8:	af00      	add	r7, sp, #0
 80154aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	220a      	movs	r2, #10
 80154b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80154b2:	4b03      	ldr	r3, [pc, #12]	; (80154c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80154b4:	4618      	mov	r0, r3
 80154b6:	370c      	adds	r7, #12
 80154b8:	46bd      	mov	sp, r7
 80154ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154be:	4770      	bx	lr
 80154c0:	20000010 	.word	0x20000010

080154c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80154c4:	b480      	push	{r7}
 80154c6:	b083      	sub	sp, #12
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	6078      	str	r0, [r7, #4]
 80154cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80154ce:	683b      	ldr	r3, [r7, #0]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d101      	bne.n	80154d8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80154d4:	2303      	movs	r3, #3
 80154d6:	e009      	b.n	80154ec <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80154de:	687a      	ldr	r2, [r7, #4]
 80154e0:	33b0      	adds	r3, #176	; 0xb0
 80154e2:	009b      	lsls	r3, r3, #2
 80154e4:	4413      	add	r3, r2
 80154e6:	683a      	ldr	r2, [r7, #0]
 80154e8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80154ea:	2300      	movs	r3, #0
}
 80154ec:	4618      	mov	r0, r3
 80154ee:	370c      	adds	r7, #12
 80154f0:	46bd      	mov	sp, r7
 80154f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f6:	4770      	bx	lr

080154f8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80154f8:	b480      	push	{r7}
 80154fa:	b087      	sub	sp, #28
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	60f8      	str	r0, [r7, #12]
 8015500:	60b9      	str	r1, [r7, #8]
 8015502:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	32b0      	adds	r2, #176	; 0xb0
 801550e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015512:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015514:	697b      	ldr	r3, [r7, #20]
 8015516:	2b00      	cmp	r3, #0
 8015518:	d101      	bne.n	801551e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801551a:	2303      	movs	r3, #3
 801551c:	e008      	b.n	8015530 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801551e:	697b      	ldr	r3, [r7, #20]
 8015520:	68ba      	ldr	r2, [r7, #8]
 8015522:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8015526:	697b      	ldr	r3, [r7, #20]
 8015528:	687a      	ldr	r2, [r7, #4]
 801552a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801552e:	2300      	movs	r3, #0
}
 8015530:	4618      	mov	r0, r3
 8015532:	371c      	adds	r7, #28
 8015534:	46bd      	mov	sp, r7
 8015536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801553a:	4770      	bx	lr

0801553c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801553c:	b480      	push	{r7}
 801553e:	b085      	sub	sp, #20
 8015540:	af00      	add	r7, sp, #0
 8015542:	6078      	str	r0, [r7, #4]
 8015544:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	32b0      	adds	r2, #176	; 0xb0
 8015550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015554:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	2b00      	cmp	r3, #0
 801555a:	d101      	bne.n	8015560 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801555c:	2303      	movs	r3, #3
 801555e:	e004      	b.n	801556a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	683a      	ldr	r2, [r7, #0]
 8015564:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8015568:	2300      	movs	r3, #0
}
 801556a:	4618      	mov	r0, r3
 801556c:	3714      	adds	r7, #20
 801556e:	46bd      	mov	sp, r7
 8015570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015574:	4770      	bx	lr
	...

08015578 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8015578:	b580      	push	{r7, lr}
 801557a:	b084      	sub	sp, #16
 801557c:	af00      	add	r7, sp, #0
 801557e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	32b0      	adds	r2, #176	; 0xb0
 801558a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801558e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8015590:	2301      	movs	r3, #1
 8015592:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015594:	68bb      	ldr	r3, [r7, #8]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d101      	bne.n	801559e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801559a:	2303      	movs	r3, #3
 801559c:	e025      	b.n	80155ea <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801559e:	68bb      	ldr	r3, [r7, #8]
 80155a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d11f      	bne.n	80155e8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80155a8:	68bb      	ldr	r3, [r7, #8]
 80155aa:	2201      	movs	r2, #1
 80155ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80155b0:	4b10      	ldr	r3, [pc, #64]	; (80155f4 <USBD_CDC_TransmitPacket+0x7c>)
 80155b2:	781b      	ldrb	r3, [r3, #0]
 80155b4:	f003 020f 	and.w	r2, r3, #15
 80155b8:	68bb      	ldr	r3, [r7, #8]
 80155ba:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80155be:	6878      	ldr	r0, [r7, #4]
 80155c0:	4613      	mov	r3, r2
 80155c2:	009b      	lsls	r3, r3, #2
 80155c4:	4413      	add	r3, r2
 80155c6:	009b      	lsls	r3, r3, #2
 80155c8:	4403      	add	r3, r0
 80155ca:	3318      	adds	r3, #24
 80155cc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80155ce:	4b09      	ldr	r3, [pc, #36]	; (80155f4 <USBD_CDC_TransmitPacket+0x7c>)
 80155d0:	7819      	ldrb	r1, [r3, #0]
 80155d2:	68bb      	ldr	r3, [r7, #8]
 80155d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80155d8:	68bb      	ldr	r3, [r7, #8]
 80155da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80155de:	6878      	ldr	r0, [r7, #4]
 80155e0:	f004 f9e8 	bl	80199b4 <USBD_LL_Transmit>

    ret = USBD_OK;
 80155e4:	2300      	movs	r3, #0
 80155e6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80155e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80155ea:	4618      	mov	r0, r3
 80155ec:	3710      	adds	r7, #16
 80155ee:	46bd      	mov	sp, r7
 80155f0:	bd80      	pop	{r7, pc}
 80155f2:	bf00      	nop
 80155f4:	20000097 	.word	0x20000097

080155f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b084      	sub	sp, #16
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	32b0      	adds	r2, #176	; 0xb0
 801560a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801560e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	32b0      	adds	r2, #176	; 0xb0
 801561a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801561e:	2b00      	cmp	r3, #0
 8015620:	d101      	bne.n	8015626 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8015622:	2303      	movs	r3, #3
 8015624:	e018      	b.n	8015658 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	7c1b      	ldrb	r3, [r3, #16]
 801562a:	2b00      	cmp	r3, #0
 801562c:	d10a      	bne.n	8015644 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801562e:	4b0c      	ldr	r3, [pc, #48]	; (8015660 <USBD_CDC_ReceivePacket+0x68>)
 8015630:	7819      	ldrb	r1, [r3, #0]
 8015632:	68fb      	ldr	r3, [r7, #12]
 8015634:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015638:	f44f 7300 	mov.w	r3, #512	; 0x200
 801563c:	6878      	ldr	r0, [r7, #4]
 801563e:	f004 f9f1 	bl	8019a24 <USBD_LL_PrepareReceive>
 8015642:	e008      	b.n	8015656 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015644:	4b06      	ldr	r3, [pc, #24]	; (8015660 <USBD_CDC_ReceivePacket+0x68>)
 8015646:	7819      	ldrb	r1, [r3, #0]
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801564e:	2340      	movs	r3, #64	; 0x40
 8015650:	6878      	ldr	r0, [r7, #4]
 8015652:	f004 f9e7 	bl	8019a24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015656:	2300      	movs	r3, #0
}
 8015658:	4618      	mov	r0, r3
 801565a:	3710      	adds	r7, #16
 801565c:	46bd      	mov	sp, r7
 801565e:	bd80      	pop	{r7, pc}
 8015660:	20000098 	.word	0x20000098

08015664 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015664:	b580      	push	{r7, lr}
 8015666:	b086      	sub	sp, #24
 8015668:	af00      	add	r7, sp, #0
 801566a:	60f8      	str	r0, [r7, #12]
 801566c:	60b9      	str	r1, [r7, #8]
 801566e:	4613      	mov	r3, r2
 8015670:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	2b00      	cmp	r3, #0
 8015676:	d101      	bne.n	801567c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015678:	2303      	movs	r3, #3
 801567a:	e01f      	b.n	80156bc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	2200      	movs	r2, #0
 8015680:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	2200      	movs	r2, #0
 8015688:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	2200      	movs	r2, #0
 8015690:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015694:	68bb      	ldr	r3, [r7, #8]
 8015696:	2b00      	cmp	r3, #0
 8015698:	d003      	beq.n	80156a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	68ba      	ldr	r2, [r7, #8]
 801569e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	2201      	movs	r2, #1
 80156a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	79fa      	ldrb	r2, [r7, #7]
 80156ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80156b0:	68f8      	ldr	r0, [r7, #12]
 80156b2:	f003 ffbf 	bl	8019634 <USBD_LL_Init>
 80156b6:	4603      	mov	r3, r0
 80156b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80156ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80156bc:	4618      	mov	r0, r3
 80156be:	3718      	adds	r7, #24
 80156c0:	46bd      	mov	sp, r7
 80156c2:	bd80      	pop	{r7, pc}

080156c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80156c4:	b580      	push	{r7, lr}
 80156c6:	b084      	sub	sp, #16
 80156c8:	af00      	add	r7, sp, #0
 80156ca:	6078      	str	r0, [r7, #4]
 80156cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80156ce:	2300      	movs	r3, #0
 80156d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80156d2:	683b      	ldr	r3, [r7, #0]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d101      	bne.n	80156dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80156d8:	2303      	movs	r3, #3
 80156da:	e025      	b.n	8015728 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	683a      	ldr	r2, [r7, #0]
 80156e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	32ae      	adds	r2, #174	; 0xae
 80156ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d00f      	beq.n	8015718 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	32ae      	adds	r2, #174	; 0xae
 8015702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015708:	f107 020e 	add.w	r2, r7, #14
 801570c:	4610      	mov	r0, r2
 801570e:	4798      	blx	r3
 8015710:	4602      	mov	r2, r0
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801571e:	1c5a      	adds	r2, r3, #1
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8015726:	2300      	movs	r3, #0
}
 8015728:	4618      	mov	r0, r3
 801572a:	3710      	adds	r7, #16
 801572c:	46bd      	mov	sp, r7
 801572e:	bd80      	pop	{r7, pc}

08015730 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015730:	b580      	push	{r7, lr}
 8015732:	b082      	sub	sp, #8
 8015734:	af00      	add	r7, sp, #0
 8015736:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015738:	6878      	ldr	r0, [r7, #4]
 801573a:	f003 ffc7 	bl	80196cc <USBD_LL_Start>
 801573e:	4603      	mov	r3, r0
}
 8015740:	4618      	mov	r0, r3
 8015742:	3708      	adds	r7, #8
 8015744:	46bd      	mov	sp, r7
 8015746:	bd80      	pop	{r7, pc}

08015748 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015748:	b480      	push	{r7}
 801574a:	b083      	sub	sp, #12
 801574c:	af00      	add	r7, sp, #0
 801574e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015750:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8015752:	4618      	mov	r0, r3
 8015754:	370c      	adds	r7, #12
 8015756:	46bd      	mov	sp, r7
 8015758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801575c:	4770      	bx	lr

0801575e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801575e:	b580      	push	{r7, lr}
 8015760:	b084      	sub	sp, #16
 8015762:	af00      	add	r7, sp, #0
 8015764:	6078      	str	r0, [r7, #4]
 8015766:	460b      	mov	r3, r1
 8015768:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801576a:	2300      	movs	r3, #0
 801576c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015774:	2b00      	cmp	r3, #0
 8015776:	d009      	beq.n	801578c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	78fa      	ldrb	r2, [r7, #3]
 8015782:	4611      	mov	r1, r2
 8015784:	6878      	ldr	r0, [r7, #4]
 8015786:	4798      	blx	r3
 8015788:	4603      	mov	r3, r0
 801578a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801578c:	7bfb      	ldrb	r3, [r7, #15]
}
 801578e:	4618      	mov	r0, r3
 8015790:	3710      	adds	r7, #16
 8015792:	46bd      	mov	sp, r7
 8015794:	bd80      	pop	{r7, pc}

08015796 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015796:	b580      	push	{r7, lr}
 8015798:	b084      	sub	sp, #16
 801579a:	af00      	add	r7, sp, #0
 801579c:	6078      	str	r0, [r7, #4]
 801579e:	460b      	mov	r3, r1
 80157a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80157a2:	2300      	movs	r3, #0
 80157a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80157ac:	685b      	ldr	r3, [r3, #4]
 80157ae:	78fa      	ldrb	r2, [r7, #3]
 80157b0:	4611      	mov	r1, r2
 80157b2:	6878      	ldr	r0, [r7, #4]
 80157b4:	4798      	blx	r3
 80157b6:	4603      	mov	r3, r0
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d001      	beq.n	80157c0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80157bc:	2303      	movs	r3, #3
 80157be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80157c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80157c2:	4618      	mov	r0, r3
 80157c4:	3710      	adds	r7, #16
 80157c6:	46bd      	mov	sp, r7
 80157c8:	bd80      	pop	{r7, pc}

080157ca <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80157ca:	b580      	push	{r7, lr}
 80157cc:	b084      	sub	sp, #16
 80157ce:	af00      	add	r7, sp, #0
 80157d0:	6078      	str	r0, [r7, #4]
 80157d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80157da:	6839      	ldr	r1, [r7, #0]
 80157dc:	4618      	mov	r0, r3
 80157de:	f001 f90e 	bl	80169fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	2201      	movs	r2, #1
 80157e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80157f0:	461a      	mov	r2, r3
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80157fe:	f003 031f 	and.w	r3, r3, #31
 8015802:	2b02      	cmp	r3, #2
 8015804:	d01a      	beq.n	801583c <USBD_LL_SetupStage+0x72>
 8015806:	2b02      	cmp	r3, #2
 8015808:	d822      	bhi.n	8015850 <USBD_LL_SetupStage+0x86>
 801580a:	2b00      	cmp	r3, #0
 801580c:	d002      	beq.n	8015814 <USBD_LL_SetupStage+0x4a>
 801580e:	2b01      	cmp	r3, #1
 8015810:	d00a      	beq.n	8015828 <USBD_LL_SetupStage+0x5e>
 8015812:	e01d      	b.n	8015850 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801581a:	4619      	mov	r1, r3
 801581c:	6878      	ldr	r0, [r7, #4]
 801581e:	f000 fb65 	bl	8015eec <USBD_StdDevReq>
 8015822:	4603      	mov	r3, r0
 8015824:	73fb      	strb	r3, [r7, #15]
      break;
 8015826:	e020      	b.n	801586a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801582e:	4619      	mov	r1, r3
 8015830:	6878      	ldr	r0, [r7, #4]
 8015832:	f000 fbcd 	bl	8015fd0 <USBD_StdItfReq>
 8015836:	4603      	mov	r3, r0
 8015838:	73fb      	strb	r3, [r7, #15]
      break;
 801583a:	e016      	b.n	801586a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015842:	4619      	mov	r1, r3
 8015844:	6878      	ldr	r0, [r7, #4]
 8015846:	f000 fc2f 	bl	80160a8 <USBD_StdEPReq>
 801584a:	4603      	mov	r3, r0
 801584c:	73fb      	strb	r3, [r7, #15]
      break;
 801584e:	e00c      	b.n	801586a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015856:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801585a:	b2db      	uxtb	r3, r3
 801585c:	4619      	mov	r1, r3
 801585e:	6878      	ldr	r0, [r7, #4]
 8015860:	f003 ffda 	bl	8019818 <USBD_LL_StallEP>
 8015864:	4603      	mov	r3, r0
 8015866:	73fb      	strb	r3, [r7, #15]
      break;
 8015868:	bf00      	nop
  }

  return ret;
 801586a:	7bfb      	ldrb	r3, [r7, #15]
}
 801586c:	4618      	mov	r0, r3
 801586e:	3710      	adds	r7, #16
 8015870:	46bd      	mov	sp, r7
 8015872:	bd80      	pop	{r7, pc}

08015874 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015874:	b580      	push	{r7, lr}
 8015876:	b086      	sub	sp, #24
 8015878:	af00      	add	r7, sp, #0
 801587a:	60f8      	str	r0, [r7, #12]
 801587c:	460b      	mov	r3, r1
 801587e:	607a      	str	r2, [r7, #4]
 8015880:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8015882:	2300      	movs	r3, #0
 8015884:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8015886:	7afb      	ldrb	r3, [r7, #11]
 8015888:	2b00      	cmp	r3, #0
 801588a:	d16e      	bne.n	801596a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015892:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801589a:	2b03      	cmp	r3, #3
 801589c:	f040 8098 	bne.w	80159d0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80158a0:	693b      	ldr	r3, [r7, #16]
 80158a2:	689a      	ldr	r2, [r3, #8]
 80158a4:	693b      	ldr	r3, [r7, #16]
 80158a6:	68db      	ldr	r3, [r3, #12]
 80158a8:	429a      	cmp	r2, r3
 80158aa:	d913      	bls.n	80158d4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80158ac:	693b      	ldr	r3, [r7, #16]
 80158ae:	689a      	ldr	r2, [r3, #8]
 80158b0:	693b      	ldr	r3, [r7, #16]
 80158b2:	68db      	ldr	r3, [r3, #12]
 80158b4:	1ad2      	subs	r2, r2, r3
 80158b6:	693b      	ldr	r3, [r7, #16]
 80158b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80158ba:	693b      	ldr	r3, [r7, #16]
 80158bc:	68da      	ldr	r2, [r3, #12]
 80158be:	693b      	ldr	r3, [r7, #16]
 80158c0:	689b      	ldr	r3, [r3, #8]
 80158c2:	4293      	cmp	r3, r2
 80158c4:	bf28      	it	cs
 80158c6:	4613      	movcs	r3, r2
 80158c8:	461a      	mov	r2, r3
 80158ca:	6879      	ldr	r1, [r7, #4]
 80158cc:	68f8      	ldr	r0, [r7, #12]
 80158ce:	f001 f98a 	bl	8016be6 <USBD_CtlContinueRx>
 80158d2:	e07d      	b.n	80159d0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80158da:	f003 031f 	and.w	r3, r3, #31
 80158de:	2b02      	cmp	r3, #2
 80158e0:	d014      	beq.n	801590c <USBD_LL_DataOutStage+0x98>
 80158e2:	2b02      	cmp	r3, #2
 80158e4:	d81d      	bhi.n	8015922 <USBD_LL_DataOutStage+0xae>
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d002      	beq.n	80158f0 <USBD_LL_DataOutStage+0x7c>
 80158ea:	2b01      	cmp	r3, #1
 80158ec:	d003      	beq.n	80158f6 <USBD_LL_DataOutStage+0x82>
 80158ee:	e018      	b.n	8015922 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80158f0:	2300      	movs	r3, #0
 80158f2:	75bb      	strb	r3, [r7, #22]
            break;
 80158f4:	e018      	b.n	8015928 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80158fc:	b2db      	uxtb	r3, r3
 80158fe:	4619      	mov	r1, r3
 8015900:	68f8      	ldr	r0, [r7, #12]
 8015902:	f000 fa64 	bl	8015dce <USBD_CoreFindIF>
 8015906:	4603      	mov	r3, r0
 8015908:	75bb      	strb	r3, [r7, #22]
            break;
 801590a:	e00d      	b.n	8015928 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015912:	b2db      	uxtb	r3, r3
 8015914:	4619      	mov	r1, r3
 8015916:	68f8      	ldr	r0, [r7, #12]
 8015918:	f000 fa66 	bl	8015de8 <USBD_CoreFindEP>
 801591c:	4603      	mov	r3, r0
 801591e:	75bb      	strb	r3, [r7, #22]
            break;
 8015920:	e002      	b.n	8015928 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8015922:	2300      	movs	r3, #0
 8015924:	75bb      	strb	r3, [r7, #22]
            break;
 8015926:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8015928:	7dbb      	ldrb	r3, [r7, #22]
 801592a:	2b00      	cmp	r3, #0
 801592c:	d119      	bne.n	8015962 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015934:	b2db      	uxtb	r3, r3
 8015936:	2b03      	cmp	r3, #3
 8015938:	d113      	bne.n	8015962 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801593a:	7dba      	ldrb	r2, [r7, #22]
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	32ae      	adds	r2, #174	; 0xae
 8015940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015944:	691b      	ldr	r3, [r3, #16]
 8015946:	2b00      	cmp	r3, #0
 8015948:	d00b      	beq.n	8015962 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801594a:	7dba      	ldrb	r2, [r7, #22]
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8015952:	7dba      	ldrb	r2, [r7, #22]
 8015954:	68fb      	ldr	r3, [r7, #12]
 8015956:	32ae      	adds	r2, #174	; 0xae
 8015958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801595c:	691b      	ldr	r3, [r3, #16]
 801595e:	68f8      	ldr	r0, [r7, #12]
 8015960:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8015962:	68f8      	ldr	r0, [r7, #12]
 8015964:	f001 f950 	bl	8016c08 <USBD_CtlSendStatus>
 8015968:	e032      	b.n	80159d0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801596a:	7afb      	ldrb	r3, [r7, #11]
 801596c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015970:	b2db      	uxtb	r3, r3
 8015972:	4619      	mov	r1, r3
 8015974:	68f8      	ldr	r0, [r7, #12]
 8015976:	f000 fa37 	bl	8015de8 <USBD_CoreFindEP>
 801597a:	4603      	mov	r3, r0
 801597c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801597e:	7dbb      	ldrb	r3, [r7, #22]
 8015980:	2bff      	cmp	r3, #255	; 0xff
 8015982:	d025      	beq.n	80159d0 <USBD_LL_DataOutStage+0x15c>
 8015984:	7dbb      	ldrb	r3, [r7, #22]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d122      	bne.n	80159d0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015990:	b2db      	uxtb	r3, r3
 8015992:	2b03      	cmp	r3, #3
 8015994:	d117      	bne.n	80159c6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8015996:	7dba      	ldrb	r2, [r7, #22]
 8015998:	68fb      	ldr	r3, [r7, #12]
 801599a:	32ae      	adds	r2, #174	; 0xae
 801599c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159a0:	699b      	ldr	r3, [r3, #24]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d00f      	beq.n	80159c6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80159a6:	7dba      	ldrb	r2, [r7, #22]
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80159ae:	7dba      	ldrb	r2, [r7, #22]
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	32ae      	adds	r2, #174	; 0xae
 80159b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159b8:	699b      	ldr	r3, [r3, #24]
 80159ba:	7afa      	ldrb	r2, [r7, #11]
 80159bc:	4611      	mov	r1, r2
 80159be:	68f8      	ldr	r0, [r7, #12]
 80159c0:	4798      	blx	r3
 80159c2:	4603      	mov	r3, r0
 80159c4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80159c6:	7dfb      	ldrb	r3, [r7, #23]
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d001      	beq.n	80159d0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80159cc:	7dfb      	ldrb	r3, [r7, #23]
 80159ce:	e000      	b.n	80159d2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80159d0:	2300      	movs	r3, #0
}
 80159d2:	4618      	mov	r0, r3
 80159d4:	3718      	adds	r7, #24
 80159d6:	46bd      	mov	sp, r7
 80159d8:	bd80      	pop	{r7, pc}

080159da <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80159da:	b580      	push	{r7, lr}
 80159dc:	b086      	sub	sp, #24
 80159de:	af00      	add	r7, sp, #0
 80159e0:	60f8      	str	r0, [r7, #12]
 80159e2:	460b      	mov	r3, r1
 80159e4:	607a      	str	r2, [r7, #4]
 80159e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80159e8:	7afb      	ldrb	r3, [r7, #11]
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d16f      	bne.n	8015ace <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	3314      	adds	r3, #20
 80159f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80159fa:	2b02      	cmp	r3, #2
 80159fc:	d15a      	bne.n	8015ab4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80159fe:	693b      	ldr	r3, [r7, #16]
 8015a00:	689a      	ldr	r2, [r3, #8]
 8015a02:	693b      	ldr	r3, [r7, #16]
 8015a04:	68db      	ldr	r3, [r3, #12]
 8015a06:	429a      	cmp	r2, r3
 8015a08:	d914      	bls.n	8015a34 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015a0a:	693b      	ldr	r3, [r7, #16]
 8015a0c:	689a      	ldr	r2, [r3, #8]
 8015a0e:	693b      	ldr	r3, [r7, #16]
 8015a10:	68db      	ldr	r3, [r3, #12]
 8015a12:	1ad2      	subs	r2, r2, r3
 8015a14:	693b      	ldr	r3, [r7, #16]
 8015a16:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015a18:	693b      	ldr	r3, [r7, #16]
 8015a1a:	689b      	ldr	r3, [r3, #8]
 8015a1c:	461a      	mov	r2, r3
 8015a1e:	6879      	ldr	r1, [r7, #4]
 8015a20:	68f8      	ldr	r0, [r7, #12]
 8015a22:	f001 f8b2 	bl	8016b8a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015a26:	2300      	movs	r3, #0
 8015a28:	2200      	movs	r2, #0
 8015a2a:	2100      	movs	r1, #0
 8015a2c:	68f8      	ldr	r0, [r7, #12]
 8015a2e:	f003 fff9 	bl	8019a24 <USBD_LL_PrepareReceive>
 8015a32:	e03f      	b.n	8015ab4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015a34:	693b      	ldr	r3, [r7, #16]
 8015a36:	68da      	ldr	r2, [r3, #12]
 8015a38:	693b      	ldr	r3, [r7, #16]
 8015a3a:	689b      	ldr	r3, [r3, #8]
 8015a3c:	429a      	cmp	r2, r3
 8015a3e:	d11c      	bne.n	8015a7a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015a40:	693b      	ldr	r3, [r7, #16]
 8015a42:	685a      	ldr	r2, [r3, #4]
 8015a44:	693b      	ldr	r3, [r7, #16]
 8015a46:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015a48:	429a      	cmp	r2, r3
 8015a4a:	d316      	bcc.n	8015a7a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015a4c:	693b      	ldr	r3, [r7, #16]
 8015a4e:	685a      	ldr	r2, [r3, #4]
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015a56:	429a      	cmp	r2, r3
 8015a58:	d20f      	bcs.n	8015a7a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015a5a:	2200      	movs	r2, #0
 8015a5c:	2100      	movs	r1, #0
 8015a5e:	68f8      	ldr	r0, [r7, #12]
 8015a60:	f001 f893 	bl	8016b8a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	2200      	movs	r2, #0
 8015a68:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	2200      	movs	r2, #0
 8015a70:	2100      	movs	r1, #0
 8015a72:	68f8      	ldr	r0, [r7, #12]
 8015a74:	f003 ffd6 	bl	8019a24 <USBD_LL_PrepareReceive>
 8015a78:	e01c      	b.n	8015ab4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a80:	b2db      	uxtb	r3, r3
 8015a82:	2b03      	cmp	r3, #3
 8015a84:	d10f      	bne.n	8015aa6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a8c:	68db      	ldr	r3, [r3, #12]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d009      	beq.n	8015aa6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	2200      	movs	r2, #0
 8015a96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015aa0:	68db      	ldr	r3, [r3, #12]
 8015aa2:	68f8      	ldr	r0, [r7, #12]
 8015aa4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015aa6:	2180      	movs	r1, #128	; 0x80
 8015aa8:	68f8      	ldr	r0, [r7, #12]
 8015aaa:	f003 feb5 	bl	8019818 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015aae:	68f8      	ldr	r0, [r7, #12]
 8015ab0:	f001 f8bd 	bl	8016c2e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d03a      	beq.n	8015b34 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8015abe:	68f8      	ldr	r0, [r7, #12]
 8015ac0:	f7ff fe42 	bl	8015748 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	2200      	movs	r2, #0
 8015ac8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015acc:	e032      	b.n	8015b34 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8015ace:	7afb      	ldrb	r3, [r7, #11]
 8015ad0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015ad4:	b2db      	uxtb	r3, r3
 8015ad6:	4619      	mov	r1, r3
 8015ad8:	68f8      	ldr	r0, [r7, #12]
 8015ada:	f000 f985 	bl	8015de8 <USBD_CoreFindEP>
 8015ade:	4603      	mov	r3, r0
 8015ae0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015ae2:	7dfb      	ldrb	r3, [r7, #23]
 8015ae4:	2bff      	cmp	r3, #255	; 0xff
 8015ae6:	d025      	beq.n	8015b34 <USBD_LL_DataInStage+0x15a>
 8015ae8:	7dfb      	ldrb	r3, [r7, #23]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d122      	bne.n	8015b34 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015af4:	b2db      	uxtb	r3, r3
 8015af6:	2b03      	cmp	r3, #3
 8015af8:	d11c      	bne.n	8015b34 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015afa:	7dfa      	ldrb	r2, [r7, #23]
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	32ae      	adds	r2, #174	; 0xae
 8015b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b04:	695b      	ldr	r3, [r3, #20]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d014      	beq.n	8015b34 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8015b0a:	7dfa      	ldrb	r2, [r7, #23]
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015b12:	7dfa      	ldrb	r2, [r7, #23]
 8015b14:	68fb      	ldr	r3, [r7, #12]
 8015b16:	32ae      	adds	r2, #174	; 0xae
 8015b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b1c:	695b      	ldr	r3, [r3, #20]
 8015b1e:	7afa      	ldrb	r2, [r7, #11]
 8015b20:	4611      	mov	r1, r2
 8015b22:	68f8      	ldr	r0, [r7, #12]
 8015b24:	4798      	blx	r3
 8015b26:	4603      	mov	r3, r0
 8015b28:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8015b2a:	7dbb      	ldrb	r3, [r7, #22]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d001      	beq.n	8015b34 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015b30:	7dbb      	ldrb	r3, [r7, #22]
 8015b32:	e000      	b.n	8015b36 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015b34:	2300      	movs	r3, #0
}
 8015b36:	4618      	mov	r0, r3
 8015b38:	3718      	adds	r7, #24
 8015b3a:	46bd      	mov	sp, r7
 8015b3c:	bd80      	pop	{r7, pc}

08015b3e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015b3e:	b580      	push	{r7, lr}
 8015b40:	b084      	sub	sp, #16
 8015b42:	af00      	add	r7, sp, #0
 8015b44:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015b46:	2300      	movs	r3, #0
 8015b48:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	2201      	movs	r2, #1
 8015b4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	2200      	movs	r2, #0
 8015b56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	2200      	movs	r2, #0
 8015b5e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	2200      	movs	r2, #0
 8015b64:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	2200      	movs	r2, #0
 8015b6c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d014      	beq.n	8015ba4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b80:	685b      	ldr	r3, [r3, #4]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d00e      	beq.n	8015ba4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b8c:	685b      	ldr	r3, [r3, #4]
 8015b8e:	687a      	ldr	r2, [r7, #4]
 8015b90:	6852      	ldr	r2, [r2, #4]
 8015b92:	b2d2      	uxtb	r2, r2
 8015b94:	4611      	mov	r1, r2
 8015b96:	6878      	ldr	r0, [r7, #4]
 8015b98:	4798      	blx	r3
 8015b9a:	4603      	mov	r3, r0
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d001      	beq.n	8015ba4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015ba0:	2303      	movs	r3, #3
 8015ba2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015ba4:	2340      	movs	r3, #64	; 0x40
 8015ba6:	2200      	movs	r2, #0
 8015ba8:	2100      	movs	r1, #0
 8015baa:	6878      	ldr	r0, [r7, #4]
 8015bac:	f003 fdc0 	bl	8019730 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	2201      	movs	r2, #1
 8015bb4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	2240      	movs	r2, #64	; 0x40
 8015bbc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015bc0:	2340      	movs	r3, #64	; 0x40
 8015bc2:	2200      	movs	r2, #0
 8015bc4:	2180      	movs	r1, #128	; 0x80
 8015bc6:	6878      	ldr	r0, [r7, #4]
 8015bc8:	f003 fdb2 	bl	8019730 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	2201      	movs	r2, #1
 8015bd0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	2240      	movs	r2, #64	; 0x40
 8015bd6:	621a      	str	r2, [r3, #32]

  return ret;
 8015bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8015bda:	4618      	mov	r0, r3
 8015bdc:	3710      	adds	r7, #16
 8015bde:	46bd      	mov	sp, r7
 8015be0:	bd80      	pop	{r7, pc}

08015be2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015be2:	b480      	push	{r7}
 8015be4:	b083      	sub	sp, #12
 8015be6:	af00      	add	r7, sp, #0
 8015be8:	6078      	str	r0, [r7, #4]
 8015bea:	460b      	mov	r3, r1
 8015bec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	78fa      	ldrb	r2, [r7, #3]
 8015bf2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015bf4:	2300      	movs	r3, #0
}
 8015bf6:	4618      	mov	r0, r3
 8015bf8:	370c      	adds	r7, #12
 8015bfa:	46bd      	mov	sp, r7
 8015bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c00:	4770      	bx	lr

08015c02 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015c02:	b480      	push	{r7}
 8015c04:	b083      	sub	sp, #12
 8015c06:	af00      	add	r7, sp, #0
 8015c08:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c10:	b2db      	uxtb	r3, r3
 8015c12:	2b04      	cmp	r3, #4
 8015c14:	d006      	beq.n	8015c24 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c1c:	b2da      	uxtb	r2, r3
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	2204      	movs	r2, #4
 8015c28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015c2c:	2300      	movs	r3, #0
}
 8015c2e:	4618      	mov	r0, r3
 8015c30:	370c      	adds	r7, #12
 8015c32:	46bd      	mov	sp, r7
 8015c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c38:	4770      	bx	lr

08015c3a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015c3a:	b480      	push	{r7}
 8015c3c:	b083      	sub	sp, #12
 8015c3e:	af00      	add	r7, sp, #0
 8015c40:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c48:	b2db      	uxtb	r3, r3
 8015c4a:	2b04      	cmp	r3, #4
 8015c4c:	d106      	bne.n	8015c5c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8015c54:	b2da      	uxtb	r2, r3
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015c5c:	2300      	movs	r3, #0
}
 8015c5e:	4618      	mov	r0, r3
 8015c60:	370c      	adds	r7, #12
 8015c62:	46bd      	mov	sp, r7
 8015c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c68:	4770      	bx	lr

08015c6a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015c6a:	b580      	push	{r7, lr}
 8015c6c:	b082      	sub	sp, #8
 8015c6e:	af00      	add	r7, sp, #0
 8015c70:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c78:	b2db      	uxtb	r3, r3
 8015c7a:	2b03      	cmp	r3, #3
 8015c7c:	d110      	bne.n	8015ca0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d00b      	beq.n	8015ca0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c8e:	69db      	ldr	r3, [r3, #28]
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d005      	beq.n	8015ca0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c9a:	69db      	ldr	r3, [r3, #28]
 8015c9c:	6878      	ldr	r0, [r7, #4]
 8015c9e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015ca0:	2300      	movs	r3, #0
}
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	3708      	adds	r7, #8
 8015ca6:	46bd      	mov	sp, r7
 8015ca8:	bd80      	pop	{r7, pc}

08015caa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8015caa:	b580      	push	{r7, lr}
 8015cac:	b082      	sub	sp, #8
 8015cae:	af00      	add	r7, sp, #0
 8015cb0:	6078      	str	r0, [r7, #4]
 8015cb2:	460b      	mov	r3, r1
 8015cb4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	32ae      	adds	r2, #174	; 0xae
 8015cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d101      	bne.n	8015ccc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015cc8:	2303      	movs	r3, #3
 8015cca:	e01c      	b.n	8015d06 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015cd2:	b2db      	uxtb	r3, r3
 8015cd4:	2b03      	cmp	r3, #3
 8015cd6:	d115      	bne.n	8015d04 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	32ae      	adds	r2, #174	; 0xae
 8015ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ce6:	6a1b      	ldr	r3, [r3, #32]
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d00b      	beq.n	8015d04 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	32ae      	adds	r2, #174	; 0xae
 8015cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cfa:	6a1b      	ldr	r3, [r3, #32]
 8015cfc:	78fa      	ldrb	r2, [r7, #3]
 8015cfe:	4611      	mov	r1, r2
 8015d00:	6878      	ldr	r0, [r7, #4]
 8015d02:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015d04:	2300      	movs	r3, #0
}
 8015d06:	4618      	mov	r0, r3
 8015d08:	3708      	adds	r7, #8
 8015d0a:	46bd      	mov	sp, r7
 8015d0c:	bd80      	pop	{r7, pc}

08015d0e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015d0e:	b580      	push	{r7, lr}
 8015d10:	b082      	sub	sp, #8
 8015d12:	af00      	add	r7, sp, #0
 8015d14:	6078      	str	r0, [r7, #4]
 8015d16:	460b      	mov	r3, r1
 8015d18:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	32ae      	adds	r2, #174	; 0xae
 8015d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d101      	bne.n	8015d30 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015d2c:	2303      	movs	r3, #3
 8015d2e:	e01c      	b.n	8015d6a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015d36:	b2db      	uxtb	r3, r3
 8015d38:	2b03      	cmp	r3, #3
 8015d3a:	d115      	bne.n	8015d68 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	32ae      	adds	r2, #174	; 0xae
 8015d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d00b      	beq.n	8015d68 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	32ae      	adds	r2, #174	; 0xae
 8015d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d60:	78fa      	ldrb	r2, [r7, #3]
 8015d62:	4611      	mov	r1, r2
 8015d64:	6878      	ldr	r0, [r7, #4]
 8015d66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015d68:	2300      	movs	r3, #0
}
 8015d6a:	4618      	mov	r0, r3
 8015d6c:	3708      	adds	r7, #8
 8015d6e:	46bd      	mov	sp, r7
 8015d70:	bd80      	pop	{r7, pc}

08015d72 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015d72:	b480      	push	{r7}
 8015d74:	b083      	sub	sp, #12
 8015d76:	af00      	add	r7, sp, #0
 8015d78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015d7a:	2300      	movs	r3, #0
}
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	370c      	adds	r7, #12
 8015d80:	46bd      	mov	sp, r7
 8015d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d86:	4770      	bx	lr

08015d88 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b084      	sub	sp, #16
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015d90:	2300      	movs	r3, #0
 8015d92:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	2201      	movs	r2, #1
 8015d98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d00e      	beq.n	8015dc4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015dac:	685b      	ldr	r3, [r3, #4]
 8015dae:	687a      	ldr	r2, [r7, #4]
 8015db0:	6852      	ldr	r2, [r2, #4]
 8015db2:	b2d2      	uxtb	r2, r2
 8015db4:	4611      	mov	r1, r2
 8015db6:	6878      	ldr	r0, [r7, #4]
 8015db8:	4798      	blx	r3
 8015dba:	4603      	mov	r3, r0
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d001      	beq.n	8015dc4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015dc0:	2303      	movs	r3, #3
 8015dc2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8015dc6:	4618      	mov	r0, r3
 8015dc8:	3710      	adds	r7, #16
 8015dca:	46bd      	mov	sp, r7
 8015dcc:	bd80      	pop	{r7, pc}

08015dce <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015dce:	b480      	push	{r7}
 8015dd0:	b083      	sub	sp, #12
 8015dd2:	af00      	add	r7, sp, #0
 8015dd4:	6078      	str	r0, [r7, #4]
 8015dd6:	460b      	mov	r3, r1
 8015dd8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015dda:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015ddc:	4618      	mov	r0, r3
 8015dde:	370c      	adds	r7, #12
 8015de0:	46bd      	mov	sp, r7
 8015de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de6:	4770      	bx	lr

08015de8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015de8:	b480      	push	{r7}
 8015dea:	b083      	sub	sp, #12
 8015dec:	af00      	add	r7, sp, #0
 8015dee:	6078      	str	r0, [r7, #4]
 8015df0:	460b      	mov	r3, r1
 8015df2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015df4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015df6:	4618      	mov	r0, r3
 8015df8:	370c      	adds	r7, #12
 8015dfa:	46bd      	mov	sp, r7
 8015dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e00:	4770      	bx	lr

08015e02 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015e02:	b580      	push	{r7, lr}
 8015e04:	b086      	sub	sp, #24
 8015e06:	af00      	add	r7, sp, #0
 8015e08:	6078      	str	r0, [r7, #4]
 8015e0a:	460b      	mov	r3, r1
 8015e0c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015e16:	2300      	movs	r3, #0
 8015e18:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015e1a:	68fb      	ldr	r3, [r7, #12]
 8015e1c:	885b      	ldrh	r3, [r3, #2]
 8015e1e:	b29a      	uxth	r2, r3
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	781b      	ldrb	r3, [r3, #0]
 8015e24:	b29b      	uxth	r3, r3
 8015e26:	429a      	cmp	r2, r3
 8015e28:	d920      	bls.n	8015e6c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	781b      	ldrb	r3, [r3, #0]
 8015e2e:	b29b      	uxth	r3, r3
 8015e30:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015e32:	e013      	b.n	8015e5c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015e34:	f107 030a 	add.w	r3, r7, #10
 8015e38:	4619      	mov	r1, r3
 8015e3a:	6978      	ldr	r0, [r7, #20]
 8015e3c:	f000 f81b 	bl	8015e76 <USBD_GetNextDesc>
 8015e40:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015e42:	697b      	ldr	r3, [r7, #20]
 8015e44:	785b      	ldrb	r3, [r3, #1]
 8015e46:	2b05      	cmp	r3, #5
 8015e48:	d108      	bne.n	8015e5c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8015e4a:	697b      	ldr	r3, [r7, #20]
 8015e4c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015e4e:	693b      	ldr	r3, [r7, #16]
 8015e50:	789b      	ldrb	r3, [r3, #2]
 8015e52:	78fa      	ldrb	r2, [r7, #3]
 8015e54:	429a      	cmp	r2, r3
 8015e56:	d008      	beq.n	8015e6a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015e58:	2300      	movs	r3, #0
 8015e5a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015e5c:	68fb      	ldr	r3, [r7, #12]
 8015e5e:	885b      	ldrh	r3, [r3, #2]
 8015e60:	b29a      	uxth	r2, r3
 8015e62:	897b      	ldrh	r3, [r7, #10]
 8015e64:	429a      	cmp	r2, r3
 8015e66:	d8e5      	bhi.n	8015e34 <USBD_GetEpDesc+0x32>
 8015e68:	e000      	b.n	8015e6c <USBD_GetEpDesc+0x6a>
          break;
 8015e6a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015e6c:	693b      	ldr	r3, [r7, #16]
}
 8015e6e:	4618      	mov	r0, r3
 8015e70:	3718      	adds	r7, #24
 8015e72:	46bd      	mov	sp, r7
 8015e74:	bd80      	pop	{r7, pc}

08015e76 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8015e76:	b480      	push	{r7}
 8015e78:	b085      	sub	sp, #20
 8015e7a:	af00      	add	r7, sp, #0
 8015e7c:	6078      	str	r0, [r7, #4]
 8015e7e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015e84:	683b      	ldr	r3, [r7, #0]
 8015e86:	881a      	ldrh	r2, [r3, #0]
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	781b      	ldrb	r3, [r3, #0]
 8015e8c:	b29b      	uxth	r3, r3
 8015e8e:	4413      	add	r3, r2
 8015e90:	b29a      	uxth	r2, r3
 8015e92:	683b      	ldr	r3, [r7, #0]
 8015e94:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	781b      	ldrb	r3, [r3, #0]
 8015e9a:	461a      	mov	r2, r3
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	4413      	add	r3, r2
 8015ea0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015ea2:	68fb      	ldr	r3, [r7, #12]
}
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	3714      	adds	r7, #20
 8015ea8:	46bd      	mov	sp, r7
 8015eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eae:	4770      	bx	lr

08015eb0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015eb0:	b480      	push	{r7}
 8015eb2:	b087      	sub	sp, #28
 8015eb4:	af00      	add	r7, sp, #0
 8015eb6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015ebc:	697b      	ldr	r3, [r7, #20]
 8015ebe:	781b      	ldrb	r3, [r3, #0]
 8015ec0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015ec2:	697b      	ldr	r3, [r7, #20]
 8015ec4:	3301      	adds	r3, #1
 8015ec6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015ec8:	697b      	ldr	r3, [r7, #20]
 8015eca:	781b      	ldrb	r3, [r3, #0]
 8015ecc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015ece:	8a3b      	ldrh	r3, [r7, #16]
 8015ed0:	021b      	lsls	r3, r3, #8
 8015ed2:	b21a      	sxth	r2, r3
 8015ed4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015ed8:	4313      	orrs	r3, r2
 8015eda:	b21b      	sxth	r3, r3
 8015edc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015ede:	89fb      	ldrh	r3, [r7, #14]
}
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	371c      	adds	r7, #28
 8015ee4:	46bd      	mov	sp, r7
 8015ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eea:	4770      	bx	lr

08015eec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015eec:	b580      	push	{r7, lr}
 8015eee:	b084      	sub	sp, #16
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	6078      	str	r0, [r7, #4]
 8015ef4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015ef6:	2300      	movs	r3, #0
 8015ef8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015efa:	683b      	ldr	r3, [r7, #0]
 8015efc:	781b      	ldrb	r3, [r3, #0]
 8015efe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015f02:	2b40      	cmp	r3, #64	; 0x40
 8015f04:	d005      	beq.n	8015f12 <USBD_StdDevReq+0x26>
 8015f06:	2b40      	cmp	r3, #64	; 0x40
 8015f08:	d857      	bhi.n	8015fba <USBD_StdDevReq+0xce>
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d00f      	beq.n	8015f2e <USBD_StdDevReq+0x42>
 8015f0e:	2b20      	cmp	r3, #32
 8015f10:	d153      	bne.n	8015fba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	32ae      	adds	r2, #174	; 0xae
 8015f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f20:	689b      	ldr	r3, [r3, #8]
 8015f22:	6839      	ldr	r1, [r7, #0]
 8015f24:	6878      	ldr	r0, [r7, #4]
 8015f26:	4798      	blx	r3
 8015f28:	4603      	mov	r3, r0
 8015f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8015f2c:	e04a      	b.n	8015fc4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015f2e:	683b      	ldr	r3, [r7, #0]
 8015f30:	785b      	ldrb	r3, [r3, #1]
 8015f32:	2b09      	cmp	r3, #9
 8015f34:	d83b      	bhi.n	8015fae <USBD_StdDevReq+0xc2>
 8015f36:	a201      	add	r2, pc, #4	; (adr r2, 8015f3c <USBD_StdDevReq+0x50>)
 8015f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f3c:	08015f91 	.word	0x08015f91
 8015f40:	08015fa5 	.word	0x08015fa5
 8015f44:	08015faf 	.word	0x08015faf
 8015f48:	08015f9b 	.word	0x08015f9b
 8015f4c:	08015faf 	.word	0x08015faf
 8015f50:	08015f6f 	.word	0x08015f6f
 8015f54:	08015f65 	.word	0x08015f65
 8015f58:	08015faf 	.word	0x08015faf
 8015f5c:	08015f87 	.word	0x08015f87
 8015f60:	08015f79 	.word	0x08015f79
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015f64:	6839      	ldr	r1, [r7, #0]
 8015f66:	6878      	ldr	r0, [r7, #4]
 8015f68:	f000 fa3c 	bl	80163e4 <USBD_GetDescriptor>
          break;
 8015f6c:	e024      	b.n	8015fb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015f6e:	6839      	ldr	r1, [r7, #0]
 8015f70:	6878      	ldr	r0, [r7, #4]
 8015f72:	f000 fba1 	bl	80166b8 <USBD_SetAddress>
          break;
 8015f76:	e01f      	b.n	8015fb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015f78:	6839      	ldr	r1, [r7, #0]
 8015f7a:	6878      	ldr	r0, [r7, #4]
 8015f7c:	f000 fbe0 	bl	8016740 <USBD_SetConfig>
 8015f80:	4603      	mov	r3, r0
 8015f82:	73fb      	strb	r3, [r7, #15]
          break;
 8015f84:	e018      	b.n	8015fb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015f86:	6839      	ldr	r1, [r7, #0]
 8015f88:	6878      	ldr	r0, [r7, #4]
 8015f8a:	f000 fc83 	bl	8016894 <USBD_GetConfig>
          break;
 8015f8e:	e013      	b.n	8015fb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015f90:	6839      	ldr	r1, [r7, #0]
 8015f92:	6878      	ldr	r0, [r7, #4]
 8015f94:	f000 fcb4 	bl	8016900 <USBD_GetStatus>
          break;
 8015f98:	e00e      	b.n	8015fb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015f9a:	6839      	ldr	r1, [r7, #0]
 8015f9c:	6878      	ldr	r0, [r7, #4]
 8015f9e:	f000 fce3 	bl	8016968 <USBD_SetFeature>
          break;
 8015fa2:	e009      	b.n	8015fb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015fa4:	6839      	ldr	r1, [r7, #0]
 8015fa6:	6878      	ldr	r0, [r7, #4]
 8015fa8:	f000 fd07 	bl	80169ba <USBD_ClrFeature>
          break;
 8015fac:	e004      	b.n	8015fb8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015fae:	6839      	ldr	r1, [r7, #0]
 8015fb0:	6878      	ldr	r0, [r7, #4]
 8015fb2:	f000 fd5e 	bl	8016a72 <USBD_CtlError>
          break;
 8015fb6:	bf00      	nop
      }
      break;
 8015fb8:	e004      	b.n	8015fc4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015fba:	6839      	ldr	r1, [r7, #0]
 8015fbc:	6878      	ldr	r0, [r7, #4]
 8015fbe:	f000 fd58 	bl	8016a72 <USBD_CtlError>
      break;
 8015fc2:	bf00      	nop
  }

  return ret;
 8015fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	3710      	adds	r7, #16
 8015fca:	46bd      	mov	sp, r7
 8015fcc:	bd80      	pop	{r7, pc}
 8015fce:	bf00      	nop

08015fd0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015fd0:	b580      	push	{r7, lr}
 8015fd2:	b084      	sub	sp, #16
 8015fd4:	af00      	add	r7, sp, #0
 8015fd6:	6078      	str	r0, [r7, #4]
 8015fd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015fda:	2300      	movs	r3, #0
 8015fdc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015fde:	683b      	ldr	r3, [r7, #0]
 8015fe0:	781b      	ldrb	r3, [r3, #0]
 8015fe2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015fe6:	2b40      	cmp	r3, #64	; 0x40
 8015fe8:	d005      	beq.n	8015ff6 <USBD_StdItfReq+0x26>
 8015fea:	2b40      	cmp	r3, #64	; 0x40
 8015fec:	d852      	bhi.n	8016094 <USBD_StdItfReq+0xc4>
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d001      	beq.n	8015ff6 <USBD_StdItfReq+0x26>
 8015ff2:	2b20      	cmp	r3, #32
 8015ff4:	d14e      	bne.n	8016094 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ffc:	b2db      	uxtb	r3, r3
 8015ffe:	3b01      	subs	r3, #1
 8016000:	2b02      	cmp	r3, #2
 8016002:	d840      	bhi.n	8016086 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016004:	683b      	ldr	r3, [r7, #0]
 8016006:	889b      	ldrh	r3, [r3, #4]
 8016008:	b2db      	uxtb	r3, r3
 801600a:	2b01      	cmp	r3, #1
 801600c:	d836      	bhi.n	801607c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801600e:	683b      	ldr	r3, [r7, #0]
 8016010:	889b      	ldrh	r3, [r3, #4]
 8016012:	b2db      	uxtb	r3, r3
 8016014:	4619      	mov	r1, r3
 8016016:	6878      	ldr	r0, [r7, #4]
 8016018:	f7ff fed9 	bl	8015dce <USBD_CoreFindIF>
 801601c:	4603      	mov	r3, r0
 801601e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016020:	7bbb      	ldrb	r3, [r7, #14]
 8016022:	2bff      	cmp	r3, #255	; 0xff
 8016024:	d01d      	beq.n	8016062 <USBD_StdItfReq+0x92>
 8016026:	7bbb      	ldrb	r3, [r7, #14]
 8016028:	2b00      	cmp	r3, #0
 801602a:	d11a      	bne.n	8016062 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801602c:	7bba      	ldrb	r2, [r7, #14]
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	32ae      	adds	r2, #174	; 0xae
 8016032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016036:	689b      	ldr	r3, [r3, #8]
 8016038:	2b00      	cmp	r3, #0
 801603a:	d00f      	beq.n	801605c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801603c:	7bba      	ldrb	r2, [r7, #14]
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016044:	7bba      	ldrb	r2, [r7, #14]
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	32ae      	adds	r2, #174	; 0xae
 801604a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801604e:	689b      	ldr	r3, [r3, #8]
 8016050:	6839      	ldr	r1, [r7, #0]
 8016052:	6878      	ldr	r0, [r7, #4]
 8016054:	4798      	blx	r3
 8016056:	4603      	mov	r3, r0
 8016058:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801605a:	e004      	b.n	8016066 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801605c:	2303      	movs	r3, #3
 801605e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016060:	e001      	b.n	8016066 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8016062:	2303      	movs	r3, #3
 8016064:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016066:	683b      	ldr	r3, [r7, #0]
 8016068:	88db      	ldrh	r3, [r3, #6]
 801606a:	2b00      	cmp	r3, #0
 801606c:	d110      	bne.n	8016090 <USBD_StdItfReq+0xc0>
 801606e:	7bfb      	ldrb	r3, [r7, #15]
 8016070:	2b00      	cmp	r3, #0
 8016072:	d10d      	bne.n	8016090 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016074:	6878      	ldr	r0, [r7, #4]
 8016076:	f000 fdc7 	bl	8016c08 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801607a:	e009      	b.n	8016090 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801607c:	6839      	ldr	r1, [r7, #0]
 801607e:	6878      	ldr	r0, [r7, #4]
 8016080:	f000 fcf7 	bl	8016a72 <USBD_CtlError>
          break;
 8016084:	e004      	b.n	8016090 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8016086:	6839      	ldr	r1, [r7, #0]
 8016088:	6878      	ldr	r0, [r7, #4]
 801608a:	f000 fcf2 	bl	8016a72 <USBD_CtlError>
          break;
 801608e:	e000      	b.n	8016092 <USBD_StdItfReq+0xc2>
          break;
 8016090:	bf00      	nop
      }
      break;
 8016092:	e004      	b.n	801609e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8016094:	6839      	ldr	r1, [r7, #0]
 8016096:	6878      	ldr	r0, [r7, #4]
 8016098:	f000 fceb 	bl	8016a72 <USBD_CtlError>
      break;
 801609c:	bf00      	nop
  }

  return ret;
 801609e:	7bfb      	ldrb	r3, [r7, #15]
}
 80160a0:	4618      	mov	r0, r3
 80160a2:	3710      	adds	r7, #16
 80160a4:	46bd      	mov	sp, r7
 80160a6:	bd80      	pop	{r7, pc}

080160a8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b084      	sub	sp, #16
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	6078      	str	r0, [r7, #4]
 80160b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80160b2:	2300      	movs	r3, #0
 80160b4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80160b6:	683b      	ldr	r3, [r7, #0]
 80160b8:	889b      	ldrh	r3, [r3, #4]
 80160ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80160bc:	683b      	ldr	r3, [r7, #0]
 80160be:	781b      	ldrb	r3, [r3, #0]
 80160c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80160c4:	2b40      	cmp	r3, #64	; 0x40
 80160c6:	d007      	beq.n	80160d8 <USBD_StdEPReq+0x30>
 80160c8:	2b40      	cmp	r3, #64	; 0x40
 80160ca:	f200 817f 	bhi.w	80163cc <USBD_StdEPReq+0x324>
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d02a      	beq.n	8016128 <USBD_StdEPReq+0x80>
 80160d2:	2b20      	cmp	r3, #32
 80160d4:	f040 817a 	bne.w	80163cc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80160d8:	7bbb      	ldrb	r3, [r7, #14]
 80160da:	4619      	mov	r1, r3
 80160dc:	6878      	ldr	r0, [r7, #4]
 80160de:	f7ff fe83 	bl	8015de8 <USBD_CoreFindEP>
 80160e2:	4603      	mov	r3, r0
 80160e4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80160e6:	7b7b      	ldrb	r3, [r7, #13]
 80160e8:	2bff      	cmp	r3, #255	; 0xff
 80160ea:	f000 8174 	beq.w	80163d6 <USBD_StdEPReq+0x32e>
 80160ee:	7b7b      	ldrb	r3, [r7, #13]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	f040 8170 	bne.w	80163d6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80160f6:	7b7a      	ldrb	r2, [r7, #13]
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80160fe:	7b7a      	ldrb	r2, [r7, #13]
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	32ae      	adds	r2, #174	; 0xae
 8016104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016108:	689b      	ldr	r3, [r3, #8]
 801610a:	2b00      	cmp	r3, #0
 801610c:	f000 8163 	beq.w	80163d6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016110:	7b7a      	ldrb	r2, [r7, #13]
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	32ae      	adds	r2, #174	; 0xae
 8016116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801611a:	689b      	ldr	r3, [r3, #8]
 801611c:	6839      	ldr	r1, [r7, #0]
 801611e:	6878      	ldr	r0, [r7, #4]
 8016120:	4798      	blx	r3
 8016122:	4603      	mov	r3, r0
 8016124:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8016126:	e156      	b.n	80163d6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016128:	683b      	ldr	r3, [r7, #0]
 801612a:	785b      	ldrb	r3, [r3, #1]
 801612c:	2b03      	cmp	r3, #3
 801612e:	d008      	beq.n	8016142 <USBD_StdEPReq+0x9a>
 8016130:	2b03      	cmp	r3, #3
 8016132:	f300 8145 	bgt.w	80163c0 <USBD_StdEPReq+0x318>
 8016136:	2b00      	cmp	r3, #0
 8016138:	f000 809b 	beq.w	8016272 <USBD_StdEPReq+0x1ca>
 801613c:	2b01      	cmp	r3, #1
 801613e:	d03c      	beq.n	80161ba <USBD_StdEPReq+0x112>
 8016140:	e13e      	b.n	80163c0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016148:	b2db      	uxtb	r3, r3
 801614a:	2b02      	cmp	r3, #2
 801614c:	d002      	beq.n	8016154 <USBD_StdEPReq+0xac>
 801614e:	2b03      	cmp	r3, #3
 8016150:	d016      	beq.n	8016180 <USBD_StdEPReq+0xd8>
 8016152:	e02c      	b.n	80161ae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016154:	7bbb      	ldrb	r3, [r7, #14]
 8016156:	2b00      	cmp	r3, #0
 8016158:	d00d      	beq.n	8016176 <USBD_StdEPReq+0xce>
 801615a:	7bbb      	ldrb	r3, [r7, #14]
 801615c:	2b80      	cmp	r3, #128	; 0x80
 801615e:	d00a      	beq.n	8016176 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016160:	7bbb      	ldrb	r3, [r7, #14]
 8016162:	4619      	mov	r1, r3
 8016164:	6878      	ldr	r0, [r7, #4]
 8016166:	f003 fb57 	bl	8019818 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801616a:	2180      	movs	r1, #128	; 0x80
 801616c:	6878      	ldr	r0, [r7, #4]
 801616e:	f003 fb53 	bl	8019818 <USBD_LL_StallEP>
 8016172:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016174:	e020      	b.n	80161b8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8016176:	6839      	ldr	r1, [r7, #0]
 8016178:	6878      	ldr	r0, [r7, #4]
 801617a:	f000 fc7a 	bl	8016a72 <USBD_CtlError>
              break;
 801617e:	e01b      	b.n	80161b8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016180:	683b      	ldr	r3, [r7, #0]
 8016182:	885b      	ldrh	r3, [r3, #2]
 8016184:	2b00      	cmp	r3, #0
 8016186:	d10e      	bne.n	80161a6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016188:	7bbb      	ldrb	r3, [r7, #14]
 801618a:	2b00      	cmp	r3, #0
 801618c:	d00b      	beq.n	80161a6 <USBD_StdEPReq+0xfe>
 801618e:	7bbb      	ldrb	r3, [r7, #14]
 8016190:	2b80      	cmp	r3, #128	; 0x80
 8016192:	d008      	beq.n	80161a6 <USBD_StdEPReq+0xfe>
 8016194:	683b      	ldr	r3, [r7, #0]
 8016196:	88db      	ldrh	r3, [r3, #6]
 8016198:	2b00      	cmp	r3, #0
 801619a:	d104      	bne.n	80161a6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801619c:	7bbb      	ldrb	r3, [r7, #14]
 801619e:	4619      	mov	r1, r3
 80161a0:	6878      	ldr	r0, [r7, #4]
 80161a2:	f003 fb39 	bl	8019818 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80161a6:	6878      	ldr	r0, [r7, #4]
 80161a8:	f000 fd2e 	bl	8016c08 <USBD_CtlSendStatus>

              break;
 80161ac:	e004      	b.n	80161b8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80161ae:	6839      	ldr	r1, [r7, #0]
 80161b0:	6878      	ldr	r0, [r7, #4]
 80161b2:	f000 fc5e 	bl	8016a72 <USBD_CtlError>
              break;
 80161b6:	bf00      	nop
          }
          break;
 80161b8:	e107      	b.n	80163ca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161c0:	b2db      	uxtb	r3, r3
 80161c2:	2b02      	cmp	r3, #2
 80161c4:	d002      	beq.n	80161cc <USBD_StdEPReq+0x124>
 80161c6:	2b03      	cmp	r3, #3
 80161c8:	d016      	beq.n	80161f8 <USBD_StdEPReq+0x150>
 80161ca:	e04b      	b.n	8016264 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80161cc:	7bbb      	ldrb	r3, [r7, #14]
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d00d      	beq.n	80161ee <USBD_StdEPReq+0x146>
 80161d2:	7bbb      	ldrb	r3, [r7, #14]
 80161d4:	2b80      	cmp	r3, #128	; 0x80
 80161d6:	d00a      	beq.n	80161ee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80161d8:	7bbb      	ldrb	r3, [r7, #14]
 80161da:	4619      	mov	r1, r3
 80161dc:	6878      	ldr	r0, [r7, #4]
 80161de:	f003 fb1b 	bl	8019818 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80161e2:	2180      	movs	r1, #128	; 0x80
 80161e4:	6878      	ldr	r0, [r7, #4]
 80161e6:	f003 fb17 	bl	8019818 <USBD_LL_StallEP>
 80161ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80161ec:	e040      	b.n	8016270 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80161ee:	6839      	ldr	r1, [r7, #0]
 80161f0:	6878      	ldr	r0, [r7, #4]
 80161f2:	f000 fc3e 	bl	8016a72 <USBD_CtlError>
              break;
 80161f6:	e03b      	b.n	8016270 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80161f8:	683b      	ldr	r3, [r7, #0]
 80161fa:	885b      	ldrh	r3, [r3, #2]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d136      	bne.n	801626e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016200:	7bbb      	ldrb	r3, [r7, #14]
 8016202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016206:	2b00      	cmp	r3, #0
 8016208:	d004      	beq.n	8016214 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801620a:	7bbb      	ldrb	r3, [r7, #14]
 801620c:	4619      	mov	r1, r3
 801620e:	6878      	ldr	r0, [r7, #4]
 8016210:	f003 fb38 	bl	8019884 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016214:	6878      	ldr	r0, [r7, #4]
 8016216:	f000 fcf7 	bl	8016c08 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801621a:	7bbb      	ldrb	r3, [r7, #14]
 801621c:	4619      	mov	r1, r3
 801621e:	6878      	ldr	r0, [r7, #4]
 8016220:	f7ff fde2 	bl	8015de8 <USBD_CoreFindEP>
 8016224:	4603      	mov	r3, r0
 8016226:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016228:	7b7b      	ldrb	r3, [r7, #13]
 801622a:	2bff      	cmp	r3, #255	; 0xff
 801622c:	d01f      	beq.n	801626e <USBD_StdEPReq+0x1c6>
 801622e:	7b7b      	ldrb	r3, [r7, #13]
 8016230:	2b00      	cmp	r3, #0
 8016232:	d11c      	bne.n	801626e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8016234:	7b7a      	ldrb	r2, [r7, #13]
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801623c:	7b7a      	ldrb	r2, [r7, #13]
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	32ae      	adds	r2, #174	; 0xae
 8016242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016246:	689b      	ldr	r3, [r3, #8]
 8016248:	2b00      	cmp	r3, #0
 801624a:	d010      	beq.n	801626e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801624c:	7b7a      	ldrb	r2, [r7, #13]
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	32ae      	adds	r2, #174	; 0xae
 8016252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016256:	689b      	ldr	r3, [r3, #8]
 8016258:	6839      	ldr	r1, [r7, #0]
 801625a:	6878      	ldr	r0, [r7, #4]
 801625c:	4798      	blx	r3
 801625e:	4603      	mov	r3, r0
 8016260:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8016262:	e004      	b.n	801626e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8016264:	6839      	ldr	r1, [r7, #0]
 8016266:	6878      	ldr	r0, [r7, #4]
 8016268:	f000 fc03 	bl	8016a72 <USBD_CtlError>
              break;
 801626c:	e000      	b.n	8016270 <USBD_StdEPReq+0x1c8>
              break;
 801626e:	bf00      	nop
          }
          break;
 8016270:	e0ab      	b.n	80163ca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016278:	b2db      	uxtb	r3, r3
 801627a:	2b02      	cmp	r3, #2
 801627c:	d002      	beq.n	8016284 <USBD_StdEPReq+0x1dc>
 801627e:	2b03      	cmp	r3, #3
 8016280:	d032      	beq.n	80162e8 <USBD_StdEPReq+0x240>
 8016282:	e097      	b.n	80163b4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016284:	7bbb      	ldrb	r3, [r7, #14]
 8016286:	2b00      	cmp	r3, #0
 8016288:	d007      	beq.n	801629a <USBD_StdEPReq+0x1f2>
 801628a:	7bbb      	ldrb	r3, [r7, #14]
 801628c:	2b80      	cmp	r3, #128	; 0x80
 801628e:	d004      	beq.n	801629a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016290:	6839      	ldr	r1, [r7, #0]
 8016292:	6878      	ldr	r0, [r7, #4]
 8016294:	f000 fbed 	bl	8016a72 <USBD_CtlError>
                break;
 8016298:	e091      	b.n	80163be <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801629a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	da0b      	bge.n	80162ba <USBD_StdEPReq+0x212>
 80162a2:	7bbb      	ldrb	r3, [r7, #14]
 80162a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80162a8:	4613      	mov	r3, r2
 80162aa:	009b      	lsls	r3, r3, #2
 80162ac:	4413      	add	r3, r2
 80162ae:	009b      	lsls	r3, r3, #2
 80162b0:	3310      	adds	r3, #16
 80162b2:	687a      	ldr	r2, [r7, #4]
 80162b4:	4413      	add	r3, r2
 80162b6:	3304      	adds	r3, #4
 80162b8:	e00b      	b.n	80162d2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80162ba:	7bbb      	ldrb	r3, [r7, #14]
 80162bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80162c0:	4613      	mov	r3, r2
 80162c2:	009b      	lsls	r3, r3, #2
 80162c4:	4413      	add	r3, r2
 80162c6:	009b      	lsls	r3, r3, #2
 80162c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80162cc:	687a      	ldr	r2, [r7, #4]
 80162ce:	4413      	add	r3, r2
 80162d0:	3304      	adds	r3, #4
 80162d2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80162d4:	68bb      	ldr	r3, [r7, #8]
 80162d6:	2200      	movs	r2, #0
 80162d8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80162da:	68bb      	ldr	r3, [r7, #8]
 80162dc:	2202      	movs	r2, #2
 80162de:	4619      	mov	r1, r3
 80162e0:	6878      	ldr	r0, [r7, #4]
 80162e2:	f000 fc37 	bl	8016b54 <USBD_CtlSendData>
              break;
 80162e6:	e06a      	b.n	80163be <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80162e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	da11      	bge.n	8016314 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80162f0:	7bbb      	ldrb	r3, [r7, #14]
 80162f2:	f003 020f 	and.w	r2, r3, #15
 80162f6:	6879      	ldr	r1, [r7, #4]
 80162f8:	4613      	mov	r3, r2
 80162fa:	009b      	lsls	r3, r3, #2
 80162fc:	4413      	add	r3, r2
 80162fe:	009b      	lsls	r3, r3, #2
 8016300:	440b      	add	r3, r1
 8016302:	3324      	adds	r3, #36	; 0x24
 8016304:	881b      	ldrh	r3, [r3, #0]
 8016306:	2b00      	cmp	r3, #0
 8016308:	d117      	bne.n	801633a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801630a:	6839      	ldr	r1, [r7, #0]
 801630c:	6878      	ldr	r0, [r7, #4]
 801630e:	f000 fbb0 	bl	8016a72 <USBD_CtlError>
                  break;
 8016312:	e054      	b.n	80163be <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016314:	7bbb      	ldrb	r3, [r7, #14]
 8016316:	f003 020f 	and.w	r2, r3, #15
 801631a:	6879      	ldr	r1, [r7, #4]
 801631c:	4613      	mov	r3, r2
 801631e:	009b      	lsls	r3, r3, #2
 8016320:	4413      	add	r3, r2
 8016322:	009b      	lsls	r3, r3, #2
 8016324:	440b      	add	r3, r1
 8016326:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801632a:	881b      	ldrh	r3, [r3, #0]
 801632c:	2b00      	cmp	r3, #0
 801632e:	d104      	bne.n	801633a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016330:	6839      	ldr	r1, [r7, #0]
 8016332:	6878      	ldr	r0, [r7, #4]
 8016334:	f000 fb9d 	bl	8016a72 <USBD_CtlError>
                  break;
 8016338:	e041      	b.n	80163be <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801633a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801633e:	2b00      	cmp	r3, #0
 8016340:	da0b      	bge.n	801635a <USBD_StdEPReq+0x2b2>
 8016342:	7bbb      	ldrb	r3, [r7, #14]
 8016344:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016348:	4613      	mov	r3, r2
 801634a:	009b      	lsls	r3, r3, #2
 801634c:	4413      	add	r3, r2
 801634e:	009b      	lsls	r3, r3, #2
 8016350:	3310      	adds	r3, #16
 8016352:	687a      	ldr	r2, [r7, #4]
 8016354:	4413      	add	r3, r2
 8016356:	3304      	adds	r3, #4
 8016358:	e00b      	b.n	8016372 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801635a:	7bbb      	ldrb	r3, [r7, #14]
 801635c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016360:	4613      	mov	r3, r2
 8016362:	009b      	lsls	r3, r3, #2
 8016364:	4413      	add	r3, r2
 8016366:	009b      	lsls	r3, r3, #2
 8016368:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801636c:	687a      	ldr	r2, [r7, #4]
 801636e:	4413      	add	r3, r2
 8016370:	3304      	adds	r3, #4
 8016372:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016374:	7bbb      	ldrb	r3, [r7, #14]
 8016376:	2b00      	cmp	r3, #0
 8016378:	d002      	beq.n	8016380 <USBD_StdEPReq+0x2d8>
 801637a:	7bbb      	ldrb	r3, [r7, #14]
 801637c:	2b80      	cmp	r3, #128	; 0x80
 801637e:	d103      	bne.n	8016388 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016380:	68bb      	ldr	r3, [r7, #8]
 8016382:	2200      	movs	r2, #0
 8016384:	601a      	str	r2, [r3, #0]
 8016386:	e00e      	b.n	80163a6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016388:	7bbb      	ldrb	r3, [r7, #14]
 801638a:	4619      	mov	r1, r3
 801638c:	6878      	ldr	r0, [r7, #4]
 801638e:	f003 faaf 	bl	80198f0 <USBD_LL_IsStallEP>
 8016392:	4603      	mov	r3, r0
 8016394:	2b00      	cmp	r3, #0
 8016396:	d003      	beq.n	80163a0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016398:	68bb      	ldr	r3, [r7, #8]
 801639a:	2201      	movs	r2, #1
 801639c:	601a      	str	r2, [r3, #0]
 801639e:	e002      	b.n	80163a6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80163a0:	68bb      	ldr	r3, [r7, #8]
 80163a2:	2200      	movs	r2, #0
 80163a4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80163a6:	68bb      	ldr	r3, [r7, #8]
 80163a8:	2202      	movs	r2, #2
 80163aa:	4619      	mov	r1, r3
 80163ac:	6878      	ldr	r0, [r7, #4]
 80163ae:	f000 fbd1 	bl	8016b54 <USBD_CtlSendData>
              break;
 80163b2:	e004      	b.n	80163be <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80163b4:	6839      	ldr	r1, [r7, #0]
 80163b6:	6878      	ldr	r0, [r7, #4]
 80163b8:	f000 fb5b 	bl	8016a72 <USBD_CtlError>
              break;
 80163bc:	bf00      	nop
          }
          break;
 80163be:	e004      	b.n	80163ca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80163c0:	6839      	ldr	r1, [r7, #0]
 80163c2:	6878      	ldr	r0, [r7, #4]
 80163c4:	f000 fb55 	bl	8016a72 <USBD_CtlError>
          break;
 80163c8:	bf00      	nop
      }
      break;
 80163ca:	e005      	b.n	80163d8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80163cc:	6839      	ldr	r1, [r7, #0]
 80163ce:	6878      	ldr	r0, [r7, #4]
 80163d0:	f000 fb4f 	bl	8016a72 <USBD_CtlError>
      break;
 80163d4:	e000      	b.n	80163d8 <USBD_StdEPReq+0x330>
      break;
 80163d6:	bf00      	nop
  }

  return ret;
 80163d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80163da:	4618      	mov	r0, r3
 80163dc:	3710      	adds	r7, #16
 80163de:	46bd      	mov	sp, r7
 80163e0:	bd80      	pop	{r7, pc}
	...

080163e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80163e4:	b580      	push	{r7, lr}
 80163e6:	b084      	sub	sp, #16
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	6078      	str	r0, [r7, #4]
 80163ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80163ee:	2300      	movs	r3, #0
 80163f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80163f2:	2300      	movs	r3, #0
 80163f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80163f6:	2300      	movs	r3, #0
 80163f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80163fa:	683b      	ldr	r3, [r7, #0]
 80163fc:	885b      	ldrh	r3, [r3, #2]
 80163fe:	0a1b      	lsrs	r3, r3, #8
 8016400:	b29b      	uxth	r3, r3
 8016402:	3b01      	subs	r3, #1
 8016404:	2b06      	cmp	r3, #6
 8016406:	f200 8128 	bhi.w	801665a <USBD_GetDescriptor+0x276>
 801640a:	a201      	add	r2, pc, #4	; (adr r2, 8016410 <USBD_GetDescriptor+0x2c>)
 801640c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016410:	0801642d 	.word	0x0801642d
 8016414:	08016445 	.word	0x08016445
 8016418:	08016485 	.word	0x08016485
 801641c:	0801665b 	.word	0x0801665b
 8016420:	0801665b 	.word	0x0801665b
 8016424:	080165fb 	.word	0x080165fb
 8016428:	08016627 	.word	0x08016627
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	687a      	ldr	r2, [r7, #4]
 8016436:	7c12      	ldrb	r2, [r2, #16]
 8016438:	f107 0108 	add.w	r1, r7, #8
 801643c:	4610      	mov	r0, r2
 801643e:	4798      	blx	r3
 8016440:	60f8      	str	r0, [r7, #12]
      break;
 8016442:	e112      	b.n	801666a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	7c1b      	ldrb	r3, [r3, #16]
 8016448:	2b00      	cmp	r3, #0
 801644a:	d10d      	bne.n	8016468 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016454:	f107 0208 	add.w	r2, r7, #8
 8016458:	4610      	mov	r0, r2
 801645a:	4798      	blx	r3
 801645c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	3301      	adds	r3, #1
 8016462:	2202      	movs	r2, #2
 8016464:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016466:	e100      	b.n	801666a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801646e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016470:	f107 0208 	add.w	r2, r7, #8
 8016474:	4610      	mov	r0, r2
 8016476:	4798      	blx	r3
 8016478:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	3301      	adds	r3, #1
 801647e:	2202      	movs	r2, #2
 8016480:	701a      	strb	r2, [r3, #0]
      break;
 8016482:	e0f2      	b.n	801666a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016484:	683b      	ldr	r3, [r7, #0]
 8016486:	885b      	ldrh	r3, [r3, #2]
 8016488:	b2db      	uxtb	r3, r3
 801648a:	2b05      	cmp	r3, #5
 801648c:	f200 80ac 	bhi.w	80165e8 <USBD_GetDescriptor+0x204>
 8016490:	a201      	add	r2, pc, #4	; (adr r2, 8016498 <USBD_GetDescriptor+0xb4>)
 8016492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016496:	bf00      	nop
 8016498:	080164b1 	.word	0x080164b1
 801649c:	080164e5 	.word	0x080164e5
 80164a0:	08016519 	.word	0x08016519
 80164a4:	0801654d 	.word	0x0801654d
 80164a8:	08016581 	.word	0x08016581
 80164ac:	080165b5 	.word	0x080165b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80164b6:	685b      	ldr	r3, [r3, #4]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d00b      	beq.n	80164d4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80164c2:	685b      	ldr	r3, [r3, #4]
 80164c4:	687a      	ldr	r2, [r7, #4]
 80164c6:	7c12      	ldrb	r2, [r2, #16]
 80164c8:	f107 0108 	add.w	r1, r7, #8
 80164cc:	4610      	mov	r0, r2
 80164ce:	4798      	blx	r3
 80164d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80164d2:	e091      	b.n	80165f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80164d4:	6839      	ldr	r1, [r7, #0]
 80164d6:	6878      	ldr	r0, [r7, #4]
 80164d8:	f000 facb 	bl	8016a72 <USBD_CtlError>
            err++;
 80164dc:	7afb      	ldrb	r3, [r7, #11]
 80164de:	3301      	adds	r3, #1
 80164e0:	72fb      	strb	r3, [r7, #11]
          break;
 80164e2:	e089      	b.n	80165f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80164ea:	689b      	ldr	r3, [r3, #8]
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d00b      	beq.n	8016508 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80164f6:	689b      	ldr	r3, [r3, #8]
 80164f8:	687a      	ldr	r2, [r7, #4]
 80164fa:	7c12      	ldrb	r2, [r2, #16]
 80164fc:	f107 0108 	add.w	r1, r7, #8
 8016500:	4610      	mov	r0, r2
 8016502:	4798      	blx	r3
 8016504:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016506:	e077      	b.n	80165f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016508:	6839      	ldr	r1, [r7, #0]
 801650a:	6878      	ldr	r0, [r7, #4]
 801650c:	f000 fab1 	bl	8016a72 <USBD_CtlError>
            err++;
 8016510:	7afb      	ldrb	r3, [r7, #11]
 8016512:	3301      	adds	r3, #1
 8016514:	72fb      	strb	r3, [r7, #11]
          break;
 8016516:	e06f      	b.n	80165f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801651e:	68db      	ldr	r3, [r3, #12]
 8016520:	2b00      	cmp	r3, #0
 8016522:	d00b      	beq.n	801653c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801652a:	68db      	ldr	r3, [r3, #12]
 801652c:	687a      	ldr	r2, [r7, #4]
 801652e:	7c12      	ldrb	r2, [r2, #16]
 8016530:	f107 0108 	add.w	r1, r7, #8
 8016534:	4610      	mov	r0, r2
 8016536:	4798      	blx	r3
 8016538:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801653a:	e05d      	b.n	80165f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801653c:	6839      	ldr	r1, [r7, #0]
 801653e:	6878      	ldr	r0, [r7, #4]
 8016540:	f000 fa97 	bl	8016a72 <USBD_CtlError>
            err++;
 8016544:	7afb      	ldrb	r3, [r7, #11]
 8016546:	3301      	adds	r3, #1
 8016548:	72fb      	strb	r3, [r7, #11]
          break;
 801654a:	e055      	b.n	80165f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016552:	691b      	ldr	r3, [r3, #16]
 8016554:	2b00      	cmp	r3, #0
 8016556:	d00b      	beq.n	8016570 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801655e:	691b      	ldr	r3, [r3, #16]
 8016560:	687a      	ldr	r2, [r7, #4]
 8016562:	7c12      	ldrb	r2, [r2, #16]
 8016564:	f107 0108 	add.w	r1, r7, #8
 8016568:	4610      	mov	r0, r2
 801656a:	4798      	blx	r3
 801656c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801656e:	e043      	b.n	80165f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016570:	6839      	ldr	r1, [r7, #0]
 8016572:	6878      	ldr	r0, [r7, #4]
 8016574:	f000 fa7d 	bl	8016a72 <USBD_CtlError>
            err++;
 8016578:	7afb      	ldrb	r3, [r7, #11]
 801657a:	3301      	adds	r3, #1
 801657c:	72fb      	strb	r3, [r7, #11]
          break;
 801657e:	e03b      	b.n	80165f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016586:	695b      	ldr	r3, [r3, #20]
 8016588:	2b00      	cmp	r3, #0
 801658a:	d00b      	beq.n	80165a4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016592:	695b      	ldr	r3, [r3, #20]
 8016594:	687a      	ldr	r2, [r7, #4]
 8016596:	7c12      	ldrb	r2, [r2, #16]
 8016598:	f107 0108 	add.w	r1, r7, #8
 801659c:	4610      	mov	r0, r2
 801659e:	4798      	blx	r3
 80165a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80165a2:	e029      	b.n	80165f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80165a4:	6839      	ldr	r1, [r7, #0]
 80165a6:	6878      	ldr	r0, [r7, #4]
 80165a8:	f000 fa63 	bl	8016a72 <USBD_CtlError>
            err++;
 80165ac:	7afb      	ldrb	r3, [r7, #11]
 80165ae:	3301      	adds	r3, #1
 80165b0:	72fb      	strb	r3, [r7, #11]
          break;
 80165b2:	e021      	b.n	80165f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80165ba:	699b      	ldr	r3, [r3, #24]
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d00b      	beq.n	80165d8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80165c6:	699b      	ldr	r3, [r3, #24]
 80165c8:	687a      	ldr	r2, [r7, #4]
 80165ca:	7c12      	ldrb	r2, [r2, #16]
 80165cc:	f107 0108 	add.w	r1, r7, #8
 80165d0:	4610      	mov	r0, r2
 80165d2:	4798      	blx	r3
 80165d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80165d6:	e00f      	b.n	80165f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80165d8:	6839      	ldr	r1, [r7, #0]
 80165da:	6878      	ldr	r0, [r7, #4]
 80165dc:	f000 fa49 	bl	8016a72 <USBD_CtlError>
            err++;
 80165e0:	7afb      	ldrb	r3, [r7, #11]
 80165e2:	3301      	adds	r3, #1
 80165e4:	72fb      	strb	r3, [r7, #11]
          break;
 80165e6:	e007      	b.n	80165f8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80165e8:	6839      	ldr	r1, [r7, #0]
 80165ea:	6878      	ldr	r0, [r7, #4]
 80165ec:	f000 fa41 	bl	8016a72 <USBD_CtlError>
          err++;
 80165f0:	7afb      	ldrb	r3, [r7, #11]
 80165f2:	3301      	adds	r3, #1
 80165f4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80165f6:	bf00      	nop
      }
      break;
 80165f8:	e037      	b.n	801666a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	7c1b      	ldrb	r3, [r3, #16]
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d109      	bne.n	8016616 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801660a:	f107 0208 	add.w	r2, r7, #8
 801660e:	4610      	mov	r0, r2
 8016610:	4798      	blx	r3
 8016612:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016614:	e029      	b.n	801666a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016616:	6839      	ldr	r1, [r7, #0]
 8016618:	6878      	ldr	r0, [r7, #4]
 801661a:	f000 fa2a 	bl	8016a72 <USBD_CtlError>
        err++;
 801661e:	7afb      	ldrb	r3, [r7, #11]
 8016620:	3301      	adds	r3, #1
 8016622:	72fb      	strb	r3, [r7, #11]
      break;
 8016624:	e021      	b.n	801666a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	7c1b      	ldrb	r3, [r3, #16]
 801662a:	2b00      	cmp	r3, #0
 801662c:	d10d      	bne.n	801664a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016636:	f107 0208 	add.w	r2, r7, #8
 801663a:	4610      	mov	r0, r2
 801663c:	4798      	blx	r3
 801663e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016640:	68fb      	ldr	r3, [r7, #12]
 8016642:	3301      	adds	r3, #1
 8016644:	2207      	movs	r2, #7
 8016646:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016648:	e00f      	b.n	801666a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801664a:	6839      	ldr	r1, [r7, #0]
 801664c:	6878      	ldr	r0, [r7, #4]
 801664e:	f000 fa10 	bl	8016a72 <USBD_CtlError>
        err++;
 8016652:	7afb      	ldrb	r3, [r7, #11]
 8016654:	3301      	adds	r3, #1
 8016656:	72fb      	strb	r3, [r7, #11]
      break;
 8016658:	e007      	b.n	801666a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801665a:	6839      	ldr	r1, [r7, #0]
 801665c:	6878      	ldr	r0, [r7, #4]
 801665e:	f000 fa08 	bl	8016a72 <USBD_CtlError>
      err++;
 8016662:	7afb      	ldrb	r3, [r7, #11]
 8016664:	3301      	adds	r3, #1
 8016666:	72fb      	strb	r3, [r7, #11]
      break;
 8016668:	bf00      	nop
  }

  if (err != 0U)
 801666a:	7afb      	ldrb	r3, [r7, #11]
 801666c:	2b00      	cmp	r3, #0
 801666e:	d11e      	bne.n	80166ae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8016670:	683b      	ldr	r3, [r7, #0]
 8016672:	88db      	ldrh	r3, [r3, #6]
 8016674:	2b00      	cmp	r3, #0
 8016676:	d016      	beq.n	80166a6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8016678:	893b      	ldrh	r3, [r7, #8]
 801667a:	2b00      	cmp	r3, #0
 801667c:	d00e      	beq.n	801669c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801667e:	683b      	ldr	r3, [r7, #0]
 8016680:	88da      	ldrh	r2, [r3, #6]
 8016682:	893b      	ldrh	r3, [r7, #8]
 8016684:	4293      	cmp	r3, r2
 8016686:	bf28      	it	cs
 8016688:	4613      	movcs	r3, r2
 801668a:	b29b      	uxth	r3, r3
 801668c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801668e:	893b      	ldrh	r3, [r7, #8]
 8016690:	461a      	mov	r2, r3
 8016692:	68f9      	ldr	r1, [r7, #12]
 8016694:	6878      	ldr	r0, [r7, #4]
 8016696:	f000 fa5d 	bl	8016b54 <USBD_CtlSendData>
 801669a:	e009      	b.n	80166b0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801669c:	6839      	ldr	r1, [r7, #0]
 801669e:	6878      	ldr	r0, [r7, #4]
 80166a0:	f000 f9e7 	bl	8016a72 <USBD_CtlError>
 80166a4:	e004      	b.n	80166b0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80166a6:	6878      	ldr	r0, [r7, #4]
 80166a8:	f000 faae 	bl	8016c08 <USBD_CtlSendStatus>
 80166ac:	e000      	b.n	80166b0 <USBD_GetDescriptor+0x2cc>
    return;
 80166ae:	bf00      	nop
  }
}
 80166b0:	3710      	adds	r7, #16
 80166b2:	46bd      	mov	sp, r7
 80166b4:	bd80      	pop	{r7, pc}
 80166b6:	bf00      	nop

080166b8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80166b8:	b580      	push	{r7, lr}
 80166ba:	b084      	sub	sp, #16
 80166bc:	af00      	add	r7, sp, #0
 80166be:	6078      	str	r0, [r7, #4]
 80166c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80166c2:	683b      	ldr	r3, [r7, #0]
 80166c4:	889b      	ldrh	r3, [r3, #4]
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d131      	bne.n	801672e <USBD_SetAddress+0x76>
 80166ca:	683b      	ldr	r3, [r7, #0]
 80166cc:	88db      	ldrh	r3, [r3, #6]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d12d      	bne.n	801672e <USBD_SetAddress+0x76>
 80166d2:	683b      	ldr	r3, [r7, #0]
 80166d4:	885b      	ldrh	r3, [r3, #2]
 80166d6:	2b7f      	cmp	r3, #127	; 0x7f
 80166d8:	d829      	bhi.n	801672e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80166da:	683b      	ldr	r3, [r7, #0]
 80166dc:	885b      	ldrh	r3, [r3, #2]
 80166de:	b2db      	uxtb	r3, r3
 80166e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80166e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80166ec:	b2db      	uxtb	r3, r3
 80166ee:	2b03      	cmp	r3, #3
 80166f0:	d104      	bne.n	80166fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80166f2:	6839      	ldr	r1, [r7, #0]
 80166f4:	6878      	ldr	r0, [r7, #4]
 80166f6:	f000 f9bc 	bl	8016a72 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166fa:	e01d      	b.n	8016738 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	7bfa      	ldrb	r2, [r7, #15]
 8016700:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016704:	7bfb      	ldrb	r3, [r7, #15]
 8016706:	4619      	mov	r1, r3
 8016708:	6878      	ldr	r0, [r7, #4]
 801670a:	f003 f91d 	bl	8019948 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801670e:	6878      	ldr	r0, [r7, #4]
 8016710:	f000 fa7a 	bl	8016c08 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016714:	7bfb      	ldrb	r3, [r7, #15]
 8016716:	2b00      	cmp	r3, #0
 8016718:	d004      	beq.n	8016724 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	2202      	movs	r2, #2
 801671e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016722:	e009      	b.n	8016738 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	2201      	movs	r2, #1
 8016728:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801672c:	e004      	b.n	8016738 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801672e:	6839      	ldr	r1, [r7, #0]
 8016730:	6878      	ldr	r0, [r7, #4]
 8016732:	f000 f99e 	bl	8016a72 <USBD_CtlError>
  }
}
 8016736:	bf00      	nop
 8016738:	bf00      	nop
 801673a:	3710      	adds	r7, #16
 801673c:	46bd      	mov	sp, r7
 801673e:	bd80      	pop	{r7, pc}

08016740 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016740:	b580      	push	{r7, lr}
 8016742:	b084      	sub	sp, #16
 8016744:	af00      	add	r7, sp, #0
 8016746:	6078      	str	r0, [r7, #4]
 8016748:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801674a:	2300      	movs	r3, #0
 801674c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801674e:	683b      	ldr	r3, [r7, #0]
 8016750:	885b      	ldrh	r3, [r3, #2]
 8016752:	b2da      	uxtb	r2, r3
 8016754:	4b4e      	ldr	r3, [pc, #312]	; (8016890 <USBD_SetConfig+0x150>)
 8016756:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016758:	4b4d      	ldr	r3, [pc, #308]	; (8016890 <USBD_SetConfig+0x150>)
 801675a:	781b      	ldrb	r3, [r3, #0]
 801675c:	2b01      	cmp	r3, #1
 801675e:	d905      	bls.n	801676c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016760:	6839      	ldr	r1, [r7, #0]
 8016762:	6878      	ldr	r0, [r7, #4]
 8016764:	f000 f985 	bl	8016a72 <USBD_CtlError>
    return USBD_FAIL;
 8016768:	2303      	movs	r3, #3
 801676a:	e08c      	b.n	8016886 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016772:	b2db      	uxtb	r3, r3
 8016774:	2b02      	cmp	r3, #2
 8016776:	d002      	beq.n	801677e <USBD_SetConfig+0x3e>
 8016778:	2b03      	cmp	r3, #3
 801677a:	d029      	beq.n	80167d0 <USBD_SetConfig+0x90>
 801677c:	e075      	b.n	801686a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801677e:	4b44      	ldr	r3, [pc, #272]	; (8016890 <USBD_SetConfig+0x150>)
 8016780:	781b      	ldrb	r3, [r3, #0]
 8016782:	2b00      	cmp	r3, #0
 8016784:	d020      	beq.n	80167c8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8016786:	4b42      	ldr	r3, [pc, #264]	; (8016890 <USBD_SetConfig+0x150>)
 8016788:	781b      	ldrb	r3, [r3, #0]
 801678a:	461a      	mov	r2, r3
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016790:	4b3f      	ldr	r3, [pc, #252]	; (8016890 <USBD_SetConfig+0x150>)
 8016792:	781b      	ldrb	r3, [r3, #0]
 8016794:	4619      	mov	r1, r3
 8016796:	6878      	ldr	r0, [r7, #4]
 8016798:	f7fe ffe1 	bl	801575e <USBD_SetClassConfig>
 801679c:	4603      	mov	r3, r0
 801679e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80167a0:	7bfb      	ldrb	r3, [r7, #15]
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d008      	beq.n	80167b8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80167a6:	6839      	ldr	r1, [r7, #0]
 80167a8:	6878      	ldr	r0, [r7, #4]
 80167aa:	f000 f962 	bl	8016a72 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	2202      	movs	r2, #2
 80167b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80167b6:	e065      	b.n	8016884 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80167b8:	6878      	ldr	r0, [r7, #4]
 80167ba:	f000 fa25 	bl	8016c08 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	2203      	movs	r2, #3
 80167c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80167c6:	e05d      	b.n	8016884 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80167c8:	6878      	ldr	r0, [r7, #4]
 80167ca:	f000 fa1d 	bl	8016c08 <USBD_CtlSendStatus>
      break;
 80167ce:	e059      	b.n	8016884 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80167d0:	4b2f      	ldr	r3, [pc, #188]	; (8016890 <USBD_SetConfig+0x150>)
 80167d2:	781b      	ldrb	r3, [r3, #0]
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d112      	bne.n	80167fe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	2202      	movs	r2, #2
 80167dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80167e0:	4b2b      	ldr	r3, [pc, #172]	; (8016890 <USBD_SetConfig+0x150>)
 80167e2:	781b      	ldrb	r3, [r3, #0]
 80167e4:	461a      	mov	r2, r3
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80167ea:	4b29      	ldr	r3, [pc, #164]	; (8016890 <USBD_SetConfig+0x150>)
 80167ec:	781b      	ldrb	r3, [r3, #0]
 80167ee:	4619      	mov	r1, r3
 80167f0:	6878      	ldr	r0, [r7, #4]
 80167f2:	f7fe ffd0 	bl	8015796 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80167f6:	6878      	ldr	r0, [r7, #4]
 80167f8:	f000 fa06 	bl	8016c08 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80167fc:	e042      	b.n	8016884 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80167fe:	4b24      	ldr	r3, [pc, #144]	; (8016890 <USBD_SetConfig+0x150>)
 8016800:	781b      	ldrb	r3, [r3, #0]
 8016802:	461a      	mov	r2, r3
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	685b      	ldr	r3, [r3, #4]
 8016808:	429a      	cmp	r2, r3
 801680a:	d02a      	beq.n	8016862 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	685b      	ldr	r3, [r3, #4]
 8016810:	b2db      	uxtb	r3, r3
 8016812:	4619      	mov	r1, r3
 8016814:	6878      	ldr	r0, [r7, #4]
 8016816:	f7fe ffbe 	bl	8015796 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801681a:	4b1d      	ldr	r3, [pc, #116]	; (8016890 <USBD_SetConfig+0x150>)
 801681c:	781b      	ldrb	r3, [r3, #0]
 801681e:	461a      	mov	r2, r3
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016824:	4b1a      	ldr	r3, [pc, #104]	; (8016890 <USBD_SetConfig+0x150>)
 8016826:	781b      	ldrb	r3, [r3, #0]
 8016828:	4619      	mov	r1, r3
 801682a:	6878      	ldr	r0, [r7, #4]
 801682c:	f7fe ff97 	bl	801575e <USBD_SetClassConfig>
 8016830:	4603      	mov	r3, r0
 8016832:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016834:	7bfb      	ldrb	r3, [r7, #15]
 8016836:	2b00      	cmp	r3, #0
 8016838:	d00f      	beq.n	801685a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801683a:	6839      	ldr	r1, [r7, #0]
 801683c:	6878      	ldr	r0, [r7, #4]
 801683e:	f000 f918 	bl	8016a72 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	685b      	ldr	r3, [r3, #4]
 8016846:	b2db      	uxtb	r3, r3
 8016848:	4619      	mov	r1, r3
 801684a:	6878      	ldr	r0, [r7, #4]
 801684c:	f7fe ffa3 	bl	8015796 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	2202      	movs	r2, #2
 8016854:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016858:	e014      	b.n	8016884 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801685a:	6878      	ldr	r0, [r7, #4]
 801685c:	f000 f9d4 	bl	8016c08 <USBD_CtlSendStatus>
      break;
 8016860:	e010      	b.n	8016884 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016862:	6878      	ldr	r0, [r7, #4]
 8016864:	f000 f9d0 	bl	8016c08 <USBD_CtlSendStatus>
      break;
 8016868:	e00c      	b.n	8016884 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801686a:	6839      	ldr	r1, [r7, #0]
 801686c:	6878      	ldr	r0, [r7, #4]
 801686e:	f000 f900 	bl	8016a72 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016872:	4b07      	ldr	r3, [pc, #28]	; (8016890 <USBD_SetConfig+0x150>)
 8016874:	781b      	ldrb	r3, [r3, #0]
 8016876:	4619      	mov	r1, r3
 8016878:	6878      	ldr	r0, [r7, #4]
 801687a:	f7fe ff8c 	bl	8015796 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801687e:	2303      	movs	r3, #3
 8016880:	73fb      	strb	r3, [r7, #15]
      break;
 8016882:	bf00      	nop
  }

  return ret;
 8016884:	7bfb      	ldrb	r3, [r7, #15]
}
 8016886:	4618      	mov	r0, r3
 8016888:	3710      	adds	r7, #16
 801688a:	46bd      	mov	sp, r7
 801688c:	bd80      	pop	{r7, pc}
 801688e:	bf00      	nop
 8016890:	20001378 	.word	0x20001378

08016894 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016894:	b580      	push	{r7, lr}
 8016896:	b082      	sub	sp, #8
 8016898:	af00      	add	r7, sp, #0
 801689a:	6078      	str	r0, [r7, #4]
 801689c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801689e:	683b      	ldr	r3, [r7, #0]
 80168a0:	88db      	ldrh	r3, [r3, #6]
 80168a2:	2b01      	cmp	r3, #1
 80168a4:	d004      	beq.n	80168b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80168a6:	6839      	ldr	r1, [r7, #0]
 80168a8:	6878      	ldr	r0, [r7, #4]
 80168aa:	f000 f8e2 	bl	8016a72 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80168ae:	e023      	b.n	80168f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80168b6:	b2db      	uxtb	r3, r3
 80168b8:	2b02      	cmp	r3, #2
 80168ba:	dc02      	bgt.n	80168c2 <USBD_GetConfig+0x2e>
 80168bc:	2b00      	cmp	r3, #0
 80168be:	dc03      	bgt.n	80168c8 <USBD_GetConfig+0x34>
 80168c0:	e015      	b.n	80168ee <USBD_GetConfig+0x5a>
 80168c2:	2b03      	cmp	r3, #3
 80168c4:	d00b      	beq.n	80168de <USBD_GetConfig+0x4a>
 80168c6:	e012      	b.n	80168ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	2200      	movs	r2, #0
 80168cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	3308      	adds	r3, #8
 80168d2:	2201      	movs	r2, #1
 80168d4:	4619      	mov	r1, r3
 80168d6:	6878      	ldr	r0, [r7, #4]
 80168d8:	f000 f93c 	bl	8016b54 <USBD_CtlSendData>
        break;
 80168dc:	e00c      	b.n	80168f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	3304      	adds	r3, #4
 80168e2:	2201      	movs	r2, #1
 80168e4:	4619      	mov	r1, r3
 80168e6:	6878      	ldr	r0, [r7, #4]
 80168e8:	f000 f934 	bl	8016b54 <USBD_CtlSendData>
        break;
 80168ec:	e004      	b.n	80168f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80168ee:	6839      	ldr	r1, [r7, #0]
 80168f0:	6878      	ldr	r0, [r7, #4]
 80168f2:	f000 f8be 	bl	8016a72 <USBD_CtlError>
        break;
 80168f6:	bf00      	nop
}
 80168f8:	bf00      	nop
 80168fa:	3708      	adds	r7, #8
 80168fc:	46bd      	mov	sp, r7
 80168fe:	bd80      	pop	{r7, pc}

08016900 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016900:	b580      	push	{r7, lr}
 8016902:	b082      	sub	sp, #8
 8016904:	af00      	add	r7, sp, #0
 8016906:	6078      	str	r0, [r7, #4]
 8016908:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016910:	b2db      	uxtb	r3, r3
 8016912:	3b01      	subs	r3, #1
 8016914:	2b02      	cmp	r3, #2
 8016916:	d81e      	bhi.n	8016956 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016918:	683b      	ldr	r3, [r7, #0]
 801691a:	88db      	ldrh	r3, [r3, #6]
 801691c:	2b02      	cmp	r3, #2
 801691e:	d004      	beq.n	801692a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016920:	6839      	ldr	r1, [r7, #0]
 8016922:	6878      	ldr	r0, [r7, #4]
 8016924:	f000 f8a5 	bl	8016a72 <USBD_CtlError>
        break;
 8016928:	e01a      	b.n	8016960 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	2201      	movs	r2, #1
 801692e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8016936:	2b00      	cmp	r3, #0
 8016938:	d005      	beq.n	8016946 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	68db      	ldr	r3, [r3, #12]
 801693e:	f043 0202 	orr.w	r2, r3, #2
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	330c      	adds	r3, #12
 801694a:	2202      	movs	r2, #2
 801694c:	4619      	mov	r1, r3
 801694e:	6878      	ldr	r0, [r7, #4]
 8016950:	f000 f900 	bl	8016b54 <USBD_CtlSendData>
      break;
 8016954:	e004      	b.n	8016960 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8016956:	6839      	ldr	r1, [r7, #0]
 8016958:	6878      	ldr	r0, [r7, #4]
 801695a:	f000 f88a 	bl	8016a72 <USBD_CtlError>
      break;
 801695e:	bf00      	nop
  }
}
 8016960:	bf00      	nop
 8016962:	3708      	adds	r7, #8
 8016964:	46bd      	mov	sp, r7
 8016966:	bd80      	pop	{r7, pc}

08016968 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016968:	b580      	push	{r7, lr}
 801696a:	b082      	sub	sp, #8
 801696c:	af00      	add	r7, sp, #0
 801696e:	6078      	str	r0, [r7, #4]
 8016970:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016972:	683b      	ldr	r3, [r7, #0]
 8016974:	885b      	ldrh	r3, [r3, #2]
 8016976:	2b01      	cmp	r3, #1
 8016978:	d107      	bne.n	801698a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	2201      	movs	r2, #1
 801697e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8016982:	6878      	ldr	r0, [r7, #4]
 8016984:	f000 f940 	bl	8016c08 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8016988:	e013      	b.n	80169b2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801698a:	683b      	ldr	r3, [r7, #0]
 801698c:	885b      	ldrh	r3, [r3, #2]
 801698e:	2b02      	cmp	r3, #2
 8016990:	d10b      	bne.n	80169aa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8016992:	683b      	ldr	r3, [r7, #0]
 8016994:	889b      	ldrh	r3, [r3, #4]
 8016996:	0a1b      	lsrs	r3, r3, #8
 8016998:	b29b      	uxth	r3, r3
 801699a:	b2da      	uxtb	r2, r3
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80169a2:	6878      	ldr	r0, [r7, #4]
 80169a4:	f000 f930 	bl	8016c08 <USBD_CtlSendStatus>
}
 80169a8:	e003      	b.n	80169b2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80169aa:	6839      	ldr	r1, [r7, #0]
 80169ac:	6878      	ldr	r0, [r7, #4]
 80169ae:	f000 f860 	bl	8016a72 <USBD_CtlError>
}
 80169b2:	bf00      	nop
 80169b4:	3708      	adds	r7, #8
 80169b6:	46bd      	mov	sp, r7
 80169b8:	bd80      	pop	{r7, pc}

080169ba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80169ba:	b580      	push	{r7, lr}
 80169bc:	b082      	sub	sp, #8
 80169be:	af00      	add	r7, sp, #0
 80169c0:	6078      	str	r0, [r7, #4]
 80169c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80169ca:	b2db      	uxtb	r3, r3
 80169cc:	3b01      	subs	r3, #1
 80169ce:	2b02      	cmp	r3, #2
 80169d0:	d80b      	bhi.n	80169ea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80169d2:	683b      	ldr	r3, [r7, #0]
 80169d4:	885b      	ldrh	r3, [r3, #2]
 80169d6:	2b01      	cmp	r3, #1
 80169d8:	d10c      	bne.n	80169f4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	2200      	movs	r2, #0
 80169de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80169e2:	6878      	ldr	r0, [r7, #4]
 80169e4:	f000 f910 	bl	8016c08 <USBD_CtlSendStatus>
      }
      break;
 80169e8:	e004      	b.n	80169f4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80169ea:	6839      	ldr	r1, [r7, #0]
 80169ec:	6878      	ldr	r0, [r7, #4]
 80169ee:	f000 f840 	bl	8016a72 <USBD_CtlError>
      break;
 80169f2:	e000      	b.n	80169f6 <USBD_ClrFeature+0x3c>
      break;
 80169f4:	bf00      	nop
  }
}
 80169f6:	bf00      	nop
 80169f8:	3708      	adds	r7, #8
 80169fa:	46bd      	mov	sp, r7
 80169fc:	bd80      	pop	{r7, pc}

080169fe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80169fe:	b580      	push	{r7, lr}
 8016a00:	b084      	sub	sp, #16
 8016a02:	af00      	add	r7, sp, #0
 8016a04:	6078      	str	r0, [r7, #4]
 8016a06:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016a08:	683b      	ldr	r3, [r7, #0]
 8016a0a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	781a      	ldrb	r2, [r3, #0]
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	3301      	adds	r3, #1
 8016a18:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	781a      	ldrb	r2, [r3, #0]
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	3301      	adds	r3, #1
 8016a26:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016a28:	68f8      	ldr	r0, [r7, #12]
 8016a2a:	f7ff fa41 	bl	8015eb0 <SWAPBYTE>
 8016a2e:	4603      	mov	r3, r0
 8016a30:	461a      	mov	r2, r3
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	3301      	adds	r3, #1
 8016a3a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	3301      	adds	r3, #1
 8016a40:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016a42:	68f8      	ldr	r0, [r7, #12]
 8016a44:	f7ff fa34 	bl	8015eb0 <SWAPBYTE>
 8016a48:	4603      	mov	r3, r0
 8016a4a:	461a      	mov	r2, r3
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	3301      	adds	r3, #1
 8016a54:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	3301      	adds	r3, #1
 8016a5a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016a5c:	68f8      	ldr	r0, [r7, #12]
 8016a5e:	f7ff fa27 	bl	8015eb0 <SWAPBYTE>
 8016a62:	4603      	mov	r3, r0
 8016a64:	461a      	mov	r2, r3
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	80da      	strh	r2, [r3, #6]
}
 8016a6a:	bf00      	nop
 8016a6c:	3710      	adds	r7, #16
 8016a6e:	46bd      	mov	sp, r7
 8016a70:	bd80      	pop	{r7, pc}

08016a72 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016a72:	b580      	push	{r7, lr}
 8016a74:	b082      	sub	sp, #8
 8016a76:	af00      	add	r7, sp, #0
 8016a78:	6078      	str	r0, [r7, #4]
 8016a7a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016a7c:	2180      	movs	r1, #128	; 0x80
 8016a7e:	6878      	ldr	r0, [r7, #4]
 8016a80:	f002 feca 	bl	8019818 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016a84:	2100      	movs	r1, #0
 8016a86:	6878      	ldr	r0, [r7, #4]
 8016a88:	f002 fec6 	bl	8019818 <USBD_LL_StallEP>
}
 8016a8c:	bf00      	nop
 8016a8e:	3708      	adds	r7, #8
 8016a90:	46bd      	mov	sp, r7
 8016a92:	bd80      	pop	{r7, pc}

08016a94 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016a94:	b580      	push	{r7, lr}
 8016a96:	b086      	sub	sp, #24
 8016a98:	af00      	add	r7, sp, #0
 8016a9a:	60f8      	str	r0, [r7, #12]
 8016a9c:	60b9      	str	r1, [r7, #8]
 8016a9e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016aa0:	2300      	movs	r3, #0
 8016aa2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016aa4:	68fb      	ldr	r3, [r7, #12]
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	d036      	beq.n	8016b18 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8016aaa:	68fb      	ldr	r3, [r7, #12]
 8016aac:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016aae:	6938      	ldr	r0, [r7, #16]
 8016ab0:	f000 f836 	bl	8016b20 <USBD_GetLen>
 8016ab4:	4603      	mov	r3, r0
 8016ab6:	3301      	adds	r3, #1
 8016ab8:	b29b      	uxth	r3, r3
 8016aba:	005b      	lsls	r3, r3, #1
 8016abc:	b29a      	uxth	r2, r3
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016ac2:	7dfb      	ldrb	r3, [r7, #23]
 8016ac4:	68ba      	ldr	r2, [r7, #8]
 8016ac6:	4413      	add	r3, r2
 8016ac8:	687a      	ldr	r2, [r7, #4]
 8016aca:	7812      	ldrb	r2, [r2, #0]
 8016acc:	701a      	strb	r2, [r3, #0]
  idx++;
 8016ace:	7dfb      	ldrb	r3, [r7, #23]
 8016ad0:	3301      	adds	r3, #1
 8016ad2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016ad4:	7dfb      	ldrb	r3, [r7, #23]
 8016ad6:	68ba      	ldr	r2, [r7, #8]
 8016ad8:	4413      	add	r3, r2
 8016ada:	2203      	movs	r2, #3
 8016adc:	701a      	strb	r2, [r3, #0]
  idx++;
 8016ade:	7dfb      	ldrb	r3, [r7, #23]
 8016ae0:	3301      	adds	r3, #1
 8016ae2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016ae4:	e013      	b.n	8016b0e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016ae6:	7dfb      	ldrb	r3, [r7, #23]
 8016ae8:	68ba      	ldr	r2, [r7, #8]
 8016aea:	4413      	add	r3, r2
 8016aec:	693a      	ldr	r2, [r7, #16]
 8016aee:	7812      	ldrb	r2, [r2, #0]
 8016af0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016af2:	693b      	ldr	r3, [r7, #16]
 8016af4:	3301      	adds	r3, #1
 8016af6:	613b      	str	r3, [r7, #16]
    idx++;
 8016af8:	7dfb      	ldrb	r3, [r7, #23]
 8016afa:	3301      	adds	r3, #1
 8016afc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016afe:	7dfb      	ldrb	r3, [r7, #23]
 8016b00:	68ba      	ldr	r2, [r7, #8]
 8016b02:	4413      	add	r3, r2
 8016b04:	2200      	movs	r2, #0
 8016b06:	701a      	strb	r2, [r3, #0]
    idx++;
 8016b08:	7dfb      	ldrb	r3, [r7, #23]
 8016b0a:	3301      	adds	r3, #1
 8016b0c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016b0e:	693b      	ldr	r3, [r7, #16]
 8016b10:	781b      	ldrb	r3, [r3, #0]
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d1e7      	bne.n	8016ae6 <USBD_GetString+0x52>
 8016b16:	e000      	b.n	8016b1a <USBD_GetString+0x86>
    return;
 8016b18:	bf00      	nop
  }
}
 8016b1a:	3718      	adds	r7, #24
 8016b1c:	46bd      	mov	sp, r7
 8016b1e:	bd80      	pop	{r7, pc}

08016b20 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016b20:	b480      	push	{r7}
 8016b22:	b085      	sub	sp, #20
 8016b24:	af00      	add	r7, sp, #0
 8016b26:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016b28:	2300      	movs	r3, #0
 8016b2a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016b30:	e005      	b.n	8016b3e <USBD_GetLen+0x1e>
  {
    len++;
 8016b32:	7bfb      	ldrb	r3, [r7, #15]
 8016b34:	3301      	adds	r3, #1
 8016b36:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016b38:	68bb      	ldr	r3, [r7, #8]
 8016b3a:	3301      	adds	r3, #1
 8016b3c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016b3e:	68bb      	ldr	r3, [r7, #8]
 8016b40:	781b      	ldrb	r3, [r3, #0]
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d1f5      	bne.n	8016b32 <USBD_GetLen+0x12>
  }

  return len;
 8016b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b48:	4618      	mov	r0, r3
 8016b4a:	3714      	adds	r7, #20
 8016b4c:	46bd      	mov	sp, r7
 8016b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b52:	4770      	bx	lr

08016b54 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016b54:	b580      	push	{r7, lr}
 8016b56:	b084      	sub	sp, #16
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	60f8      	str	r0, [r7, #12]
 8016b5c:	60b9      	str	r1, [r7, #8]
 8016b5e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	2202      	movs	r2, #2
 8016b64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	687a      	ldr	r2, [r7, #4]
 8016b6c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	687a      	ldr	r2, [r7, #4]
 8016b72:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	68ba      	ldr	r2, [r7, #8]
 8016b78:	2100      	movs	r1, #0
 8016b7a:	68f8      	ldr	r0, [r7, #12]
 8016b7c:	f002 ff1a 	bl	80199b4 <USBD_LL_Transmit>

  return USBD_OK;
 8016b80:	2300      	movs	r3, #0
}
 8016b82:	4618      	mov	r0, r3
 8016b84:	3710      	adds	r7, #16
 8016b86:	46bd      	mov	sp, r7
 8016b88:	bd80      	pop	{r7, pc}

08016b8a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016b8a:	b580      	push	{r7, lr}
 8016b8c:	b084      	sub	sp, #16
 8016b8e:	af00      	add	r7, sp, #0
 8016b90:	60f8      	str	r0, [r7, #12]
 8016b92:	60b9      	str	r1, [r7, #8]
 8016b94:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	68ba      	ldr	r2, [r7, #8]
 8016b9a:	2100      	movs	r1, #0
 8016b9c:	68f8      	ldr	r0, [r7, #12]
 8016b9e:	f002 ff09 	bl	80199b4 <USBD_LL_Transmit>

  return USBD_OK;
 8016ba2:	2300      	movs	r3, #0
}
 8016ba4:	4618      	mov	r0, r3
 8016ba6:	3710      	adds	r7, #16
 8016ba8:	46bd      	mov	sp, r7
 8016baa:	bd80      	pop	{r7, pc}

08016bac <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016bac:	b580      	push	{r7, lr}
 8016bae:	b084      	sub	sp, #16
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	60f8      	str	r0, [r7, #12]
 8016bb4:	60b9      	str	r1, [r7, #8]
 8016bb6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	2203      	movs	r2, #3
 8016bbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	687a      	ldr	r2, [r7, #4]
 8016bc4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	687a      	ldr	r2, [r7, #4]
 8016bcc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	68ba      	ldr	r2, [r7, #8]
 8016bd4:	2100      	movs	r1, #0
 8016bd6:	68f8      	ldr	r0, [r7, #12]
 8016bd8:	f002 ff24 	bl	8019a24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016bdc:	2300      	movs	r3, #0
}
 8016bde:	4618      	mov	r0, r3
 8016be0:	3710      	adds	r7, #16
 8016be2:	46bd      	mov	sp, r7
 8016be4:	bd80      	pop	{r7, pc}

08016be6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016be6:	b580      	push	{r7, lr}
 8016be8:	b084      	sub	sp, #16
 8016bea:	af00      	add	r7, sp, #0
 8016bec:	60f8      	str	r0, [r7, #12]
 8016bee:	60b9      	str	r1, [r7, #8]
 8016bf0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	68ba      	ldr	r2, [r7, #8]
 8016bf6:	2100      	movs	r1, #0
 8016bf8:	68f8      	ldr	r0, [r7, #12]
 8016bfa:	f002 ff13 	bl	8019a24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016bfe:	2300      	movs	r3, #0
}
 8016c00:	4618      	mov	r0, r3
 8016c02:	3710      	adds	r7, #16
 8016c04:	46bd      	mov	sp, r7
 8016c06:	bd80      	pop	{r7, pc}

08016c08 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016c08:	b580      	push	{r7, lr}
 8016c0a:	b082      	sub	sp, #8
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	2204      	movs	r2, #4
 8016c14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016c18:	2300      	movs	r3, #0
 8016c1a:	2200      	movs	r2, #0
 8016c1c:	2100      	movs	r1, #0
 8016c1e:	6878      	ldr	r0, [r7, #4]
 8016c20:	f002 fec8 	bl	80199b4 <USBD_LL_Transmit>

  return USBD_OK;
 8016c24:	2300      	movs	r3, #0
}
 8016c26:	4618      	mov	r0, r3
 8016c28:	3708      	adds	r7, #8
 8016c2a:	46bd      	mov	sp, r7
 8016c2c:	bd80      	pop	{r7, pc}

08016c2e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016c2e:	b580      	push	{r7, lr}
 8016c30:	b082      	sub	sp, #8
 8016c32:	af00      	add	r7, sp, #0
 8016c34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	2205      	movs	r2, #5
 8016c3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016c3e:	2300      	movs	r3, #0
 8016c40:	2200      	movs	r2, #0
 8016c42:	2100      	movs	r1, #0
 8016c44:	6878      	ldr	r0, [r7, #4]
 8016c46:	f002 feed 	bl	8019a24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016c4a:	2300      	movs	r3, #0
}
 8016c4c:	4618      	mov	r0, r3
 8016c4e:	3708      	adds	r7, #8
 8016c50:	46bd      	mov	sp, r7
 8016c52:	bd80      	pop	{r7, pc}

08016c54 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b084      	sub	sp, #16
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	4603      	mov	r3, r0
 8016c5c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8016c5e:	79fb      	ldrb	r3, [r7, #7]
 8016c60:	4a08      	ldr	r2, [pc, #32]	; (8016c84 <disk_status+0x30>)
 8016c62:	009b      	lsls	r3, r3, #2
 8016c64:	4413      	add	r3, r2
 8016c66:	685b      	ldr	r3, [r3, #4]
 8016c68:	685b      	ldr	r3, [r3, #4]
 8016c6a:	79fa      	ldrb	r2, [r7, #7]
 8016c6c:	4905      	ldr	r1, [pc, #20]	; (8016c84 <disk_status+0x30>)
 8016c6e:	440a      	add	r2, r1
 8016c70:	7a12      	ldrb	r2, [r2, #8]
 8016c72:	4610      	mov	r0, r2
 8016c74:	4798      	blx	r3
 8016c76:	4603      	mov	r3, r0
 8016c78:	73fb      	strb	r3, [r7, #15]
  return stat;
 8016c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	3710      	adds	r7, #16
 8016c80:	46bd      	mov	sp, r7
 8016c82:	bd80      	pop	{r7, pc}
 8016c84:	200013a4 	.word	0x200013a4

08016c88 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8016c88:	b580      	push	{r7, lr}
 8016c8a:	b084      	sub	sp, #16
 8016c8c:	af00      	add	r7, sp, #0
 8016c8e:	4603      	mov	r3, r0
 8016c90:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8016c92:	2300      	movs	r3, #0
 8016c94:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8016c96:	79fb      	ldrb	r3, [r7, #7]
 8016c98:	4a0d      	ldr	r2, [pc, #52]	; (8016cd0 <disk_initialize+0x48>)
 8016c9a:	5cd3      	ldrb	r3, [r2, r3]
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d111      	bne.n	8016cc4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8016ca0:	79fb      	ldrb	r3, [r7, #7]
 8016ca2:	4a0b      	ldr	r2, [pc, #44]	; (8016cd0 <disk_initialize+0x48>)
 8016ca4:	2101      	movs	r1, #1
 8016ca6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8016ca8:	79fb      	ldrb	r3, [r7, #7]
 8016caa:	4a09      	ldr	r2, [pc, #36]	; (8016cd0 <disk_initialize+0x48>)
 8016cac:	009b      	lsls	r3, r3, #2
 8016cae:	4413      	add	r3, r2
 8016cb0:	685b      	ldr	r3, [r3, #4]
 8016cb2:	681b      	ldr	r3, [r3, #0]
 8016cb4:	79fa      	ldrb	r2, [r7, #7]
 8016cb6:	4906      	ldr	r1, [pc, #24]	; (8016cd0 <disk_initialize+0x48>)
 8016cb8:	440a      	add	r2, r1
 8016cba:	7a12      	ldrb	r2, [r2, #8]
 8016cbc:	4610      	mov	r0, r2
 8016cbe:	4798      	blx	r3
 8016cc0:	4603      	mov	r3, r0
 8016cc2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8016cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8016cc6:	4618      	mov	r0, r3
 8016cc8:	3710      	adds	r7, #16
 8016cca:	46bd      	mov	sp, r7
 8016ccc:	bd80      	pop	{r7, pc}
 8016cce:	bf00      	nop
 8016cd0:	200013a4 	.word	0x200013a4

08016cd4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8016cd4:	b590      	push	{r4, r7, lr}
 8016cd6:	b087      	sub	sp, #28
 8016cd8:	af00      	add	r7, sp, #0
 8016cda:	60b9      	str	r1, [r7, #8]
 8016cdc:	607a      	str	r2, [r7, #4]
 8016cde:	603b      	str	r3, [r7, #0]
 8016ce0:	4603      	mov	r3, r0
 8016ce2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8016ce4:	7bfb      	ldrb	r3, [r7, #15]
 8016ce6:	4a0a      	ldr	r2, [pc, #40]	; (8016d10 <disk_read+0x3c>)
 8016ce8:	009b      	lsls	r3, r3, #2
 8016cea:	4413      	add	r3, r2
 8016cec:	685b      	ldr	r3, [r3, #4]
 8016cee:	689c      	ldr	r4, [r3, #8]
 8016cf0:	7bfb      	ldrb	r3, [r7, #15]
 8016cf2:	4a07      	ldr	r2, [pc, #28]	; (8016d10 <disk_read+0x3c>)
 8016cf4:	4413      	add	r3, r2
 8016cf6:	7a18      	ldrb	r0, [r3, #8]
 8016cf8:	683b      	ldr	r3, [r7, #0]
 8016cfa:	687a      	ldr	r2, [r7, #4]
 8016cfc:	68b9      	ldr	r1, [r7, #8]
 8016cfe:	47a0      	blx	r4
 8016d00:	4603      	mov	r3, r0
 8016d02:	75fb      	strb	r3, [r7, #23]
  return res;
 8016d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8016d06:	4618      	mov	r0, r3
 8016d08:	371c      	adds	r7, #28
 8016d0a:	46bd      	mov	sp, r7
 8016d0c:	bd90      	pop	{r4, r7, pc}
 8016d0e:	bf00      	nop
 8016d10:	200013a4 	.word	0x200013a4

08016d14 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8016d14:	b590      	push	{r4, r7, lr}
 8016d16:	b087      	sub	sp, #28
 8016d18:	af00      	add	r7, sp, #0
 8016d1a:	60b9      	str	r1, [r7, #8]
 8016d1c:	607a      	str	r2, [r7, #4]
 8016d1e:	603b      	str	r3, [r7, #0]
 8016d20:	4603      	mov	r3, r0
 8016d22:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8016d24:	7bfb      	ldrb	r3, [r7, #15]
 8016d26:	4a0a      	ldr	r2, [pc, #40]	; (8016d50 <disk_write+0x3c>)
 8016d28:	009b      	lsls	r3, r3, #2
 8016d2a:	4413      	add	r3, r2
 8016d2c:	685b      	ldr	r3, [r3, #4]
 8016d2e:	68dc      	ldr	r4, [r3, #12]
 8016d30:	7bfb      	ldrb	r3, [r7, #15]
 8016d32:	4a07      	ldr	r2, [pc, #28]	; (8016d50 <disk_write+0x3c>)
 8016d34:	4413      	add	r3, r2
 8016d36:	7a18      	ldrb	r0, [r3, #8]
 8016d38:	683b      	ldr	r3, [r7, #0]
 8016d3a:	687a      	ldr	r2, [r7, #4]
 8016d3c:	68b9      	ldr	r1, [r7, #8]
 8016d3e:	47a0      	blx	r4
 8016d40:	4603      	mov	r3, r0
 8016d42:	75fb      	strb	r3, [r7, #23]
  return res;
 8016d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8016d46:	4618      	mov	r0, r3
 8016d48:	371c      	adds	r7, #28
 8016d4a:	46bd      	mov	sp, r7
 8016d4c:	bd90      	pop	{r4, r7, pc}
 8016d4e:	bf00      	nop
 8016d50:	200013a4 	.word	0x200013a4

08016d54 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8016d54:	b580      	push	{r7, lr}
 8016d56:	b084      	sub	sp, #16
 8016d58:	af00      	add	r7, sp, #0
 8016d5a:	4603      	mov	r3, r0
 8016d5c:	603a      	str	r2, [r7, #0]
 8016d5e:	71fb      	strb	r3, [r7, #7]
 8016d60:	460b      	mov	r3, r1
 8016d62:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8016d64:	79fb      	ldrb	r3, [r7, #7]
 8016d66:	4a09      	ldr	r2, [pc, #36]	; (8016d8c <disk_ioctl+0x38>)
 8016d68:	009b      	lsls	r3, r3, #2
 8016d6a:	4413      	add	r3, r2
 8016d6c:	685b      	ldr	r3, [r3, #4]
 8016d6e:	691b      	ldr	r3, [r3, #16]
 8016d70:	79fa      	ldrb	r2, [r7, #7]
 8016d72:	4906      	ldr	r1, [pc, #24]	; (8016d8c <disk_ioctl+0x38>)
 8016d74:	440a      	add	r2, r1
 8016d76:	7a10      	ldrb	r0, [r2, #8]
 8016d78:	79b9      	ldrb	r1, [r7, #6]
 8016d7a:	683a      	ldr	r2, [r7, #0]
 8016d7c:	4798      	blx	r3
 8016d7e:	4603      	mov	r3, r0
 8016d80:	73fb      	strb	r3, [r7, #15]
  return res;
 8016d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d84:	4618      	mov	r0, r3
 8016d86:	3710      	adds	r7, #16
 8016d88:	46bd      	mov	sp, r7
 8016d8a:	bd80      	pop	{r7, pc}
 8016d8c:	200013a4 	.word	0x200013a4

08016d90 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8016d90:	b480      	push	{r7}
 8016d92:	b085      	sub	sp, #20
 8016d94:	af00      	add	r7, sp, #0
 8016d96:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	3301      	adds	r3, #1
 8016d9c:	781b      	ldrb	r3, [r3, #0]
 8016d9e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8016da0:	89fb      	ldrh	r3, [r7, #14]
 8016da2:	021b      	lsls	r3, r3, #8
 8016da4:	b21a      	sxth	r2, r3
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	781b      	ldrb	r3, [r3, #0]
 8016daa:	b21b      	sxth	r3, r3
 8016dac:	4313      	orrs	r3, r2
 8016dae:	b21b      	sxth	r3, r3
 8016db0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8016db2:	89fb      	ldrh	r3, [r7, #14]
}
 8016db4:	4618      	mov	r0, r3
 8016db6:	3714      	adds	r7, #20
 8016db8:	46bd      	mov	sp, r7
 8016dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dbe:	4770      	bx	lr

08016dc0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8016dc0:	b480      	push	{r7}
 8016dc2:	b085      	sub	sp, #20
 8016dc4:	af00      	add	r7, sp, #0
 8016dc6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	3303      	adds	r3, #3
 8016dcc:	781b      	ldrb	r3, [r3, #0]
 8016dce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8016dd0:	68fb      	ldr	r3, [r7, #12]
 8016dd2:	021b      	lsls	r3, r3, #8
 8016dd4:	687a      	ldr	r2, [r7, #4]
 8016dd6:	3202      	adds	r2, #2
 8016dd8:	7812      	ldrb	r2, [r2, #0]
 8016dda:	4313      	orrs	r3, r2
 8016ddc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8016dde:	68fb      	ldr	r3, [r7, #12]
 8016de0:	021b      	lsls	r3, r3, #8
 8016de2:	687a      	ldr	r2, [r7, #4]
 8016de4:	3201      	adds	r2, #1
 8016de6:	7812      	ldrb	r2, [r2, #0]
 8016de8:	4313      	orrs	r3, r2
 8016dea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	021b      	lsls	r3, r3, #8
 8016df0:	687a      	ldr	r2, [r7, #4]
 8016df2:	7812      	ldrb	r2, [r2, #0]
 8016df4:	4313      	orrs	r3, r2
 8016df6:	60fb      	str	r3, [r7, #12]
	return rv;
 8016df8:	68fb      	ldr	r3, [r7, #12]
}
 8016dfa:	4618      	mov	r0, r3
 8016dfc:	3714      	adds	r7, #20
 8016dfe:	46bd      	mov	sp, r7
 8016e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e04:	4770      	bx	lr

08016e06 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8016e06:	b480      	push	{r7}
 8016e08:	b083      	sub	sp, #12
 8016e0a:	af00      	add	r7, sp, #0
 8016e0c:	6078      	str	r0, [r7, #4]
 8016e0e:	460b      	mov	r3, r1
 8016e10:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	1c5a      	adds	r2, r3, #1
 8016e16:	607a      	str	r2, [r7, #4]
 8016e18:	887a      	ldrh	r2, [r7, #2]
 8016e1a:	b2d2      	uxtb	r2, r2
 8016e1c:	701a      	strb	r2, [r3, #0]
 8016e1e:	887b      	ldrh	r3, [r7, #2]
 8016e20:	0a1b      	lsrs	r3, r3, #8
 8016e22:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	1c5a      	adds	r2, r3, #1
 8016e28:	607a      	str	r2, [r7, #4]
 8016e2a:	887a      	ldrh	r2, [r7, #2]
 8016e2c:	b2d2      	uxtb	r2, r2
 8016e2e:	701a      	strb	r2, [r3, #0]
}
 8016e30:	bf00      	nop
 8016e32:	370c      	adds	r7, #12
 8016e34:	46bd      	mov	sp, r7
 8016e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e3a:	4770      	bx	lr

08016e3c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8016e3c:	b480      	push	{r7}
 8016e3e:	b083      	sub	sp, #12
 8016e40:	af00      	add	r7, sp, #0
 8016e42:	6078      	str	r0, [r7, #4]
 8016e44:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	1c5a      	adds	r2, r3, #1
 8016e4a:	607a      	str	r2, [r7, #4]
 8016e4c:	683a      	ldr	r2, [r7, #0]
 8016e4e:	b2d2      	uxtb	r2, r2
 8016e50:	701a      	strb	r2, [r3, #0]
 8016e52:	683b      	ldr	r3, [r7, #0]
 8016e54:	0a1b      	lsrs	r3, r3, #8
 8016e56:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	1c5a      	adds	r2, r3, #1
 8016e5c:	607a      	str	r2, [r7, #4]
 8016e5e:	683a      	ldr	r2, [r7, #0]
 8016e60:	b2d2      	uxtb	r2, r2
 8016e62:	701a      	strb	r2, [r3, #0]
 8016e64:	683b      	ldr	r3, [r7, #0]
 8016e66:	0a1b      	lsrs	r3, r3, #8
 8016e68:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	1c5a      	adds	r2, r3, #1
 8016e6e:	607a      	str	r2, [r7, #4]
 8016e70:	683a      	ldr	r2, [r7, #0]
 8016e72:	b2d2      	uxtb	r2, r2
 8016e74:	701a      	strb	r2, [r3, #0]
 8016e76:	683b      	ldr	r3, [r7, #0]
 8016e78:	0a1b      	lsrs	r3, r3, #8
 8016e7a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	1c5a      	adds	r2, r3, #1
 8016e80:	607a      	str	r2, [r7, #4]
 8016e82:	683a      	ldr	r2, [r7, #0]
 8016e84:	b2d2      	uxtb	r2, r2
 8016e86:	701a      	strb	r2, [r3, #0]
}
 8016e88:	bf00      	nop
 8016e8a:	370c      	adds	r7, #12
 8016e8c:	46bd      	mov	sp, r7
 8016e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e92:	4770      	bx	lr

08016e94 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8016e94:	b480      	push	{r7}
 8016e96:	b087      	sub	sp, #28
 8016e98:	af00      	add	r7, sp, #0
 8016e9a:	60f8      	str	r0, [r7, #12]
 8016e9c:	60b9      	str	r1, [r7, #8]
 8016e9e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8016ea0:	68fb      	ldr	r3, [r7, #12]
 8016ea2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8016ea4:	68bb      	ldr	r3, [r7, #8]
 8016ea6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d00d      	beq.n	8016eca <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8016eae:	693a      	ldr	r2, [r7, #16]
 8016eb0:	1c53      	adds	r3, r2, #1
 8016eb2:	613b      	str	r3, [r7, #16]
 8016eb4:	697b      	ldr	r3, [r7, #20]
 8016eb6:	1c59      	adds	r1, r3, #1
 8016eb8:	6179      	str	r1, [r7, #20]
 8016eba:	7812      	ldrb	r2, [r2, #0]
 8016ebc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	3b01      	subs	r3, #1
 8016ec2:	607b      	str	r3, [r7, #4]
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d1f1      	bne.n	8016eae <mem_cpy+0x1a>
	}
}
 8016eca:	bf00      	nop
 8016ecc:	371c      	adds	r7, #28
 8016ece:	46bd      	mov	sp, r7
 8016ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ed4:	4770      	bx	lr

08016ed6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8016ed6:	b480      	push	{r7}
 8016ed8:	b087      	sub	sp, #28
 8016eda:	af00      	add	r7, sp, #0
 8016edc:	60f8      	str	r0, [r7, #12]
 8016ede:	60b9      	str	r1, [r7, #8]
 8016ee0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8016ee2:	68fb      	ldr	r3, [r7, #12]
 8016ee4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8016ee6:	697b      	ldr	r3, [r7, #20]
 8016ee8:	1c5a      	adds	r2, r3, #1
 8016eea:	617a      	str	r2, [r7, #20]
 8016eec:	68ba      	ldr	r2, [r7, #8]
 8016eee:	b2d2      	uxtb	r2, r2
 8016ef0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	3b01      	subs	r3, #1
 8016ef6:	607b      	str	r3, [r7, #4]
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d1f3      	bne.n	8016ee6 <mem_set+0x10>
}
 8016efe:	bf00      	nop
 8016f00:	bf00      	nop
 8016f02:	371c      	adds	r7, #28
 8016f04:	46bd      	mov	sp, r7
 8016f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f0a:	4770      	bx	lr

08016f0c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8016f0c:	b480      	push	{r7}
 8016f0e:	b089      	sub	sp, #36	; 0x24
 8016f10:	af00      	add	r7, sp, #0
 8016f12:	60f8      	str	r0, [r7, #12]
 8016f14:	60b9      	str	r1, [r7, #8]
 8016f16:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	61fb      	str	r3, [r7, #28]
 8016f1c:	68bb      	ldr	r3, [r7, #8]
 8016f1e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8016f20:	2300      	movs	r3, #0
 8016f22:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8016f24:	69fb      	ldr	r3, [r7, #28]
 8016f26:	1c5a      	adds	r2, r3, #1
 8016f28:	61fa      	str	r2, [r7, #28]
 8016f2a:	781b      	ldrb	r3, [r3, #0]
 8016f2c:	4619      	mov	r1, r3
 8016f2e:	69bb      	ldr	r3, [r7, #24]
 8016f30:	1c5a      	adds	r2, r3, #1
 8016f32:	61ba      	str	r2, [r7, #24]
 8016f34:	781b      	ldrb	r3, [r3, #0]
 8016f36:	1acb      	subs	r3, r1, r3
 8016f38:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	3b01      	subs	r3, #1
 8016f3e:	607b      	str	r3, [r7, #4]
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d002      	beq.n	8016f4c <mem_cmp+0x40>
 8016f46:	697b      	ldr	r3, [r7, #20]
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d0eb      	beq.n	8016f24 <mem_cmp+0x18>

	return r;
 8016f4c:	697b      	ldr	r3, [r7, #20]
}
 8016f4e:	4618      	mov	r0, r3
 8016f50:	3724      	adds	r7, #36	; 0x24
 8016f52:	46bd      	mov	sp, r7
 8016f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f58:	4770      	bx	lr

08016f5a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8016f5a:	b480      	push	{r7}
 8016f5c:	b083      	sub	sp, #12
 8016f5e:	af00      	add	r7, sp, #0
 8016f60:	6078      	str	r0, [r7, #4]
 8016f62:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8016f64:	e002      	b.n	8016f6c <chk_chr+0x12>
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	3301      	adds	r3, #1
 8016f6a:	607b      	str	r3, [r7, #4]
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	781b      	ldrb	r3, [r3, #0]
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	d005      	beq.n	8016f80 <chk_chr+0x26>
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	781b      	ldrb	r3, [r3, #0]
 8016f78:	461a      	mov	r2, r3
 8016f7a:	683b      	ldr	r3, [r7, #0]
 8016f7c:	4293      	cmp	r3, r2
 8016f7e:	d1f2      	bne.n	8016f66 <chk_chr+0xc>
	return *str;
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	781b      	ldrb	r3, [r3, #0]
}
 8016f84:	4618      	mov	r0, r3
 8016f86:	370c      	adds	r7, #12
 8016f88:	46bd      	mov	sp, r7
 8016f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f8e:	4770      	bx	lr

08016f90 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8016f90:	b480      	push	{r7}
 8016f92:	b085      	sub	sp, #20
 8016f94:	af00      	add	r7, sp, #0
 8016f96:	6078      	str	r0, [r7, #4]
 8016f98:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016f9a:	2300      	movs	r3, #0
 8016f9c:	60bb      	str	r3, [r7, #8]
 8016f9e:	68bb      	ldr	r3, [r7, #8]
 8016fa0:	60fb      	str	r3, [r7, #12]
 8016fa2:	e029      	b.n	8016ff8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8016fa4:	4a27      	ldr	r2, [pc, #156]	; (8017044 <chk_lock+0xb4>)
 8016fa6:	68fb      	ldr	r3, [r7, #12]
 8016fa8:	011b      	lsls	r3, r3, #4
 8016faa:	4413      	add	r3, r2
 8016fac:	681b      	ldr	r3, [r3, #0]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d01d      	beq.n	8016fee <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016fb2:	4a24      	ldr	r2, [pc, #144]	; (8017044 <chk_lock+0xb4>)
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	011b      	lsls	r3, r3, #4
 8016fb8:	4413      	add	r3, r2
 8016fba:	681a      	ldr	r2, [r3, #0]
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	429a      	cmp	r2, r3
 8016fc2:	d116      	bne.n	8016ff2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8016fc4:	4a1f      	ldr	r2, [pc, #124]	; (8017044 <chk_lock+0xb4>)
 8016fc6:	68fb      	ldr	r3, [r7, #12]
 8016fc8:	011b      	lsls	r3, r3, #4
 8016fca:	4413      	add	r3, r2
 8016fcc:	3304      	adds	r3, #4
 8016fce:	681a      	ldr	r2, [r3, #0]
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016fd4:	429a      	cmp	r2, r3
 8016fd6:	d10c      	bne.n	8016ff2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016fd8:	4a1a      	ldr	r2, [pc, #104]	; (8017044 <chk_lock+0xb4>)
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	011b      	lsls	r3, r3, #4
 8016fde:	4413      	add	r3, r2
 8016fe0:	3308      	adds	r3, #8
 8016fe2:	681a      	ldr	r2, [r3, #0]
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8016fe8:	429a      	cmp	r2, r3
 8016fea:	d102      	bne.n	8016ff2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016fec:	e007      	b.n	8016ffe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8016fee:	2301      	movs	r3, #1
 8016ff0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016ff2:	68fb      	ldr	r3, [r7, #12]
 8016ff4:	3301      	adds	r3, #1
 8016ff6:	60fb      	str	r3, [r7, #12]
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	2b01      	cmp	r3, #1
 8016ffc:	d9d2      	bls.n	8016fa4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8016ffe:	68fb      	ldr	r3, [r7, #12]
 8017000:	2b02      	cmp	r3, #2
 8017002:	d109      	bne.n	8017018 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8017004:	68bb      	ldr	r3, [r7, #8]
 8017006:	2b00      	cmp	r3, #0
 8017008:	d102      	bne.n	8017010 <chk_lock+0x80>
 801700a:	683b      	ldr	r3, [r7, #0]
 801700c:	2b02      	cmp	r3, #2
 801700e:	d101      	bne.n	8017014 <chk_lock+0x84>
 8017010:	2300      	movs	r3, #0
 8017012:	e010      	b.n	8017036 <chk_lock+0xa6>
 8017014:	2312      	movs	r3, #18
 8017016:	e00e      	b.n	8017036 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8017018:	683b      	ldr	r3, [r7, #0]
 801701a:	2b00      	cmp	r3, #0
 801701c:	d108      	bne.n	8017030 <chk_lock+0xa0>
 801701e:	4a09      	ldr	r2, [pc, #36]	; (8017044 <chk_lock+0xb4>)
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	011b      	lsls	r3, r3, #4
 8017024:	4413      	add	r3, r2
 8017026:	330c      	adds	r3, #12
 8017028:	881b      	ldrh	r3, [r3, #0]
 801702a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801702e:	d101      	bne.n	8017034 <chk_lock+0xa4>
 8017030:	2310      	movs	r3, #16
 8017032:	e000      	b.n	8017036 <chk_lock+0xa6>
 8017034:	2300      	movs	r3, #0
}
 8017036:	4618      	mov	r0, r3
 8017038:	3714      	adds	r7, #20
 801703a:	46bd      	mov	sp, r7
 801703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017040:	4770      	bx	lr
 8017042:	bf00      	nop
 8017044:	20001384 	.word	0x20001384

08017048 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8017048:	b480      	push	{r7}
 801704a:	b083      	sub	sp, #12
 801704c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801704e:	2300      	movs	r3, #0
 8017050:	607b      	str	r3, [r7, #4]
 8017052:	e002      	b.n	801705a <enq_lock+0x12>
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	3301      	adds	r3, #1
 8017058:	607b      	str	r3, [r7, #4]
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	2b01      	cmp	r3, #1
 801705e:	d806      	bhi.n	801706e <enq_lock+0x26>
 8017060:	4a09      	ldr	r2, [pc, #36]	; (8017088 <enq_lock+0x40>)
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	011b      	lsls	r3, r3, #4
 8017066:	4413      	add	r3, r2
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	2b00      	cmp	r3, #0
 801706c:	d1f2      	bne.n	8017054 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	2b02      	cmp	r3, #2
 8017072:	bf14      	ite	ne
 8017074:	2301      	movne	r3, #1
 8017076:	2300      	moveq	r3, #0
 8017078:	b2db      	uxtb	r3, r3
}
 801707a:	4618      	mov	r0, r3
 801707c:	370c      	adds	r7, #12
 801707e:	46bd      	mov	sp, r7
 8017080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017084:	4770      	bx	lr
 8017086:	bf00      	nop
 8017088:	20001384 	.word	0x20001384

0801708c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801708c:	b480      	push	{r7}
 801708e:	b085      	sub	sp, #20
 8017090:	af00      	add	r7, sp, #0
 8017092:	6078      	str	r0, [r7, #4]
 8017094:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017096:	2300      	movs	r3, #0
 8017098:	60fb      	str	r3, [r7, #12]
 801709a:	e01f      	b.n	80170dc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801709c:	4a41      	ldr	r2, [pc, #260]	; (80171a4 <inc_lock+0x118>)
 801709e:	68fb      	ldr	r3, [r7, #12]
 80170a0:	011b      	lsls	r3, r3, #4
 80170a2:	4413      	add	r3, r2
 80170a4:	681a      	ldr	r2, [r3, #0]
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	429a      	cmp	r2, r3
 80170ac:	d113      	bne.n	80170d6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80170ae:	4a3d      	ldr	r2, [pc, #244]	; (80171a4 <inc_lock+0x118>)
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	011b      	lsls	r3, r3, #4
 80170b4:	4413      	add	r3, r2
 80170b6:	3304      	adds	r3, #4
 80170b8:	681a      	ldr	r2, [r3, #0]
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80170be:	429a      	cmp	r2, r3
 80170c0:	d109      	bne.n	80170d6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80170c2:	4a38      	ldr	r2, [pc, #224]	; (80171a4 <inc_lock+0x118>)
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	011b      	lsls	r3, r3, #4
 80170c8:	4413      	add	r3, r2
 80170ca:	3308      	adds	r3, #8
 80170cc:	681a      	ldr	r2, [r3, #0]
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80170d2:	429a      	cmp	r2, r3
 80170d4:	d006      	beq.n	80170e4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80170d6:	68fb      	ldr	r3, [r7, #12]
 80170d8:	3301      	adds	r3, #1
 80170da:	60fb      	str	r3, [r7, #12]
 80170dc:	68fb      	ldr	r3, [r7, #12]
 80170de:	2b01      	cmp	r3, #1
 80170e0:	d9dc      	bls.n	801709c <inc_lock+0x10>
 80170e2:	e000      	b.n	80170e6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80170e4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80170e6:	68fb      	ldr	r3, [r7, #12]
 80170e8:	2b02      	cmp	r3, #2
 80170ea:	d132      	bne.n	8017152 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80170ec:	2300      	movs	r3, #0
 80170ee:	60fb      	str	r3, [r7, #12]
 80170f0:	e002      	b.n	80170f8 <inc_lock+0x6c>
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	3301      	adds	r3, #1
 80170f6:	60fb      	str	r3, [r7, #12]
 80170f8:	68fb      	ldr	r3, [r7, #12]
 80170fa:	2b01      	cmp	r3, #1
 80170fc:	d806      	bhi.n	801710c <inc_lock+0x80>
 80170fe:	4a29      	ldr	r2, [pc, #164]	; (80171a4 <inc_lock+0x118>)
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	011b      	lsls	r3, r3, #4
 8017104:	4413      	add	r3, r2
 8017106:	681b      	ldr	r3, [r3, #0]
 8017108:	2b00      	cmp	r3, #0
 801710a:	d1f2      	bne.n	80170f2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	2b02      	cmp	r3, #2
 8017110:	d101      	bne.n	8017116 <inc_lock+0x8a>
 8017112:	2300      	movs	r3, #0
 8017114:	e040      	b.n	8017198 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	681a      	ldr	r2, [r3, #0]
 801711a:	4922      	ldr	r1, [pc, #136]	; (80171a4 <inc_lock+0x118>)
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	011b      	lsls	r3, r3, #4
 8017120:	440b      	add	r3, r1
 8017122:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	689a      	ldr	r2, [r3, #8]
 8017128:	491e      	ldr	r1, [pc, #120]	; (80171a4 <inc_lock+0x118>)
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	011b      	lsls	r3, r3, #4
 801712e:	440b      	add	r3, r1
 8017130:	3304      	adds	r3, #4
 8017132:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	695a      	ldr	r2, [r3, #20]
 8017138:	491a      	ldr	r1, [pc, #104]	; (80171a4 <inc_lock+0x118>)
 801713a:	68fb      	ldr	r3, [r7, #12]
 801713c:	011b      	lsls	r3, r3, #4
 801713e:	440b      	add	r3, r1
 8017140:	3308      	adds	r3, #8
 8017142:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8017144:	4a17      	ldr	r2, [pc, #92]	; (80171a4 <inc_lock+0x118>)
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	011b      	lsls	r3, r3, #4
 801714a:	4413      	add	r3, r2
 801714c:	330c      	adds	r3, #12
 801714e:	2200      	movs	r2, #0
 8017150:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8017152:	683b      	ldr	r3, [r7, #0]
 8017154:	2b00      	cmp	r3, #0
 8017156:	d009      	beq.n	801716c <inc_lock+0xe0>
 8017158:	4a12      	ldr	r2, [pc, #72]	; (80171a4 <inc_lock+0x118>)
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	011b      	lsls	r3, r3, #4
 801715e:	4413      	add	r3, r2
 8017160:	330c      	adds	r3, #12
 8017162:	881b      	ldrh	r3, [r3, #0]
 8017164:	2b00      	cmp	r3, #0
 8017166:	d001      	beq.n	801716c <inc_lock+0xe0>
 8017168:	2300      	movs	r3, #0
 801716a:	e015      	b.n	8017198 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801716c:	683b      	ldr	r3, [r7, #0]
 801716e:	2b00      	cmp	r3, #0
 8017170:	d108      	bne.n	8017184 <inc_lock+0xf8>
 8017172:	4a0c      	ldr	r2, [pc, #48]	; (80171a4 <inc_lock+0x118>)
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	011b      	lsls	r3, r3, #4
 8017178:	4413      	add	r3, r2
 801717a:	330c      	adds	r3, #12
 801717c:	881b      	ldrh	r3, [r3, #0]
 801717e:	3301      	adds	r3, #1
 8017180:	b29a      	uxth	r2, r3
 8017182:	e001      	b.n	8017188 <inc_lock+0xfc>
 8017184:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017188:	4906      	ldr	r1, [pc, #24]	; (80171a4 <inc_lock+0x118>)
 801718a:	68fb      	ldr	r3, [r7, #12]
 801718c:	011b      	lsls	r3, r3, #4
 801718e:	440b      	add	r3, r1
 8017190:	330c      	adds	r3, #12
 8017192:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8017194:	68fb      	ldr	r3, [r7, #12]
 8017196:	3301      	adds	r3, #1
}
 8017198:	4618      	mov	r0, r3
 801719a:	3714      	adds	r7, #20
 801719c:	46bd      	mov	sp, r7
 801719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171a2:	4770      	bx	lr
 80171a4:	20001384 	.word	0x20001384

080171a8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80171a8:	b480      	push	{r7}
 80171aa:	b085      	sub	sp, #20
 80171ac:	af00      	add	r7, sp, #0
 80171ae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80171b0:	2300      	movs	r3, #0
 80171b2:	60fb      	str	r3, [r7, #12]
 80171b4:	e010      	b.n	80171d8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80171b6:	4a0d      	ldr	r2, [pc, #52]	; (80171ec <clear_lock+0x44>)
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	011b      	lsls	r3, r3, #4
 80171bc:	4413      	add	r3, r2
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	687a      	ldr	r2, [r7, #4]
 80171c2:	429a      	cmp	r2, r3
 80171c4:	d105      	bne.n	80171d2 <clear_lock+0x2a>
 80171c6:	4a09      	ldr	r2, [pc, #36]	; (80171ec <clear_lock+0x44>)
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	011b      	lsls	r3, r3, #4
 80171cc:	4413      	add	r3, r2
 80171ce:	2200      	movs	r2, #0
 80171d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	3301      	adds	r3, #1
 80171d6:	60fb      	str	r3, [r7, #12]
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	2b01      	cmp	r3, #1
 80171dc:	d9eb      	bls.n	80171b6 <clear_lock+0xe>
	}
}
 80171de:	bf00      	nop
 80171e0:	bf00      	nop
 80171e2:	3714      	adds	r7, #20
 80171e4:	46bd      	mov	sp, r7
 80171e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ea:	4770      	bx	lr
 80171ec:	20001384 	.word	0x20001384

080171f0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80171f0:	b580      	push	{r7, lr}
 80171f2:	b086      	sub	sp, #24
 80171f4:	af00      	add	r7, sp, #0
 80171f6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80171f8:	2300      	movs	r3, #0
 80171fa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	78db      	ldrb	r3, [r3, #3]
 8017200:	2b00      	cmp	r3, #0
 8017202:	d034      	beq.n	801726e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017208:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	7858      	ldrb	r0, [r3, #1]
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017214:	2301      	movs	r3, #1
 8017216:	697a      	ldr	r2, [r7, #20]
 8017218:	f7ff fd7c 	bl	8016d14 <disk_write>
 801721c:	4603      	mov	r3, r0
 801721e:	2b00      	cmp	r3, #0
 8017220:	d002      	beq.n	8017228 <sync_window+0x38>
			res = FR_DISK_ERR;
 8017222:	2301      	movs	r3, #1
 8017224:	73fb      	strb	r3, [r7, #15]
 8017226:	e022      	b.n	801726e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	2200      	movs	r2, #0
 801722c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	6a1b      	ldr	r3, [r3, #32]
 8017232:	697a      	ldr	r2, [r7, #20]
 8017234:	1ad2      	subs	r2, r2, r3
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	699b      	ldr	r3, [r3, #24]
 801723a:	429a      	cmp	r2, r3
 801723c:	d217      	bcs.n	801726e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	789b      	ldrb	r3, [r3, #2]
 8017242:	613b      	str	r3, [r7, #16]
 8017244:	e010      	b.n	8017268 <sync_window+0x78>
					wsect += fs->fsize;
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	699b      	ldr	r3, [r3, #24]
 801724a:	697a      	ldr	r2, [r7, #20]
 801724c:	4413      	add	r3, r2
 801724e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	7858      	ldrb	r0, [r3, #1]
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801725a:	2301      	movs	r3, #1
 801725c:	697a      	ldr	r2, [r7, #20]
 801725e:	f7ff fd59 	bl	8016d14 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017262:	693b      	ldr	r3, [r7, #16]
 8017264:	3b01      	subs	r3, #1
 8017266:	613b      	str	r3, [r7, #16]
 8017268:	693b      	ldr	r3, [r7, #16]
 801726a:	2b01      	cmp	r3, #1
 801726c:	d8eb      	bhi.n	8017246 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801726e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017270:	4618      	mov	r0, r3
 8017272:	3718      	adds	r7, #24
 8017274:	46bd      	mov	sp, r7
 8017276:	bd80      	pop	{r7, pc}

08017278 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8017278:	b580      	push	{r7, lr}
 801727a:	b084      	sub	sp, #16
 801727c:	af00      	add	r7, sp, #0
 801727e:	6078      	str	r0, [r7, #4]
 8017280:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8017282:	2300      	movs	r3, #0
 8017284:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801728a:	683a      	ldr	r2, [r7, #0]
 801728c:	429a      	cmp	r2, r3
 801728e:	d01b      	beq.n	80172c8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8017290:	6878      	ldr	r0, [r7, #4]
 8017292:	f7ff ffad 	bl	80171f0 <sync_window>
 8017296:	4603      	mov	r3, r0
 8017298:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801729a:	7bfb      	ldrb	r3, [r7, #15]
 801729c:	2b00      	cmp	r3, #0
 801729e:	d113      	bne.n	80172c8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	7858      	ldrb	r0, [r3, #1]
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80172aa:	2301      	movs	r3, #1
 80172ac:	683a      	ldr	r2, [r7, #0]
 80172ae:	f7ff fd11 	bl	8016cd4 <disk_read>
 80172b2:	4603      	mov	r3, r0
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d004      	beq.n	80172c2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80172b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80172bc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80172be:	2301      	movs	r3, #1
 80172c0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	683a      	ldr	r2, [r7, #0]
 80172c6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80172c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80172ca:	4618      	mov	r0, r3
 80172cc:	3710      	adds	r7, #16
 80172ce:	46bd      	mov	sp, r7
 80172d0:	bd80      	pop	{r7, pc}
	...

080172d4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80172d4:	b580      	push	{r7, lr}
 80172d6:	b084      	sub	sp, #16
 80172d8:	af00      	add	r7, sp, #0
 80172da:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80172dc:	6878      	ldr	r0, [r7, #4]
 80172de:	f7ff ff87 	bl	80171f0 <sync_window>
 80172e2:	4603      	mov	r3, r0
 80172e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80172e6:	7bfb      	ldrb	r3, [r7, #15]
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d158      	bne.n	801739e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	781b      	ldrb	r3, [r3, #0]
 80172f0:	2b03      	cmp	r3, #3
 80172f2:	d148      	bne.n	8017386 <sync_fs+0xb2>
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	791b      	ldrb	r3, [r3, #4]
 80172f8:	2b01      	cmp	r3, #1
 80172fa:	d144      	bne.n	8017386 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	3330      	adds	r3, #48	; 0x30
 8017300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017304:	2100      	movs	r1, #0
 8017306:	4618      	mov	r0, r3
 8017308:	f7ff fde5 	bl	8016ed6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	3330      	adds	r3, #48	; 0x30
 8017310:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017314:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8017318:	4618      	mov	r0, r3
 801731a:	f7ff fd74 	bl	8016e06 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	3330      	adds	r3, #48	; 0x30
 8017322:	4921      	ldr	r1, [pc, #132]	; (80173a8 <sync_fs+0xd4>)
 8017324:	4618      	mov	r0, r3
 8017326:	f7ff fd89 	bl	8016e3c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	3330      	adds	r3, #48	; 0x30
 801732e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017332:	491e      	ldr	r1, [pc, #120]	; (80173ac <sync_fs+0xd8>)
 8017334:	4618      	mov	r0, r3
 8017336:	f7ff fd81 	bl	8016e3c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	3330      	adds	r3, #48	; 0x30
 801733e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	691b      	ldr	r3, [r3, #16]
 8017346:	4619      	mov	r1, r3
 8017348:	4610      	mov	r0, r2
 801734a:	f7ff fd77 	bl	8016e3c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	3330      	adds	r3, #48	; 0x30
 8017352:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	68db      	ldr	r3, [r3, #12]
 801735a:	4619      	mov	r1, r3
 801735c:	4610      	mov	r0, r2
 801735e:	f7ff fd6d 	bl	8016e3c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	69db      	ldr	r3, [r3, #28]
 8017366:	1c5a      	adds	r2, r3, #1
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	7858      	ldrb	r0, [r3, #1]
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801737a:	2301      	movs	r3, #1
 801737c:	f7ff fcca 	bl	8016d14 <disk_write>
			fs->fsi_flag = 0;
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	2200      	movs	r2, #0
 8017384:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	785b      	ldrb	r3, [r3, #1]
 801738a:	2200      	movs	r2, #0
 801738c:	2100      	movs	r1, #0
 801738e:	4618      	mov	r0, r3
 8017390:	f7ff fce0 	bl	8016d54 <disk_ioctl>
 8017394:	4603      	mov	r3, r0
 8017396:	2b00      	cmp	r3, #0
 8017398:	d001      	beq.n	801739e <sync_fs+0xca>
 801739a:	2301      	movs	r3, #1
 801739c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801739e:	7bfb      	ldrb	r3, [r7, #15]
}
 80173a0:	4618      	mov	r0, r3
 80173a2:	3710      	adds	r7, #16
 80173a4:	46bd      	mov	sp, r7
 80173a6:	bd80      	pop	{r7, pc}
 80173a8:	41615252 	.word	0x41615252
 80173ac:	61417272 	.word	0x61417272

080173b0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80173b0:	b480      	push	{r7}
 80173b2:	b083      	sub	sp, #12
 80173b4:	af00      	add	r7, sp, #0
 80173b6:	6078      	str	r0, [r7, #4]
 80173b8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80173ba:	683b      	ldr	r3, [r7, #0]
 80173bc:	3b02      	subs	r3, #2
 80173be:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	695b      	ldr	r3, [r3, #20]
 80173c4:	3b02      	subs	r3, #2
 80173c6:	683a      	ldr	r2, [r7, #0]
 80173c8:	429a      	cmp	r2, r3
 80173ca:	d301      	bcc.n	80173d0 <clust2sect+0x20>
 80173cc:	2300      	movs	r3, #0
 80173ce:	e008      	b.n	80173e2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	895b      	ldrh	r3, [r3, #10]
 80173d4:	461a      	mov	r2, r3
 80173d6:	683b      	ldr	r3, [r7, #0]
 80173d8:	fb03 f202 	mul.w	r2, r3, r2
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80173e0:	4413      	add	r3, r2
}
 80173e2:	4618      	mov	r0, r3
 80173e4:	370c      	adds	r7, #12
 80173e6:	46bd      	mov	sp, r7
 80173e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ec:	4770      	bx	lr

080173ee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80173ee:	b580      	push	{r7, lr}
 80173f0:	b086      	sub	sp, #24
 80173f2:	af00      	add	r7, sp, #0
 80173f4:	6078      	str	r0, [r7, #4]
 80173f6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	681b      	ldr	r3, [r3, #0]
 80173fc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80173fe:	683b      	ldr	r3, [r7, #0]
 8017400:	2b01      	cmp	r3, #1
 8017402:	d904      	bls.n	801740e <get_fat+0x20>
 8017404:	693b      	ldr	r3, [r7, #16]
 8017406:	695b      	ldr	r3, [r3, #20]
 8017408:	683a      	ldr	r2, [r7, #0]
 801740a:	429a      	cmp	r2, r3
 801740c:	d302      	bcc.n	8017414 <get_fat+0x26>
		val = 1;	/* Internal error */
 801740e:	2301      	movs	r3, #1
 8017410:	617b      	str	r3, [r7, #20]
 8017412:	e08f      	b.n	8017534 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8017414:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017418:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801741a:	693b      	ldr	r3, [r7, #16]
 801741c:	781b      	ldrb	r3, [r3, #0]
 801741e:	2b03      	cmp	r3, #3
 8017420:	d062      	beq.n	80174e8 <get_fat+0xfa>
 8017422:	2b03      	cmp	r3, #3
 8017424:	dc7c      	bgt.n	8017520 <get_fat+0x132>
 8017426:	2b01      	cmp	r3, #1
 8017428:	d002      	beq.n	8017430 <get_fat+0x42>
 801742a:	2b02      	cmp	r3, #2
 801742c:	d042      	beq.n	80174b4 <get_fat+0xc6>
 801742e:	e077      	b.n	8017520 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8017430:	683b      	ldr	r3, [r7, #0]
 8017432:	60fb      	str	r3, [r7, #12]
 8017434:	68fb      	ldr	r3, [r7, #12]
 8017436:	085b      	lsrs	r3, r3, #1
 8017438:	68fa      	ldr	r2, [r7, #12]
 801743a:	4413      	add	r3, r2
 801743c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801743e:	693b      	ldr	r3, [r7, #16]
 8017440:	6a1a      	ldr	r2, [r3, #32]
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	0a5b      	lsrs	r3, r3, #9
 8017446:	4413      	add	r3, r2
 8017448:	4619      	mov	r1, r3
 801744a:	6938      	ldr	r0, [r7, #16]
 801744c:	f7ff ff14 	bl	8017278 <move_window>
 8017450:	4603      	mov	r3, r0
 8017452:	2b00      	cmp	r3, #0
 8017454:	d167      	bne.n	8017526 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8017456:	68fb      	ldr	r3, [r7, #12]
 8017458:	1c5a      	adds	r2, r3, #1
 801745a:	60fa      	str	r2, [r7, #12]
 801745c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017460:	693a      	ldr	r2, [r7, #16]
 8017462:	4413      	add	r3, r2
 8017464:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017468:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801746a:	693b      	ldr	r3, [r7, #16]
 801746c:	6a1a      	ldr	r2, [r3, #32]
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	0a5b      	lsrs	r3, r3, #9
 8017472:	4413      	add	r3, r2
 8017474:	4619      	mov	r1, r3
 8017476:	6938      	ldr	r0, [r7, #16]
 8017478:	f7ff fefe 	bl	8017278 <move_window>
 801747c:	4603      	mov	r3, r0
 801747e:	2b00      	cmp	r3, #0
 8017480:	d153      	bne.n	801752a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017488:	693a      	ldr	r2, [r7, #16]
 801748a:	4413      	add	r3, r2
 801748c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017490:	021b      	lsls	r3, r3, #8
 8017492:	461a      	mov	r2, r3
 8017494:	68bb      	ldr	r3, [r7, #8]
 8017496:	4313      	orrs	r3, r2
 8017498:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801749a:	683b      	ldr	r3, [r7, #0]
 801749c:	f003 0301 	and.w	r3, r3, #1
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d002      	beq.n	80174aa <get_fat+0xbc>
 80174a4:	68bb      	ldr	r3, [r7, #8]
 80174a6:	091b      	lsrs	r3, r3, #4
 80174a8:	e002      	b.n	80174b0 <get_fat+0xc2>
 80174aa:	68bb      	ldr	r3, [r7, #8]
 80174ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80174b0:	617b      	str	r3, [r7, #20]
			break;
 80174b2:	e03f      	b.n	8017534 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80174b4:	693b      	ldr	r3, [r7, #16]
 80174b6:	6a1a      	ldr	r2, [r3, #32]
 80174b8:	683b      	ldr	r3, [r7, #0]
 80174ba:	0a1b      	lsrs	r3, r3, #8
 80174bc:	4413      	add	r3, r2
 80174be:	4619      	mov	r1, r3
 80174c0:	6938      	ldr	r0, [r7, #16]
 80174c2:	f7ff fed9 	bl	8017278 <move_window>
 80174c6:	4603      	mov	r3, r0
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d130      	bne.n	801752e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80174cc:	693b      	ldr	r3, [r7, #16]
 80174ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80174d2:	683b      	ldr	r3, [r7, #0]
 80174d4:	005b      	lsls	r3, r3, #1
 80174d6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80174da:	4413      	add	r3, r2
 80174dc:	4618      	mov	r0, r3
 80174de:	f7ff fc57 	bl	8016d90 <ld_word>
 80174e2:	4603      	mov	r3, r0
 80174e4:	617b      	str	r3, [r7, #20]
			break;
 80174e6:	e025      	b.n	8017534 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80174e8:	693b      	ldr	r3, [r7, #16]
 80174ea:	6a1a      	ldr	r2, [r3, #32]
 80174ec:	683b      	ldr	r3, [r7, #0]
 80174ee:	09db      	lsrs	r3, r3, #7
 80174f0:	4413      	add	r3, r2
 80174f2:	4619      	mov	r1, r3
 80174f4:	6938      	ldr	r0, [r7, #16]
 80174f6:	f7ff febf 	bl	8017278 <move_window>
 80174fa:	4603      	mov	r3, r0
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d118      	bne.n	8017532 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8017500:	693b      	ldr	r3, [r7, #16]
 8017502:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017506:	683b      	ldr	r3, [r7, #0]
 8017508:	009b      	lsls	r3, r3, #2
 801750a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801750e:	4413      	add	r3, r2
 8017510:	4618      	mov	r0, r3
 8017512:	f7ff fc55 	bl	8016dc0 <ld_dword>
 8017516:	4603      	mov	r3, r0
 8017518:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801751c:	617b      	str	r3, [r7, #20]
			break;
 801751e:	e009      	b.n	8017534 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8017520:	2301      	movs	r3, #1
 8017522:	617b      	str	r3, [r7, #20]
 8017524:	e006      	b.n	8017534 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017526:	bf00      	nop
 8017528:	e004      	b.n	8017534 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801752a:	bf00      	nop
 801752c:	e002      	b.n	8017534 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801752e:	bf00      	nop
 8017530:	e000      	b.n	8017534 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017532:	bf00      	nop
		}
	}

	return val;
 8017534:	697b      	ldr	r3, [r7, #20]
}
 8017536:	4618      	mov	r0, r3
 8017538:	3718      	adds	r7, #24
 801753a:	46bd      	mov	sp, r7
 801753c:	bd80      	pop	{r7, pc}

0801753e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801753e:	b590      	push	{r4, r7, lr}
 8017540:	b089      	sub	sp, #36	; 0x24
 8017542:	af00      	add	r7, sp, #0
 8017544:	60f8      	str	r0, [r7, #12]
 8017546:	60b9      	str	r1, [r7, #8]
 8017548:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801754a:	2302      	movs	r3, #2
 801754c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801754e:	68bb      	ldr	r3, [r7, #8]
 8017550:	2b01      	cmp	r3, #1
 8017552:	f240 80d2 	bls.w	80176fa <put_fat+0x1bc>
 8017556:	68fb      	ldr	r3, [r7, #12]
 8017558:	695b      	ldr	r3, [r3, #20]
 801755a:	68ba      	ldr	r2, [r7, #8]
 801755c:	429a      	cmp	r2, r3
 801755e:	f080 80cc 	bcs.w	80176fa <put_fat+0x1bc>
		switch (fs->fs_type) {
 8017562:	68fb      	ldr	r3, [r7, #12]
 8017564:	781b      	ldrb	r3, [r3, #0]
 8017566:	2b03      	cmp	r3, #3
 8017568:	f000 8096 	beq.w	8017698 <put_fat+0x15a>
 801756c:	2b03      	cmp	r3, #3
 801756e:	f300 80cd 	bgt.w	801770c <put_fat+0x1ce>
 8017572:	2b01      	cmp	r3, #1
 8017574:	d002      	beq.n	801757c <put_fat+0x3e>
 8017576:	2b02      	cmp	r3, #2
 8017578:	d06e      	beq.n	8017658 <put_fat+0x11a>
 801757a:	e0c7      	b.n	801770c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801757c:	68bb      	ldr	r3, [r7, #8]
 801757e:	61bb      	str	r3, [r7, #24]
 8017580:	69bb      	ldr	r3, [r7, #24]
 8017582:	085b      	lsrs	r3, r3, #1
 8017584:	69ba      	ldr	r2, [r7, #24]
 8017586:	4413      	add	r3, r2
 8017588:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801758a:	68fb      	ldr	r3, [r7, #12]
 801758c:	6a1a      	ldr	r2, [r3, #32]
 801758e:	69bb      	ldr	r3, [r7, #24]
 8017590:	0a5b      	lsrs	r3, r3, #9
 8017592:	4413      	add	r3, r2
 8017594:	4619      	mov	r1, r3
 8017596:	68f8      	ldr	r0, [r7, #12]
 8017598:	f7ff fe6e 	bl	8017278 <move_window>
 801759c:	4603      	mov	r3, r0
 801759e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80175a0:	7ffb      	ldrb	r3, [r7, #31]
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	f040 80ab 	bne.w	80176fe <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80175a8:	68fb      	ldr	r3, [r7, #12]
 80175aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80175ae:	69bb      	ldr	r3, [r7, #24]
 80175b0:	1c59      	adds	r1, r3, #1
 80175b2:	61b9      	str	r1, [r7, #24]
 80175b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80175b8:	4413      	add	r3, r2
 80175ba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80175bc:	68bb      	ldr	r3, [r7, #8]
 80175be:	f003 0301 	and.w	r3, r3, #1
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d00d      	beq.n	80175e2 <put_fat+0xa4>
 80175c6:	697b      	ldr	r3, [r7, #20]
 80175c8:	781b      	ldrb	r3, [r3, #0]
 80175ca:	b25b      	sxtb	r3, r3
 80175cc:	f003 030f 	and.w	r3, r3, #15
 80175d0:	b25a      	sxtb	r2, r3
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	b2db      	uxtb	r3, r3
 80175d6:	011b      	lsls	r3, r3, #4
 80175d8:	b25b      	sxtb	r3, r3
 80175da:	4313      	orrs	r3, r2
 80175dc:	b25b      	sxtb	r3, r3
 80175de:	b2db      	uxtb	r3, r3
 80175e0:	e001      	b.n	80175e6 <put_fat+0xa8>
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	b2db      	uxtb	r3, r3
 80175e6:	697a      	ldr	r2, [r7, #20]
 80175e8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80175ea:	68fb      	ldr	r3, [r7, #12]
 80175ec:	2201      	movs	r2, #1
 80175ee:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80175f0:	68fb      	ldr	r3, [r7, #12]
 80175f2:	6a1a      	ldr	r2, [r3, #32]
 80175f4:	69bb      	ldr	r3, [r7, #24]
 80175f6:	0a5b      	lsrs	r3, r3, #9
 80175f8:	4413      	add	r3, r2
 80175fa:	4619      	mov	r1, r3
 80175fc:	68f8      	ldr	r0, [r7, #12]
 80175fe:	f7ff fe3b 	bl	8017278 <move_window>
 8017602:	4603      	mov	r3, r0
 8017604:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017606:	7ffb      	ldrb	r3, [r7, #31]
 8017608:	2b00      	cmp	r3, #0
 801760a:	d17a      	bne.n	8017702 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017612:	69bb      	ldr	r3, [r7, #24]
 8017614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017618:	4413      	add	r3, r2
 801761a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801761c:	68bb      	ldr	r3, [r7, #8]
 801761e:	f003 0301 	and.w	r3, r3, #1
 8017622:	2b00      	cmp	r3, #0
 8017624:	d003      	beq.n	801762e <put_fat+0xf0>
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	091b      	lsrs	r3, r3, #4
 801762a:	b2db      	uxtb	r3, r3
 801762c:	e00e      	b.n	801764c <put_fat+0x10e>
 801762e:	697b      	ldr	r3, [r7, #20]
 8017630:	781b      	ldrb	r3, [r3, #0]
 8017632:	b25b      	sxtb	r3, r3
 8017634:	f023 030f 	bic.w	r3, r3, #15
 8017638:	b25a      	sxtb	r2, r3
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	0a1b      	lsrs	r3, r3, #8
 801763e:	b25b      	sxtb	r3, r3
 8017640:	f003 030f 	and.w	r3, r3, #15
 8017644:	b25b      	sxtb	r3, r3
 8017646:	4313      	orrs	r3, r2
 8017648:	b25b      	sxtb	r3, r3
 801764a:	b2db      	uxtb	r3, r3
 801764c:	697a      	ldr	r2, [r7, #20]
 801764e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8017650:	68fb      	ldr	r3, [r7, #12]
 8017652:	2201      	movs	r2, #1
 8017654:	70da      	strb	r2, [r3, #3]
			break;
 8017656:	e059      	b.n	801770c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	6a1a      	ldr	r2, [r3, #32]
 801765c:	68bb      	ldr	r3, [r7, #8]
 801765e:	0a1b      	lsrs	r3, r3, #8
 8017660:	4413      	add	r3, r2
 8017662:	4619      	mov	r1, r3
 8017664:	68f8      	ldr	r0, [r7, #12]
 8017666:	f7ff fe07 	bl	8017278 <move_window>
 801766a:	4603      	mov	r3, r0
 801766c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801766e:	7ffb      	ldrb	r3, [r7, #31]
 8017670:	2b00      	cmp	r3, #0
 8017672:	d148      	bne.n	8017706 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801767a:	68bb      	ldr	r3, [r7, #8]
 801767c:	005b      	lsls	r3, r3, #1
 801767e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8017682:	4413      	add	r3, r2
 8017684:	687a      	ldr	r2, [r7, #4]
 8017686:	b292      	uxth	r2, r2
 8017688:	4611      	mov	r1, r2
 801768a:	4618      	mov	r0, r3
 801768c:	f7ff fbbb 	bl	8016e06 <st_word>
			fs->wflag = 1;
 8017690:	68fb      	ldr	r3, [r7, #12]
 8017692:	2201      	movs	r2, #1
 8017694:	70da      	strb	r2, [r3, #3]
			break;
 8017696:	e039      	b.n	801770c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8017698:	68fb      	ldr	r3, [r7, #12]
 801769a:	6a1a      	ldr	r2, [r3, #32]
 801769c:	68bb      	ldr	r3, [r7, #8]
 801769e:	09db      	lsrs	r3, r3, #7
 80176a0:	4413      	add	r3, r2
 80176a2:	4619      	mov	r1, r3
 80176a4:	68f8      	ldr	r0, [r7, #12]
 80176a6:	f7ff fde7 	bl	8017278 <move_window>
 80176aa:	4603      	mov	r3, r0
 80176ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80176ae:	7ffb      	ldrb	r3, [r7, #31]
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d12a      	bne.n	801770a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80176ba:	68fb      	ldr	r3, [r7, #12]
 80176bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80176c0:	68bb      	ldr	r3, [r7, #8]
 80176c2:	009b      	lsls	r3, r3, #2
 80176c4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80176c8:	4413      	add	r3, r2
 80176ca:	4618      	mov	r0, r3
 80176cc:	f7ff fb78 	bl	8016dc0 <ld_dword>
 80176d0:	4603      	mov	r3, r0
 80176d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80176d6:	4323      	orrs	r3, r4
 80176d8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80176da:	68fb      	ldr	r3, [r7, #12]
 80176dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80176e0:	68bb      	ldr	r3, [r7, #8]
 80176e2:	009b      	lsls	r3, r3, #2
 80176e4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80176e8:	4413      	add	r3, r2
 80176ea:	6879      	ldr	r1, [r7, #4]
 80176ec:	4618      	mov	r0, r3
 80176ee:	f7ff fba5 	bl	8016e3c <st_dword>
			fs->wflag = 1;
 80176f2:	68fb      	ldr	r3, [r7, #12]
 80176f4:	2201      	movs	r2, #1
 80176f6:	70da      	strb	r2, [r3, #3]
			break;
 80176f8:	e008      	b.n	801770c <put_fat+0x1ce>
		}
	}
 80176fa:	bf00      	nop
 80176fc:	e006      	b.n	801770c <put_fat+0x1ce>
			if (res != FR_OK) break;
 80176fe:	bf00      	nop
 8017700:	e004      	b.n	801770c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8017702:	bf00      	nop
 8017704:	e002      	b.n	801770c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8017706:	bf00      	nop
 8017708:	e000      	b.n	801770c <put_fat+0x1ce>
			if (res != FR_OK) break;
 801770a:	bf00      	nop
	return res;
 801770c:	7ffb      	ldrb	r3, [r7, #31]
}
 801770e:	4618      	mov	r0, r3
 8017710:	3724      	adds	r7, #36	; 0x24
 8017712:	46bd      	mov	sp, r7
 8017714:	bd90      	pop	{r4, r7, pc}

08017716 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8017716:	b580      	push	{r7, lr}
 8017718:	b088      	sub	sp, #32
 801771a:	af00      	add	r7, sp, #0
 801771c:	60f8      	str	r0, [r7, #12]
 801771e:	60b9      	str	r1, [r7, #8]
 8017720:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8017722:	2300      	movs	r3, #0
 8017724:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	681b      	ldr	r3, [r3, #0]
 801772a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801772c:	68bb      	ldr	r3, [r7, #8]
 801772e:	2b01      	cmp	r3, #1
 8017730:	d904      	bls.n	801773c <remove_chain+0x26>
 8017732:	69bb      	ldr	r3, [r7, #24]
 8017734:	695b      	ldr	r3, [r3, #20]
 8017736:	68ba      	ldr	r2, [r7, #8]
 8017738:	429a      	cmp	r2, r3
 801773a:	d301      	bcc.n	8017740 <remove_chain+0x2a>
 801773c:	2302      	movs	r3, #2
 801773e:	e04b      	b.n	80177d8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	2b00      	cmp	r3, #0
 8017744:	d00c      	beq.n	8017760 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8017746:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801774a:	6879      	ldr	r1, [r7, #4]
 801774c:	69b8      	ldr	r0, [r7, #24]
 801774e:	f7ff fef6 	bl	801753e <put_fat>
 8017752:	4603      	mov	r3, r0
 8017754:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8017756:	7ffb      	ldrb	r3, [r7, #31]
 8017758:	2b00      	cmp	r3, #0
 801775a:	d001      	beq.n	8017760 <remove_chain+0x4a>
 801775c:	7ffb      	ldrb	r3, [r7, #31]
 801775e:	e03b      	b.n	80177d8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8017760:	68b9      	ldr	r1, [r7, #8]
 8017762:	68f8      	ldr	r0, [r7, #12]
 8017764:	f7ff fe43 	bl	80173ee <get_fat>
 8017768:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801776a:	697b      	ldr	r3, [r7, #20]
 801776c:	2b00      	cmp	r3, #0
 801776e:	d031      	beq.n	80177d4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8017770:	697b      	ldr	r3, [r7, #20]
 8017772:	2b01      	cmp	r3, #1
 8017774:	d101      	bne.n	801777a <remove_chain+0x64>
 8017776:	2302      	movs	r3, #2
 8017778:	e02e      	b.n	80177d8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801777a:	697b      	ldr	r3, [r7, #20]
 801777c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017780:	d101      	bne.n	8017786 <remove_chain+0x70>
 8017782:	2301      	movs	r3, #1
 8017784:	e028      	b.n	80177d8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8017786:	2200      	movs	r2, #0
 8017788:	68b9      	ldr	r1, [r7, #8]
 801778a:	69b8      	ldr	r0, [r7, #24]
 801778c:	f7ff fed7 	bl	801753e <put_fat>
 8017790:	4603      	mov	r3, r0
 8017792:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8017794:	7ffb      	ldrb	r3, [r7, #31]
 8017796:	2b00      	cmp	r3, #0
 8017798:	d001      	beq.n	801779e <remove_chain+0x88>
 801779a:	7ffb      	ldrb	r3, [r7, #31]
 801779c:	e01c      	b.n	80177d8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801779e:	69bb      	ldr	r3, [r7, #24]
 80177a0:	691a      	ldr	r2, [r3, #16]
 80177a2:	69bb      	ldr	r3, [r7, #24]
 80177a4:	695b      	ldr	r3, [r3, #20]
 80177a6:	3b02      	subs	r3, #2
 80177a8:	429a      	cmp	r2, r3
 80177aa:	d20b      	bcs.n	80177c4 <remove_chain+0xae>
			fs->free_clst++;
 80177ac:	69bb      	ldr	r3, [r7, #24]
 80177ae:	691b      	ldr	r3, [r3, #16]
 80177b0:	1c5a      	adds	r2, r3, #1
 80177b2:	69bb      	ldr	r3, [r7, #24]
 80177b4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80177b6:	69bb      	ldr	r3, [r7, #24]
 80177b8:	791b      	ldrb	r3, [r3, #4]
 80177ba:	f043 0301 	orr.w	r3, r3, #1
 80177be:	b2da      	uxtb	r2, r3
 80177c0:	69bb      	ldr	r3, [r7, #24]
 80177c2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80177c4:	697b      	ldr	r3, [r7, #20]
 80177c6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80177c8:	69bb      	ldr	r3, [r7, #24]
 80177ca:	695b      	ldr	r3, [r3, #20]
 80177cc:	68ba      	ldr	r2, [r7, #8]
 80177ce:	429a      	cmp	r2, r3
 80177d0:	d3c6      	bcc.n	8017760 <remove_chain+0x4a>
 80177d2:	e000      	b.n	80177d6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80177d4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80177d6:	2300      	movs	r3, #0
}
 80177d8:	4618      	mov	r0, r3
 80177da:	3720      	adds	r7, #32
 80177dc:	46bd      	mov	sp, r7
 80177de:	bd80      	pop	{r7, pc}

080177e0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80177e0:	b580      	push	{r7, lr}
 80177e2:	b088      	sub	sp, #32
 80177e4:	af00      	add	r7, sp, #0
 80177e6:	6078      	str	r0, [r7, #4]
 80177e8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80177f0:	683b      	ldr	r3, [r7, #0]
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d10d      	bne.n	8017812 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80177f6:	693b      	ldr	r3, [r7, #16]
 80177f8:	68db      	ldr	r3, [r3, #12]
 80177fa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80177fc:	69bb      	ldr	r3, [r7, #24]
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d004      	beq.n	801780c <create_chain+0x2c>
 8017802:	693b      	ldr	r3, [r7, #16]
 8017804:	695b      	ldr	r3, [r3, #20]
 8017806:	69ba      	ldr	r2, [r7, #24]
 8017808:	429a      	cmp	r2, r3
 801780a:	d31b      	bcc.n	8017844 <create_chain+0x64>
 801780c:	2301      	movs	r3, #1
 801780e:	61bb      	str	r3, [r7, #24]
 8017810:	e018      	b.n	8017844 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8017812:	6839      	ldr	r1, [r7, #0]
 8017814:	6878      	ldr	r0, [r7, #4]
 8017816:	f7ff fdea 	bl	80173ee <get_fat>
 801781a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801781c:	68fb      	ldr	r3, [r7, #12]
 801781e:	2b01      	cmp	r3, #1
 8017820:	d801      	bhi.n	8017826 <create_chain+0x46>
 8017822:	2301      	movs	r3, #1
 8017824:	e070      	b.n	8017908 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8017826:	68fb      	ldr	r3, [r7, #12]
 8017828:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801782c:	d101      	bne.n	8017832 <create_chain+0x52>
 801782e:	68fb      	ldr	r3, [r7, #12]
 8017830:	e06a      	b.n	8017908 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8017832:	693b      	ldr	r3, [r7, #16]
 8017834:	695b      	ldr	r3, [r3, #20]
 8017836:	68fa      	ldr	r2, [r7, #12]
 8017838:	429a      	cmp	r2, r3
 801783a:	d201      	bcs.n	8017840 <create_chain+0x60>
 801783c:	68fb      	ldr	r3, [r7, #12]
 801783e:	e063      	b.n	8017908 <create_chain+0x128>
		scl = clst;
 8017840:	683b      	ldr	r3, [r7, #0]
 8017842:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8017844:	69bb      	ldr	r3, [r7, #24]
 8017846:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8017848:	69fb      	ldr	r3, [r7, #28]
 801784a:	3301      	adds	r3, #1
 801784c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801784e:	693b      	ldr	r3, [r7, #16]
 8017850:	695b      	ldr	r3, [r3, #20]
 8017852:	69fa      	ldr	r2, [r7, #28]
 8017854:	429a      	cmp	r2, r3
 8017856:	d307      	bcc.n	8017868 <create_chain+0x88>
				ncl = 2;
 8017858:	2302      	movs	r3, #2
 801785a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801785c:	69fa      	ldr	r2, [r7, #28]
 801785e:	69bb      	ldr	r3, [r7, #24]
 8017860:	429a      	cmp	r2, r3
 8017862:	d901      	bls.n	8017868 <create_chain+0x88>
 8017864:	2300      	movs	r3, #0
 8017866:	e04f      	b.n	8017908 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8017868:	69f9      	ldr	r1, [r7, #28]
 801786a:	6878      	ldr	r0, [r7, #4]
 801786c:	f7ff fdbf 	bl	80173ee <get_fat>
 8017870:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8017872:	68fb      	ldr	r3, [r7, #12]
 8017874:	2b00      	cmp	r3, #0
 8017876:	d00e      	beq.n	8017896 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8017878:	68fb      	ldr	r3, [r7, #12]
 801787a:	2b01      	cmp	r3, #1
 801787c:	d003      	beq.n	8017886 <create_chain+0xa6>
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017884:	d101      	bne.n	801788a <create_chain+0xaa>
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	e03e      	b.n	8017908 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801788a:	69fa      	ldr	r2, [r7, #28]
 801788c:	69bb      	ldr	r3, [r7, #24]
 801788e:	429a      	cmp	r2, r3
 8017890:	d1da      	bne.n	8017848 <create_chain+0x68>
 8017892:	2300      	movs	r3, #0
 8017894:	e038      	b.n	8017908 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8017896:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8017898:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801789c:	69f9      	ldr	r1, [r7, #28]
 801789e:	6938      	ldr	r0, [r7, #16]
 80178a0:	f7ff fe4d 	bl	801753e <put_fat>
 80178a4:	4603      	mov	r3, r0
 80178a6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80178a8:	7dfb      	ldrb	r3, [r7, #23]
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d109      	bne.n	80178c2 <create_chain+0xe2>
 80178ae:	683b      	ldr	r3, [r7, #0]
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d006      	beq.n	80178c2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80178b4:	69fa      	ldr	r2, [r7, #28]
 80178b6:	6839      	ldr	r1, [r7, #0]
 80178b8:	6938      	ldr	r0, [r7, #16]
 80178ba:	f7ff fe40 	bl	801753e <put_fat>
 80178be:	4603      	mov	r3, r0
 80178c0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80178c2:	7dfb      	ldrb	r3, [r7, #23]
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d116      	bne.n	80178f6 <create_chain+0x116>
		fs->last_clst = ncl;
 80178c8:	693b      	ldr	r3, [r7, #16]
 80178ca:	69fa      	ldr	r2, [r7, #28]
 80178cc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80178ce:	693b      	ldr	r3, [r7, #16]
 80178d0:	691a      	ldr	r2, [r3, #16]
 80178d2:	693b      	ldr	r3, [r7, #16]
 80178d4:	695b      	ldr	r3, [r3, #20]
 80178d6:	3b02      	subs	r3, #2
 80178d8:	429a      	cmp	r2, r3
 80178da:	d804      	bhi.n	80178e6 <create_chain+0x106>
 80178dc:	693b      	ldr	r3, [r7, #16]
 80178de:	691b      	ldr	r3, [r3, #16]
 80178e0:	1e5a      	subs	r2, r3, #1
 80178e2:	693b      	ldr	r3, [r7, #16]
 80178e4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80178e6:	693b      	ldr	r3, [r7, #16]
 80178e8:	791b      	ldrb	r3, [r3, #4]
 80178ea:	f043 0301 	orr.w	r3, r3, #1
 80178ee:	b2da      	uxtb	r2, r3
 80178f0:	693b      	ldr	r3, [r7, #16]
 80178f2:	711a      	strb	r2, [r3, #4]
 80178f4:	e007      	b.n	8017906 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80178f6:	7dfb      	ldrb	r3, [r7, #23]
 80178f8:	2b01      	cmp	r3, #1
 80178fa:	d102      	bne.n	8017902 <create_chain+0x122>
 80178fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017900:	e000      	b.n	8017904 <create_chain+0x124>
 8017902:	2301      	movs	r3, #1
 8017904:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8017906:	69fb      	ldr	r3, [r7, #28]
}
 8017908:	4618      	mov	r0, r3
 801790a:	3720      	adds	r7, #32
 801790c:	46bd      	mov	sp, r7
 801790e:	bd80      	pop	{r7, pc}

08017910 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8017910:	b480      	push	{r7}
 8017912:	b087      	sub	sp, #28
 8017914:	af00      	add	r7, sp, #0
 8017916:	6078      	str	r0, [r7, #4]
 8017918:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017924:	3304      	adds	r3, #4
 8017926:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8017928:	683b      	ldr	r3, [r7, #0]
 801792a:	0a5b      	lsrs	r3, r3, #9
 801792c:	68fa      	ldr	r2, [r7, #12]
 801792e:	8952      	ldrh	r2, [r2, #10]
 8017930:	fbb3 f3f2 	udiv	r3, r3, r2
 8017934:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8017936:	693b      	ldr	r3, [r7, #16]
 8017938:	1d1a      	adds	r2, r3, #4
 801793a:	613a      	str	r2, [r7, #16]
 801793c:	681b      	ldr	r3, [r3, #0]
 801793e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8017940:	68bb      	ldr	r3, [r7, #8]
 8017942:	2b00      	cmp	r3, #0
 8017944:	d101      	bne.n	801794a <clmt_clust+0x3a>
 8017946:	2300      	movs	r3, #0
 8017948:	e010      	b.n	801796c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801794a:	697a      	ldr	r2, [r7, #20]
 801794c:	68bb      	ldr	r3, [r7, #8]
 801794e:	429a      	cmp	r2, r3
 8017950:	d307      	bcc.n	8017962 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8017952:	697a      	ldr	r2, [r7, #20]
 8017954:	68bb      	ldr	r3, [r7, #8]
 8017956:	1ad3      	subs	r3, r2, r3
 8017958:	617b      	str	r3, [r7, #20]
 801795a:	693b      	ldr	r3, [r7, #16]
 801795c:	3304      	adds	r3, #4
 801795e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8017960:	e7e9      	b.n	8017936 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8017962:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8017964:	693b      	ldr	r3, [r7, #16]
 8017966:	681a      	ldr	r2, [r3, #0]
 8017968:	697b      	ldr	r3, [r7, #20]
 801796a:	4413      	add	r3, r2
}
 801796c:	4618      	mov	r0, r3
 801796e:	371c      	adds	r7, #28
 8017970:	46bd      	mov	sp, r7
 8017972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017976:	4770      	bx	lr

08017978 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8017978:	b580      	push	{r7, lr}
 801797a:	b086      	sub	sp, #24
 801797c:	af00      	add	r7, sp, #0
 801797e:	6078      	str	r0, [r7, #4]
 8017980:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8017988:	683b      	ldr	r3, [r7, #0]
 801798a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801798e:	d204      	bcs.n	801799a <dir_sdi+0x22>
 8017990:	683b      	ldr	r3, [r7, #0]
 8017992:	f003 031f 	and.w	r3, r3, #31
 8017996:	2b00      	cmp	r3, #0
 8017998:	d001      	beq.n	801799e <dir_sdi+0x26>
		return FR_INT_ERR;
 801799a:	2302      	movs	r3, #2
 801799c:	e063      	b.n	8017a66 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	683a      	ldr	r2, [r7, #0]
 80179a2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	689b      	ldr	r3, [r3, #8]
 80179a8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80179aa:	697b      	ldr	r3, [r7, #20]
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d106      	bne.n	80179be <dir_sdi+0x46>
 80179b0:	693b      	ldr	r3, [r7, #16]
 80179b2:	781b      	ldrb	r3, [r3, #0]
 80179b4:	2b02      	cmp	r3, #2
 80179b6:	d902      	bls.n	80179be <dir_sdi+0x46>
		clst = fs->dirbase;
 80179b8:	693b      	ldr	r3, [r7, #16]
 80179ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179bc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80179be:	697b      	ldr	r3, [r7, #20]
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d10c      	bne.n	80179de <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80179c4:	683b      	ldr	r3, [r7, #0]
 80179c6:	095b      	lsrs	r3, r3, #5
 80179c8:	693a      	ldr	r2, [r7, #16]
 80179ca:	8912      	ldrh	r2, [r2, #8]
 80179cc:	4293      	cmp	r3, r2
 80179ce:	d301      	bcc.n	80179d4 <dir_sdi+0x5c>
 80179d0:	2302      	movs	r3, #2
 80179d2:	e048      	b.n	8017a66 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80179d4:	693b      	ldr	r3, [r7, #16]
 80179d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	61da      	str	r2, [r3, #28]
 80179dc:	e029      	b.n	8017a32 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80179de:	693b      	ldr	r3, [r7, #16]
 80179e0:	895b      	ldrh	r3, [r3, #10]
 80179e2:	025b      	lsls	r3, r3, #9
 80179e4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80179e6:	e019      	b.n	8017a1c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	6979      	ldr	r1, [r7, #20]
 80179ec:	4618      	mov	r0, r3
 80179ee:	f7ff fcfe 	bl	80173ee <get_fat>
 80179f2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80179f4:	697b      	ldr	r3, [r7, #20]
 80179f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80179fa:	d101      	bne.n	8017a00 <dir_sdi+0x88>
 80179fc:	2301      	movs	r3, #1
 80179fe:	e032      	b.n	8017a66 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8017a00:	697b      	ldr	r3, [r7, #20]
 8017a02:	2b01      	cmp	r3, #1
 8017a04:	d904      	bls.n	8017a10 <dir_sdi+0x98>
 8017a06:	693b      	ldr	r3, [r7, #16]
 8017a08:	695b      	ldr	r3, [r3, #20]
 8017a0a:	697a      	ldr	r2, [r7, #20]
 8017a0c:	429a      	cmp	r2, r3
 8017a0e:	d301      	bcc.n	8017a14 <dir_sdi+0x9c>
 8017a10:	2302      	movs	r3, #2
 8017a12:	e028      	b.n	8017a66 <dir_sdi+0xee>
			ofs -= csz;
 8017a14:	683a      	ldr	r2, [r7, #0]
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	1ad3      	subs	r3, r2, r3
 8017a1a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8017a1c:	683a      	ldr	r2, [r7, #0]
 8017a1e:	68fb      	ldr	r3, [r7, #12]
 8017a20:	429a      	cmp	r2, r3
 8017a22:	d2e1      	bcs.n	80179e8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8017a24:	6979      	ldr	r1, [r7, #20]
 8017a26:	6938      	ldr	r0, [r7, #16]
 8017a28:	f7ff fcc2 	bl	80173b0 <clust2sect>
 8017a2c:	4602      	mov	r2, r0
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	697a      	ldr	r2, [r7, #20]
 8017a36:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	69db      	ldr	r3, [r3, #28]
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	d101      	bne.n	8017a44 <dir_sdi+0xcc>
 8017a40:	2302      	movs	r3, #2
 8017a42:	e010      	b.n	8017a66 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	69da      	ldr	r2, [r3, #28]
 8017a48:	683b      	ldr	r3, [r7, #0]
 8017a4a:	0a5b      	lsrs	r3, r3, #9
 8017a4c:	441a      	add	r2, r3
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8017a52:	693b      	ldr	r3, [r7, #16]
 8017a54:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017a58:	683b      	ldr	r3, [r7, #0]
 8017a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017a5e:	441a      	add	r2, r3
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017a64:	2300      	movs	r3, #0
}
 8017a66:	4618      	mov	r0, r3
 8017a68:	3718      	adds	r7, #24
 8017a6a:	46bd      	mov	sp, r7
 8017a6c:	bd80      	pop	{r7, pc}

08017a6e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8017a6e:	b580      	push	{r7, lr}
 8017a70:	b086      	sub	sp, #24
 8017a72:	af00      	add	r7, sp, #0
 8017a74:	6078      	str	r0, [r7, #4]
 8017a76:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	695b      	ldr	r3, [r3, #20]
 8017a82:	3320      	adds	r3, #32
 8017a84:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	69db      	ldr	r3, [r3, #28]
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d003      	beq.n	8017a96 <dir_next+0x28>
 8017a8e:	68bb      	ldr	r3, [r7, #8]
 8017a90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8017a94:	d301      	bcc.n	8017a9a <dir_next+0x2c>
 8017a96:	2304      	movs	r3, #4
 8017a98:	e0aa      	b.n	8017bf0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8017a9a:	68bb      	ldr	r3, [r7, #8]
 8017a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	f040 8098 	bne.w	8017bd6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	69db      	ldr	r3, [r3, #28]
 8017aaa:	1c5a      	adds	r2, r3, #1
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	699b      	ldr	r3, [r3, #24]
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d10b      	bne.n	8017ad0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8017ab8:	68bb      	ldr	r3, [r7, #8]
 8017aba:	095b      	lsrs	r3, r3, #5
 8017abc:	68fa      	ldr	r2, [r7, #12]
 8017abe:	8912      	ldrh	r2, [r2, #8]
 8017ac0:	4293      	cmp	r3, r2
 8017ac2:	f0c0 8088 	bcc.w	8017bd6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	2200      	movs	r2, #0
 8017aca:	61da      	str	r2, [r3, #28]
 8017acc:	2304      	movs	r3, #4
 8017ace:	e08f      	b.n	8017bf0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8017ad0:	68bb      	ldr	r3, [r7, #8]
 8017ad2:	0a5b      	lsrs	r3, r3, #9
 8017ad4:	68fa      	ldr	r2, [r7, #12]
 8017ad6:	8952      	ldrh	r2, [r2, #10]
 8017ad8:	3a01      	subs	r2, #1
 8017ada:	4013      	ands	r3, r2
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d17a      	bne.n	8017bd6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8017ae0:	687a      	ldr	r2, [r7, #4]
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	699b      	ldr	r3, [r3, #24]
 8017ae6:	4619      	mov	r1, r3
 8017ae8:	4610      	mov	r0, r2
 8017aea:	f7ff fc80 	bl	80173ee <get_fat>
 8017aee:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8017af0:	697b      	ldr	r3, [r7, #20]
 8017af2:	2b01      	cmp	r3, #1
 8017af4:	d801      	bhi.n	8017afa <dir_next+0x8c>
 8017af6:	2302      	movs	r3, #2
 8017af8:	e07a      	b.n	8017bf0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8017afa:	697b      	ldr	r3, [r7, #20]
 8017afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017b00:	d101      	bne.n	8017b06 <dir_next+0x98>
 8017b02:	2301      	movs	r3, #1
 8017b04:	e074      	b.n	8017bf0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8017b06:	68fb      	ldr	r3, [r7, #12]
 8017b08:	695b      	ldr	r3, [r3, #20]
 8017b0a:	697a      	ldr	r2, [r7, #20]
 8017b0c:	429a      	cmp	r2, r3
 8017b0e:	d358      	bcc.n	8017bc2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8017b10:	683b      	ldr	r3, [r7, #0]
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d104      	bne.n	8017b20 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	2200      	movs	r2, #0
 8017b1a:	61da      	str	r2, [r3, #28]
 8017b1c:	2304      	movs	r3, #4
 8017b1e:	e067      	b.n	8017bf0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8017b20:	687a      	ldr	r2, [r7, #4]
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	699b      	ldr	r3, [r3, #24]
 8017b26:	4619      	mov	r1, r3
 8017b28:	4610      	mov	r0, r2
 8017b2a:	f7ff fe59 	bl	80177e0 <create_chain>
 8017b2e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8017b30:	697b      	ldr	r3, [r7, #20]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d101      	bne.n	8017b3a <dir_next+0xcc>
 8017b36:	2307      	movs	r3, #7
 8017b38:	e05a      	b.n	8017bf0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8017b3a:	697b      	ldr	r3, [r7, #20]
 8017b3c:	2b01      	cmp	r3, #1
 8017b3e:	d101      	bne.n	8017b44 <dir_next+0xd6>
 8017b40:	2302      	movs	r3, #2
 8017b42:	e055      	b.n	8017bf0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017b44:	697b      	ldr	r3, [r7, #20]
 8017b46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017b4a:	d101      	bne.n	8017b50 <dir_next+0xe2>
 8017b4c:	2301      	movs	r3, #1
 8017b4e:	e04f      	b.n	8017bf0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8017b50:	68f8      	ldr	r0, [r7, #12]
 8017b52:	f7ff fb4d 	bl	80171f0 <sync_window>
 8017b56:	4603      	mov	r3, r0
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	d001      	beq.n	8017b60 <dir_next+0xf2>
 8017b5c:	2301      	movs	r3, #1
 8017b5e:	e047      	b.n	8017bf0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8017b60:	68fb      	ldr	r3, [r7, #12]
 8017b62:	3330      	adds	r3, #48	; 0x30
 8017b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017b68:	2100      	movs	r1, #0
 8017b6a:	4618      	mov	r0, r3
 8017b6c:	f7ff f9b3 	bl	8016ed6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8017b70:	2300      	movs	r3, #0
 8017b72:	613b      	str	r3, [r7, #16]
 8017b74:	6979      	ldr	r1, [r7, #20]
 8017b76:	68f8      	ldr	r0, [r7, #12]
 8017b78:	f7ff fc1a 	bl	80173b0 <clust2sect>
 8017b7c:	4602      	mov	r2, r0
 8017b7e:	68fb      	ldr	r3, [r7, #12]
 8017b80:	62da      	str	r2, [r3, #44]	; 0x2c
 8017b82:	e012      	b.n	8017baa <dir_next+0x13c>
						fs->wflag = 1;
 8017b84:	68fb      	ldr	r3, [r7, #12]
 8017b86:	2201      	movs	r2, #1
 8017b88:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8017b8a:	68f8      	ldr	r0, [r7, #12]
 8017b8c:	f7ff fb30 	bl	80171f0 <sync_window>
 8017b90:	4603      	mov	r3, r0
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d001      	beq.n	8017b9a <dir_next+0x12c>
 8017b96:	2301      	movs	r3, #1
 8017b98:	e02a      	b.n	8017bf0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8017b9a:	693b      	ldr	r3, [r7, #16]
 8017b9c:	3301      	adds	r3, #1
 8017b9e:	613b      	str	r3, [r7, #16]
 8017ba0:	68fb      	ldr	r3, [r7, #12]
 8017ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ba4:	1c5a      	adds	r2, r3, #1
 8017ba6:	68fb      	ldr	r3, [r7, #12]
 8017ba8:	62da      	str	r2, [r3, #44]	; 0x2c
 8017baa:	68fb      	ldr	r3, [r7, #12]
 8017bac:	895b      	ldrh	r3, [r3, #10]
 8017bae:	461a      	mov	r2, r3
 8017bb0:	693b      	ldr	r3, [r7, #16]
 8017bb2:	4293      	cmp	r3, r2
 8017bb4:	d3e6      	bcc.n	8017b84 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8017bb6:	68fb      	ldr	r3, [r7, #12]
 8017bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017bba:	693b      	ldr	r3, [r7, #16]
 8017bbc:	1ad2      	subs	r2, r2, r3
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	697a      	ldr	r2, [r7, #20]
 8017bc6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8017bc8:	6979      	ldr	r1, [r7, #20]
 8017bca:	68f8      	ldr	r0, [r7, #12]
 8017bcc:	f7ff fbf0 	bl	80173b0 <clust2sect>
 8017bd0:	4602      	mov	r2, r0
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	68ba      	ldr	r2, [r7, #8]
 8017bda:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8017bdc:	68fb      	ldr	r3, [r7, #12]
 8017bde:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017be2:	68bb      	ldr	r3, [r7, #8]
 8017be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017be8:	441a      	add	r2, r3
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017bee:	2300      	movs	r3, #0
}
 8017bf0:	4618      	mov	r0, r3
 8017bf2:	3718      	adds	r7, #24
 8017bf4:	46bd      	mov	sp, r7
 8017bf6:	bd80      	pop	{r7, pc}

08017bf8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8017bf8:	b580      	push	{r7, lr}
 8017bfa:	b086      	sub	sp, #24
 8017bfc:	af00      	add	r7, sp, #0
 8017bfe:	6078      	str	r0, [r7, #4]
 8017c00:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	681b      	ldr	r3, [r3, #0]
 8017c06:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8017c08:	2100      	movs	r1, #0
 8017c0a:	6878      	ldr	r0, [r7, #4]
 8017c0c:	f7ff feb4 	bl	8017978 <dir_sdi>
 8017c10:	4603      	mov	r3, r0
 8017c12:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017c14:	7dfb      	ldrb	r3, [r7, #23]
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d12b      	bne.n	8017c72 <dir_alloc+0x7a>
		n = 0;
 8017c1a:	2300      	movs	r3, #0
 8017c1c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	69db      	ldr	r3, [r3, #28]
 8017c22:	4619      	mov	r1, r3
 8017c24:	68f8      	ldr	r0, [r7, #12]
 8017c26:	f7ff fb27 	bl	8017278 <move_window>
 8017c2a:	4603      	mov	r3, r0
 8017c2c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8017c2e:	7dfb      	ldrb	r3, [r7, #23]
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d11d      	bne.n	8017c70 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	6a1b      	ldr	r3, [r3, #32]
 8017c38:	781b      	ldrb	r3, [r3, #0]
 8017c3a:	2be5      	cmp	r3, #229	; 0xe5
 8017c3c:	d004      	beq.n	8017c48 <dir_alloc+0x50>
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	6a1b      	ldr	r3, [r3, #32]
 8017c42:	781b      	ldrb	r3, [r3, #0]
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	d107      	bne.n	8017c58 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8017c48:	693b      	ldr	r3, [r7, #16]
 8017c4a:	3301      	adds	r3, #1
 8017c4c:	613b      	str	r3, [r7, #16]
 8017c4e:	693a      	ldr	r2, [r7, #16]
 8017c50:	683b      	ldr	r3, [r7, #0]
 8017c52:	429a      	cmp	r2, r3
 8017c54:	d102      	bne.n	8017c5c <dir_alloc+0x64>
 8017c56:	e00c      	b.n	8017c72 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8017c58:	2300      	movs	r3, #0
 8017c5a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8017c5c:	2101      	movs	r1, #1
 8017c5e:	6878      	ldr	r0, [r7, #4]
 8017c60:	f7ff ff05 	bl	8017a6e <dir_next>
 8017c64:	4603      	mov	r3, r0
 8017c66:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8017c68:	7dfb      	ldrb	r3, [r7, #23]
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d0d7      	beq.n	8017c1e <dir_alloc+0x26>
 8017c6e:	e000      	b.n	8017c72 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8017c70:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8017c72:	7dfb      	ldrb	r3, [r7, #23]
 8017c74:	2b04      	cmp	r3, #4
 8017c76:	d101      	bne.n	8017c7c <dir_alloc+0x84>
 8017c78:	2307      	movs	r3, #7
 8017c7a:	75fb      	strb	r3, [r7, #23]
	return res;
 8017c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8017c7e:	4618      	mov	r0, r3
 8017c80:	3718      	adds	r7, #24
 8017c82:	46bd      	mov	sp, r7
 8017c84:	bd80      	pop	{r7, pc}

08017c86 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8017c86:	b580      	push	{r7, lr}
 8017c88:	b084      	sub	sp, #16
 8017c8a:	af00      	add	r7, sp, #0
 8017c8c:	6078      	str	r0, [r7, #4]
 8017c8e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8017c90:	683b      	ldr	r3, [r7, #0]
 8017c92:	331a      	adds	r3, #26
 8017c94:	4618      	mov	r0, r3
 8017c96:	f7ff f87b 	bl	8016d90 <ld_word>
 8017c9a:	4603      	mov	r3, r0
 8017c9c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	781b      	ldrb	r3, [r3, #0]
 8017ca2:	2b03      	cmp	r3, #3
 8017ca4:	d109      	bne.n	8017cba <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8017ca6:	683b      	ldr	r3, [r7, #0]
 8017ca8:	3314      	adds	r3, #20
 8017caa:	4618      	mov	r0, r3
 8017cac:	f7ff f870 	bl	8016d90 <ld_word>
 8017cb0:	4603      	mov	r3, r0
 8017cb2:	041b      	lsls	r3, r3, #16
 8017cb4:	68fa      	ldr	r2, [r7, #12]
 8017cb6:	4313      	orrs	r3, r2
 8017cb8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8017cba:	68fb      	ldr	r3, [r7, #12]
}
 8017cbc:	4618      	mov	r0, r3
 8017cbe:	3710      	adds	r7, #16
 8017cc0:	46bd      	mov	sp, r7
 8017cc2:	bd80      	pop	{r7, pc}

08017cc4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8017cc4:	b580      	push	{r7, lr}
 8017cc6:	b084      	sub	sp, #16
 8017cc8:	af00      	add	r7, sp, #0
 8017cca:	60f8      	str	r0, [r7, #12]
 8017ccc:	60b9      	str	r1, [r7, #8]
 8017cce:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8017cd0:	68bb      	ldr	r3, [r7, #8]
 8017cd2:	331a      	adds	r3, #26
 8017cd4:	687a      	ldr	r2, [r7, #4]
 8017cd6:	b292      	uxth	r2, r2
 8017cd8:	4611      	mov	r1, r2
 8017cda:	4618      	mov	r0, r3
 8017cdc:	f7ff f893 	bl	8016e06 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8017ce0:	68fb      	ldr	r3, [r7, #12]
 8017ce2:	781b      	ldrb	r3, [r3, #0]
 8017ce4:	2b03      	cmp	r3, #3
 8017ce6:	d109      	bne.n	8017cfc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8017ce8:	68bb      	ldr	r3, [r7, #8]
 8017cea:	f103 0214 	add.w	r2, r3, #20
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	0c1b      	lsrs	r3, r3, #16
 8017cf2:	b29b      	uxth	r3, r3
 8017cf4:	4619      	mov	r1, r3
 8017cf6:	4610      	mov	r0, r2
 8017cf8:	f7ff f885 	bl	8016e06 <st_word>
	}
}
 8017cfc:	bf00      	nop
 8017cfe:	3710      	adds	r7, #16
 8017d00:	46bd      	mov	sp, r7
 8017d02:	bd80      	pop	{r7, pc}

08017d04 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8017d04:	b580      	push	{r7, lr}
 8017d06:	b086      	sub	sp, #24
 8017d08:	af00      	add	r7, sp, #0
 8017d0a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	681b      	ldr	r3, [r3, #0]
 8017d10:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8017d12:	2100      	movs	r1, #0
 8017d14:	6878      	ldr	r0, [r7, #4]
 8017d16:	f7ff fe2f 	bl	8017978 <dir_sdi>
 8017d1a:	4603      	mov	r3, r0
 8017d1c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8017d1e:	7dfb      	ldrb	r3, [r7, #23]
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	d001      	beq.n	8017d28 <dir_find+0x24>
 8017d24:	7dfb      	ldrb	r3, [r7, #23]
 8017d26:	e03e      	b.n	8017da6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	69db      	ldr	r3, [r3, #28]
 8017d2c:	4619      	mov	r1, r3
 8017d2e:	6938      	ldr	r0, [r7, #16]
 8017d30:	f7ff faa2 	bl	8017278 <move_window>
 8017d34:	4603      	mov	r3, r0
 8017d36:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8017d38:	7dfb      	ldrb	r3, [r7, #23]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d12f      	bne.n	8017d9e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	6a1b      	ldr	r3, [r3, #32]
 8017d42:	781b      	ldrb	r3, [r3, #0]
 8017d44:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8017d46:	7bfb      	ldrb	r3, [r7, #15]
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d102      	bne.n	8017d52 <dir_find+0x4e>
 8017d4c:	2304      	movs	r3, #4
 8017d4e:	75fb      	strb	r3, [r7, #23]
 8017d50:	e028      	b.n	8017da4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	6a1b      	ldr	r3, [r3, #32]
 8017d56:	330b      	adds	r3, #11
 8017d58:	781b      	ldrb	r3, [r3, #0]
 8017d5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017d5e:	b2da      	uxtb	r2, r3
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	6a1b      	ldr	r3, [r3, #32]
 8017d68:	330b      	adds	r3, #11
 8017d6a:	781b      	ldrb	r3, [r3, #0]
 8017d6c:	f003 0308 	and.w	r3, r3, #8
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d10a      	bne.n	8017d8a <dir_find+0x86>
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	6a18      	ldr	r0, [r3, #32]
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	3324      	adds	r3, #36	; 0x24
 8017d7c:	220b      	movs	r2, #11
 8017d7e:	4619      	mov	r1, r3
 8017d80:	f7ff f8c4 	bl	8016f0c <mem_cmp>
 8017d84:	4603      	mov	r3, r0
 8017d86:	2b00      	cmp	r3, #0
 8017d88:	d00b      	beq.n	8017da2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8017d8a:	2100      	movs	r1, #0
 8017d8c:	6878      	ldr	r0, [r7, #4]
 8017d8e:	f7ff fe6e 	bl	8017a6e <dir_next>
 8017d92:	4603      	mov	r3, r0
 8017d94:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8017d96:	7dfb      	ldrb	r3, [r7, #23]
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	d0c5      	beq.n	8017d28 <dir_find+0x24>
 8017d9c:	e002      	b.n	8017da4 <dir_find+0xa0>
		if (res != FR_OK) break;
 8017d9e:	bf00      	nop
 8017da0:	e000      	b.n	8017da4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8017da2:	bf00      	nop

	return res;
 8017da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8017da6:	4618      	mov	r0, r3
 8017da8:	3718      	adds	r7, #24
 8017daa:	46bd      	mov	sp, r7
 8017dac:	bd80      	pop	{r7, pc}

08017dae <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8017dae:	b580      	push	{r7, lr}
 8017db0:	b084      	sub	sp, #16
 8017db2:	af00      	add	r7, sp, #0
 8017db4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	681b      	ldr	r3, [r3, #0]
 8017dba:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8017dbc:	2101      	movs	r1, #1
 8017dbe:	6878      	ldr	r0, [r7, #4]
 8017dc0:	f7ff ff1a 	bl	8017bf8 <dir_alloc>
 8017dc4:	4603      	mov	r3, r0
 8017dc6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8017dc8:	7bfb      	ldrb	r3, [r7, #15]
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d11c      	bne.n	8017e08 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	69db      	ldr	r3, [r3, #28]
 8017dd2:	4619      	mov	r1, r3
 8017dd4:	68b8      	ldr	r0, [r7, #8]
 8017dd6:	f7ff fa4f 	bl	8017278 <move_window>
 8017dda:	4603      	mov	r3, r0
 8017ddc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8017dde:	7bfb      	ldrb	r3, [r7, #15]
 8017de0:	2b00      	cmp	r3, #0
 8017de2:	d111      	bne.n	8017e08 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	6a1b      	ldr	r3, [r3, #32]
 8017de8:	2220      	movs	r2, #32
 8017dea:	2100      	movs	r1, #0
 8017dec:	4618      	mov	r0, r3
 8017dee:	f7ff f872 	bl	8016ed6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	6a18      	ldr	r0, [r3, #32]
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	3324      	adds	r3, #36	; 0x24
 8017dfa:	220b      	movs	r2, #11
 8017dfc:	4619      	mov	r1, r3
 8017dfe:	f7ff f849 	bl	8016e94 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8017e02:	68bb      	ldr	r3, [r7, #8]
 8017e04:	2201      	movs	r2, #1
 8017e06:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8017e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	3710      	adds	r7, #16
 8017e0e:	46bd      	mov	sp, r7
 8017e10:	bd80      	pop	{r7, pc}
	...

08017e14 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8017e14:	b580      	push	{r7, lr}
 8017e16:	b088      	sub	sp, #32
 8017e18:	af00      	add	r7, sp, #0
 8017e1a:	6078      	str	r0, [r7, #4]
 8017e1c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8017e1e:	683b      	ldr	r3, [r7, #0]
 8017e20:	681b      	ldr	r3, [r3, #0]
 8017e22:	60fb      	str	r3, [r7, #12]
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	3324      	adds	r3, #36	; 0x24
 8017e28:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8017e2a:	220b      	movs	r2, #11
 8017e2c:	2120      	movs	r1, #32
 8017e2e:	68b8      	ldr	r0, [r7, #8]
 8017e30:	f7ff f851 	bl	8016ed6 <mem_set>
	si = i = 0; ni = 8;
 8017e34:	2300      	movs	r3, #0
 8017e36:	613b      	str	r3, [r7, #16]
 8017e38:	693b      	ldr	r3, [r7, #16]
 8017e3a:	61fb      	str	r3, [r7, #28]
 8017e3c:	2308      	movs	r3, #8
 8017e3e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8017e40:	69fb      	ldr	r3, [r7, #28]
 8017e42:	1c5a      	adds	r2, r3, #1
 8017e44:	61fa      	str	r2, [r7, #28]
 8017e46:	68fa      	ldr	r2, [r7, #12]
 8017e48:	4413      	add	r3, r2
 8017e4a:	781b      	ldrb	r3, [r3, #0]
 8017e4c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8017e4e:	7efb      	ldrb	r3, [r7, #27]
 8017e50:	2b20      	cmp	r3, #32
 8017e52:	d94e      	bls.n	8017ef2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8017e54:	7efb      	ldrb	r3, [r7, #27]
 8017e56:	2b2f      	cmp	r3, #47	; 0x2f
 8017e58:	d006      	beq.n	8017e68 <create_name+0x54>
 8017e5a:	7efb      	ldrb	r3, [r7, #27]
 8017e5c:	2b5c      	cmp	r3, #92	; 0x5c
 8017e5e:	d110      	bne.n	8017e82 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8017e60:	e002      	b.n	8017e68 <create_name+0x54>
 8017e62:	69fb      	ldr	r3, [r7, #28]
 8017e64:	3301      	adds	r3, #1
 8017e66:	61fb      	str	r3, [r7, #28]
 8017e68:	68fa      	ldr	r2, [r7, #12]
 8017e6a:	69fb      	ldr	r3, [r7, #28]
 8017e6c:	4413      	add	r3, r2
 8017e6e:	781b      	ldrb	r3, [r3, #0]
 8017e70:	2b2f      	cmp	r3, #47	; 0x2f
 8017e72:	d0f6      	beq.n	8017e62 <create_name+0x4e>
 8017e74:	68fa      	ldr	r2, [r7, #12]
 8017e76:	69fb      	ldr	r3, [r7, #28]
 8017e78:	4413      	add	r3, r2
 8017e7a:	781b      	ldrb	r3, [r3, #0]
 8017e7c:	2b5c      	cmp	r3, #92	; 0x5c
 8017e7e:	d0f0      	beq.n	8017e62 <create_name+0x4e>
			break;
 8017e80:	e038      	b.n	8017ef4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8017e82:	7efb      	ldrb	r3, [r7, #27]
 8017e84:	2b2e      	cmp	r3, #46	; 0x2e
 8017e86:	d003      	beq.n	8017e90 <create_name+0x7c>
 8017e88:	693a      	ldr	r2, [r7, #16]
 8017e8a:	697b      	ldr	r3, [r7, #20]
 8017e8c:	429a      	cmp	r2, r3
 8017e8e:	d30c      	bcc.n	8017eaa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8017e90:	697b      	ldr	r3, [r7, #20]
 8017e92:	2b0b      	cmp	r3, #11
 8017e94:	d002      	beq.n	8017e9c <create_name+0x88>
 8017e96:	7efb      	ldrb	r3, [r7, #27]
 8017e98:	2b2e      	cmp	r3, #46	; 0x2e
 8017e9a:	d001      	beq.n	8017ea0 <create_name+0x8c>
 8017e9c:	2306      	movs	r3, #6
 8017e9e:	e044      	b.n	8017f2a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8017ea0:	2308      	movs	r3, #8
 8017ea2:	613b      	str	r3, [r7, #16]
 8017ea4:	230b      	movs	r3, #11
 8017ea6:	617b      	str	r3, [r7, #20]
			continue;
 8017ea8:	e022      	b.n	8017ef0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8017eaa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	da04      	bge.n	8017ebc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8017eb2:	7efb      	ldrb	r3, [r7, #27]
 8017eb4:	3b80      	subs	r3, #128	; 0x80
 8017eb6:	4a1f      	ldr	r2, [pc, #124]	; (8017f34 <create_name+0x120>)
 8017eb8:	5cd3      	ldrb	r3, [r2, r3]
 8017eba:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8017ebc:	7efb      	ldrb	r3, [r7, #27]
 8017ebe:	4619      	mov	r1, r3
 8017ec0:	481d      	ldr	r0, [pc, #116]	; (8017f38 <create_name+0x124>)
 8017ec2:	f7ff f84a 	bl	8016f5a <chk_chr>
 8017ec6:	4603      	mov	r3, r0
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d001      	beq.n	8017ed0 <create_name+0xbc>
 8017ecc:	2306      	movs	r3, #6
 8017ece:	e02c      	b.n	8017f2a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8017ed0:	7efb      	ldrb	r3, [r7, #27]
 8017ed2:	2b60      	cmp	r3, #96	; 0x60
 8017ed4:	d905      	bls.n	8017ee2 <create_name+0xce>
 8017ed6:	7efb      	ldrb	r3, [r7, #27]
 8017ed8:	2b7a      	cmp	r3, #122	; 0x7a
 8017eda:	d802      	bhi.n	8017ee2 <create_name+0xce>
 8017edc:	7efb      	ldrb	r3, [r7, #27]
 8017ede:	3b20      	subs	r3, #32
 8017ee0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8017ee2:	693b      	ldr	r3, [r7, #16]
 8017ee4:	1c5a      	adds	r2, r3, #1
 8017ee6:	613a      	str	r2, [r7, #16]
 8017ee8:	68ba      	ldr	r2, [r7, #8]
 8017eea:	4413      	add	r3, r2
 8017eec:	7efa      	ldrb	r2, [r7, #27]
 8017eee:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8017ef0:	e7a6      	b.n	8017e40 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8017ef2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8017ef4:	68fa      	ldr	r2, [r7, #12]
 8017ef6:	69fb      	ldr	r3, [r7, #28]
 8017ef8:	441a      	add	r2, r3
 8017efa:	683b      	ldr	r3, [r7, #0]
 8017efc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8017efe:	693b      	ldr	r3, [r7, #16]
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	d101      	bne.n	8017f08 <create_name+0xf4>
 8017f04:	2306      	movs	r3, #6
 8017f06:	e010      	b.n	8017f2a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8017f08:	68bb      	ldr	r3, [r7, #8]
 8017f0a:	781b      	ldrb	r3, [r3, #0]
 8017f0c:	2be5      	cmp	r3, #229	; 0xe5
 8017f0e:	d102      	bne.n	8017f16 <create_name+0x102>
 8017f10:	68bb      	ldr	r3, [r7, #8]
 8017f12:	2205      	movs	r2, #5
 8017f14:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8017f16:	7efb      	ldrb	r3, [r7, #27]
 8017f18:	2b20      	cmp	r3, #32
 8017f1a:	d801      	bhi.n	8017f20 <create_name+0x10c>
 8017f1c:	2204      	movs	r2, #4
 8017f1e:	e000      	b.n	8017f22 <create_name+0x10e>
 8017f20:	2200      	movs	r2, #0
 8017f22:	68bb      	ldr	r3, [r7, #8]
 8017f24:	330b      	adds	r3, #11
 8017f26:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8017f28:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8017f2a:	4618      	mov	r0, r3
 8017f2c:	3720      	adds	r7, #32
 8017f2e:	46bd      	mov	sp, r7
 8017f30:	bd80      	pop	{r7, pc}
 8017f32:	bf00      	nop
 8017f34:	0801d178 	.word	0x0801d178
 8017f38:	0801ce68 	.word	0x0801ce68

08017f3c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8017f3c:	b580      	push	{r7, lr}
 8017f3e:	b086      	sub	sp, #24
 8017f40:	af00      	add	r7, sp, #0
 8017f42:	6078      	str	r0, [r7, #4]
 8017f44:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8017f4a:	693b      	ldr	r3, [r7, #16]
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8017f50:	e002      	b.n	8017f58 <follow_path+0x1c>
 8017f52:	683b      	ldr	r3, [r7, #0]
 8017f54:	3301      	adds	r3, #1
 8017f56:	603b      	str	r3, [r7, #0]
 8017f58:	683b      	ldr	r3, [r7, #0]
 8017f5a:	781b      	ldrb	r3, [r3, #0]
 8017f5c:	2b2f      	cmp	r3, #47	; 0x2f
 8017f5e:	d0f8      	beq.n	8017f52 <follow_path+0x16>
 8017f60:	683b      	ldr	r3, [r7, #0]
 8017f62:	781b      	ldrb	r3, [r3, #0]
 8017f64:	2b5c      	cmp	r3, #92	; 0x5c
 8017f66:	d0f4      	beq.n	8017f52 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8017f68:	693b      	ldr	r3, [r7, #16]
 8017f6a:	2200      	movs	r2, #0
 8017f6c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8017f6e:	683b      	ldr	r3, [r7, #0]
 8017f70:	781b      	ldrb	r3, [r3, #0]
 8017f72:	2b1f      	cmp	r3, #31
 8017f74:	d80a      	bhi.n	8017f8c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	2280      	movs	r2, #128	; 0x80
 8017f7a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8017f7e:	2100      	movs	r1, #0
 8017f80:	6878      	ldr	r0, [r7, #4]
 8017f82:	f7ff fcf9 	bl	8017978 <dir_sdi>
 8017f86:	4603      	mov	r3, r0
 8017f88:	75fb      	strb	r3, [r7, #23]
 8017f8a:	e043      	b.n	8018014 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8017f8c:	463b      	mov	r3, r7
 8017f8e:	4619      	mov	r1, r3
 8017f90:	6878      	ldr	r0, [r7, #4]
 8017f92:	f7ff ff3f 	bl	8017e14 <create_name>
 8017f96:	4603      	mov	r3, r0
 8017f98:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8017f9a:	7dfb      	ldrb	r3, [r7, #23]
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d134      	bne.n	801800a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8017fa0:	6878      	ldr	r0, [r7, #4]
 8017fa2:	f7ff feaf 	bl	8017d04 <dir_find>
 8017fa6:	4603      	mov	r3, r0
 8017fa8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017fb0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8017fb2:	7dfb      	ldrb	r3, [r7, #23]
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d00a      	beq.n	8017fce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8017fb8:	7dfb      	ldrb	r3, [r7, #23]
 8017fba:	2b04      	cmp	r3, #4
 8017fbc:	d127      	bne.n	801800e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8017fbe:	7afb      	ldrb	r3, [r7, #11]
 8017fc0:	f003 0304 	and.w	r3, r3, #4
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d122      	bne.n	801800e <follow_path+0xd2>
 8017fc8:	2305      	movs	r3, #5
 8017fca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8017fcc:	e01f      	b.n	801800e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8017fce:	7afb      	ldrb	r3, [r7, #11]
 8017fd0:	f003 0304 	and.w	r3, r3, #4
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d11c      	bne.n	8018012 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8017fd8:	693b      	ldr	r3, [r7, #16]
 8017fda:	799b      	ldrb	r3, [r3, #6]
 8017fdc:	f003 0310 	and.w	r3, r3, #16
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d102      	bne.n	8017fea <follow_path+0xae>
				res = FR_NO_PATH; break;
 8017fe4:	2305      	movs	r3, #5
 8017fe6:	75fb      	strb	r3, [r7, #23]
 8017fe8:	e014      	b.n	8018014 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8017fea:	68fb      	ldr	r3, [r7, #12]
 8017fec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	695b      	ldr	r3, [r3, #20]
 8017ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017ff8:	4413      	add	r3, r2
 8017ffa:	4619      	mov	r1, r3
 8017ffc:	68f8      	ldr	r0, [r7, #12]
 8017ffe:	f7ff fe42 	bl	8017c86 <ld_clust>
 8018002:	4602      	mov	r2, r0
 8018004:	693b      	ldr	r3, [r7, #16]
 8018006:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8018008:	e7c0      	b.n	8017f8c <follow_path+0x50>
			if (res != FR_OK) break;
 801800a:	bf00      	nop
 801800c:	e002      	b.n	8018014 <follow_path+0xd8>
				break;
 801800e:	bf00      	nop
 8018010:	e000      	b.n	8018014 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8018012:	bf00      	nop
			}
		}
	}

	return res;
 8018014:	7dfb      	ldrb	r3, [r7, #23]
}
 8018016:	4618      	mov	r0, r3
 8018018:	3718      	adds	r7, #24
 801801a:	46bd      	mov	sp, r7
 801801c:	bd80      	pop	{r7, pc}

0801801e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801801e:	b480      	push	{r7}
 8018020:	b087      	sub	sp, #28
 8018022:	af00      	add	r7, sp, #0
 8018024:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8018026:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801802a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	681b      	ldr	r3, [r3, #0]
 8018030:	2b00      	cmp	r3, #0
 8018032:	d031      	beq.n	8018098 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	681b      	ldr	r3, [r3, #0]
 8018038:	617b      	str	r3, [r7, #20]
 801803a:	e002      	b.n	8018042 <get_ldnumber+0x24>
 801803c:	697b      	ldr	r3, [r7, #20]
 801803e:	3301      	adds	r3, #1
 8018040:	617b      	str	r3, [r7, #20]
 8018042:	697b      	ldr	r3, [r7, #20]
 8018044:	781b      	ldrb	r3, [r3, #0]
 8018046:	2b20      	cmp	r3, #32
 8018048:	d903      	bls.n	8018052 <get_ldnumber+0x34>
 801804a:	697b      	ldr	r3, [r7, #20]
 801804c:	781b      	ldrb	r3, [r3, #0]
 801804e:	2b3a      	cmp	r3, #58	; 0x3a
 8018050:	d1f4      	bne.n	801803c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8018052:	697b      	ldr	r3, [r7, #20]
 8018054:	781b      	ldrb	r3, [r3, #0]
 8018056:	2b3a      	cmp	r3, #58	; 0x3a
 8018058:	d11c      	bne.n	8018094 <get_ldnumber+0x76>
			tp = *path;
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	681b      	ldr	r3, [r3, #0]
 801805e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	1c5a      	adds	r2, r3, #1
 8018064:	60fa      	str	r2, [r7, #12]
 8018066:	781b      	ldrb	r3, [r3, #0]
 8018068:	3b30      	subs	r3, #48	; 0x30
 801806a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801806c:	68bb      	ldr	r3, [r7, #8]
 801806e:	2b09      	cmp	r3, #9
 8018070:	d80e      	bhi.n	8018090 <get_ldnumber+0x72>
 8018072:	68fa      	ldr	r2, [r7, #12]
 8018074:	697b      	ldr	r3, [r7, #20]
 8018076:	429a      	cmp	r2, r3
 8018078:	d10a      	bne.n	8018090 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801807a:	68bb      	ldr	r3, [r7, #8]
 801807c:	2b00      	cmp	r3, #0
 801807e:	d107      	bne.n	8018090 <get_ldnumber+0x72>
					vol = (int)i;
 8018080:	68bb      	ldr	r3, [r7, #8]
 8018082:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8018084:	697b      	ldr	r3, [r7, #20]
 8018086:	3301      	adds	r3, #1
 8018088:	617b      	str	r3, [r7, #20]
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	697a      	ldr	r2, [r7, #20]
 801808e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8018090:	693b      	ldr	r3, [r7, #16]
 8018092:	e002      	b.n	801809a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8018094:	2300      	movs	r3, #0
 8018096:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8018098:	693b      	ldr	r3, [r7, #16]
}
 801809a:	4618      	mov	r0, r3
 801809c:	371c      	adds	r7, #28
 801809e:	46bd      	mov	sp, r7
 80180a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180a4:	4770      	bx	lr
	...

080180a8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80180a8:	b580      	push	{r7, lr}
 80180aa:	b082      	sub	sp, #8
 80180ac:	af00      	add	r7, sp, #0
 80180ae:	6078      	str	r0, [r7, #4]
 80180b0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	2200      	movs	r2, #0
 80180b6:	70da      	strb	r2, [r3, #3]
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80180be:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80180c0:	6839      	ldr	r1, [r7, #0]
 80180c2:	6878      	ldr	r0, [r7, #4]
 80180c4:	f7ff f8d8 	bl	8017278 <move_window>
 80180c8:	4603      	mov	r3, r0
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d001      	beq.n	80180d2 <check_fs+0x2a>
 80180ce:	2304      	movs	r3, #4
 80180d0:	e038      	b.n	8018144 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	3330      	adds	r3, #48	; 0x30
 80180d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80180da:	4618      	mov	r0, r3
 80180dc:	f7fe fe58 	bl	8016d90 <ld_word>
 80180e0:	4603      	mov	r3, r0
 80180e2:	461a      	mov	r2, r3
 80180e4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80180e8:	429a      	cmp	r2, r3
 80180ea:	d001      	beq.n	80180f0 <check_fs+0x48>
 80180ec:	2303      	movs	r3, #3
 80180ee:	e029      	b.n	8018144 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80180f6:	2be9      	cmp	r3, #233	; 0xe9
 80180f8:	d009      	beq.n	801810e <check_fs+0x66>
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018100:	2beb      	cmp	r3, #235	; 0xeb
 8018102:	d11e      	bne.n	8018142 <check_fs+0x9a>
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801810a:	2b90      	cmp	r3, #144	; 0x90
 801810c:	d119      	bne.n	8018142 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	3330      	adds	r3, #48	; 0x30
 8018112:	3336      	adds	r3, #54	; 0x36
 8018114:	4618      	mov	r0, r3
 8018116:	f7fe fe53 	bl	8016dc0 <ld_dword>
 801811a:	4603      	mov	r3, r0
 801811c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8018120:	4a0a      	ldr	r2, [pc, #40]	; (801814c <check_fs+0xa4>)
 8018122:	4293      	cmp	r3, r2
 8018124:	d101      	bne.n	801812a <check_fs+0x82>
 8018126:	2300      	movs	r3, #0
 8018128:	e00c      	b.n	8018144 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	3330      	adds	r3, #48	; 0x30
 801812e:	3352      	adds	r3, #82	; 0x52
 8018130:	4618      	mov	r0, r3
 8018132:	f7fe fe45 	bl	8016dc0 <ld_dword>
 8018136:	4603      	mov	r3, r0
 8018138:	4a05      	ldr	r2, [pc, #20]	; (8018150 <check_fs+0xa8>)
 801813a:	4293      	cmp	r3, r2
 801813c:	d101      	bne.n	8018142 <check_fs+0x9a>
 801813e:	2300      	movs	r3, #0
 8018140:	e000      	b.n	8018144 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8018142:	2302      	movs	r3, #2
}
 8018144:	4618      	mov	r0, r3
 8018146:	3708      	adds	r7, #8
 8018148:	46bd      	mov	sp, r7
 801814a:	bd80      	pop	{r7, pc}
 801814c:	00544146 	.word	0x00544146
 8018150:	33544146 	.word	0x33544146

08018154 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8018154:	b580      	push	{r7, lr}
 8018156:	b096      	sub	sp, #88	; 0x58
 8018158:	af00      	add	r7, sp, #0
 801815a:	60f8      	str	r0, [r7, #12]
 801815c:	60b9      	str	r1, [r7, #8]
 801815e:	4613      	mov	r3, r2
 8018160:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8018162:	68bb      	ldr	r3, [r7, #8]
 8018164:	2200      	movs	r2, #0
 8018166:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8018168:	68f8      	ldr	r0, [r7, #12]
 801816a:	f7ff ff58 	bl	801801e <get_ldnumber>
 801816e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8018170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018172:	2b00      	cmp	r3, #0
 8018174:	da01      	bge.n	801817a <find_volume+0x26>
 8018176:	230b      	movs	r3, #11
 8018178:	e22d      	b.n	80185d6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801817a:	4aa1      	ldr	r2, [pc, #644]	; (8018400 <find_volume+0x2ac>)
 801817c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801817e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018182:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8018184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018186:	2b00      	cmp	r3, #0
 8018188:	d101      	bne.n	801818e <find_volume+0x3a>
 801818a:	230c      	movs	r3, #12
 801818c:	e223      	b.n	80185d6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801818e:	68bb      	ldr	r3, [r7, #8]
 8018190:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018192:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8018194:	79fb      	ldrb	r3, [r7, #7]
 8018196:	f023 0301 	bic.w	r3, r3, #1
 801819a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801819c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801819e:	781b      	ldrb	r3, [r3, #0]
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d01a      	beq.n	80181da <find_volume+0x86>
		stat = disk_status(fs->drv);
 80181a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181a6:	785b      	ldrb	r3, [r3, #1]
 80181a8:	4618      	mov	r0, r3
 80181aa:	f7fe fd53 	bl	8016c54 <disk_status>
 80181ae:	4603      	mov	r3, r0
 80181b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80181b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80181b8:	f003 0301 	and.w	r3, r3, #1
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d10c      	bne.n	80181da <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80181c0:	79fb      	ldrb	r3, [r7, #7]
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	d007      	beq.n	80181d6 <find_volume+0x82>
 80181c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80181ca:	f003 0304 	and.w	r3, r3, #4
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d001      	beq.n	80181d6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80181d2:	230a      	movs	r3, #10
 80181d4:	e1ff      	b.n	80185d6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80181d6:	2300      	movs	r3, #0
 80181d8:	e1fd      	b.n	80185d6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80181da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181dc:	2200      	movs	r2, #0
 80181de:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80181e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80181e2:	b2da      	uxtb	r2, r3
 80181e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181e6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80181e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181ea:	785b      	ldrb	r3, [r3, #1]
 80181ec:	4618      	mov	r0, r3
 80181ee:	f7fe fd4b 	bl	8016c88 <disk_initialize>
 80181f2:	4603      	mov	r3, r0
 80181f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80181f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80181fc:	f003 0301 	and.w	r3, r3, #1
 8018200:	2b00      	cmp	r3, #0
 8018202:	d001      	beq.n	8018208 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8018204:	2303      	movs	r3, #3
 8018206:	e1e6      	b.n	80185d6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8018208:	79fb      	ldrb	r3, [r7, #7]
 801820a:	2b00      	cmp	r3, #0
 801820c:	d007      	beq.n	801821e <find_volume+0xca>
 801820e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018212:	f003 0304 	and.w	r3, r3, #4
 8018216:	2b00      	cmp	r3, #0
 8018218:	d001      	beq.n	801821e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801821a:	230a      	movs	r3, #10
 801821c:	e1db      	b.n	80185d6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801821e:	2300      	movs	r3, #0
 8018220:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8018222:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018224:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018226:	f7ff ff3f 	bl	80180a8 <check_fs>
 801822a:	4603      	mov	r3, r0
 801822c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8018230:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018234:	2b02      	cmp	r3, #2
 8018236:	d149      	bne.n	80182cc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8018238:	2300      	movs	r3, #0
 801823a:	643b      	str	r3, [r7, #64]	; 0x40
 801823c:	e01e      	b.n	801827c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801823e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018240:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018246:	011b      	lsls	r3, r3, #4
 8018248:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801824c:	4413      	add	r3, r2
 801824e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8018250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018252:	3304      	adds	r3, #4
 8018254:	781b      	ldrb	r3, [r3, #0]
 8018256:	2b00      	cmp	r3, #0
 8018258:	d006      	beq.n	8018268 <find_volume+0x114>
 801825a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801825c:	3308      	adds	r3, #8
 801825e:	4618      	mov	r0, r3
 8018260:	f7fe fdae 	bl	8016dc0 <ld_dword>
 8018264:	4602      	mov	r2, r0
 8018266:	e000      	b.n	801826a <find_volume+0x116>
 8018268:	2200      	movs	r2, #0
 801826a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801826c:	009b      	lsls	r3, r3, #2
 801826e:	3358      	adds	r3, #88	; 0x58
 8018270:	443b      	add	r3, r7
 8018272:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8018276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018278:	3301      	adds	r3, #1
 801827a:	643b      	str	r3, [r7, #64]	; 0x40
 801827c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801827e:	2b03      	cmp	r3, #3
 8018280:	d9dd      	bls.n	801823e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8018282:	2300      	movs	r3, #0
 8018284:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8018286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018288:	2b00      	cmp	r3, #0
 801828a:	d002      	beq.n	8018292 <find_volume+0x13e>
 801828c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801828e:	3b01      	subs	r3, #1
 8018290:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8018292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018294:	009b      	lsls	r3, r3, #2
 8018296:	3358      	adds	r3, #88	; 0x58
 8018298:	443b      	add	r3, r7
 801829a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801829e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80182a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d005      	beq.n	80182b2 <find_volume+0x15e>
 80182a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80182a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80182aa:	f7ff fefd 	bl	80180a8 <check_fs>
 80182ae:	4603      	mov	r3, r0
 80182b0:	e000      	b.n	80182b4 <find_volume+0x160>
 80182b2:	2303      	movs	r3, #3
 80182b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80182b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80182bc:	2b01      	cmp	r3, #1
 80182be:	d905      	bls.n	80182cc <find_volume+0x178>
 80182c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80182c2:	3301      	adds	r3, #1
 80182c4:	643b      	str	r3, [r7, #64]	; 0x40
 80182c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80182c8:	2b03      	cmp	r3, #3
 80182ca:	d9e2      	bls.n	8018292 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80182cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80182d0:	2b04      	cmp	r3, #4
 80182d2:	d101      	bne.n	80182d8 <find_volume+0x184>
 80182d4:	2301      	movs	r3, #1
 80182d6:	e17e      	b.n	80185d6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80182d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80182dc:	2b01      	cmp	r3, #1
 80182de:	d901      	bls.n	80182e4 <find_volume+0x190>
 80182e0:	230d      	movs	r3, #13
 80182e2:	e178      	b.n	80185d6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80182e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182e6:	3330      	adds	r3, #48	; 0x30
 80182e8:	330b      	adds	r3, #11
 80182ea:	4618      	mov	r0, r3
 80182ec:	f7fe fd50 	bl	8016d90 <ld_word>
 80182f0:	4603      	mov	r3, r0
 80182f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80182f6:	d001      	beq.n	80182fc <find_volume+0x1a8>
 80182f8:	230d      	movs	r3, #13
 80182fa:	e16c      	b.n	80185d6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80182fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182fe:	3330      	adds	r3, #48	; 0x30
 8018300:	3316      	adds	r3, #22
 8018302:	4618      	mov	r0, r3
 8018304:	f7fe fd44 	bl	8016d90 <ld_word>
 8018308:	4603      	mov	r3, r0
 801830a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801830c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801830e:	2b00      	cmp	r3, #0
 8018310:	d106      	bne.n	8018320 <find_volume+0x1cc>
 8018312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018314:	3330      	adds	r3, #48	; 0x30
 8018316:	3324      	adds	r3, #36	; 0x24
 8018318:	4618      	mov	r0, r3
 801831a:	f7fe fd51 	bl	8016dc0 <ld_dword>
 801831e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8018320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018322:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018324:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8018326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018328:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 801832c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801832e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8018330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018332:	789b      	ldrb	r3, [r3, #2]
 8018334:	2b01      	cmp	r3, #1
 8018336:	d005      	beq.n	8018344 <find_volume+0x1f0>
 8018338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801833a:	789b      	ldrb	r3, [r3, #2]
 801833c:	2b02      	cmp	r3, #2
 801833e:	d001      	beq.n	8018344 <find_volume+0x1f0>
 8018340:	230d      	movs	r3, #13
 8018342:	e148      	b.n	80185d6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8018344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018346:	789b      	ldrb	r3, [r3, #2]
 8018348:	461a      	mov	r2, r3
 801834a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801834c:	fb02 f303 	mul.w	r3, r2, r3
 8018350:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8018352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018358:	b29a      	uxth	r2, r3
 801835a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801835c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801835e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018360:	895b      	ldrh	r3, [r3, #10]
 8018362:	2b00      	cmp	r3, #0
 8018364:	d008      	beq.n	8018378 <find_volume+0x224>
 8018366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018368:	895b      	ldrh	r3, [r3, #10]
 801836a:	461a      	mov	r2, r3
 801836c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801836e:	895b      	ldrh	r3, [r3, #10]
 8018370:	3b01      	subs	r3, #1
 8018372:	4013      	ands	r3, r2
 8018374:	2b00      	cmp	r3, #0
 8018376:	d001      	beq.n	801837c <find_volume+0x228>
 8018378:	230d      	movs	r3, #13
 801837a:	e12c      	b.n	80185d6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801837c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801837e:	3330      	adds	r3, #48	; 0x30
 8018380:	3311      	adds	r3, #17
 8018382:	4618      	mov	r0, r3
 8018384:	f7fe fd04 	bl	8016d90 <ld_word>
 8018388:	4603      	mov	r3, r0
 801838a:	461a      	mov	r2, r3
 801838c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801838e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8018390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018392:	891b      	ldrh	r3, [r3, #8]
 8018394:	f003 030f 	and.w	r3, r3, #15
 8018398:	b29b      	uxth	r3, r3
 801839a:	2b00      	cmp	r3, #0
 801839c:	d001      	beq.n	80183a2 <find_volume+0x24e>
 801839e:	230d      	movs	r3, #13
 80183a0:	e119      	b.n	80185d6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80183a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183a4:	3330      	adds	r3, #48	; 0x30
 80183a6:	3313      	adds	r3, #19
 80183a8:	4618      	mov	r0, r3
 80183aa:	f7fe fcf1 	bl	8016d90 <ld_word>
 80183ae:	4603      	mov	r3, r0
 80183b0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80183b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	d106      	bne.n	80183c6 <find_volume+0x272>
 80183b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183ba:	3330      	adds	r3, #48	; 0x30
 80183bc:	3320      	adds	r3, #32
 80183be:	4618      	mov	r0, r3
 80183c0:	f7fe fcfe 	bl	8016dc0 <ld_dword>
 80183c4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80183c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183c8:	3330      	adds	r3, #48	; 0x30
 80183ca:	330e      	adds	r3, #14
 80183cc:	4618      	mov	r0, r3
 80183ce:	f7fe fcdf 	bl	8016d90 <ld_word>
 80183d2:	4603      	mov	r3, r0
 80183d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80183d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d101      	bne.n	80183e0 <find_volume+0x28c>
 80183dc:	230d      	movs	r3, #13
 80183de:	e0fa      	b.n	80185d6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80183e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80183e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80183e4:	4413      	add	r3, r2
 80183e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80183e8:	8912      	ldrh	r2, [r2, #8]
 80183ea:	0912      	lsrs	r2, r2, #4
 80183ec:	b292      	uxth	r2, r2
 80183ee:	4413      	add	r3, r2
 80183f0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80183f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80183f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183f6:	429a      	cmp	r2, r3
 80183f8:	d204      	bcs.n	8018404 <find_volume+0x2b0>
 80183fa:	230d      	movs	r3, #13
 80183fc:	e0eb      	b.n	80185d6 <find_volume+0x482>
 80183fe:	bf00      	nop
 8018400:	2000137c 	.word	0x2000137c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8018404:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018408:	1ad3      	subs	r3, r2, r3
 801840a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801840c:	8952      	ldrh	r2, [r2, #10]
 801840e:	fbb3 f3f2 	udiv	r3, r3, r2
 8018412:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8018414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018416:	2b00      	cmp	r3, #0
 8018418:	d101      	bne.n	801841e <find_volume+0x2ca>
 801841a:	230d      	movs	r3, #13
 801841c:	e0db      	b.n	80185d6 <find_volume+0x482>
		fmt = FS_FAT32;
 801841e:	2303      	movs	r3, #3
 8018420:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8018424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018426:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801842a:	4293      	cmp	r3, r2
 801842c:	d802      	bhi.n	8018434 <find_volume+0x2e0>
 801842e:	2302      	movs	r3, #2
 8018430:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8018434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018436:	f640 72f5 	movw	r2, #4085	; 0xff5
 801843a:	4293      	cmp	r3, r2
 801843c:	d802      	bhi.n	8018444 <find_volume+0x2f0>
 801843e:	2301      	movs	r3, #1
 8018440:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8018444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018446:	1c9a      	adds	r2, r3, #2
 8018448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801844a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 801844c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801844e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018450:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8018452:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8018454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018456:	441a      	add	r2, r3
 8018458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801845a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 801845c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801845e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018460:	441a      	add	r2, r3
 8018462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018464:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8018466:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801846a:	2b03      	cmp	r3, #3
 801846c:	d11e      	bne.n	80184ac <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801846e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018470:	3330      	adds	r3, #48	; 0x30
 8018472:	332a      	adds	r3, #42	; 0x2a
 8018474:	4618      	mov	r0, r3
 8018476:	f7fe fc8b 	bl	8016d90 <ld_word>
 801847a:	4603      	mov	r3, r0
 801847c:	2b00      	cmp	r3, #0
 801847e:	d001      	beq.n	8018484 <find_volume+0x330>
 8018480:	230d      	movs	r3, #13
 8018482:	e0a8      	b.n	80185d6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8018484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018486:	891b      	ldrh	r3, [r3, #8]
 8018488:	2b00      	cmp	r3, #0
 801848a:	d001      	beq.n	8018490 <find_volume+0x33c>
 801848c:	230d      	movs	r3, #13
 801848e:	e0a2      	b.n	80185d6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8018490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018492:	3330      	adds	r3, #48	; 0x30
 8018494:	332c      	adds	r3, #44	; 0x2c
 8018496:	4618      	mov	r0, r3
 8018498:	f7fe fc92 	bl	8016dc0 <ld_dword>
 801849c:	4602      	mov	r2, r0
 801849e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184a0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80184a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184a4:	695b      	ldr	r3, [r3, #20]
 80184a6:	009b      	lsls	r3, r3, #2
 80184a8:	647b      	str	r3, [r7, #68]	; 0x44
 80184aa:	e01f      	b.n	80184ec <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80184ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184ae:	891b      	ldrh	r3, [r3, #8]
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	d101      	bne.n	80184b8 <find_volume+0x364>
 80184b4:	230d      	movs	r3, #13
 80184b6:	e08e      	b.n	80185d6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80184b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184ba:	6a1a      	ldr	r2, [r3, #32]
 80184bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80184be:	441a      	add	r2, r3
 80184c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184c2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80184c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80184c8:	2b02      	cmp	r3, #2
 80184ca:	d103      	bne.n	80184d4 <find_volume+0x380>
 80184cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184ce:	695b      	ldr	r3, [r3, #20]
 80184d0:	005b      	lsls	r3, r3, #1
 80184d2:	e00a      	b.n	80184ea <find_volume+0x396>
 80184d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184d6:	695a      	ldr	r2, [r3, #20]
 80184d8:	4613      	mov	r3, r2
 80184da:	005b      	lsls	r3, r3, #1
 80184dc:	4413      	add	r3, r2
 80184de:	085a      	lsrs	r2, r3, #1
 80184e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184e2:	695b      	ldr	r3, [r3, #20]
 80184e4:	f003 0301 	and.w	r3, r3, #1
 80184e8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80184ea:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80184ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184ee:	699a      	ldr	r2, [r3, #24]
 80184f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80184f2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80184f6:	0a5b      	lsrs	r3, r3, #9
 80184f8:	429a      	cmp	r2, r3
 80184fa:	d201      	bcs.n	8018500 <find_volume+0x3ac>
 80184fc:	230d      	movs	r3, #13
 80184fe:	e06a      	b.n	80185d6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8018500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018502:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018506:	611a      	str	r2, [r3, #16]
 8018508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801850a:	691a      	ldr	r2, [r3, #16]
 801850c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801850e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8018510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018512:	2280      	movs	r2, #128	; 0x80
 8018514:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8018516:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801851a:	2b03      	cmp	r3, #3
 801851c:	d149      	bne.n	80185b2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801851e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018520:	3330      	adds	r3, #48	; 0x30
 8018522:	3330      	adds	r3, #48	; 0x30
 8018524:	4618      	mov	r0, r3
 8018526:	f7fe fc33 	bl	8016d90 <ld_word>
 801852a:	4603      	mov	r3, r0
 801852c:	2b01      	cmp	r3, #1
 801852e:	d140      	bne.n	80185b2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8018530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018532:	3301      	adds	r3, #1
 8018534:	4619      	mov	r1, r3
 8018536:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018538:	f7fe fe9e 	bl	8017278 <move_window>
 801853c:	4603      	mov	r3, r0
 801853e:	2b00      	cmp	r3, #0
 8018540:	d137      	bne.n	80185b2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8018542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018544:	2200      	movs	r2, #0
 8018546:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8018548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801854a:	3330      	adds	r3, #48	; 0x30
 801854c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8018550:	4618      	mov	r0, r3
 8018552:	f7fe fc1d 	bl	8016d90 <ld_word>
 8018556:	4603      	mov	r3, r0
 8018558:	461a      	mov	r2, r3
 801855a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801855e:	429a      	cmp	r2, r3
 8018560:	d127      	bne.n	80185b2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8018562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018564:	3330      	adds	r3, #48	; 0x30
 8018566:	4618      	mov	r0, r3
 8018568:	f7fe fc2a 	bl	8016dc0 <ld_dword>
 801856c:	4603      	mov	r3, r0
 801856e:	4a1c      	ldr	r2, [pc, #112]	; (80185e0 <find_volume+0x48c>)
 8018570:	4293      	cmp	r3, r2
 8018572:	d11e      	bne.n	80185b2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8018574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018576:	3330      	adds	r3, #48	; 0x30
 8018578:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801857c:	4618      	mov	r0, r3
 801857e:	f7fe fc1f 	bl	8016dc0 <ld_dword>
 8018582:	4603      	mov	r3, r0
 8018584:	4a17      	ldr	r2, [pc, #92]	; (80185e4 <find_volume+0x490>)
 8018586:	4293      	cmp	r3, r2
 8018588:	d113      	bne.n	80185b2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801858a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801858c:	3330      	adds	r3, #48	; 0x30
 801858e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8018592:	4618      	mov	r0, r3
 8018594:	f7fe fc14 	bl	8016dc0 <ld_dword>
 8018598:	4602      	mov	r2, r0
 801859a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801859c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801859e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185a0:	3330      	adds	r3, #48	; 0x30
 80185a2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80185a6:	4618      	mov	r0, r3
 80185a8:	f7fe fc0a 	bl	8016dc0 <ld_dword>
 80185ac:	4602      	mov	r2, r0
 80185ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185b0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80185b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185b4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80185b8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80185ba:	4b0b      	ldr	r3, [pc, #44]	; (80185e8 <find_volume+0x494>)
 80185bc:	881b      	ldrh	r3, [r3, #0]
 80185be:	3301      	adds	r3, #1
 80185c0:	b29a      	uxth	r2, r3
 80185c2:	4b09      	ldr	r3, [pc, #36]	; (80185e8 <find_volume+0x494>)
 80185c4:	801a      	strh	r2, [r3, #0]
 80185c6:	4b08      	ldr	r3, [pc, #32]	; (80185e8 <find_volume+0x494>)
 80185c8:	881a      	ldrh	r2, [r3, #0]
 80185ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185cc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80185ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80185d0:	f7fe fdea 	bl	80171a8 <clear_lock>
#endif
	return FR_OK;
 80185d4:	2300      	movs	r3, #0
}
 80185d6:	4618      	mov	r0, r3
 80185d8:	3758      	adds	r7, #88	; 0x58
 80185da:	46bd      	mov	sp, r7
 80185dc:	bd80      	pop	{r7, pc}
 80185de:	bf00      	nop
 80185e0:	41615252 	.word	0x41615252
 80185e4:	61417272 	.word	0x61417272
 80185e8:	20001380 	.word	0x20001380

080185ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80185ec:	b580      	push	{r7, lr}
 80185ee:	b084      	sub	sp, #16
 80185f0:	af00      	add	r7, sp, #0
 80185f2:	6078      	str	r0, [r7, #4]
 80185f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80185f6:	2309      	movs	r3, #9
 80185f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d01c      	beq.n	801863a <validate+0x4e>
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	681b      	ldr	r3, [r3, #0]
 8018604:	2b00      	cmp	r3, #0
 8018606:	d018      	beq.n	801863a <validate+0x4e>
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	681b      	ldr	r3, [r3, #0]
 801860c:	781b      	ldrb	r3, [r3, #0]
 801860e:	2b00      	cmp	r3, #0
 8018610:	d013      	beq.n	801863a <validate+0x4e>
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	889a      	ldrh	r2, [r3, #4]
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	681b      	ldr	r3, [r3, #0]
 801861a:	88db      	ldrh	r3, [r3, #6]
 801861c:	429a      	cmp	r2, r3
 801861e:	d10c      	bne.n	801863a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	785b      	ldrb	r3, [r3, #1]
 8018626:	4618      	mov	r0, r3
 8018628:	f7fe fb14 	bl	8016c54 <disk_status>
 801862c:	4603      	mov	r3, r0
 801862e:	f003 0301 	and.w	r3, r3, #1
 8018632:	2b00      	cmp	r3, #0
 8018634:	d101      	bne.n	801863a <validate+0x4e>
			res = FR_OK;
 8018636:	2300      	movs	r3, #0
 8018638:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801863a:	7bfb      	ldrb	r3, [r7, #15]
 801863c:	2b00      	cmp	r3, #0
 801863e:	d102      	bne.n	8018646 <validate+0x5a>
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	681b      	ldr	r3, [r3, #0]
 8018644:	e000      	b.n	8018648 <validate+0x5c>
 8018646:	2300      	movs	r3, #0
 8018648:	683a      	ldr	r2, [r7, #0]
 801864a:	6013      	str	r3, [r2, #0]
	return res;
 801864c:	7bfb      	ldrb	r3, [r7, #15]
}
 801864e:	4618      	mov	r0, r3
 8018650:	3710      	adds	r7, #16
 8018652:	46bd      	mov	sp, r7
 8018654:	bd80      	pop	{r7, pc}
	...

08018658 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8018658:	b580      	push	{r7, lr}
 801865a:	b088      	sub	sp, #32
 801865c:	af00      	add	r7, sp, #0
 801865e:	60f8      	str	r0, [r7, #12]
 8018660:	60b9      	str	r1, [r7, #8]
 8018662:	4613      	mov	r3, r2
 8018664:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8018666:	68bb      	ldr	r3, [r7, #8]
 8018668:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801866a:	f107 0310 	add.w	r3, r7, #16
 801866e:	4618      	mov	r0, r3
 8018670:	f7ff fcd5 	bl	801801e <get_ldnumber>
 8018674:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8018676:	69fb      	ldr	r3, [r7, #28]
 8018678:	2b00      	cmp	r3, #0
 801867a:	da01      	bge.n	8018680 <f_mount+0x28>
 801867c:	230b      	movs	r3, #11
 801867e:	e02b      	b.n	80186d8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8018680:	4a17      	ldr	r2, [pc, #92]	; (80186e0 <f_mount+0x88>)
 8018682:	69fb      	ldr	r3, [r7, #28]
 8018684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018688:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801868a:	69bb      	ldr	r3, [r7, #24]
 801868c:	2b00      	cmp	r3, #0
 801868e:	d005      	beq.n	801869c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8018690:	69b8      	ldr	r0, [r7, #24]
 8018692:	f7fe fd89 	bl	80171a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8018696:	69bb      	ldr	r3, [r7, #24]
 8018698:	2200      	movs	r2, #0
 801869a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801869c:	68fb      	ldr	r3, [r7, #12]
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d002      	beq.n	80186a8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80186a2:	68fb      	ldr	r3, [r7, #12]
 80186a4:	2200      	movs	r2, #0
 80186a6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80186a8:	68fa      	ldr	r2, [r7, #12]
 80186aa:	490d      	ldr	r1, [pc, #52]	; (80186e0 <f_mount+0x88>)
 80186ac:	69fb      	ldr	r3, [r7, #28]
 80186ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80186b2:	68fb      	ldr	r3, [r7, #12]
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	d002      	beq.n	80186be <f_mount+0x66>
 80186b8:	79fb      	ldrb	r3, [r7, #7]
 80186ba:	2b01      	cmp	r3, #1
 80186bc:	d001      	beq.n	80186c2 <f_mount+0x6a>
 80186be:	2300      	movs	r3, #0
 80186c0:	e00a      	b.n	80186d8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80186c2:	f107 010c 	add.w	r1, r7, #12
 80186c6:	f107 0308 	add.w	r3, r7, #8
 80186ca:	2200      	movs	r2, #0
 80186cc:	4618      	mov	r0, r3
 80186ce:	f7ff fd41 	bl	8018154 <find_volume>
 80186d2:	4603      	mov	r3, r0
 80186d4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80186d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80186d8:	4618      	mov	r0, r3
 80186da:	3720      	adds	r7, #32
 80186dc:	46bd      	mov	sp, r7
 80186de:	bd80      	pop	{r7, pc}
 80186e0:	2000137c 	.word	0x2000137c

080186e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80186e4:	b580      	push	{r7, lr}
 80186e6:	b09a      	sub	sp, #104	; 0x68
 80186e8:	af00      	add	r7, sp, #0
 80186ea:	60f8      	str	r0, [r7, #12]
 80186ec:	60b9      	str	r1, [r7, #8]
 80186ee:	4613      	mov	r3, r2
 80186f0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80186f2:	68fb      	ldr	r3, [r7, #12]
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d101      	bne.n	80186fc <f_open+0x18>
 80186f8:	2309      	movs	r3, #9
 80186fa:	e1ad      	b.n	8018a58 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80186fc:	79fb      	ldrb	r3, [r7, #7]
 80186fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018702:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8018704:	79fa      	ldrb	r2, [r7, #7]
 8018706:	f107 0114 	add.w	r1, r7, #20
 801870a:	f107 0308 	add.w	r3, r7, #8
 801870e:	4618      	mov	r0, r3
 8018710:	f7ff fd20 	bl	8018154 <find_volume>
 8018714:	4603      	mov	r3, r0
 8018716:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 801871a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801871e:	2b00      	cmp	r3, #0
 8018720:	f040 8191 	bne.w	8018a46 <f_open+0x362>
		dj.obj.fs = fs;
 8018724:	697b      	ldr	r3, [r7, #20]
 8018726:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8018728:	68ba      	ldr	r2, [r7, #8]
 801872a:	f107 0318 	add.w	r3, r7, #24
 801872e:	4611      	mov	r1, r2
 8018730:	4618      	mov	r0, r3
 8018732:	f7ff fc03 	bl	8017f3c <follow_path>
 8018736:	4603      	mov	r3, r0
 8018738:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801873c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018740:	2b00      	cmp	r3, #0
 8018742:	d11a      	bne.n	801877a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8018744:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018748:	b25b      	sxtb	r3, r3
 801874a:	2b00      	cmp	r3, #0
 801874c:	da03      	bge.n	8018756 <f_open+0x72>
				res = FR_INVALID_NAME;
 801874e:	2306      	movs	r3, #6
 8018750:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8018754:	e011      	b.n	801877a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8018756:	79fb      	ldrb	r3, [r7, #7]
 8018758:	f023 0301 	bic.w	r3, r3, #1
 801875c:	2b00      	cmp	r3, #0
 801875e:	bf14      	ite	ne
 8018760:	2301      	movne	r3, #1
 8018762:	2300      	moveq	r3, #0
 8018764:	b2db      	uxtb	r3, r3
 8018766:	461a      	mov	r2, r3
 8018768:	f107 0318 	add.w	r3, r7, #24
 801876c:	4611      	mov	r1, r2
 801876e:	4618      	mov	r0, r3
 8018770:	f7fe fc0e 	bl	8016f90 <chk_lock>
 8018774:	4603      	mov	r3, r0
 8018776:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801877a:	79fb      	ldrb	r3, [r7, #7]
 801877c:	f003 031c 	and.w	r3, r3, #28
 8018780:	2b00      	cmp	r3, #0
 8018782:	d07f      	beq.n	8018884 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8018784:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018788:	2b00      	cmp	r3, #0
 801878a:	d017      	beq.n	80187bc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801878c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018790:	2b04      	cmp	r3, #4
 8018792:	d10e      	bne.n	80187b2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8018794:	f7fe fc58 	bl	8017048 <enq_lock>
 8018798:	4603      	mov	r3, r0
 801879a:	2b00      	cmp	r3, #0
 801879c:	d006      	beq.n	80187ac <f_open+0xc8>
 801879e:	f107 0318 	add.w	r3, r7, #24
 80187a2:	4618      	mov	r0, r3
 80187a4:	f7ff fb03 	bl	8017dae <dir_register>
 80187a8:	4603      	mov	r3, r0
 80187aa:	e000      	b.n	80187ae <f_open+0xca>
 80187ac:	2312      	movs	r3, #18
 80187ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80187b2:	79fb      	ldrb	r3, [r7, #7]
 80187b4:	f043 0308 	orr.w	r3, r3, #8
 80187b8:	71fb      	strb	r3, [r7, #7]
 80187ba:	e010      	b.n	80187de <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80187bc:	7fbb      	ldrb	r3, [r7, #30]
 80187be:	f003 0311 	and.w	r3, r3, #17
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d003      	beq.n	80187ce <f_open+0xea>
					res = FR_DENIED;
 80187c6:	2307      	movs	r3, #7
 80187c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80187cc:	e007      	b.n	80187de <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80187ce:	79fb      	ldrb	r3, [r7, #7]
 80187d0:	f003 0304 	and.w	r3, r3, #4
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d002      	beq.n	80187de <f_open+0xfa>
 80187d8:	2308      	movs	r3, #8
 80187da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80187de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d168      	bne.n	80188b8 <f_open+0x1d4>
 80187e6:	79fb      	ldrb	r3, [r7, #7]
 80187e8:	f003 0308 	and.w	r3, r3, #8
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d063      	beq.n	80188b8 <f_open+0x1d4>
				dw = GET_FATTIME();
 80187f0:	f7fc f82c 	bl	801484c <get_fattime>
 80187f4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80187f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187f8:	330e      	adds	r3, #14
 80187fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80187fc:	4618      	mov	r0, r3
 80187fe:	f7fe fb1d 	bl	8016e3c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8018802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018804:	3316      	adds	r3, #22
 8018806:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018808:	4618      	mov	r0, r3
 801880a:	f7fe fb17 	bl	8016e3c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801880e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018810:	330b      	adds	r3, #11
 8018812:	2220      	movs	r2, #32
 8018814:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8018816:	697b      	ldr	r3, [r7, #20]
 8018818:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801881a:	4611      	mov	r1, r2
 801881c:	4618      	mov	r0, r3
 801881e:	f7ff fa32 	bl	8017c86 <ld_clust>
 8018822:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8018824:	697b      	ldr	r3, [r7, #20]
 8018826:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018828:	2200      	movs	r2, #0
 801882a:	4618      	mov	r0, r3
 801882c:	f7ff fa4a 	bl	8017cc4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8018830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018832:	331c      	adds	r3, #28
 8018834:	2100      	movs	r1, #0
 8018836:	4618      	mov	r0, r3
 8018838:	f7fe fb00 	bl	8016e3c <st_dword>
					fs->wflag = 1;
 801883c:	697b      	ldr	r3, [r7, #20]
 801883e:	2201      	movs	r2, #1
 8018840:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8018842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018844:	2b00      	cmp	r3, #0
 8018846:	d037      	beq.n	80188b8 <f_open+0x1d4>
						dw = fs->winsect;
 8018848:	697b      	ldr	r3, [r7, #20]
 801884a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801884c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801884e:	f107 0318 	add.w	r3, r7, #24
 8018852:	2200      	movs	r2, #0
 8018854:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8018856:	4618      	mov	r0, r3
 8018858:	f7fe ff5d 	bl	8017716 <remove_chain>
 801885c:	4603      	mov	r3, r0
 801885e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8018862:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018866:	2b00      	cmp	r3, #0
 8018868:	d126      	bne.n	80188b8 <f_open+0x1d4>
							res = move_window(fs, dw);
 801886a:	697b      	ldr	r3, [r7, #20]
 801886c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801886e:	4618      	mov	r0, r3
 8018870:	f7fe fd02 	bl	8017278 <move_window>
 8018874:	4603      	mov	r3, r0
 8018876:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801887a:	697b      	ldr	r3, [r7, #20]
 801887c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801887e:	3a01      	subs	r2, #1
 8018880:	60da      	str	r2, [r3, #12]
 8018882:	e019      	b.n	80188b8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8018884:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018888:	2b00      	cmp	r3, #0
 801888a:	d115      	bne.n	80188b8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801888c:	7fbb      	ldrb	r3, [r7, #30]
 801888e:	f003 0310 	and.w	r3, r3, #16
 8018892:	2b00      	cmp	r3, #0
 8018894:	d003      	beq.n	801889e <f_open+0x1ba>
					res = FR_NO_FILE;
 8018896:	2304      	movs	r3, #4
 8018898:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801889c:	e00c      	b.n	80188b8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801889e:	79fb      	ldrb	r3, [r7, #7]
 80188a0:	f003 0302 	and.w	r3, r3, #2
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d007      	beq.n	80188b8 <f_open+0x1d4>
 80188a8:	7fbb      	ldrb	r3, [r7, #30]
 80188aa:	f003 0301 	and.w	r3, r3, #1
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d002      	beq.n	80188b8 <f_open+0x1d4>
						res = FR_DENIED;
 80188b2:	2307      	movs	r3, #7
 80188b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80188b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d128      	bne.n	8018912 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80188c0:	79fb      	ldrb	r3, [r7, #7]
 80188c2:	f003 0308 	and.w	r3, r3, #8
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d003      	beq.n	80188d2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80188ca:	79fb      	ldrb	r3, [r7, #7]
 80188cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80188d0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80188d2:	697b      	ldr	r3, [r7, #20]
 80188d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188d6:	68fb      	ldr	r3, [r7, #12]
 80188d8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80188da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80188dc:	68fb      	ldr	r3, [r7, #12]
 80188de:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80188e0:	79fb      	ldrb	r3, [r7, #7]
 80188e2:	f023 0301 	bic.w	r3, r3, #1
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	bf14      	ite	ne
 80188ea:	2301      	movne	r3, #1
 80188ec:	2300      	moveq	r3, #0
 80188ee:	b2db      	uxtb	r3, r3
 80188f0:	461a      	mov	r2, r3
 80188f2:	f107 0318 	add.w	r3, r7, #24
 80188f6:	4611      	mov	r1, r2
 80188f8:	4618      	mov	r0, r3
 80188fa:	f7fe fbc7 	bl	801708c <inc_lock>
 80188fe:	4602      	mov	r2, r0
 8018900:	68fb      	ldr	r3, [r7, #12]
 8018902:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8018904:	68fb      	ldr	r3, [r7, #12]
 8018906:	691b      	ldr	r3, [r3, #16]
 8018908:	2b00      	cmp	r3, #0
 801890a:	d102      	bne.n	8018912 <f_open+0x22e>
 801890c:	2302      	movs	r3, #2
 801890e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8018912:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018916:	2b00      	cmp	r3, #0
 8018918:	f040 8095 	bne.w	8018a46 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801891c:	697b      	ldr	r3, [r7, #20]
 801891e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018920:	4611      	mov	r1, r2
 8018922:	4618      	mov	r0, r3
 8018924:	f7ff f9af 	bl	8017c86 <ld_clust>
 8018928:	4602      	mov	r2, r0
 801892a:	68fb      	ldr	r3, [r7, #12]
 801892c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801892e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018930:	331c      	adds	r3, #28
 8018932:	4618      	mov	r0, r3
 8018934:	f7fe fa44 	bl	8016dc0 <ld_dword>
 8018938:	4602      	mov	r2, r0
 801893a:	68fb      	ldr	r3, [r7, #12]
 801893c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801893e:	68fb      	ldr	r3, [r7, #12]
 8018940:	2200      	movs	r2, #0
 8018942:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8018944:	697a      	ldr	r2, [r7, #20]
 8018946:	68fb      	ldr	r3, [r7, #12]
 8018948:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801894a:	697b      	ldr	r3, [r7, #20]
 801894c:	88da      	ldrh	r2, [r3, #6]
 801894e:	68fb      	ldr	r3, [r7, #12]
 8018950:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8018952:	68fb      	ldr	r3, [r7, #12]
 8018954:	79fa      	ldrb	r2, [r7, #7]
 8018956:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8018958:	68fb      	ldr	r3, [r7, #12]
 801895a:	2200      	movs	r2, #0
 801895c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801895e:	68fb      	ldr	r3, [r7, #12]
 8018960:	2200      	movs	r2, #0
 8018962:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8018964:	68fb      	ldr	r3, [r7, #12]
 8018966:	2200      	movs	r2, #0
 8018968:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801896a:	68fb      	ldr	r3, [r7, #12]
 801896c:	3330      	adds	r3, #48	; 0x30
 801896e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018972:	2100      	movs	r1, #0
 8018974:	4618      	mov	r0, r3
 8018976:	f7fe faae 	bl	8016ed6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801897a:	79fb      	ldrb	r3, [r7, #7]
 801897c:	f003 0320 	and.w	r3, r3, #32
 8018980:	2b00      	cmp	r3, #0
 8018982:	d060      	beq.n	8018a46 <f_open+0x362>
 8018984:	68fb      	ldr	r3, [r7, #12]
 8018986:	68db      	ldr	r3, [r3, #12]
 8018988:	2b00      	cmp	r3, #0
 801898a:	d05c      	beq.n	8018a46 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801898c:	68fb      	ldr	r3, [r7, #12]
 801898e:	68da      	ldr	r2, [r3, #12]
 8018990:	68fb      	ldr	r3, [r7, #12]
 8018992:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8018994:	697b      	ldr	r3, [r7, #20]
 8018996:	895b      	ldrh	r3, [r3, #10]
 8018998:	025b      	lsls	r3, r3, #9
 801899a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801899c:	68fb      	ldr	r3, [r7, #12]
 801899e:	689b      	ldr	r3, [r3, #8]
 80189a0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80189a2:	68fb      	ldr	r3, [r7, #12]
 80189a4:	68db      	ldr	r3, [r3, #12]
 80189a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80189a8:	e016      	b.n	80189d8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80189ae:	4618      	mov	r0, r3
 80189b0:	f7fe fd1d 	bl	80173ee <get_fat>
 80189b4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80189b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80189b8:	2b01      	cmp	r3, #1
 80189ba:	d802      	bhi.n	80189c2 <f_open+0x2de>
 80189bc:	2302      	movs	r3, #2
 80189be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80189c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80189c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80189c8:	d102      	bne.n	80189d0 <f_open+0x2ec>
 80189ca:	2301      	movs	r3, #1
 80189cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80189d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80189d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80189d4:	1ad3      	subs	r3, r2, r3
 80189d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80189d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80189dc:	2b00      	cmp	r3, #0
 80189de:	d103      	bne.n	80189e8 <f_open+0x304>
 80189e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80189e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80189e4:	429a      	cmp	r2, r3
 80189e6:	d8e0      	bhi.n	80189aa <f_open+0x2c6>
				}
				fp->clust = clst;
 80189e8:	68fb      	ldr	r3, [r7, #12]
 80189ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80189ec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80189ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	d127      	bne.n	8018a46 <f_open+0x362>
 80189f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80189f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d022      	beq.n	8018a46 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8018a00:	697b      	ldr	r3, [r7, #20]
 8018a02:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8018a04:	4618      	mov	r0, r3
 8018a06:	f7fe fcd3 	bl	80173b0 <clust2sect>
 8018a0a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8018a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018a0e:	2b00      	cmp	r3, #0
 8018a10:	d103      	bne.n	8018a1a <f_open+0x336>
						res = FR_INT_ERR;
 8018a12:	2302      	movs	r3, #2
 8018a14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8018a18:	e015      	b.n	8018a46 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8018a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018a1c:	0a5a      	lsrs	r2, r3, #9
 8018a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018a20:	441a      	add	r2, r3
 8018a22:	68fb      	ldr	r3, [r7, #12]
 8018a24:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8018a26:	697b      	ldr	r3, [r7, #20]
 8018a28:	7858      	ldrb	r0, [r3, #1]
 8018a2a:	68fb      	ldr	r3, [r7, #12]
 8018a2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018a30:	68fb      	ldr	r3, [r7, #12]
 8018a32:	6a1a      	ldr	r2, [r3, #32]
 8018a34:	2301      	movs	r3, #1
 8018a36:	f7fe f94d 	bl	8016cd4 <disk_read>
 8018a3a:	4603      	mov	r3, r0
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	d002      	beq.n	8018a46 <f_open+0x362>
 8018a40:	2301      	movs	r3, #1
 8018a42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8018a46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	d002      	beq.n	8018a54 <f_open+0x370>
 8018a4e:	68fb      	ldr	r3, [r7, #12]
 8018a50:	2200      	movs	r2, #0
 8018a52:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8018a54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8018a58:	4618      	mov	r0, r3
 8018a5a:	3768      	adds	r7, #104	; 0x68
 8018a5c:	46bd      	mov	sp, r7
 8018a5e:	bd80      	pop	{r7, pc}

08018a60 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8018a60:	b580      	push	{r7, lr}
 8018a62:	b08c      	sub	sp, #48	; 0x30
 8018a64:	af00      	add	r7, sp, #0
 8018a66:	60f8      	str	r0, [r7, #12]
 8018a68:	60b9      	str	r1, [r7, #8]
 8018a6a:	607a      	str	r2, [r7, #4]
 8018a6c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8018a6e:	68bb      	ldr	r3, [r7, #8]
 8018a70:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8018a72:	683b      	ldr	r3, [r7, #0]
 8018a74:	2200      	movs	r2, #0
 8018a76:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8018a78:	68fb      	ldr	r3, [r7, #12]
 8018a7a:	f107 0210 	add.w	r2, r7, #16
 8018a7e:	4611      	mov	r1, r2
 8018a80:	4618      	mov	r0, r3
 8018a82:	f7ff fdb3 	bl	80185ec <validate>
 8018a86:	4603      	mov	r3, r0
 8018a88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8018a8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018a90:	2b00      	cmp	r3, #0
 8018a92:	d107      	bne.n	8018aa4 <f_write+0x44>
 8018a94:	68fb      	ldr	r3, [r7, #12]
 8018a96:	7d5b      	ldrb	r3, [r3, #21]
 8018a98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8018a9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	d002      	beq.n	8018aaa <f_write+0x4a>
 8018aa4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018aa8:	e14b      	b.n	8018d42 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8018aaa:	68fb      	ldr	r3, [r7, #12]
 8018aac:	7d1b      	ldrb	r3, [r3, #20]
 8018aae:	f003 0302 	and.w	r3, r3, #2
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	d101      	bne.n	8018aba <f_write+0x5a>
 8018ab6:	2307      	movs	r3, #7
 8018ab8:	e143      	b.n	8018d42 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8018aba:	68fb      	ldr	r3, [r7, #12]
 8018abc:	699a      	ldr	r2, [r3, #24]
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	441a      	add	r2, r3
 8018ac2:	68fb      	ldr	r3, [r7, #12]
 8018ac4:	699b      	ldr	r3, [r3, #24]
 8018ac6:	429a      	cmp	r2, r3
 8018ac8:	f080 812d 	bcs.w	8018d26 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8018acc:	68fb      	ldr	r3, [r7, #12]
 8018ace:	699b      	ldr	r3, [r3, #24]
 8018ad0:	43db      	mvns	r3, r3
 8018ad2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8018ad4:	e127      	b.n	8018d26 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8018ad6:	68fb      	ldr	r3, [r7, #12]
 8018ad8:	699b      	ldr	r3, [r3, #24]
 8018ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018ade:	2b00      	cmp	r3, #0
 8018ae0:	f040 80e3 	bne.w	8018caa <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8018ae4:	68fb      	ldr	r3, [r7, #12]
 8018ae6:	699b      	ldr	r3, [r3, #24]
 8018ae8:	0a5b      	lsrs	r3, r3, #9
 8018aea:	693a      	ldr	r2, [r7, #16]
 8018aec:	8952      	ldrh	r2, [r2, #10]
 8018aee:	3a01      	subs	r2, #1
 8018af0:	4013      	ands	r3, r2
 8018af2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8018af4:	69bb      	ldr	r3, [r7, #24]
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	d143      	bne.n	8018b82 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	699b      	ldr	r3, [r3, #24]
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	d10c      	bne.n	8018b1c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8018b02:	68fb      	ldr	r3, [r7, #12]
 8018b04:	689b      	ldr	r3, [r3, #8]
 8018b06:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8018b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d11a      	bne.n	8018b44 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8018b0e:	68fb      	ldr	r3, [r7, #12]
 8018b10:	2100      	movs	r1, #0
 8018b12:	4618      	mov	r0, r3
 8018b14:	f7fe fe64 	bl	80177e0 <create_chain>
 8018b18:	62b8      	str	r0, [r7, #40]	; 0x28
 8018b1a:	e013      	b.n	8018b44 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8018b1c:	68fb      	ldr	r3, [r7, #12]
 8018b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d007      	beq.n	8018b34 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8018b24:	68fb      	ldr	r3, [r7, #12]
 8018b26:	699b      	ldr	r3, [r3, #24]
 8018b28:	4619      	mov	r1, r3
 8018b2a:	68f8      	ldr	r0, [r7, #12]
 8018b2c:	f7fe fef0 	bl	8017910 <clmt_clust>
 8018b30:	62b8      	str	r0, [r7, #40]	; 0x28
 8018b32:	e007      	b.n	8018b44 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8018b34:	68fa      	ldr	r2, [r7, #12]
 8018b36:	68fb      	ldr	r3, [r7, #12]
 8018b38:	69db      	ldr	r3, [r3, #28]
 8018b3a:	4619      	mov	r1, r3
 8018b3c:	4610      	mov	r0, r2
 8018b3e:	f7fe fe4f 	bl	80177e0 <create_chain>
 8018b42:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8018b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	f000 80f2 	beq.w	8018d30 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8018b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b4e:	2b01      	cmp	r3, #1
 8018b50:	d104      	bne.n	8018b5c <f_write+0xfc>
 8018b52:	68fb      	ldr	r3, [r7, #12]
 8018b54:	2202      	movs	r2, #2
 8018b56:	755a      	strb	r2, [r3, #21]
 8018b58:	2302      	movs	r3, #2
 8018b5a:	e0f2      	b.n	8018d42 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018b62:	d104      	bne.n	8018b6e <f_write+0x10e>
 8018b64:	68fb      	ldr	r3, [r7, #12]
 8018b66:	2201      	movs	r2, #1
 8018b68:	755a      	strb	r2, [r3, #21]
 8018b6a:	2301      	movs	r3, #1
 8018b6c:	e0e9      	b.n	8018d42 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8018b6e:	68fb      	ldr	r3, [r7, #12]
 8018b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018b72:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8018b74:	68fb      	ldr	r3, [r7, #12]
 8018b76:	689b      	ldr	r3, [r3, #8]
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	d102      	bne.n	8018b82 <f_write+0x122>
 8018b7c:	68fb      	ldr	r3, [r7, #12]
 8018b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018b80:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8018b82:	68fb      	ldr	r3, [r7, #12]
 8018b84:	7d1b      	ldrb	r3, [r3, #20]
 8018b86:	b25b      	sxtb	r3, r3
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	da18      	bge.n	8018bbe <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018b8c:	693b      	ldr	r3, [r7, #16]
 8018b8e:	7858      	ldrb	r0, [r3, #1]
 8018b90:	68fb      	ldr	r3, [r7, #12]
 8018b92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018b96:	68fb      	ldr	r3, [r7, #12]
 8018b98:	6a1a      	ldr	r2, [r3, #32]
 8018b9a:	2301      	movs	r3, #1
 8018b9c:	f7fe f8ba 	bl	8016d14 <disk_write>
 8018ba0:	4603      	mov	r3, r0
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	d004      	beq.n	8018bb0 <f_write+0x150>
 8018ba6:	68fb      	ldr	r3, [r7, #12]
 8018ba8:	2201      	movs	r2, #1
 8018baa:	755a      	strb	r2, [r3, #21]
 8018bac:	2301      	movs	r3, #1
 8018bae:	e0c8      	b.n	8018d42 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8018bb0:	68fb      	ldr	r3, [r7, #12]
 8018bb2:	7d1b      	ldrb	r3, [r3, #20]
 8018bb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018bb8:	b2da      	uxtb	r2, r3
 8018bba:	68fb      	ldr	r3, [r7, #12]
 8018bbc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8018bbe:	693a      	ldr	r2, [r7, #16]
 8018bc0:	68fb      	ldr	r3, [r7, #12]
 8018bc2:	69db      	ldr	r3, [r3, #28]
 8018bc4:	4619      	mov	r1, r3
 8018bc6:	4610      	mov	r0, r2
 8018bc8:	f7fe fbf2 	bl	80173b0 <clust2sect>
 8018bcc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8018bce:	697b      	ldr	r3, [r7, #20]
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	d104      	bne.n	8018bde <f_write+0x17e>
 8018bd4:	68fb      	ldr	r3, [r7, #12]
 8018bd6:	2202      	movs	r2, #2
 8018bd8:	755a      	strb	r2, [r3, #21]
 8018bda:	2302      	movs	r3, #2
 8018bdc:	e0b1      	b.n	8018d42 <f_write+0x2e2>
			sect += csect;
 8018bde:	697a      	ldr	r2, [r7, #20]
 8018be0:	69bb      	ldr	r3, [r7, #24]
 8018be2:	4413      	add	r3, r2
 8018be4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	0a5b      	lsrs	r3, r3, #9
 8018bea:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8018bec:	6a3b      	ldr	r3, [r7, #32]
 8018bee:	2b00      	cmp	r3, #0
 8018bf0:	d03c      	beq.n	8018c6c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8018bf2:	69ba      	ldr	r2, [r7, #24]
 8018bf4:	6a3b      	ldr	r3, [r7, #32]
 8018bf6:	4413      	add	r3, r2
 8018bf8:	693a      	ldr	r2, [r7, #16]
 8018bfa:	8952      	ldrh	r2, [r2, #10]
 8018bfc:	4293      	cmp	r3, r2
 8018bfe:	d905      	bls.n	8018c0c <f_write+0x1ac>
					cc = fs->csize - csect;
 8018c00:	693b      	ldr	r3, [r7, #16]
 8018c02:	895b      	ldrh	r3, [r3, #10]
 8018c04:	461a      	mov	r2, r3
 8018c06:	69bb      	ldr	r3, [r7, #24]
 8018c08:	1ad3      	subs	r3, r2, r3
 8018c0a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018c0c:	693b      	ldr	r3, [r7, #16]
 8018c0e:	7858      	ldrb	r0, [r3, #1]
 8018c10:	6a3b      	ldr	r3, [r7, #32]
 8018c12:	697a      	ldr	r2, [r7, #20]
 8018c14:	69f9      	ldr	r1, [r7, #28]
 8018c16:	f7fe f87d 	bl	8016d14 <disk_write>
 8018c1a:	4603      	mov	r3, r0
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	d004      	beq.n	8018c2a <f_write+0x1ca>
 8018c20:	68fb      	ldr	r3, [r7, #12]
 8018c22:	2201      	movs	r2, #1
 8018c24:	755a      	strb	r2, [r3, #21]
 8018c26:	2301      	movs	r3, #1
 8018c28:	e08b      	b.n	8018d42 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8018c2a:	68fb      	ldr	r3, [r7, #12]
 8018c2c:	6a1a      	ldr	r2, [r3, #32]
 8018c2e:	697b      	ldr	r3, [r7, #20]
 8018c30:	1ad3      	subs	r3, r2, r3
 8018c32:	6a3a      	ldr	r2, [r7, #32]
 8018c34:	429a      	cmp	r2, r3
 8018c36:	d915      	bls.n	8018c64 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8018c38:	68fb      	ldr	r3, [r7, #12]
 8018c3a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8018c3e:	68fb      	ldr	r3, [r7, #12]
 8018c40:	6a1a      	ldr	r2, [r3, #32]
 8018c42:	697b      	ldr	r3, [r7, #20]
 8018c44:	1ad3      	subs	r3, r2, r3
 8018c46:	025b      	lsls	r3, r3, #9
 8018c48:	69fa      	ldr	r2, [r7, #28]
 8018c4a:	4413      	add	r3, r2
 8018c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018c50:	4619      	mov	r1, r3
 8018c52:	f7fe f91f 	bl	8016e94 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8018c56:	68fb      	ldr	r3, [r7, #12]
 8018c58:	7d1b      	ldrb	r3, [r3, #20]
 8018c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018c5e:	b2da      	uxtb	r2, r3
 8018c60:	68fb      	ldr	r3, [r7, #12]
 8018c62:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8018c64:	6a3b      	ldr	r3, [r7, #32]
 8018c66:	025b      	lsls	r3, r3, #9
 8018c68:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8018c6a:	e03f      	b.n	8018cec <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8018c6c:	68fb      	ldr	r3, [r7, #12]
 8018c6e:	6a1b      	ldr	r3, [r3, #32]
 8018c70:	697a      	ldr	r2, [r7, #20]
 8018c72:	429a      	cmp	r2, r3
 8018c74:	d016      	beq.n	8018ca4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8018c76:	68fb      	ldr	r3, [r7, #12]
 8018c78:	699a      	ldr	r2, [r3, #24]
 8018c7a:	68fb      	ldr	r3, [r7, #12]
 8018c7c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8018c7e:	429a      	cmp	r2, r3
 8018c80:	d210      	bcs.n	8018ca4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8018c82:	693b      	ldr	r3, [r7, #16]
 8018c84:	7858      	ldrb	r0, [r3, #1]
 8018c86:	68fb      	ldr	r3, [r7, #12]
 8018c88:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018c8c:	2301      	movs	r3, #1
 8018c8e:	697a      	ldr	r2, [r7, #20]
 8018c90:	f7fe f820 	bl	8016cd4 <disk_read>
 8018c94:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d004      	beq.n	8018ca4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8018c9a:	68fb      	ldr	r3, [r7, #12]
 8018c9c:	2201      	movs	r2, #1
 8018c9e:	755a      	strb	r2, [r3, #21]
 8018ca0:	2301      	movs	r3, #1
 8018ca2:	e04e      	b.n	8018d42 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8018ca4:	68fb      	ldr	r3, [r7, #12]
 8018ca6:	697a      	ldr	r2, [r7, #20]
 8018ca8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8018caa:	68fb      	ldr	r3, [r7, #12]
 8018cac:	699b      	ldr	r3, [r3, #24]
 8018cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018cb2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8018cb6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8018cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	429a      	cmp	r2, r3
 8018cbe:	d901      	bls.n	8018cc4 <f_write+0x264>
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8018cc4:	68fb      	ldr	r3, [r7, #12]
 8018cc6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018cca:	68fb      	ldr	r3, [r7, #12]
 8018ccc:	699b      	ldr	r3, [r3, #24]
 8018cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018cd2:	4413      	add	r3, r2
 8018cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018cd6:	69f9      	ldr	r1, [r7, #28]
 8018cd8:	4618      	mov	r0, r3
 8018cda:	f7fe f8db 	bl	8016e94 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8018cde:	68fb      	ldr	r3, [r7, #12]
 8018ce0:	7d1b      	ldrb	r3, [r3, #20]
 8018ce2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018ce6:	b2da      	uxtb	r2, r3
 8018ce8:	68fb      	ldr	r3, [r7, #12]
 8018cea:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8018cec:	69fa      	ldr	r2, [r7, #28]
 8018cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018cf0:	4413      	add	r3, r2
 8018cf2:	61fb      	str	r3, [r7, #28]
 8018cf4:	68fb      	ldr	r3, [r7, #12]
 8018cf6:	699a      	ldr	r2, [r3, #24]
 8018cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018cfa:	441a      	add	r2, r3
 8018cfc:	68fb      	ldr	r3, [r7, #12]
 8018cfe:	619a      	str	r2, [r3, #24]
 8018d00:	68fb      	ldr	r3, [r7, #12]
 8018d02:	68da      	ldr	r2, [r3, #12]
 8018d04:	68fb      	ldr	r3, [r7, #12]
 8018d06:	699b      	ldr	r3, [r3, #24]
 8018d08:	429a      	cmp	r2, r3
 8018d0a:	bf38      	it	cc
 8018d0c:	461a      	movcc	r2, r3
 8018d0e:	68fb      	ldr	r3, [r7, #12]
 8018d10:	60da      	str	r2, [r3, #12]
 8018d12:	683b      	ldr	r3, [r7, #0]
 8018d14:	681a      	ldr	r2, [r3, #0]
 8018d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d18:	441a      	add	r2, r3
 8018d1a:	683b      	ldr	r3, [r7, #0]
 8018d1c:	601a      	str	r2, [r3, #0]
 8018d1e:	687a      	ldr	r2, [r7, #4]
 8018d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d22:	1ad3      	subs	r3, r2, r3
 8018d24:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	f47f aed4 	bne.w	8018ad6 <f_write+0x76>
 8018d2e:	e000      	b.n	8018d32 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8018d30:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8018d32:	68fb      	ldr	r3, [r7, #12]
 8018d34:	7d1b      	ldrb	r3, [r3, #20]
 8018d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018d3a:	b2da      	uxtb	r2, r3
 8018d3c:	68fb      	ldr	r3, [r7, #12]
 8018d3e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8018d40:	2300      	movs	r3, #0
}
 8018d42:	4618      	mov	r0, r3
 8018d44:	3730      	adds	r7, #48	; 0x30
 8018d46:	46bd      	mov	sp, r7
 8018d48:	bd80      	pop	{r7, pc}

08018d4a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8018d4a:	b580      	push	{r7, lr}
 8018d4c:	b086      	sub	sp, #24
 8018d4e:	af00      	add	r7, sp, #0
 8018d50:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	f107 0208 	add.w	r2, r7, #8
 8018d58:	4611      	mov	r1, r2
 8018d5a:	4618      	mov	r0, r3
 8018d5c:	f7ff fc46 	bl	80185ec <validate>
 8018d60:	4603      	mov	r3, r0
 8018d62:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8018d64:	7dfb      	ldrb	r3, [r7, #23]
 8018d66:	2b00      	cmp	r3, #0
 8018d68:	d168      	bne.n	8018e3c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	7d1b      	ldrb	r3, [r3, #20]
 8018d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018d72:	2b00      	cmp	r3, #0
 8018d74:	d062      	beq.n	8018e3c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	7d1b      	ldrb	r3, [r3, #20]
 8018d7a:	b25b      	sxtb	r3, r3
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	da15      	bge.n	8018dac <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8018d80:	68bb      	ldr	r3, [r7, #8]
 8018d82:	7858      	ldrb	r0, [r3, #1]
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	6a1a      	ldr	r2, [r3, #32]
 8018d8e:	2301      	movs	r3, #1
 8018d90:	f7fd ffc0 	bl	8016d14 <disk_write>
 8018d94:	4603      	mov	r3, r0
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	d001      	beq.n	8018d9e <f_sync+0x54>
 8018d9a:	2301      	movs	r3, #1
 8018d9c:	e04f      	b.n	8018e3e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	7d1b      	ldrb	r3, [r3, #20]
 8018da2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018da6:	b2da      	uxtb	r2, r3
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8018dac:	f7fb fd4e 	bl	801484c <get_fattime>
 8018db0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8018db2:	68ba      	ldr	r2, [r7, #8]
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018db8:	4619      	mov	r1, r3
 8018dba:	4610      	mov	r0, r2
 8018dbc:	f7fe fa5c 	bl	8017278 <move_window>
 8018dc0:	4603      	mov	r3, r0
 8018dc2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8018dc4:	7dfb      	ldrb	r3, [r7, #23]
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	d138      	bne.n	8018e3c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018dce:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8018dd0:	68fb      	ldr	r3, [r7, #12]
 8018dd2:	330b      	adds	r3, #11
 8018dd4:	781a      	ldrb	r2, [r3, #0]
 8018dd6:	68fb      	ldr	r3, [r7, #12]
 8018dd8:	330b      	adds	r3, #11
 8018dda:	f042 0220 	orr.w	r2, r2, #32
 8018dde:	b2d2      	uxtb	r2, r2
 8018de0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	6818      	ldr	r0, [r3, #0]
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	689b      	ldr	r3, [r3, #8]
 8018dea:	461a      	mov	r2, r3
 8018dec:	68f9      	ldr	r1, [r7, #12]
 8018dee:	f7fe ff69 	bl	8017cc4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8018df2:	68fb      	ldr	r3, [r7, #12]
 8018df4:	f103 021c 	add.w	r2, r3, #28
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	68db      	ldr	r3, [r3, #12]
 8018dfc:	4619      	mov	r1, r3
 8018dfe:	4610      	mov	r0, r2
 8018e00:	f7fe f81c 	bl	8016e3c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8018e04:	68fb      	ldr	r3, [r7, #12]
 8018e06:	3316      	adds	r3, #22
 8018e08:	6939      	ldr	r1, [r7, #16]
 8018e0a:	4618      	mov	r0, r3
 8018e0c:	f7fe f816 	bl	8016e3c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8018e10:	68fb      	ldr	r3, [r7, #12]
 8018e12:	3312      	adds	r3, #18
 8018e14:	2100      	movs	r1, #0
 8018e16:	4618      	mov	r0, r3
 8018e18:	f7fd fff5 	bl	8016e06 <st_word>
					fs->wflag = 1;
 8018e1c:	68bb      	ldr	r3, [r7, #8]
 8018e1e:	2201      	movs	r2, #1
 8018e20:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8018e22:	68bb      	ldr	r3, [r7, #8]
 8018e24:	4618      	mov	r0, r3
 8018e26:	f7fe fa55 	bl	80172d4 <sync_fs>
 8018e2a:	4603      	mov	r3, r0
 8018e2c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	7d1b      	ldrb	r3, [r3, #20]
 8018e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018e36:	b2da      	uxtb	r2, r3
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8018e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8018e3e:	4618      	mov	r0, r3
 8018e40:	3718      	adds	r7, #24
 8018e42:	46bd      	mov	sp, r7
 8018e44:	bd80      	pop	{r7, pc}
	...

08018e48 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8018e48:	b480      	push	{r7}
 8018e4a:	b087      	sub	sp, #28
 8018e4c:	af00      	add	r7, sp, #0
 8018e4e:	60f8      	str	r0, [r7, #12]
 8018e50:	60b9      	str	r1, [r7, #8]
 8018e52:	4613      	mov	r3, r2
 8018e54:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8018e56:	2301      	movs	r3, #1
 8018e58:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8018e5a:	2300      	movs	r3, #0
 8018e5c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8018e5e:	4b1f      	ldr	r3, [pc, #124]	; (8018edc <FATFS_LinkDriverEx+0x94>)
 8018e60:	7a5b      	ldrb	r3, [r3, #9]
 8018e62:	b2db      	uxtb	r3, r3
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d131      	bne.n	8018ecc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8018e68:	4b1c      	ldr	r3, [pc, #112]	; (8018edc <FATFS_LinkDriverEx+0x94>)
 8018e6a:	7a5b      	ldrb	r3, [r3, #9]
 8018e6c:	b2db      	uxtb	r3, r3
 8018e6e:	461a      	mov	r2, r3
 8018e70:	4b1a      	ldr	r3, [pc, #104]	; (8018edc <FATFS_LinkDriverEx+0x94>)
 8018e72:	2100      	movs	r1, #0
 8018e74:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8018e76:	4b19      	ldr	r3, [pc, #100]	; (8018edc <FATFS_LinkDriverEx+0x94>)
 8018e78:	7a5b      	ldrb	r3, [r3, #9]
 8018e7a:	b2db      	uxtb	r3, r3
 8018e7c:	4a17      	ldr	r2, [pc, #92]	; (8018edc <FATFS_LinkDriverEx+0x94>)
 8018e7e:	009b      	lsls	r3, r3, #2
 8018e80:	4413      	add	r3, r2
 8018e82:	68fa      	ldr	r2, [r7, #12]
 8018e84:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8018e86:	4b15      	ldr	r3, [pc, #84]	; (8018edc <FATFS_LinkDriverEx+0x94>)
 8018e88:	7a5b      	ldrb	r3, [r3, #9]
 8018e8a:	b2db      	uxtb	r3, r3
 8018e8c:	461a      	mov	r2, r3
 8018e8e:	4b13      	ldr	r3, [pc, #76]	; (8018edc <FATFS_LinkDriverEx+0x94>)
 8018e90:	4413      	add	r3, r2
 8018e92:	79fa      	ldrb	r2, [r7, #7]
 8018e94:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8018e96:	4b11      	ldr	r3, [pc, #68]	; (8018edc <FATFS_LinkDriverEx+0x94>)
 8018e98:	7a5b      	ldrb	r3, [r3, #9]
 8018e9a:	b2db      	uxtb	r3, r3
 8018e9c:	1c5a      	adds	r2, r3, #1
 8018e9e:	b2d1      	uxtb	r1, r2
 8018ea0:	4a0e      	ldr	r2, [pc, #56]	; (8018edc <FATFS_LinkDriverEx+0x94>)
 8018ea2:	7251      	strb	r1, [r2, #9]
 8018ea4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8018ea6:	7dbb      	ldrb	r3, [r7, #22]
 8018ea8:	3330      	adds	r3, #48	; 0x30
 8018eaa:	b2da      	uxtb	r2, r3
 8018eac:	68bb      	ldr	r3, [r7, #8]
 8018eae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8018eb0:	68bb      	ldr	r3, [r7, #8]
 8018eb2:	3301      	adds	r3, #1
 8018eb4:	223a      	movs	r2, #58	; 0x3a
 8018eb6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8018eb8:	68bb      	ldr	r3, [r7, #8]
 8018eba:	3302      	adds	r3, #2
 8018ebc:	222f      	movs	r2, #47	; 0x2f
 8018ebe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8018ec0:	68bb      	ldr	r3, [r7, #8]
 8018ec2:	3303      	adds	r3, #3
 8018ec4:	2200      	movs	r2, #0
 8018ec6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8018ec8:	2300      	movs	r3, #0
 8018eca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8018ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8018ece:	4618      	mov	r0, r3
 8018ed0:	371c      	adds	r7, #28
 8018ed2:	46bd      	mov	sp, r7
 8018ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ed8:	4770      	bx	lr
 8018eda:	bf00      	nop
 8018edc:	200013a4 	.word	0x200013a4

08018ee0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8018ee0:	b580      	push	{r7, lr}
 8018ee2:	b082      	sub	sp, #8
 8018ee4:	af00      	add	r7, sp, #0
 8018ee6:	6078      	str	r0, [r7, #4]
 8018ee8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8018eea:	2200      	movs	r2, #0
 8018eec:	6839      	ldr	r1, [r7, #0]
 8018eee:	6878      	ldr	r0, [r7, #4]
 8018ef0:	f7ff ffaa 	bl	8018e48 <FATFS_LinkDriverEx>
 8018ef4:	4603      	mov	r3, r0
}
 8018ef6:	4618      	mov	r0, r3
 8018ef8:	3708      	adds	r7, #8
 8018efa:	46bd      	mov	sp, r7
 8018efc:	bd80      	pop	{r7, pc}
	...

08018f00 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8018f00:	b580      	push	{r7, lr}
 8018f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8018f04:	2200      	movs	r2, #0
 8018f06:	4912      	ldr	r1, [pc, #72]	; (8018f50 <MX_USB_DEVICE_Init+0x50>)
 8018f08:	4812      	ldr	r0, [pc, #72]	; (8018f54 <MX_USB_DEVICE_Init+0x54>)
 8018f0a:	f7fc fbab 	bl	8015664 <USBD_Init>
 8018f0e:	4603      	mov	r3, r0
 8018f10:	2b00      	cmp	r3, #0
 8018f12:	d001      	beq.n	8018f18 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018f14:	f7eb fe3e 	bl	8004b94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8018f18:	490f      	ldr	r1, [pc, #60]	; (8018f58 <MX_USB_DEVICE_Init+0x58>)
 8018f1a:	480e      	ldr	r0, [pc, #56]	; (8018f54 <MX_USB_DEVICE_Init+0x54>)
 8018f1c:	f7fc fbd2 	bl	80156c4 <USBD_RegisterClass>
 8018f20:	4603      	mov	r3, r0
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d001      	beq.n	8018f2a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018f26:	f7eb fe35 	bl	8004b94 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8018f2a:	490c      	ldr	r1, [pc, #48]	; (8018f5c <MX_USB_DEVICE_Init+0x5c>)
 8018f2c:	4809      	ldr	r0, [pc, #36]	; (8018f54 <MX_USB_DEVICE_Init+0x54>)
 8018f2e:	f7fc fac9 	bl	80154c4 <USBD_CDC_RegisterInterface>
 8018f32:	4603      	mov	r3, r0
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	d001      	beq.n	8018f3c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018f38:	f7eb fe2c 	bl	8004b94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8018f3c:	4805      	ldr	r0, [pc, #20]	; (8018f54 <MX_USB_DEVICE_Init+0x54>)
 8018f3e:	f7fc fbf7 	bl	8015730 <USBD_Start>
 8018f42:	4603      	mov	r3, r0
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	d001      	beq.n	8018f4c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018f48:	f7eb fe24 	bl	8004b94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018f4c:	bf00      	nop
 8018f4e:	bd80      	pop	{r7, pc}
 8018f50:	200000b0 	.word	0x200000b0
 8018f54:	200013b0 	.word	0x200013b0
 8018f58:	2000001c 	.word	0x2000001c
 8018f5c:	2000009c 	.word	0x2000009c

08018f60 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8018f60:	b580      	push	{r7, lr}
 8018f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018f64:	2200      	movs	r2, #0
 8018f66:	4905      	ldr	r1, [pc, #20]	; (8018f7c <CDC_Init_FS+0x1c>)
 8018f68:	4805      	ldr	r0, [pc, #20]	; (8018f80 <CDC_Init_FS+0x20>)
 8018f6a:	f7fc fac5 	bl	80154f8 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8018f6e:	4905      	ldr	r1, [pc, #20]	; (8018f84 <CDC_Init_FS+0x24>)
 8018f70:	4803      	ldr	r0, [pc, #12]	; (8018f80 <CDC_Init_FS+0x20>)
 8018f72:	f7fc fae3 	bl	801553c <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8018f76:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018f78:	4618      	mov	r0, r3
 8018f7a:	bd80      	pop	{r7, pc}
 8018f7c:	20001e90 	.word	0x20001e90
 8018f80:	200013b0 	.word	0x200013b0
 8018f84:	20001690 	.word	0x20001690

08018f88 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8018f88:	b480      	push	{r7}
 8018f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8018f8c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018f8e:	4618      	mov	r0, r3
 8018f90:	46bd      	mov	sp, r7
 8018f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f96:	4770      	bx	lr

08018f98 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8018f98:	b480      	push	{r7}
 8018f9a:	b083      	sub	sp, #12
 8018f9c:	af00      	add	r7, sp, #0
 8018f9e:	4603      	mov	r3, r0
 8018fa0:	6039      	str	r1, [r7, #0]
 8018fa2:	71fb      	strb	r3, [r7, #7]
 8018fa4:	4613      	mov	r3, r2
 8018fa6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch(cmd)
 8018fa8:	79fb      	ldrb	r3, [r7, #7]
 8018faa:	2b23      	cmp	r3, #35	; 0x23
 8018fac:	d84a      	bhi.n	8019044 <CDC_Control_FS+0xac>
 8018fae:	a201      	add	r2, pc, #4	; (adr r2, 8018fb4 <CDC_Control_FS+0x1c>)
 8018fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018fb4:	08019045 	.word	0x08019045
 8018fb8:	08019045 	.word	0x08019045
 8018fbc:	08019045 	.word	0x08019045
 8018fc0:	08019045 	.word	0x08019045
 8018fc4:	08019045 	.word	0x08019045
 8018fc8:	08019045 	.word	0x08019045
 8018fcc:	08019045 	.word	0x08019045
 8018fd0:	08019045 	.word	0x08019045
 8018fd4:	08019045 	.word	0x08019045
 8018fd8:	08019045 	.word	0x08019045
 8018fdc:	08019045 	.word	0x08019045
 8018fe0:	08019045 	.word	0x08019045
 8018fe4:	08019045 	.word	0x08019045
 8018fe8:	08019045 	.word	0x08019045
 8018fec:	08019045 	.word	0x08019045
 8018ff0:	08019045 	.word	0x08019045
 8018ff4:	08019045 	.word	0x08019045
 8018ff8:	08019045 	.word	0x08019045
 8018ffc:	08019045 	.word	0x08019045
 8019000:	08019045 	.word	0x08019045
 8019004:	08019045 	.word	0x08019045
 8019008:	08019045 	.word	0x08019045
 801900c:	08019045 	.word	0x08019045
 8019010:	08019045 	.word	0x08019045
 8019014:	08019045 	.word	0x08019045
 8019018:	08019045 	.word	0x08019045
 801901c:	08019045 	.word	0x08019045
 8019020:	08019045 	.word	0x08019045
 8019024:	08019045 	.word	0x08019045
 8019028:	08019045 	.word	0x08019045
 801902c:	08019045 	.word	0x08019045
 8019030:	08019045 	.word	0x08019045
 8019034:	08019045 	.word	0x08019045
 8019038:	08019045 	.word	0x08019045
 801903c:	08019045 	.word	0x08019045
 8019040:	08019045 	.word	0x08019045
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8019044:	bf00      	nop
	}

	return (USBD_OK);
 8019046:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8019048:	4618      	mov	r0, r3
 801904a:	370c      	adds	r7, #12
 801904c:	46bd      	mov	sp, r7
 801904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019052:	4770      	bx	lr

08019054 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8019054:	b580      	push	{r7, lr}
 8019056:	b084      	sub	sp, #16
 8019058:	af00      	add	r7, sp, #0
 801905a:	6078      	str	r0, [r7, #4]
 801905c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801905e:	6879      	ldr	r1, [r7, #4]
 8019060:	480b      	ldr	r0, [pc, #44]	; (8019090 <CDC_Receive_FS+0x3c>)
 8019062:	f7fc fa6b 	bl	801553c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8019066:	480a      	ldr	r0, [pc, #40]	; (8019090 <CDC_Receive_FS+0x3c>)
 8019068:	f7fc fac6 	bl	80155f8 <USBD_CDC_ReceivePacket>

	uint8_t len = (uint8_t)*Len;
 801906c:	683b      	ldr	r3, [r7, #0]
 801906e:	681b      	ldr	r3, [r3, #0]
 8019070:	73fb      	strb	r3, [r7, #15]
	memcpy(usb_Rx_buffer, Buf, len);  // copy the data to the buffer
 8019072:	7bfb      	ldrb	r3, [r7, #15]
 8019074:	461a      	mov	r2, r3
 8019076:	6879      	ldr	r1, [r7, #4]
 8019078:	4806      	ldr	r0, [pc, #24]	; (8019094 <CDC_Receive_FS+0x40>)
 801907a:	f000 fd71 	bl	8019b60 <memcpy>

	usb_Rx_ready = 1;
 801907e:	4b06      	ldr	r3, [pc, #24]	; (8019098 <CDC_Receive_FS+0x44>)
 8019080:	2201      	movs	r2, #1
 8019082:	701a      	strb	r2, [r3, #0]

	return (USBD_OK);
 8019084:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8019086:	4618      	mov	r0, r3
 8019088:	3710      	adds	r7, #16
 801908a:	46bd      	mov	sp, r7
 801908c:	bd80      	pop	{r7, pc}
 801908e:	bf00      	nop
 8019090:	200013b0 	.word	0x200013b0
 8019094:	2000168c 	.word	0x2000168c
 8019098:	2000168e 	.word	0x2000168e

0801909c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801909c:	b580      	push	{r7, lr}
 801909e:	b084      	sub	sp, #16
 80190a0:	af00      	add	r7, sp, #0
 80190a2:	6078      	str	r0, [r7, #4]
 80190a4:	460b      	mov	r3, r1
 80190a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80190a8:	2300      	movs	r3, #0
 80190aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80190ac:	4b0d      	ldr	r3, [pc, #52]	; (80190e4 <CDC_Transmit_FS+0x48>)
 80190ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80190b2:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0){
 80190b4:	68bb      	ldr	r3, [r7, #8]
 80190b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	d001      	beq.n	80190c2 <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 80190be:	2301      	movs	r3, #1
 80190c0:	e00b      	b.n	80190da <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80190c2:	887b      	ldrh	r3, [r7, #2]
 80190c4:	461a      	mov	r2, r3
 80190c6:	6879      	ldr	r1, [r7, #4]
 80190c8:	4806      	ldr	r0, [pc, #24]	; (80190e4 <CDC_Transmit_FS+0x48>)
 80190ca:	f7fc fa15 	bl	80154f8 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80190ce:	4805      	ldr	r0, [pc, #20]	; (80190e4 <CDC_Transmit_FS+0x48>)
 80190d0:	f7fc fa52 	bl	8015578 <USBD_CDC_TransmitPacket>
 80190d4:	4603      	mov	r3, r0
 80190d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80190d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80190da:	4618      	mov	r0, r3
 80190dc:	3710      	adds	r7, #16
 80190de:	46bd      	mov	sp, r7
 80190e0:	bd80      	pop	{r7, pc}
 80190e2:	bf00      	nop
 80190e4:	200013b0 	.word	0x200013b0

080190e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80190e8:	b480      	push	{r7}
 80190ea:	b087      	sub	sp, #28
 80190ec:	af00      	add	r7, sp, #0
 80190ee:	60f8      	str	r0, [r7, #12]
 80190f0:	60b9      	str	r1, [r7, #8]
 80190f2:	4613      	mov	r3, r2
 80190f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80190f6:	2300      	movs	r3, #0
 80190f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80190fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80190fe:	4618      	mov	r0, r3
 8019100:	371c      	adds	r7, #28
 8019102:	46bd      	mov	sp, r7
 8019104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019108:	4770      	bx	lr
	...

0801910c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801910c:	b480      	push	{r7}
 801910e:	b083      	sub	sp, #12
 8019110:	af00      	add	r7, sp, #0
 8019112:	4603      	mov	r3, r0
 8019114:	6039      	str	r1, [r7, #0]
 8019116:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8019118:	683b      	ldr	r3, [r7, #0]
 801911a:	2212      	movs	r2, #18
 801911c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801911e:	4b03      	ldr	r3, [pc, #12]	; (801912c <USBD_FS_DeviceDescriptor+0x20>)
}
 8019120:	4618      	mov	r0, r3
 8019122:	370c      	adds	r7, #12
 8019124:	46bd      	mov	sp, r7
 8019126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801912a:	4770      	bx	lr
 801912c:	200000cc 	.word	0x200000cc

08019130 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019130:	b480      	push	{r7}
 8019132:	b083      	sub	sp, #12
 8019134:	af00      	add	r7, sp, #0
 8019136:	4603      	mov	r3, r0
 8019138:	6039      	str	r1, [r7, #0]
 801913a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801913c:	683b      	ldr	r3, [r7, #0]
 801913e:	2204      	movs	r2, #4
 8019140:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8019142:	4b03      	ldr	r3, [pc, #12]	; (8019150 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8019144:	4618      	mov	r0, r3
 8019146:	370c      	adds	r7, #12
 8019148:	46bd      	mov	sp, r7
 801914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801914e:	4770      	bx	lr
 8019150:	200000e0 	.word	0x200000e0

08019154 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019154:	b580      	push	{r7, lr}
 8019156:	b082      	sub	sp, #8
 8019158:	af00      	add	r7, sp, #0
 801915a:	4603      	mov	r3, r0
 801915c:	6039      	str	r1, [r7, #0]
 801915e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019160:	79fb      	ldrb	r3, [r7, #7]
 8019162:	2b00      	cmp	r3, #0
 8019164:	d105      	bne.n	8019172 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019166:	683a      	ldr	r2, [r7, #0]
 8019168:	4907      	ldr	r1, [pc, #28]	; (8019188 <USBD_FS_ProductStrDescriptor+0x34>)
 801916a:	4808      	ldr	r0, [pc, #32]	; (801918c <USBD_FS_ProductStrDescriptor+0x38>)
 801916c:	f7fd fc92 	bl	8016a94 <USBD_GetString>
 8019170:	e004      	b.n	801917c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019172:	683a      	ldr	r2, [r7, #0]
 8019174:	4904      	ldr	r1, [pc, #16]	; (8019188 <USBD_FS_ProductStrDescriptor+0x34>)
 8019176:	4805      	ldr	r0, [pc, #20]	; (801918c <USBD_FS_ProductStrDescriptor+0x38>)
 8019178:	f7fd fc8c 	bl	8016a94 <USBD_GetString>
  }
  return USBD_StrDesc;
 801917c:	4b02      	ldr	r3, [pc, #8]	; (8019188 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801917e:	4618      	mov	r0, r3
 8019180:	3708      	adds	r7, #8
 8019182:	46bd      	mov	sp, r7
 8019184:	bd80      	pop	{r7, pc}
 8019186:	bf00      	nop
 8019188:	20002690 	.word	0x20002690
 801918c:	0801ceac 	.word	0x0801ceac

08019190 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019190:	b580      	push	{r7, lr}
 8019192:	b082      	sub	sp, #8
 8019194:	af00      	add	r7, sp, #0
 8019196:	4603      	mov	r3, r0
 8019198:	6039      	str	r1, [r7, #0]
 801919a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801919c:	683a      	ldr	r2, [r7, #0]
 801919e:	4904      	ldr	r1, [pc, #16]	; (80191b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80191a0:	4804      	ldr	r0, [pc, #16]	; (80191b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80191a2:	f7fd fc77 	bl	8016a94 <USBD_GetString>
  return USBD_StrDesc;
 80191a6:	4b02      	ldr	r3, [pc, #8]	; (80191b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80191a8:	4618      	mov	r0, r3
 80191aa:	3708      	adds	r7, #8
 80191ac:	46bd      	mov	sp, r7
 80191ae:	bd80      	pop	{r7, pc}
 80191b0:	20002690 	.word	0x20002690
 80191b4:	0801cec4 	.word	0x0801cec4

080191b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80191b8:	b580      	push	{r7, lr}
 80191ba:	b082      	sub	sp, #8
 80191bc:	af00      	add	r7, sp, #0
 80191be:	4603      	mov	r3, r0
 80191c0:	6039      	str	r1, [r7, #0]
 80191c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80191c4:	683b      	ldr	r3, [r7, #0]
 80191c6:	221a      	movs	r2, #26
 80191c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80191ca:	f000 f843 	bl	8019254 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80191ce:	4b02      	ldr	r3, [pc, #8]	; (80191d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80191d0:	4618      	mov	r0, r3
 80191d2:	3708      	adds	r7, #8
 80191d4:	46bd      	mov	sp, r7
 80191d6:	bd80      	pop	{r7, pc}
 80191d8:	200000e4 	.word	0x200000e4

080191dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80191dc:	b580      	push	{r7, lr}
 80191de:	b082      	sub	sp, #8
 80191e0:	af00      	add	r7, sp, #0
 80191e2:	4603      	mov	r3, r0
 80191e4:	6039      	str	r1, [r7, #0]
 80191e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80191e8:	79fb      	ldrb	r3, [r7, #7]
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	d105      	bne.n	80191fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80191ee:	683a      	ldr	r2, [r7, #0]
 80191f0:	4907      	ldr	r1, [pc, #28]	; (8019210 <USBD_FS_ConfigStrDescriptor+0x34>)
 80191f2:	4808      	ldr	r0, [pc, #32]	; (8019214 <USBD_FS_ConfigStrDescriptor+0x38>)
 80191f4:	f7fd fc4e 	bl	8016a94 <USBD_GetString>
 80191f8:	e004      	b.n	8019204 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80191fa:	683a      	ldr	r2, [r7, #0]
 80191fc:	4904      	ldr	r1, [pc, #16]	; (8019210 <USBD_FS_ConfigStrDescriptor+0x34>)
 80191fe:	4805      	ldr	r0, [pc, #20]	; (8019214 <USBD_FS_ConfigStrDescriptor+0x38>)
 8019200:	f7fd fc48 	bl	8016a94 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019204:	4b02      	ldr	r3, [pc, #8]	; (8019210 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8019206:	4618      	mov	r0, r3
 8019208:	3708      	adds	r7, #8
 801920a:	46bd      	mov	sp, r7
 801920c:	bd80      	pop	{r7, pc}
 801920e:	bf00      	nop
 8019210:	20002690 	.word	0x20002690
 8019214:	0801ced8 	.word	0x0801ced8

08019218 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019218:	b580      	push	{r7, lr}
 801921a:	b082      	sub	sp, #8
 801921c:	af00      	add	r7, sp, #0
 801921e:	4603      	mov	r3, r0
 8019220:	6039      	str	r1, [r7, #0]
 8019222:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019224:	79fb      	ldrb	r3, [r7, #7]
 8019226:	2b00      	cmp	r3, #0
 8019228:	d105      	bne.n	8019236 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801922a:	683a      	ldr	r2, [r7, #0]
 801922c:	4907      	ldr	r1, [pc, #28]	; (801924c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801922e:	4808      	ldr	r0, [pc, #32]	; (8019250 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019230:	f7fd fc30 	bl	8016a94 <USBD_GetString>
 8019234:	e004      	b.n	8019240 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019236:	683a      	ldr	r2, [r7, #0]
 8019238:	4904      	ldr	r1, [pc, #16]	; (801924c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801923a:	4805      	ldr	r0, [pc, #20]	; (8019250 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801923c:	f7fd fc2a 	bl	8016a94 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019240:	4b02      	ldr	r3, [pc, #8]	; (801924c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8019242:	4618      	mov	r0, r3
 8019244:	3708      	adds	r7, #8
 8019246:	46bd      	mov	sp, r7
 8019248:	bd80      	pop	{r7, pc}
 801924a:	bf00      	nop
 801924c:	20002690 	.word	0x20002690
 8019250:	0801cee4 	.word	0x0801cee4

08019254 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8019254:	b580      	push	{r7, lr}
 8019256:	b084      	sub	sp, #16
 8019258:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801925a:	4b0f      	ldr	r3, [pc, #60]	; (8019298 <Get_SerialNum+0x44>)
 801925c:	681b      	ldr	r3, [r3, #0]
 801925e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8019260:	4b0e      	ldr	r3, [pc, #56]	; (801929c <Get_SerialNum+0x48>)
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8019266:	4b0e      	ldr	r3, [pc, #56]	; (80192a0 <Get_SerialNum+0x4c>)
 8019268:	681b      	ldr	r3, [r3, #0]
 801926a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801926c:	68fa      	ldr	r2, [r7, #12]
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	4413      	add	r3, r2
 8019272:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8019274:	68fb      	ldr	r3, [r7, #12]
 8019276:	2b00      	cmp	r3, #0
 8019278:	d009      	beq.n	801928e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801927a:	2208      	movs	r2, #8
 801927c:	4909      	ldr	r1, [pc, #36]	; (80192a4 <Get_SerialNum+0x50>)
 801927e:	68f8      	ldr	r0, [r7, #12]
 8019280:	f000 f814 	bl	80192ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8019284:	2204      	movs	r2, #4
 8019286:	4908      	ldr	r1, [pc, #32]	; (80192a8 <Get_SerialNum+0x54>)
 8019288:	68b8      	ldr	r0, [r7, #8]
 801928a:	f000 f80f 	bl	80192ac <IntToUnicode>
  }
}
 801928e:	bf00      	nop
 8019290:	3710      	adds	r7, #16
 8019292:	46bd      	mov	sp, r7
 8019294:	bd80      	pop	{r7, pc}
 8019296:	bf00      	nop
 8019298:	1fff7590 	.word	0x1fff7590
 801929c:	1fff7594 	.word	0x1fff7594
 80192a0:	1fff7598 	.word	0x1fff7598
 80192a4:	200000e6 	.word	0x200000e6
 80192a8:	200000f6 	.word	0x200000f6

080192ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80192ac:	b480      	push	{r7}
 80192ae:	b087      	sub	sp, #28
 80192b0:	af00      	add	r7, sp, #0
 80192b2:	60f8      	str	r0, [r7, #12]
 80192b4:	60b9      	str	r1, [r7, #8]
 80192b6:	4613      	mov	r3, r2
 80192b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80192ba:	2300      	movs	r3, #0
 80192bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80192be:	2300      	movs	r3, #0
 80192c0:	75fb      	strb	r3, [r7, #23]
 80192c2:	e027      	b.n	8019314 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80192c4:	68fb      	ldr	r3, [r7, #12]
 80192c6:	0f1b      	lsrs	r3, r3, #28
 80192c8:	2b09      	cmp	r3, #9
 80192ca:	d80b      	bhi.n	80192e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80192cc:	68fb      	ldr	r3, [r7, #12]
 80192ce:	0f1b      	lsrs	r3, r3, #28
 80192d0:	b2da      	uxtb	r2, r3
 80192d2:	7dfb      	ldrb	r3, [r7, #23]
 80192d4:	005b      	lsls	r3, r3, #1
 80192d6:	4619      	mov	r1, r3
 80192d8:	68bb      	ldr	r3, [r7, #8]
 80192da:	440b      	add	r3, r1
 80192dc:	3230      	adds	r2, #48	; 0x30
 80192de:	b2d2      	uxtb	r2, r2
 80192e0:	701a      	strb	r2, [r3, #0]
 80192e2:	e00a      	b.n	80192fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80192e4:	68fb      	ldr	r3, [r7, #12]
 80192e6:	0f1b      	lsrs	r3, r3, #28
 80192e8:	b2da      	uxtb	r2, r3
 80192ea:	7dfb      	ldrb	r3, [r7, #23]
 80192ec:	005b      	lsls	r3, r3, #1
 80192ee:	4619      	mov	r1, r3
 80192f0:	68bb      	ldr	r3, [r7, #8]
 80192f2:	440b      	add	r3, r1
 80192f4:	3237      	adds	r2, #55	; 0x37
 80192f6:	b2d2      	uxtb	r2, r2
 80192f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80192fa:	68fb      	ldr	r3, [r7, #12]
 80192fc:	011b      	lsls	r3, r3, #4
 80192fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019300:	7dfb      	ldrb	r3, [r7, #23]
 8019302:	005b      	lsls	r3, r3, #1
 8019304:	3301      	adds	r3, #1
 8019306:	68ba      	ldr	r2, [r7, #8]
 8019308:	4413      	add	r3, r2
 801930a:	2200      	movs	r2, #0
 801930c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801930e:	7dfb      	ldrb	r3, [r7, #23]
 8019310:	3301      	adds	r3, #1
 8019312:	75fb      	strb	r3, [r7, #23]
 8019314:	7dfa      	ldrb	r2, [r7, #23]
 8019316:	79fb      	ldrb	r3, [r7, #7]
 8019318:	429a      	cmp	r2, r3
 801931a:	d3d3      	bcc.n	80192c4 <IntToUnicode+0x18>
  }
}
 801931c:	bf00      	nop
 801931e:	bf00      	nop
 8019320:	371c      	adds	r7, #28
 8019322:	46bd      	mov	sp, r7
 8019324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019328:	4770      	bx	lr
	...

0801932c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801932c:	b580      	push	{r7, lr}
 801932e:	b0b0      	sub	sp, #192	; 0xc0
 8019330:	af00      	add	r7, sp, #0
 8019332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019334:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8019338:	2200      	movs	r2, #0
 801933a:	601a      	str	r2, [r3, #0]
 801933c:	605a      	str	r2, [r3, #4]
 801933e:	609a      	str	r2, [r3, #8]
 8019340:	60da      	str	r2, [r3, #12]
 8019342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8019344:	f107 0318 	add.w	r3, r7, #24
 8019348:	2294      	movs	r2, #148	; 0x94
 801934a:	2100      	movs	r1, #0
 801934c:	4618      	mov	r0, r3
 801934e:	f000 fc15 	bl	8019b7c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	681b      	ldr	r3, [r3, #0]
 8019356:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801935a:	d163      	bne.n	8019424 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801935c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8019360:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8019362:	2300      	movs	r3, #0
 8019364:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8019368:	f107 0318 	add.w	r3, r7, #24
 801936c:	4618      	mov	r0, r3
 801936e:	f7f2 fb59 	bl	800ba24 <HAL_RCCEx_PeriphCLKConfig>
 8019372:	4603      	mov	r3, r0
 8019374:	2b00      	cmp	r3, #0
 8019376:	d001      	beq.n	801937c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8019378:	f7eb fc0c 	bl	8004b94 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801937c:	4b2b      	ldr	r3, [pc, #172]	; (801942c <HAL_PCD_MspInit+0x100>)
 801937e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019380:	4a2a      	ldr	r2, [pc, #168]	; (801942c <HAL_PCD_MspInit+0x100>)
 8019382:	f043 0301 	orr.w	r3, r3, #1
 8019386:	64d3      	str	r3, [r2, #76]	; 0x4c
 8019388:	4b28      	ldr	r3, [pc, #160]	; (801942c <HAL_PCD_MspInit+0x100>)
 801938a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801938c:	f003 0301 	and.w	r3, r3, #1
 8019390:	617b      	str	r3, [r7, #20]
 8019392:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8019394:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8019398:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801939c:	2302      	movs	r3, #2
 801939e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80193a2:	2300      	movs	r3, #0
 80193a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80193a8:	2303      	movs	r3, #3
 80193aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80193ae:	230a      	movs	r3, #10
 80193b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80193b4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80193b8:	4619      	mov	r1, r3
 80193ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80193be:	f7ee fcdd 	bl	8007d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80193c2:	4b1a      	ldr	r3, [pc, #104]	; (801942c <HAL_PCD_MspInit+0x100>)
 80193c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80193c6:	4a19      	ldr	r2, [pc, #100]	; (801942c <HAL_PCD_MspInit+0x100>)
 80193c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80193cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80193ce:	4b17      	ldr	r3, [pc, #92]	; (801942c <HAL_PCD_MspInit+0x100>)
 80193d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80193d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80193d6:	613b      	str	r3, [r7, #16]
 80193d8:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80193da:	4b14      	ldr	r3, [pc, #80]	; (801942c <HAL_PCD_MspInit+0x100>)
 80193dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80193de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80193e2:	2b00      	cmp	r3, #0
 80193e4:	d114      	bne.n	8019410 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80193e6:	4b11      	ldr	r3, [pc, #68]	; (801942c <HAL_PCD_MspInit+0x100>)
 80193e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80193ea:	4a10      	ldr	r2, [pc, #64]	; (801942c <HAL_PCD_MspInit+0x100>)
 80193ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80193f0:	6593      	str	r3, [r2, #88]	; 0x58
 80193f2:	4b0e      	ldr	r3, [pc, #56]	; (801942c <HAL_PCD_MspInit+0x100>)
 80193f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80193f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80193fa:	60fb      	str	r3, [r7, #12]
 80193fc:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80193fe:	f7f1 fbfd 	bl	800abfc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8019402:	4b0a      	ldr	r3, [pc, #40]	; (801942c <HAL_PCD_MspInit+0x100>)
 8019404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019406:	4a09      	ldr	r2, [pc, #36]	; (801942c <HAL_PCD_MspInit+0x100>)
 8019408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801940c:	6593      	str	r3, [r2, #88]	; 0x58
 801940e:	e001      	b.n	8019414 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8019410:	f7f1 fbf4 	bl	800abfc <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8019414:	2200      	movs	r2, #0
 8019416:	2100      	movs	r1, #0
 8019418:	2043      	movs	r0, #67	; 0x43
 801941a:	f7ee f94a 	bl	80076b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801941e:	2043      	movs	r0, #67	; 0x43
 8019420:	f7ee f963 	bl	80076ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8019424:	bf00      	nop
 8019426:	37c0      	adds	r7, #192	; 0xc0
 8019428:	46bd      	mov	sp, r7
 801942a:	bd80      	pop	{r7, pc}
 801942c:	40021000 	.word	0x40021000

08019430 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019430:	b580      	push	{r7, lr}
 8019432:	b082      	sub	sp, #8
 8019434:	af00      	add	r7, sp, #0
 8019436:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8019444:	4619      	mov	r1, r3
 8019446:	4610      	mov	r0, r2
 8019448:	f7fc f9bf 	bl	80157ca <USBD_LL_SetupStage>
}
 801944c:	bf00      	nop
 801944e:	3708      	adds	r7, #8
 8019450:	46bd      	mov	sp, r7
 8019452:	bd80      	pop	{r7, pc}

08019454 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019454:	b580      	push	{r7, lr}
 8019456:	b082      	sub	sp, #8
 8019458:	af00      	add	r7, sp, #0
 801945a:	6078      	str	r0, [r7, #4]
 801945c:	460b      	mov	r3, r1
 801945e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8019466:	78fa      	ldrb	r2, [r7, #3]
 8019468:	6879      	ldr	r1, [r7, #4]
 801946a:	4613      	mov	r3, r2
 801946c:	00db      	lsls	r3, r3, #3
 801946e:	4413      	add	r3, r2
 8019470:	009b      	lsls	r3, r3, #2
 8019472:	440b      	add	r3, r1
 8019474:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8019478:	681a      	ldr	r2, [r3, #0]
 801947a:	78fb      	ldrb	r3, [r7, #3]
 801947c:	4619      	mov	r1, r3
 801947e:	f7fc f9f9 	bl	8015874 <USBD_LL_DataOutStage>
}
 8019482:	bf00      	nop
 8019484:	3708      	adds	r7, #8
 8019486:	46bd      	mov	sp, r7
 8019488:	bd80      	pop	{r7, pc}

0801948a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801948a:	b580      	push	{r7, lr}
 801948c:	b082      	sub	sp, #8
 801948e:	af00      	add	r7, sp, #0
 8019490:	6078      	str	r0, [r7, #4]
 8019492:	460b      	mov	r3, r1
 8019494:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801949c:	78fa      	ldrb	r2, [r7, #3]
 801949e:	6879      	ldr	r1, [r7, #4]
 80194a0:	4613      	mov	r3, r2
 80194a2:	00db      	lsls	r3, r3, #3
 80194a4:	4413      	add	r3, r2
 80194a6:	009b      	lsls	r3, r3, #2
 80194a8:	440b      	add	r3, r1
 80194aa:	3348      	adds	r3, #72	; 0x48
 80194ac:	681a      	ldr	r2, [r3, #0]
 80194ae:	78fb      	ldrb	r3, [r7, #3]
 80194b0:	4619      	mov	r1, r3
 80194b2:	f7fc fa92 	bl	80159da <USBD_LL_DataInStage>
}
 80194b6:	bf00      	nop
 80194b8:	3708      	adds	r7, #8
 80194ba:	46bd      	mov	sp, r7
 80194bc:	bd80      	pop	{r7, pc}

080194be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80194be:	b580      	push	{r7, lr}
 80194c0:	b082      	sub	sp, #8
 80194c2:	af00      	add	r7, sp, #0
 80194c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80194cc:	4618      	mov	r0, r3
 80194ce:	f7fc fbcc 	bl	8015c6a <USBD_LL_SOF>
}
 80194d2:	bf00      	nop
 80194d4:	3708      	adds	r7, #8
 80194d6:	46bd      	mov	sp, r7
 80194d8:	bd80      	pop	{r7, pc}

080194da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80194da:	b580      	push	{r7, lr}
 80194dc:	b084      	sub	sp, #16
 80194de:	af00      	add	r7, sp, #0
 80194e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80194e2:	2301      	movs	r3, #1
 80194e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	691b      	ldr	r3, [r3, #16]
 80194ea:	2b02      	cmp	r3, #2
 80194ec:	d001      	beq.n	80194f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80194ee:	f7eb fb51 	bl	8004b94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80194f8:	7bfa      	ldrb	r2, [r7, #15]
 80194fa:	4611      	mov	r1, r2
 80194fc:	4618      	mov	r0, r3
 80194fe:	f7fc fb70 	bl	8015be2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019508:	4618      	mov	r0, r3
 801950a:	f7fc fb18 	bl	8015b3e <USBD_LL_Reset>
}
 801950e:	bf00      	nop
 8019510:	3710      	adds	r7, #16
 8019512:	46bd      	mov	sp, r7
 8019514:	bd80      	pop	{r7, pc}
	...

08019518 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019518:	b580      	push	{r7, lr}
 801951a:	b082      	sub	sp, #8
 801951c:	af00      	add	r7, sp, #0
 801951e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	681b      	ldr	r3, [r3, #0]
 8019524:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019528:	681b      	ldr	r3, [r3, #0]
 801952a:	687a      	ldr	r2, [r7, #4]
 801952c:	6812      	ldr	r2, [r2, #0]
 801952e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019532:	f043 0301 	orr.w	r3, r3, #1
 8019536:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019538:	687b      	ldr	r3, [r7, #4]
 801953a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801953e:	4618      	mov	r0, r3
 8019540:	f7fc fb5f 	bl	8015c02 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	6a1b      	ldr	r3, [r3, #32]
 8019548:	2b00      	cmp	r3, #0
 801954a:	d005      	beq.n	8019558 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801954c:	4b04      	ldr	r3, [pc, #16]	; (8019560 <HAL_PCD_SuspendCallback+0x48>)
 801954e:	691b      	ldr	r3, [r3, #16]
 8019550:	4a03      	ldr	r2, [pc, #12]	; (8019560 <HAL_PCD_SuspendCallback+0x48>)
 8019552:	f043 0306 	orr.w	r3, r3, #6
 8019556:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8019558:	bf00      	nop
 801955a:	3708      	adds	r7, #8
 801955c:	46bd      	mov	sp, r7
 801955e:	bd80      	pop	{r7, pc}
 8019560:	e000ed00 	.word	0xe000ed00

08019564 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019564:	b580      	push	{r7, lr}
 8019566:	b082      	sub	sp, #8
 8019568:	af00      	add	r7, sp, #0
 801956a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019574:	681b      	ldr	r3, [r3, #0]
 8019576:	687a      	ldr	r2, [r7, #4]
 8019578:	6812      	ldr	r2, [r2, #0]
 801957a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801957e:	f023 0301 	bic.w	r3, r3, #1
 8019582:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	6a1b      	ldr	r3, [r3, #32]
 8019588:	2b00      	cmp	r3, #0
 801958a:	d007      	beq.n	801959c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801958c:	4b08      	ldr	r3, [pc, #32]	; (80195b0 <HAL_PCD_ResumeCallback+0x4c>)
 801958e:	691b      	ldr	r3, [r3, #16]
 8019590:	4a07      	ldr	r2, [pc, #28]	; (80195b0 <HAL_PCD_ResumeCallback+0x4c>)
 8019592:	f023 0306 	bic.w	r3, r3, #6
 8019596:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8019598:	f000 faa8 	bl	8019aec <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80195a2:	4618      	mov	r0, r3
 80195a4:	f7fc fb49 	bl	8015c3a <USBD_LL_Resume>
}
 80195a8:	bf00      	nop
 80195aa:	3708      	adds	r7, #8
 80195ac:	46bd      	mov	sp, r7
 80195ae:	bd80      	pop	{r7, pc}
 80195b0:	e000ed00 	.word	0xe000ed00

080195b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80195b4:	b580      	push	{r7, lr}
 80195b6:	b082      	sub	sp, #8
 80195b8:	af00      	add	r7, sp, #0
 80195ba:	6078      	str	r0, [r7, #4]
 80195bc:	460b      	mov	r3, r1
 80195be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80195c6:	78fa      	ldrb	r2, [r7, #3]
 80195c8:	4611      	mov	r1, r2
 80195ca:	4618      	mov	r0, r3
 80195cc:	f7fc fb9f 	bl	8015d0e <USBD_LL_IsoOUTIncomplete>
}
 80195d0:	bf00      	nop
 80195d2:	3708      	adds	r7, #8
 80195d4:	46bd      	mov	sp, r7
 80195d6:	bd80      	pop	{r7, pc}

080195d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80195d8:	b580      	push	{r7, lr}
 80195da:	b082      	sub	sp, #8
 80195dc:	af00      	add	r7, sp, #0
 80195de:	6078      	str	r0, [r7, #4]
 80195e0:	460b      	mov	r3, r1
 80195e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80195ea:	78fa      	ldrb	r2, [r7, #3]
 80195ec:	4611      	mov	r1, r2
 80195ee:	4618      	mov	r0, r3
 80195f0:	f7fc fb5b 	bl	8015caa <USBD_LL_IsoINIncomplete>
}
 80195f4:	bf00      	nop
 80195f6:	3708      	adds	r7, #8
 80195f8:	46bd      	mov	sp, r7
 80195fa:	bd80      	pop	{r7, pc}

080195fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80195fc:	b580      	push	{r7, lr}
 80195fe:	b082      	sub	sp, #8
 8019600:	af00      	add	r7, sp, #0
 8019602:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801960a:	4618      	mov	r0, r3
 801960c:	f7fc fbb1 	bl	8015d72 <USBD_LL_DevConnected>
}
 8019610:	bf00      	nop
 8019612:	3708      	adds	r7, #8
 8019614:	46bd      	mov	sp, r7
 8019616:	bd80      	pop	{r7, pc}

08019618 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019618:	b580      	push	{r7, lr}
 801961a:	b082      	sub	sp, #8
 801961c:	af00      	add	r7, sp, #0
 801961e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019626:	4618      	mov	r0, r3
 8019628:	f7fc fbae 	bl	8015d88 <USBD_LL_DevDisconnected>
}
 801962c:	bf00      	nop
 801962e:	3708      	adds	r7, #8
 8019630:	46bd      	mov	sp, r7
 8019632:	bd80      	pop	{r7, pc}

08019634 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019634:	b580      	push	{r7, lr}
 8019636:	b082      	sub	sp, #8
 8019638:	af00      	add	r7, sp, #0
 801963a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	781b      	ldrb	r3, [r3, #0]
 8019640:	2b00      	cmp	r3, #0
 8019642:	d13c      	bne.n	80196be <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019644:	4a20      	ldr	r2, [pc, #128]	; (80196c8 <USBD_LL_Init+0x94>)
 8019646:	687b      	ldr	r3, [r7, #4]
 8019648:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801964c:	687b      	ldr	r3, [r7, #4]
 801964e:	4a1e      	ldr	r2, [pc, #120]	; (80196c8 <USBD_LL_Init+0x94>)
 8019650:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019654:	4b1c      	ldr	r3, [pc, #112]	; (80196c8 <USBD_LL_Init+0x94>)
 8019656:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801965a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801965c:	4b1a      	ldr	r3, [pc, #104]	; (80196c8 <USBD_LL_Init+0x94>)
 801965e:	2206      	movs	r2, #6
 8019660:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8019662:	4b19      	ldr	r3, [pc, #100]	; (80196c8 <USBD_LL_Init+0x94>)
 8019664:	2202      	movs	r2, #2
 8019666:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019668:	4b17      	ldr	r3, [pc, #92]	; (80196c8 <USBD_LL_Init+0x94>)
 801966a:	2202      	movs	r2, #2
 801966c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801966e:	4b16      	ldr	r3, [pc, #88]	; (80196c8 <USBD_LL_Init+0x94>)
 8019670:	2200      	movs	r2, #0
 8019672:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8019674:	4b14      	ldr	r3, [pc, #80]	; (80196c8 <USBD_LL_Init+0x94>)
 8019676:	2200      	movs	r2, #0
 8019678:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801967a:	4b13      	ldr	r3, [pc, #76]	; (80196c8 <USBD_LL_Init+0x94>)
 801967c:	2200      	movs	r2, #0
 801967e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8019680:	4b11      	ldr	r3, [pc, #68]	; (80196c8 <USBD_LL_Init+0x94>)
 8019682:	2200      	movs	r2, #0
 8019684:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8019686:	4b10      	ldr	r3, [pc, #64]	; (80196c8 <USBD_LL_Init+0x94>)
 8019688:	2200      	movs	r2, #0
 801968a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801968c:	4b0e      	ldr	r3, [pc, #56]	; (80196c8 <USBD_LL_Init+0x94>)
 801968e:	2200      	movs	r2, #0
 8019690:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8019692:	480d      	ldr	r0, [pc, #52]	; (80196c8 <USBD_LL_Init+0x94>)
 8019694:	f7f0 f83b 	bl	800970e <HAL_PCD_Init>
 8019698:	4603      	mov	r3, r0
 801969a:	2b00      	cmp	r3, #0
 801969c:	d001      	beq.n	80196a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801969e:	f7eb fa79 	bl	8004b94 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80196a2:	2180      	movs	r1, #128	; 0x80
 80196a4:	4808      	ldr	r0, [pc, #32]	; (80196c8 <USBD_LL_Init+0x94>)
 80196a6:	f7f1 f9a4 	bl	800a9f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80196aa:	2240      	movs	r2, #64	; 0x40
 80196ac:	2100      	movs	r1, #0
 80196ae:	4806      	ldr	r0, [pc, #24]	; (80196c8 <USBD_LL_Init+0x94>)
 80196b0:	f7f1 f958 	bl	800a964 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80196b4:	2280      	movs	r2, #128	; 0x80
 80196b6:	2101      	movs	r1, #1
 80196b8:	4803      	ldr	r0, [pc, #12]	; (80196c8 <USBD_LL_Init+0x94>)
 80196ba:	f7f1 f953 	bl	800a964 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80196be:	2300      	movs	r3, #0
}
 80196c0:	4618      	mov	r0, r3
 80196c2:	3708      	adds	r7, #8
 80196c4:	46bd      	mov	sp, r7
 80196c6:	bd80      	pop	{r7, pc}
 80196c8:	20002890 	.word	0x20002890

080196cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80196cc:	b580      	push	{r7, lr}
 80196ce:	b084      	sub	sp, #16
 80196d0:	af00      	add	r7, sp, #0
 80196d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80196d4:	2300      	movs	r3, #0
 80196d6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80196d8:	2300      	movs	r3, #0
 80196da:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80196e2:	4618      	mov	r0, r3
 80196e4:	f7f0 f937 	bl	8009956 <HAL_PCD_Start>
 80196e8:	4603      	mov	r3, r0
 80196ea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80196ec:	7bbb      	ldrb	r3, [r7, #14]
 80196ee:	2b03      	cmp	r3, #3
 80196f0:	d816      	bhi.n	8019720 <USBD_LL_Start+0x54>
 80196f2:	a201      	add	r2, pc, #4	; (adr r2, 80196f8 <USBD_LL_Start+0x2c>)
 80196f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80196f8:	08019709 	.word	0x08019709
 80196fc:	0801970f 	.word	0x0801970f
 8019700:	08019715 	.word	0x08019715
 8019704:	0801971b 	.word	0x0801971b
    case HAL_OK :
      usb_status = USBD_OK;
 8019708:	2300      	movs	r3, #0
 801970a:	73fb      	strb	r3, [r7, #15]
    break;
 801970c:	e00b      	b.n	8019726 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801970e:	2303      	movs	r3, #3
 8019710:	73fb      	strb	r3, [r7, #15]
    break;
 8019712:	e008      	b.n	8019726 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019714:	2301      	movs	r3, #1
 8019716:	73fb      	strb	r3, [r7, #15]
    break;
 8019718:	e005      	b.n	8019726 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801971a:	2303      	movs	r3, #3
 801971c:	73fb      	strb	r3, [r7, #15]
    break;
 801971e:	e002      	b.n	8019726 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8019720:	2303      	movs	r3, #3
 8019722:	73fb      	strb	r3, [r7, #15]
    break;
 8019724:	bf00      	nop
  }
  return usb_status;
 8019726:	7bfb      	ldrb	r3, [r7, #15]
}
 8019728:	4618      	mov	r0, r3
 801972a:	3710      	adds	r7, #16
 801972c:	46bd      	mov	sp, r7
 801972e:	bd80      	pop	{r7, pc}

08019730 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019730:	b580      	push	{r7, lr}
 8019732:	b084      	sub	sp, #16
 8019734:	af00      	add	r7, sp, #0
 8019736:	6078      	str	r0, [r7, #4]
 8019738:	4608      	mov	r0, r1
 801973a:	4611      	mov	r1, r2
 801973c:	461a      	mov	r2, r3
 801973e:	4603      	mov	r3, r0
 8019740:	70fb      	strb	r3, [r7, #3]
 8019742:	460b      	mov	r3, r1
 8019744:	70bb      	strb	r3, [r7, #2]
 8019746:	4613      	mov	r3, r2
 8019748:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801974a:	2300      	movs	r3, #0
 801974c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801974e:	2300      	movs	r3, #0
 8019750:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019752:	687b      	ldr	r3, [r7, #4]
 8019754:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8019758:	78bb      	ldrb	r3, [r7, #2]
 801975a:	883a      	ldrh	r2, [r7, #0]
 801975c:	78f9      	ldrb	r1, [r7, #3]
 801975e:	f7f0 fde1 	bl	800a324 <HAL_PCD_EP_Open>
 8019762:	4603      	mov	r3, r0
 8019764:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019766:	7bbb      	ldrb	r3, [r7, #14]
 8019768:	2b03      	cmp	r3, #3
 801976a:	d817      	bhi.n	801979c <USBD_LL_OpenEP+0x6c>
 801976c:	a201      	add	r2, pc, #4	; (adr r2, 8019774 <USBD_LL_OpenEP+0x44>)
 801976e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019772:	bf00      	nop
 8019774:	08019785 	.word	0x08019785
 8019778:	0801978b 	.word	0x0801978b
 801977c:	08019791 	.word	0x08019791
 8019780:	08019797 	.word	0x08019797
    case HAL_OK :
      usb_status = USBD_OK;
 8019784:	2300      	movs	r3, #0
 8019786:	73fb      	strb	r3, [r7, #15]
    break;
 8019788:	e00b      	b.n	80197a2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801978a:	2303      	movs	r3, #3
 801978c:	73fb      	strb	r3, [r7, #15]
    break;
 801978e:	e008      	b.n	80197a2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019790:	2301      	movs	r3, #1
 8019792:	73fb      	strb	r3, [r7, #15]
    break;
 8019794:	e005      	b.n	80197a2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019796:	2303      	movs	r3, #3
 8019798:	73fb      	strb	r3, [r7, #15]
    break;
 801979a:	e002      	b.n	80197a2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 801979c:	2303      	movs	r3, #3
 801979e:	73fb      	strb	r3, [r7, #15]
    break;
 80197a0:	bf00      	nop
  }
  return usb_status;
 80197a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80197a4:	4618      	mov	r0, r3
 80197a6:	3710      	adds	r7, #16
 80197a8:	46bd      	mov	sp, r7
 80197aa:	bd80      	pop	{r7, pc}

080197ac <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80197ac:	b580      	push	{r7, lr}
 80197ae:	b084      	sub	sp, #16
 80197b0:	af00      	add	r7, sp, #0
 80197b2:	6078      	str	r0, [r7, #4]
 80197b4:	460b      	mov	r3, r1
 80197b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80197b8:	2300      	movs	r3, #0
 80197ba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80197bc:	2300      	movs	r3, #0
 80197be:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80197c6:	78fa      	ldrb	r2, [r7, #3]
 80197c8:	4611      	mov	r1, r2
 80197ca:	4618      	mov	r0, r3
 80197cc:	f7f0 fe12 	bl	800a3f4 <HAL_PCD_EP_Close>
 80197d0:	4603      	mov	r3, r0
 80197d2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80197d4:	7bbb      	ldrb	r3, [r7, #14]
 80197d6:	2b03      	cmp	r3, #3
 80197d8:	d816      	bhi.n	8019808 <USBD_LL_CloseEP+0x5c>
 80197da:	a201      	add	r2, pc, #4	; (adr r2, 80197e0 <USBD_LL_CloseEP+0x34>)
 80197dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80197e0:	080197f1 	.word	0x080197f1
 80197e4:	080197f7 	.word	0x080197f7
 80197e8:	080197fd 	.word	0x080197fd
 80197ec:	08019803 	.word	0x08019803
    case HAL_OK :
      usb_status = USBD_OK;
 80197f0:	2300      	movs	r3, #0
 80197f2:	73fb      	strb	r3, [r7, #15]
    break;
 80197f4:	e00b      	b.n	801980e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80197f6:	2303      	movs	r3, #3
 80197f8:	73fb      	strb	r3, [r7, #15]
    break;
 80197fa:	e008      	b.n	801980e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80197fc:	2301      	movs	r3, #1
 80197fe:	73fb      	strb	r3, [r7, #15]
    break;
 8019800:	e005      	b.n	801980e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019802:	2303      	movs	r3, #3
 8019804:	73fb      	strb	r3, [r7, #15]
    break;
 8019806:	e002      	b.n	801980e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019808:	2303      	movs	r3, #3
 801980a:	73fb      	strb	r3, [r7, #15]
    break;
 801980c:	bf00      	nop
  }
  return usb_status;
 801980e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019810:	4618      	mov	r0, r3
 8019812:	3710      	adds	r7, #16
 8019814:	46bd      	mov	sp, r7
 8019816:	bd80      	pop	{r7, pc}

08019818 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019818:	b580      	push	{r7, lr}
 801981a:	b084      	sub	sp, #16
 801981c:	af00      	add	r7, sp, #0
 801981e:	6078      	str	r0, [r7, #4]
 8019820:	460b      	mov	r3, r1
 8019822:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019824:	2300      	movs	r3, #0
 8019826:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019828:	2300      	movs	r3, #0
 801982a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019832:	78fa      	ldrb	r2, [r7, #3]
 8019834:	4611      	mov	r1, r2
 8019836:	4618      	mov	r0, r3
 8019838:	f7f0 fea1 	bl	800a57e <HAL_PCD_EP_SetStall>
 801983c:	4603      	mov	r3, r0
 801983e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019840:	7bbb      	ldrb	r3, [r7, #14]
 8019842:	2b03      	cmp	r3, #3
 8019844:	d816      	bhi.n	8019874 <USBD_LL_StallEP+0x5c>
 8019846:	a201      	add	r2, pc, #4	; (adr r2, 801984c <USBD_LL_StallEP+0x34>)
 8019848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801984c:	0801985d 	.word	0x0801985d
 8019850:	08019863 	.word	0x08019863
 8019854:	08019869 	.word	0x08019869
 8019858:	0801986f 	.word	0x0801986f
    case HAL_OK :
      usb_status = USBD_OK;
 801985c:	2300      	movs	r3, #0
 801985e:	73fb      	strb	r3, [r7, #15]
    break;
 8019860:	e00b      	b.n	801987a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019862:	2303      	movs	r3, #3
 8019864:	73fb      	strb	r3, [r7, #15]
    break;
 8019866:	e008      	b.n	801987a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019868:	2301      	movs	r3, #1
 801986a:	73fb      	strb	r3, [r7, #15]
    break;
 801986c:	e005      	b.n	801987a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801986e:	2303      	movs	r3, #3
 8019870:	73fb      	strb	r3, [r7, #15]
    break;
 8019872:	e002      	b.n	801987a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019874:	2303      	movs	r3, #3
 8019876:	73fb      	strb	r3, [r7, #15]
    break;
 8019878:	bf00      	nop
  }
  return usb_status;
 801987a:	7bfb      	ldrb	r3, [r7, #15]
}
 801987c:	4618      	mov	r0, r3
 801987e:	3710      	adds	r7, #16
 8019880:	46bd      	mov	sp, r7
 8019882:	bd80      	pop	{r7, pc}

08019884 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019884:	b580      	push	{r7, lr}
 8019886:	b084      	sub	sp, #16
 8019888:	af00      	add	r7, sp, #0
 801988a:	6078      	str	r0, [r7, #4]
 801988c:	460b      	mov	r3, r1
 801988e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019890:	2300      	movs	r3, #0
 8019892:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019894:	2300      	movs	r3, #0
 8019896:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801989e:	78fa      	ldrb	r2, [r7, #3]
 80198a0:	4611      	mov	r1, r2
 80198a2:	4618      	mov	r0, r3
 80198a4:	f7f0 fecd 	bl	800a642 <HAL_PCD_EP_ClrStall>
 80198a8:	4603      	mov	r3, r0
 80198aa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80198ac:	7bbb      	ldrb	r3, [r7, #14]
 80198ae:	2b03      	cmp	r3, #3
 80198b0:	d816      	bhi.n	80198e0 <USBD_LL_ClearStallEP+0x5c>
 80198b2:	a201      	add	r2, pc, #4	; (adr r2, 80198b8 <USBD_LL_ClearStallEP+0x34>)
 80198b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80198b8:	080198c9 	.word	0x080198c9
 80198bc:	080198cf 	.word	0x080198cf
 80198c0:	080198d5 	.word	0x080198d5
 80198c4:	080198db 	.word	0x080198db
    case HAL_OK :
      usb_status = USBD_OK;
 80198c8:	2300      	movs	r3, #0
 80198ca:	73fb      	strb	r3, [r7, #15]
    break;
 80198cc:	e00b      	b.n	80198e6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80198ce:	2303      	movs	r3, #3
 80198d0:	73fb      	strb	r3, [r7, #15]
    break;
 80198d2:	e008      	b.n	80198e6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80198d4:	2301      	movs	r3, #1
 80198d6:	73fb      	strb	r3, [r7, #15]
    break;
 80198d8:	e005      	b.n	80198e6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80198da:	2303      	movs	r3, #3
 80198dc:	73fb      	strb	r3, [r7, #15]
    break;
 80198de:	e002      	b.n	80198e6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80198e0:	2303      	movs	r3, #3
 80198e2:	73fb      	strb	r3, [r7, #15]
    break;
 80198e4:	bf00      	nop
  }
  return usb_status;
 80198e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80198e8:	4618      	mov	r0, r3
 80198ea:	3710      	adds	r7, #16
 80198ec:	46bd      	mov	sp, r7
 80198ee:	bd80      	pop	{r7, pc}

080198f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80198f0:	b480      	push	{r7}
 80198f2:	b085      	sub	sp, #20
 80198f4:	af00      	add	r7, sp, #0
 80198f6:	6078      	str	r0, [r7, #4]
 80198f8:	460b      	mov	r3, r1
 80198fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019902:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019904:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019908:	2b00      	cmp	r3, #0
 801990a:	da0b      	bge.n	8019924 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801990c:	78fb      	ldrb	r3, [r7, #3]
 801990e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019912:	68f9      	ldr	r1, [r7, #12]
 8019914:	4613      	mov	r3, r2
 8019916:	00db      	lsls	r3, r3, #3
 8019918:	4413      	add	r3, r2
 801991a:	009b      	lsls	r3, r3, #2
 801991c:	440b      	add	r3, r1
 801991e:	333e      	adds	r3, #62	; 0x3e
 8019920:	781b      	ldrb	r3, [r3, #0]
 8019922:	e00b      	b.n	801993c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019924:	78fb      	ldrb	r3, [r7, #3]
 8019926:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801992a:	68f9      	ldr	r1, [r7, #12]
 801992c:	4613      	mov	r3, r2
 801992e:	00db      	lsls	r3, r3, #3
 8019930:	4413      	add	r3, r2
 8019932:	009b      	lsls	r3, r3, #2
 8019934:	440b      	add	r3, r1
 8019936:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801993a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801993c:	4618      	mov	r0, r3
 801993e:	3714      	adds	r7, #20
 8019940:	46bd      	mov	sp, r7
 8019942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019946:	4770      	bx	lr

08019948 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019948:	b580      	push	{r7, lr}
 801994a:	b084      	sub	sp, #16
 801994c:	af00      	add	r7, sp, #0
 801994e:	6078      	str	r0, [r7, #4]
 8019950:	460b      	mov	r3, r1
 8019952:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019954:	2300      	movs	r3, #0
 8019956:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019958:	2300      	movs	r3, #0
 801995a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019962:	78fa      	ldrb	r2, [r7, #3]
 8019964:	4611      	mov	r1, r2
 8019966:	4618      	mov	r0, r3
 8019968:	f7f0 fcb7 	bl	800a2da <HAL_PCD_SetAddress>
 801996c:	4603      	mov	r3, r0
 801996e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019970:	7bbb      	ldrb	r3, [r7, #14]
 8019972:	2b03      	cmp	r3, #3
 8019974:	d816      	bhi.n	80199a4 <USBD_LL_SetUSBAddress+0x5c>
 8019976:	a201      	add	r2, pc, #4	; (adr r2, 801997c <USBD_LL_SetUSBAddress+0x34>)
 8019978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801997c:	0801998d 	.word	0x0801998d
 8019980:	08019993 	.word	0x08019993
 8019984:	08019999 	.word	0x08019999
 8019988:	0801999f 	.word	0x0801999f
    case HAL_OK :
      usb_status = USBD_OK;
 801998c:	2300      	movs	r3, #0
 801998e:	73fb      	strb	r3, [r7, #15]
    break;
 8019990:	e00b      	b.n	80199aa <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019992:	2303      	movs	r3, #3
 8019994:	73fb      	strb	r3, [r7, #15]
    break;
 8019996:	e008      	b.n	80199aa <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019998:	2301      	movs	r3, #1
 801999a:	73fb      	strb	r3, [r7, #15]
    break;
 801999c:	e005      	b.n	80199aa <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801999e:	2303      	movs	r3, #3
 80199a0:	73fb      	strb	r3, [r7, #15]
    break;
 80199a2:	e002      	b.n	80199aa <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80199a4:	2303      	movs	r3, #3
 80199a6:	73fb      	strb	r3, [r7, #15]
    break;
 80199a8:	bf00      	nop
  }
  return usb_status;
 80199aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80199ac:	4618      	mov	r0, r3
 80199ae:	3710      	adds	r7, #16
 80199b0:	46bd      	mov	sp, r7
 80199b2:	bd80      	pop	{r7, pc}

080199b4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80199b4:	b580      	push	{r7, lr}
 80199b6:	b086      	sub	sp, #24
 80199b8:	af00      	add	r7, sp, #0
 80199ba:	60f8      	str	r0, [r7, #12]
 80199bc:	607a      	str	r2, [r7, #4]
 80199be:	603b      	str	r3, [r7, #0]
 80199c0:	460b      	mov	r3, r1
 80199c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80199c4:	2300      	movs	r3, #0
 80199c6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80199c8:	2300      	movs	r3, #0
 80199ca:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80199cc:	68fb      	ldr	r3, [r7, #12]
 80199ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80199d2:	7af9      	ldrb	r1, [r7, #11]
 80199d4:	683b      	ldr	r3, [r7, #0]
 80199d6:	687a      	ldr	r2, [r7, #4]
 80199d8:	f7f0 fda0 	bl	800a51c <HAL_PCD_EP_Transmit>
 80199dc:	4603      	mov	r3, r0
 80199de:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80199e0:	7dbb      	ldrb	r3, [r7, #22]
 80199e2:	2b03      	cmp	r3, #3
 80199e4:	d816      	bhi.n	8019a14 <USBD_LL_Transmit+0x60>
 80199e6:	a201      	add	r2, pc, #4	; (adr r2, 80199ec <USBD_LL_Transmit+0x38>)
 80199e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80199ec:	080199fd 	.word	0x080199fd
 80199f0:	08019a03 	.word	0x08019a03
 80199f4:	08019a09 	.word	0x08019a09
 80199f8:	08019a0f 	.word	0x08019a0f
    case HAL_OK :
      usb_status = USBD_OK;
 80199fc:	2300      	movs	r3, #0
 80199fe:	75fb      	strb	r3, [r7, #23]
    break;
 8019a00:	e00b      	b.n	8019a1a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019a02:	2303      	movs	r3, #3
 8019a04:	75fb      	strb	r3, [r7, #23]
    break;
 8019a06:	e008      	b.n	8019a1a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019a08:	2301      	movs	r3, #1
 8019a0a:	75fb      	strb	r3, [r7, #23]
    break;
 8019a0c:	e005      	b.n	8019a1a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019a0e:	2303      	movs	r3, #3
 8019a10:	75fb      	strb	r3, [r7, #23]
    break;
 8019a12:	e002      	b.n	8019a1a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8019a14:	2303      	movs	r3, #3
 8019a16:	75fb      	strb	r3, [r7, #23]
    break;
 8019a18:	bf00      	nop
  }
  return usb_status;
 8019a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8019a1c:	4618      	mov	r0, r3
 8019a1e:	3718      	adds	r7, #24
 8019a20:	46bd      	mov	sp, r7
 8019a22:	bd80      	pop	{r7, pc}

08019a24 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019a24:	b580      	push	{r7, lr}
 8019a26:	b086      	sub	sp, #24
 8019a28:	af00      	add	r7, sp, #0
 8019a2a:	60f8      	str	r0, [r7, #12]
 8019a2c:	607a      	str	r2, [r7, #4]
 8019a2e:	603b      	str	r3, [r7, #0]
 8019a30:	460b      	mov	r3, r1
 8019a32:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a34:	2300      	movs	r3, #0
 8019a36:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019a38:	2300      	movs	r3, #0
 8019a3a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019a3c:	68fb      	ldr	r3, [r7, #12]
 8019a3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8019a42:	7af9      	ldrb	r1, [r7, #11]
 8019a44:	683b      	ldr	r3, [r7, #0]
 8019a46:	687a      	ldr	r2, [r7, #4]
 8019a48:	f7f0 fd1e 	bl	800a488 <HAL_PCD_EP_Receive>
 8019a4c:	4603      	mov	r3, r0
 8019a4e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8019a50:	7dbb      	ldrb	r3, [r7, #22]
 8019a52:	2b03      	cmp	r3, #3
 8019a54:	d816      	bhi.n	8019a84 <USBD_LL_PrepareReceive+0x60>
 8019a56:	a201      	add	r2, pc, #4	; (adr r2, 8019a5c <USBD_LL_PrepareReceive+0x38>)
 8019a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a5c:	08019a6d 	.word	0x08019a6d
 8019a60:	08019a73 	.word	0x08019a73
 8019a64:	08019a79 	.word	0x08019a79
 8019a68:	08019a7f 	.word	0x08019a7f
    case HAL_OK :
      usb_status = USBD_OK;
 8019a6c:	2300      	movs	r3, #0
 8019a6e:	75fb      	strb	r3, [r7, #23]
    break;
 8019a70:	e00b      	b.n	8019a8a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019a72:	2303      	movs	r3, #3
 8019a74:	75fb      	strb	r3, [r7, #23]
    break;
 8019a76:	e008      	b.n	8019a8a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019a78:	2301      	movs	r3, #1
 8019a7a:	75fb      	strb	r3, [r7, #23]
    break;
 8019a7c:	e005      	b.n	8019a8a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019a7e:	2303      	movs	r3, #3
 8019a80:	75fb      	strb	r3, [r7, #23]
    break;
 8019a82:	e002      	b.n	8019a8a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8019a84:	2303      	movs	r3, #3
 8019a86:	75fb      	strb	r3, [r7, #23]
    break;
 8019a88:	bf00      	nop
  }
  return usb_status;
 8019a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8019a8c:	4618      	mov	r0, r3
 8019a8e:	3718      	adds	r7, #24
 8019a90:	46bd      	mov	sp, r7
 8019a92:	bd80      	pop	{r7, pc}

08019a94 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019a94:	b580      	push	{r7, lr}
 8019a96:	b082      	sub	sp, #8
 8019a98:	af00      	add	r7, sp, #0
 8019a9a:	6078      	str	r0, [r7, #4]
 8019a9c:	460b      	mov	r3, r1
 8019a9e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019aa6:	78fa      	ldrb	r2, [r7, #3]
 8019aa8:	4611      	mov	r1, r2
 8019aaa:	4618      	mov	r0, r3
 8019aac:	f7f0 fd1e 	bl	800a4ec <HAL_PCD_EP_GetRxCount>
 8019ab0:	4603      	mov	r3, r0
}
 8019ab2:	4618      	mov	r0, r3
 8019ab4:	3708      	adds	r7, #8
 8019ab6:	46bd      	mov	sp, r7
 8019ab8:	bd80      	pop	{r7, pc}
	...

08019abc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019abc:	b480      	push	{r7}
 8019abe:	b083      	sub	sp, #12
 8019ac0:	af00      	add	r7, sp, #0
 8019ac2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019ac4:	4b03      	ldr	r3, [pc, #12]	; (8019ad4 <USBD_static_malloc+0x18>)
}
 8019ac6:	4618      	mov	r0, r3
 8019ac8:	370c      	adds	r7, #12
 8019aca:	46bd      	mov	sp, r7
 8019acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ad0:	4770      	bx	lr
 8019ad2:	bf00      	nop
 8019ad4:	20002d9c 	.word	0x20002d9c

08019ad8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019ad8:	b480      	push	{r7}
 8019ada:	b083      	sub	sp, #12
 8019adc:	af00      	add	r7, sp, #0
 8019ade:	6078      	str	r0, [r7, #4]

}
 8019ae0:	bf00      	nop
 8019ae2:	370c      	adds	r7, #12
 8019ae4:	46bd      	mov	sp, r7
 8019ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aea:	4770      	bx	lr

08019aec <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8019aec:	b580      	push	{r7, lr}
 8019aee:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8019af0:	f7ea fd1e 	bl	8004530 <SystemClock_Config>
}
 8019af4:	bf00      	nop
 8019af6:	bd80      	pop	{r7, pc}

08019af8 <__libc_init_array>:
 8019af8:	b570      	push	{r4, r5, r6, lr}
 8019afa:	4d0d      	ldr	r5, [pc, #52]	; (8019b30 <__libc_init_array+0x38>)
 8019afc:	4c0d      	ldr	r4, [pc, #52]	; (8019b34 <__libc_init_array+0x3c>)
 8019afe:	1b64      	subs	r4, r4, r5
 8019b00:	10a4      	asrs	r4, r4, #2
 8019b02:	2600      	movs	r6, #0
 8019b04:	42a6      	cmp	r6, r4
 8019b06:	d109      	bne.n	8019b1c <__libc_init_array+0x24>
 8019b08:	4d0b      	ldr	r5, [pc, #44]	; (8019b38 <__libc_init_array+0x40>)
 8019b0a:	4c0c      	ldr	r4, [pc, #48]	; (8019b3c <__libc_init_array+0x44>)
 8019b0c:	f003 f808 	bl	801cb20 <_init>
 8019b10:	1b64      	subs	r4, r4, r5
 8019b12:	10a4      	asrs	r4, r4, #2
 8019b14:	2600      	movs	r6, #0
 8019b16:	42a6      	cmp	r6, r4
 8019b18:	d105      	bne.n	8019b26 <__libc_init_array+0x2e>
 8019b1a:	bd70      	pop	{r4, r5, r6, pc}
 8019b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019b20:	4798      	blx	r3
 8019b22:	3601      	adds	r6, #1
 8019b24:	e7ee      	b.n	8019b04 <__libc_init_array+0xc>
 8019b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8019b2a:	4798      	blx	r3
 8019b2c:	3601      	adds	r6, #1
 8019b2e:	e7f2      	b.n	8019b16 <__libc_init_array+0x1e>
 8019b30:	0801d640 	.word	0x0801d640
 8019b34:	0801d640 	.word	0x0801d640
 8019b38:	0801d640 	.word	0x0801d640
 8019b3c:	0801d644 	.word	0x0801d644

08019b40 <malloc>:
 8019b40:	4b02      	ldr	r3, [pc, #8]	; (8019b4c <malloc+0xc>)
 8019b42:	4601      	mov	r1, r0
 8019b44:	6818      	ldr	r0, [r3, #0]
 8019b46:	f000 b88d 	b.w	8019c64 <_malloc_r>
 8019b4a:	bf00      	nop
 8019b4c:	20000100 	.word	0x20000100

08019b50 <free>:
 8019b50:	4b02      	ldr	r3, [pc, #8]	; (8019b5c <free+0xc>)
 8019b52:	4601      	mov	r1, r0
 8019b54:	6818      	ldr	r0, [r3, #0]
 8019b56:	f000 b819 	b.w	8019b8c <_free_r>
 8019b5a:	bf00      	nop
 8019b5c:	20000100 	.word	0x20000100

08019b60 <memcpy>:
 8019b60:	440a      	add	r2, r1
 8019b62:	4291      	cmp	r1, r2
 8019b64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019b68:	d100      	bne.n	8019b6c <memcpy+0xc>
 8019b6a:	4770      	bx	lr
 8019b6c:	b510      	push	{r4, lr}
 8019b6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019b72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019b76:	4291      	cmp	r1, r2
 8019b78:	d1f9      	bne.n	8019b6e <memcpy+0xe>
 8019b7a:	bd10      	pop	{r4, pc}

08019b7c <memset>:
 8019b7c:	4402      	add	r2, r0
 8019b7e:	4603      	mov	r3, r0
 8019b80:	4293      	cmp	r3, r2
 8019b82:	d100      	bne.n	8019b86 <memset+0xa>
 8019b84:	4770      	bx	lr
 8019b86:	f803 1b01 	strb.w	r1, [r3], #1
 8019b8a:	e7f9      	b.n	8019b80 <memset+0x4>

08019b8c <_free_r>:
 8019b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019b8e:	2900      	cmp	r1, #0
 8019b90:	d044      	beq.n	8019c1c <_free_r+0x90>
 8019b92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019b96:	9001      	str	r0, [sp, #4]
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	f1a1 0404 	sub.w	r4, r1, #4
 8019b9e:	bfb8      	it	lt
 8019ba0:	18e4      	addlt	r4, r4, r3
 8019ba2:	f001 fdd1 	bl	801b748 <__malloc_lock>
 8019ba6:	4a1e      	ldr	r2, [pc, #120]	; (8019c20 <_free_r+0x94>)
 8019ba8:	9801      	ldr	r0, [sp, #4]
 8019baa:	6813      	ldr	r3, [r2, #0]
 8019bac:	b933      	cbnz	r3, 8019bbc <_free_r+0x30>
 8019bae:	6063      	str	r3, [r4, #4]
 8019bb0:	6014      	str	r4, [r2, #0]
 8019bb2:	b003      	add	sp, #12
 8019bb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019bb8:	f001 bdcc 	b.w	801b754 <__malloc_unlock>
 8019bbc:	42a3      	cmp	r3, r4
 8019bbe:	d908      	bls.n	8019bd2 <_free_r+0x46>
 8019bc0:	6825      	ldr	r5, [r4, #0]
 8019bc2:	1961      	adds	r1, r4, r5
 8019bc4:	428b      	cmp	r3, r1
 8019bc6:	bf01      	itttt	eq
 8019bc8:	6819      	ldreq	r1, [r3, #0]
 8019bca:	685b      	ldreq	r3, [r3, #4]
 8019bcc:	1949      	addeq	r1, r1, r5
 8019bce:	6021      	streq	r1, [r4, #0]
 8019bd0:	e7ed      	b.n	8019bae <_free_r+0x22>
 8019bd2:	461a      	mov	r2, r3
 8019bd4:	685b      	ldr	r3, [r3, #4]
 8019bd6:	b10b      	cbz	r3, 8019bdc <_free_r+0x50>
 8019bd8:	42a3      	cmp	r3, r4
 8019bda:	d9fa      	bls.n	8019bd2 <_free_r+0x46>
 8019bdc:	6811      	ldr	r1, [r2, #0]
 8019bde:	1855      	adds	r5, r2, r1
 8019be0:	42a5      	cmp	r5, r4
 8019be2:	d10b      	bne.n	8019bfc <_free_r+0x70>
 8019be4:	6824      	ldr	r4, [r4, #0]
 8019be6:	4421      	add	r1, r4
 8019be8:	1854      	adds	r4, r2, r1
 8019bea:	42a3      	cmp	r3, r4
 8019bec:	6011      	str	r1, [r2, #0]
 8019bee:	d1e0      	bne.n	8019bb2 <_free_r+0x26>
 8019bf0:	681c      	ldr	r4, [r3, #0]
 8019bf2:	685b      	ldr	r3, [r3, #4]
 8019bf4:	6053      	str	r3, [r2, #4]
 8019bf6:	4421      	add	r1, r4
 8019bf8:	6011      	str	r1, [r2, #0]
 8019bfa:	e7da      	b.n	8019bb2 <_free_r+0x26>
 8019bfc:	d902      	bls.n	8019c04 <_free_r+0x78>
 8019bfe:	230c      	movs	r3, #12
 8019c00:	6003      	str	r3, [r0, #0]
 8019c02:	e7d6      	b.n	8019bb2 <_free_r+0x26>
 8019c04:	6825      	ldr	r5, [r4, #0]
 8019c06:	1961      	adds	r1, r4, r5
 8019c08:	428b      	cmp	r3, r1
 8019c0a:	bf04      	itt	eq
 8019c0c:	6819      	ldreq	r1, [r3, #0]
 8019c0e:	685b      	ldreq	r3, [r3, #4]
 8019c10:	6063      	str	r3, [r4, #4]
 8019c12:	bf04      	itt	eq
 8019c14:	1949      	addeq	r1, r1, r5
 8019c16:	6021      	streq	r1, [r4, #0]
 8019c18:	6054      	str	r4, [r2, #4]
 8019c1a:	e7ca      	b.n	8019bb2 <_free_r+0x26>
 8019c1c:	b003      	add	sp, #12
 8019c1e:	bd30      	pop	{r4, r5, pc}
 8019c20:	20002fbc 	.word	0x20002fbc

08019c24 <sbrk_aligned>:
 8019c24:	b570      	push	{r4, r5, r6, lr}
 8019c26:	4e0e      	ldr	r6, [pc, #56]	; (8019c60 <sbrk_aligned+0x3c>)
 8019c28:	460c      	mov	r4, r1
 8019c2a:	6831      	ldr	r1, [r6, #0]
 8019c2c:	4605      	mov	r5, r0
 8019c2e:	b911      	cbnz	r1, 8019c36 <sbrk_aligned+0x12>
 8019c30:	f000 fd0e 	bl	801a650 <_sbrk_r>
 8019c34:	6030      	str	r0, [r6, #0]
 8019c36:	4621      	mov	r1, r4
 8019c38:	4628      	mov	r0, r5
 8019c3a:	f000 fd09 	bl	801a650 <_sbrk_r>
 8019c3e:	1c43      	adds	r3, r0, #1
 8019c40:	d00a      	beq.n	8019c58 <sbrk_aligned+0x34>
 8019c42:	1cc4      	adds	r4, r0, #3
 8019c44:	f024 0403 	bic.w	r4, r4, #3
 8019c48:	42a0      	cmp	r0, r4
 8019c4a:	d007      	beq.n	8019c5c <sbrk_aligned+0x38>
 8019c4c:	1a21      	subs	r1, r4, r0
 8019c4e:	4628      	mov	r0, r5
 8019c50:	f000 fcfe 	bl	801a650 <_sbrk_r>
 8019c54:	3001      	adds	r0, #1
 8019c56:	d101      	bne.n	8019c5c <sbrk_aligned+0x38>
 8019c58:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8019c5c:	4620      	mov	r0, r4
 8019c5e:	bd70      	pop	{r4, r5, r6, pc}
 8019c60:	20002fc0 	.word	0x20002fc0

08019c64 <_malloc_r>:
 8019c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c68:	1ccd      	adds	r5, r1, #3
 8019c6a:	f025 0503 	bic.w	r5, r5, #3
 8019c6e:	3508      	adds	r5, #8
 8019c70:	2d0c      	cmp	r5, #12
 8019c72:	bf38      	it	cc
 8019c74:	250c      	movcc	r5, #12
 8019c76:	2d00      	cmp	r5, #0
 8019c78:	4607      	mov	r7, r0
 8019c7a:	db01      	blt.n	8019c80 <_malloc_r+0x1c>
 8019c7c:	42a9      	cmp	r1, r5
 8019c7e:	d905      	bls.n	8019c8c <_malloc_r+0x28>
 8019c80:	230c      	movs	r3, #12
 8019c82:	603b      	str	r3, [r7, #0]
 8019c84:	2600      	movs	r6, #0
 8019c86:	4630      	mov	r0, r6
 8019c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c8c:	4e2e      	ldr	r6, [pc, #184]	; (8019d48 <_malloc_r+0xe4>)
 8019c8e:	f001 fd5b 	bl	801b748 <__malloc_lock>
 8019c92:	6833      	ldr	r3, [r6, #0]
 8019c94:	461c      	mov	r4, r3
 8019c96:	bb34      	cbnz	r4, 8019ce6 <_malloc_r+0x82>
 8019c98:	4629      	mov	r1, r5
 8019c9a:	4638      	mov	r0, r7
 8019c9c:	f7ff ffc2 	bl	8019c24 <sbrk_aligned>
 8019ca0:	1c43      	adds	r3, r0, #1
 8019ca2:	4604      	mov	r4, r0
 8019ca4:	d14d      	bne.n	8019d42 <_malloc_r+0xde>
 8019ca6:	6834      	ldr	r4, [r6, #0]
 8019ca8:	4626      	mov	r6, r4
 8019caa:	2e00      	cmp	r6, #0
 8019cac:	d140      	bne.n	8019d30 <_malloc_r+0xcc>
 8019cae:	6823      	ldr	r3, [r4, #0]
 8019cb0:	4631      	mov	r1, r6
 8019cb2:	4638      	mov	r0, r7
 8019cb4:	eb04 0803 	add.w	r8, r4, r3
 8019cb8:	f000 fcca 	bl	801a650 <_sbrk_r>
 8019cbc:	4580      	cmp	r8, r0
 8019cbe:	d13a      	bne.n	8019d36 <_malloc_r+0xd2>
 8019cc0:	6821      	ldr	r1, [r4, #0]
 8019cc2:	3503      	adds	r5, #3
 8019cc4:	1a6d      	subs	r5, r5, r1
 8019cc6:	f025 0503 	bic.w	r5, r5, #3
 8019cca:	3508      	adds	r5, #8
 8019ccc:	2d0c      	cmp	r5, #12
 8019cce:	bf38      	it	cc
 8019cd0:	250c      	movcc	r5, #12
 8019cd2:	4629      	mov	r1, r5
 8019cd4:	4638      	mov	r0, r7
 8019cd6:	f7ff ffa5 	bl	8019c24 <sbrk_aligned>
 8019cda:	3001      	adds	r0, #1
 8019cdc:	d02b      	beq.n	8019d36 <_malloc_r+0xd2>
 8019cde:	6823      	ldr	r3, [r4, #0]
 8019ce0:	442b      	add	r3, r5
 8019ce2:	6023      	str	r3, [r4, #0]
 8019ce4:	e00e      	b.n	8019d04 <_malloc_r+0xa0>
 8019ce6:	6822      	ldr	r2, [r4, #0]
 8019ce8:	1b52      	subs	r2, r2, r5
 8019cea:	d41e      	bmi.n	8019d2a <_malloc_r+0xc6>
 8019cec:	2a0b      	cmp	r2, #11
 8019cee:	d916      	bls.n	8019d1e <_malloc_r+0xba>
 8019cf0:	1961      	adds	r1, r4, r5
 8019cf2:	42a3      	cmp	r3, r4
 8019cf4:	6025      	str	r5, [r4, #0]
 8019cf6:	bf18      	it	ne
 8019cf8:	6059      	strne	r1, [r3, #4]
 8019cfa:	6863      	ldr	r3, [r4, #4]
 8019cfc:	bf08      	it	eq
 8019cfe:	6031      	streq	r1, [r6, #0]
 8019d00:	5162      	str	r2, [r4, r5]
 8019d02:	604b      	str	r3, [r1, #4]
 8019d04:	4638      	mov	r0, r7
 8019d06:	f104 060b 	add.w	r6, r4, #11
 8019d0a:	f001 fd23 	bl	801b754 <__malloc_unlock>
 8019d0e:	f026 0607 	bic.w	r6, r6, #7
 8019d12:	1d23      	adds	r3, r4, #4
 8019d14:	1af2      	subs	r2, r6, r3
 8019d16:	d0b6      	beq.n	8019c86 <_malloc_r+0x22>
 8019d18:	1b9b      	subs	r3, r3, r6
 8019d1a:	50a3      	str	r3, [r4, r2]
 8019d1c:	e7b3      	b.n	8019c86 <_malloc_r+0x22>
 8019d1e:	6862      	ldr	r2, [r4, #4]
 8019d20:	42a3      	cmp	r3, r4
 8019d22:	bf0c      	ite	eq
 8019d24:	6032      	streq	r2, [r6, #0]
 8019d26:	605a      	strne	r2, [r3, #4]
 8019d28:	e7ec      	b.n	8019d04 <_malloc_r+0xa0>
 8019d2a:	4623      	mov	r3, r4
 8019d2c:	6864      	ldr	r4, [r4, #4]
 8019d2e:	e7b2      	b.n	8019c96 <_malloc_r+0x32>
 8019d30:	4634      	mov	r4, r6
 8019d32:	6876      	ldr	r6, [r6, #4]
 8019d34:	e7b9      	b.n	8019caa <_malloc_r+0x46>
 8019d36:	230c      	movs	r3, #12
 8019d38:	603b      	str	r3, [r7, #0]
 8019d3a:	4638      	mov	r0, r7
 8019d3c:	f001 fd0a 	bl	801b754 <__malloc_unlock>
 8019d40:	e7a1      	b.n	8019c86 <_malloc_r+0x22>
 8019d42:	6025      	str	r5, [r4, #0]
 8019d44:	e7de      	b.n	8019d04 <_malloc_r+0xa0>
 8019d46:	bf00      	nop
 8019d48:	20002fbc 	.word	0x20002fbc

08019d4c <__cvt>:
 8019d4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019d50:	ec55 4b10 	vmov	r4, r5, d0
 8019d54:	2d00      	cmp	r5, #0
 8019d56:	460e      	mov	r6, r1
 8019d58:	4619      	mov	r1, r3
 8019d5a:	462b      	mov	r3, r5
 8019d5c:	bfbb      	ittet	lt
 8019d5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8019d62:	461d      	movlt	r5, r3
 8019d64:	2300      	movge	r3, #0
 8019d66:	232d      	movlt	r3, #45	; 0x2d
 8019d68:	700b      	strb	r3, [r1, #0]
 8019d6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019d6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8019d70:	4691      	mov	r9, r2
 8019d72:	f023 0820 	bic.w	r8, r3, #32
 8019d76:	bfbc      	itt	lt
 8019d78:	4622      	movlt	r2, r4
 8019d7a:	4614      	movlt	r4, r2
 8019d7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019d80:	d005      	beq.n	8019d8e <__cvt+0x42>
 8019d82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8019d86:	d100      	bne.n	8019d8a <__cvt+0x3e>
 8019d88:	3601      	adds	r6, #1
 8019d8a:	2102      	movs	r1, #2
 8019d8c:	e000      	b.n	8019d90 <__cvt+0x44>
 8019d8e:	2103      	movs	r1, #3
 8019d90:	ab03      	add	r3, sp, #12
 8019d92:	9301      	str	r3, [sp, #4]
 8019d94:	ab02      	add	r3, sp, #8
 8019d96:	9300      	str	r3, [sp, #0]
 8019d98:	ec45 4b10 	vmov	d0, r4, r5
 8019d9c:	4653      	mov	r3, sl
 8019d9e:	4632      	mov	r2, r6
 8019da0:	f000 fdc2 	bl	801a928 <_dtoa_r>
 8019da4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8019da8:	4607      	mov	r7, r0
 8019daa:	d102      	bne.n	8019db2 <__cvt+0x66>
 8019dac:	f019 0f01 	tst.w	r9, #1
 8019db0:	d022      	beq.n	8019df8 <__cvt+0xac>
 8019db2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019db6:	eb07 0906 	add.w	r9, r7, r6
 8019dba:	d110      	bne.n	8019dde <__cvt+0x92>
 8019dbc:	783b      	ldrb	r3, [r7, #0]
 8019dbe:	2b30      	cmp	r3, #48	; 0x30
 8019dc0:	d10a      	bne.n	8019dd8 <__cvt+0x8c>
 8019dc2:	2200      	movs	r2, #0
 8019dc4:	2300      	movs	r3, #0
 8019dc6:	4620      	mov	r0, r4
 8019dc8:	4629      	mov	r1, r5
 8019dca:	f7e6 fe95 	bl	8000af8 <__aeabi_dcmpeq>
 8019dce:	b918      	cbnz	r0, 8019dd8 <__cvt+0x8c>
 8019dd0:	f1c6 0601 	rsb	r6, r6, #1
 8019dd4:	f8ca 6000 	str.w	r6, [sl]
 8019dd8:	f8da 3000 	ldr.w	r3, [sl]
 8019ddc:	4499      	add	r9, r3
 8019dde:	2200      	movs	r2, #0
 8019de0:	2300      	movs	r3, #0
 8019de2:	4620      	mov	r0, r4
 8019de4:	4629      	mov	r1, r5
 8019de6:	f7e6 fe87 	bl	8000af8 <__aeabi_dcmpeq>
 8019dea:	b108      	cbz	r0, 8019df0 <__cvt+0xa4>
 8019dec:	f8cd 900c 	str.w	r9, [sp, #12]
 8019df0:	2230      	movs	r2, #48	; 0x30
 8019df2:	9b03      	ldr	r3, [sp, #12]
 8019df4:	454b      	cmp	r3, r9
 8019df6:	d307      	bcc.n	8019e08 <__cvt+0xbc>
 8019df8:	9b03      	ldr	r3, [sp, #12]
 8019dfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019dfc:	1bdb      	subs	r3, r3, r7
 8019dfe:	4638      	mov	r0, r7
 8019e00:	6013      	str	r3, [r2, #0]
 8019e02:	b004      	add	sp, #16
 8019e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e08:	1c59      	adds	r1, r3, #1
 8019e0a:	9103      	str	r1, [sp, #12]
 8019e0c:	701a      	strb	r2, [r3, #0]
 8019e0e:	e7f0      	b.n	8019df2 <__cvt+0xa6>

08019e10 <__exponent>:
 8019e10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019e12:	4603      	mov	r3, r0
 8019e14:	2900      	cmp	r1, #0
 8019e16:	bfb8      	it	lt
 8019e18:	4249      	neglt	r1, r1
 8019e1a:	f803 2b02 	strb.w	r2, [r3], #2
 8019e1e:	bfb4      	ite	lt
 8019e20:	222d      	movlt	r2, #45	; 0x2d
 8019e22:	222b      	movge	r2, #43	; 0x2b
 8019e24:	2909      	cmp	r1, #9
 8019e26:	7042      	strb	r2, [r0, #1]
 8019e28:	dd2a      	ble.n	8019e80 <__exponent+0x70>
 8019e2a:	f10d 0407 	add.w	r4, sp, #7
 8019e2e:	46a4      	mov	ip, r4
 8019e30:	270a      	movs	r7, #10
 8019e32:	46a6      	mov	lr, r4
 8019e34:	460a      	mov	r2, r1
 8019e36:	fb91 f6f7 	sdiv	r6, r1, r7
 8019e3a:	fb07 1516 	mls	r5, r7, r6, r1
 8019e3e:	3530      	adds	r5, #48	; 0x30
 8019e40:	2a63      	cmp	r2, #99	; 0x63
 8019e42:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8019e46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8019e4a:	4631      	mov	r1, r6
 8019e4c:	dcf1      	bgt.n	8019e32 <__exponent+0x22>
 8019e4e:	3130      	adds	r1, #48	; 0x30
 8019e50:	f1ae 0502 	sub.w	r5, lr, #2
 8019e54:	f804 1c01 	strb.w	r1, [r4, #-1]
 8019e58:	1c44      	adds	r4, r0, #1
 8019e5a:	4629      	mov	r1, r5
 8019e5c:	4561      	cmp	r1, ip
 8019e5e:	d30a      	bcc.n	8019e76 <__exponent+0x66>
 8019e60:	f10d 0209 	add.w	r2, sp, #9
 8019e64:	eba2 020e 	sub.w	r2, r2, lr
 8019e68:	4565      	cmp	r5, ip
 8019e6a:	bf88      	it	hi
 8019e6c:	2200      	movhi	r2, #0
 8019e6e:	4413      	add	r3, r2
 8019e70:	1a18      	subs	r0, r3, r0
 8019e72:	b003      	add	sp, #12
 8019e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019e76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019e7a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8019e7e:	e7ed      	b.n	8019e5c <__exponent+0x4c>
 8019e80:	2330      	movs	r3, #48	; 0x30
 8019e82:	3130      	adds	r1, #48	; 0x30
 8019e84:	7083      	strb	r3, [r0, #2]
 8019e86:	70c1      	strb	r1, [r0, #3]
 8019e88:	1d03      	adds	r3, r0, #4
 8019e8a:	e7f1      	b.n	8019e70 <__exponent+0x60>

08019e8c <_printf_float>:
 8019e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e90:	ed2d 8b02 	vpush	{d8}
 8019e94:	b08d      	sub	sp, #52	; 0x34
 8019e96:	460c      	mov	r4, r1
 8019e98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8019e9c:	4616      	mov	r6, r2
 8019e9e:	461f      	mov	r7, r3
 8019ea0:	4605      	mov	r5, r0
 8019ea2:	f001 fc37 	bl	801b714 <_localeconv_r>
 8019ea6:	f8d0 a000 	ldr.w	sl, [r0]
 8019eaa:	4650      	mov	r0, sl
 8019eac:	f7e6 f9a8 	bl	8000200 <strlen>
 8019eb0:	2300      	movs	r3, #0
 8019eb2:	930a      	str	r3, [sp, #40]	; 0x28
 8019eb4:	6823      	ldr	r3, [r4, #0]
 8019eb6:	9305      	str	r3, [sp, #20]
 8019eb8:	f8d8 3000 	ldr.w	r3, [r8]
 8019ebc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8019ec0:	3307      	adds	r3, #7
 8019ec2:	f023 0307 	bic.w	r3, r3, #7
 8019ec6:	f103 0208 	add.w	r2, r3, #8
 8019eca:	f8c8 2000 	str.w	r2, [r8]
 8019ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ed2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019ed6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8019eda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019ede:	9307      	str	r3, [sp, #28]
 8019ee0:	f8cd 8018 	str.w	r8, [sp, #24]
 8019ee4:	ee08 0a10 	vmov	s16, r0
 8019ee8:	4b9f      	ldr	r3, [pc, #636]	; (801a168 <_printf_float+0x2dc>)
 8019eea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019eee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019ef2:	f7e6 fe33 	bl	8000b5c <__aeabi_dcmpun>
 8019ef6:	bb88      	cbnz	r0, 8019f5c <_printf_float+0xd0>
 8019ef8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019efc:	4b9a      	ldr	r3, [pc, #616]	; (801a168 <_printf_float+0x2dc>)
 8019efe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019f02:	f7e6 fe0d 	bl	8000b20 <__aeabi_dcmple>
 8019f06:	bb48      	cbnz	r0, 8019f5c <_printf_float+0xd0>
 8019f08:	2200      	movs	r2, #0
 8019f0a:	2300      	movs	r3, #0
 8019f0c:	4640      	mov	r0, r8
 8019f0e:	4649      	mov	r1, r9
 8019f10:	f7e6 fdfc 	bl	8000b0c <__aeabi_dcmplt>
 8019f14:	b110      	cbz	r0, 8019f1c <_printf_float+0x90>
 8019f16:	232d      	movs	r3, #45	; 0x2d
 8019f18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019f1c:	4b93      	ldr	r3, [pc, #588]	; (801a16c <_printf_float+0x2e0>)
 8019f1e:	4894      	ldr	r0, [pc, #592]	; (801a170 <_printf_float+0x2e4>)
 8019f20:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8019f24:	bf94      	ite	ls
 8019f26:	4698      	movls	r8, r3
 8019f28:	4680      	movhi	r8, r0
 8019f2a:	2303      	movs	r3, #3
 8019f2c:	6123      	str	r3, [r4, #16]
 8019f2e:	9b05      	ldr	r3, [sp, #20]
 8019f30:	f023 0204 	bic.w	r2, r3, #4
 8019f34:	6022      	str	r2, [r4, #0]
 8019f36:	f04f 0900 	mov.w	r9, #0
 8019f3a:	9700      	str	r7, [sp, #0]
 8019f3c:	4633      	mov	r3, r6
 8019f3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8019f40:	4621      	mov	r1, r4
 8019f42:	4628      	mov	r0, r5
 8019f44:	f000 f9d8 	bl	801a2f8 <_printf_common>
 8019f48:	3001      	adds	r0, #1
 8019f4a:	f040 8090 	bne.w	801a06e <_printf_float+0x1e2>
 8019f4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019f52:	b00d      	add	sp, #52	; 0x34
 8019f54:	ecbd 8b02 	vpop	{d8}
 8019f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f5c:	4642      	mov	r2, r8
 8019f5e:	464b      	mov	r3, r9
 8019f60:	4640      	mov	r0, r8
 8019f62:	4649      	mov	r1, r9
 8019f64:	f7e6 fdfa 	bl	8000b5c <__aeabi_dcmpun>
 8019f68:	b140      	cbz	r0, 8019f7c <_printf_float+0xf0>
 8019f6a:	464b      	mov	r3, r9
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	bfbc      	itt	lt
 8019f70:	232d      	movlt	r3, #45	; 0x2d
 8019f72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019f76:	487f      	ldr	r0, [pc, #508]	; (801a174 <_printf_float+0x2e8>)
 8019f78:	4b7f      	ldr	r3, [pc, #508]	; (801a178 <_printf_float+0x2ec>)
 8019f7a:	e7d1      	b.n	8019f20 <_printf_float+0x94>
 8019f7c:	6863      	ldr	r3, [r4, #4]
 8019f7e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8019f82:	9206      	str	r2, [sp, #24]
 8019f84:	1c5a      	adds	r2, r3, #1
 8019f86:	d13f      	bne.n	801a008 <_printf_float+0x17c>
 8019f88:	2306      	movs	r3, #6
 8019f8a:	6063      	str	r3, [r4, #4]
 8019f8c:	9b05      	ldr	r3, [sp, #20]
 8019f8e:	6861      	ldr	r1, [r4, #4]
 8019f90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019f94:	2300      	movs	r3, #0
 8019f96:	9303      	str	r3, [sp, #12]
 8019f98:	ab0a      	add	r3, sp, #40	; 0x28
 8019f9a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8019f9e:	ab09      	add	r3, sp, #36	; 0x24
 8019fa0:	ec49 8b10 	vmov	d0, r8, r9
 8019fa4:	9300      	str	r3, [sp, #0]
 8019fa6:	6022      	str	r2, [r4, #0]
 8019fa8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8019fac:	4628      	mov	r0, r5
 8019fae:	f7ff fecd 	bl	8019d4c <__cvt>
 8019fb2:	9b06      	ldr	r3, [sp, #24]
 8019fb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019fb6:	2b47      	cmp	r3, #71	; 0x47
 8019fb8:	4680      	mov	r8, r0
 8019fba:	d108      	bne.n	8019fce <_printf_float+0x142>
 8019fbc:	1cc8      	adds	r0, r1, #3
 8019fbe:	db02      	blt.n	8019fc6 <_printf_float+0x13a>
 8019fc0:	6863      	ldr	r3, [r4, #4]
 8019fc2:	4299      	cmp	r1, r3
 8019fc4:	dd41      	ble.n	801a04a <_printf_float+0x1be>
 8019fc6:	f1ab 0b02 	sub.w	fp, fp, #2
 8019fca:	fa5f fb8b 	uxtb.w	fp, fp
 8019fce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019fd2:	d820      	bhi.n	801a016 <_printf_float+0x18a>
 8019fd4:	3901      	subs	r1, #1
 8019fd6:	465a      	mov	r2, fp
 8019fd8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019fdc:	9109      	str	r1, [sp, #36]	; 0x24
 8019fde:	f7ff ff17 	bl	8019e10 <__exponent>
 8019fe2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019fe4:	1813      	adds	r3, r2, r0
 8019fe6:	2a01      	cmp	r2, #1
 8019fe8:	4681      	mov	r9, r0
 8019fea:	6123      	str	r3, [r4, #16]
 8019fec:	dc02      	bgt.n	8019ff4 <_printf_float+0x168>
 8019fee:	6822      	ldr	r2, [r4, #0]
 8019ff0:	07d2      	lsls	r2, r2, #31
 8019ff2:	d501      	bpl.n	8019ff8 <_printf_float+0x16c>
 8019ff4:	3301      	adds	r3, #1
 8019ff6:	6123      	str	r3, [r4, #16]
 8019ff8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	d09c      	beq.n	8019f3a <_printf_float+0xae>
 801a000:	232d      	movs	r3, #45	; 0x2d
 801a002:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a006:	e798      	b.n	8019f3a <_printf_float+0xae>
 801a008:	9a06      	ldr	r2, [sp, #24]
 801a00a:	2a47      	cmp	r2, #71	; 0x47
 801a00c:	d1be      	bne.n	8019f8c <_printf_float+0x100>
 801a00e:	2b00      	cmp	r3, #0
 801a010:	d1bc      	bne.n	8019f8c <_printf_float+0x100>
 801a012:	2301      	movs	r3, #1
 801a014:	e7b9      	b.n	8019f8a <_printf_float+0xfe>
 801a016:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801a01a:	d118      	bne.n	801a04e <_printf_float+0x1c2>
 801a01c:	2900      	cmp	r1, #0
 801a01e:	6863      	ldr	r3, [r4, #4]
 801a020:	dd0b      	ble.n	801a03a <_printf_float+0x1ae>
 801a022:	6121      	str	r1, [r4, #16]
 801a024:	b913      	cbnz	r3, 801a02c <_printf_float+0x1a0>
 801a026:	6822      	ldr	r2, [r4, #0]
 801a028:	07d0      	lsls	r0, r2, #31
 801a02a:	d502      	bpl.n	801a032 <_printf_float+0x1a6>
 801a02c:	3301      	adds	r3, #1
 801a02e:	440b      	add	r3, r1
 801a030:	6123      	str	r3, [r4, #16]
 801a032:	65a1      	str	r1, [r4, #88]	; 0x58
 801a034:	f04f 0900 	mov.w	r9, #0
 801a038:	e7de      	b.n	8019ff8 <_printf_float+0x16c>
 801a03a:	b913      	cbnz	r3, 801a042 <_printf_float+0x1b6>
 801a03c:	6822      	ldr	r2, [r4, #0]
 801a03e:	07d2      	lsls	r2, r2, #31
 801a040:	d501      	bpl.n	801a046 <_printf_float+0x1ba>
 801a042:	3302      	adds	r3, #2
 801a044:	e7f4      	b.n	801a030 <_printf_float+0x1a4>
 801a046:	2301      	movs	r3, #1
 801a048:	e7f2      	b.n	801a030 <_printf_float+0x1a4>
 801a04a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801a04e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a050:	4299      	cmp	r1, r3
 801a052:	db05      	blt.n	801a060 <_printf_float+0x1d4>
 801a054:	6823      	ldr	r3, [r4, #0]
 801a056:	6121      	str	r1, [r4, #16]
 801a058:	07d8      	lsls	r0, r3, #31
 801a05a:	d5ea      	bpl.n	801a032 <_printf_float+0x1a6>
 801a05c:	1c4b      	adds	r3, r1, #1
 801a05e:	e7e7      	b.n	801a030 <_printf_float+0x1a4>
 801a060:	2900      	cmp	r1, #0
 801a062:	bfd4      	ite	le
 801a064:	f1c1 0202 	rsble	r2, r1, #2
 801a068:	2201      	movgt	r2, #1
 801a06a:	4413      	add	r3, r2
 801a06c:	e7e0      	b.n	801a030 <_printf_float+0x1a4>
 801a06e:	6823      	ldr	r3, [r4, #0]
 801a070:	055a      	lsls	r2, r3, #21
 801a072:	d407      	bmi.n	801a084 <_printf_float+0x1f8>
 801a074:	6923      	ldr	r3, [r4, #16]
 801a076:	4642      	mov	r2, r8
 801a078:	4631      	mov	r1, r6
 801a07a:	4628      	mov	r0, r5
 801a07c:	47b8      	blx	r7
 801a07e:	3001      	adds	r0, #1
 801a080:	d12c      	bne.n	801a0dc <_printf_float+0x250>
 801a082:	e764      	b.n	8019f4e <_printf_float+0xc2>
 801a084:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a088:	f240 80e0 	bls.w	801a24c <_printf_float+0x3c0>
 801a08c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a090:	2200      	movs	r2, #0
 801a092:	2300      	movs	r3, #0
 801a094:	f7e6 fd30 	bl	8000af8 <__aeabi_dcmpeq>
 801a098:	2800      	cmp	r0, #0
 801a09a:	d034      	beq.n	801a106 <_printf_float+0x27a>
 801a09c:	4a37      	ldr	r2, [pc, #220]	; (801a17c <_printf_float+0x2f0>)
 801a09e:	2301      	movs	r3, #1
 801a0a0:	4631      	mov	r1, r6
 801a0a2:	4628      	mov	r0, r5
 801a0a4:	47b8      	blx	r7
 801a0a6:	3001      	adds	r0, #1
 801a0a8:	f43f af51 	beq.w	8019f4e <_printf_float+0xc2>
 801a0ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a0b0:	429a      	cmp	r2, r3
 801a0b2:	db02      	blt.n	801a0ba <_printf_float+0x22e>
 801a0b4:	6823      	ldr	r3, [r4, #0]
 801a0b6:	07d8      	lsls	r0, r3, #31
 801a0b8:	d510      	bpl.n	801a0dc <_printf_float+0x250>
 801a0ba:	ee18 3a10 	vmov	r3, s16
 801a0be:	4652      	mov	r2, sl
 801a0c0:	4631      	mov	r1, r6
 801a0c2:	4628      	mov	r0, r5
 801a0c4:	47b8      	blx	r7
 801a0c6:	3001      	adds	r0, #1
 801a0c8:	f43f af41 	beq.w	8019f4e <_printf_float+0xc2>
 801a0cc:	f04f 0800 	mov.w	r8, #0
 801a0d0:	f104 091a 	add.w	r9, r4, #26
 801a0d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a0d6:	3b01      	subs	r3, #1
 801a0d8:	4543      	cmp	r3, r8
 801a0da:	dc09      	bgt.n	801a0f0 <_printf_float+0x264>
 801a0dc:	6823      	ldr	r3, [r4, #0]
 801a0de:	079b      	lsls	r3, r3, #30
 801a0e0:	f100 8105 	bmi.w	801a2ee <_printf_float+0x462>
 801a0e4:	68e0      	ldr	r0, [r4, #12]
 801a0e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a0e8:	4298      	cmp	r0, r3
 801a0ea:	bfb8      	it	lt
 801a0ec:	4618      	movlt	r0, r3
 801a0ee:	e730      	b.n	8019f52 <_printf_float+0xc6>
 801a0f0:	2301      	movs	r3, #1
 801a0f2:	464a      	mov	r2, r9
 801a0f4:	4631      	mov	r1, r6
 801a0f6:	4628      	mov	r0, r5
 801a0f8:	47b8      	blx	r7
 801a0fa:	3001      	adds	r0, #1
 801a0fc:	f43f af27 	beq.w	8019f4e <_printf_float+0xc2>
 801a100:	f108 0801 	add.w	r8, r8, #1
 801a104:	e7e6      	b.n	801a0d4 <_printf_float+0x248>
 801a106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a108:	2b00      	cmp	r3, #0
 801a10a:	dc39      	bgt.n	801a180 <_printf_float+0x2f4>
 801a10c:	4a1b      	ldr	r2, [pc, #108]	; (801a17c <_printf_float+0x2f0>)
 801a10e:	2301      	movs	r3, #1
 801a110:	4631      	mov	r1, r6
 801a112:	4628      	mov	r0, r5
 801a114:	47b8      	blx	r7
 801a116:	3001      	adds	r0, #1
 801a118:	f43f af19 	beq.w	8019f4e <_printf_float+0xc2>
 801a11c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a120:	4313      	orrs	r3, r2
 801a122:	d102      	bne.n	801a12a <_printf_float+0x29e>
 801a124:	6823      	ldr	r3, [r4, #0]
 801a126:	07d9      	lsls	r1, r3, #31
 801a128:	d5d8      	bpl.n	801a0dc <_printf_float+0x250>
 801a12a:	ee18 3a10 	vmov	r3, s16
 801a12e:	4652      	mov	r2, sl
 801a130:	4631      	mov	r1, r6
 801a132:	4628      	mov	r0, r5
 801a134:	47b8      	blx	r7
 801a136:	3001      	adds	r0, #1
 801a138:	f43f af09 	beq.w	8019f4e <_printf_float+0xc2>
 801a13c:	f04f 0900 	mov.w	r9, #0
 801a140:	f104 0a1a 	add.w	sl, r4, #26
 801a144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a146:	425b      	negs	r3, r3
 801a148:	454b      	cmp	r3, r9
 801a14a:	dc01      	bgt.n	801a150 <_printf_float+0x2c4>
 801a14c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a14e:	e792      	b.n	801a076 <_printf_float+0x1ea>
 801a150:	2301      	movs	r3, #1
 801a152:	4652      	mov	r2, sl
 801a154:	4631      	mov	r1, r6
 801a156:	4628      	mov	r0, r5
 801a158:	47b8      	blx	r7
 801a15a:	3001      	adds	r0, #1
 801a15c:	f43f aef7 	beq.w	8019f4e <_printf_float+0xc2>
 801a160:	f109 0901 	add.w	r9, r9, #1
 801a164:	e7ee      	b.n	801a144 <_printf_float+0x2b8>
 801a166:	bf00      	nop
 801a168:	7fefffff 	.word	0x7fefffff
 801a16c:	0801d1fc 	.word	0x0801d1fc
 801a170:	0801d200 	.word	0x0801d200
 801a174:	0801d208 	.word	0x0801d208
 801a178:	0801d204 	.word	0x0801d204
 801a17c:	0801d20c 	.word	0x0801d20c
 801a180:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a182:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a184:	429a      	cmp	r2, r3
 801a186:	bfa8      	it	ge
 801a188:	461a      	movge	r2, r3
 801a18a:	2a00      	cmp	r2, #0
 801a18c:	4691      	mov	r9, r2
 801a18e:	dc37      	bgt.n	801a200 <_printf_float+0x374>
 801a190:	f04f 0b00 	mov.w	fp, #0
 801a194:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a198:	f104 021a 	add.w	r2, r4, #26
 801a19c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a19e:	9305      	str	r3, [sp, #20]
 801a1a0:	eba3 0309 	sub.w	r3, r3, r9
 801a1a4:	455b      	cmp	r3, fp
 801a1a6:	dc33      	bgt.n	801a210 <_printf_float+0x384>
 801a1a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a1ac:	429a      	cmp	r2, r3
 801a1ae:	db3b      	blt.n	801a228 <_printf_float+0x39c>
 801a1b0:	6823      	ldr	r3, [r4, #0]
 801a1b2:	07da      	lsls	r2, r3, #31
 801a1b4:	d438      	bmi.n	801a228 <_printf_float+0x39c>
 801a1b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a1b8:	9a05      	ldr	r2, [sp, #20]
 801a1ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a1bc:	1a9a      	subs	r2, r3, r2
 801a1be:	eba3 0901 	sub.w	r9, r3, r1
 801a1c2:	4591      	cmp	r9, r2
 801a1c4:	bfa8      	it	ge
 801a1c6:	4691      	movge	r9, r2
 801a1c8:	f1b9 0f00 	cmp.w	r9, #0
 801a1cc:	dc35      	bgt.n	801a23a <_printf_float+0x3ae>
 801a1ce:	f04f 0800 	mov.w	r8, #0
 801a1d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a1d6:	f104 0a1a 	add.w	sl, r4, #26
 801a1da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a1de:	1a9b      	subs	r3, r3, r2
 801a1e0:	eba3 0309 	sub.w	r3, r3, r9
 801a1e4:	4543      	cmp	r3, r8
 801a1e6:	f77f af79 	ble.w	801a0dc <_printf_float+0x250>
 801a1ea:	2301      	movs	r3, #1
 801a1ec:	4652      	mov	r2, sl
 801a1ee:	4631      	mov	r1, r6
 801a1f0:	4628      	mov	r0, r5
 801a1f2:	47b8      	blx	r7
 801a1f4:	3001      	adds	r0, #1
 801a1f6:	f43f aeaa 	beq.w	8019f4e <_printf_float+0xc2>
 801a1fa:	f108 0801 	add.w	r8, r8, #1
 801a1fe:	e7ec      	b.n	801a1da <_printf_float+0x34e>
 801a200:	4613      	mov	r3, r2
 801a202:	4631      	mov	r1, r6
 801a204:	4642      	mov	r2, r8
 801a206:	4628      	mov	r0, r5
 801a208:	47b8      	blx	r7
 801a20a:	3001      	adds	r0, #1
 801a20c:	d1c0      	bne.n	801a190 <_printf_float+0x304>
 801a20e:	e69e      	b.n	8019f4e <_printf_float+0xc2>
 801a210:	2301      	movs	r3, #1
 801a212:	4631      	mov	r1, r6
 801a214:	4628      	mov	r0, r5
 801a216:	9205      	str	r2, [sp, #20]
 801a218:	47b8      	blx	r7
 801a21a:	3001      	adds	r0, #1
 801a21c:	f43f ae97 	beq.w	8019f4e <_printf_float+0xc2>
 801a220:	9a05      	ldr	r2, [sp, #20]
 801a222:	f10b 0b01 	add.w	fp, fp, #1
 801a226:	e7b9      	b.n	801a19c <_printf_float+0x310>
 801a228:	ee18 3a10 	vmov	r3, s16
 801a22c:	4652      	mov	r2, sl
 801a22e:	4631      	mov	r1, r6
 801a230:	4628      	mov	r0, r5
 801a232:	47b8      	blx	r7
 801a234:	3001      	adds	r0, #1
 801a236:	d1be      	bne.n	801a1b6 <_printf_float+0x32a>
 801a238:	e689      	b.n	8019f4e <_printf_float+0xc2>
 801a23a:	9a05      	ldr	r2, [sp, #20]
 801a23c:	464b      	mov	r3, r9
 801a23e:	4442      	add	r2, r8
 801a240:	4631      	mov	r1, r6
 801a242:	4628      	mov	r0, r5
 801a244:	47b8      	blx	r7
 801a246:	3001      	adds	r0, #1
 801a248:	d1c1      	bne.n	801a1ce <_printf_float+0x342>
 801a24a:	e680      	b.n	8019f4e <_printf_float+0xc2>
 801a24c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a24e:	2a01      	cmp	r2, #1
 801a250:	dc01      	bgt.n	801a256 <_printf_float+0x3ca>
 801a252:	07db      	lsls	r3, r3, #31
 801a254:	d538      	bpl.n	801a2c8 <_printf_float+0x43c>
 801a256:	2301      	movs	r3, #1
 801a258:	4642      	mov	r2, r8
 801a25a:	4631      	mov	r1, r6
 801a25c:	4628      	mov	r0, r5
 801a25e:	47b8      	blx	r7
 801a260:	3001      	adds	r0, #1
 801a262:	f43f ae74 	beq.w	8019f4e <_printf_float+0xc2>
 801a266:	ee18 3a10 	vmov	r3, s16
 801a26a:	4652      	mov	r2, sl
 801a26c:	4631      	mov	r1, r6
 801a26e:	4628      	mov	r0, r5
 801a270:	47b8      	blx	r7
 801a272:	3001      	adds	r0, #1
 801a274:	f43f ae6b 	beq.w	8019f4e <_printf_float+0xc2>
 801a278:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a27c:	2200      	movs	r2, #0
 801a27e:	2300      	movs	r3, #0
 801a280:	f7e6 fc3a 	bl	8000af8 <__aeabi_dcmpeq>
 801a284:	b9d8      	cbnz	r0, 801a2be <_printf_float+0x432>
 801a286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a288:	f108 0201 	add.w	r2, r8, #1
 801a28c:	3b01      	subs	r3, #1
 801a28e:	4631      	mov	r1, r6
 801a290:	4628      	mov	r0, r5
 801a292:	47b8      	blx	r7
 801a294:	3001      	adds	r0, #1
 801a296:	d10e      	bne.n	801a2b6 <_printf_float+0x42a>
 801a298:	e659      	b.n	8019f4e <_printf_float+0xc2>
 801a29a:	2301      	movs	r3, #1
 801a29c:	4652      	mov	r2, sl
 801a29e:	4631      	mov	r1, r6
 801a2a0:	4628      	mov	r0, r5
 801a2a2:	47b8      	blx	r7
 801a2a4:	3001      	adds	r0, #1
 801a2a6:	f43f ae52 	beq.w	8019f4e <_printf_float+0xc2>
 801a2aa:	f108 0801 	add.w	r8, r8, #1
 801a2ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a2b0:	3b01      	subs	r3, #1
 801a2b2:	4543      	cmp	r3, r8
 801a2b4:	dcf1      	bgt.n	801a29a <_printf_float+0x40e>
 801a2b6:	464b      	mov	r3, r9
 801a2b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801a2bc:	e6dc      	b.n	801a078 <_printf_float+0x1ec>
 801a2be:	f04f 0800 	mov.w	r8, #0
 801a2c2:	f104 0a1a 	add.w	sl, r4, #26
 801a2c6:	e7f2      	b.n	801a2ae <_printf_float+0x422>
 801a2c8:	2301      	movs	r3, #1
 801a2ca:	4642      	mov	r2, r8
 801a2cc:	e7df      	b.n	801a28e <_printf_float+0x402>
 801a2ce:	2301      	movs	r3, #1
 801a2d0:	464a      	mov	r2, r9
 801a2d2:	4631      	mov	r1, r6
 801a2d4:	4628      	mov	r0, r5
 801a2d6:	47b8      	blx	r7
 801a2d8:	3001      	adds	r0, #1
 801a2da:	f43f ae38 	beq.w	8019f4e <_printf_float+0xc2>
 801a2de:	f108 0801 	add.w	r8, r8, #1
 801a2e2:	68e3      	ldr	r3, [r4, #12]
 801a2e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a2e6:	1a5b      	subs	r3, r3, r1
 801a2e8:	4543      	cmp	r3, r8
 801a2ea:	dcf0      	bgt.n	801a2ce <_printf_float+0x442>
 801a2ec:	e6fa      	b.n	801a0e4 <_printf_float+0x258>
 801a2ee:	f04f 0800 	mov.w	r8, #0
 801a2f2:	f104 0919 	add.w	r9, r4, #25
 801a2f6:	e7f4      	b.n	801a2e2 <_printf_float+0x456>

0801a2f8 <_printf_common>:
 801a2f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a2fc:	4616      	mov	r6, r2
 801a2fe:	4699      	mov	r9, r3
 801a300:	688a      	ldr	r2, [r1, #8]
 801a302:	690b      	ldr	r3, [r1, #16]
 801a304:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a308:	4293      	cmp	r3, r2
 801a30a:	bfb8      	it	lt
 801a30c:	4613      	movlt	r3, r2
 801a30e:	6033      	str	r3, [r6, #0]
 801a310:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a314:	4607      	mov	r7, r0
 801a316:	460c      	mov	r4, r1
 801a318:	b10a      	cbz	r2, 801a31e <_printf_common+0x26>
 801a31a:	3301      	adds	r3, #1
 801a31c:	6033      	str	r3, [r6, #0]
 801a31e:	6823      	ldr	r3, [r4, #0]
 801a320:	0699      	lsls	r1, r3, #26
 801a322:	bf42      	ittt	mi
 801a324:	6833      	ldrmi	r3, [r6, #0]
 801a326:	3302      	addmi	r3, #2
 801a328:	6033      	strmi	r3, [r6, #0]
 801a32a:	6825      	ldr	r5, [r4, #0]
 801a32c:	f015 0506 	ands.w	r5, r5, #6
 801a330:	d106      	bne.n	801a340 <_printf_common+0x48>
 801a332:	f104 0a19 	add.w	sl, r4, #25
 801a336:	68e3      	ldr	r3, [r4, #12]
 801a338:	6832      	ldr	r2, [r6, #0]
 801a33a:	1a9b      	subs	r3, r3, r2
 801a33c:	42ab      	cmp	r3, r5
 801a33e:	dc26      	bgt.n	801a38e <_printf_common+0x96>
 801a340:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a344:	1e13      	subs	r3, r2, #0
 801a346:	6822      	ldr	r2, [r4, #0]
 801a348:	bf18      	it	ne
 801a34a:	2301      	movne	r3, #1
 801a34c:	0692      	lsls	r2, r2, #26
 801a34e:	d42b      	bmi.n	801a3a8 <_printf_common+0xb0>
 801a350:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a354:	4649      	mov	r1, r9
 801a356:	4638      	mov	r0, r7
 801a358:	47c0      	blx	r8
 801a35a:	3001      	adds	r0, #1
 801a35c:	d01e      	beq.n	801a39c <_printf_common+0xa4>
 801a35e:	6823      	ldr	r3, [r4, #0]
 801a360:	68e5      	ldr	r5, [r4, #12]
 801a362:	6832      	ldr	r2, [r6, #0]
 801a364:	f003 0306 	and.w	r3, r3, #6
 801a368:	2b04      	cmp	r3, #4
 801a36a:	bf08      	it	eq
 801a36c:	1aad      	subeq	r5, r5, r2
 801a36e:	68a3      	ldr	r3, [r4, #8]
 801a370:	6922      	ldr	r2, [r4, #16]
 801a372:	bf0c      	ite	eq
 801a374:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a378:	2500      	movne	r5, #0
 801a37a:	4293      	cmp	r3, r2
 801a37c:	bfc4      	itt	gt
 801a37e:	1a9b      	subgt	r3, r3, r2
 801a380:	18ed      	addgt	r5, r5, r3
 801a382:	2600      	movs	r6, #0
 801a384:	341a      	adds	r4, #26
 801a386:	42b5      	cmp	r5, r6
 801a388:	d11a      	bne.n	801a3c0 <_printf_common+0xc8>
 801a38a:	2000      	movs	r0, #0
 801a38c:	e008      	b.n	801a3a0 <_printf_common+0xa8>
 801a38e:	2301      	movs	r3, #1
 801a390:	4652      	mov	r2, sl
 801a392:	4649      	mov	r1, r9
 801a394:	4638      	mov	r0, r7
 801a396:	47c0      	blx	r8
 801a398:	3001      	adds	r0, #1
 801a39a:	d103      	bne.n	801a3a4 <_printf_common+0xac>
 801a39c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a3a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3a4:	3501      	adds	r5, #1
 801a3a6:	e7c6      	b.n	801a336 <_printf_common+0x3e>
 801a3a8:	18e1      	adds	r1, r4, r3
 801a3aa:	1c5a      	adds	r2, r3, #1
 801a3ac:	2030      	movs	r0, #48	; 0x30
 801a3ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a3b2:	4422      	add	r2, r4
 801a3b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a3b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a3bc:	3302      	adds	r3, #2
 801a3be:	e7c7      	b.n	801a350 <_printf_common+0x58>
 801a3c0:	2301      	movs	r3, #1
 801a3c2:	4622      	mov	r2, r4
 801a3c4:	4649      	mov	r1, r9
 801a3c6:	4638      	mov	r0, r7
 801a3c8:	47c0      	blx	r8
 801a3ca:	3001      	adds	r0, #1
 801a3cc:	d0e6      	beq.n	801a39c <_printf_common+0xa4>
 801a3ce:	3601      	adds	r6, #1
 801a3d0:	e7d9      	b.n	801a386 <_printf_common+0x8e>
	...

0801a3d4 <_printf_i>:
 801a3d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a3d8:	7e0f      	ldrb	r7, [r1, #24]
 801a3da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a3dc:	2f78      	cmp	r7, #120	; 0x78
 801a3de:	4691      	mov	r9, r2
 801a3e0:	4680      	mov	r8, r0
 801a3e2:	460c      	mov	r4, r1
 801a3e4:	469a      	mov	sl, r3
 801a3e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a3ea:	d807      	bhi.n	801a3fc <_printf_i+0x28>
 801a3ec:	2f62      	cmp	r7, #98	; 0x62
 801a3ee:	d80a      	bhi.n	801a406 <_printf_i+0x32>
 801a3f0:	2f00      	cmp	r7, #0
 801a3f2:	f000 80d8 	beq.w	801a5a6 <_printf_i+0x1d2>
 801a3f6:	2f58      	cmp	r7, #88	; 0x58
 801a3f8:	f000 80a3 	beq.w	801a542 <_printf_i+0x16e>
 801a3fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a400:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a404:	e03a      	b.n	801a47c <_printf_i+0xa8>
 801a406:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a40a:	2b15      	cmp	r3, #21
 801a40c:	d8f6      	bhi.n	801a3fc <_printf_i+0x28>
 801a40e:	a101      	add	r1, pc, #4	; (adr r1, 801a414 <_printf_i+0x40>)
 801a410:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a414:	0801a46d 	.word	0x0801a46d
 801a418:	0801a481 	.word	0x0801a481
 801a41c:	0801a3fd 	.word	0x0801a3fd
 801a420:	0801a3fd 	.word	0x0801a3fd
 801a424:	0801a3fd 	.word	0x0801a3fd
 801a428:	0801a3fd 	.word	0x0801a3fd
 801a42c:	0801a481 	.word	0x0801a481
 801a430:	0801a3fd 	.word	0x0801a3fd
 801a434:	0801a3fd 	.word	0x0801a3fd
 801a438:	0801a3fd 	.word	0x0801a3fd
 801a43c:	0801a3fd 	.word	0x0801a3fd
 801a440:	0801a58d 	.word	0x0801a58d
 801a444:	0801a4b1 	.word	0x0801a4b1
 801a448:	0801a56f 	.word	0x0801a56f
 801a44c:	0801a3fd 	.word	0x0801a3fd
 801a450:	0801a3fd 	.word	0x0801a3fd
 801a454:	0801a5af 	.word	0x0801a5af
 801a458:	0801a3fd 	.word	0x0801a3fd
 801a45c:	0801a4b1 	.word	0x0801a4b1
 801a460:	0801a3fd 	.word	0x0801a3fd
 801a464:	0801a3fd 	.word	0x0801a3fd
 801a468:	0801a577 	.word	0x0801a577
 801a46c:	682b      	ldr	r3, [r5, #0]
 801a46e:	1d1a      	adds	r2, r3, #4
 801a470:	681b      	ldr	r3, [r3, #0]
 801a472:	602a      	str	r2, [r5, #0]
 801a474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a478:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a47c:	2301      	movs	r3, #1
 801a47e:	e0a3      	b.n	801a5c8 <_printf_i+0x1f4>
 801a480:	6820      	ldr	r0, [r4, #0]
 801a482:	6829      	ldr	r1, [r5, #0]
 801a484:	0606      	lsls	r6, r0, #24
 801a486:	f101 0304 	add.w	r3, r1, #4
 801a48a:	d50a      	bpl.n	801a4a2 <_printf_i+0xce>
 801a48c:	680e      	ldr	r6, [r1, #0]
 801a48e:	602b      	str	r3, [r5, #0]
 801a490:	2e00      	cmp	r6, #0
 801a492:	da03      	bge.n	801a49c <_printf_i+0xc8>
 801a494:	232d      	movs	r3, #45	; 0x2d
 801a496:	4276      	negs	r6, r6
 801a498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a49c:	485e      	ldr	r0, [pc, #376]	; (801a618 <_printf_i+0x244>)
 801a49e:	230a      	movs	r3, #10
 801a4a0:	e019      	b.n	801a4d6 <_printf_i+0x102>
 801a4a2:	680e      	ldr	r6, [r1, #0]
 801a4a4:	602b      	str	r3, [r5, #0]
 801a4a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a4aa:	bf18      	it	ne
 801a4ac:	b236      	sxthne	r6, r6
 801a4ae:	e7ef      	b.n	801a490 <_printf_i+0xbc>
 801a4b0:	682b      	ldr	r3, [r5, #0]
 801a4b2:	6820      	ldr	r0, [r4, #0]
 801a4b4:	1d19      	adds	r1, r3, #4
 801a4b6:	6029      	str	r1, [r5, #0]
 801a4b8:	0601      	lsls	r1, r0, #24
 801a4ba:	d501      	bpl.n	801a4c0 <_printf_i+0xec>
 801a4bc:	681e      	ldr	r6, [r3, #0]
 801a4be:	e002      	b.n	801a4c6 <_printf_i+0xf2>
 801a4c0:	0646      	lsls	r6, r0, #25
 801a4c2:	d5fb      	bpl.n	801a4bc <_printf_i+0xe8>
 801a4c4:	881e      	ldrh	r6, [r3, #0]
 801a4c6:	4854      	ldr	r0, [pc, #336]	; (801a618 <_printf_i+0x244>)
 801a4c8:	2f6f      	cmp	r7, #111	; 0x6f
 801a4ca:	bf0c      	ite	eq
 801a4cc:	2308      	moveq	r3, #8
 801a4ce:	230a      	movne	r3, #10
 801a4d0:	2100      	movs	r1, #0
 801a4d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a4d6:	6865      	ldr	r5, [r4, #4]
 801a4d8:	60a5      	str	r5, [r4, #8]
 801a4da:	2d00      	cmp	r5, #0
 801a4dc:	bfa2      	ittt	ge
 801a4de:	6821      	ldrge	r1, [r4, #0]
 801a4e0:	f021 0104 	bicge.w	r1, r1, #4
 801a4e4:	6021      	strge	r1, [r4, #0]
 801a4e6:	b90e      	cbnz	r6, 801a4ec <_printf_i+0x118>
 801a4e8:	2d00      	cmp	r5, #0
 801a4ea:	d04d      	beq.n	801a588 <_printf_i+0x1b4>
 801a4ec:	4615      	mov	r5, r2
 801a4ee:	fbb6 f1f3 	udiv	r1, r6, r3
 801a4f2:	fb03 6711 	mls	r7, r3, r1, r6
 801a4f6:	5dc7      	ldrb	r7, [r0, r7]
 801a4f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a4fc:	4637      	mov	r7, r6
 801a4fe:	42bb      	cmp	r3, r7
 801a500:	460e      	mov	r6, r1
 801a502:	d9f4      	bls.n	801a4ee <_printf_i+0x11a>
 801a504:	2b08      	cmp	r3, #8
 801a506:	d10b      	bne.n	801a520 <_printf_i+0x14c>
 801a508:	6823      	ldr	r3, [r4, #0]
 801a50a:	07de      	lsls	r6, r3, #31
 801a50c:	d508      	bpl.n	801a520 <_printf_i+0x14c>
 801a50e:	6923      	ldr	r3, [r4, #16]
 801a510:	6861      	ldr	r1, [r4, #4]
 801a512:	4299      	cmp	r1, r3
 801a514:	bfde      	ittt	le
 801a516:	2330      	movle	r3, #48	; 0x30
 801a518:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a51c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801a520:	1b52      	subs	r2, r2, r5
 801a522:	6122      	str	r2, [r4, #16]
 801a524:	f8cd a000 	str.w	sl, [sp]
 801a528:	464b      	mov	r3, r9
 801a52a:	aa03      	add	r2, sp, #12
 801a52c:	4621      	mov	r1, r4
 801a52e:	4640      	mov	r0, r8
 801a530:	f7ff fee2 	bl	801a2f8 <_printf_common>
 801a534:	3001      	adds	r0, #1
 801a536:	d14c      	bne.n	801a5d2 <_printf_i+0x1fe>
 801a538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a53c:	b004      	add	sp, #16
 801a53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a542:	4835      	ldr	r0, [pc, #212]	; (801a618 <_printf_i+0x244>)
 801a544:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a548:	6829      	ldr	r1, [r5, #0]
 801a54a:	6823      	ldr	r3, [r4, #0]
 801a54c:	f851 6b04 	ldr.w	r6, [r1], #4
 801a550:	6029      	str	r1, [r5, #0]
 801a552:	061d      	lsls	r5, r3, #24
 801a554:	d514      	bpl.n	801a580 <_printf_i+0x1ac>
 801a556:	07df      	lsls	r7, r3, #31
 801a558:	bf44      	itt	mi
 801a55a:	f043 0320 	orrmi.w	r3, r3, #32
 801a55e:	6023      	strmi	r3, [r4, #0]
 801a560:	b91e      	cbnz	r6, 801a56a <_printf_i+0x196>
 801a562:	6823      	ldr	r3, [r4, #0]
 801a564:	f023 0320 	bic.w	r3, r3, #32
 801a568:	6023      	str	r3, [r4, #0]
 801a56a:	2310      	movs	r3, #16
 801a56c:	e7b0      	b.n	801a4d0 <_printf_i+0xfc>
 801a56e:	6823      	ldr	r3, [r4, #0]
 801a570:	f043 0320 	orr.w	r3, r3, #32
 801a574:	6023      	str	r3, [r4, #0]
 801a576:	2378      	movs	r3, #120	; 0x78
 801a578:	4828      	ldr	r0, [pc, #160]	; (801a61c <_printf_i+0x248>)
 801a57a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a57e:	e7e3      	b.n	801a548 <_printf_i+0x174>
 801a580:	0659      	lsls	r1, r3, #25
 801a582:	bf48      	it	mi
 801a584:	b2b6      	uxthmi	r6, r6
 801a586:	e7e6      	b.n	801a556 <_printf_i+0x182>
 801a588:	4615      	mov	r5, r2
 801a58a:	e7bb      	b.n	801a504 <_printf_i+0x130>
 801a58c:	682b      	ldr	r3, [r5, #0]
 801a58e:	6826      	ldr	r6, [r4, #0]
 801a590:	6961      	ldr	r1, [r4, #20]
 801a592:	1d18      	adds	r0, r3, #4
 801a594:	6028      	str	r0, [r5, #0]
 801a596:	0635      	lsls	r5, r6, #24
 801a598:	681b      	ldr	r3, [r3, #0]
 801a59a:	d501      	bpl.n	801a5a0 <_printf_i+0x1cc>
 801a59c:	6019      	str	r1, [r3, #0]
 801a59e:	e002      	b.n	801a5a6 <_printf_i+0x1d2>
 801a5a0:	0670      	lsls	r0, r6, #25
 801a5a2:	d5fb      	bpl.n	801a59c <_printf_i+0x1c8>
 801a5a4:	8019      	strh	r1, [r3, #0]
 801a5a6:	2300      	movs	r3, #0
 801a5a8:	6123      	str	r3, [r4, #16]
 801a5aa:	4615      	mov	r5, r2
 801a5ac:	e7ba      	b.n	801a524 <_printf_i+0x150>
 801a5ae:	682b      	ldr	r3, [r5, #0]
 801a5b0:	1d1a      	adds	r2, r3, #4
 801a5b2:	602a      	str	r2, [r5, #0]
 801a5b4:	681d      	ldr	r5, [r3, #0]
 801a5b6:	6862      	ldr	r2, [r4, #4]
 801a5b8:	2100      	movs	r1, #0
 801a5ba:	4628      	mov	r0, r5
 801a5bc:	f7e5 fe28 	bl	8000210 <memchr>
 801a5c0:	b108      	cbz	r0, 801a5c6 <_printf_i+0x1f2>
 801a5c2:	1b40      	subs	r0, r0, r5
 801a5c4:	6060      	str	r0, [r4, #4]
 801a5c6:	6863      	ldr	r3, [r4, #4]
 801a5c8:	6123      	str	r3, [r4, #16]
 801a5ca:	2300      	movs	r3, #0
 801a5cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a5d0:	e7a8      	b.n	801a524 <_printf_i+0x150>
 801a5d2:	6923      	ldr	r3, [r4, #16]
 801a5d4:	462a      	mov	r2, r5
 801a5d6:	4649      	mov	r1, r9
 801a5d8:	4640      	mov	r0, r8
 801a5da:	47d0      	blx	sl
 801a5dc:	3001      	adds	r0, #1
 801a5de:	d0ab      	beq.n	801a538 <_printf_i+0x164>
 801a5e0:	6823      	ldr	r3, [r4, #0]
 801a5e2:	079b      	lsls	r3, r3, #30
 801a5e4:	d413      	bmi.n	801a60e <_printf_i+0x23a>
 801a5e6:	68e0      	ldr	r0, [r4, #12]
 801a5e8:	9b03      	ldr	r3, [sp, #12]
 801a5ea:	4298      	cmp	r0, r3
 801a5ec:	bfb8      	it	lt
 801a5ee:	4618      	movlt	r0, r3
 801a5f0:	e7a4      	b.n	801a53c <_printf_i+0x168>
 801a5f2:	2301      	movs	r3, #1
 801a5f4:	4632      	mov	r2, r6
 801a5f6:	4649      	mov	r1, r9
 801a5f8:	4640      	mov	r0, r8
 801a5fa:	47d0      	blx	sl
 801a5fc:	3001      	adds	r0, #1
 801a5fe:	d09b      	beq.n	801a538 <_printf_i+0x164>
 801a600:	3501      	adds	r5, #1
 801a602:	68e3      	ldr	r3, [r4, #12]
 801a604:	9903      	ldr	r1, [sp, #12]
 801a606:	1a5b      	subs	r3, r3, r1
 801a608:	42ab      	cmp	r3, r5
 801a60a:	dcf2      	bgt.n	801a5f2 <_printf_i+0x21e>
 801a60c:	e7eb      	b.n	801a5e6 <_printf_i+0x212>
 801a60e:	2500      	movs	r5, #0
 801a610:	f104 0619 	add.w	r6, r4, #25
 801a614:	e7f5      	b.n	801a602 <_printf_i+0x22e>
 801a616:	bf00      	nop
 801a618:	0801d20e 	.word	0x0801d20e
 801a61c:	0801d21f 	.word	0x0801d21f

0801a620 <iprintf>:
 801a620:	b40f      	push	{r0, r1, r2, r3}
 801a622:	4b0a      	ldr	r3, [pc, #40]	; (801a64c <iprintf+0x2c>)
 801a624:	b513      	push	{r0, r1, r4, lr}
 801a626:	681c      	ldr	r4, [r3, #0]
 801a628:	b124      	cbz	r4, 801a634 <iprintf+0x14>
 801a62a:	69a3      	ldr	r3, [r4, #24]
 801a62c:	b913      	cbnz	r3, 801a634 <iprintf+0x14>
 801a62e:	4620      	mov	r0, r4
 801a630:	f000 ffc0 	bl	801b5b4 <__sinit>
 801a634:	ab05      	add	r3, sp, #20
 801a636:	9a04      	ldr	r2, [sp, #16]
 801a638:	68a1      	ldr	r1, [r4, #8]
 801a63a:	9301      	str	r3, [sp, #4]
 801a63c:	4620      	mov	r0, r4
 801a63e:	f001 fdaf 	bl	801c1a0 <_vfiprintf_r>
 801a642:	b002      	add	sp, #8
 801a644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a648:	b004      	add	sp, #16
 801a64a:	4770      	bx	lr
 801a64c:	20000100 	.word	0x20000100

0801a650 <_sbrk_r>:
 801a650:	b538      	push	{r3, r4, r5, lr}
 801a652:	4d06      	ldr	r5, [pc, #24]	; (801a66c <_sbrk_r+0x1c>)
 801a654:	2300      	movs	r3, #0
 801a656:	4604      	mov	r4, r0
 801a658:	4608      	mov	r0, r1
 801a65a:	602b      	str	r3, [r5, #0]
 801a65c:	f002 fa48 	bl	801caf0 <_sbrk>
 801a660:	1c43      	adds	r3, r0, #1
 801a662:	d102      	bne.n	801a66a <_sbrk_r+0x1a>
 801a664:	682b      	ldr	r3, [r5, #0]
 801a666:	b103      	cbz	r3, 801a66a <_sbrk_r+0x1a>
 801a668:	6023      	str	r3, [r4, #0]
 801a66a:	bd38      	pop	{r3, r4, r5, pc}
 801a66c:	20002fc8 	.word	0x20002fc8

0801a670 <siprintf>:
 801a670:	b40e      	push	{r1, r2, r3}
 801a672:	b500      	push	{lr}
 801a674:	b09c      	sub	sp, #112	; 0x70
 801a676:	ab1d      	add	r3, sp, #116	; 0x74
 801a678:	9002      	str	r0, [sp, #8]
 801a67a:	9006      	str	r0, [sp, #24]
 801a67c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a680:	4809      	ldr	r0, [pc, #36]	; (801a6a8 <siprintf+0x38>)
 801a682:	9107      	str	r1, [sp, #28]
 801a684:	9104      	str	r1, [sp, #16]
 801a686:	4909      	ldr	r1, [pc, #36]	; (801a6ac <siprintf+0x3c>)
 801a688:	f853 2b04 	ldr.w	r2, [r3], #4
 801a68c:	9105      	str	r1, [sp, #20]
 801a68e:	6800      	ldr	r0, [r0, #0]
 801a690:	9301      	str	r3, [sp, #4]
 801a692:	a902      	add	r1, sp, #8
 801a694:	f001 fc5a 	bl	801bf4c <_svfiprintf_r>
 801a698:	9b02      	ldr	r3, [sp, #8]
 801a69a:	2200      	movs	r2, #0
 801a69c:	701a      	strb	r2, [r3, #0]
 801a69e:	b01c      	add	sp, #112	; 0x70
 801a6a0:	f85d eb04 	ldr.w	lr, [sp], #4
 801a6a4:	b003      	add	sp, #12
 801a6a6:	4770      	bx	lr
 801a6a8:	20000100 	.word	0x20000100
 801a6ac:	ffff0208 	.word	0xffff0208

0801a6b0 <strdup>:
 801a6b0:	4b02      	ldr	r3, [pc, #8]	; (801a6bc <strdup+0xc>)
 801a6b2:	4601      	mov	r1, r0
 801a6b4:	6818      	ldr	r0, [r3, #0]
 801a6b6:	f000 b803 	b.w	801a6c0 <_strdup_r>
 801a6ba:	bf00      	nop
 801a6bc:	20000100 	.word	0x20000100

0801a6c0 <_strdup_r>:
 801a6c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a6c2:	4604      	mov	r4, r0
 801a6c4:	4608      	mov	r0, r1
 801a6c6:	460d      	mov	r5, r1
 801a6c8:	f7e5 fd9a 	bl	8000200 <strlen>
 801a6cc:	1c42      	adds	r2, r0, #1
 801a6ce:	4611      	mov	r1, r2
 801a6d0:	4620      	mov	r0, r4
 801a6d2:	9201      	str	r2, [sp, #4]
 801a6d4:	f7ff fac6 	bl	8019c64 <_malloc_r>
 801a6d8:	4604      	mov	r4, r0
 801a6da:	b118      	cbz	r0, 801a6e4 <_strdup_r+0x24>
 801a6dc:	9a01      	ldr	r2, [sp, #4]
 801a6de:	4629      	mov	r1, r5
 801a6e0:	f7ff fa3e 	bl	8019b60 <memcpy>
 801a6e4:	4620      	mov	r0, r4
 801a6e6:	b003      	add	sp, #12
 801a6e8:	bd30      	pop	{r4, r5, pc}

0801a6ea <strstr>:
 801a6ea:	780a      	ldrb	r2, [r1, #0]
 801a6ec:	b570      	push	{r4, r5, r6, lr}
 801a6ee:	b96a      	cbnz	r2, 801a70c <strstr+0x22>
 801a6f0:	bd70      	pop	{r4, r5, r6, pc}
 801a6f2:	429a      	cmp	r2, r3
 801a6f4:	d109      	bne.n	801a70a <strstr+0x20>
 801a6f6:	460c      	mov	r4, r1
 801a6f8:	4605      	mov	r5, r0
 801a6fa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801a6fe:	2b00      	cmp	r3, #0
 801a700:	d0f6      	beq.n	801a6f0 <strstr+0x6>
 801a702:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801a706:	429e      	cmp	r6, r3
 801a708:	d0f7      	beq.n	801a6fa <strstr+0x10>
 801a70a:	3001      	adds	r0, #1
 801a70c:	7803      	ldrb	r3, [r0, #0]
 801a70e:	2b00      	cmp	r3, #0
 801a710:	d1ef      	bne.n	801a6f2 <strstr+0x8>
 801a712:	4618      	mov	r0, r3
 801a714:	e7ec      	b.n	801a6f0 <strstr+0x6>
	...

0801a718 <strtok>:
 801a718:	4b16      	ldr	r3, [pc, #88]	; (801a774 <strtok+0x5c>)
 801a71a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a71c:	681e      	ldr	r6, [r3, #0]
 801a71e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 801a720:	4605      	mov	r5, r0
 801a722:	b9fc      	cbnz	r4, 801a764 <strtok+0x4c>
 801a724:	2050      	movs	r0, #80	; 0x50
 801a726:	9101      	str	r1, [sp, #4]
 801a728:	f7ff fa0a 	bl	8019b40 <malloc>
 801a72c:	9901      	ldr	r1, [sp, #4]
 801a72e:	65b0      	str	r0, [r6, #88]	; 0x58
 801a730:	4602      	mov	r2, r0
 801a732:	b920      	cbnz	r0, 801a73e <strtok+0x26>
 801a734:	4b10      	ldr	r3, [pc, #64]	; (801a778 <strtok+0x60>)
 801a736:	4811      	ldr	r0, [pc, #68]	; (801a77c <strtok+0x64>)
 801a738:	2157      	movs	r1, #87	; 0x57
 801a73a:	f000 f849 	bl	801a7d0 <__assert_func>
 801a73e:	e9c0 4400 	strd	r4, r4, [r0]
 801a742:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801a746:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801a74a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801a74e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801a752:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801a756:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801a75a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801a75e:	6184      	str	r4, [r0, #24]
 801a760:	7704      	strb	r4, [r0, #28]
 801a762:	6244      	str	r4, [r0, #36]	; 0x24
 801a764:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801a766:	2301      	movs	r3, #1
 801a768:	4628      	mov	r0, r5
 801a76a:	b002      	add	sp, #8
 801a76c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a770:	f000 b806 	b.w	801a780 <__strtok_r>
 801a774:	20000100 	.word	0x20000100
 801a778:	0801d230 	.word	0x0801d230
 801a77c:	0801d247 	.word	0x0801d247

0801a780 <__strtok_r>:
 801a780:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a782:	b908      	cbnz	r0, 801a788 <__strtok_r+0x8>
 801a784:	6810      	ldr	r0, [r2, #0]
 801a786:	b188      	cbz	r0, 801a7ac <__strtok_r+0x2c>
 801a788:	4604      	mov	r4, r0
 801a78a:	4620      	mov	r0, r4
 801a78c:	f814 5b01 	ldrb.w	r5, [r4], #1
 801a790:	460f      	mov	r7, r1
 801a792:	f817 6b01 	ldrb.w	r6, [r7], #1
 801a796:	b91e      	cbnz	r6, 801a7a0 <__strtok_r+0x20>
 801a798:	b965      	cbnz	r5, 801a7b4 <__strtok_r+0x34>
 801a79a:	6015      	str	r5, [r2, #0]
 801a79c:	4628      	mov	r0, r5
 801a79e:	e005      	b.n	801a7ac <__strtok_r+0x2c>
 801a7a0:	42b5      	cmp	r5, r6
 801a7a2:	d1f6      	bne.n	801a792 <__strtok_r+0x12>
 801a7a4:	2b00      	cmp	r3, #0
 801a7a6:	d1f0      	bne.n	801a78a <__strtok_r+0xa>
 801a7a8:	6014      	str	r4, [r2, #0]
 801a7aa:	7003      	strb	r3, [r0, #0]
 801a7ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a7ae:	461c      	mov	r4, r3
 801a7b0:	e00c      	b.n	801a7cc <__strtok_r+0x4c>
 801a7b2:	b915      	cbnz	r5, 801a7ba <__strtok_r+0x3a>
 801a7b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a7b8:	460e      	mov	r6, r1
 801a7ba:	f816 5b01 	ldrb.w	r5, [r6], #1
 801a7be:	42ab      	cmp	r3, r5
 801a7c0:	d1f7      	bne.n	801a7b2 <__strtok_r+0x32>
 801a7c2:	2b00      	cmp	r3, #0
 801a7c4:	d0f3      	beq.n	801a7ae <__strtok_r+0x2e>
 801a7c6:	2300      	movs	r3, #0
 801a7c8:	f804 3c01 	strb.w	r3, [r4, #-1]
 801a7cc:	6014      	str	r4, [r2, #0]
 801a7ce:	e7ed      	b.n	801a7ac <__strtok_r+0x2c>

0801a7d0 <__assert_func>:
 801a7d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a7d2:	4614      	mov	r4, r2
 801a7d4:	461a      	mov	r2, r3
 801a7d6:	4b09      	ldr	r3, [pc, #36]	; (801a7fc <__assert_func+0x2c>)
 801a7d8:	681b      	ldr	r3, [r3, #0]
 801a7da:	4605      	mov	r5, r0
 801a7dc:	68d8      	ldr	r0, [r3, #12]
 801a7de:	b14c      	cbz	r4, 801a7f4 <__assert_func+0x24>
 801a7e0:	4b07      	ldr	r3, [pc, #28]	; (801a800 <__assert_func+0x30>)
 801a7e2:	9100      	str	r1, [sp, #0]
 801a7e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a7e8:	4906      	ldr	r1, [pc, #24]	; (801a804 <__assert_func+0x34>)
 801a7ea:	462b      	mov	r3, r5
 801a7ec:	f000 ff60 	bl	801b6b0 <fiprintf>
 801a7f0:	f001 ff2a 	bl	801c648 <abort>
 801a7f4:	4b04      	ldr	r3, [pc, #16]	; (801a808 <__assert_func+0x38>)
 801a7f6:	461c      	mov	r4, r3
 801a7f8:	e7f3      	b.n	801a7e2 <__assert_func+0x12>
 801a7fa:	bf00      	nop
 801a7fc:	20000100 	.word	0x20000100
 801a800:	0801d2a4 	.word	0x0801d2a4
 801a804:	0801d2b1 	.word	0x0801d2b1
 801a808:	0801d2df 	.word	0x0801d2df

0801a80c <quorem>:
 801a80c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a810:	6903      	ldr	r3, [r0, #16]
 801a812:	690c      	ldr	r4, [r1, #16]
 801a814:	42a3      	cmp	r3, r4
 801a816:	4607      	mov	r7, r0
 801a818:	f2c0 8081 	blt.w	801a91e <quorem+0x112>
 801a81c:	3c01      	subs	r4, #1
 801a81e:	f101 0814 	add.w	r8, r1, #20
 801a822:	f100 0514 	add.w	r5, r0, #20
 801a826:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a82a:	9301      	str	r3, [sp, #4]
 801a82c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a830:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a834:	3301      	adds	r3, #1
 801a836:	429a      	cmp	r2, r3
 801a838:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801a83c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a840:	fbb2 f6f3 	udiv	r6, r2, r3
 801a844:	d331      	bcc.n	801a8aa <quorem+0x9e>
 801a846:	f04f 0e00 	mov.w	lr, #0
 801a84a:	4640      	mov	r0, r8
 801a84c:	46ac      	mov	ip, r5
 801a84e:	46f2      	mov	sl, lr
 801a850:	f850 2b04 	ldr.w	r2, [r0], #4
 801a854:	b293      	uxth	r3, r2
 801a856:	fb06 e303 	mla	r3, r6, r3, lr
 801a85a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801a85e:	b29b      	uxth	r3, r3
 801a860:	ebaa 0303 	sub.w	r3, sl, r3
 801a864:	f8dc a000 	ldr.w	sl, [ip]
 801a868:	0c12      	lsrs	r2, r2, #16
 801a86a:	fa13 f38a 	uxtah	r3, r3, sl
 801a86e:	fb06 e202 	mla	r2, r6, r2, lr
 801a872:	9300      	str	r3, [sp, #0]
 801a874:	9b00      	ldr	r3, [sp, #0]
 801a876:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a87a:	b292      	uxth	r2, r2
 801a87c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801a880:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a884:	f8bd 3000 	ldrh.w	r3, [sp]
 801a888:	4581      	cmp	r9, r0
 801a88a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a88e:	f84c 3b04 	str.w	r3, [ip], #4
 801a892:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801a896:	d2db      	bcs.n	801a850 <quorem+0x44>
 801a898:	f855 300b 	ldr.w	r3, [r5, fp]
 801a89c:	b92b      	cbnz	r3, 801a8aa <quorem+0x9e>
 801a89e:	9b01      	ldr	r3, [sp, #4]
 801a8a0:	3b04      	subs	r3, #4
 801a8a2:	429d      	cmp	r5, r3
 801a8a4:	461a      	mov	r2, r3
 801a8a6:	d32e      	bcc.n	801a906 <quorem+0xfa>
 801a8a8:	613c      	str	r4, [r7, #16]
 801a8aa:	4638      	mov	r0, r7
 801a8ac:	f001 f9da 	bl	801bc64 <__mcmp>
 801a8b0:	2800      	cmp	r0, #0
 801a8b2:	db24      	blt.n	801a8fe <quorem+0xf2>
 801a8b4:	3601      	adds	r6, #1
 801a8b6:	4628      	mov	r0, r5
 801a8b8:	f04f 0c00 	mov.w	ip, #0
 801a8bc:	f858 2b04 	ldr.w	r2, [r8], #4
 801a8c0:	f8d0 e000 	ldr.w	lr, [r0]
 801a8c4:	b293      	uxth	r3, r2
 801a8c6:	ebac 0303 	sub.w	r3, ip, r3
 801a8ca:	0c12      	lsrs	r2, r2, #16
 801a8cc:	fa13 f38e 	uxtah	r3, r3, lr
 801a8d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801a8d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a8d8:	b29b      	uxth	r3, r3
 801a8da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a8de:	45c1      	cmp	r9, r8
 801a8e0:	f840 3b04 	str.w	r3, [r0], #4
 801a8e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801a8e8:	d2e8      	bcs.n	801a8bc <quorem+0xb0>
 801a8ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a8ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a8f2:	b922      	cbnz	r2, 801a8fe <quorem+0xf2>
 801a8f4:	3b04      	subs	r3, #4
 801a8f6:	429d      	cmp	r5, r3
 801a8f8:	461a      	mov	r2, r3
 801a8fa:	d30a      	bcc.n	801a912 <quorem+0x106>
 801a8fc:	613c      	str	r4, [r7, #16]
 801a8fe:	4630      	mov	r0, r6
 801a900:	b003      	add	sp, #12
 801a902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a906:	6812      	ldr	r2, [r2, #0]
 801a908:	3b04      	subs	r3, #4
 801a90a:	2a00      	cmp	r2, #0
 801a90c:	d1cc      	bne.n	801a8a8 <quorem+0x9c>
 801a90e:	3c01      	subs	r4, #1
 801a910:	e7c7      	b.n	801a8a2 <quorem+0x96>
 801a912:	6812      	ldr	r2, [r2, #0]
 801a914:	3b04      	subs	r3, #4
 801a916:	2a00      	cmp	r2, #0
 801a918:	d1f0      	bne.n	801a8fc <quorem+0xf0>
 801a91a:	3c01      	subs	r4, #1
 801a91c:	e7eb      	b.n	801a8f6 <quorem+0xea>
 801a91e:	2000      	movs	r0, #0
 801a920:	e7ee      	b.n	801a900 <quorem+0xf4>
 801a922:	0000      	movs	r0, r0
 801a924:	0000      	movs	r0, r0
	...

0801a928 <_dtoa_r>:
 801a928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a92c:	ed2d 8b04 	vpush	{d8-d9}
 801a930:	ec57 6b10 	vmov	r6, r7, d0
 801a934:	b093      	sub	sp, #76	; 0x4c
 801a936:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801a938:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801a93c:	9106      	str	r1, [sp, #24]
 801a93e:	ee10 aa10 	vmov	sl, s0
 801a942:	4604      	mov	r4, r0
 801a944:	9209      	str	r2, [sp, #36]	; 0x24
 801a946:	930c      	str	r3, [sp, #48]	; 0x30
 801a948:	46bb      	mov	fp, r7
 801a94a:	b975      	cbnz	r5, 801a96a <_dtoa_r+0x42>
 801a94c:	2010      	movs	r0, #16
 801a94e:	f7ff f8f7 	bl	8019b40 <malloc>
 801a952:	4602      	mov	r2, r0
 801a954:	6260      	str	r0, [r4, #36]	; 0x24
 801a956:	b920      	cbnz	r0, 801a962 <_dtoa_r+0x3a>
 801a958:	4ba7      	ldr	r3, [pc, #668]	; (801abf8 <_dtoa_r+0x2d0>)
 801a95a:	21ea      	movs	r1, #234	; 0xea
 801a95c:	48a7      	ldr	r0, [pc, #668]	; (801abfc <_dtoa_r+0x2d4>)
 801a95e:	f7ff ff37 	bl	801a7d0 <__assert_func>
 801a962:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a966:	6005      	str	r5, [r0, #0]
 801a968:	60c5      	str	r5, [r0, #12]
 801a96a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a96c:	6819      	ldr	r1, [r3, #0]
 801a96e:	b151      	cbz	r1, 801a986 <_dtoa_r+0x5e>
 801a970:	685a      	ldr	r2, [r3, #4]
 801a972:	604a      	str	r2, [r1, #4]
 801a974:	2301      	movs	r3, #1
 801a976:	4093      	lsls	r3, r2
 801a978:	608b      	str	r3, [r1, #8]
 801a97a:	4620      	mov	r0, r4
 801a97c:	f000 ff30 	bl	801b7e0 <_Bfree>
 801a980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a982:	2200      	movs	r2, #0
 801a984:	601a      	str	r2, [r3, #0]
 801a986:	1e3b      	subs	r3, r7, #0
 801a988:	bfaa      	itet	ge
 801a98a:	2300      	movge	r3, #0
 801a98c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801a990:	f8c8 3000 	strge.w	r3, [r8]
 801a994:	4b9a      	ldr	r3, [pc, #616]	; (801ac00 <_dtoa_r+0x2d8>)
 801a996:	bfbc      	itt	lt
 801a998:	2201      	movlt	r2, #1
 801a99a:	f8c8 2000 	strlt.w	r2, [r8]
 801a99e:	ea33 030b 	bics.w	r3, r3, fp
 801a9a2:	d11b      	bne.n	801a9dc <_dtoa_r+0xb4>
 801a9a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a9a6:	f242 730f 	movw	r3, #9999	; 0x270f
 801a9aa:	6013      	str	r3, [r2, #0]
 801a9ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a9b0:	4333      	orrs	r3, r6
 801a9b2:	f000 8592 	beq.w	801b4da <_dtoa_r+0xbb2>
 801a9b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a9b8:	b963      	cbnz	r3, 801a9d4 <_dtoa_r+0xac>
 801a9ba:	4b92      	ldr	r3, [pc, #584]	; (801ac04 <_dtoa_r+0x2dc>)
 801a9bc:	e022      	b.n	801aa04 <_dtoa_r+0xdc>
 801a9be:	4b92      	ldr	r3, [pc, #584]	; (801ac08 <_dtoa_r+0x2e0>)
 801a9c0:	9301      	str	r3, [sp, #4]
 801a9c2:	3308      	adds	r3, #8
 801a9c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a9c6:	6013      	str	r3, [r2, #0]
 801a9c8:	9801      	ldr	r0, [sp, #4]
 801a9ca:	b013      	add	sp, #76	; 0x4c
 801a9cc:	ecbd 8b04 	vpop	{d8-d9}
 801a9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9d4:	4b8b      	ldr	r3, [pc, #556]	; (801ac04 <_dtoa_r+0x2dc>)
 801a9d6:	9301      	str	r3, [sp, #4]
 801a9d8:	3303      	adds	r3, #3
 801a9da:	e7f3      	b.n	801a9c4 <_dtoa_r+0x9c>
 801a9dc:	2200      	movs	r2, #0
 801a9de:	2300      	movs	r3, #0
 801a9e0:	4650      	mov	r0, sl
 801a9e2:	4659      	mov	r1, fp
 801a9e4:	f7e6 f888 	bl	8000af8 <__aeabi_dcmpeq>
 801a9e8:	ec4b ab19 	vmov	d9, sl, fp
 801a9ec:	4680      	mov	r8, r0
 801a9ee:	b158      	cbz	r0, 801aa08 <_dtoa_r+0xe0>
 801a9f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a9f2:	2301      	movs	r3, #1
 801a9f4:	6013      	str	r3, [r2, #0]
 801a9f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a9f8:	2b00      	cmp	r3, #0
 801a9fa:	f000 856b 	beq.w	801b4d4 <_dtoa_r+0xbac>
 801a9fe:	4883      	ldr	r0, [pc, #524]	; (801ac0c <_dtoa_r+0x2e4>)
 801aa00:	6018      	str	r0, [r3, #0]
 801aa02:	1e43      	subs	r3, r0, #1
 801aa04:	9301      	str	r3, [sp, #4]
 801aa06:	e7df      	b.n	801a9c8 <_dtoa_r+0xa0>
 801aa08:	ec4b ab10 	vmov	d0, sl, fp
 801aa0c:	aa10      	add	r2, sp, #64	; 0x40
 801aa0e:	a911      	add	r1, sp, #68	; 0x44
 801aa10:	4620      	mov	r0, r4
 801aa12:	f001 f9cd 	bl	801bdb0 <__d2b>
 801aa16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801aa1a:	ee08 0a10 	vmov	s16, r0
 801aa1e:	2d00      	cmp	r5, #0
 801aa20:	f000 8084 	beq.w	801ab2c <_dtoa_r+0x204>
 801aa24:	ee19 3a90 	vmov	r3, s19
 801aa28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801aa2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801aa30:	4656      	mov	r6, sl
 801aa32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801aa36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801aa3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801aa3e:	4b74      	ldr	r3, [pc, #464]	; (801ac10 <_dtoa_r+0x2e8>)
 801aa40:	2200      	movs	r2, #0
 801aa42:	4630      	mov	r0, r6
 801aa44:	4639      	mov	r1, r7
 801aa46:	f7e5 fc37 	bl	80002b8 <__aeabi_dsub>
 801aa4a:	a365      	add	r3, pc, #404	; (adr r3, 801abe0 <_dtoa_r+0x2b8>)
 801aa4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa50:	f7e5 fdea 	bl	8000628 <__aeabi_dmul>
 801aa54:	a364      	add	r3, pc, #400	; (adr r3, 801abe8 <_dtoa_r+0x2c0>)
 801aa56:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa5a:	f7e5 fc2f 	bl	80002bc <__adddf3>
 801aa5e:	4606      	mov	r6, r0
 801aa60:	4628      	mov	r0, r5
 801aa62:	460f      	mov	r7, r1
 801aa64:	f7e5 fd76 	bl	8000554 <__aeabi_i2d>
 801aa68:	a361      	add	r3, pc, #388	; (adr r3, 801abf0 <_dtoa_r+0x2c8>)
 801aa6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa6e:	f7e5 fddb 	bl	8000628 <__aeabi_dmul>
 801aa72:	4602      	mov	r2, r0
 801aa74:	460b      	mov	r3, r1
 801aa76:	4630      	mov	r0, r6
 801aa78:	4639      	mov	r1, r7
 801aa7a:	f7e5 fc1f 	bl	80002bc <__adddf3>
 801aa7e:	4606      	mov	r6, r0
 801aa80:	460f      	mov	r7, r1
 801aa82:	f7e6 f881 	bl	8000b88 <__aeabi_d2iz>
 801aa86:	2200      	movs	r2, #0
 801aa88:	9000      	str	r0, [sp, #0]
 801aa8a:	2300      	movs	r3, #0
 801aa8c:	4630      	mov	r0, r6
 801aa8e:	4639      	mov	r1, r7
 801aa90:	f7e6 f83c 	bl	8000b0c <__aeabi_dcmplt>
 801aa94:	b150      	cbz	r0, 801aaac <_dtoa_r+0x184>
 801aa96:	9800      	ldr	r0, [sp, #0]
 801aa98:	f7e5 fd5c 	bl	8000554 <__aeabi_i2d>
 801aa9c:	4632      	mov	r2, r6
 801aa9e:	463b      	mov	r3, r7
 801aaa0:	f7e6 f82a 	bl	8000af8 <__aeabi_dcmpeq>
 801aaa4:	b910      	cbnz	r0, 801aaac <_dtoa_r+0x184>
 801aaa6:	9b00      	ldr	r3, [sp, #0]
 801aaa8:	3b01      	subs	r3, #1
 801aaaa:	9300      	str	r3, [sp, #0]
 801aaac:	9b00      	ldr	r3, [sp, #0]
 801aaae:	2b16      	cmp	r3, #22
 801aab0:	d85a      	bhi.n	801ab68 <_dtoa_r+0x240>
 801aab2:	9a00      	ldr	r2, [sp, #0]
 801aab4:	4b57      	ldr	r3, [pc, #348]	; (801ac14 <_dtoa_r+0x2ec>)
 801aab6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801aaba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aabe:	ec51 0b19 	vmov	r0, r1, d9
 801aac2:	f7e6 f823 	bl	8000b0c <__aeabi_dcmplt>
 801aac6:	2800      	cmp	r0, #0
 801aac8:	d050      	beq.n	801ab6c <_dtoa_r+0x244>
 801aaca:	9b00      	ldr	r3, [sp, #0]
 801aacc:	3b01      	subs	r3, #1
 801aace:	9300      	str	r3, [sp, #0]
 801aad0:	2300      	movs	r3, #0
 801aad2:	930b      	str	r3, [sp, #44]	; 0x2c
 801aad4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aad6:	1b5d      	subs	r5, r3, r5
 801aad8:	1e6b      	subs	r3, r5, #1
 801aada:	9305      	str	r3, [sp, #20]
 801aadc:	bf45      	ittet	mi
 801aade:	f1c5 0301 	rsbmi	r3, r5, #1
 801aae2:	9304      	strmi	r3, [sp, #16]
 801aae4:	2300      	movpl	r3, #0
 801aae6:	2300      	movmi	r3, #0
 801aae8:	bf4c      	ite	mi
 801aaea:	9305      	strmi	r3, [sp, #20]
 801aaec:	9304      	strpl	r3, [sp, #16]
 801aaee:	9b00      	ldr	r3, [sp, #0]
 801aaf0:	2b00      	cmp	r3, #0
 801aaf2:	db3d      	blt.n	801ab70 <_dtoa_r+0x248>
 801aaf4:	9b05      	ldr	r3, [sp, #20]
 801aaf6:	9a00      	ldr	r2, [sp, #0]
 801aaf8:	920a      	str	r2, [sp, #40]	; 0x28
 801aafa:	4413      	add	r3, r2
 801aafc:	9305      	str	r3, [sp, #20]
 801aafe:	2300      	movs	r3, #0
 801ab00:	9307      	str	r3, [sp, #28]
 801ab02:	9b06      	ldr	r3, [sp, #24]
 801ab04:	2b09      	cmp	r3, #9
 801ab06:	f200 8089 	bhi.w	801ac1c <_dtoa_r+0x2f4>
 801ab0a:	2b05      	cmp	r3, #5
 801ab0c:	bfc4      	itt	gt
 801ab0e:	3b04      	subgt	r3, #4
 801ab10:	9306      	strgt	r3, [sp, #24]
 801ab12:	9b06      	ldr	r3, [sp, #24]
 801ab14:	f1a3 0302 	sub.w	r3, r3, #2
 801ab18:	bfcc      	ite	gt
 801ab1a:	2500      	movgt	r5, #0
 801ab1c:	2501      	movle	r5, #1
 801ab1e:	2b03      	cmp	r3, #3
 801ab20:	f200 8087 	bhi.w	801ac32 <_dtoa_r+0x30a>
 801ab24:	e8df f003 	tbb	[pc, r3]
 801ab28:	59383a2d 	.word	0x59383a2d
 801ab2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801ab30:	441d      	add	r5, r3
 801ab32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801ab36:	2b20      	cmp	r3, #32
 801ab38:	bfc1      	itttt	gt
 801ab3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801ab3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801ab42:	fa0b f303 	lslgt.w	r3, fp, r3
 801ab46:	fa26 f000 	lsrgt.w	r0, r6, r0
 801ab4a:	bfda      	itte	le
 801ab4c:	f1c3 0320 	rsble	r3, r3, #32
 801ab50:	fa06 f003 	lslle.w	r0, r6, r3
 801ab54:	4318      	orrgt	r0, r3
 801ab56:	f7e5 fced 	bl	8000534 <__aeabi_ui2d>
 801ab5a:	2301      	movs	r3, #1
 801ab5c:	4606      	mov	r6, r0
 801ab5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801ab62:	3d01      	subs	r5, #1
 801ab64:	930e      	str	r3, [sp, #56]	; 0x38
 801ab66:	e76a      	b.n	801aa3e <_dtoa_r+0x116>
 801ab68:	2301      	movs	r3, #1
 801ab6a:	e7b2      	b.n	801aad2 <_dtoa_r+0x1aa>
 801ab6c:	900b      	str	r0, [sp, #44]	; 0x2c
 801ab6e:	e7b1      	b.n	801aad4 <_dtoa_r+0x1ac>
 801ab70:	9b04      	ldr	r3, [sp, #16]
 801ab72:	9a00      	ldr	r2, [sp, #0]
 801ab74:	1a9b      	subs	r3, r3, r2
 801ab76:	9304      	str	r3, [sp, #16]
 801ab78:	4253      	negs	r3, r2
 801ab7a:	9307      	str	r3, [sp, #28]
 801ab7c:	2300      	movs	r3, #0
 801ab7e:	930a      	str	r3, [sp, #40]	; 0x28
 801ab80:	e7bf      	b.n	801ab02 <_dtoa_r+0x1da>
 801ab82:	2300      	movs	r3, #0
 801ab84:	9308      	str	r3, [sp, #32]
 801ab86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab88:	2b00      	cmp	r3, #0
 801ab8a:	dc55      	bgt.n	801ac38 <_dtoa_r+0x310>
 801ab8c:	2301      	movs	r3, #1
 801ab8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801ab92:	461a      	mov	r2, r3
 801ab94:	9209      	str	r2, [sp, #36]	; 0x24
 801ab96:	e00c      	b.n	801abb2 <_dtoa_r+0x28a>
 801ab98:	2301      	movs	r3, #1
 801ab9a:	e7f3      	b.n	801ab84 <_dtoa_r+0x25c>
 801ab9c:	2300      	movs	r3, #0
 801ab9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aba0:	9308      	str	r3, [sp, #32]
 801aba2:	9b00      	ldr	r3, [sp, #0]
 801aba4:	4413      	add	r3, r2
 801aba6:	9302      	str	r3, [sp, #8]
 801aba8:	3301      	adds	r3, #1
 801abaa:	2b01      	cmp	r3, #1
 801abac:	9303      	str	r3, [sp, #12]
 801abae:	bfb8      	it	lt
 801abb0:	2301      	movlt	r3, #1
 801abb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801abb4:	2200      	movs	r2, #0
 801abb6:	6042      	str	r2, [r0, #4]
 801abb8:	2204      	movs	r2, #4
 801abba:	f102 0614 	add.w	r6, r2, #20
 801abbe:	429e      	cmp	r6, r3
 801abc0:	6841      	ldr	r1, [r0, #4]
 801abc2:	d93d      	bls.n	801ac40 <_dtoa_r+0x318>
 801abc4:	4620      	mov	r0, r4
 801abc6:	f000 fdcb 	bl	801b760 <_Balloc>
 801abca:	9001      	str	r0, [sp, #4]
 801abcc:	2800      	cmp	r0, #0
 801abce:	d13b      	bne.n	801ac48 <_dtoa_r+0x320>
 801abd0:	4b11      	ldr	r3, [pc, #68]	; (801ac18 <_dtoa_r+0x2f0>)
 801abd2:	4602      	mov	r2, r0
 801abd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801abd8:	e6c0      	b.n	801a95c <_dtoa_r+0x34>
 801abda:	2301      	movs	r3, #1
 801abdc:	e7df      	b.n	801ab9e <_dtoa_r+0x276>
 801abde:	bf00      	nop
 801abe0:	636f4361 	.word	0x636f4361
 801abe4:	3fd287a7 	.word	0x3fd287a7
 801abe8:	8b60c8b3 	.word	0x8b60c8b3
 801abec:	3fc68a28 	.word	0x3fc68a28
 801abf0:	509f79fb 	.word	0x509f79fb
 801abf4:	3fd34413 	.word	0x3fd34413
 801abf8:	0801d230 	.word	0x0801d230
 801abfc:	0801d3ee 	.word	0x0801d3ee
 801ac00:	7ff00000 	.word	0x7ff00000
 801ac04:	0801d3ea 	.word	0x0801d3ea
 801ac08:	0801d3e1 	.word	0x0801d3e1
 801ac0c:	0801d20d 	.word	0x0801d20d
 801ac10:	3ff80000 	.word	0x3ff80000
 801ac14:	0801d550 	.word	0x0801d550
 801ac18:	0801d449 	.word	0x0801d449
 801ac1c:	2501      	movs	r5, #1
 801ac1e:	2300      	movs	r3, #0
 801ac20:	9306      	str	r3, [sp, #24]
 801ac22:	9508      	str	r5, [sp, #32]
 801ac24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ac28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801ac2c:	2200      	movs	r2, #0
 801ac2e:	2312      	movs	r3, #18
 801ac30:	e7b0      	b.n	801ab94 <_dtoa_r+0x26c>
 801ac32:	2301      	movs	r3, #1
 801ac34:	9308      	str	r3, [sp, #32]
 801ac36:	e7f5      	b.n	801ac24 <_dtoa_r+0x2fc>
 801ac38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801ac3e:	e7b8      	b.n	801abb2 <_dtoa_r+0x28a>
 801ac40:	3101      	adds	r1, #1
 801ac42:	6041      	str	r1, [r0, #4]
 801ac44:	0052      	lsls	r2, r2, #1
 801ac46:	e7b8      	b.n	801abba <_dtoa_r+0x292>
 801ac48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ac4a:	9a01      	ldr	r2, [sp, #4]
 801ac4c:	601a      	str	r2, [r3, #0]
 801ac4e:	9b03      	ldr	r3, [sp, #12]
 801ac50:	2b0e      	cmp	r3, #14
 801ac52:	f200 809d 	bhi.w	801ad90 <_dtoa_r+0x468>
 801ac56:	2d00      	cmp	r5, #0
 801ac58:	f000 809a 	beq.w	801ad90 <_dtoa_r+0x468>
 801ac5c:	9b00      	ldr	r3, [sp, #0]
 801ac5e:	2b00      	cmp	r3, #0
 801ac60:	dd32      	ble.n	801acc8 <_dtoa_r+0x3a0>
 801ac62:	4ab7      	ldr	r2, [pc, #732]	; (801af40 <_dtoa_r+0x618>)
 801ac64:	f003 030f 	and.w	r3, r3, #15
 801ac68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801ac6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ac70:	9b00      	ldr	r3, [sp, #0]
 801ac72:	05d8      	lsls	r0, r3, #23
 801ac74:	ea4f 1723 	mov.w	r7, r3, asr #4
 801ac78:	d516      	bpl.n	801aca8 <_dtoa_r+0x380>
 801ac7a:	4bb2      	ldr	r3, [pc, #712]	; (801af44 <_dtoa_r+0x61c>)
 801ac7c:	ec51 0b19 	vmov	r0, r1, d9
 801ac80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ac84:	f7e5 fdfa 	bl	800087c <__aeabi_ddiv>
 801ac88:	f007 070f 	and.w	r7, r7, #15
 801ac8c:	4682      	mov	sl, r0
 801ac8e:	468b      	mov	fp, r1
 801ac90:	2503      	movs	r5, #3
 801ac92:	4eac      	ldr	r6, [pc, #688]	; (801af44 <_dtoa_r+0x61c>)
 801ac94:	b957      	cbnz	r7, 801acac <_dtoa_r+0x384>
 801ac96:	4642      	mov	r2, r8
 801ac98:	464b      	mov	r3, r9
 801ac9a:	4650      	mov	r0, sl
 801ac9c:	4659      	mov	r1, fp
 801ac9e:	f7e5 fded 	bl	800087c <__aeabi_ddiv>
 801aca2:	4682      	mov	sl, r0
 801aca4:	468b      	mov	fp, r1
 801aca6:	e028      	b.n	801acfa <_dtoa_r+0x3d2>
 801aca8:	2502      	movs	r5, #2
 801acaa:	e7f2      	b.n	801ac92 <_dtoa_r+0x36a>
 801acac:	07f9      	lsls	r1, r7, #31
 801acae:	d508      	bpl.n	801acc2 <_dtoa_r+0x39a>
 801acb0:	4640      	mov	r0, r8
 801acb2:	4649      	mov	r1, r9
 801acb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 801acb8:	f7e5 fcb6 	bl	8000628 <__aeabi_dmul>
 801acbc:	3501      	adds	r5, #1
 801acbe:	4680      	mov	r8, r0
 801acc0:	4689      	mov	r9, r1
 801acc2:	107f      	asrs	r7, r7, #1
 801acc4:	3608      	adds	r6, #8
 801acc6:	e7e5      	b.n	801ac94 <_dtoa_r+0x36c>
 801acc8:	f000 809b 	beq.w	801ae02 <_dtoa_r+0x4da>
 801accc:	9b00      	ldr	r3, [sp, #0]
 801acce:	4f9d      	ldr	r7, [pc, #628]	; (801af44 <_dtoa_r+0x61c>)
 801acd0:	425e      	negs	r6, r3
 801acd2:	4b9b      	ldr	r3, [pc, #620]	; (801af40 <_dtoa_r+0x618>)
 801acd4:	f006 020f 	and.w	r2, r6, #15
 801acd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801acdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ace0:	ec51 0b19 	vmov	r0, r1, d9
 801ace4:	f7e5 fca0 	bl	8000628 <__aeabi_dmul>
 801ace8:	1136      	asrs	r6, r6, #4
 801acea:	4682      	mov	sl, r0
 801acec:	468b      	mov	fp, r1
 801acee:	2300      	movs	r3, #0
 801acf0:	2502      	movs	r5, #2
 801acf2:	2e00      	cmp	r6, #0
 801acf4:	d17a      	bne.n	801adec <_dtoa_r+0x4c4>
 801acf6:	2b00      	cmp	r3, #0
 801acf8:	d1d3      	bne.n	801aca2 <_dtoa_r+0x37a>
 801acfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801acfc:	2b00      	cmp	r3, #0
 801acfe:	f000 8082 	beq.w	801ae06 <_dtoa_r+0x4de>
 801ad02:	4b91      	ldr	r3, [pc, #580]	; (801af48 <_dtoa_r+0x620>)
 801ad04:	2200      	movs	r2, #0
 801ad06:	4650      	mov	r0, sl
 801ad08:	4659      	mov	r1, fp
 801ad0a:	f7e5 feff 	bl	8000b0c <__aeabi_dcmplt>
 801ad0e:	2800      	cmp	r0, #0
 801ad10:	d079      	beq.n	801ae06 <_dtoa_r+0x4de>
 801ad12:	9b03      	ldr	r3, [sp, #12]
 801ad14:	2b00      	cmp	r3, #0
 801ad16:	d076      	beq.n	801ae06 <_dtoa_r+0x4de>
 801ad18:	9b02      	ldr	r3, [sp, #8]
 801ad1a:	2b00      	cmp	r3, #0
 801ad1c:	dd36      	ble.n	801ad8c <_dtoa_r+0x464>
 801ad1e:	9b00      	ldr	r3, [sp, #0]
 801ad20:	4650      	mov	r0, sl
 801ad22:	4659      	mov	r1, fp
 801ad24:	1e5f      	subs	r7, r3, #1
 801ad26:	2200      	movs	r2, #0
 801ad28:	4b88      	ldr	r3, [pc, #544]	; (801af4c <_dtoa_r+0x624>)
 801ad2a:	f7e5 fc7d 	bl	8000628 <__aeabi_dmul>
 801ad2e:	9e02      	ldr	r6, [sp, #8]
 801ad30:	4682      	mov	sl, r0
 801ad32:	468b      	mov	fp, r1
 801ad34:	3501      	adds	r5, #1
 801ad36:	4628      	mov	r0, r5
 801ad38:	f7e5 fc0c 	bl	8000554 <__aeabi_i2d>
 801ad3c:	4652      	mov	r2, sl
 801ad3e:	465b      	mov	r3, fp
 801ad40:	f7e5 fc72 	bl	8000628 <__aeabi_dmul>
 801ad44:	4b82      	ldr	r3, [pc, #520]	; (801af50 <_dtoa_r+0x628>)
 801ad46:	2200      	movs	r2, #0
 801ad48:	f7e5 fab8 	bl	80002bc <__adddf3>
 801ad4c:	46d0      	mov	r8, sl
 801ad4e:	46d9      	mov	r9, fp
 801ad50:	4682      	mov	sl, r0
 801ad52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801ad56:	2e00      	cmp	r6, #0
 801ad58:	d158      	bne.n	801ae0c <_dtoa_r+0x4e4>
 801ad5a:	4b7e      	ldr	r3, [pc, #504]	; (801af54 <_dtoa_r+0x62c>)
 801ad5c:	2200      	movs	r2, #0
 801ad5e:	4640      	mov	r0, r8
 801ad60:	4649      	mov	r1, r9
 801ad62:	f7e5 faa9 	bl	80002b8 <__aeabi_dsub>
 801ad66:	4652      	mov	r2, sl
 801ad68:	465b      	mov	r3, fp
 801ad6a:	4680      	mov	r8, r0
 801ad6c:	4689      	mov	r9, r1
 801ad6e:	f7e5 feeb 	bl	8000b48 <__aeabi_dcmpgt>
 801ad72:	2800      	cmp	r0, #0
 801ad74:	f040 8295 	bne.w	801b2a2 <_dtoa_r+0x97a>
 801ad78:	4652      	mov	r2, sl
 801ad7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801ad7e:	4640      	mov	r0, r8
 801ad80:	4649      	mov	r1, r9
 801ad82:	f7e5 fec3 	bl	8000b0c <__aeabi_dcmplt>
 801ad86:	2800      	cmp	r0, #0
 801ad88:	f040 8289 	bne.w	801b29e <_dtoa_r+0x976>
 801ad8c:	ec5b ab19 	vmov	sl, fp, d9
 801ad90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ad92:	2b00      	cmp	r3, #0
 801ad94:	f2c0 8148 	blt.w	801b028 <_dtoa_r+0x700>
 801ad98:	9a00      	ldr	r2, [sp, #0]
 801ad9a:	2a0e      	cmp	r2, #14
 801ad9c:	f300 8144 	bgt.w	801b028 <_dtoa_r+0x700>
 801ada0:	4b67      	ldr	r3, [pc, #412]	; (801af40 <_dtoa_r+0x618>)
 801ada2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ada6:	e9d3 8900 	ldrd	r8, r9, [r3]
 801adaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801adac:	2b00      	cmp	r3, #0
 801adae:	f280 80d5 	bge.w	801af5c <_dtoa_r+0x634>
 801adb2:	9b03      	ldr	r3, [sp, #12]
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	f300 80d1 	bgt.w	801af5c <_dtoa_r+0x634>
 801adba:	f040 826f 	bne.w	801b29c <_dtoa_r+0x974>
 801adbe:	4b65      	ldr	r3, [pc, #404]	; (801af54 <_dtoa_r+0x62c>)
 801adc0:	2200      	movs	r2, #0
 801adc2:	4640      	mov	r0, r8
 801adc4:	4649      	mov	r1, r9
 801adc6:	f7e5 fc2f 	bl	8000628 <__aeabi_dmul>
 801adca:	4652      	mov	r2, sl
 801adcc:	465b      	mov	r3, fp
 801adce:	f7e5 feb1 	bl	8000b34 <__aeabi_dcmpge>
 801add2:	9e03      	ldr	r6, [sp, #12]
 801add4:	4637      	mov	r7, r6
 801add6:	2800      	cmp	r0, #0
 801add8:	f040 8245 	bne.w	801b266 <_dtoa_r+0x93e>
 801addc:	9d01      	ldr	r5, [sp, #4]
 801adde:	2331      	movs	r3, #49	; 0x31
 801ade0:	f805 3b01 	strb.w	r3, [r5], #1
 801ade4:	9b00      	ldr	r3, [sp, #0]
 801ade6:	3301      	adds	r3, #1
 801ade8:	9300      	str	r3, [sp, #0]
 801adea:	e240      	b.n	801b26e <_dtoa_r+0x946>
 801adec:	07f2      	lsls	r2, r6, #31
 801adee:	d505      	bpl.n	801adfc <_dtoa_r+0x4d4>
 801adf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801adf4:	f7e5 fc18 	bl	8000628 <__aeabi_dmul>
 801adf8:	3501      	adds	r5, #1
 801adfa:	2301      	movs	r3, #1
 801adfc:	1076      	asrs	r6, r6, #1
 801adfe:	3708      	adds	r7, #8
 801ae00:	e777      	b.n	801acf2 <_dtoa_r+0x3ca>
 801ae02:	2502      	movs	r5, #2
 801ae04:	e779      	b.n	801acfa <_dtoa_r+0x3d2>
 801ae06:	9f00      	ldr	r7, [sp, #0]
 801ae08:	9e03      	ldr	r6, [sp, #12]
 801ae0a:	e794      	b.n	801ad36 <_dtoa_r+0x40e>
 801ae0c:	9901      	ldr	r1, [sp, #4]
 801ae0e:	4b4c      	ldr	r3, [pc, #304]	; (801af40 <_dtoa_r+0x618>)
 801ae10:	4431      	add	r1, r6
 801ae12:	910d      	str	r1, [sp, #52]	; 0x34
 801ae14:	9908      	ldr	r1, [sp, #32]
 801ae16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801ae1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801ae1e:	2900      	cmp	r1, #0
 801ae20:	d043      	beq.n	801aeaa <_dtoa_r+0x582>
 801ae22:	494d      	ldr	r1, [pc, #308]	; (801af58 <_dtoa_r+0x630>)
 801ae24:	2000      	movs	r0, #0
 801ae26:	f7e5 fd29 	bl	800087c <__aeabi_ddiv>
 801ae2a:	4652      	mov	r2, sl
 801ae2c:	465b      	mov	r3, fp
 801ae2e:	f7e5 fa43 	bl	80002b8 <__aeabi_dsub>
 801ae32:	9d01      	ldr	r5, [sp, #4]
 801ae34:	4682      	mov	sl, r0
 801ae36:	468b      	mov	fp, r1
 801ae38:	4649      	mov	r1, r9
 801ae3a:	4640      	mov	r0, r8
 801ae3c:	f7e5 fea4 	bl	8000b88 <__aeabi_d2iz>
 801ae40:	4606      	mov	r6, r0
 801ae42:	f7e5 fb87 	bl	8000554 <__aeabi_i2d>
 801ae46:	4602      	mov	r2, r0
 801ae48:	460b      	mov	r3, r1
 801ae4a:	4640      	mov	r0, r8
 801ae4c:	4649      	mov	r1, r9
 801ae4e:	f7e5 fa33 	bl	80002b8 <__aeabi_dsub>
 801ae52:	3630      	adds	r6, #48	; 0x30
 801ae54:	f805 6b01 	strb.w	r6, [r5], #1
 801ae58:	4652      	mov	r2, sl
 801ae5a:	465b      	mov	r3, fp
 801ae5c:	4680      	mov	r8, r0
 801ae5e:	4689      	mov	r9, r1
 801ae60:	f7e5 fe54 	bl	8000b0c <__aeabi_dcmplt>
 801ae64:	2800      	cmp	r0, #0
 801ae66:	d163      	bne.n	801af30 <_dtoa_r+0x608>
 801ae68:	4642      	mov	r2, r8
 801ae6a:	464b      	mov	r3, r9
 801ae6c:	4936      	ldr	r1, [pc, #216]	; (801af48 <_dtoa_r+0x620>)
 801ae6e:	2000      	movs	r0, #0
 801ae70:	f7e5 fa22 	bl	80002b8 <__aeabi_dsub>
 801ae74:	4652      	mov	r2, sl
 801ae76:	465b      	mov	r3, fp
 801ae78:	f7e5 fe48 	bl	8000b0c <__aeabi_dcmplt>
 801ae7c:	2800      	cmp	r0, #0
 801ae7e:	f040 80b5 	bne.w	801afec <_dtoa_r+0x6c4>
 801ae82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ae84:	429d      	cmp	r5, r3
 801ae86:	d081      	beq.n	801ad8c <_dtoa_r+0x464>
 801ae88:	4b30      	ldr	r3, [pc, #192]	; (801af4c <_dtoa_r+0x624>)
 801ae8a:	2200      	movs	r2, #0
 801ae8c:	4650      	mov	r0, sl
 801ae8e:	4659      	mov	r1, fp
 801ae90:	f7e5 fbca 	bl	8000628 <__aeabi_dmul>
 801ae94:	4b2d      	ldr	r3, [pc, #180]	; (801af4c <_dtoa_r+0x624>)
 801ae96:	4682      	mov	sl, r0
 801ae98:	468b      	mov	fp, r1
 801ae9a:	4640      	mov	r0, r8
 801ae9c:	4649      	mov	r1, r9
 801ae9e:	2200      	movs	r2, #0
 801aea0:	f7e5 fbc2 	bl	8000628 <__aeabi_dmul>
 801aea4:	4680      	mov	r8, r0
 801aea6:	4689      	mov	r9, r1
 801aea8:	e7c6      	b.n	801ae38 <_dtoa_r+0x510>
 801aeaa:	4650      	mov	r0, sl
 801aeac:	4659      	mov	r1, fp
 801aeae:	f7e5 fbbb 	bl	8000628 <__aeabi_dmul>
 801aeb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aeb4:	9d01      	ldr	r5, [sp, #4]
 801aeb6:	930f      	str	r3, [sp, #60]	; 0x3c
 801aeb8:	4682      	mov	sl, r0
 801aeba:	468b      	mov	fp, r1
 801aebc:	4649      	mov	r1, r9
 801aebe:	4640      	mov	r0, r8
 801aec0:	f7e5 fe62 	bl	8000b88 <__aeabi_d2iz>
 801aec4:	4606      	mov	r6, r0
 801aec6:	f7e5 fb45 	bl	8000554 <__aeabi_i2d>
 801aeca:	3630      	adds	r6, #48	; 0x30
 801aecc:	4602      	mov	r2, r0
 801aece:	460b      	mov	r3, r1
 801aed0:	4640      	mov	r0, r8
 801aed2:	4649      	mov	r1, r9
 801aed4:	f7e5 f9f0 	bl	80002b8 <__aeabi_dsub>
 801aed8:	f805 6b01 	strb.w	r6, [r5], #1
 801aedc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aede:	429d      	cmp	r5, r3
 801aee0:	4680      	mov	r8, r0
 801aee2:	4689      	mov	r9, r1
 801aee4:	f04f 0200 	mov.w	r2, #0
 801aee8:	d124      	bne.n	801af34 <_dtoa_r+0x60c>
 801aeea:	4b1b      	ldr	r3, [pc, #108]	; (801af58 <_dtoa_r+0x630>)
 801aeec:	4650      	mov	r0, sl
 801aeee:	4659      	mov	r1, fp
 801aef0:	f7e5 f9e4 	bl	80002bc <__adddf3>
 801aef4:	4602      	mov	r2, r0
 801aef6:	460b      	mov	r3, r1
 801aef8:	4640      	mov	r0, r8
 801aefa:	4649      	mov	r1, r9
 801aefc:	f7e5 fe24 	bl	8000b48 <__aeabi_dcmpgt>
 801af00:	2800      	cmp	r0, #0
 801af02:	d173      	bne.n	801afec <_dtoa_r+0x6c4>
 801af04:	4652      	mov	r2, sl
 801af06:	465b      	mov	r3, fp
 801af08:	4913      	ldr	r1, [pc, #76]	; (801af58 <_dtoa_r+0x630>)
 801af0a:	2000      	movs	r0, #0
 801af0c:	f7e5 f9d4 	bl	80002b8 <__aeabi_dsub>
 801af10:	4602      	mov	r2, r0
 801af12:	460b      	mov	r3, r1
 801af14:	4640      	mov	r0, r8
 801af16:	4649      	mov	r1, r9
 801af18:	f7e5 fdf8 	bl	8000b0c <__aeabi_dcmplt>
 801af1c:	2800      	cmp	r0, #0
 801af1e:	f43f af35 	beq.w	801ad8c <_dtoa_r+0x464>
 801af22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801af24:	1e6b      	subs	r3, r5, #1
 801af26:	930f      	str	r3, [sp, #60]	; 0x3c
 801af28:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801af2c:	2b30      	cmp	r3, #48	; 0x30
 801af2e:	d0f8      	beq.n	801af22 <_dtoa_r+0x5fa>
 801af30:	9700      	str	r7, [sp, #0]
 801af32:	e049      	b.n	801afc8 <_dtoa_r+0x6a0>
 801af34:	4b05      	ldr	r3, [pc, #20]	; (801af4c <_dtoa_r+0x624>)
 801af36:	f7e5 fb77 	bl	8000628 <__aeabi_dmul>
 801af3a:	4680      	mov	r8, r0
 801af3c:	4689      	mov	r9, r1
 801af3e:	e7bd      	b.n	801aebc <_dtoa_r+0x594>
 801af40:	0801d550 	.word	0x0801d550
 801af44:	0801d528 	.word	0x0801d528
 801af48:	3ff00000 	.word	0x3ff00000
 801af4c:	40240000 	.word	0x40240000
 801af50:	401c0000 	.word	0x401c0000
 801af54:	40140000 	.word	0x40140000
 801af58:	3fe00000 	.word	0x3fe00000
 801af5c:	9d01      	ldr	r5, [sp, #4]
 801af5e:	4656      	mov	r6, sl
 801af60:	465f      	mov	r7, fp
 801af62:	4642      	mov	r2, r8
 801af64:	464b      	mov	r3, r9
 801af66:	4630      	mov	r0, r6
 801af68:	4639      	mov	r1, r7
 801af6a:	f7e5 fc87 	bl	800087c <__aeabi_ddiv>
 801af6e:	f7e5 fe0b 	bl	8000b88 <__aeabi_d2iz>
 801af72:	4682      	mov	sl, r0
 801af74:	f7e5 faee 	bl	8000554 <__aeabi_i2d>
 801af78:	4642      	mov	r2, r8
 801af7a:	464b      	mov	r3, r9
 801af7c:	f7e5 fb54 	bl	8000628 <__aeabi_dmul>
 801af80:	4602      	mov	r2, r0
 801af82:	460b      	mov	r3, r1
 801af84:	4630      	mov	r0, r6
 801af86:	4639      	mov	r1, r7
 801af88:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801af8c:	f7e5 f994 	bl	80002b8 <__aeabi_dsub>
 801af90:	f805 6b01 	strb.w	r6, [r5], #1
 801af94:	9e01      	ldr	r6, [sp, #4]
 801af96:	9f03      	ldr	r7, [sp, #12]
 801af98:	1bae      	subs	r6, r5, r6
 801af9a:	42b7      	cmp	r7, r6
 801af9c:	4602      	mov	r2, r0
 801af9e:	460b      	mov	r3, r1
 801afa0:	d135      	bne.n	801b00e <_dtoa_r+0x6e6>
 801afa2:	f7e5 f98b 	bl	80002bc <__adddf3>
 801afa6:	4642      	mov	r2, r8
 801afa8:	464b      	mov	r3, r9
 801afaa:	4606      	mov	r6, r0
 801afac:	460f      	mov	r7, r1
 801afae:	f7e5 fdcb 	bl	8000b48 <__aeabi_dcmpgt>
 801afb2:	b9d0      	cbnz	r0, 801afea <_dtoa_r+0x6c2>
 801afb4:	4642      	mov	r2, r8
 801afb6:	464b      	mov	r3, r9
 801afb8:	4630      	mov	r0, r6
 801afba:	4639      	mov	r1, r7
 801afbc:	f7e5 fd9c 	bl	8000af8 <__aeabi_dcmpeq>
 801afc0:	b110      	cbz	r0, 801afc8 <_dtoa_r+0x6a0>
 801afc2:	f01a 0f01 	tst.w	sl, #1
 801afc6:	d110      	bne.n	801afea <_dtoa_r+0x6c2>
 801afc8:	4620      	mov	r0, r4
 801afca:	ee18 1a10 	vmov	r1, s16
 801afce:	f000 fc07 	bl	801b7e0 <_Bfree>
 801afd2:	2300      	movs	r3, #0
 801afd4:	9800      	ldr	r0, [sp, #0]
 801afd6:	702b      	strb	r3, [r5, #0]
 801afd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801afda:	3001      	adds	r0, #1
 801afdc:	6018      	str	r0, [r3, #0]
 801afde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801afe0:	2b00      	cmp	r3, #0
 801afe2:	f43f acf1 	beq.w	801a9c8 <_dtoa_r+0xa0>
 801afe6:	601d      	str	r5, [r3, #0]
 801afe8:	e4ee      	b.n	801a9c8 <_dtoa_r+0xa0>
 801afea:	9f00      	ldr	r7, [sp, #0]
 801afec:	462b      	mov	r3, r5
 801afee:	461d      	mov	r5, r3
 801aff0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801aff4:	2a39      	cmp	r2, #57	; 0x39
 801aff6:	d106      	bne.n	801b006 <_dtoa_r+0x6de>
 801aff8:	9a01      	ldr	r2, [sp, #4]
 801affa:	429a      	cmp	r2, r3
 801affc:	d1f7      	bne.n	801afee <_dtoa_r+0x6c6>
 801affe:	9901      	ldr	r1, [sp, #4]
 801b000:	2230      	movs	r2, #48	; 0x30
 801b002:	3701      	adds	r7, #1
 801b004:	700a      	strb	r2, [r1, #0]
 801b006:	781a      	ldrb	r2, [r3, #0]
 801b008:	3201      	adds	r2, #1
 801b00a:	701a      	strb	r2, [r3, #0]
 801b00c:	e790      	b.n	801af30 <_dtoa_r+0x608>
 801b00e:	4ba6      	ldr	r3, [pc, #664]	; (801b2a8 <_dtoa_r+0x980>)
 801b010:	2200      	movs	r2, #0
 801b012:	f7e5 fb09 	bl	8000628 <__aeabi_dmul>
 801b016:	2200      	movs	r2, #0
 801b018:	2300      	movs	r3, #0
 801b01a:	4606      	mov	r6, r0
 801b01c:	460f      	mov	r7, r1
 801b01e:	f7e5 fd6b 	bl	8000af8 <__aeabi_dcmpeq>
 801b022:	2800      	cmp	r0, #0
 801b024:	d09d      	beq.n	801af62 <_dtoa_r+0x63a>
 801b026:	e7cf      	b.n	801afc8 <_dtoa_r+0x6a0>
 801b028:	9a08      	ldr	r2, [sp, #32]
 801b02a:	2a00      	cmp	r2, #0
 801b02c:	f000 80d7 	beq.w	801b1de <_dtoa_r+0x8b6>
 801b030:	9a06      	ldr	r2, [sp, #24]
 801b032:	2a01      	cmp	r2, #1
 801b034:	f300 80ba 	bgt.w	801b1ac <_dtoa_r+0x884>
 801b038:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b03a:	2a00      	cmp	r2, #0
 801b03c:	f000 80b2 	beq.w	801b1a4 <_dtoa_r+0x87c>
 801b040:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801b044:	9e07      	ldr	r6, [sp, #28]
 801b046:	9d04      	ldr	r5, [sp, #16]
 801b048:	9a04      	ldr	r2, [sp, #16]
 801b04a:	441a      	add	r2, r3
 801b04c:	9204      	str	r2, [sp, #16]
 801b04e:	9a05      	ldr	r2, [sp, #20]
 801b050:	2101      	movs	r1, #1
 801b052:	441a      	add	r2, r3
 801b054:	4620      	mov	r0, r4
 801b056:	9205      	str	r2, [sp, #20]
 801b058:	f000 fc7a 	bl	801b950 <__i2b>
 801b05c:	4607      	mov	r7, r0
 801b05e:	2d00      	cmp	r5, #0
 801b060:	dd0c      	ble.n	801b07c <_dtoa_r+0x754>
 801b062:	9b05      	ldr	r3, [sp, #20]
 801b064:	2b00      	cmp	r3, #0
 801b066:	dd09      	ble.n	801b07c <_dtoa_r+0x754>
 801b068:	42ab      	cmp	r3, r5
 801b06a:	9a04      	ldr	r2, [sp, #16]
 801b06c:	bfa8      	it	ge
 801b06e:	462b      	movge	r3, r5
 801b070:	1ad2      	subs	r2, r2, r3
 801b072:	9204      	str	r2, [sp, #16]
 801b074:	9a05      	ldr	r2, [sp, #20]
 801b076:	1aed      	subs	r5, r5, r3
 801b078:	1ad3      	subs	r3, r2, r3
 801b07a:	9305      	str	r3, [sp, #20]
 801b07c:	9b07      	ldr	r3, [sp, #28]
 801b07e:	b31b      	cbz	r3, 801b0c8 <_dtoa_r+0x7a0>
 801b080:	9b08      	ldr	r3, [sp, #32]
 801b082:	2b00      	cmp	r3, #0
 801b084:	f000 80af 	beq.w	801b1e6 <_dtoa_r+0x8be>
 801b088:	2e00      	cmp	r6, #0
 801b08a:	dd13      	ble.n	801b0b4 <_dtoa_r+0x78c>
 801b08c:	4639      	mov	r1, r7
 801b08e:	4632      	mov	r2, r6
 801b090:	4620      	mov	r0, r4
 801b092:	f000 fd1d 	bl	801bad0 <__pow5mult>
 801b096:	ee18 2a10 	vmov	r2, s16
 801b09a:	4601      	mov	r1, r0
 801b09c:	4607      	mov	r7, r0
 801b09e:	4620      	mov	r0, r4
 801b0a0:	f000 fc6c 	bl	801b97c <__multiply>
 801b0a4:	ee18 1a10 	vmov	r1, s16
 801b0a8:	4680      	mov	r8, r0
 801b0aa:	4620      	mov	r0, r4
 801b0ac:	f000 fb98 	bl	801b7e0 <_Bfree>
 801b0b0:	ee08 8a10 	vmov	s16, r8
 801b0b4:	9b07      	ldr	r3, [sp, #28]
 801b0b6:	1b9a      	subs	r2, r3, r6
 801b0b8:	d006      	beq.n	801b0c8 <_dtoa_r+0x7a0>
 801b0ba:	ee18 1a10 	vmov	r1, s16
 801b0be:	4620      	mov	r0, r4
 801b0c0:	f000 fd06 	bl	801bad0 <__pow5mult>
 801b0c4:	ee08 0a10 	vmov	s16, r0
 801b0c8:	2101      	movs	r1, #1
 801b0ca:	4620      	mov	r0, r4
 801b0cc:	f000 fc40 	bl	801b950 <__i2b>
 801b0d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b0d2:	2b00      	cmp	r3, #0
 801b0d4:	4606      	mov	r6, r0
 801b0d6:	f340 8088 	ble.w	801b1ea <_dtoa_r+0x8c2>
 801b0da:	461a      	mov	r2, r3
 801b0dc:	4601      	mov	r1, r0
 801b0de:	4620      	mov	r0, r4
 801b0e0:	f000 fcf6 	bl	801bad0 <__pow5mult>
 801b0e4:	9b06      	ldr	r3, [sp, #24]
 801b0e6:	2b01      	cmp	r3, #1
 801b0e8:	4606      	mov	r6, r0
 801b0ea:	f340 8081 	ble.w	801b1f0 <_dtoa_r+0x8c8>
 801b0ee:	f04f 0800 	mov.w	r8, #0
 801b0f2:	6933      	ldr	r3, [r6, #16]
 801b0f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801b0f8:	6918      	ldr	r0, [r3, #16]
 801b0fa:	f000 fbd9 	bl	801b8b0 <__hi0bits>
 801b0fe:	f1c0 0020 	rsb	r0, r0, #32
 801b102:	9b05      	ldr	r3, [sp, #20]
 801b104:	4418      	add	r0, r3
 801b106:	f010 001f 	ands.w	r0, r0, #31
 801b10a:	f000 8092 	beq.w	801b232 <_dtoa_r+0x90a>
 801b10e:	f1c0 0320 	rsb	r3, r0, #32
 801b112:	2b04      	cmp	r3, #4
 801b114:	f340 808a 	ble.w	801b22c <_dtoa_r+0x904>
 801b118:	f1c0 001c 	rsb	r0, r0, #28
 801b11c:	9b04      	ldr	r3, [sp, #16]
 801b11e:	4403      	add	r3, r0
 801b120:	9304      	str	r3, [sp, #16]
 801b122:	9b05      	ldr	r3, [sp, #20]
 801b124:	4403      	add	r3, r0
 801b126:	4405      	add	r5, r0
 801b128:	9305      	str	r3, [sp, #20]
 801b12a:	9b04      	ldr	r3, [sp, #16]
 801b12c:	2b00      	cmp	r3, #0
 801b12e:	dd07      	ble.n	801b140 <_dtoa_r+0x818>
 801b130:	ee18 1a10 	vmov	r1, s16
 801b134:	461a      	mov	r2, r3
 801b136:	4620      	mov	r0, r4
 801b138:	f000 fd24 	bl	801bb84 <__lshift>
 801b13c:	ee08 0a10 	vmov	s16, r0
 801b140:	9b05      	ldr	r3, [sp, #20]
 801b142:	2b00      	cmp	r3, #0
 801b144:	dd05      	ble.n	801b152 <_dtoa_r+0x82a>
 801b146:	4631      	mov	r1, r6
 801b148:	461a      	mov	r2, r3
 801b14a:	4620      	mov	r0, r4
 801b14c:	f000 fd1a 	bl	801bb84 <__lshift>
 801b150:	4606      	mov	r6, r0
 801b152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b154:	2b00      	cmp	r3, #0
 801b156:	d06e      	beq.n	801b236 <_dtoa_r+0x90e>
 801b158:	ee18 0a10 	vmov	r0, s16
 801b15c:	4631      	mov	r1, r6
 801b15e:	f000 fd81 	bl	801bc64 <__mcmp>
 801b162:	2800      	cmp	r0, #0
 801b164:	da67      	bge.n	801b236 <_dtoa_r+0x90e>
 801b166:	9b00      	ldr	r3, [sp, #0]
 801b168:	3b01      	subs	r3, #1
 801b16a:	ee18 1a10 	vmov	r1, s16
 801b16e:	9300      	str	r3, [sp, #0]
 801b170:	220a      	movs	r2, #10
 801b172:	2300      	movs	r3, #0
 801b174:	4620      	mov	r0, r4
 801b176:	f000 fb55 	bl	801b824 <__multadd>
 801b17a:	9b08      	ldr	r3, [sp, #32]
 801b17c:	ee08 0a10 	vmov	s16, r0
 801b180:	2b00      	cmp	r3, #0
 801b182:	f000 81b1 	beq.w	801b4e8 <_dtoa_r+0xbc0>
 801b186:	2300      	movs	r3, #0
 801b188:	4639      	mov	r1, r7
 801b18a:	220a      	movs	r2, #10
 801b18c:	4620      	mov	r0, r4
 801b18e:	f000 fb49 	bl	801b824 <__multadd>
 801b192:	9b02      	ldr	r3, [sp, #8]
 801b194:	2b00      	cmp	r3, #0
 801b196:	4607      	mov	r7, r0
 801b198:	f300 808e 	bgt.w	801b2b8 <_dtoa_r+0x990>
 801b19c:	9b06      	ldr	r3, [sp, #24]
 801b19e:	2b02      	cmp	r3, #2
 801b1a0:	dc51      	bgt.n	801b246 <_dtoa_r+0x91e>
 801b1a2:	e089      	b.n	801b2b8 <_dtoa_r+0x990>
 801b1a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b1a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801b1aa:	e74b      	b.n	801b044 <_dtoa_r+0x71c>
 801b1ac:	9b03      	ldr	r3, [sp, #12]
 801b1ae:	1e5e      	subs	r6, r3, #1
 801b1b0:	9b07      	ldr	r3, [sp, #28]
 801b1b2:	42b3      	cmp	r3, r6
 801b1b4:	bfbf      	itttt	lt
 801b1b6:	9b07      	ldrlt	r3, [sp, #28]
 801b1b8:	9607      	strlt	r6, [sp, #28]
 801b1ba:	1af2      	sublt	r2, r6, r3
 801b1bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801b1be:	bfb6      	itet	lt
 801b1c0:	189b      	addlt	r3, r3, r2
 801b1c2:	1b9e      	subge	r6, r3, r6
 801b1c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 801b1c6:	9b03      	ldr	r3, [sp, #12]
 801b1c8:	bfb8      	it	lt
 801b1ca:	2600      	movlt	r6, #0
 801b1cc:	2b00      	cmp	r3, #0
 801b1ce:	bfb7      	itett	lt
 801b1d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801b1d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801b1d8:	1a9d      	sublt	r5, r3, r2
 801b1da:	2300      	movlt	r3, #0
 801b1dc:	e734      	b.n	801b048 <_dtoa_r+0x720>
 801b1de:	9e07      	ldr	r6, [sp, #28]
 801b1e0:	9d04      	ldr	r5, [sp, #16]
 801b1e2:	9f08      	ldr	r7, [sp, #32]
 801b1e4:	e73b      	b.n	801b05e <_dtoa_r+0x736>
 801b1e6:	9a07      	ldr	r2, [sp, #28]
 801b1e8:	e767      	b.n	801b0ba <_dtoa_r+0x792>
 801b1ea:	9b06      	ldr	r3, [sp, #24]
 801b1ec:	2b01      	cmp	r3, #1
 801b1ee:	dc18      	bgt.n	801b222 <_dtoa_r+0x8fa>
 801b1f0:	f1ba 0f00 	cmp.w	sl, #0
 801b1f4:	d115      	bne.n	801b222 <_dtoa_r+0x8fa>
 801b1f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b1fa:	b993      	cbnz	r3, 801b222 <_dtoa_r+0x8fa>
 801b1fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b200:	0d1b      	lsrs	r3, r3, #20
 801b202:	051b      	lsls	r3, r3, #20
 801b204:	b183      	cbz	r3, 801b228 <_dtoa_r+0x900>
 801b206:	9b04      	ldr	r3, [sp, #16]
 801b208:	3301      	adds	r3, #1
 801b20a:	9304      	str	r3, [sp, #16]
 801b20c:	9b05      	ldr	r3, [sp, #20]
 801b20e:	3301      	adds	r3, #1
 801b210:	9305      	str	r3, [sp, #20]
 801b212:	f04f 0801 	mov.w	r8, #1
 801b216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b218:	2b00      	cmp	r3, #0
 801b21a:	f47f af6a 	bne.w	801b0f2 <_dtoa_r+0x7ca>
 801b21e:	2001      	movs	r0, #1
 801b220:	e76f      	b.n	801b102 <_dtoa_r+0x7da>
 801b222:	f04f 0800 	mov.w	r8, #0
 801b226:	e7f6      	b.n	801b216 <_dtoa_r+0x8ee>
 801b228:	4698      	mov	r8, r3
 801b22a:	e7f4      	b.n	801b216 <_dtoa_r+0x8ee>
 801b22c:	f43f af7d 	beq.w	801b12a <_dtoa_r+0x802>
 801b230:	4618      	mov	r0, r3
 801b232:	301c      	adds	r0, #28
 801b234:	e772      	b.n	801b11c <_dtoa_r+0x7f4>
 801b236:	9b03      	ldr	r3, [sp, #12]
 801b238:	2b00      	cmp	r3, #0
 801b23a:	dc37      	bgt.n	801b2ac <_dtoa_r+0x984>
 801b23c:	9b06      	ldr	r3, [sp, #24]
 801b23e:	2b02      	cmp	r3, #2
 801b240:	dd34      	ble.n	801b2ac <_dtoa_r+0x984>
 801b242:	9b03      	ldr	r3, [sp, #12]
 801b244:	9302      	str	r3, [sp, #8]
 801b246:	9b02      	ldr	r3, [sp, #8]
 801b248:	b96b      	cbnz	r3, 801b266 <_dtoa_r+0x93e>
 801b24a:	4631      	mov	r1, r6
 801b24c:	2205      	movs	r2, #5
 801b24e:	4620      	mov	r0, r4
 801b250:	f000 fae8 	bl	801b824 <__multadd>
 801b254:	4601      	mov	r1, r0
 801b256:	4606      	mov	r6, r0
 801b258:	ee18 0a10 	vmov	r0, s16
 801b25c:	f000 fd02 	bl	801bc64 <__mcmp>
 801b260:	2800      	cmp	r0, #0
 801b262:	f73f adbb 	bgt.w	801addc <_dtoa_r+0x4b4>
 801b266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b268:	9d01      	ldr	r5, [sp, #4]
 801b26a:	43db      	mvns	r3, r3
 801b26c:	9300      	str	r3, [sp, #0]
 801b26e:	f04f 0800 	mov.w	r8, #0
 801b272:	4631      	mov	r1, r6
 801b274:	4620      	mov	r0, r4
 801b276:	f000 fab3 	bl	801b7e0 <_Bfree>
 801b27a:	2f00      	cmp	r7, #0
 801b27c:	f43f aea4 	beq.w	801afc8 <_dtoa_r+0x6a0>
 801b280:	f1b8 0f00 	cmp.w	r8, #0
 801b284:	d005      	beq.n	801b292 <_dtoa_r+0x96a>
 801b286:	45b8      	cmp	r8, r7
 801b288:	d003      	beq.n	801b292 <_dtoa_r+0x96a>
 801b28a:	4641      	mov	r1, r8
 801b28c:	4620      	mov	r0, r4
 801b28e:	f000 faa7 	bl	801b7e0 <_Bfree>
 801b292:	4639      	mov	r1, r7
 801b294:	4620      	mov	r0, r4
 801b296:	f000 faa3 	bl	801b7e0 <_Bfree>
 801b29a:	e695      	b.n	801afc8 <_dtoa_r+0x6a0>
 801b29c:	2600      	movs	r6, #0
 801b29e:	4637      	mov	r7, r6
 801b2a0:	e7e1      	b.n	801b266 <_dtoa_r+0x93e>
 801b2a2:	9700      	str	r7, [sp, #0]
 801b2a4:	4637      	mov	r7, r6
 801b2a6:	e599      	b.n	801addc <_dtoa_r+0x4b4>
 801b2a8:	40240000 	.word	0x40240000
 801b2ac:	9b08      	ldr	r3, [sp, #32]
 801b2ae:	2b00      	cmp	r3, #0
 801b2b0:	f000 80ca 	beq.w	801b448 <_dtoa_r+0xb20>
 801b2b4:	9b03      	ldr	r3, [sp, #12]
 801b2b6:	9302      	str	r3, [sp, #8]
 801b2b8:	2d00      	cmp	r5, #0
 801b2ba:	dd05      	ble.n	801b2c8 <_dtoa_r+0x9a0>
 801b2bc:	4639      	mov	r1, r7
 801b2be:	462a      	mov	r2, r5
 801b2c0:	4620      	mov	r0, r4
 801b2c2:	f000 fc5f 	bl	801bb84 <__lshift>
 801b2c6:	4607      	mov	r7, r0
 801b2c8:	f1b8 0f00 	cmp.w	r8, #0
 801b2cc:	d05b      	beq.n	801b386 <_dtoa_r+0xa5e>
 801b2ce:	6879      	ldr	r1, [r7, #4]
 801b2d0:	4620      	mov	r0, r4
 801b2d2:	f000 fa45 	bl	801b760 <_Balloc>
 801b2d6:	4605      	mov	r5, r0
 801b2d8:	b928      	cbnz	r0, 801b2e6 <_dtoa_r+0x9be>
 801b2da:	4b87      	ldr	r3, [pc, #540]	; (801b4f8 <_dtoa_r+0xbd0>)
 801b2dc:	4602      	mov	r2, r0
 801b2de:	f240 21ea 	movw	r1, #746	; 0x2ea
 801b2e2:	f7ff bb3b 	b.w	801a95c <_dtoa_r+0x34>
 801b2e6:	693a      	ldr	r2, [r7, #16]
 801b2e8:	3202      	adds	r2, #2
 801b2ea:	0092      	lsls	r2, r2, #2
 801b2ec:	f107 010c 	add.w	r1, r7, #12
 801b2f0:	300c      	adds	r0, #12
 801b2f2:	f7fe fc35 	bl	8019b60 <memcpy>
 801b2f6:	2201      	movs	r2, #1
 801b2f8:	4629      	mov	r1, r5
 801b2fa:	4620      	mov	r0, r4
 801b2fc:	f000 fc42 	bl	801bb84 <__lshift>
 801b300:	9b01      	ldr	r3, [sp, #4]
 801b302:	f103 0901 	add.w	r9, r3, #1
 801b306:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801b30a:	4413      	add	r3, r2
 801b30c:	9305      	str	r3, [sp, #20]
 801b30e:	f00a 0301 	and.w	r3, sl, #1
 801b312:	46b8      	mov	r8, r7
 801b314:	9304      	str	r3, [sp, #16]
 801b316:	4607      	mov	r7, r0
 801b318:	4631      	mov	r1, r6
 801b31a:	ee18 0a10 	vmov	r0, s16
 801b31e:	f7ff fa75 	bl	801a80c <quorem>
 801b322:	4641      	mov	r1, r8
 801b324:	9002      	str	r0, [sp, #8]
 801b326:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801b32a:	ee18 0a10 	vmov	r0, s16
 801b32e:	f000 fc99 	bl	801bc64 <__mcmp>
 801b332:	463a      	mov	r2, r7
 801b334:	9003      	str	r0, [sp, #12]
 801b336:	4631      	mov	r1, r6
 801b338:	4620      	mov	r0, r4
 801b33a:	f000 fcaf 	bl	801bc9c <__mdiff>
 801b33e:	68c2      	ldr	r2, [r0, #12]
 801b340:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 801b344:	4605      	mov	r5, r0
 801b346:	bb02      	cbnz	r2, 801b38a <_dtoa_r+0xa62>
 801b348:	4601      	mov	r1, r0
 801b34a:	ee18 0a10 	vmov	r0, s16
 801b34e:	f000 fc89 	bl	801bc64 <__mcmp>
 801b352:	4602      	mov	r2, r0
 801b354:	4629      	mov	r1, r5
 801b356:	4620      	mov	r0, r4
 801b358:	9207      	str	r2, [sp, #28]
 801b35a:	f000 fa41 	bl	801b7e0 <_Bfree>
 801b35e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801b362:	ea43 0102 	orr.w	r1, r3, r2
 801b366:	9b04      	ldr	r3, [sp, #16]
 801b368:	430b      	orrs	r3, r1
 801b36a:	464d      	mov	r5, r9
 801b36c:	d10f      	bne.n	801b38e <_dtoa_r+0xa66>
 801b36e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801b372:	d02a      	beq.n	801b3ca <_dtoa_r+0xaa2>
 801b374:	9b03      	ldr	r3, [sp, #12]
 801b376:	2b00      	cmp	r3, #0
 801b378:	dd02      	ble.n	801b380 <_dtoa_r+0xa58>
 801b37a:	9b02      	ldr	r3, [sp, #8]
 801b37c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801b380:	f88b a000 	strb.w	sl, [fp]
 801b384:	e775      	b.n	801b272 <_dtoa_r+0x94a>
 801b386:	4638      	mov	r0, r7
 801b388:	e7ba      	b.n	801b300 <_dtoa_r+0x9d8>
 801b38a:	2201      	movs	r2, #1
 801b38c:	e7e2      	b.n	801b354 <_dtoa_r+0xa2c>
 801b38e:	9b03      	ldr	r3, [sp, #12]
 801b390:	2b00      	cmp	r3, #0
 801b392:	db04      	blt.n	801b39e <_dtoa_r+0xa76>
 801b394:	9906      	ldr	r1, [sp, #24]
 801b396:	430b      	orrs	r3, r1
 801b398:	9904      	ldr	r1, [sp, #16]
 801b39a:	430b      	orrs	r3, r1
 801b39c:	d122      	bne.n	801b3e4 <_dtoa_r+0xabc>
 801b39e:	2a00      	cmp	r2, #0
 801b3a0:	ddee      	ble.n	801b380 <_dtoa_r+0xa58>
 801b3a2:	ee18 1a10 	vmov	r1, s16
 801b3a6:	2201      	movs	r2, #1
 801b3a8:	4620      	mov	r0, r4
 801b3aa:	f000 fbeb 	bl	801bb84 <__lshift>
 801b3ae:	4631      	mov	r1, r6
 801b3b0:	ee08 0a10 	vmov	s16, r0
 801b3b4:	f000 fc56 	bl	801bc64 <__mcmp>
 801b3b8:	2800      	cmp	r0, #0
 801b3ba:	dc03      	bgt.n	801b3c4 <_dtoa_r+0xa9c>
 801b3bc:	d1e0      	bne.n	801b380 <_dtoa_r+0xa58>
 801b3be:	f01a 0f01 	tst.w	sl, #1
 801b3c2:	d0dd      	beq.n	801b380 <_dtoa_r+0xa58>
 801b3c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801b3c8:	d1d7      	bne.n	801b37a <_dtoa_r+0xa52>
 801b3ca:	2339      	movs	r3, #57	; 0x39
 801b3cc:	f88b 3000 	strb.w	r3, [fp]
 801b3d0:	462b      	mov	r3, r5
 801b3d2:	461d      	mov	r5, r3
 801b3d4:	3b01      	subs	r3, #1
 801b3d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801b3da:	2a39      	cmp	r2, #57	; 0x39
 801b3dc:	d071      	beq.n	801b4c2 <_dtoa_r+0xb9a>
 801b3de:	3201      	adds	r2, #1
 801b3e0:	701a      	strb	r2, [r3, #0]
 801b3e2:	e746      	b.n	801b272 <_dtoa_r+0x94a>
 801b3e4:	2a00      	cmp	r2, #0
 801b3e6:	dd07      	ble.n	801b3f8 <_dtoa_r+0xad0>
 801b3e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801b3ec:	d0ed      	beq.n	801b3ca <_dtoa_r+0xaa2>
 801b3ee:	f10a 0301 	add.w	r3, sl, #1
 801b3f2:	f88b 3000 	strb.w	r3, [fp]
 801b3f6:	e73c      	b.n	801b272 <_dtoa_r+0x94a>
 801b3f8:	9b05      	ldr	r3, [sp, #20]
 801b3fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 801b3fe:	4599      	cmp	r9, r3
 801b400:	d047      	beq.n	801b492 <_dtoa_r+0xb6a>
 801b402:	ee18 1a10 	vmov	r1, s16
 801b406:	2300      	movs	r3, #0
 801b408:	220a      	movs	r2, #10
 801b40a:	4620      	mov	r0, r4
 801b40c:	f000 fa0a 	bl	801b824 <__multadd>
 801b410:	45b8      	cmp	r8, r7
 801b412:	ee08 0a10 	vmov	s16, r0
 801b416:	f04f 0300 	mov.w	r3, #0
 801b41a:	f04f 020a 	mov.w	r2, #10
 801b41e:	4641      	mov	r1, r8
 801b420:	4620      	mov	r0, r4
 801b422:	d106      	bne.n	801b432 <_dtoa_r+0xb0a>
 801b424:	f000 f9fe 	bl	801b824 <__multadd>
 801b428:	4680      	mov	r8, r0
 801b42a:	4607      	mov	r7, r0
 801b42c:	f109 0901 	add.w	r9, r9, #1
 801b430:	e772      	b.n	801b318 <_dtoa_r+0x9f0>
 801b432:	f000 f9f7 	bl	801b824 <__multadd>
 801b436:	4639      	mov	r1, r7
 801b438:	4680      	mov	r8, r0
 801b43a:	2300      	movs	r3, #0
 801b43c:	220a      	movs	r2, #10
 801b43e:	4620      	mov	r0, r4
 801b440:	f000 f9f0 	bl	801b824 <__multadd>
 801b444:	4607      	mov	r7, r0
 801b446:	e7f1      	b.n	801b42c <_dtoa_r+0xb04>
 801b448:	9b03      	ldr	r3, [sp, #12]
 801b44a:	9302      	str	r3, [sp, #8]
 801b44c:	9d01      	ldr	r5, [sp, #4]
 801b44e:	ee18 0a10 	vmov	r0, s16
 801b452:	4631      	mov	r1, r6
 801b454:	f7ff f9da 	bl	801a80c <quorem>
 801b458:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801b45c:	9b01      	ldr	r3, [sp, #4]
 801b45e:	f805 ab01 	strb.w	sl, [r5], #1
 801b462:	1aea      	subs	r2, r5, r3
 801b464:	9b02      	ldr	r3, [sp, #8]
 801b466:	4293      	cmp	r3, r2
 801b468:	dd09      	ble.n	801b47e <_dtoa_r+0xb56>
 801b46a:	ee18 1a10 	vmov	r1, s16
 801b46e:	2300      	movs	r3, #0
 801b470:	220a      	movs	r2, #10
 801b472:	4620      	mov	r0, r4
 801b474:	f000 f9d6 	bl	801b824 <__multadd>
 801b478:	ee08 0a10 	vmov	s16, r0
 801b47c:	e7e7      	b.n	801b44e <_dtoa_r+0xb26>
 801b47e:	9b02      	ldr	r3, [sp, #8]
 801b480:	2b00      	cmp	r3, #0
 801b482:	bfc8      	it	gt
 801b484:	461d      	movgt	r5, r3
 801b486:	9b01      	ldr	r3, [sp, #4]
 801b488:	bfd8      	it	le
 801b48a:	2501      	movle	r5, #1
 801b48c:	441d      	add	r5, r3
 801b48e:	f04f 0800 	mov.w	r8, #0
 801b492:	ee18 1a10 	vmov	r1, s16
 801b496:	2201      	movs	r2, #1
 801b498:	4620      	mov	r0, r4
 801b49a:	f000 fb73 	bl	801bb84 <__lshift>
 801b49e:	4631      	mov	r1, r6
 801b4a0:	ee08 0a10 	vmov	s16, r0
 801b4a4:	f000 fbde 	bl	801bc64 <__mcmp>
 801b4a8:	2800      	cmp	r0, #0
 801b4aa:	dc91      	bgt.n	801b3d0 <_dtoa_r+0xaa8>
 801b4ac:	d102      	bne.n	801b4b4 <_dtoa_r+0xb8c>
 801b4ae:	f01a 0f01 	tst.w	sl, #1
 801b4b2:	d18d      	bne.n	801b3d0 <_dtoa_r+0xaa8>
 801b4b4:	462b      	mov	r3, r5
 801b4b6:	461d      	mov	r5, r3
 801b4b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b4bc:	2a30      	cmp	r2, #48	; 0x30
 801b4be:	d0fa      	beq.n	801b4b6 <_dtoa_r+0xb8e>
 801b4c0:	e6d7      	b.n	801b272 <_dtoa_r+0x94a>
 801b4c2:	9a01      	ldr	r2, [sp, #4]
 801b4c4:	429a      	cmp	r2, r3
 801b4c6:	d184      	bne.n	801b3d2 <_dtoa_r+0xaaa>
 801b4c8:	9b00      	ldr	r3, [sp, #0]
 801b4ca:	3301      	adds	r3, #1
 801b4cc:	9300      	str	r3, [sp, #0]
 801b4ce:	2331      	movs	r3, #49	; 0x31
 801b4d0:	7013      	strb	r3, [r2, #0]
 801b4d2:	e6ce      	b.n	801b272 <_dtoa_r+0x94a>
 801b4d4:	4b09      	ldr	r3, [pc, #36]	; (801b4fc <_dtoa_r+0xbd4>)
 801b4d6:	f7ff ba95 	b.w	801aa04 <_dtoa_r+0xdc>
 801b4da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b4dc:	2b00      	cmp	r3, #0
 801b4de:	f47f aa6e 	bne.w	801a9be <_dtoa_r+0x96>
 801b4e2:	4b07      	ldr	r3, [pc, #28]	; (801b500 <_dtoa_r+0xbd8>)
 801b4e4:	f7ff ba8e 	b.w	801aa04 <_dtoa_r+0xdc>
 801b4e8:	9b02      	ldr	r3, [sp, #8]
 801b4ea:	2b00      	cmp	r3, #0
 801b4ec:	dcae      	bgt.n	801b44c <_dtoa_r+0xb24>
 801b4ee:	9b06      	ldr	r3, [sp, #24]
 801b4f0:	2b02      	cmp	r3, #2
 801b4f2:	f73f aea8 	bgt.w	801b246 <_dtoa_r+0x91e>
 801b4f6:	e7a9      	b.n	801b44c <_dtoa_r+0xb24>
 801b4f8:	0801d449 	.word	0x0801d449
 801b4fc:	0801d20c 	.word	0x0801d20c
 801b500:	0801d3e1 	.word	0x0801d3e1

0801b504 <std>:
 801b504:	2300      	movs	r3, #0
 801b506:	b510      	push	{r4, lr}
 801b508:	4604      	mov	r4, r0
 801b50a:	e9c0 3300 	strd	r3, r3, [r0]
 801b50e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b512:	6083      	str	r3, [r0, #8]
 801b514:	8181      	strh	r1, [r0, #12]
 801b516:	6643      	str	r3, [r0, #100]	; 0x64
 801b518:	81c2      	strh	r2, [r0, #14]
 801b51a:	6183      	str	r3, [r0, #24]
 801b51c:	4619      	mov	r1, r3
 801b51e:	2208      	movs	r2, #8
 801b520:	305c      	adds	r0, #92	; 0x5c
 801b522:	f7fe fb2b 	bl	8019b7c <memset>
 801b526:	4b05      	ldr	r3, [pc, #20]	; (801b53c <std+0x38>)
 801b528:	6263      	str	r3, [r4, #36]	; 0x24
 801b52a:	4b05      	ldr	r3, [pc, #20]	; (801b540 <std+0x3c>)
 801b52c:	62a3      	str	r3, [r4, #40]	; 0x28
 801b52e:	4b05      	ldr	r3, [pc, #20]	; (801b544 <std+0x40>)
 801b530:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b532:	4b05      	ldr	r3, [pc, #20]	; (801b548 <std+0x44>)
 801b534:	6224      	str	r4, [r4, #32]
 801b536:	6323      	str	r3, [r4, #48]	; 0x30
 801b538:	bd10      	pop	{r4, pc}
 801b53a:	bf00      	nop
 801b53c:	0801c401 	.word	0x0801c401
 801b540:	0801c423 	.word	0x0801c423
 801b544:	0801c45b 	.word	0x0801c45b
 801b548:	0801c47f 	.word	0x0801c47f

0801b54c <_cleanup_r>:
 801b54c:	4901      	ldr	r1, [pc, #4]	; (801b554 <_cleanup_r+0x8>)
 801b54e:	f000 b8c1 	b.w	801b6d4 <_fwalk_reent>
 801b552:	bf00      	nop
 801b554:	0801c785 	.word	0x0801c785

0801b558 <__sfmoreglue>:
 801b558:	b570      	push	{r4, r5, r6, lr}
 801b55a:	2268      	movs	r2, #104	; 0x68
 801b55c:	1e4d      	subs	r5, r1, #1
 801b55e:	4355      	muls	r5, r2
 801b560:	460e      	mov	r6, r1
 801b562:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801b566:	f7fe fb7d 	bl	8019c64 <_malloc_r>
 801b56a:	4604      	mov	r4, r0
 801b56c:	b140      	cbz	r0, 801b580 <__sfmoreglue+0x28>
 801b56e:	2100      	movs	r1, #0
 801b570:	e9c0 1600 	strd	r1, r6, [r0]
 801b574:	300c      	adds	r0, #12
 801b576:	60a0      	str	r0, [r4, #8]
 801b578:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b57c:	f7fe fafe 	bl	8019b7c <memset>
 801b580:	4620      	mov	r0, r4
 801b582:	bd70      	pop	{r4, r5, r6, pc}

0801b584 <__sfp_lock_acquire>:
 801b584:	4801      	ldr	r0, [pc, #4]	; (801b58c <__sfp_lock_acquire+0x8>)
 801b586:	f000 b8ca 	b.w	801b71e <__retarget_lock_acquire_recursive>
 801b58a:	bf00      	nop
 801b58c:	20002fc5 	.word	0x20002fc5

0801b590 <__sfp_lock_release>:
 801b590:	4801      	ldr	r0, [pc, #4]	; (801b598 <__sfp_lock_release+0x8>)
 801b592:	f000 b8c5 	b.w	801b720 <__retarget_lock_release_recursive>
 801b596:	bf00      	nop
 801b598:	20002fc5 	.word	0x20002fc5

0801b59c <__sinit_lock_acquire>:
 801b59c:	4801      	ldr	r0, [pc, #4]	; (801b5a4 <__sinit_lock_acquire+0x8>)
 801b59e:	f000 b8be 	b.w	801b71e <__retarget_lock_acquire_recursive>
 801b5a2:	bf00      	nop
 801b5a4:	20002fc6 	.word	0x20002fc6

0801b5a8 <__sinit_lock_release>:
 801b5a8:	4801      	ldr	r0, [pc, #4]	; (801b5b0 <__sinit_lock_release+0x8>)
 801b5aa:	f000 b8b9 	b.w	801b720 <__retarget_lock_release_recursive>
 801b5ae:	bf00      	nop
 801b5b0:	20002fc6 	.word	0x20002fc6

0801b5b4 <__sinit>:
 801b5b4:	b510      	push	{r4, lr}
 801b5b6:	4604      	mov	r4, r0
 801b5b8:	f7ff fff0 	bl	801b59c <__sinit_lock_acquire>
 801b5bc:	69a3      	ldr	r3, [r4, #24]
 801b5be:	b11b      	cbz	r3, 801b5c8 <__sinit+0x14>
 801b5c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b5c4:	f7ff bff0 	b.w	801b5a8 <__sinit_lock_release>
 801b5c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801b5cc:	6523      	str	r3, [r4, #80]	; 0x50
 801b5ce:	4b13      	ldr	r3, [pc, #76]	; (801b61c <__sinit+0x68>)
 801b5d0:	4a13      	ldr	r2, [pc, #76]	; (801b620 <__sinit+0x6c>)
 801b5d2:	681b      	ldr	r3, [r3, #0]
 801b5d4:	62a2      	str	r2, [r4, #40]	; 0x28
 801b5d6:	42a3      	cmp	r3, r4
 801b5d8:	bf04      	itt	eq
 801b5da:	2301      	moveq	r3, #1
 801b5dc:	61a3      	streq	r3, [r4, #24]
 801b5de:	4620      	mov	r0, r4
 801b5e0:	f000 f820 	bl	801b624 <__sfp>
 801b5e4:	6060      	str	r0, [r4, #4]
 801b5e6:	4620      	mov	r0, r4
 801b5e8:	f000 f81c 	bl	801b624 <__sfp>
 801b5ec:	60a0      	str	r0, [r4, #8]
 801b5ee:	4620      	mov	r0, r4
 801b5f0:	f000 f818 	bl	801b624 <__sfp>
 801b5f4:	2200      	movs	r2, #0
 801b5f6:	60e0      	str	r0, [r4, #12]
 801b5f8:	2104      	movs	r1, #4
 801b5fa:	6860      	ldr	r0, [r4, #4]
 801b5fc:	f7ff ff82 	bl	801b504 <std>
 801b600:	68a0      	ldr	r0, [r4, #8]
 801b602:	2201      	movs	r2, #1
 801b604:	2109      	movs	r1, #9
 801b606:	f7ff ff7d 	bl	801b504 <std>
 801b60a:	68e0      	ldr	r0, [r4, #12]
 801b60c:	2202      	movs	r2, #2
 801b60e:	2112      	movs	r1, #18
 801b610:	f7ff ff78 	bl	801b504 <std>
 801b614:	2301      	movs	r3, #1
 801b616:	61a3      	str	r3, [r4, #24]
 801b618:	e7d2      	b.n	801b5c0 <__sinit+0xc>
 801b61a:	bf00      	nop
 801b61c:	0801d1f8 	.word	0x0801d1f8
 801b620:	0801b54d 	.word	0x0801b54d

0801b624 <__sfp>:
 801b624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b626:	4607      	mov	r7, r0
 801b628:	f7ff ffac 	bl	801b584 <__sfp_lock_acquire>
 801b62c:	4b1e      	ldr	r3, [pc, #120]	; (801b6a8 <__sfp+0x84>)
 801b62e:	681e      	ldr	r6, [r3, #0]
 801b630:	69b3      	ldr	r3, [r6, #24]
 801b632:	b913      	cbnz	r3, 801b63a <__sfp+0x16>
 801b634:	4630      	mov	r0, r6
 801b636:	f7ff ffbd 	bl	801b5b4 <__sinit>
 801b63a:	3648      	adds	r6, #72	; 0x48
 801b63c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b640:	3b01      	subs	r3, #1
 801b642:	d503      	bpl.n	801b64c <__sfp+0x28>
 801b644:	6833      	ldr	r3, [r6, #0]
 801b646:	b30b      	cbz	r3, 801b68c <__sfp+0x68>
 801b648:	6836      	ldr	r6, [r6, #0]
 801b64a:	e7f7      	b.n	801b63c <__sfp+0x18>
 801b64c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b650:	b9d5      	cbnz	r5, 801b688 <__sfp+0x64>
 801b652:	4b16      	ldr	r3, [pc, #88]	; (801b6ac <__sfp+0x88>)
 801b654:	60e3      	str	r3, [r4, #12]
 801b656:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b65a:	6665      	str	r5, [r4, #100]	; 0x64
 801b65c:	f000 f85e 	bl	801b71c <__retarget_lock_init_recursive>
 801b660:	f7ff ff96 	bl	801b590 <__sfp_lock_release>
 801b664:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801b668:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801b66c:	6025      	str	r5, [r4, #0]
 801b66e:	61a5      	str	r5, [r4, #24]
 801b670:	2208      	movs	r2, #8
 801b672:	4629      	mov	r1, r5
 801b674:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b678:	f7fe fa80 	bl	8019b7c <memset>
 801b67c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b680:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b684:	4620      	mov	r0, r4
 801b686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b688:	3468      	adds	r4, #104	; 0x68
 801b68a:	e7d9      	b.n	801b640 <__sfp+0x1c>
 801b68c:	2104      	movs	r1, #4
 801b68e:	4638      	mov	r0, r7
 801b690:	f7ff ff62 	bl	801b558 <__sfmoreglue>
 801b694:	4604      	mov	r4, r0
 801b696:	6030      	str	r0, [r6, #0]
 801b698:	2800      	cmp	r0, #0
 801b69a:	d1d5      	bne.n	801b648 <__sfp+0x24>
 801b69c:	f7ff ff78 	bl	801b590 <__sfp_lock_release>
 801b6a0:	230c      	movs	r3, #12
 801b6a2:	603b      	str	r3, [r7, #0]
 801b6a4:	e7ee      	b.n	801b684 <__sfp+0x60>
 801b6a6:	bf00      	nop
 801b6a8:	0801d1f8 	.word	0x0801d1f8
 801b6ac:	ffff0001 	.word	0xffff0001

0801b6b0 <fiprintf>:
 801b6b0:	b40e      	push	{r1, r2, r3}
 801b6b2:	b503      	push	{r0, r1, lr}
 801b6b4:	4601      	mov	r1, r0
 801b6b6:	ab03      	add	r3, sp, #12
 801b6b8:	4805      	ldr	r0, [pc, #20]	; (801b6d0 <fiprintf+0x20>)
 801b6ba:	f853 2b04 	ldr.w	r2, [r3], #4
 801b6be:	6800      	ldr	r0, [r0, #0]
 801b6c0:	9301      	str	r3, [sp, #4]
 801b6c2:	f000 fd6d 	bl	801c1a0 <_vfiprintf_r>
 801b6c6:	b002      	add	sp, #8
 801b6c8:	f85d eb04 	ldr.w	lr, [sp], #4
 801b6cc:	b003      	add	sp, #12
 801b6ce:	4770      	bx	lr
 801b6d0:	20000100 	.word	0x20000100

0801b6d4 <_fwalk_reent>:
 801b6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b6d8:	4606      	mov	r6, r0
 801b6da:	4688      	mov	r8, r1
 801b6dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b6e0:	2700      	movs	r7, #0
 801b6e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b6e6:	f1b9 0901 	subs.w	r9, r9, #1
 801b6ea:	d505      	bpl.n	801b6f8 <_fwalk_reent+0x24>
 801b6ec:	6824      	ldr	r4, [r4, #0]
 801b6ee:	2c00      	cmp	r4, #0
 801b6f0:	d1f7      	bne.n	801b6e2 <_fwalk_reent+0xe>
 801b6f2:	4638      	mov	r0, r7
 801b6f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b6f8:	89ab      	ldrh	r3, [r5, #12]
 801b6fa:	2b01      	cmp	r3, #1
 801b6fc:	d907      	bls.n	801b70e <_fwalk_reent+0x3a>
 801b6fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b702:	3301      	adds	r3, #1
 801b704:	d003      	beq.n	801b70e <_fwalk_reent+0x3a>
 801b706:	4629      	mov	r1, r5
 801b708:	4630      	mov	r0, r6
 801b70a:	47c0      	blx	r8
 801b70c:	4307      	orrs	r7, r0
 801b70e:	3568      	adds	r5, #104	; 0x68
 801b710:	e7e9      	b.n	801b6e6 <_fwalk_reent+0x12>
	...

0801b714 <_localeconv_r>:
 801b714:	4800      	ldr	r0, [pc, #0]	; (801b718 <_localeconv_r+0x4>)
 801b716:	4770      	bx	lr
 801b718:	20000254 	.word	0x20000254

0801b71c <__retarget_lock_init_recursive>:
 801b71c:	4770      	bx	lr

0801b71e <__retarget_lock_acquire_recursive>:
 801b71e:	4770      	bx	lr

0801b720 <__retarget_lock_release_recursive>:
 801b720:	4770      	bx	lr

0801b722 <__ascii_mbtowc>:
 801b722:	b082      	sub	sp, #8
 801b724:	b901      	cbnz	r1, 801b728 <__ascii_mbtowc+0x6>
 801b726:	a901      	add	r1, sp, #4
 801b728:	b142      	cbz	r2, 801b73c <__ascii_mbtowc+0x1a>
 801b72a:	b14b      	cbz	r3, 801b740 <__ascii_mbtowc+0x1e>
 801b72c:	7813      	ldrb	r3, [r2, #0]
 801b72e:	600b      	str	r3, [r1, #0]
 801b730:	7812      	ldrb	r2, [r2, #0]
 801b732:	1e10      	subs	r0, r2, #0
 801b734:	bf18      	it	ne
 801b736:	2001      	movne	r0, #1
 801b738:	b002      	add	sp, #8
 801b73a:	4770      	bx	lr
 801b73c:	4610      	mov	r0, r2
 801b73e:	e7fb      	b.n	801b738 <__ascii_mbtowc+0x16>
 801b740:	f06f 0001 	mvn.w	r0, #1
 801b744:	e7f8      	b.n	801b738 <__ascii_mbtowc+0x16>
	...

0801b748 <__malloc_lock>:
 801b748:	4801      	ldr	r0, [pc, #4]	; (801b750 <__malloc_lock+0x8>)
 801b74a:	f7ff bfe8 	b.w	801b71e <__retarget_lock_acquire_recursive>
 801b74e:	bf00      	nop
 801b750:	20002fc4 	.word	0x20002fc4

0801b754 <__malloc_unlock>:
 801b754:	4801      	ldr	r0, [pc, #4]	; (801b75c <__malloc_unlock+0x8>)
 801b756:	f7ff bfe3 	b.w	801b720 <__retarget_lock_release_recursive>
 801b75a:	bf00      	nop
 801b75c:	20002fc4 	.word	0x20002fc4

0801b760 <_Balloc>:
 801b760:	b570      	push	{r4, r5, r6, lr}
 801b762:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b764:	4604      	mov	r4, r0
 801b766:	460d      	mov	r5, r1
 801b768:	b976      	cbnz	r6, 801b788 <_Balloc+0x28>
 801b76a:	2010      	movs	r0, #16
 801b76c:	f7fe f9e8 	bl	8019b40 <malloc>
 801b770:	4602      	mov	r2, r0
 801b772:	6260      	str	r0, [r4, #36]	; 0x24
 801b774:	b920      	cbnz	r0, 801b780 <_Balloc+0x20>
 801b776:	4b18      	ldr	r3, [pc, #96]	; (801b7d8 <_Balloc+0x78>)
 801b778:	4818      	ldr	r0, [pc, #96]	; (801b7dc <_Balloc+0x7c>)
 801b77a:	2166      	movs	r1, #102	; 0x66
 801b77c:	f7ff f828 	bl	801a7d0 <__assert_func>
 801b780:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b784:	6006      	str	r6, [r0, #0]
 801b786:	60c6      	str	r6, [r0, #12]
 801b788:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801b78a:	68f3      	ldr	r3, [r6, #12]
 801b78c:	b183      	cbz	r3, 801b7b0 <_Balloc+0x50>
 801b78e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b790:	68db      	ldr	r3, [r3, #12]
 801b792:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b796:	b9b8      	cbnz	r0, 801b7c8 <_Balloc+0x68>
 801b798:	2101      	movs	r1, #1
 801b79a:	fa01 f605 	lsl.w	r6, r1, r5
 801b79e:	1d72      	adds	r2, r6, #5
 801b7a0:	0092      	lsls	r2, r2, #2
 801b7a2:	4620      	mov	r0, r4
 801b7a4:	f000 fb60 	bl	801be68 <_calloc_r>
 801b7a8:	b160      	cbz	r0, 801b7c4 <_Balloc+0x64>
 801b7aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b7ae:	e00e      	b.n	801b7ce <_Balloc+0x6e>
 801b7b0:	2221      	movs	r2, #33	; 0x21
 801b7b2:	2104      	movs	r1, #4
 801b7b4:	4620      	mov	r0, r4
 801b7b6:	f000 fb57 	bl	801be68 <_calloc_r>
 801b7ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b7bc:	60f0      	str	r0, [r6, #12]
 801b7be:	68db      	ldr	r3, [r3, #12]
 801b7c0:	2b00      	cmp	r3, #0
 801b7c2:	d1e4      	bne.n	801b78e <_Balloc+0x2e>
 801b7c4:	2000      	movs	r0, #0
 801b7c6:	bd70      	pop	{r4, r5, r6, pc}
 801b7c8:	6802      	ldr	r2, [r0, #0]
 801b7ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b7ce:	2300      	movs	r3, #0
 801b7d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b7d4:	e7f7      	b.n	801b7c6 <_Balloc+0x66>
 801b7d6:	bf00      	nop
 801b7d8:	0801d230 	.word	0x0801d230
 801b7dc:	0801d4c6 	.word	0x0801d4c6

0801b7e0 <_Bfree>:
 801b7e0:	b570      	push	{r4, r5, r6, lr}
 801b7e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b7e4:	4605      	mov	r5, r0
 801b7e6:	460c      	mov	r4, r1
 801b7e8:	b976      	cbnz	r6, 801b808 <_Bfree+0x28>
 801b7ea:	2010      	movs	r0, #16
 801b7ec:	f7fe f9a8 	bl	8019b40 <malloc>
 801b7f0:	4602      	mov	r2, r0
 801b7f2:	6268      	str	r0, [r5, #36]	; 0x24
 801b7f4:	b920      	cbnz	r0, 801b800 <_Bfree+0x20>
 801b7f6:	4b09      	ldr	r3, [pc, #36]	; (801b81c <_Bfree+0x3c>)
 801b7f8:	4809      	ldr	r0, [pc, #36]	; (801b820 <_Bfree+0x40>)
 801b7fa:	218a      	movs	r1, #138	; 0x8a
 801b7fc:	f7fe ffe8 	bl	801a7d0 <__assert_func>
 801b800:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b804:	6006      	str	r6, [r0, #0]
 801b806:	60c6      	str	r6, [r0, #12]
 801b808:	b13c      	cbz	r4, 801b81a <_Bfree+0x3a>
 801b80a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b80c:	6862      	ldr	r2, [r4, #4]
 801b80e:	68db      	ldr	r3, [r3, #12]
 801b810:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b814:	6021      	str	r1, [r4, #0]
 801b816:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b81a:	bd70      	pop	{r4, r5, r6, pc}
 801b81c:	0801d230 	.word	0x0801d230
 801b820:	0801d4c6 	.word	0x0801d4c6

0801b824 <__multadd>:
 801b824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b828:	690d      	ldr	r5, [r1, #16]
 801b82a:	4607      	mov	r7, r0
 801b82c:	460c      	mov	r4, r1
 801b82e:	461e      	mov	r6, r3
 801b830:	f101 0c14 	add.w	ip, r1, #20
 801b834:	2000      	movs	r0, #0
 801b836:	f8dc 3000 	ldr.w	r3, [ip]
 801b83a:	b299      	uxth	r1, r3
 801b83c:	fb02 6101 	mla	r1, r2, r1, r6
 801b840:	0c1e      	lsrs	r6, r3, #16
 801b842:	0c0b      	lsrs	r3, r1, #16
 801b844:	fb02 3306 	mla	r3, r2, r6, r3
 801b848:	b289      	uxth	r1, r1
 801b84a:	3001      	adds	r0, #1
 801b84c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b850:	4285      	cmp	r5, r0
 801b852:	f84c 1b04 	str.w	r1, [ip], #4
 801b856:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b85a:	dcec      	bgt.n	801b836 <__multadd+0x12>
 801b85c:	b30e      	cbz	r6, 801b8a2 <__multadd+0x7e>
 801b85e:	68a3      	ldr	r3, [r4, #8]
 801b860:	42ab      	cmp	r3, r5
 801b862:	dc19      	bgt.n	801b898 <__multadd+0x74>
 801b864:	6861      	ldr	r1, [r4, #4]
 801b866:	4638      	mov	r0, r7
 801b868:	3101      	adds	r1, #1
 801b86a:	f7ff ff79 	bl	801b760 <_Balloc>
 801b86e:	4680      	mov	r8, r0
 801b870:	b928      	cbnz	r0, 801b87e <__multadd+0x5a>
 801b872:	4602      	mov	r2, r0
 801b874:	4b0c      	ldr	r3, [pc, #48]	; (801b8a8 <__multadd+0x84>)
 801b876:	480d      	ldr	r0, [pc, #52]	; (801b8ac <__multadd+0x88>)
 801b878:	21b5      	movs	r1, #181	; 0xb5
 801b87a:	f7fe ffa9 	bl	801a7d0 <__assert_func>
 801b87e:	6922      	ldr	r2, [r4, #16]
 801b880:	3202      	adds	r2, #2
 801b882:	f104 010c 	add.w	r1, r4, #12
 801b886:	0092      	lsls	r2, r2, #2
 801b888:	300c      	adds	r0, #12
 801b88a:	f7fe f969 	bl	8019b60 <memcpy>
 801b88e:	4621      	mov	r1, r4
 801b890:	4638      	mov	r0, r7
 801b892:	f7ff ffa5 	bl	801b7e0 <_Bfree>
 801b896:	4644      	mov	r4, r8
 801b898:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b89c:	3501      	adds	r5, #1
 801b89e:	615e      	str	r6, [r3, #20]
 801b8a0:	6125      	str	r5, [r4, #16]
 801b8a2:	4620      	mov	r0, r4
 801b8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b8a8:	0801d449 	.word	0x0801d449
 801b8ac:	0801d4c6 	.word	0x0801d4c6

0801b8b0 <__hi0bits>:
 801b8b0:	0c03      	lsrs	r3, r0, #16
 801b8b2:	041b      	lsls	r3, r3, #16
 801b8b4:	b9d3      	cbnz	r3, 801b8ec <__hi0bits+0x3c>
 801b8b6:	0400      	lsls	r0, r0, #16
 801b8b8:	2310      	movs	r3, #16
 801b8ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801b8be:	bf04      	itt	eq
 801b8c0:	0200      	lsleq	r0, r0, #8
 801b8c2:	3308      	addeq	r3, #8
 801b8c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801b8c8:	bf04      	itt	eq
 801b8ca:	0100      	lsleq	r0, r0, #4
 801b8cc:	3304      	addeq	r3, #4
 801b8ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801b8d2:	bf04      	itt	eq
 801b8d4:	0080      	lsleq	r0, r0, #2
 801b8d6:	3302      	addeq	r3, #2
 801b8d8:	2800      	cmp	r0, #0
 801b8da:	db05      	blt.n	801b8e8 <__hi0bits+0x38>
 801b8dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801b8e0:	f103 0301 	add.w	r3, r3, #1
 801b8e4:	bf08      	it	eq
 801b8e6:	2320      	moveq	r3, #32
 801b8e8:	4618      	mov	r0, r3
 801b8ea:	4770      	bx	lr
 801b8ec:	2300      	movs	r3, #0
 801b8ee:	e7e4      	b.n	801b8ba <__hi0bits+0xa>

0801b8f0 <__lo0bits>:
 801b8f0:	6803      	ldr	r3, [r0, #0]
 801b8f2:	f013 0207 	ands.w	r2, r3, #7
 801b8f6:	4601      	mov	r1, r0
 801b8f8:	d00b      	beq.n	801b912 <__lo0bits+0x22>
 801b8fa:	07da      	lsls	r2, r3, #31
 801b8fc:	d423      	bmi.n	801b946 <__lo0bits+0x56>
 801b8fe:	0798      	lsls	r0, r3, #30
 801b900:	bf49      	itett	mi
 801b902:	085b      	lsrmi	r3, r3, #1
 801b904:	089b      	lsrpl	r3, r3, #2
 801b906:	2001      	movmi	r0, #1
 801b908:	600b      	strmi	r3, [r1, #0]
 801b90a:	bf5c      	itt	pl
 801b90c:	600b      	strpl	r3, [r1, #0]
 801b90e:	2002      	movpl	r0, #2
 801b910:	4770      	bx	lr
 801b912:	b298      	uxth	r0, r3
 801b914:	b9a8      	cbnz	r0, 801b942 <__lo0bits+0x52>
 801b916:	0c1b      	lsrs	r3, r3, #16
 801b918:	2010      	movs	r0, #16
 801b91a:	b2da      	uxtb	r2, r3
 801b91c:	b90a      	cbnz	r2, 801b922 <__lo0bits+0x32>
 801b91e:	3008      	adds	r0, #8
 801b920:	0a1b      	lsrs	r3, r3, #8
 801b922:	071a      	lsls	r2, r3, #28
 801b924:	bf04      	itt	eq
 801b926:	091b      	lsreq	r3, r3, #4
 801b928:	3004      	addeq	r0, #4
 801b92a:	079a      	lsls	r2, r3, #30
 801b92c:	bf04      	itt	eq
 801b92e:	089b      	lsreq	r3, r3, #2
 801b930:	3002      	addeq	r0, #2
 801b932:	07da      	lsls	r2, r3, #31
 801b934:	d403      	bmi.n	801b93e <__lo0bits+0x4e>
 801b936:	085b      	lsrs	r3, r3, #1
 801b938:	f100 0001 	add.w	r0, r0, #1
 801b93c:	d005      	beq.n	801b94a <__lo0bits+0x5a>
 801b93e:	600b      	str	r3, [r1, #0]
 801b940:	4770      	bx	lr
 801b942:	4610      	mov	r0, r2
 801b944:	e7e9      	b.n	801b91a <__lo0bits+0x2a>
 801b946:	2000      	movs	r0, #0
 801b948:	4770      	bx	lr
 801b94a:	2020      	movs	r0, #32
 801b94c:	4770      	bx	lr
	...

0801b950 <__i2b>:
 801b950:	b510      	push	{r4, lr}
 801b952:	460c      	mov	r4, r1
 801b954:	2101      	movs	r1, #1
 801b956:	f7ff ff03 	bl	801b760 <_Balloc>
 801b95a:	4602      	mov	r2, r0
 801b95c:	b928      	cbnz	r0, 801b96a <__i2b+0x1a>
 801b95e:	4b05      	ldr	r3, [pc, #20]	; (801b974 <__i2b+0x24>)
 801b960:	4805      	ldr	r0, [pc, #20]	; (801b978 <__i2b+0x28>)
 801b962:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801b966:	f7fe ff33 	bl	801a7d0 <__assert_func>
 801b96a:	2301      	movs	r3, #1
 801b96c:	6144      	str	r4, [r0, #20]
 801b96e:	6103      	str	r3, [r0, #16]
 801b970:	bd10      	pop	{r4, pc}
 801b972:	bf00      	nop
 801b974:	0801d449 	.word	0x0801d449
 801b978:	0801d4c6 	.word	0x0801d4c6

0801b97c <__multiply>:
 801b97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b980:	4691      	mov	r9, r2
 801b982:	690a      	ldr	r2, [r1, #16]
 801b984:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b988:	429a      	cmp	r2, r3
 801b98a:	bfb8      	it	lt
 801b98c:	460b      	movlt	r3, r1
 801b98e:	460c      	mov	r4, r1
 801b990:	bfbc      	itt	lt
 801b992:	464c      	movlt	r4, r9
 801b994:	4699      	movlt	r9, r3
 801b996:	6927      	ldr	r7, [r4, #16]
 801b998:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801b99c:	68a3      	ldr	r3, [r4, #8]
 801b99e:	6861      	ldr	r1, [r4, #4]
 801b9a0:	eb07 060a 	add.w	r6, r7, sl
 801b9a4:	42b3      	cmp	r3, r6
 801b9a6:	b085      	sub	sp, #20
 801b9a8:	bfb8      	it	lt
 801b9aa:	3101      	addlt	r1, #1
 801b9ac:	f7ff fed8 	bl	801b760 <_Balloc>
 801b9b0:	b930      	cbnz	r0, 801b9c0 <__multiply+0x44>
 801b9b2:	4602      	mov	r2, r0
 801b9b4:	4b44      	ldr	r3, [pc, #272]	; (801bac8 <__multiply+0x14c>)
 801b9b6:	4845      	ldr	r0, [pc, #276]	; (801bacc <__multiply+0x150>)
 801b9b8:	f240 115d 	movw	r1, #349	; 0x15d
 801b9bc:	f7fe ff08 	bl	801a7d0 <__assert_func>
 801b9c0:	f100 0514 	add.w	r5, r0, #20
 801b9c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b9c8:	462b      	mov	r3, r5
 801b9ca:	2200      	movs	r2, #0
 801b9cc:	4543      	cmp	r3, r8
 801b9ce:	d321      	bcc.n	801ba14 <__multiply+0x98>
 801b9d0:	f104 0314 	add.w	r3, r4, #20
 801b9d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801b9d8:	f109 0314 	add.w	r3, r9, #20
 801b9dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801b9e0:	9202      	str	r2, [sp, #8]
 801b9e2:	1b3a      	subs	r2, r7, r4
 801b9e4:	3a15      	subs	r2, #21
 801b9e6:	f022 0203 	bic.w	r2, r2, #3
 801b9ea:	3204      	adds	r2, #4
 801b9ec:	f104 0115 	add.w	r1, r4, #21
 801b9f0:	428f      	cmp	r7, r1
 801b9f2:	bf38      	it	cc
 801b9f4:	2204      	movcc	r2, #4
 801b9f6:	9201      	str	r2, [sp, #4]
 801b9f8:	9a02      	ldr	r2, [sp, #8]
 801b9fa:	9303      	str	r3, [sp, #12]
 801b9fc:	429a      	cmp	r2, r3
 801b9fe:	d80c      	bhi.n	801ba1a <__multiply+0x9e>
 801ba00:	2e00      	cmp	r6, #0
 801ba02:	dd03      	ble.n	801ba0c <__multiply+0x90>
 801ba04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ba08:	2b00      	cmp	r3, #0
 801ba0a:	d05a      	beq.n	801bac2 <__multiply+0x146>
 801ba0c:	6106      	str	r6, [r0, #16]
 801ba0e:	b005      	add	sp, #20
 801ba10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba14:	f843 2b04 	str.w	r2, [r3], #4
 801ba18:	e7d8      	b.n	801b9cc <__multiply+0x50>
 801ba1a:	f8b3 a000 	ldrh.w	sl, [r3]
 801ba1e:	f1ba 0f00 	cmp.w	sl, #0
 801ba22:	d024      	beq.n	801ba6e <__multiply+0xf2>
 801ba24:	f104 0e14 	add.w	lr, r4, #20
 801ba28:	46a9      	mov	r9, r5
 801ba2a:	f04f 0c00 	mov.w	ip, #0
 801ba2e:	f85e 2b04 	ldr.w	r2, [lr], #4
 801ba32:	f8d9 1000 	ldr.w	r1, [r9]
 801ba36:	fa1f fb82 	uxth.w	fp, r2
 801ba3a:	b289      	uxth	r1, r1
 801ba3c:	fb0a 110b 	mla	r1, sl, fp, r1
 801ba40:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801ba44:	f8d9 2000 	ldr.w	r2, [r9]
 801ba48:	4461      	add	r1, ip
 801ba4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801ba4e:	fb0a c20b 	mla	r2, sl, fp, ip
 801ba52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801ba56:	b289      	uxth	r1, r1
 801ba58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801ba5c:	4577      	cmp	r7, lr
 801ba5e:	f849 1b04 	str.w	r1, [r9], #4
 801ba62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801ba66:	d8e2      	bhi.n	801ba2e <__multiply+0xb2>
 801ba68:	9a01      	ldr	r2, [sp, #4]
 801ba6a:	f845 c002 	str.w	ip, [r5, r2]
 801ba6e:	9a03      	ldr	r2, [sp, #12]
 801ba70:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801ba74:	3304      	adds	r3, #4
 801ba76:	f1b9 0f00 	cmp.w	r9, #0
 801ba7a:	d020      	beq.n	801babe <__multiply+0x142>
 801ba7c:	6829      	ldr	r1, [r5, #0]
 801ba7e:	f104 0c14 	add.w	ip, r4, #20
 801ba82:	46ae      	mov	lr, r5
 801ba84:	f04f 0a00 	mov.w	sl, #0
 801ba88:	f8bc b000 	ldrh.w	fp, [ip]
 801ba8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801ba90:	fb09 220b 	mla	r2, r9, fp, r2
 801ba94:	4492      	add	sl, r2
 801ba96:	b289      	uxth	r1, r1
 801ba98:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801ba9c:	f84e 1b04 	str.w	r1, [lr], #4
 801baa0:	f85c 2b04 	ldr.w	r2, [ip], #4
 801baa4:	f8be 1000 	ldrh.w	r1, [lr]
 801baa8:	0c12      	lsrs	r2, r2, #16
 801baaa:	fb09 1102 	mla	r1, r9, r2, r1
 801baae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801bab2:	4567      	cmp	r7, ip
 801bab4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801bab8:	d8e6      	bhi.n	801ba88 <__multiply+0x10c>
 801baba:	9a01      	ldr	r2, [sp, #4]
 801babc:	50a9      	str	r1, [r5, r2]
 801babe:	3504      	adds	r5, #4
 801bac0:	e79a      	b.n	801b9f8 <__multiply+0x7c>
 801bac2:	3e01      	subs	r6, #1
 801bac4:	e79c      	b.n	801ba00 <__multiply+0x84>
 801bac6:	bf00      	nop
 801bac8:	0801d449 	.word	0x0801d449
 801bacc:	0801d4c6 	.word	0x0801d4c6

0801bad0 <__pow5mult>:
 801bad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bad4:	4615      	mov	r5, r2
 801bad6:	f012 0203 	ands.w	r2, r2, #3
 801bada:	4606      	mov	r6, r0
 801badc:	460f      	mov	r7, r1
 801bade:	d007      	beq.n	801baf0 <__pow5mult+0x20>
 801bae0:	4c25      	ldr	r4, [pc, #148]	; (801bb78 <__pow5mult+0xa8>)
 801bae2:	3a01      	subs	r2, #1
 801bae4:	2300      	movs	r3, #0
 801bae6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801baea:	f7ff fe9b 	bl	801b824 <__multadd>
 801baee:	4607      	mov	r7, r0
 801baf0:	10ad      	asrs	r5, r5, #2
 801baf2:	d03d      	beq.n	801bb70 <__pow5mult+0xa0>
 801baf4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801baf6:	b97c      	cbnz	r4, 801bb18 <__pow5mult+0x48>
 801baf8:	2010      	movs	r0, #16
 801bafa:	f7fe f821 	bl	8019b40 <malloc>
 801bafe:	4602      	mov	r2, r0
 801bb00:	6270      	str	r0, [r6, #36]	; 0x24
 801bb02:	b928      	cbnz	r0, 801bb10 <__pow5mult+0x40>
 801bb04:	4b1d      	ldr	r3, [pc, #116]	; (801bb7c <__pow5mult+0xac>)
 801bb06:	481e      	ldr	r0, [pc, #120]	; (801bb80 <__pow5mult+0xb0>)
 801bb08:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801bb0c:	f7fe fe60 	bl	801a7d0 <__assert_func>
 801bb10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801bb14:	6004      	str	r4, [r0, #0]
 801bb16:	60c4      	str	r4, [r0, #12]
 801bb18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801bb1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801bb20:	b94c      	cbnz	r4, 801bb36 <__pow5mult+0x66>
 801bb22:	f240 2171 	movw	r1, #625	; 0x271
 801bb26:	4630      	mov	r0, r6
 801bb28:	f7ff ff12 	bl	801b950 <__i2b>
 801bb2c:	2300      	movs	r3, #0
 801bb2e:	f8c8 0008 	str.w	r0, [r8, #8]
 801bb32:	4604      	mov	r4, r0
 801bb34:	6003      	str	r3, [r0, #0]
 801bb36:	f04f 0900 	mov.w	r9, #0
 801bb3a:	07eb      	lsls	r3, r5, #31
 801bb3c:	d50a      	bpl.n	801bb54 <__pow5mult+0x84>
 801bb3e:	4639      	mov	r1, r7
 801bb40:	4622      	mov	r2, r4
 801bb42:	4630      	mov	r0, r6
 801bb44:	f7ff ff1a 	bl	801b97c <__multiply>
 801bb48:	4639      	mov	r1, r7
 801bb4a:	4680      	mov	r8, r0
 801bb4c:	4630      	mov	r0, r6
 801bb4e:	f7ff fe47 	bl	801b7e0 <_Bfree>
 801bb52:	4647      	mov	r7, r8
 801bb54:	106d      	asrs	r5, r5, #1
 801bb56:	d00b      	beq.n	801bb70 <__pow5mult+0xa0>
 801bb58:	6820      	ldr	r0, [r4, #0]
 801bb5a:	b938      	cbnz	r0, 801bb6c <__pow5mult+0x9c>
 801bb5c:	4622      	mov	r2, r4
 801bb5e:	4621      	mov	r1, r4
 801bb60:	4630      	mov	r0, r6
 801bb62:	f7ff ff0b 	bl	801b97c <__multiply>
 801bb66:	6020      	str	r0, [r4, #0]
 801bb68:	f8c0 9000 	str.w	r9, [r0]
 801bb6c:	4604      	mov	r4, r0
 801bb6e:	e7e4      	b.n	801bb3a <__pow5mult+0x6a>
 801bb70:	4638      	mov	r0, r7
 801bb72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bb76:	bf00      	nop
 801bb78:	0801d618 	.word	0x0801d618
 801bb7c:	0801d230 	.word	0x0801d230
 801bb80:	0801d4c6 	.word	0x0801d4c6

0801bb84 <__lshift>:
 801bb84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bb88:	460c      	mov	r4, r1
 801bb8a:	6849      	ldr	r1, [r1, #4]
 801bb8c:	6923      	ldr	r3, [r4, #16]
 801bb8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801bb92:	68a3      	ldr	r3, [r4, #8]
 801bb94:	4607      	mov	r7, r0
 801bb96:	4691      	mov	r9, r2
 801bb98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801bb9c:	f108 0601 	add.w	r6, r8, #1
 801bba0:	42b3      	cmp	r3, r6
 801bba2:	db0b      	blt.n	801bbbc <__lshift+0x38>
 801bba4:	4638      	mov	r0, r7
 801bba6:	f7ff fddb 	bl	801b760 <_Balloc>
 801bbaa:	4605      	mov	r5, r0
 801bbac:	b948      	cbnz	r0, 801bbc2 <__lshift+0x3e>
 801bbae:	4602      	mov	r2, r0
 801bbb0:	4b2a      	ldr	r3, [pc, #168]	; (801bc5c <__lshift+0xd8>)
 801bbb2:	482b      	ldr	r0, [pc, #172]	; (801bc60 <__lshift+0xdc>)
 801bbb4:	f240 11d9 	movw	r1, #473	; 0x1d9
 801bbb8:	f7fe fe0a 	bl	801a7d0 <__assert_func>
 801bbbc:	3101      	adds	r1, #1
 801bbbe:	005b      	lsls	r3, r3, #1
 801bbc0:	e7ee      	b.n	801bba0 <__lshift+0x1c>
 801bbc2:	2300      	movs	r3, #0
 801bbc4:	f100 0114 	add.w	r1, r0, #20
 801bbc8:	f100 0210 	add.w	r2, r0, #16
 801bbcc:	4618      	mov	r0, r3
 801bbce:	4553      	cmp	r3, sl
 801bbd0:	db37      	blt.n	801bc42 <__lshift+0xbe>
 801bbd2:	6920      	ldr	r0, [r4, #16]
 801bbd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801bbd8:	f104 0314 	add.w	r3, r4, #20
 801bbdc:	f019 091f 	ands.w	r9, r9, #31
 801bbe0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801bbe4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801bbe8:	d02f      	beq.n	801bc4a <__lshift+0xc6>
 801bbea:	f1c9 0e20 	rsb	lr, r9, #32
 801bbee:	468a      	mov	sl, r1
 801bbf0:	f04f 0c00 	mov.w	ip, #0
 801bbf4:	681a      	ldr	r2, [r3, #0]
 801bbf6:	fa02 f209 	lsl.w	r2, r2, r9
 801bbfa:	ea42 020c 	orr.w	r2, r2, ip
 801bbfe:	f84a 2b04 	str.w	r2, [sl], #4
 801bc02:	f853 2b04 	ldr.w	r2, [r3], #4
 801bc06:	4298      	cmp	r0, r3
 801bc08:	fa22 fc0e 	lsr.w	ip, r2, lr
 801bc0c:	d8f2      	bhi.n	801bbf4 <__lshift+0x70>
 801bc0e:	1b03      	subs	r3, r0, r4
 801bc10:	3b15      	subs	r3, #21
 801bc12:	f023 0303 	bic.w	r3, r3, #3
 801bc16:	3304      	adds	r3, #4
 801bc18:	f104 0215 	add.w	r2, r4, #21
 801bc1c:	4290      	cmp	r0, r2
 801bc1e:	bf38      	it	cc
 801bc20:	2304      	movcc	r3, #4
 801bc22:	f841 c003 	str.w	ip, [r1, r3]
 801bc26:	f1bc 0f00 	cmp.w	ip, #0
 801bc2a:	d001      	beq.n	801bc30 <__lshift+0xac>
 801bc2c:	f108 0602 	add.w	r6, r8, #2
 801bc30:	3e01      	subs	r6, #1
 801bc32:	4638      	mov	r0, r7
 801bc34:	612e      	str	r6, [r5, #16]
 801bc36:	4621      	mov	r1, r4
 801bc38:	f7ff fdd2 	bl	801b7e0 <_Bfree>
 801bc3c:	4628      	mov	r0, r5
 801bc3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bc42:	f842 0f04 	str.w	r0, [r2, #4]!
 801bc46:	3301      	adds	r3, #1
 801bc48:	e7c1      	b.n	801bbce <__lshift+0x4a>
 801bc4a:	3904      	subs	r1, #4
 801bc4c:	f853 2b04 	ldr.w	r2, [r3], #4
 801bc50:	f841 2f04 	str.w	r2, [r1, #4]!
 801bc54:	4298      	cmp	r0, r3
 801bc56:	d8f9      	bhi.n	801bc4c <__lshift+0xc8>
 801bc58:	e7ea      	b.n	801bc30 <__lshift+0xac>
 801bc5a:	bf00      	nop
 801bc5c:	0801d449 	.word	0x0801d449
 801bc60:	0801d4c6 	.word	0x0801d4c6

0801bc64 <__mcmp>:
 801bc64:	b530      	push	{r4, r5, lr}
 801bc66:	6902      	ldr	r2, [r0, #16]
 801bc68:	690c      	ldr	r4, [r1, #16]
 801bc6a:	1b12      	subs	r2, r2, r4
 801bc6c:	d10e      	bne.n	801bc8c <__mcmp+0x28>
 801bc6e:	f100 0314 	add.w	r3, r0, #20
 801bc72:	3114      	adds	r1, #20
 801bc74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801bc78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801bc7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801bc80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801bc84:	42a5      	cmp	r5, r4
 801bc86:	d003      	beq.n	801bc90 <__mcmp+0x2c>
 801bc88:	d305      	bcc.n	801bc96 <__mcmp+0x32>
 801bc8a:	2201      	movs	r2, #1
 801bc8c:	4610      	mov	r0, r2
 801bc8e:	bd30      	pop	{r4, r5, pc}
 801bc90:	4283      	cmp	r3, r0
 801bc92:	d3f3      	bcc.n	801bc7c <__mcmp+0x18>
 801bc94:	e7fa      	b.n	801bc8c <__mcmp+0x28>
 801bc96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801bc9a:	e7f7      	b.n	801bc8c <__mcmp+0x28>

0801bc9c <__mdiff>:
 801bc9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bca0:	460c      	mov	r4, r1
 801bca2:	4606      	mov	r6, r0
 801bca4:	4611      	mov	r1, r2
 801bca6:	4620      	mov	r0, r4
 801bca8:	4690      	mov	r8, r2
 801bcaa:	f7ff ffdb 	bl	801bc64 <__mcmp>
 801bcae:	1e05      	subs	r5, r0, #0
 801bcb0:	d110      	bne.n	801bcd4 <__mdiff+0x38>
 801bcb2:	4629      	mov	r1, r5
 801bcb4:	4630      	mov	r0, r6
 801bcb6:	f7ff fd53 	bl	801b760 <_Balloc>
 801bcba:	b930      	cbnz	r0, 801bcca <__mdiff+0x2e>
 801bcbc:	4b3a      	ldr	r3, [pc, #232]	; (801bda8 <__mdiff+0x10c>)
 801bcbe:	4602      	mov	r2, r0
 801bcc0:	f240 2132 	movw	r1, #562	; 0x232
 801bcc4:	4839      	ldr	r0, [pc, #228]	; (801bdac <__mdiff+0x110>)
 801bcc6:	f7fe fd83 	bl	801a7d0 <__assert_func>
 801bcca:	2301      	movs	r3, #1
 801bccc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801bcd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bcd4:	bfa4      	itt	ge
 801bcd6:	4643      	movge	r3, r8
 801bcd8:	46a0      	movge	r8, r4
 801bcda:	4630      	mov	r0, r6
 801bcdc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801bce0:	bfa6      	itte	ge
 801bce2:	461c      	movge	r4, r3
 801bce4:	2500      	movge	r5, #0
 801bce6:	2501      	movlt	r5, #1
 801bce8:	f7ff fd3a 	bl	801b760 <_Balloc>
 801bcec:	b920      	cbnz	r0, 801bcf8 <__mdiff+0x5c>
 801bcee:	4b2e      	ldr	r3, [pc, #184]	; (801bda8 <__mdiff+0x10c>)
 801bcf0:	4602      	mov	r2, r0
 801bcf2:	f44f 7110 	mov.w	r1, #576	; 0x240
 801bcf6:	e7e5      	b.n	801bcc4 <__mdiff+0x28>
 801bcf8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801bcfc:	6926      	ldr	r6, [r4, #16]
 801bcfe:	60c5      	str	r5, [r0, #12]
 801bd00:	f104 0914 	add.w	r9, r4, #20
 801bd04:	f108 0514 	add.w	r5, r8, #20
 801bd08:	f100 0e14 	add.w	lr, r0, #20
 801bd0c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801bd10:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801bd14:	f108 0210 	add.w	r2, r8, #16
 801bd18:	46f2      	mov	sl, lr
 801bd1a:	2100      	movs	r1, #0
 801bd1c:	f859 3b04 	ldr.w	r3, [r9], #4
 801bd20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801bd24:	fa1f f883 	uxth.w	r8, r3
 801bd28:	fa11 f18b 	uxtah	r1, r1, fp
 801bd2c:	0c1b      	lsrs	r3, r3, #16
 801bd2e:	eba1 0808 	sub.w	r8, r1, r8
 801bd32:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801bd36:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801bd3a:	fa1f f888 	uxth.w	r8, r8
 801bd3e:	1419      	asrs	r1, r3, #16
 801bd40:	454e      	cmp	r6, r9
 801bd42:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801bd46:	f84a 3b04 	str.w	r3, [sl], #4
 801bd4a:	d8e7      	bhi.n	801bd1c <__mdiff+0x80>
 801bd4c:	1b33      	subs	r3, r6, r4
 801bd4e:	3b15      	subs	r3, #21
 801bd50:	f023 0303 	bic.w	r3, r3, #3
 801bd54:	3304      	adds	r3, #4
 801bd56:	3415      	adds	r4, #21
 801bd58:	42a6      	cmp	r6, r4
 801bd5a:	bf38      	it	cc
 801bd5c:	2304      	movcc	r3, #4
 801bd5e:	441d      	add	r5, r3
 801bd60:	4473      	add	r3, lr
 801bd62:	469e      	mov	lr, r3
 801bd64:	462e      	mov	r6, r5
 801bd66:	4566      	cmp	r6, ip
 801bd68:	d30e      	bcc.n	801bd88 <__mdiff+0xec>
 801bd6a:	f10c 0203 	add.w	r2, ip, #3
 801bd6e:	1b52      	subs	r2, r2, r5
 801bd70:	f022 0203 	bic.w	r2, r2, #3
 801bd74:	3d03      	subs	r5, #3
 801bd76:	45ac      	cmp	ip, r5
 801bd78:	bf38      	it	cc
 801bd7a:	2200      	movcc	r2, #0
 801bd7c:	441a      	add	r2, r3
 801bd7e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801bd82:	b17b      	cbz	r3, 801bda4 <__mdiff+0x108>
 801bd84:	6107      	str	r7, [r0, #16]
 801bd86:	e7a3      	b.n	801bcd0 <__mdiff+0x34>
 801bd88:	f856 8b04 	ldr.w	r8, [r6], #4
 801bd8c:	fa11 f288 	uxtah	r2, r1, r8
 801bd90:	1414      	asrs	r4, r2, #16
 801bd92:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801bd96:	b292      	uxth	r2, r2
 801bd98:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801bd9c:	f84e 2b04 	str.w	r2, [lr], #4
 801bda0:	1421      	asrs	r1, r4, #16
 801bda2:	e7e0      	b.n	801bd66 <__mdiff+0xca>
 801bda4:	3f01      	subs	r7, #1
 801bda6:	e7ea      	b.n	801bd7e <__mdiff+0xe2>
 801bda8:	0801d449 	.word	0x0801d449
 801bdac:	0801d4c6 	.word	0x0801d4c6

0801bdb0 <__d2b>:
 801bdb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801bdb4:	4689      	mov	r9, r1
 801bdb6:	2101      	movs	r1, #1
 801bdb8:	ec57 6b10 	vmov	r6, r7, d0
 801bdbc:	4690      	mov	r8, r2
 801bdbe:	f7ff fccf 	bl	801b760 <_Balloc>
 801bdc2:	4604      	mov	r4, r0
 801bdc4:	b930      	cbnz	r0, 801bdd4 <__d2b+0x24>
 801bdc6:	4602      	mov	r2, r0
 801bdc8:	4b25      	ldr	r3, [pc, #148]	; (801be60 <__d2b+0xb0>)
 801bdca:	4826      	ldr	r0, [pc, #152]	; (801be64 <__d2b+0xb4>)
 801bdcc:	f240 310a 	movw	r1, #778	; 0x30a
 801bdd0:	f7fe fcfe 	bl	801a7d0 <__assert_func>
 801bdd4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801bdd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801bddc:	bb35      	cbnz	r5, 801be2c <__d2b+0x7c>
 801bdde:	2e00      	cmp	r6, #0
 801bde0:	9301      	str	r3, [sp, #4]
 801bde2:	d028      	beq.n	801be36 <__d2b+0x86>
 801bde4:	4668      	mov	r0, sp
 801bde6:	9600      	str	r6, [sp, #0]
 801bde8:	f7ff fd82 	bl	801b8f0 <__lo0bits>
 801bdec:	9900      	ldr	r1, [sp, #0]
 801bdee:	b300      	cbz	r0, 801be32 <__d2b+0x82>
 801bdf0:	9a01      	ldr	r2, [sp, #4]
 801bdf2:	f1c0 0320 	rsb	r3, r0, #32
 801bdf6:	fa02 f303 	lsl.w	r3, r2, r3
 801bdfa:	430b      	orrs	r3, r1
 801bdfc:	40c2      	lsrs	r2, r0
 801bdfe:	6163      	str	r3, [r4, #20]
 801be00:	9201      	str	r2, [sp, #4]
 801be02:	9b01      	ldr	r3, [sp, #4]
 801be04:	61a3      	str	r3, [r4, #24]
 801be06:	2b00      	cmp	r3, #0
 801be08:	bf14      	ite	ne
 801be0a:	2202      	movne	r2, #2
 801be0c:	2201      	moveq	r2, #1
 801be0e:	6122      	str	r2, [r4, #16]
 801be10:	b1d5      	cbz	r5, 801be48 <__d2b+0x98>
 801be12:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801be16:	4405      	add	r5, r0
 801be18:	f8c9 5000 	str.w	r5, [r9]
 801be1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801be20:	f8c8 0000 	str.w	r0, [r8]
 801be24:	4620      	mov	r0, r4
 801be26:	b003      	add	sp, #12
 801be28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801be2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801be30:	e7d5      	b.n	801bdde <__d2b+0x2e>
 801be32:	6161      	str	r1, [r4, #20]
 801be34:	e7e5      	b.n	801be02 <__d2b+0x52>
 801be36:	a801      	add	r0, sp, #4
 801be38:	f7ff fd5a 	bl	801b8f0 <__lo0bits>
 801be3c:	9b01      	ldr	r3, [sp, #4]
 801be3e:	6163      	str	r3, [r4, #20]
 801be40:	2201      	movs	r2, #1
 801be42:	6122      	str	r2, [r4, #16]
 801be44:	3020      	adds	r0, #32
 801be46:	e7e3      	b.n	801be10 <__d2b+0x60>
 801be48:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801be4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801be50:	f8c9 0000 	str.w	r0, [r9]
 801be54:	6918      	ldr	r0, [r3, #16]
 801be56:	f7ff fd2b 	bl	801b8b0 <__hi0bits>
 801be5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801be5e:	e7df      	b.n	801be20 <__d2b+0x70>
 801be60:	0801d449 	.word	0x0801d449
 801be64:	0801d4c6 	.word	0x0801d4c6

0801be68 <_calloc_r>:
 801be68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801be6a:	fba1 2402 	umull	r2, r4, r1, r2
 801be6e:	b94c      	cbnz	r4, 801be84 <_calloc_r+0x1c>
 801be70:	4611      	mov	r1, r2
 801be72:	9201      	str	r2, [sp, #4]
 801be74:	f7fd fef6 	bl	8019c64 <_malloc_r>
 801be78:	9a01      	ldr	r2, [sp, #4]
 801be7a:	4605      	mov	r5, r0
 801be7c:	b930      	cbnz	r0, 801be8c <_calloc_r+0x24>
 801be7e:	4628      	mov	r0, r5
 801be80:	b003      	add	sp, #12
 801be82:	bd30      	pop	{r4, r5, pc}
 801be84:	220c      	movs	r2, #12
 801be86:	6002      	str	r2, [r0, #0]
 801be88:	2500      	movs	r5, #0
 801be8a:	e7f8      	b.n	801be7e <_calloc_r+0x16>
 801be8c:	4621      	mov	r1, r4
 801be8e:	f7fd fe75 	bl	8019b7c <memset>
 801be92:	e7f4      	b.n	801be7e <_calloc_r+0x16>

0801be94 <__ssputs_r>:
 801be94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be98:	688e      	ldr	r6, [r1, #8]
 801be9a:	429e      	cmp	r6, r3
 801be9c:	4682      	mov	sl, r0
 801be9e:	460c      	mov	r4, r1
 801bea0:	4690      	mov	r8, r2
 801bea2:	461f      	mov	r7, r3
 801bea4:	d838      	bhi.n	801bf18 <__ssputs_r+0x84>
 801bea6:	898a      	ldrh	r2, [r1, #12]
 801bea8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801beac:	d032      	beq.n	801bf14 <__ssputs_r+0x80>
 801beae:	6825      	ldr	r5, [r4, #0]
 801beb0:	6909      	ldr	r1, [r1, #16]
 801beb2:	eba5 0901 	sub.w	r9, r5, r1
 801beb6:	6965      	ldr	r5, [r4, #20]
 801beb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bebc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801bec0:	3301      	adds	r3, #1
 801bec2:	444b      	add	r3, r9
 801bec4:	106d      	asrs	r5, r5, #1
 801bec6:	429d      	cmp	r5, r3
 801bec8:	bf38      	it	cc
 801beca:	461d      	movcc	r5, r3
 801becc:	0553      	lsls	r3, r2, #21
 801bece:	d531      	bpl.n	801bf34 <__ssputs_r+0xa0>
 801bed0:	4629      	mov	r1, r5
 801bed2:	f7fd fec7 	bl	8019c64 <_malloc_r>
 801bed6:	4606      	mov	r6, r0
 801bed8:	b950      	cbnz	r0, 801bef0 <__ssputs_r+0x5c>
 801beda:	230c      	movs	r3, #12
 801bedc:	f8ca 3000 	str.w	r3, [sl]
 801bee0:	89a3      	ldrh	r3, [r4, #12]
 801bee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bee6:	81a3      	strh	r3, [r4, #12]
 801bee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801beec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bef0:	6921      	ldr	r1, [r4, #16]
 801bef2:	464a      	mov	r2, r9
 801bef4:	f7fd fe34 	bl	8019b60 <memcpy>
 801bef8:	89a3      	ldrh	r3, [r4, #12]
 801befa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801befe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bf02:	81a3      	strh	r3, [r4, #12]
 801bf04:	6126      	str	r6, [r4, #16]
 801bf06:	6165      	str	r5, [r4, #20]
 801bf08:	444e      	add	r6, r9
 801bf0a:	eba5 0509 	sub.w	r5, r5, r9
 801bf0e:	6026      	str	r6, [r4, #0]
 801bf10:	60a5      	str	r5, [r4, #8]
 801bf12:	463e      	mov	r6, r7
 801bf14:	42be      	cmp	r6, r7
 801bf16:	d900      	bls.n	801bf1a <__ssputs_r+0x86>
 801bf18:	463e      	mov	r6, r7
 801bf1a:	6820      	ldr	r0, [r4, #0]
 801bf1c:	4632      	mov	r2, r6
 801bf1e:	4641      	mov	r1, r8
 801bf20:	f000 fce4 	bl	801c8ec <memmove>
 801bf24:	68a3      	ldr	r3, [r4, #8]
 801bf26:	1b9b      	subs	r3, r3, r6
 801bf28:	60a3      	str	r3, [r4, #8]
 801bf2a:	6823      	ldr	r3, [r4, #0]
 801bf2c:	4433      	add	r3, r6
 801bf2e:	6023      	str	r3, [r4, #0]
 801bf30:	2000      	movs	r0, #0
 801bf32:	e7db      	b.n	801beec <__ssputs_r+0x58>
 801bf34:	462a      	mov	r2, r5
 801bf36:	f000 fcf3 	bl	801c920 <_realloc_r>
 801bf3a:	4606      	mov	r6, r0
 801bf3c:	2800      	cmp	r0, #0
 801bf3e:	d1e1      	bne.n	801bf04 <__ssputs_r+0x70>
 801bf40:	6921      	ldr	r1, [r4, #16]
 801bf42:	4650      	mov	r0, sl
 801bf44:	f7fd fe22 	bl	8019b8c <_free_r>
 801bf48:	e7c7      	b.n	801beda <__ssputs_r+0x46>
	...

0801bf4c <_svfiprintf_r>:
 801bf4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf50:	4698      	mov	r8, r3
 801bf52:	898b      	ldrh	r3, [r1, #12]
 801bf54:	061b      	lsls	r3, r3, #24
 801bf56:	b09d      	sub	sp, #116	; 0x74
 801bf58:	4607      	mov	r7, r0
 801bf5a:	460d      	mov	r5, r1
 801bf5c:	4614      	mov	r4, r2
 801bf5e:	d50e      	bpl.n	801bf7e <_svfiprintf_r+0x32>
 801bf60:	690b      	ldr	r3, [r1, #16]
 801bf62:	b963      	cbnz	r3, 801bf7e <_svfiprintf_r+0x32>
 801bf64:	2140      	movs	r1, #64	; 0x40
 801bf66:	f7fd fe7d 	bl	8019c64 <_malloc_r>
 801bf6a:	6028      	str	r0, [r5, #0]
 801bf6c:	6128      	str	r0, [r5, #16]
 801bf6e:	b920      	cbnz	r0, 801bf7a <_svfiprintf_r+0x2e>
 801bf70:	230c      	movs	r3, #12
 801bf72:	603b      	str	r3, [r7, #0]
 801bf74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bf78:	e0d1      	b.n	801c11e <_svfiprintf_r+0x1d2>
 801bf7a:	2340      	movs	r3, #64	; 0x40
 801bf7c:	616b      	str	r3, [r5, #20]
 801bf7e:	2300      	movs	r3, #0
 801bf80:	9309      	str	r3, [sp, #36]	; 0x24
 801bf82:	2320      	movs	r3, #32
 801bf84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bf88:	f8cd 800c 	str.w	r8, [sp, #12]
 801bf8c:	2330      	movs	r3, #48	; 0x30
 801bf8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801c138 <_svfiprintf_r+0x1ec>
 801bf92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bf96:	f04f 0901 	mov.w	r9, #1
 801bf9a:	4623      	mov	r3, r4
 801bf9c:	469a      	mov	sl, r3
 801bf9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bfa2:	b10a      	cbz	r2, 801bfa8 <_svfiprintf_r+0x5c>
 801bfa4:	2a25      	cmp	r2, #37	; 0x25
 801bfa6:	d1f9      	bne.n	801bf9c <_svfiprintf_r+0x50>
 801bfa8:	ebba 0b04 	subs.w	fp, sl, r4
 801bfac:	d00b      	beq.n	801bfc6 <_svfiprintf_r+0x7a>
 801bfae:	465b      	mov	r3, fp
 801bfb0:	4622      	mov	r2, r4
 801bfb2:	4629      	mov	r1, r5
 801bfb4:	4638      	mov	r0, r7
 801bfb6:	f7ff ff6d 	bl	801be94 <__ssputs_r>
 801bfba:	3001      	adds	r0, #1
 801bfbc:	f000 80aa 	beq.w	801c114 <_svfiprintf_r+0x1c8>
 801bfc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bfc2:	445a      	add	r2, fp
 801bfc4:	9209      	str	r2, [sp, #36]	; 0x24
 801bfc6:	f89a 3000 	ldrb.w	r3, [sl]
 801bfca:	2b00      	cmp	r3, #0
 801bfcc:	f000 80a2 	beq.w	801c114 <_svfiprintf_r+0x1c8>
 801bfd0:	2300      	movs	r3, #0
 801bfd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801bfd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bfda:	f10a 0a01 	add.w	sl, sl, #1
 801bfde:	9304      	str	r3, [sp, #16]
 801bfe0:	9307      	str	r3, [sp, #28]
 801bfe2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bfe6:	931a      	str	r3, [sp, #104]	; 0x68
 801bfe8:	4654      	mov	r4, sl
 801bfea:	2205      	movs	r2, #5
 801bfec:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bff0:	4851      	ldr	r0, [pc, #324]	; (801c138 <_svfiprintf_r+0x1ec>)
 801bff2:	f7e4 f90d 	bl	8000210 <memchr>
 801bff6:	9a04      	ldr	r2, [sp, #16]
 801bff8:	b9d8      	cbnz	r0, 801c032 <_svfiprintf_r+0xe6>
 801bffa:	06d0      	lsls	r0, r2, #27
 801bffc:	bf44      	itt	mi
 801bffe:	2320      	movmi	r3, #32
 801c000:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c004:	0711      	lsls	r1, r2, #28
 801c006:	bf44      	itt	mi
 801c008:	232b      	movmi	r3, #43	; 0x2b
 801c00a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c00e:	f89a 3000 	ldrb.w	r3, [sl]
 801c012:	2b2a      	cmp	r3, #42	; 0x2a
 801c014:	d015      	beq.n	801c042 <_svfiprintf_r+0xf6>
 801c016:	9a07      	ldr	r2, [sp, #28]
 801c018:	4654      	mov	r4, sl
 801c01a:	2000      	movs	r0, #0
 801c01c:	f04f 0c0a 	mov.w	ip, #10
 801c020:	4621      	mov	r1, r4
 801c022:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c026:	3b30      	subs	r3, #48	; 0x30
 801c028:	2b09      	cmp	r3, #9
 801c02a:	d94e      	bls.n	801c0ca <_svfiprintf_r+0x17e>
 801c02c:	b1b0      	cbz	r0, 801c05c <_svfiprintf_r+0x110>
 801c02e:	9207      	str	r2, [sp, #28]
 801c030:	e014      	b.n	801c05c <_svfiprintf_r+0x110>
 801c032:	eba0 0308 	sub.w	r3, r0, r8
 801c036:	fa09 f303 	lsl.w	r3, r9, r3
 801c03a:	4313      	orrs	r3, r2
 801c03c:	9304      	str	r3, [sp, #16]
 801c03e:	46a2      	mov	sl, r4
 801c040:	e7d2      	b.n	801bfe8 <_svfiprintf_r+0x9c>
 801c042:	9b03      	ldr	r3, [sp, #12]
 801c044:	1d19      	adds	r1, r3, #4
 801c046:	681b      	ldr	r3, [r3, #0]
 801c048:	9103      	str	r1, [sp, #12]
 801c04a:	2b00      	cmp	r3, #0
 801c04c:	bfbb      	ittet	lt
 801c04e:	425b      	neglt	r3, r3
 801c050:	f042 0202 	orrlt.w	r2, r2, #2
 801c054:	9307      	strge	r3, [sp, #28]
 801c056:	9307      	strlt	r3, [sp, #28]
 801c058:	bfb8      	it	lt
 801c05a:	9204      	strlt	r2, [sp, #16]
 801c05c:	7823      	ldrb	r3, [r4, #0]
 801c05e:	2b2e      	cmp	r3, #46	; 0x2e
 801c060:	d10c      	bne.n	801c07c <_svfiprintf_r+0x130>
 801c062:	7863      	ldrb	r3, [r4, #1]
 801c064:	2b2a      	cmp	r3, #42	; 0x2a
 801c066:	d135      	bne.n	801c0d4 <_svfiprintf_r+0x188>
 801c068:	9b03      	ldr	r3, [sp, #12]
 801c06a:	1d1a      	adds	r2, r3, #4
 801c06c:	681b      	ldr	r3, [r3, #0]
 801c06e:	9203      	str	r2, [sp, #12]
 801c070:	2b00      	cmp	r3, #0
 801c072:	bfb8      	it	lt
 801c074:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801c078:	3402      	adds	r4, #2
 801c07a:	9305      	str	r3, [sp, #20]
 801c07c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801c148 <_svfiprintf_r+0x1fc>
 801c080:	7821      	ldrb	r1, [r4, #0]
 801c082:	2203      	movs	r2, #3
 801c084:	4650      	mov	r0, sl
 801c086:	f7e4 f8c3 	bl	8000210 <memchr>
 801c08a:	b140      	cbz	r0, 801c09e <_svfiprintf_r+0x152>
 801c08c:	2340      	movs	r3, #64	; 0x40
 801c08e:	eba0 000a 	sub.w	r0, r0, sl
 801c092:	fa03 f000 	lsl.w	r0, r3, r0
 801c096:	9b04      	ldr	r3, [sp, #16]
 801c098:	4303      	orrs	r3, r0
 801c09a:	3401      	adds	r4, #1
 801c09c:	9304      	str	r3, [sp, #16]
 801c09e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c0a2:	4826      	ldr	r0, [pc, #152]	; (801c13c <_svfiprintf_r+0x1f0>)
 801c0a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c0a8:	2206      	movs	r2, #6
 801c0aa:	f7e4 f8b1 	bl	8000210 <memchr>
 801c0ae:	2800      	cmp	r0, #0
 801c0b0:	d038      	beq.n	801c124 <_svfiprintf_r+0x1d8>
 801c0b2:	4b23      	ldr	r3, [pc, #140]	; (801c140 <_svfiprintf_r+0x1f4>)
 801c0b4:	bb1b      	cbnz	r3, 801c0fe <_svfiprintf_r+0x1b2>
 801c0b6:	9b03      	ldr	r3, [sp, #12]
 801c0b8:	3307      	adds	r3, #7
 801c0ba:	f023 0307 	bic.w	r3, r3, #7
 801c0be:	3308      	adds	r3, #8
 801c0c0:	9303      	str	r3, [sp, #12]
 801c0c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c0c4:	4433      	add	r3, r6
 801c0c6:	9309      	str	r3, [sp, #36]	; 0x24
 801c0c8:	e767      	b.n	801bf9a <_svfiprintf_r+0x4e>
 801c0ca:	fb0c 3202 	mla	r2, ip, r2, r3
 801c0ce:	460c      	mov	r4, r1
 801c0d0:	2001      	movs	r0, #1
 801c0d2:	e7a5      	b.n	801c020 <_svfiprintf_r+0xd4>
 801c0d4:	2300      	movs	r3, #0
 801c0d6:	3401      	adds	r4, #1
 801c0d8:	9305      	str	r3, [sp, #20]
 801c0da:	4619      	mov	r1, r3
 801c0dc:	f04f 0c0a 	mov.w	ip, #10
 801c0e0:	4620      	mov	r0, r4
 801c0e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c0e6:	3a30      	subs	r2, #48	; 0x30
 801c0e8:	2a09      	cmp	r2, #9
 801c0ea:	d903      	bls.n	801c0f4 <_svfiprintf_r+0x1a8>
 801c0ec:	2b00      	cmp	r3, #0
 801c0ee:	d0c5      	beq.n	801c07c <_svfiprintf_r+0x130>
 801c0f0:	9105      	str	r1, [sp, #20]
 801c0f2:	e7c3      	b.n	801c07c <_svfiprintf_r+0x130>
 801c0f4:	fb0c 2101 	mla	r1, ip, r1, r2
 801c0f8:	4604      	mov	r4, r0
 801c0fa:	2301      	movs	r3, #1
 801c0fc:	e7f0      	b.n	801c0e0 <_svfiprintf_r+0x194>
 801c0fe:	ab03      	add	r3, sp, #12
 801c100:	9300      	str	r3, [sp, #0]
 801c102:	462a      	mov	r2, r5
 801c104:	4b0f      	ldr	r3, [pc, #60]	; (801c144 <_svfiprintf_r+0x1f8>)
 801c106:	a904      	add	r1, sp, #16
 801c108:	4638      	mov	r0, r7
 801c10a:	f7fd febf 	bl	8019e8c <_printf_float>
 801c10e:	1c42      	adds	r2, r0, #1
 801c110:	4606      	mov	r6, r0
 801c112:	d1d6      	bne.n	801c0c2 <_svfiprintf_r+0x176>
 801c114:	89ab      	ldrh	r3, [r5, #12]
 801c116:	065b      	lsls	r3, r3, #25
 801c118:	f53f af2c 	bmi.w	801bf74 <_svfiprintf_r+0x28>
 801c11c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c11e:	b01d      	add	sp, #116	; 0x74
 801c120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c124:	ab03      	add	r3, sp, #12
 801c126:	9300      	str	r3, [sp, #0]
 801c128:	462a      	mov	r2, r5
 801c12a:	4b06      	ldr	r3, [pc, #24]	; (801c144 <_svfiprintf_r+0x1f8>)
 801c12c:	a904      	add	r1, sp, #16
 801c12e:	4638      	mov	r0, r7
 801c130:	f7fe f950 	bl	801a3d4 <_printf_i>
 801c134:	e7eb      	b.n	801c10e <_svfiprintf_r+0x1c2>
 801c136:	bf00      	nop
 801c138:	0801d624 	.word	0x0801d624
 801c13c:	0801d62e 	.word	0x0801d62e
 801c140:	08019e8d 	.word	0x08019e8d
 801c144:	0801be95 	.word	0x0801be95
 801c148:	0801d62a 	.word	0x0801d62a

0801c14c <__sfputc_r>:
 801c14c:	6893      	ldr	r3, [r2, #8]
 801c14e:	3b01      	subs	r3, #1
 801c150:	2b00      	cmp	r3, #0
 801c152:	b410      	push	{r4}
 801c154:	6093      	str	r3, [r2, #8]
 801c156:	da08      	bge.n	801c16a <__sfputc_r+0x1e>
 801c158:	6994      	ldr	r4, [r2, #24]
 801c15a:	42a3      	cmp	r3, r4
 801c15c:	db01      	blt.n	801c162 <__sfputc_r+0x16>
 801c15e:	290a      	cmp	r1, #10
 801c160:	d103      	bne.n	801c16a <__sfputc_r+0x1e>
 801c162:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c166:	f000 b98f 	b.w	801c488 <__swbuf_r>
 801c16a:	6813      	ldr	r3, [r2, #0]
 801c16c:	1c58      	adds	r0, r3, #1
 801c16e:	6010      	str	r0, [r2, #0]
 801c170:	7019      	strb	r1, [r3, #0]
 801c172:	4608      	mov	r0, r1
 801c174:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c178:	4770      	bx	lr

0801c17a <__sfputs_r>:
 801c17a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c17c:	4606      	mov	r6, r0
 801c17e:	460f      	mov	r7, r1
 801c180:	4614      	mov	r4, r2
 801c182:	18d5      	adds	r5, r2, r3
 801c184:	42ac      	cmp	r4, r5
 801c186:	d101      	bne.n	801c18c <__sfputs_r+0x12>
 801c188:	2000      	movs	r0, #0
 801c18a:	e007      	b.n	801c19c <__sfputs_r+0x22>
 801c18c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c190:	463a      	mov	r2, r7
 801c192:	4630      	mov	r0, r6
 801c194:	f7ff ffda 	bl	801c14c <__sfputc_r>
 801c198:	1c43      	adds	r3, r0, #1
 801c19a:	d1f3      	bne.n	801c184 <__sfputs_r+0xa>
 801c19c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c1a0 <_vfiprintf_r>:
 801c1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1a4:	460d      	mov	r5, r1
 801c1a6:	b09d      	sub	sp, #116	; 0x74
 801c1a8:	4614      	mov	r4, r2
 801c1aa:	4698      	mov	r8, r3
 801c1ac:	4606      	mov	r6, r0
 801c1ae:	b118      	cbz	r0, 801c1b8 <_vfiprintf_r+0x18>
 801c1b0:	6983      	ldr	r3, [r0, #24]
 801c1b2:	b90b      	cbnz	r3, 801c1b8 <_vfiprintf_r+0x18>
 801c1b4:	f7ff f9fe 	bl	801b5b4 <__sinit>
 801c1b8:	4b89      	ldr	r3, [pc, #548]	; (801c3e0 <_vfiprintf_r+0x240>)
 801c1ba:	429d      	cmp	r5, r3
 801c1bc:	d11b      	bne.n	801c1f6 <_vfiprintf_r+0x56>
 801c1be:	6875      	ldr	r5, [r6, #4]
 801c1c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c1c2:	07d9      	lsls	r1, r3, #31
 801c1c4:	d405      	bmi.n	801c1d2 <_vfiprintf_r+0x32>
 801c1c6:	89ab      	ldrh	r3, [r5, #12]
 801c1c8:	059a      	lsls	r2, r3, #22
 801c1ca:	d402      	bmi.n	801c1d2 <_vfiprintf_r+0x32>
 801c1cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c1ce:	f7ff faa6 	bl	801b71e <__retarget_lock_acquire_recursive>
 801c1d2:	89ab      	ldrh	r3, [r5, #12]
 801c1d4:	071b      	lsls	r3, r3, #28
 801c1d6:	d501      	bpl.n	801c1dc <_vfiprintf_r+0x3c>
 801c1d8:	692b      	ldr	r3, [r5, #16]
 801c1da:	b9eb      	cbnz	r3, 801c218 <_vfiprintf_r+0x78>
 801c1dc:	4629      	mov	r1, r5
 801c1de:	4630      	mov	r0, r6
 801c1e0:	f000 f9c4 	bl	801c56c <__swsetup_r>
 801c1e4:	b1c0      	cbz	r0, 801c218 <_vfiprintf_r+0x78>
 801c1e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c1e8:	07dc      	lsls	r4, r3, #31
 801c1ea:	d50e      	bpl.n	801c20a <_vfiprintf_r+0x6a>
 801c1ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c1f0:	b01d      	add	sp, #116	; 0x74
 801c1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1f6:	4b7b      	ldr	r3, [pc, #492]	; (801c3e4 <_vfiprintf_r+0x244>)
 801c1f8:	429d      	cmp	r5, r3
 801c1fa:	d101      	bne.n	801c200 <_vfiprintf_r+0x60>
 801c1fc:	68b5      	ldr	r5, [r6, #8]
 801c1fe:	e7df      	b.n	801c1c0 <_vfiprintf_r+0x20>
 801c200:	4b79      	ldr	r3, [pc, #484]	; (801c3e8 <_vfiprintf_r+0x248>)
 801c202:	429d      	cmp	r5, r3
 801c204:	bf08      	it	eq
 801c206:	68f5      	ldreq	r5, [r6, #12]
 801c208:	e7da      	b.n	801c1c0 <_vfiprintf_r+0x20>
 801c20a:	89ab      	ldrh	r3, [r5, #12]
 801c20c:	0598      	lsls	r0, r3, #22
 801c20e:	d4ed      	bmi.n	801c1ec <_vfiprintf_r+0x4c>
 801c210:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c212:	f7ff fa85 	bl	801b720 <__retarget_lock_release_recursive>
 801c216:	e7e9      	b.n	801c1ec <_vfiprintf_r+0x4c>
 801c218:	2300      	movs	r3, #0
 801c21a:	9309      	str	r3, [sp, #36]	; 0x24
 801c21c:	2320      	movs	r3, #32
 801c21e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c222:	f8cd 800c 	str.w	r8, [sp, #12]
 801c226:	2330      	movs	r3, #48	; 0x30
 801c228:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801c3ec <_vfiprintf_r+0x24c>
 801c22c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c230:	f04f 0901 	mov.w	r9, #1
 801c234:	4623      	mov	r3, r4
 801c236:	469a      	mov	sl, r3
 801c238:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c23c:	b10a      	cbz	r2, 801c242 <_vfiprintf_r+0xa2>
 801c23e:	2a25      	cmp	r2, #37	; 0x25
 801c240:	d1f9      	bne.n	801c236 <_vfiprintf_r+0x96>
 801c242:	ebba 0b04 	subs.w	fp, sl, r4
 801c246:	d00b      	beq.n	801c260 <_vfiprintf_r+0xc0>
 801c248:	465b      	mov	r3, fp
 801c24a:	4622      	mov	r2, r4
 801c24c:	4629      	mov	r1, r5
 801c24e:	4630      	mov	r0, r6
 801c250:	f7ff ff93 	bl	801c17a <__sfputs_r>
 801c254:	3001      	adds	r0, #1
 801c256:	f000 80aa 	beq.w	801c3ae <_vfiprintf_r+0x20e>
 801c25a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c25c:	445a      	add	r2, fp
 801c25e:	9209      	str	r2, [sp, #36]	; 0x24
 801c260:	f89a 3000 	ldrb.w	r3, [sl]
 801c264:	2b00      	cmp	r3, #0
 801c266:	f000 80a2 	beq.w	801c3ae <_vfiprintf_r+0x20e>
 801c26a:	2300      	movs	r3, #0
 801c26c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c270:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c274:	f10a 0a01 	add.w	sl, sl, #1
 801c278:	9304      	str	r3, [sp, #16]
 801c27a:	9307      	str	r3, [sp, #28]
 801c27c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c280:	931a      	str	r3, [sp, #104]	; 0x68
 801c282:	4654      	mov	r4, sl
 801c284:	2205      	movs	r2, #5
 801c286:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c28a:	4858      	ldr	r0, [pc, #352]	; (801c3ec <_vfiprintf_r+0x24c>)
 801c28c:	f7e3 ffc0 	bl	8000210 <memchr>
 801c290:	9a04      	ldr	r2, [sp, #16]
 801c292:	b9d8      	cbnz	r0, 801c2cc <_vfiprintf_r+0x12c>
 801c294:	06d1      	lsls	r1, r2, #27
 801c296:	bf44      	itt	mi
 801c298:	2320      	movmi	r3, #32
 801c29a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c29e:	0713      	lsls	r3, r2, #28
 801c2a0:	bf44      	itt	mi
 801c2a2:	232b      	movmi	r3, #43	; 0x2b
 801c2a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c2a8:	f89a 3000 	ldrb.w	r3, [sl]
 801c2ac:	2b2a      	cmp	r3, #42	; 0x2a
 801c2ae:	d015      	beq.n	801c2dc <_vfiprintf_r+0x13c>
 801c2b0:	9a07      	ldr	r2, [sp, #28]
 801c2b2:	4654      	mov	r4, sl
 801c2b4:	2000      	movs	r0, #0
 801c2b6:	f04f 0c0a 	mov.w	ip, #10
 801c2ba:	4621      	mov	r1, r4
 801c2bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c2c0:	3b30      	subs	r3, #48	; 0x30
 801c2c2:	2b09      	cmp	r3, #9
 801c2c4:	d94e      	bls.n	801c364 <_vfiprintf_r+0x1c4>
 801c2c6:	b1b0      	cbz	r0, 801c2f6 <_vfiprintf_r+0x156>
 801c2c8:	9207      	str	r2, [sp, #28]
 801c2ca:	e014      	b.n	801c2f6 <_vfiprintf_r+0x156>
 801c2cc:	eba0 0308 	sub.w	r3, r0, r8
 801c2d0:	fa09 f303 	lsl.w	r3, r9, r3
 801c2d4:	4313      	orrs	r3, r2
 801c2d6:	9304      	str	r3, [sp, #16]
 801c2d8:	46a2      	mov	sl, r4
 801c2da:	e7d2      	b.n	801c282 <_vfiprintf_r+0xe2>
 801c2dc:	9b03      	ldr	r3, [sp, #12]
 801c2de:	1d19      	adds	r1, r3, #4
 801c2e0:	681b      	ldr	r3, [r3, #0]
 801c2e2:	9103      	str	r1, [sp, #12]
 801c2e4:	2b00      	cmp	r3, #0
 801c2e6:	bfbb      	ittet	lt
 801c2e8:	425b      	neglt	r3, r3
 801c2ea:	f042 0202 	orrlt.w	r2, r2, #2
 801c2ee:	9307      	strge	r3, [sp, #28]
 801c2f0:	9307      	strlt	r3, [sp, #28]
 801c2f2:	bfb8      	it	lt
 801c2f4:	9204      	strlt	r2, [sp, #16]
 801c2f6:	7823      	ldrb	r3, [r4, #0]
 801c2f8:	2b2e      	cmp	r3, #46	; 0x2e
 801c2fa:	d10c      	bne.n	801c316 <_vfiprintf_r+0x176>
 801c2fc:	7863      	ldrb	r3, [r4, #1]
 801c2fe:	2b2a      	cmp	r3, #42	; 0x2a
 801c300:	d135      	bne.n	801c36e <_vfiprintf_r+0x1ce>
 801c302:	9b03      	ldr	r3, [sp, #12]
 801c304:	1d1a      	adds	r2, r3, #4
 801c306:	681b      	ldr	r3, [r3, #0]
 801c308:	9203      	str	r2, [sp, #12]
 801c30a:	2b00      	cmp	r3, #0
 801c30c:	bfb8      	it	lt
 801c30e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801c312:	3402      	adds	r4, #2
 801c314:	9305      	str	r3, [sp, #20]
 801c316:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c3fc <_vfiprintf_r+0x25c>
 801c31a:	7821      	ldrb	r1, [r4, #0]
 801c31c:	2203      	movs	r2, #3
 801c31e:	4650      	mov	r0, sl
 801c320:	f7e3 ff76 	bl	8000210 <memchr>
 801c324:	b140      	cbz	r0, 801c338 <_vfiprintf_r+0x198>
 801c326:	2340      	movs	r3, #64	; 0x40
 801c328:	eba0 000a 	sub.w	r0, r0, sl
 801c32c:	fa03 f000 	lsl.w	r0, r3, r0
 801c330:	9b04      	ldr	r3, [sp, #16]
 801c332:	4303      	orrs	r3, r0
 801c334:	3401      	adds	r4, #1
 801c336:	9304      	str	r3, [sp, #16]
 801c338:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c33c:	482c      	ldr	r0, [pc, #176]	; (801c3f0 <_vfiprintf_r+0x250>)
 801c33e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c342:	2206      	movs	r2, #6
 801c344:	f7e3 ff64 	bl	8000210 <memchr>
 801c348:	2800      	cmp	r0, #0
 801c34a:	d03f      	beq.n	801c3cc <_vfiprintf_r+0x22c>
 801c34c:	4b29      	ldr	r3, [pc, #164]	; (801c3f4 <_vfiprintf_r+0x254>)
 801c34e:	bb1b      	cbnz	r3, 801c398 <_vfiprintf_r+0x1f8>
 801c350:	9b03      	ldr	r3, [sp, #12]
 801c352:	3307      	adds	r3, #7
 801c354:	f023 0307 	bic.w	r3, r3, #7
 801c358:	3308      	adds	r3, #8
 801c35a:	9303      	str	r3, [sp, #12]
 801c35c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c35e:	443b      	add	r3, r7
 801c360:	9309      	str	r3, [sp, #36]	; 0x24
 801c362:	e767      	b.n	801c234 <_vfiprintf_r+0x94>
 801c364:	fb0c 3202 	mla	r2, ip, r2, r3
 801c368:	460c      	mov	r4, r1
 801c36a:	2001      	movs	r0, #1
 801c36c:	e7a5      	b.n	801c2ba <_vfiprintf_r+0x11a>
 801c36e:	2300      	movs	r3, #0
 801c370:	3401      	adds	r4, #1
 801c372:	9305      	str	r3, [sp, #20]
 801c374:	4619      	mov	r1, r3
 801c376:	f04f 0c0a 	mov.w	ip, #10
 801c37a:	4620      	mov	r0, r4
 801c37c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c380:	3a30      	subs	r2, #48	; 0x30
 801c382:	2a09      	cmp	r2, #9
 801c384:	d903      	bls.n	801c38e <_vfiprintf_r+0x1ee>
 801c386:	2b00      	cmp	r3, #0
 801c388:	d0c5      	beq.n	801c316 <_vfiprintf_r+0x176>
 801c38a:	9105      	str	r1, [sp, #20]
 801c38c:	e7c3      	b.n	801c316 <_vfiprintf_r+0x176>
 801c38e:	fb0c 2101 	mla	r1, ip, r1, r2
 801c392:	4604      	mov	r4, r0
 801c394:	2301      	movs	r3, #1
 801c396:	e7f0      	b.n	801c37a <_vfiprintf_r+0x1da>
 801c398:	ab03      	add	r3, sp, #12
 801c39a:	9300      	str	r3, [sp, #0]
 801c39c:	462a      	mov	r2, r5
 801c39e:	4b16      	ldr	r3, [pc, #88]	; (801c3f8 <_vfiprintf_r+0x258>)
 801c3a0:	a904      	add	r1, sp, #16
 801c3a2:	4630      	mov	r0, r6
 801c3a4:	f7fd fd72 	bl	8019e8c <_printf_float>
 801c3a8:	4607      	mov	r7, r0
 801c3aa:	1c78      	adds	r0, r7, #1
 801c3ac:	d1d6      	bne.n	801c35c <_vfiprintf_r+0x1bc>
 801c3ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c3b0:	07d9      	lsls	r1, r3, #31
 801c3b2:	d405      	bmi.n	801c3c0 <_vfiprintf_r+0x220>
 801c3b4:	89ab      	ldrh	r3, [r5, #12]
 801c3b6:	059a      	lsls	r2, r3, #22
 801c3b8:	d402      	bmi.n	801c3c0 <_vfiprintf_r+0x220>
 801c3ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c3bc:	f7ff f9b0 	bl	801b720 <__retarget_lock_release_recursive>
 801c3c0:	89ab      	ldrh	r3, [r5, #12]
 801c3c2:	065b      	lsls	r3, r3, #25
 801c3c4:	f53f af12 	bmi.w	801c1ec <_vfiprintf_r+0x4c>
 801c3c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c3ca:	e711      	b.n	801c1f0 <_vfiprintf_r+0x50>
 801c3cc:	ab03      	add	r3, sp, #12
 801c3ce:	9300      	str	r3, [sp, #0]
 801c3d0:	462a      	mov	r2, r5
 801c3d2:	4b09      	ldr	r3, [pc, #36]	; (801c3f8 <_vfiprintf_r+0x258>)
 801c3d4:	a904      	add	r1, sp, #16
 801c3d6:	4630      	mov	r0, r6
 801c3d8:	f7fd fffc 	bl	801a3d4 <_printf_i>
 801c3dc:	e7e4      	b.n	801c3a8 <_vfiprintf_r+0x208>
 801c3de:	bf00      	nop
 801c3e0:	0801d47c 	.word	0x0801d47c
 801c3e4:	0801d49c 	.word	0x0801d49c
 801c3e8:	0801d45c 	.word	0x0801d45c
 801c3ec:	0801d624 	.word	0x0801d624
 801c3f0:	0801d62e 	.word	0x0801d62e
 801c3f4:	08019e8d 	.word	0x08019e8d
 801c3f8:	0801c17b 	.word	0x0801c17b
 801c3fc:	0801d62a 	.word	0x0801d62a

0801c400 <__sread>:
 801c400:	b510      	push	{r4, lr}
 801c402:	460c      	mov	r4, r1
 801c404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c408:	f000 faba 	bl	801c980 <_read_r>
 801c40c:	2800      	cmp	r0, #0
 801c40e:	bfab      	itete	ge
 801c410:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c412:	89a3      	ldrhlt	r3, [r4, #12]
 801c414:	181b      	addge	r3, r3, r0
 801c416:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c41a:	bfac      	ite	ge
 801c41c:	6563      	strge	r3, [r4, #84]	; 0x54
 801c41e:	81a3      	strhlt	r3, [r4, #12]
 801c420:	bd10      	pop	{r4, pc}

0801c422 <__swrite>:
 801c422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c426:	461f      	mov	r7, r3
 801c428:	898b      	ldrh	r3, [r1, #12]
 801c42a:	05db      	lsls	r3, r3, #23
 801c42c:	4605      	mov	r5, r0
 801c42e:	460c      	mov	r4, r1
 801c430:	4616      	mov	r6, r2
 801c432:	d505      	bpl.n	801c440 <__swrite+0x1e>
 801c434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c438:	2302      	movs	r3, #2
 801c43a:	2200      	movs	r2, #0
 801c43c:	f000 f9de 	bl	801c7fc <_lseek_r>
 801c440:	89a3      	ldrh	r3, [r4, #12]
 801c442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c446:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c44a:	81a3      	strh	r3, [r4, #12]
 801c44c:	4632      	mov	r2, r6
 801c44e:	463b      	mov	r3, r7
 801c450:	4628      	mov	r0, r5
 801c452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c456:	f000 b877 	b.w	801c548 <_write_r>

0801c45a <__sseek>:
 801c45a:	b510      	push	{r4, lr}
 801c45c:	460c      	mov	r4, r1
 801c45e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c462:	f000 f9cb 	bl	801c7fc <_lseek_r>
 801c466:	1c43      	adds	r3, r0, #1
 801c468:	89a3      	ldrh	r3, [r4, #12]
 801c46a:	bf15      	itete	ne
 801c46c:	6560      	strne	r0, [r4, #84]	; 0x54
 801c46e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c472:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c476:	81a3      	strheq	r3, [r4, #12]
 801c478:	bf18      	it	ne
 801c47a:	81a3      	strhne	r3, [r4, #12]
 801c47c:	bd10      	pop	{r4, pc}

0801c47e <__sclose>:
 801c47e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c482:	f000 b8e9 	b.w	801c658 <_close_r>
	...

0801c488 <__swbuf_r>:
 801c488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c48a:	460e      	mov	r6, r1
 801c48c:	4614      	mov	r4, r2
 801c48e:	4605      	mov	r5, r0
 801c490:	b118      	cbz	r0, 801c49a <__swbuf_r+0x12>
 801c492:	6983      	ldr	r3, [r0, #24]
 801c494:	b90b      	cbnz	r3, 801c49a <__swbuf_r+0x12>
 801c496:	f7ff f88d 	bl	801b5b4 <__sinit>
 801c49a:	4b21      	ldr	r3, [pc, #132]	; (801c520 <__swbuf_r+0x98>)
 801c49c:	429c      	cmp	r4, r3
 801c49e:	d12b      	bne.n	801c4f8 <__swbuf_r+0x70>
 801c4a0:	686c      	ldr	r4, [r5, #4]
 801c4a2:	69a3      	ldr	r3, [r4, #24]
 801c4a4:	60a3      	str	r3, [r4, #8]
 801c4a6:	89a3      	ldrh	r3, [r4, #12]
 801c4a8:	071a      	lsls	r2, r3, #28
 801c4aa:	d52f      	bpl.n	801c50c <__swbuf_r+0x84>
 801c4ac:	6923      	ldr	r3, [r4, #16]
 801c4ae:	b36b      	cbz	r3, 801c50c <__swbuf_r+0x84>
 801c4b0:	6923      	ldr	r3, [r4, #16]
 801c4b2:	6820      	ldr	r0, [r4, #0]
 801c4b4:	1ac0      	subs	r0, r0, r3
 801c4b6:	6963      	ldr	r3, [r4, #20]
 801c4b8:	b2f6      	uxtb	r6, r6
 801c4ba:	4283      	cmp	r3, r0
 801c4bc:	4637      	mov	r7, r6
 801c4be:	dc04      	bgt.n	801c4ca <__swbuf_r+0x42>
 801c4c0:	4621      	mov	r1, r4
 801c4c2:	4628      	mov	r0, r5
 801c4c4:	f000 f95e 	bl	801c784 <_fflush_r>
 801c4c8:	bb30      	cbnz	r0, 801c518 <__swbuf_r+0x90>
 801c4ca:	68a3      	ldr	r3, [r4, #8]
 801c4cc:	3b01      	subs	r3, #1
 801c4ce:	60a3      	str	r3, [r4, #8]
 801c4d0:	6823      	ldr	r3, [r4, #0]
 801c4d2:	1c5a      	adds	r2, r3, #1
 801c4d4:	6022      	str	r2, [r4, #0]
 801c4d6:	701e      	strb	r6, [r3, #0]
 801c4d8:	6963      	ldr	r3, [r4, #20]
 801c4da:	3001      	adds	r0, #1
 801c4dc:	4283      	cmp	r3, r0
 801c4de:	d004      	beq.n	801c4ea <__swbuf_r+0x62>
 801c4e0:	89a3      	ldrh	r3, [r4, #12]
 801c4e2:	07db      	lsls	r3, r3, #31
 801c4e4:	d506      	bpl.n	801c4f4 <__swbuf_r+0x6c>
 801c4e6:	2e0a      	cmp	r6, #10
 801c4e8:	d104      	bne.n	801c4f4 <__swbuf_r+0x6c>
 801c4ea:	4621      	mov	r1, r4
 801c4ec:	4628      	mov	r0, r5
 801c4ee:	f000 f949 	bl	801c784 <_fflush_r>
 801c4f2:	b988      	cbnz	r0, 801c518 <__swbuf_r+0x90>
 801c4f4:	4638      	mov	r0, r7
 801c4f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c4f8:	4b0a      	ldr	r3, [pc, #40]	; (801c524 <__swbuf_r+0x9c>)
 801c4fa:	429c      	cmp	r4, r3
 801c4fc:	d101      	bne.n	801c502 <__swbuf_r+0x7a>
 801c4fe:	68ac      	ldr	r4, [r5, #8]
 801c500:	e7cf      	b.n	801c4a2 <__swbuf_r+0x1a>
 801c502:	4b09      	ldr	r3, [pc, #36]	; (801c528 <__swbuf_r+0xa0>)
 801c504:	429c      	cmp	r4, r3
 801c506:	bf08      	it	eq
 801c508:	68ec      	ldreq	r4, [r5, #12]
 801c50a:	e7ca      	b.n	801c4a2 <__swbuf_r+0x1a>
 801c50c:	4621      	mov	r1, r4
 801c50e:	4628      	mov	r0, r5
 801c510:	f000 f82c 	bl	801c56c <__swsetup_r>
 801c514:	2800      	cmp	r0, #0
 801c516:	d0cb      	beq.n	801c4b0 <__swbuf_r+0x28>
 801c518:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801c51c:	e7ea      	b.n	801c4f4 <__swbuf_r+0x6c>
 801c51e:	bf00      	nop
 801c520:	0801d47c 	.word	0x0801d47c
 801c524:	0801d49c 	.word	0x0801d49c
 801c528:	0801d45c 	.word	0x0801d45c

0801c52c <__ascii_wctomb>:
 801c52c:	b149      	cbz	r1, 801c542 <__ascii_wctomb+0x16>
 801c52e:	2aff      	cmp	r2, #255	; 0xff
 801c530:	bf85      	ittet	hi
 801c532:	238a      	movhi	r3, #138	; 0x8a
 801c534:	6003      	strhi	r3, [r0, #0]
 801c536:	700a      	strbls	r2, [r1, #0]
 801c538:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801c53c:	bf98      	it	ls
 801c53e:	2001      	movls	r0, #1
 801c540:	4770      	bx	lr
 801c542:	4608      	mov	r0, r1
 801c544:	4770      	bx	lr
	...

0801c548 <_write_r>:
 801c548:	b538      	push	{r3, r4, r5, lr}
 801c54a:	4d07      	ldr	r5, [pc, #28]	; (801c568 <_write_r+0x20>)
 801c54c:	4604      	mov	r4, r0
 801c54e:	4608      	mov	r0, r1
 801c550:	4611      	mov	r1, r2
 801c552:	2200      	movs	r2, #0
 801c554:	602a      	str	r2, [r5, #0]
 801c556:	461a      	mov	r2, r3
 801c558:	f000 fad8 	bl	801cb0c <_write>
 801c55c:	1c43      	adds	r3, r0, #1
 801c55e:	d102      	bne.n	801c566 <_write_r+0x1e>
 801c560:	682b      	ldr	r3, [r5, #0]
 801c562:	b103      	cbz	r3, 801c566 <_write_r+0x1e>
 801c564:	6023      	str	r3, [r4, #0]
 801c566:	bd38      	pop	{r3, r4, r5, pc}
 801c568:	20002fc8 	.word	0x20002fc8

0801c56c <__swsetup_r>:
 801c56c:	4b32      	ldr	r3, [pc, #200]	; (801c638 <__swsetup_r+0xcc>)
 801c56e:	b570      	push	{r4, r5, r6, lr}
 801c570:	681d      	ldr	r5, [r3, #0]
 801c572:	4606      	mov	r6, r0
 801c574:	460c      	mov	r4, r1
 801c576:	b125      	cbz	r5, 801c582 <__swsetup_r+0x16>
 801c578:	69ab      	ldr	r3, [r5, #24]
 801c57a:	b913      	cbnz	r3, 801c582 <__swsetup_r+0x16>
 801c57c:	4628      	mov	r0, r5
 801c57e:	f7ff f819 	bl	801b5b4 <__sinit>
 801c582:	4b2e      	ldr	r3, [pc, #184]	; (801c63c <__swsetup_r+0xd0>)
 801c584:	429c      	cmp	r4, r3
 801c586:	d10f      	bne.n	801c5a8 <__swsetup_r+0x3c>
 801c588:	686c      	ldr	r4, [r5, #4]
 801c58a:	89a3      	ldrh	r3, [r4, #12]
 801c58c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c590:	0719      	lsls	r1, r3, #28
 801c592:	d42c      	bmi.n	801c5ee <__swsetup_r+0x82>
 801c594:	06dd      	lsls	r5, r3, #27
 801c596:	d411      	bmi.n	801c5bc <__swsetup_r+0x50>
 801c598:	2309      	movs	r3, #9
 801c59a:	6033      	str	r3, [r6, #0]
 801c59c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c5a0:	81a3      	strh	r3, [r4, #12]
 801c5a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c5a6:	e03e      	b.n	801c626 <__swsetup_r+0xba>
 801c5a8:	4b25      	ldr	r3, [pc, #148]	; (801c640 <__swsetup_r+0xd4>)
 801c5aa:	429c      	cmp	r4, r3
 801c5ac:	d101      	bne.n	801c5b2 <__swsetup_r+0x46>
 801c5ae:	68ac      	ldr	r4, [r5, #8]
 801c5b0:	e7eb      	b.n	801c58a <__swsetup_r+0x1e>
 801c5b2:	4b24      	ldr	r3, [pc, #144]	; (801c644 <__swsetup_r+0xd8>)
 801c5b4:	429c      	cmp	r4, r3
 801c5b6:	bf08      	it	eq
 801c5b8:	68ec      	ldreq	r4, [r5, #12]
 801c5ba:	e7e6      	b.n	801c58a <__swsetup_r+0x1e>
 801c5bc:	0758      	lsls	r0, r3, #29
 801c5be:	d512      	bpl.n	801c5e6 <__swsetup_r+0x7a>
 801c5c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c5c2:	b141      	cbz	r1, 801c5d6 <__swsetup_r+0x6a>
 801c5c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c5c8:	4299      	cmp	r1, r3
 801c5ca:	d002      	beq.n	801c5d2 <__swsetup_r+0x66>
 801c5cc:	4630      	mov	r0, r6
 801c5ce:	f7fd fadd 	bl	8019b8c <_free_r>
 801c5d2:	2300      	movs	r3, #0
 801c5d4:	6363      	str	r3, [r4, #52]	; 0x34
 801c5d6:	89a3      	ldrh	r3, [r4, #12]
 801c5d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c5dc:	81a3      	strh	r3, [r4, #12]
 801c5de:	2300      	movs	r3, #0
 801c5e0:	6063      	str	r3, [r4, #4]
 801c5e2:	6923      	ldr	r3, [r4, #16]
 801c5e4:	6023      	str	r3, [r4, #0]
 801c5e6:	89a3      	ldrh	r3, [r4, #12]
 801c5e8:	f043 0308 	orr.w	r3, r3, #8
 801c5ec:	81a3      	strh	r3, [r4, #12]
 801c5ee:	6923      	ldr	r3, [r4, #16]
 801c5f0:	b94b      	cbnz	r3, 801c606 <__swsetup_r+0x9a>
 801c5f2:	89a3      	ldrh	r3, [r4, #12]
 801c5f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c5f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c5fc:	d003      	beq.n	801c606 <__swsetup_r+0x9a>
 801c5fe:	4621      	mov	r1, r4
 801c600:	4630      	mov	r0, r6
 801c602:	f000 f933 	bl	801c86c <__smakebuf_r>
 801c606:	89a0      	ldrh	r0, [r4, #12]
 801c608:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c60c:	f010 0301 	ands.w	r3, r0, #1
 801c610:	d00a      	beq.n	801c628 <__swsetup_r+0xbc>
 801c612:	2300      	movs	r3, #0
 801c614:	60a3      	str	r3, [r4, #8]
 801c616:	6963      	ldr	r3, [r4, #20]
 801c618:	425b      	negs	r3, r3
 801c61a:	61a3      	str	r3, [r4, #24]
 801c61c:	6923      	ldr	r3, [r4, #16]
 801c61e:	b943      	cbnz	r3, 801c632 <__swsetup_r+0xc6>
 801c620:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c624:	d1ba      	bne.n	801c59c <__swsetup_r+0x30>
 801c626:	bd70      	pop	{r4, r5, r6, pc}
 801c628:	0781      	lsls	r1, r0, #30
 801c62a:	bf58      	it	pl
 801c62c:	6963      	ldrpl	r3, [r4, #20]
 801c62e:	60a3      	str	r3, [r4, #8]
 801c630:	e7f4      	b.n	801c61c <__swsetup_r+0xb0>
 801c632:	2000      	movs	r0, #0
 801c634:	e7f7      	b.n	801c626 <__swsetup_r+0xba>
 801c636:	bf00      	nop
 801c638:	20000100 	.word	0x20000100
 801c63c:	0801d47c 	.word	0x0801d47c
 801c640:	0801d49c 	.word	0x0801d49c
 801c644:	0801d45c 	.word	0x0801d45c

0801c648 <abort>:
 801c648:	b508      	push	{r3, lr}
 801c64a:	2006      	movs	r0, #6
 801c64c:	f000 f9d2 	bl	801c9f4 <raise>
 801c650:	2001      	movs	r0, #1
 801c652:	f000 fa63 	bl	801cb1c <_exit>
	...

0801c658 <_close_r>:
 801c658:	b538      	push	{r3, r4, r5, lr}
 801c65a:	4d06      	ldr	r5, [pc, #24]	; (801c674 <_close_r+0x1c>)
 801c65c:	2300      	movs	r3, #0
 801c65e:	4604      	mov	r4, r0
 801c660:	4608      	mov	r0, r1
 801c662:	602b      	str	r3, [r5, #0]
 801c664:	f000 fa0c 	bl	801ca80 <_close>
 801c668:	1c43      	adds	r3, r0, #1
 801c66a:	d102      	bne.n	801c672 <_close_r+0x1a>
 801c66c:	682b      	ldr	r3, [r5, #0]
 801c66e:	b103      	cbz	r3, 801c672 <_close_r+0x1a>
 801c670:	6023      	str	r3, [r4, #0]
 801c672:	bd38      	pop	{r3, r4, r5, pc}
 801c674:	20002fc8 	.word	0x20002fc8

0801c678 <__sflush_r>:
 801c678:	898a      	ldrh	r2, [r1, #12]
 801c67a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c67e:	4605      	mov	r5, r0
 801c680:	0710      	lsls	r0, r2, #28
 801c682:	460c      	mov	r4, r1
 801c684:	d458      	bmi.n	801c738 <__sflush_r+0xc0>
 801c686:	684b      	ldr	r3, [r1, #4]
 801c688:	2b00      	cmp	r3, #0
 801c68a:	dc05      	bgt.n	801c698 <__sflush_r+0x20>
 801c68c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c68e:	2b00      	cmp	r3, #0
 801c690:	dc02      	bgt.n	801c698 <__sflush_r+0x20>
 801c692:	2000      	movs	r0, #0
 801c694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c698:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c69a:	2e00      	cmp	r6, #0
 801c69c:	d0f9      	beq.n	801c692 <__sflush_r+0x1a>
 801c69e:	2300      	movs	r3, #0
 801c6a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c6a4:	682f      	ldr	r7, [r5, #0]
 801c6a6:	602b      	str	r3, [r5, #0]
 801c6a8:	d032      	beq.n	801c710 <__sflush_r+0x98>
 801c6aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c6ac:	89a3      	ldrh	r3, [r4, #12]
 801c6ae:	075a      	lsls	r2, r3, #29
 801c6b0:	d505      	bpl.n	801c6be <__sflush_r+0x46>
 801c6b2:	6863      	ldr	r3, [r4, #4]
 801c6b4:	1ac0      	subs	r0, r0, r3
 801c6b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c6b8:	b10b      	cbz	r3, 801c6be <__sflush_r+0x46>
 801c6ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c6bc:	1ac0      	subs	r0, r0, r3
 801c6be:	2300      	movs	r3, #0
 801c6c0:	4602      	mov	r2, r0
 801c6c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c6c4:	6a21      	ldr	r1, [r4, #32]
 801c6c6:	4628      	mov	r0, r5
 801c6c8:	47b0      	blx	r6
 801c6ca:	1c43      	adds	r3, r0, #1
 801c6cc:	89a3      	ldrh	r3, [r4, #12]
 801c6ce:	d106      	bne.n	801c6de <__sflush_r+0x66>
 801c6d0:	6829      	ldr	r1, [r5, #0]
 801c6d2:	291d      	cmp	r1, #29
 801c6d4:	d82c      	bhi.n	801c730 <__sflush_r+0xb8>
 801c6d6:	4a2a      	ldr	r2, [pc, #168]	; (801c780 <__sflush_r+0x108>)
 801c6d8:	40ca      	lsrs	r2, r1
 801c6da:	07d6      	lsls	r6, r2, #31
 801c6dc:	d528      	bpl.n	801c730 <__sflush_r+0xb8>
 801c6de:	2200      	movs	r2, #0
 801c6e0:	6062      	str	r2, [r4, #4]
 801c6e2:	04d9      	lsls	r1, r3, #19
 801c6e4:	6922      	ldr	r2, [r4, #16]
 801c6e6:	6022      	str	r2, [r4, #0]
 801c6e8:	d504      	bpl.n	801c6f4 <__sflush_r+0x7c>
 801c6ea:	1c42      	adds	r2, r0, #1
 801c6ec:	d101      	bne.n	801c6f2 <__sflush_r+0x7a>
 801c6ee:	682b      	ldr	r3, [r5, #0]
 801c6f0:	b903      	cbnz	r3, 801c6f4 <__sflush_r+0x7c>
 801c6f2:	6560      	str	r0, [r4, #84]	; 0x54
 801c6f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c6f6:	602f      	str	r7, [r5, #0]
 801c6f8:	2900      	cmp	r1, #0
 801c6fa:	d0ca      	beq.n	801c692 <__sflush_r+0x1a>
 801c6fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c700:	4299      	cmp	r1, r3
 801c702:	d002      	beq.n	801c70a <__sflush_r+0x92>
 801c704:	4628      	mov	r0, r5
 801c706:	f7fd fa41 	bl	8019b8c <_free_r>
 801c70a:	2000      	movs	r0, #0
 801c70c:	6360      	str	r0, [r4, #52]	; 0x34
 801c70e:	e7c1      	b.n	801c694 <__sflush_r+0x1c>
 801c710:	6a21      	ldr	r1, [r4, #32]
 801c712:	2301      	movs	r3, #1
 801c714:	4628      	mov	r0, r5
 801c716:	47b0      	blx	r6
 801c718:	1c41      	adds	r1, r0, #1
 801c71a:	d1c7      	bne.n	801c6ac <__sflush_r+0x34>
 801c71c:	682b      	ldr	r3, [r5, #0]
 801c71e:	2b00      	cmp	r3, #0
 801c720:	d0c4      	beq.n	801c6ac <__sflush_r+0x34>
 801c722:	2b1d      	cmp	r3, #29
 801c724:	d001      	beq.n	801c72a <__sflush_r+0xb2>
 801c726:	2b16      	cmp	r3, #22
 801c728:	d101      	bne.n	801c72e <__sflush_r+0xb6>
 801c72a:	602f      	str	r7, [r5, #0]
 801c72c:	e7b1      	b.n	801c692 <__sflush_r+0x1a>
 801c72e:	89a3      	ldrh	r3, [r4, #12]
 801c730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c734:	81a3      	strh	r3, [r4, #12]
 801c736:	e7ad      	b.n	801c694 <__sflush_r+0x1c>
 801c738:	690f      	ldr	r7, [r1, #16]
 801c73a:	2f00      	cmp	r7, #0
 801c73c:	d0a9      	beq.n	801c692 <__sflush_r+0x1a>
 801c73e:	0793      	lsls	r3, r2, #30
 801c740:	680e      	ldr	r6, [r1, #0]
 801c742:	bf08      	it	eq
 801c744:	694b      	ldreq	r3, [r1, #20]
 801c746:	600f      	str	r7, [r1, #0]
 801c748:	bf18      	it	ne
 801c74a:	2300      	movne	r3, #0
 801c74c:	eba6 0807 	sub.w	r8, r6, r7
 801c750:	608b      	str	r3, [r1, #8]
 801c752:	f1b8 0f00 	cmp.w	r8, #0
 801c756:	dd9c      	ble.n	801c692 <__sflush_r+0x1a>
 801c758:	6a21      	ldr	r1, [r4, #32]
 801c75a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c75c:	4643      	mov	r3, r8
 801c75e:	463a      	mov	r2, r7
 801c760:	4628      	mov	r0, r5
 801c762:	47b0      	blx	r6
 801c764:	2800      	cmp	r0, #0
 801c766:	dc06      	bgt.n	801c776 <__sflush_r+0xfe>
 801c768:	89a3      	ldrh	r3, [r4, #12]
 801c76a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c76e:	81a3      	strh	r3, [r4, #12]
 801c770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c774:	e78e      	b.n	801c694 <__sflush_r+0x1c>
 801c776:	4407      	add	r7, r0
 801c778:	eba8 0800 	sub.w	r8, r8, r0
 801c77c:	e7e9      	b.n	801c752 <__sflush_r+0xda>
 801c77e:	bf00      	nop
 801c780:	20400001 	.word	0x20400001

0801c784 <_fflush_r>:
 801c784:	b538      	push	{r3, r4, r5, lr}
 801c786:	690b      	ldr	r3, [r1, #16]
 801c788:	4605      	mov	r5, r0
 801c78a:	460c      	mov	r4, r1
 801c78c:	b913      	cbnz	r3, 801c794 <_fflush_r+0x10>
 801c78e:	2500      	movs	r5, #0
 801c790:	4628      	mov	r0, r5
 801c792:	bd38      	pop	{r3, r4, r5, pc}
 801c794:	b118      	cbz	r0, 801c79e <_fflush_r+0x1a>
 801c796:	6983      	ldr	r3, [r0, #24]
 801c798:	b90b      	cbnz	r3, 801c79e <_fflush_r+0x1a>
 801c79a:	f7fe ff0b 	bl	801b5b4 <__sinit>
 801c79e:	4b14      	ldr	r3, [pc, #80]	; (801c7f0 <_fflush_r+0x6c>)
 801c7a0:	429c      	cmp	r4, r3
 801c7a2:	d11b      	bne.n	801c7dc <_fflush_r+0x58>
 801c7a4:	686c      	ldr	r4, [r5, #4]
 801c7a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c7aa:	2b00      	cmp	r3, #0
 801c7ac:	d0ef      	beq.n	801c78e <_fflush_r+0xa>
 801c7ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c7b0:	07d0      	lsls	r0, r2, #31
 801c7b2:	d404      	bmi.n	801c7be <_fflush_r+0x3a>
 801c7b4:	0599      	lsls	r1, r3, #22
 801c7b6:	d402      	bmi.n	801c7be <_fflush_r+0x3a>
 801c7b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c7ba:	f7fe ffb0 	bl	801b71e <__retarget_lock_acquire_recursive>
 801c7be:	4628      	mov	r0, r5
 801c7c0:	4621      	mov	r1, r4
 801c7c2:	f7ff ff59 	bl	801c678 <__sflush_r>
 801c7c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c7c8:	07da      	lsls	r2, r3, #31
 801c7ca:	4605      	mov	r5, r0
 801c7cc:	d4e0      	bmi.n	801c790 <_fflush_r+0xc>
 801c7ce:	89a3      	ldrh	r3, [r4, #12]
 801c7d0:	059b      	lsls	r3, r3, #22
 801c7d2:	d4dd      	bmi.n	801c790 <_fflush_r+0xc>
 801c7d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c7d6:	f7fe ffa3 	bl	801b720 <__retarget_lock_release_recursive>
 801c7da:	e7d9      	b.n	801c790 <_fflush_r+0xc>
 801c7dc:	4b05      	ldr	r3, [pc, #20]	; (801c7f4 <_fflush_r+0x70>)
 801c7de:	429c      	cmp	r4, r3
 801c7e0:	d101      	bne.n	801c7e6 <_fflush_r+0x62>
 801c7e2:	68ac      	ldr	r4, [r5, #8]
 801c7e4:	e7df      	b.n	801c7a6 <_fflush_r+0x22>
 801c7e6:	4b04      	ldr	r3, [pc, #16]	; (801c7f8 <_fflush_r+0x74>)
 801c7e8:	429c      	cmp	r4, r3
 801c7ea:	bf08      	it	eq
 801c7ec:	68ec      	ldreq	r4, [r5, #12]
 801c7ee:	e7da      	b.n	801c7a6 <_fflush_r+0x22>
 801c7f0:	0801d47c 	.word	0x0801d47c
 801c7f4:	0801d49c 	.word	0x0801d49c
 801c7f8:	0801d45c 	.word	0x0801d45c

0801c7fc <_lseek_r>:
 801c7fc:	b538      	push	{r3, r4, r5, lr}
 801c7fe:	4d07      	ldr	r5, [pc, #28]	; (801c81c <_lseek_r+0x20>)
 801c800:	4604      	mov	r4, r0
 801c802:	4608      	mov	r0, r1
 801c804:	4611      	mov	r1, r2
 801c806:	2200      	movs	r2, #0
 801c808:	602a      	str	r2, [r5, #0]
 801c80a:	461a      	mov	r2, r3
 801c80c:	f000 f960 	bl	801cad0 <_lseek>
 801c810:	1c43      	adds	r3, r0, #1
 801c812:	d102      	bne.n	801c81a <_lseek_r+0x1e>
 801c814:	682b      	ldr	r3, [r5, #0]
 801c816:	b103      	cbz	r3, 801c81a <_lseek_r+0x1e>
 801c818:	6023      	str	r3, [r4, #0]
 801c81a:	bd38      	pop	{r3, r4, r5, pc}
 801c81c:	20002fc8 	.word	0x20002fc8

0801c820 <__swhatbuf_r>:
 801c820:	b570      	push	{r4, r5, r6, lr}
 801c822:	460e      	mov	r6, r1
 801c824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c828:	2900      	cmp	r1, #0
 801c82a:	b096      	sub	sp, #88	; 0x58
 801c82c:	4614      	mov	r4, r2
 801c82e:	461d      	mov	r5, r3
 801c830:	da08      	bge.n	801c844 <__swhatbuf_r+0x24>
 801c832:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801c836:	2200      	movs	r2, #0
 801c838:	602a      	str	r2, [r5, #0]
 801c83a:	061a      	lsls	r2, r3, #24
 801c83c:	d410      	bmi.n	801c860 <__swhatbuf_r+0x40>
 801c83e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c842:	e00e      	b.n	801c862 <__swhatbuf_r+0x42>
 801c844:	466a      	mov	r2, sp
 801c846:	f000 f8f1 	bl	801ca2c <_fstat_r>
 801c84a:	2800      	cmp	r0, #0
 801c84c:	dbf1      	blt.n	801c832 <__swhatbuf_r+0x12>
 801c84e:	9a01      	ldr	r2, [sp, #4]
 801c850:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c854:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c858:	425a      	negs	r2, r3
 801c85a:	415a      	adcs	r2, r3
 801c85c:	602a      	str	r2, [r5, #0]
 801c85e:	e7ee      	b.n	801c83e <__swhatbuf_r+0x1e>
 801c860:	2340      	movs	r3, #64	; 0x40
 801c862:	2000      	movs	r0, #0
 801c864:	6023      	str	r3, [r4, #0]
 801c866:	b016      	add	sp, #88	; 0x58
 801c868:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c86c <__smakebuf_r>:
 801c86c:	898b      	ldrh	r3, [r1, #12]
 801c86e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c870:	079d      	lsls	r5, r3, #30
 801c872:	4606      	mov	r6, r0
 801c874:	460c      	mov	r4, r1
 801c876:	d507      	bpl.n	801c888 <__smakebuf_r+0x1c>
 801c878:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c87c:	6023      	str	r3, [r4, #0]
 801c87e:	6123      	str	r3, [r4, #16]
 801c880:	2301      	movs	r3, #1
 801c882:	6163      	str	r3, [r4, #20]
 801c884:	b002      	add	sp, #8
 801c886:	bd70      	pop	{r4, r5, r6, pc}
 801c888:	ab01      	add	r3, sp, #4
 801c88a:	466a      	mov	r2, sp
 801c88c:	f7ff ffc8 	bl	801c820 <__swhatbuf_r>
 801c890:	9900      	ldr	r1, [sp, #0]
 801c892:	4605      	mov	r5, r0
 801c894:	4630      	mov	r0, r6
 801c896:	f7fd f9e5 	bl	8019c64 <_malloc_r>
 801c89a:	b948      	cbnz	r0, 801c8b0 <__smakebuf_r+0x44>
 801c89c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c8a0:	059a      	lsls	r2, r3, #22
 801c8a2:	d4ef      	bmi.n	801c884 <__smakebuf_r+0x18>
 801c8a4:	f023 0303 	bic.w	r3, r3, #3
 801c8a8:	f043 0302 	orr.w	r3, r3, #2
 801c8ac:	81a3      	strh	r3, [r4, #12]
 801c8ae:	e7e3      	b.n	801c878 <__smakebuf_r+0xc>
 801c8b0:	4b0d      	ldr	r3, [pc, #52]	; (801c8e8 <__smakebuf_r+0x7c>)
 801c8b2:	62b3      	str	r3, [r6, #40]	; 0x28
 801c8b4:	89a3      	ldrh	r3, [r4, #12]
 801c8b6:	6020      	str	r0, [r4, #0]
 801c8b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c8bc:	81a3      	strh	r3, [r4, #12]
 801c8be:	9b00      	ldr	r3, [sp, #0]
 801c8c0:	6163      	str	r3, [r4, #20]
 801c8c2:	9b01      	ldr	r3, [sp, #4]
 801c8c4:	6120      	str	r0, [r4, #16]
 801c8c6:	b15b      	cbz	r3, 801c8e0 <__smakebuf_r+0x74>
 801c8c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c8cc:	4630      	mov	r0, r6
 801c8ce:	f000 f8bf 	bl	801ca50 <_isatty_r>
 801c8d2:	b128      	cbz	r0, 801c8e0 <__smakebuf_r+0x74>
 801c8d4:	89a3      	ldrh	r3, [r4, #12]
 801c8d6:	f023 0303 	bic.w	r3, r3, #3
 801c8da:	f043 0301 	orr.w	r3, r3, #1
 801c8de:	81a3      	strh	r3, [r4, #12]
 801c8e0:	89a0      	ldrh	r0, [r4, #12]
 801c8e2:	4305      	orrs	r5, r0
 801c8e4:	81a5      	strh	r5, [r4, #12]
 801c8e6:	e7cd      	b.n	801c884 <__smakebuf_r+0x18>
 801c8e8:	0801b54d 	.word	0x0801b54d

0801c8ec <memmove>:
 801c8ec:	4288      	cmp	r0, r1
 801c8ee:	b510      	push	{r4, lr}
 801c8f0:	eb01 0402 	add.w	r4, r1, r2
 801c8f4:	d902      	bls.n	801c8fc <memmove+0x10>
 801c8f6:	4284      	cmp	r4, r0
 801c8f8:	4623      	mov	r3, r4
 801c8fa:	d807      	bhi.n	801c90c <memmove+0x20>
 801c8fc:	1e43      	subs	r3, r0, #1
 801c8fe:	42a1      	cmp	r1, r4
 801c900:	d008      	beq.n	801c914 <memmove+0x28>
 801c902:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c906:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c90a:	e7f8      	b.n	801c8fe <memmove+0x12>
 801c90c:	4402      	add	r2, r0
 801c90e:	4601      	mov	r1, r0
 801c910:	428a      	cmp	r2, r1
 801c912:	d100      	bne.n	801c916 <memmove+0x2a>
 801c914:	bd10      	pop	{r4, pc}
 801c916:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c91a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c91e:	e7f7      	b.n	801c910 <memmove+0x24>

0801c920 <_realloc_r>:
 801c920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c924:	4680      	mov	r8, r0
 801c926:	4614      	mov	r4, r2
 801c928:	460e      	mov	r6, r1
 801c92a:	b921      	cbnz	r1, 801c936 <_realloc_r+0x16>
 801c92c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c930:	4611      	mov	r1, r2
 801c932:	f7fd b997 	b.w	8019c64 <_malloc_r>
 801c936:	b92a      	cbnz	r2, 801c944 <_realloc_r+0x24>
 801c938:	f7fd f928 	bl	8019b8c <_free_r>
 801c93c:	4625      	mov	r5, r4
 801c93e:	4628      	mov	r0, r5
 801c940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c944:	f000 f894 	bl	801ca70 <_malloc_usable_size_r>
 801c948:	4284      	cmp	r4, r0
 801c94a:	4607      	mov	r7, r0
 801c94c:	d802      	bhi.n	801c954 <_realloc_r+0x34>
 801c94e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801c952:	d812      	bhi.n	801c97a <_realloc_r+0x5a>
 801c954:	4621      	mov	r1, r4
 801c956:	4640      	mov	r0, r8
 801c958:	f7fd f984 	bl	8019c64 <_malloc_r>
 801c95c:	4605      	mov	r5, r0
 801c95e:	2800      	cmp	r0, #0
 801c960:	d0ed      	beq.n	801c93e <_realloc_r+0x1e>
 801c962:	42bc      	cmp	r4, r7
 801c964:	4622      	mov	r2, r4
 801c966:	4631      	mov	r1, r6
 801c968:	bf28      	it	cs
 801c96a:	463a      	movcs	r2, r7
 801c96c:	f7fd f8f8 	bl	8019b60 <memcpy>
 801c970:	4631      	mov	r1, r6
 801c972:	4640      	mov	r0, r8
 801c974:	f7fd f90a 	bl	8019b8c <_free_r>
 801c978:	e7e1      	b.n	801c93e <_realloc_r+0x1e>
 801c97a:	4635      	mov	r5, r6
 801c97c:	e7df      	b.n	801c93e <_realloc_r+0x1e>
	...

0801c980 <_read_r>:
 801c980:	b538      	push	{r3, r4, r5, lr}
 801c982:	4d07      	ldr	r5, [pc, #28]	; (801c9a0 <_read_r+0x20>)
 801c984:	4604      	mov	r4, r0
 801c986:	4608      	mov	r0, r1
 801c988:	4611      	mov	r1, r2
 801c98a:	2200      	movs	r2, #0
 801c98c:	602a      	str	r2, [r5, #0]
 801c98e:	461a      	mov	r2, r3
 801c990:	f000 f8a6 	bl	801cae0 <_read>
 801c994:	1c43      	adds	r3, r0, #1
 801c996:	d102      	bne.n	801c99e <_read_r+0x1e>
 801c998:	682b      	ldr	r3, [r5, #0]
 801c99a:	b103      	cbz	r3, 801c99e <_read_r+0x1e>
 801c99c:	6023      	str	r3, [r4, #0]
 801c99e:	bd38      	pop	{r3, r4, r5, pc}
 801c9a0:	20002fc8 	.word	0x20002fc8

0801c9a4 <_raise_r>:
 801c9a4:	291f      	cmp	r1, #31
 801c9a6:	b538      	push	{r3, r4, r5, lr}
 801c9a8:	4604      	mov	r4, r0
 801c9aa:	460d      	mov	r5, r1
 801c9ac:	d904      	bls.n	801c9b8 <_raise_r+0x14>
 801c9ae:	2316      	movs	r3, #22
 801c9b0:	6003      	str	r3, [r0, #0]
 801c9b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c9b6:	bd38      	pop	{r3, r4, r5, pc}
 801c9b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801c9ba:	b112      	cbz	r2, 801c9c2 <_raise_r+0x1e>
 801c9bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c9c0:	b94b      	cbnz	r3, 801c9d6 <_raise_r+0x32>
 801c9c2:	4620      	mov	r0, r4
 801c9c4:	f000 f830 	bl	801ca28 <_getpid_r>
 801c9c8:	462a      	mov	r2, r5
 801c9ca:	4601      	mov	r1, r0
 801c9cc:	4620      	mov	r0, r4
 801c9ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c9d2:	f000 b817 	b.w	801ca04 <_kill_r>
 801c9d6:	2b01      	cmp	r3, #1
 801c9d8:	d00a      	beq.n	801c9f0 <_raise_r+0x4c>
 801c9da:	1c59      	adds	r1, r3, #1
 801c9dc:	d103      	bne.n	801c9e6 <_raise_r+0x42>
 801c9de:	2316      	movs	r3, #22
 801c9e0:	6003      	str	r3, [r0, #0]
 801c9e2:	2001      	movs	r0, #1
 801c9e4:	e7e7      	b.n	801c9b6 <_raise_r+0x12>
 801c9e6:	2400      	movs	r4, #0
 801c9e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c9ec:	4628      	mov	r0, r5
 801c9ee:	4798      	blx	r3
 801c9f0:	2000      	movs	r0, #0
 801c9f2:	e7e0      	b.n	801c9b6 <_raise_r+0x12>

0801c9f4 <raise>:
 801c9f4:	4b02      	ldr	r3, [pc, #8]	; (801ca00 <raise+0xc>)
 801c9f6:	4601      	mov	r1, r0
 801c9f8:	6818      	ldr	r0, [r3, #0]
 801c9fa:	f7ff bfd3 	b.w	801c9a4 <_raise_r>
 801c9fe:	bf00      	nop
 801ca00:	20000100 	.word	0x20000100

0801ca04 <_kill_r>:
 801ca04:	b538      	push	{r3, r4, r5, lr}
 801ca06:	4d07      	ldr	r5, [pc, #28]	; (801ca24 <_kill_r+0x20>)
 801ca08:	2300      	movs	r3, #0
 801ca0a:	4604      	mov	r4, r0
 801ca0c:	4608      	mov	r0, r1
 801ca0e:	4611      	mov	r1, r2
 801ca10:	602b      	str	r3, [r5, #0]
 801ca12:	f000 f855 	bl	801cac0 <_kill>
 801ca16:	1c43      	adds	r3, r0, #1
 801ca18:	d102      	bne.n	801ca20 <_kill_r+0x1c>
 801ca1a:	682b      	ldr	r3, [r5, #0]
 801ca1c:	b103      	cbz	r3, 801ca20 <_kill_r+0x1c>
 801ca1e:	6023      	str	r3, [r4, #0]
 801ca20:	bd38      	pop	{r3, r4, r5, pc}
 801ca22:	bf00      	nop
 801ca24:	20002fc8 	.word	0x20002fc8

0801ca28 <_getpid_r>:
 801ca28:	f000 b83a 	b.w	801caa0 <_getpid>

0801ca2c <_fstat_r>:
 801ca2c:	b538      	push	{r3, r4, r5, lr}
 801ca2e:	4d07      	ldr	r5, [pc, #28]	; (801ca4c <_fstat_r+0x20>)
 801ca30:	2300      	movs	r3, #0
 801ca32:	4604      	mov	r4, r0
 801ca34:	4608      	mov	r0, r1
 801ca36:	4611      	mov	r1, r2
 801ca38:	602b      	str	r3, [r5, #0]
 801ca3a:	f000 f829 	bl	801ca90 <_fstat>
 801ca3e:	1c43      	adds	r3, r0, #1
 801ca40:	d102      	bne.n	801ca48 <_fstat_r+0x1c>
 801ca42:	682b      	ldr	r3, [r5, #0]
 801ca44:	b103      	cbz	r3, 801ca48 <_fstat_r+0x1c>
 801ca46:	6023      	str	r3, [r4, #0]
 801ca48:	bd38      	pop	{r3, r4, r5, pc}
 801ca4a:	bf00      	nop
 801ca4c:	20002fc8 	.word	0x20002fc8

0801ca50 <_isatty_r>:
 801ca50:	b538      	push	{r3, r4, r5, lr}
 801ca52:	4d06      	ldr	r5, [pc, #24]	; (801ca6c <_isatty_r+0x1c>)
 801ca54:	2300      	movs	r3, #0
 801ca56:	4604      	mov	r4, r0
 801ca58:	4608      	mov	r0, r1
 801ca5a:	602b      	str	r3, [r5, #0]
 801ca5c:	f000 f828 	bl	801cab0 <_isatty>
 801ca60:	1c43      	adds	r3, r0, #1
 801ca62:	d102      	bne.n	801ca6a <_isatty_r+0x1a>
 801ca64:	682b      	ldr	r3, [r5, #0]
 801ca66:	b103      	cbz	r3, 801ca6a <_isatty_r+0x1a>
 801ca68:	6023      	str	r3, [r4, #0]
 801ca6a:	bd38      	pop	{r3, r4, r5, pc}
 801ca6c:	20002fc8 	.word	0x20002fc8

0801ca70 <_malloc_usable_size_r>:
 801ca70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ca74:	1f18      	subs	r0, r3, #4
 801ca76:	2b00      	cmp	r3, #0
 801ca78:	bfbc      	itt	lt
 801ca7a:	580b      	ldrlt	r3, [r1, r0]
 801ca7c:	18c0      	addlt	r0, r0, r3
 801ca7e:	4770      	bx	lr

0801ca80 <_close>:
 801ca80:	4b02      	ldr	r3, [pc, #8]	; (801ca8c <_close+0xc>)
 801ca82:	2258      	movs	r2, #88	; 0x58
 801ca84:	601a      	str	r2, [r3, #0]
 801ca86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ca8a:	4770      	bx	lr
 801ca8c:	20002fc8 	.word	0x20002fc8

0801ca90 <_fstat>:
 801ca90:	4b02      	ldr	r3, [pc, #8]	; (801ca9c <_fstat+0xc>)
 801ca92:	2258      	movs	r2, #88	; 0x58
 801ca94:	601a      	str	r2, [r3, #0]
 801ca96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ca9a:	4770      	bx	lr
 801ca9c:	20002fc8 	.word	0x20002fc8

0801caa0 <_getpid>:
 801caa0:	4b02      	ldr	r3, [pc, #8]	; (801caac <_getpid+0xc>)
 801caa2:	2258      	movs	r2, #88	; 0x58
 801caa4:	601a      	str	r2, [r3, #0]
 801caa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801caaa:	4770      	bx	lr
 801caac:	20002fc8 	.word	0x20002fc8

0801cab0 <_isatty>:
 801cab0:	4b02      	ldr	r3, [pc, #8]	; (801cabc <_isatty+0xc>)
 801cab2:	2258      	movs	r2, #88	; 0x58
 801cab4:	601a      	str	r2, [r3, #0]
 801cab6:	2000      	movs	r0, #0
 801cab8:	4770      	bx	lr
 801caba:	bf00      	nop
 801cabc:	20002fc8 	.word	0x20002fc8

0801cac0 <_kill>:
 801cac0:	4b02      	ldr	r3, [pc, #8]	; (801cacc <_kill+0xc>)
 801cac2:	2258      	movs	r2, #88	; 0x58
 801cac4:	601a      	str	r2, [r3, #0]
 801cac6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801caca:	4770      	bx	lr
 801cacc:	20002fc8 	.word	0x20002fc8

0801cad0 <_lseek>:
 801cad0:	4b02      	ldr	r3, [pc, #8]	; (801cadc <_lseek+0xc>)
 801cad2:	2258      	movs	r2, #88	; 0x58
 801cad4:	601a      	str	r2, [r3, #0]
 801cad6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cada:	4770      	bx	lr
 801cadc:	20002fc8 	.word	0x20002fc8

0801cae0 <_read>:
 801cae0:	4b02      	ldr	r3, [pc, #8]	; (801caec <_read+0xc>)
 801cae2:	2258      	movs	r2, #88	; 0x58
 801cae4:	601a      	str	r2, [r3, #0]
 801cae6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801caea:	4770      	bx	lr
 801caec:	20002fc8 	.word	0x20002fc8

0801caf0 <_sbrk>:
 801caf0:	4a04      	ldr	r2, [pc, #16]	; (801cb04 <_sbrk+0x14>)
 801caf2:	6811      	ldr	r1, [r2, #0]
 801caf4:	4603      	mov	r3, r0
 801caf6:	b909      	cbnz	r1, 801cafc <_sbrk+0xc>
 801caf8:	4903      	ldr	r1, [pc, #12]	; (801cb08 <_sbrk+0x18>)
 801cafa:	6011      	str	r1, [r2, #0]
 801cafc:	6810      	ldr	r0, [r2, #0]
 801cafe:	4403      	add	r3, r0
 801cb00:	6013      	str	r3, [r2, #0]
 801cb02:	4770      	bx	lr
 801cb04:	20002fcc 	.word	0x20002fcc
 801cb08:	20002fd0 	.word	0x20002fd0

0801cb0c <_write>:
 801cb0c:	4b02      	ldr	r3, [pc, #8]	; (801cb18 <_write+0xc>)
 801cb0e:	2258      	movs	r2, #88	; 0x58
 801cb10:	601a      	str	r2, [r3, #0]
 801cb12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cb16:	4770      	bx	lr
 801cb18:	20002fc8 	.word	0x20002fc8

0801cb1c <_exit>:
 801cb1c:	e7fe      	b.n	801cb1c <_exit>
	...

0801cb20 <_init>:
 801cb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cb22:	bf00      	nop
 801cb24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cb26:	bc08      	pop	{r3}
 801cb28:	469e      	mov	lr, r3
 801cb2a:	4770      	bx	lr

0801cb2c <_fini>:
 801cb2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cb2e:	bf00      	nop
 801cb30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cb32:	bc08      	pop	{r3}
 801cb34:	469e      	mov	lr, r3
 801cb36:	4770      	bx	lr
